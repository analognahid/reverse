3000:	endbr64; _init
3004:	sub     rsp, 8
3008:	mov     rax, cs:__gmon_start___ptr
300F:	test    rax, rax
3012:	jz      short loc_3016
3014:	call    rax ; __gmon_start__
3016:	add     rsp, 8
301A:	retn
3020:	push    cs:qword_ED88
3026:	bnd jmp cs:qword_ED90
3030:	endbr64
3034:	push    0
3039:	bnd jmp sub_3020
3040:	endbr64
3044:	push    1
3049:	bnd jmp sub_3020
3050:	endbr64
3054:	push    2
3059:	bnd jmp sub_3020
3060:	endbr64
3064:	push    3
3069:	bnd jmp sub_3020
3070:	endbr64
3074:	push    4
3079:	bnd jmp sub_3020
3080:	endbr64
3084:	push    5
3089:	bnd jmp sub_3020
3090:	endbr64
3094:	push    6
3099:	bnd jmp sub_3020
30A0:	endbr64
30A4:	push    7
30A9:	bnd jmp sub_3020
30B0:	endbr64
30B4:	push    8
30B9:	bnd jmp sub_3020
30C0:	endbr64
30C4:	push    9
30C9:	bnd jmp sub_3020
30D0:	endbr64
30D4:	push    0Ah
30D9:	bnd jmp sub_3020
30E0:	endbr64
30E4:	push    0Bh
30E9:	bnd jmp sub_3020
30F0:	endbr64
30F4:	push    0Ch
30F9:	bnd jmp sub_3020
3100:	endbr64
3104:	push    0Dh
3109:	bnd jmp sub_3020
3110:	endbr64
3114:	push    0Eh
3119:	bnd jmp sub_3020
3120:	endbr64
3124:	push    0Fh
3129:	bnd jmp sub_3020
3130:	endbr64
3134:	push    10h
3139:	bnd jmp sub_3020
3140:	endbr64
3144:	push    11h
3149:	bnd jmp sub_3020
3150:	endbr64
3154:	push    12h
3159:	bnd jmp sub_3020
3160:	endbr64
3164:	push    13h
3169:	bnd jmp sub_3020
3170:	endbr64
3174:	push    14h
3179:	bnd jmp sub_3020
3180:	endbr64
3184:	push    15h
3189:	bnd jmp sub_3020
3190:	endbr64
3194:	push    16h
3199:	bnd jmp sub_3020
31A0:	endbr64
31A4:	push    17h
31A9:	bnd jmp sub_3020
31B0:	endbr64
31B4:	push    18h
31B9:	bnd jmp sub_3020
31C0:	endbr64
31C4:	push    19h
31C9:	bnd jmp sub_3020
31D0:	endbr64
31D4:	push    1Ah
31D9:	bnd jmp sub_3020
31E0:	endbr64
31E4:	push    1Bh
31E9:	bnd jmp sub_3020
31F0:	endbr64
31F4:	push    1Ch
31F9:	bnd jmp sub_3020
3200:	endbr64
3204:	push    1Dh
3209:	bnd jmp sub_3020
3210:	endbr64
3214:	push    1Eh
3219:	bnd jmp sub_3020
3220:	endbr64
3224:	push    1Fh
3229:	bnd jmp sub_3020
3230:	endbr64
3234:	push    20h ; ' '
3239:	bnd jmp sub_3020
3240:	endbr64
3244:	push    21h ; '!'
3249:	bnd jmp sub_3020
3250:	endbr64
3254:	push    22h ; '''
3259:	bnd jmp sub_3020
3260:	endbr64
3264:	push    23h ; '#'
3269:	bnd jmp sub_3020
3270:	endbr64
3274:	push    24h ; '$'
3279:	bnd jmp sub_3020
3280:	endbr64
3284:	push    25h ; '%'
3289:	bnd jmp sub_3020
3290:	endbr64
3294:	push    26h ; '&'
3299:	bnd jmp sub_3020
32A0:	endbr64
32A4:	push    27h ; '''
32A9:	bnd jmp sub_3020
32B0:	endbr64
32B4:	push    28h ; '('
32B9:	bnd jmp sub_3020
32C0:	endbr64
32C4:	push    29h ; ')'
32C9:	bnd jmp sub_3020
32D0:	endbr64
32D4:	push    2Ah ; '*'
32D9:	bnd jmp sub_3020
32E0:	endbr64
32E4:	push    2Bh ; '+'
32E9:	bnd jmp sub_3020
32F0:	endbr64
32F4:	push    2Ch ; ','
32F9:	bnd jmp sub_3020
3300:	endbr64
3304:	push    2Dh ; '-'
3309:	bnd jmp sub_3020
3310:	endbr64
3314:	push    2Eh ; '.'
3319:	bnd jmp sub_3020
3320:	endbr64
3324:	push    2Fh ; '/'
3329:	bnd jmp sub_3020
3330:	endbr64
3334:	push    30h ; '0'
3339:	bnd jmp sub_3020
3340:	endbr64
3344:	push    31h ; '1'
3349:	bnd jmp sub_3020
3350:	endbr64
3354:	push    32h ; '2'
3359:	bnd jmp sub_3020
3360:	endbr64
3364:	push    33h ; '3'
3369:	bnd jmp sub_3020
3370:	endbr64
3374:	push    34h ; '4'
3379:	bnd jmp sub_3020
3380:	endbr64
3384:	push    35h ; '5'
3389:	bnd jmp sub_3020
3390:	endbr64
3394:	push    36h ; '6'
3399:	bnd jmp sub_3020
33A0:	endbr64
33A4:	push    37h ; '7'
33A9:	bnd jmp sub_3020
33B0:	endbr64
33B4:	push    38h ; '8'
33B9:	bnd jmp sub_3020
33C0:	endbr64
33C4:	push    39h ; '9'
33C9:	bnd jmp sub_3020
33D0:	endbr64
33D4:	push    3Ah ; ':'
33D9:	bnd jmp sub_3020
33E0:	endbr64
33E4:	push    3Bh ; ';'
33E9:	bnd jmp sub_3020
33F0:	endbr64
33F4:	push    3Ch ; '<'
33F9:	bnd jmp sub_3020
3400:	endbr64
3404:	push    3Dh ; '='
3409:	bnd jmp sub_3020
3410:	endbr64
3414:	push    3Eh ; '>'
3419:	bnd jmp sub_3020
3420:	endbr64
3424:	push    3Fh ; '?'
3429:	bnd jmp sub_3020
3430:	endbr64
3434:	push    40h ; '@'
3439:	bnd jmp sub_3020
3440:	endbr64
3444:	push    41h ; 'A'
3449:	bnd jmp sub_3020
3450:	endbr64
3454:	push    42h ; 'B'
3459:	bnd jmp sub_3020
3460:	endbr64
3464:	push    43h ; 'C'
3469:	bnd jmp sub_3020
3470:	endbr64
3474:	push    44h ; 'D'
3479:	bnd jmp sub_3020
3480:	endbr64
3484:	push    45h ; 'E'
3489:	bnd jmp sub_3020
3490:	endbr64
3494:	bnd jmp cs:write_ptr
34A0:	endbr64
34A4:	bnd jmp cs:read_ptr
34B0:	endbr64
34B4:	bnd jmp cs:__cxa_finalize_ptr
34C0:	endbr64
34C4:	bnd jmp cs:getenv_ptr
34D0:	endbr64
34D4:	bnd jmp cs:free_ptr
34E0:	endbr64
34E4:	bnd jmp cs:putchar_ptr
34F0:	endbr64
34F4:	bnd jmp cs:tputs_ptr
3500:	endbr64
3504:	bnd jmp cs:localtime_ptr
3510:	endbr64
3514:	bnd jmp cs:abort_ptr
3520:	endbr64
3524:	bnd jmp cs:__errno_location_ptr
3530:	endbr64
3534:	bnd jmp cs:strncmp_ptr
3540:	endbr64
3544:	bnd jmp cs:strcpy_ptr
3550:	endbr64
3554:	bnd jmp cs:toupper_ptr
3560:	endbr64
3564:	bnd jmp cs:puts_ptr
3570:	endbr64
3574:	bnd jmp cs:isatty_ptr
3580:	endbr64
3584:	bnd jmp cs:readlink_ptr
3590:	endbr64
3594:	bnd jmp cs:getpid_ptr
35A0:	endbr64
35A4:	bnd jmp cs:fclose_ptr
35B0:	endbr64
35B4:	bnd jmp cs:tgoto_ptr
35C0:	endbr64
35C4:	bnd jmp cs:getpwuid_ptr
35D0:	endbr64
35D4:	bnd jmp cs:strlen_ptr
35E0:	endbr64
35E4:	bnd jmp cs:__stack_chk_fail_ptr
35F0:	endbr64
35F4:	bnd jmp cs:strchr_ptr
3600:	endbr64
3604:	bnd jmp cs:printf_ptr
3610:	endbr64
3614:	bnd jmp cs:strrchr_ptr
3620:	endbr64
3624:	bnd jmp cs:memset_ptr
3630:	endbr64
3634:	bnd jmp cs:geteuid_ptr
3640:	endbr64
3644:	bnd jmp cs:ioctl_ptr
3650:	endbr64
3654:	bnd jmp cs:getcwd_ptr
3660:	endbr64
3664:	bnd jmp cs:fgetc_ptr
3670:	endbr64
3674:	bnd jmp cs:alarm_ptr
3680:	endbr64
3684:	bnd jmp cs:close_ptr
3690:	endbr64
3694:	bnd jmp cs:lstat_ptr
36A0:	endbr64
36A4:	bnd jmp cs:memcmp_ptr
36B0:	endbr64
36B4:	bnd jmp cs:fgets_ptr
36C0:	endbr64
36C4:	bnd jmp cs:calloc_ptr
36D0:	endbr64
36D4:	bnd jmp cs:putenv_ptr
36E0:	endbr64
36E4:	bnd jmp cs:strcmp_ptr
36F0:	endbr64
36F4:	bnd jmp cs:signal_ptr
3700:	endbr64
3704:	bnd jmp cs:fprintf_ptr
3710:	endbr64
3714:	bnd jmp cs:ftell_ptr
3720:	endbr64
3724:	bnd jmp cs:stat_ptr
3730:	endbr64
3734:	bnd jmp cs:memcpy_ptr
3740:	endbr64
3744:	bnd jmp cs:kill_ptr
3750:	endbr64
3754:	bnd jmp cs:time_ptr
3760:	endbr64
3764:	bnd jmp cs:malloc_ptr
3770:	endbr64
3774:	bnd jmp cs:fflush_ptr
3780:	endbr64
3784:	bnd jmp cs:tgetnum_ptr
3790:	endbr64
3794:	bnd jmp cs:__isoc99_sscanf_ptr
37A0:	endbr64
37A4:	bnd jmp cs:fseek_ptr
37B0:	endbr64
37B4:	bnd jmp cs:tgetflag_ptr
37C0:	endbr64
37C4:	bnd jmp cs:tgetstr_ptr
37D0:	endbr64
37D4:	bnd jmp cs:ttyname_ptr
37E0:	endbr64
37E4:	bnd jmp cs:realloc_ptr
37F0:	endbr64
37F4:	bnd jmp cs:setlocale_ptr
3800:	endbr64
3804:	bnd jmp cs:cfgetospeed_ptr
3810:	endbr64
3814:	bnd jmp cs:open64_ptr
3820:	endbr64
3824:	bnd jmp cs:tcgetattr_ptr
3830:	endbr64
3834:	bnd jmp cs:tcsetattr_ptr
3840:	endbr64
3844:	bnd jmp cs:open_ptr
3850:	endbr64
3854:	bnd jmp cs:fopen_ptr
3860:	endbr64
3864:	bnd jmp cs:tcflow_ptr
3870:	endbr64
3874:	bnd jmp cs:getopt_ptr
3880:	endbr64
3884:	bnd jmp cs:atoi_ptr
3890:	endbr64
3894:	bnd jmp cs:strcat_ptr
38A0:	endbr64
38A4:	bnd jmp cs:sprintf_ptr
38B0:	endbr64
38B4:	bnd jmp cs:exit_ptr
38C0:	endbr64
38C4:	bnd jmp cs:fwrite_ptr
38D0:	endbr64
38D4:	bnd jmp cs:lseek64_ptr
38E0:	endbr64
38E4:	bnd jmp cs:tgetent_ptr
38F0:	endbr64
38F4:	bnd jmp cs:sleep_ptr
3900:	endbr64
3904:	bnd jmp cs:fstat_ptr
3910:	endbr64
3914:	bnd jmp cs:__ctype_b_loc_ptr
3920:	endbr64
3924:	xor     ebp, ebp
3926:	mov     r9, rdx; rtld_fini
3929:	pop     rsi; argc
392A:	mov     rdx, rsp; ubp_av
392D:	and     rsp, 0FFFFFFFFFFFFFFF0h
3931:	push    rax
3932:	push    rsp; stack_end
3933:	xor     r8d, r8d; fini
3936:	xor     ecx, ecx; init
3938:	lea     rdi, main; main
393F:	call    cs:__libc_start_main_ptr
3945:	hlt
3950:	lea     rdi, __TMC_END__
3957:	lea     rax, __TMC_END__
395E:	cmp     rax, rdi
3961:	jz      short locret_3978
3963:	mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
396A:	test    rax, rax
396D:	jz      short locret_3978
396F:	jmp     rax
3978:	retn
3980:	lea     rdi, __TMC_END__
3987:	lea     rsi, __TMC_END__
398E:	sub     rsi, rdi
3991:	mov     rax, rsi
3994:	shr     rsi, 3Fh
3998:	sar     rax, 3
399C:	add     rsi, rax
399F:	sar     rsi, 1
39A2:	jz      short locret_39B8
39A4:	mov     rax, cs:_ITM_registerTMCloneTable_ptr
39AB:	test    rax, rax
39AE:	jz      short locret_39B8
39B0:	jmp     rax
39B8:	retn
39C0:	endbr64
39C4:	cmp     cs:completed_0, 0
39CB:	jnz     short locret_39F8
39CD:	push    rbp
39CE:	cmp     cs:__cxa_finalize_ptr, 0
39D6:	mov     rbp, rsp
39D9:	jz      short loc_39E7
39DB:	mov     rdi, cs:__dso_handle; void *
39E2:	call    __cxa_finalize
39E7:	call    deregister_tm_clones
39EC:	mov     cs:completed_0, 1
39F3:	pop     rbp
39F4:	retn
39F8:	retn
3A00:	endbr64
3A04:	jmp     register_tm_clones
3A09:	endbr64
3A0D:	push    rbp
3A0E:	mov     rbp, rsp
3A11:	sub     rsp, 10h
3A15:	mov     eax, cs:regular_file
3A1B:	test    eax, eax
3A1D:	jnz     short loc_3A26
3A1F:	mov     eax, 7FFFFFFFh
3A24:	jmp     short locret_3A79
3A26:	mov     eax, cs:fd
3A2C:	mov     edx, 1; whence
3A31:	mov     esi, 0; offset
3A36:	mov     edi, eax; fd
3A38:	call    _lseek64
3A3D:	mov     [rbp+current], rax
3A41:	mov     eax, cs:fd
3A47:	mov     edx, 2; whence
3A4C:	mov     esi, 0; offset
3A51:	mov     edi, eax; fd
3A53:	call    _lseek64
3A58:	mov     [rbp+length], rax
3A5C:	mov     eax, cs:fd
3A62:	mov     rcx, [rbp+current]
3A66:	mov     edx, 0; whence
3A6B:	mov     rsi, rcx; offset
3A6E:	mov     edi, eax; fd
3A70:	call    _lseek64
3A75:	mov     rax, [rbp+length]
3A79:	leave
3A7A:	retn
3A7B:	endbr64
3A7F:	push    rbp
3A80:	mov     rbp, rsp
3A83:	mov     eax, cs:tty_lines
3A89:	cmp     eax, 8
3A8C:	jle     short loc_3AC5
3A8E:	lea     rax, seek_txt; ' Seek at: '
3A95:	mov     rdi, rax; s
3A98:	call    _strlen
3A9D:	mov     edx, eax
3A9F:	mov     eax, cs:count
3AA5:	add     eax, edx
3AA7:	mov     edx, eax; x
3AA9:	mov     eax, cs:tty_lines
3AAF:	lea     ecx, [rax-5]
3AB2:	mov     rax, cs:file_window
3AB9:	mov     esi, ecx; y
3ABB:	mov     rdi, rax; window
3ABE:	call    window_goto
3AC3:	jmp     short loc_3AE8
3AC5:	mov     eax, cs:tty_columns
3ACB:	lea     edx, [rax-1]; x
3ACE:	mov     eax, cs:tty_lines
3AD4:	lea     ecx, [rax-1]
3AD7:	mov     rax, cs:file_window
3ADE:	mov     esi, ecx; y
3AE0:	mov     rdi, rax; window
3AE3:	call    window_goto
3AE8:	nop
3AE9:	pop     rbp
3AEA:	retn
3AEB:	endbr64
3AEF:	push    rbp
3AF0:	mov     rbp, rsp
3AF3:	mov     eax, cs:tty_columns
3AF9:	movsxd  rdx, eax; n
3AFC:	mov     rax, cs:global_buf
3B03:	mov     esi, 20h ; ' '; c
3B08:	mov     rdi, rax; s
3B0B:	call    _memset
3B10:	mov     rax, cs:title_text
3B17:	mov     rdi, rax; s
3B1A:	call    _strlen
3B1F:	mov     edx, eax
3B21:	mov     eax, cs:tty_columns
3B27:	cmp     edx, eax
3B29:	jge     short loc_3B3E
3B2B:	mov     rax, cs:title_text
3B32:	mov     rdi, rax; s
3B35:	call    _strlen
3B3A:	cdqe
3B3C:	jmp     short loc_3B46
3B3E:	mov     eax, cs:tty_columns
3B44:	cdqe
3B46:	mov     rsi, cs:title_text; src
3B4D:	mov     rcx, cs:global_buf
3B54:	mov     rdx, rax; n
3B57:	mov     rdi, rcx; dest
3B5A:	call    _memcpy
3B5F:	mov     edx, cs:ViewerColors+4; background
3B65:	mov     ecx, cs:ViewerColors
3B6B:	mov     eax, cs:ViewerColors+8
3B71:	mov     esi, ecx; foreground
3B73:	mov     edi, eax; brightness
3B75:	call    tty_colors
3B7A:	mov     rax, cs:title_window
3B81:	mov     edx, 0; x
3B86:	mov     esi, 0; y
3B8B:	mov     rdi, rax; window
3B8E:	call    window_goto
3B93:	mov     edx, cs:tty_columns; length
3B99:	mov     rcx, cs:global_buf
3BA0:	mov     rax, cs:title_window
3BA7:	mov     rsi, rcx; str
3BAA:	mov     rdi, rax; window
3BAD:	call    window_puts
3BB2:	nop
3BB3:	pop     rbp
3BB4:	retn
3BB5:	endbr64
3BB9:	push    rbp
3BBA:	mov     rbp, rsp
3BBD:	mov     eax, cs:tty_columns
3BC3:	movsxd  rdx, eax; n
3BC6:	mov     rax, cs:global_buf
3BCD:	mov     esi, 20h ; ' '; c
3BD2:	mov     rdi, rax; s
3BD5:	call    _memset
3BDA:	mov     rax, cs:header_text
3BE1:	mov     rdi, rax; s
3BE4:	call    _strlen
3BE9:	mov     edx, eax
3BEB:	mov     eax, cs:tty_columns
3BF1:	cmp     edx, eax
3BF3:	jge     short loc_3C08
3BF5:	mov     rax, cs:header_text
3BFC:	mov     rdi, rax; s
3BFF:	call    _strlen
3C04:	cdqe
3C06:	jmp     short loc_3C10
3C08:	mov     eax, cs:tty_columns
3C0E:	cdqe
3C10:	mov     rsi, cs:header_text; src
3C17:	mov     rcx, cs:global_buf
3C1E:	mov     rdx, rax; n
3C21:	mov     rdi, rcx; dest
3C24:	call    _memcpy
3C29:	mov     edx, cs:ViewerColors+10h; background
3C2F:	mov     ecx, cs:ViewerColors+0Ch
3C35:	mov     eax, cs:ViewerColors+14h
3C3B:	mov     esi, ecx; foreground
3C3D:	mov     edi, eax; brightness
3C3F:	call    tty_colors
3C44:	mov     rax, cs:header_window
3C4B:	mov     edx, 0; x
3C50:	mov     esi, 0; y
3C55:	mov     rdi, rax; window
3C58:	call    window_goto
3C5D:	mov     edx, cs:tty_columns; length
3C63:	mov     rcx, cs:global_buf
3C6A:	mov     rax, cs:header_window
3C71:	mov     rsi, rcx; str
3C74:	mov     rdi, rax; window
3C77:	call    window_puts
3C7C:	nop
3C7D:	pop     rbp
3C7E:	retn
3C7F:	endbr64
3C83:	push    rbp
3C84:	mov     rbp, rsp
3C87:	mov     eax, cs:tty_columns
3C8D:	movsxd  rdx, eax; n
3C90:	mov     rax, cs:global_buf
3C97:	mov     esi, 20h ; ' '; c
3C9C:	mov     rdi, rax; s
3C9F:	call    _memset
3CA4:	mov     rax, cs:g_help
3CAB:	mov     rdi, rax; s
3CAE:	call    _strlen
3CB3:	mov     edx, eax
3CB5:	mov     eax, cs:tty_columns
3CBB:	cmp     edx, eax
3CBD:	jge     short loc_3CD2
3CBF:	mov     rax, cs:g_help
3CC6:	mov     rdi, rax; s
3CC9:	call    _strlen
3CCE:	cdqe
3CD0:	jmp     short loc_3CDA
3CD2:	mov     eax, cs:tty_columns
3CD8:	cdqe
3CDA:	mov     rsi, cs:g_help; src
3CE1:	mov     rcx, cs:global_buf
3CE8:	mov     rdx, rax; n
3CEB:	mov     rdi, rcx; dest
3CEE:	call    _memcpy
3CF3:	mov     edx, cs:ViewerColors+28h; background
3CF9:	mov     ecx, cs:ViewerColors+24h
3CFF:	mov     eax, cs:ViewerColors+2Ch
3D05:	mov     esi, ecx; foreground
3D07:	mov     edi, eax; brightness
3D09:	call    tty_colors
3D0E:	mov     rax, cs:status_window
3D15:	mov     edx, 0; x
3D1A:	mov     esi, 0; y
3D1F:	mov     rdi, rax; window
3D22:	call    window_goto
3D27:	mov     edx, cs:tty_columns; length
3D2D:	mov     rcx, cs:global_buf
3D34:	mov     rax, cs:status_window
3D3B:	mov     rsi, rcx; str
3D3E:	mov     rdi, rax; window
3D41:	call    window_puts
3D46:	nop
3D47:	pop     rbp
3D48:	retn
3D49:	endbr64
3D4D:	push    rbp
3D4E:	mov     rbp, rsp
3D51:	sub     rsp, 20h
3D55:	mov     eax, 0
3D5A:	call    tty_get_previous_key_seq
3D5F:	mov     [rbp+prev], rax
3D63:	mov     rax, [rbp+prev]
3D67:	mov     rdi, rax; s
3D6A:	call    _strlen
3D6F:	mov     [rbp+length], rax
3D73:	cmp     [rbp+length], 0
3D78:	jz      loc_3EC4
3D7E:	mov     rax, [rbp+length]
3D82:	lea     rdx, [rax-1]
3D86:	mov     rax, [rbp+prev]
3D8A:	add     rax, rdx
3D8D:	movzx   eax, byte ptr [rax]
3D90:	cmp     al, 7
3D92:	jz      loc_3EC4
3D98:	mov     eax, 0
3D9D:	call    tty_get_previous_key_seq
3DA2:	mov     rdi, rax; key_seq
3DA5:	call    tty_key_machine2human
3DAA:	mov     [rbp+str], rax
3DAE:	mov     rax, [rbp+str]
3DB2:	mov     rdi, rax; s
3DB5:	call    _strlen
3DBA:	sub     rax, 0FFFFFFFFFFFFFF80h
3DBE:	mov     rdi, rax; n
3DC1:	call    xmalloc
3DC6:	mov     [rbp+buf], rax
3DCA:	mov     rdx, [rbp+str]
3DCE:	mov     rax, [rbp+buf]
3DD2:	lea     rcx, format; '%s: not defined.'
3DD9:	mov     rsi, rcx; format
3DDC:	mov     rdi, rax; s
3DDF:	mov     eax, 0
3DE4:	call    _sprintf
3DE9:	mov     eax, cs:tty_columns
3DEF:	movsxd  rdx, eax; n
3DF2:	mov     rax, cs:global_buf
3DF9:	mov     esi, 20h ; ' '; c
3DFE:	mov     rdi, rax; s
3E01:	call    _memset
3E06:	mov     rax, [rbp+buf]
3E0A:	mov     rdi, rax; s
3E0D:	call    _strlen
3E12:	mov     edx, eax
3E14:	mov     eax, cs:tty_columns
3E1A:	cmp     edx, eax
3E1C:	jge     short loc_3E2E
3E1E:	mov     rax, [rbp+buf]
3E22:	mov     rdi, rax; s
3E25:	call    _strlen
3E2A:	cdqe
3E2C:	jmp     short loc_3E36
3E2E:	mov     eax, cs:tty_columns
3E34:	cdqe
3E36:	mov     rcx, cs:global_buf
3E3D:	mov     rsi, [rbp+buf]; src
3E41:	mov     rdx, rax; n
3E44:	mov     rdi, rcx; dest
3E47:	call    _memcpy
3E4C:	mov     rax, [rbp+buf]
3E50:	mov     rdi, rax; pointer
3E53:	call    xfree
3E58:	mov     edx, 1; background
3E5D:	mov     esi, 7; foreground
3E62:	mov     edi, 1; brightness
3E67:	call    tty_colors
3E6C:	mov     rax, cs:status_window
3E73:	mov     edx, 0; x
3E78:	mov     esi, 0; y
3E7D:	mov     rdi, rax; window
3E80:	call    window_goto
3E85:	mov     edx, cs:tty_columns; length
3E8B:	mov     rcx, cs:global_buf
3E92:	mov     rax, cs:status_window
3E99:	mov     rsi, rcx; str
3E9C:	mov     rdi, rax; window
3E9F:	call    window_puts
3EA4:	mov     eax, 0
3EA9:	call    tty_beep
3EAE:	mov     eax, 0
3EB3:	call    tty_update
3EB8:	mov     edi, 1; seconds
3EBD:	call    _sleep
3EC2:	jmp     short loc_3ECE
3EC4:	mov     eax, 0
3EC9:	call    tty_beep
3ECE:	mov     eax, 0
3ED3:	call    set_status
3ED8:	mov     eax, 0
3EDD:	call    cursor_update
3EE2:	mov     eax, 0
3EE7:	call    tty_update
3EEC:	nop
3EED:	leave
3EEE:	retn
3EEF:	endbr64
3EF3:	push    rbp
3EF4:	mov     rbp, rsp
3EF7:	sub     rsp, 10h
3EFB:	mov     eax, edi
3EFD:	mov     [rbp+index], esi
3F00:	mov     [rbp+total], edx
3F03:	mov     [rbp+c], al
3F06:	mov     eax, [rbp+index]
3F09:	cmp     eax, [rbp+total]
3F0C:	jge     short loc_3F3D
3F0E:	call    ___ctype_b_loc
3F13:	mov     rdx, [rax]
3F16:	movsx   rax, [rbp+c]
3F1B:	add     rax, rax
3F1E:	add     rax, rdx
3F21:	movzx   eax, word ptr [rax]
3F24:	movzx   eax, ax
3F27:	and     eax, 4000h
3F2C:	test    eax, eax
3F2E:	jz      short loc_3F36
3F30:	movzx   eax, [rbp+c]
3F34:	jmp     short locret_3F42
3F36:	mov     eax, 2Eh ; '.'
3F3B:	jmp     short locret_3F42
3F3D:	mov     eax, 20h ; ' '
3F42:	leave
3F43:	retn
3F44:	endbr64
3F48:	push    rbp
3F49:	mov     rbp, rsp
3F4C:	push    r15
3F4E:	push    r14
3F50:	push    r13
3F52:	push    r12
3F54:	push    rbx
3F55:	sub     rsp, 98h
3F5C:	mov     [rbp+line], rdi
3F60:	mov     rax, fs:28h
3F69:	mov     [rbp+var_38], rax
3F6D:	xor     eax, eax
3F6F:	mov     eax, cs:tty_columns
3F75:	mov     edx, 51h ; 'Q'
3F7A:	cmp     eax, edx
3F7C:	cmovl   eax, edx
3F7F:	cdqe
3F81:	mov     rdi, rax; n
3F84:	call    xmalloc
3F89:	mov     [rbp+line_string], rax
3F8D:	mov     eax, cs:tty_columns
3F93:	movsxd  rdx, eax; n
3F96:	mov     rax, [rbp+line_string]
3F9A:	mov     esi, 20h ; ' '; c
3F9F:	mov     rdi, rax; s
3FA2:	call    _memset
3FA7:	lea     rax, [rbp+buf]
3FAB:	mov     edx, 10h; n
3FB0:	mov     esi, 0; c
3FB5:	mov     rdi, rax; s
3FB8:	call    _memset
3FBD:	mov     rax, [rbp+line]
3FC1:	shl     rax, 4
3FC5:	mov     rcx, rax
3FC8:	mov     eax, cs:fd
3FCE:	mov     edx, 0; whence
3FD3:	mov     rsi, rcx; offset
3FD6:	mov     edi, eax; fd
3FD8:	call    _lseek64
3FDD:	mov     eax, cs:fd
3FE3:	lea     rcx, [rbp+buf]
3FE7:	mov     edx, 10h; nbytes
3FEC:	mov     rsi, rcx; buf
3FEF:	mov     edi, eax; fd
3FF1:	call    read
3FF6:	mov     [rbp+r], rax
3FFA:	cmp     [rbp+r], 0
3FFF:	jz      loc_43AF
4005:	movzx   eax, [rbp+buf+0Fh]
4009:	movzx   eax, al
400C:	mov     rdx, [rbp+r]; total
4010:	mov     esi, 0Fh; index
4015:	mov     edi, eax; c
4017:	mov     eax, 0
401C:	call    char_to_print
4021:	movsx   eax, al
4024:	mov     ebx, eax
4026:	movzx   eax, [rbp+buf+0Eh]
402A:	movzx   eax, al
402D:	mov     rdx, [rbp+r]; total
4031:	mov     esi, 0Eh; index
4036:	mov     edi, eax; c
4038:	mov     eax, 0
403D:	call    char_to_print
4042:	movsx   ecx, al
4045:	mov     [rbp+var_6C], ecx
4048:	movzx   eax, [rbp+buf+0Dh]
404C:	movzx   eax, al
404F:	mov     rdx, [rbp+r]; total
4053:	mov     esi, 0Dh; index
4058:	mov     edi, eax; c
405A:	mov     eax, 0
405F:	call    char_to_print
4064:	movsx   esi, al
4067:	mov     [rbp+var_70], esi
406A:	movzx   eax, [rbp+buf+0Ch]
406E:	movzx   eax, al
4071:	mov     rdx, [rbp+r]; total
4075:	mov     esi, 0Ch; index
407A:	mov     edi, eax; c
407C:	mov     eax, 0
4081:	call    char_to_print
4086:	movsx   edi, al
4089:	mov     [rbp+var_74], edi
408C:	movzx   eax, [rbp+buf+0Bh]
4090:	movzx   eax, al
4093:	mov     rdx, [rbp+r]; total
4097:	mov     esi, 0Bh; index
409C:	mov     edi, eax; c
409E:	mov     eax, 0
40A3:	call    char_to_print
40A8:	movsx   edx, al
40AB:	mov     [rbp+var_78], edx
40AE:	movzx   eax, [rbp+buf+0Ah]
40B2:	movzx   eax, al
40B5:	mov     rdx, [rbp+r]; total
40B9:	mov     esi, 0Ah; index
40BE:	mov     edi, eax; c
40C0:	mov     eax, 0
40C5:	call    char_to_print
40CA:	movsx   r10d, al
40CE:	mov     [rbp+var_7C], r10d
40D2:	movzx   eax, [rbp+buf+9]
40D6:	movzx   eax, al
40D9:	mov     rdx, [rbp+r]; total
40DD:	mov     esi, 9; index
40E2:	mov     edi, eax; c
40E4:	mov     eax, 0
40E9:	call    char_to_print
40EE:	movsx   r11d, al
40F2:	mov     [rbp+var_80], r11d
40F6:	movzx   eax, [rbp+buf+8]
40FA:	movzx   eax, al
40FD:	mov     rdx, [rbp+r]; total
4101:	mov     esi, 8; index
4106:	mov     edi, eax; c
4108:	mov     eax, 0
410D:	call    char_to_print
4112:	movsx   r14d, al
4116:	mov     [rbp+var_84], r14d
411D:	movzx   eax, [rbp+buf+7]
4121:	movzx   eax, al
4124:	mov     rdx, [rbp+r]; total
4128:	mov     esi, 7; index
412D:	mov     edi, eax; c
412F:	mov     eax, 0
4134:	call    char_to_print
4139:	movsx   r15d, al
413D:	mov     [rbp+var_88], r15d
4144:	movzx   eax, [rbp+buf+6]
4148:	movzx   eax, al
414B:	mov     rdx, [rbp+r]; total
414F:	mov     esi, 6; index
4154:	mov     edi, eax; c
4156:	mov     eax, 0
415B:	call    char_to_print
4160:	movsx   r8d, al
4164:	mov     [rbp+var_8C], r8d
416B:	movzx   eax, [rbp+buf+5]
416F:	movzx   eax, al
4172:	mov     rdx, [rbp+r]; total
4176:	mov     esi, 5; index
417B:	mov     edi, eax; c
417D:	mov     eax, 0
4182:	call    char_to_print
4187:	movsx   r9d, al
418B:	mov     [rbp+var_90], r9d
4192:	movzx   eax, [rbp+buf+4]
4196:	movzx   eax, al
4199:	mov     rdx, [rbp+r]; total
419D:	mov     esi, 4; index
41A2:	mov     edi, eax; c
41A4:	mov     eax, 0
41A9:	call    char_to_print
41AE:	movsx   r12d, al
41B2:	mov     [rbp+var_94], r12d
41B9:	movzx   eax, [rbp+buf+3]
41BD:	movzx   ecx, al
41C0:	mov     rax, [rbp+r]
41C4:	mov     rdx, rax; total
41C7:	mov     esi, 3; index
41CC:	mov     edi, ecx; c
41CE:	mov     eax, 0
41D3:	call    char_to_print
41D8:	movsx   r13d, al
41DC:	mov     [rbp+var_98], r13d
41E3:	movzx   eax, [rbp+buf+2]
41E7:	movzx   ecx, al
41EA:	mov     rax, [rbp+r]
41EE:	mov     rdx, rax; total
41F1:	mov     esi, 2; index
41F6:	mov     edi, ecx; c
41F8:	mov     eax, 0
41FD:	call    char_to_print
4202:	movsx   eax, al
4205:	mov     [rbp+var_9C], eax
420B:	movzx   eax, [rbp+buf+1]
420F:	movzx   ecx, al
4212:	mov     rax, [rbp+r]
4216:	mov     rdx, rax; total
4219:	mov     esi, 1; index
421E:	mov     edi, ecx; c
4220:	mov     eax, 0
4225:	call    char_to_print
422A:	movsx   ecx, al
422D:	mov     [rbp+var_A0], ecx
4233:	movzx   eax, [rbp+buf]
4237:	movzx   ecx, al
423A:	mov     rax, [rbp+r]
423E:	mov     rdx, rax; total
4241:	mov     esi, 0; index
4246:	mov     edi, ecx; c
4248:	mov     eax, 0
424D:	call    char_to_print
4252:	movsx   esi, al
4255:	mov     [rbp+var_A4], esi
425B:	movzx   eax, [rbp+buf+0Fh]
425F:	movzx   edi, al
4262:	mov     [rbp+var_A8], edi
4268:	movzx   eax, [rbp+buf+0Eh]
426C:	movzx   edx, al
426F:	mov     [rbp+var_AC], edx
4275:	movzx   eax, [rbp+buf+0Dh]
4279:	movzx   r10d, al
427D:	mov     [rbp+var_B0], r10d
4284:	movzx   eax, [rbp+buf+0Ch]
4288:	movzx   r11d, al
428C:	mov     [rbp+var_B4], r11d
4293:	movzx   eax, [rbp+buf+0Bh]
4297:	movzx   r15d, al
429B:	movzx   eax, [rbp+buf+0Ah]
429F:	movzx   r14d, al
42A3:	movzx   eax, [rbp+buf+9]
42A7:	movzx   r13d, al
42AB:	movzx   eax, [rbp+buf+8]
42AF:	movzx   r12d, al
42B3:	movzx   eax, [rbp+buf+7]
42B7:	movzx   eax, al
42BA:	mov     [rbp+var_B8], eax
42C0:	movzx   eax, [rbp+buf+6]
42C4:	movzx   r11d, al
42C8:	movzx   eax, [rbp+buf+5]
42CC:	movzx   r10d, al
42D0:	movzx   eax, [rbp+buf+4]
42D4:	movzx   r8d, al
42D8:	movzx   eax, [rbp+buf+3]
42DC:	movzx   ecx, al
42DF:	movzx   eax, [rbp+buf+2]
42E3:	movzx   r9d, al
42E7:	movzx   eax, [rbp+buf+1]
42EB:	movzx   esi, al
42EE:	movzx   eax, [rbp+buf]
42F2:	movzx   edx, al
42F5:	mov     rax, [rbp+line]
42F9:	mov     rdi, [rbp+line_string]; s
42FD:	sub     rsp, 8
4301:	push    rbx
4302:	mov     ebx, [rbp+var_6C]
4305:	push    rbx
4306:	mov     ebx, [rbp+var_70]
4309:	push    rbx
430A:	mov     ebx, [rbp+var_74]
430D:	push    rbx
430E:	mov     ebx, [rbp+var_78]
4311:	push    rbx
4312:	mov     ebx, [rbp+var_7C]
4315:	push    rbx
4316:	mov     ebx, [rbp+var_80]
4319:	push    rbx
431A:	mov     ebx, [rbp+var_84]
4320:	push    rbx
4321:	mov     ebx, [rbp+var_88]
4327:	push    rbx
4328:	mov     ebx, [rbp+var_8C]
432E:	push    rbx
432F:	mov     ebx, [rbp+var_90]
4335:	push    rbx
4336:	mov     ebx, [rbp+var_94]
433C:	push    rbx
433D:	mov     ebx, [rbp+var_98]
4343:	push    rbx
4344:	mov     ebx, [rbp+var_9C]
434A:	push    rbx
434B:	mov     ebx, [rbp+var_A0]
4351:	push    rbx
4352:	mov     ebx, [rbp+var_A4]
4358:	push    rbx
4359:	mov     ebx, [rbp+var_A8]
435F:	push    rbx
4360:	mov     ebx, [rbp+var_AC]
4366:	push    rbx
4367:	mov     ebx, [rbp+var_B0]
436D:	push    rbx
436E:	mov     ebx, [rbp+var_B4]
4374:	push    rbx
4375:	push    r15
4377:	push    r14
4379:	push    r13
437B:	push    r12
437D:	mov     ebx, [rbp+var_B8]
4383:	push    rbx
4384:	push    r11
4386:	push    r10
4388:	push    r8
438A:	push    rcx
438B:	mov     r8d, esi
438E:	mov     ecx, edx
4390:	mov     edx, eax
4392:	lea     rax, a011x002x02x02x; '%011X0  %02X %02X %02X %02X %02X %02X %'...
4399:	mov     rsi, rax; format
439C:	mov     eax, 0
43A1:	call    _sprintf
43A6:	add     rsp, 0F0h
43AD:	jmp     short loc_43BE
43AF:	mov     [rbp+r], 0
43B7:	mov     rax, [rbp+line_string]
43BB:	mov     byte ptr [rax], 0
43BE:	cmp     [rbp+r], 7
43C3:	jg      short loc_440B
43C5:	mov     eax, 10h
43CA:	sub     rax, [rbp+r]
43CE:	mov     rdx, rax
43D1:	mov     rax, rdx
43D4:	add     rax, rax
43D7:	add     rax, rdx
43DA:	add     rax, 1
43DE:	mov     rcx, rax
43E1:	mov     rdx, [rbp+r]
43E5:	mov     rax, rdx
43E8:	add     rax, rax
43EB:	add     rax, rdx
43EE:	lea     rdx, [rax+0Ch]
43F2:	mov     rax, [rbp+line_string]
43F6:	add     rax, rdx
43F9:	mov     rdx, rcx; n
43FC:	mov     esi, 20h ; ' '; c
4401:	mov     rdi, rax; s
4404:	call    _memset
4409:	jmp     short loc_4459
440B:	cmp     [rbp+r], 7
4410:	jle     short loc_4459
4412:	cmp     [rbp+r], 0Fh
4417:	jg      short loc_4459
4419:	mov     eax, 10h
441E:	sub     rax, [rbp+r]
4422:	mov     rdx, rax
4425:	mov     rax, rdx
4428:	add     rax, rax
442B:	add     rax, rdx
442E:	mov     rcx, rax
4431:	mov     rdx, [rbp+r]
4435:	mov     rax, rdx
4438:	add     rax, rax
443B:	add     rax, rdx
443E:	lea     rdx, [rax+0Dh]
4442:	mov     rax, [rbp+line_string]
4446:	add     rax, rdx
4449:	mov     rdx, rcx; n
444C:	mov     esi, 20h ; ' '; c
4451:	mov     rdi, rax; s
4454:	call    _memset
4459:	mov     rax, [rbp+line_string]
445D:	mov     rdi, rax; s
4460:	call    _strlen
4465:	mov     rdx, [rbp+line_string]
4469:	add     rax, rdx
446C:	mov     byte ptr [rax], 20h ; ' '
446F:	mov     edx, cs:tty_columns; length
4475:	mov     rax, cs:file_window
447C:	mov     rcx, [rbp+line_string]
4480:	mov     rsi, rcx; str
4483:	mov     rdi, rax; window
4486:	call    window_puts
448B:	mov     rax, [rbp+line_string]
448F:	mov     rdi, rax; pointer
4492:	call    xfree
4497:	nop
4498:	mov     rax, [rbp+var_38]
449C:	sub     rax, fs:28h
44A5:	jz      short loc_44AC
44A7:	call    ___stack_chk_fail
44AC:	lea     rsp, [rbp-28h]
44B0:	pop     rbx
44B1:	pop     r12
44B3:	pop     r13
44B5:	pop     r14
44B7:	pop     r15
44B9:	pop     rbp
44BA:	retn
44BB:	endbr64
44BF:	push    rbp
44C0:	mov     rbp, rsp
44C3:	sub     rsp, 10h
44C7:	mov     edx, cs:ViewerColors+1Ch; background
44CD:	mov     ecx, cs:ViewerColors+18h
44D3:	mov     eax, cs:ViewerColors+20h
44D9:	mov     esi, ecx; foreground
44DB:	mov     edi, eax; brightness
44DD:	call    tty_colors
44E2:	mov     rax, cs:g_current_line
44E9:	mov     [rbp+i], rax
44ED:	jmp     short loc_4533
44EF:	mov     rax, [rbp+i]
44F3:	mov     edx, eax
44F5:	mov     rax, cs:g_current_line
44FC:	mov     ecx, eax
44FE:	mov     eax, edx
4500:	sub     eax, ecx
4502:	add     eax, 3
4505:	mov     ecx, eax
4507:	mov     rax, cs:file_window
450E:	mov     edx, 0; x
4513:	mov     esi, ecx; y
4515:	mov     rdi, rax; window
4518:	call    window_goto
451D:	mov     rax, [rbp+i]
4521:	mov     rdi, rax; line
4524:	mov     eax, 0
4529:	call    update_line
452E:	add     [rbp+i], 1
4533:	mov     eax, cs:tty_lines
4539:	sub     eax, 9
453C:	movsxd  rdx, eax
453F:	mov     rax, cs:g_current_line
4546:	add     rax, rdx
4549:	cmp     [rbp+i], rax
454D:	jl      short loc_44EF
454F:	nop
4550:	nop
4551:	leave
4552:	retn
4553:	endbr64
4557:	push    rbp
4558:	mov     rbp, rsp
455B:	mov     edi, 0; screen
4560:	call    tty_end
4565:	nop
4566:	pop     rbp
4567:	retn
4568:	endbr64
456C:	push    rbp
456D:	mov     rbp, rsp
4570:	sub     rsp, 10h
4574:	mov     [rbp+postmsg], rdi
4578:	mov     eax, 0
457D:	call    clean_up
4582:	mov     rdx, cs:g_program
4589:	mov     rax, cs:stderr@GLIBC_2_2_5
4590:	mov     rcx, [rbp+postmsg]
4594:	lea     rsi, aSFatalErrorS; '%s: fatal error: %s.n'
459B:	mov     rdi, rax; stream
459E:	mov     eax, 0
45A3:	call    _fprintf
45A8:	mov     edi, 1; status
45AD:	call    _exit
45B2:	endbr64
45B6:	push    rbp
45B7:	mov     rbp, rsp
45BA:	sub     rsp, 90h
45C1:	mov     [rbp+keys], edi
45C7:	mov     rax, fs:28h
45D0:	mov     [rbp+var_8], rax
45D4:	xor     eax, eax
45D6:	mov     eax, [rbp+keys]
45DC:	mov     [rbp+i], eax
45DF:	jmp     loc_4736
45E4:	lea     rsi, [rbp+contents]; dest
45E8:	lea     rax, [rbp+key_seq]
45EC:	mov     ecx, 0; seek
45F1:	mov     edx, 1; fields
45F6:	mov     rdi, rax; var_name
45F9:	call    configuration_getvarinfo
45FE:	movzx   eax, [rbp+key_seq]
4602:	test    al, al
4604:	jz      loc_4745
460A:	movzx   eax, [rbp+key_seq]
460E:	cmp     al, 5Eh ; '^'
4610:	jz      short loc_465D
4612:	lea     rax, [rbp+key_seq]
4616:	mov     rdi, rax; symbol
4619:	call    tty_get_symbol_key_seq
461E:	mov     [rbp+key_seq_ptr], rax
4622:	cmp     [rbp+key_seq_ptr], 0
4627:	jz      short loc_4654
4629:	mov     rax, [rbp+key_seq_ptr]
462D:	movzx   eax, byte ptr [rax]
4630:	test    al, al
4632:	jz      loc_472E
4638:	mov     rdx, [rbp+key_seq_ptr]
463C:	lea     rax, [rbp+key_seq]
4640:	mov     rsi, rdx; src
4643:	mov     rdi, rax; dest
4646:	call    _strcpy
464B:	mov     [rbp+need_conversion], 0
4652:	jmp     short loc_4664
4654:	mov     [rbp+need_conversion], 1
465B:	jmp     short loc_4664
465D:	mov     [rbp+need_conversion], 1
4664:	mov     rax, [rbp+contents]
4668:	test    rax, rax
466B:	jz      loc_4731
4671:	mov     [rbp+j], 0
4678:	jmp     short loc_46AF
467A:	mov     eax, [rbp+j]
467D:	movsxd  rdx, eax
4680:	mov     rax, rdx
4683:	shl     rax, 2
4687:	add     rax, rdx
468A:	shl     rax, 2
468E:	lea     rdx, built_in
4695:	add     rdx, rax
4698:	mov     rax, [rbp+contents]
469C:	mov     rsi, rdx; s2
469F:	mov     rdi, rax; s1
46A2:	call    _strcmp
46A7:	test    eax, eax
46A9:	jz      short loc_46B7
46AB:	add     [rbp+j], 1
46AF:	cmp     [rbp+j], 0Ah
46B3:	jle     short loc_467A
46B5:	jmp     short loc_46B8
46B7:	nop
46B8:	cmp     [rbp+j], 0Ah
46BC:	jg      short loc_4706
46BE:	cmp     [rbp+need_conversion], 0
46C2:	jz      short loc_46D5
46C4:	lea     rax, [rbp+key_seq]
46C8:	mov     rdi, rax; key_seq
46CB:	call    tty_key_human2machine
46D0:	test    rax, rax
46D3:	jz      short loc_4732
46D5:	mov     eax, [rbp+j]
46D8:	not     eax
46DA:	movsxd  rdx, eax
46DD:	mov     rax, rdx
46E0:	shl     rax, 2
46E4:	add     rax, rdx
46E7:	shl     rax, 2
46EB:	lea     rdx, built_in
46F2:	add     rdx, rax
46F5:	lea     rax, [rbp+key_seq]
46F9:	mov     rsi, rdx; aux_data
46FC:	mov     rdi, rax; key_seq
46FF:	call    tty_key_list_insert
4704:	jmp     short loc_4732
4706:	mov     rcx, [rbp+contents]
470A:	mov     rdx, cs:g_program
4711:	mov     rax, cs:stderr@GLIBC_2_2_5
4718:	lea     rsi, aSInvalidBuiltI; '%s: invalid built-in operation: %s.n'
471F:	mov     rdi, rax; stream
4722:	mov     eax, 0
4727:	call    _fprintf
472C:	jmp     short loc_4732
472E:	nop
472F:	jmp     short loc_4732
4731:	nop
4732:	add     [rbp+i], 1
4736:	cmp     [rbp+i], 7FFh
473D:	jle     loc_45E4
4743:	jmp     short loc_4746
4745:	nop
4746:	mov     eax, [rbp+i]
4749:	mov     rdx, [rbp+var_8]
474D:	sub     rdx, fs:28h
4756:	jz      short locret_475D
4758:	call    ___stack_chk_fail
475D:	leave
475E:	retn
475F:	endbr64
4763:	push    rbp
4764:	mov     rbp, rsp
4767:	sub     rsp, 30h
476B:	mov     [rbp+resize_required], edi
476E:	mov     [rbp+display_status], 0
4775:	mov     [rbp+display_header], 0
477C:	mov     [rbp+display_file], 0
4783:	mov     eax, cs:tty_lines
4789:	mov     [rbp+old_tty_lines], eax
478C:	mov     eax, cs:tty_columns
4792:	mov     [rbp+old_tty_columns], eax
4795:	mov     eax, 0
479A:	call    tty_resize
479F:	cmp     [rbp+resize_required], 0
47A3:	jnz     short loc_47BF
47A5:	mov     eax, cs:tty_lines
47AB:	cmp     [rbp+old_tty_lines], eax
47AE:	jnz     short loc_47BF
47B0:	mov     eax, cs:tty_columns
47B6:	cmp     [rbp+old_tty_columns], eax
47B9:	jz      loc_4945
47BF:	mov     eax, cs:LinuxConsole
47C5:	test    eax, eax
47C7:	jz      short loc_47F9
47C9:	mov     edx, cs:tty_columns
47CF:	mov     eax, cs:tty_lines
47D5:	imul    eax, edx
47D8:	add     eax, 2
47DB:	add     eax, eax
47DD:	movsxd  rdx, eax
47E0:	mov     rax, cs:screen
47E7:	mov     rsi, rdx; n
47EA:	mov     rdi, rax; p
47ED:	call    xrealloc
47F2:	mov     cs:screen, rax
47F9:	mov     eax, cs:tty_columns
47FF:	add     eax, 1
4802:	movsxd  rdx, eax
4805:	mov     rax, cs:global_buf
480C:	mov     rsi, rdx; n
480F:	mov     rdi, rax; p
4812:	call    xrealloc
4817:	mov     cs:global_buf, rax
481E:	mov     rax, cs:filename
4825:	mov     rdi, rax; s
4828:	call    _strlen
482D:	lea     rdx, [rax+0Ah]
4831:	mov     rax, cs:header_text
4838:	mov     rsi, rdx; n
483B:	mov     rdi, rax; p
483E:	call    xrealloc
4843:	mov     cs:header_text, rax
484A:	mov     edx, cs:tty_columns
4850:	mov     rax, cs:title_window
4857:	mov     r8d, edx; columns
485A:	mov     ecx, 1; lines
485F:	mov     edx, 0; y
4864:	mov     esi, 0; x
4869:	mov     rdi, rax; window
486C:	call    window_resize
4871:	mov     eax, cs:tty_lines
4877:	cmp     eax, 1
487A:	jle     short loc_4883
487C:	mov     [rbp+display_status], 1
4883:	mov     eax, cs:tty_lines
4889:	cmp     eax, 2
488C:	jle     short loc_4895
488E:	mov     [rbp+display_header], 1
4895:	mov     eax, cs:tty_lines
489B:	cmp     eax, 3
489E:	jle     short loc_48A7
48A0:	mov     [rbp+display_file], 1
48A7:	mov     ecx, cs:tty_columns
48AD:	cmp     [rbp+display_status], 0
48B1:	setnz   al
48B4:	movzx   edx, al
48B7:	mov     eax, cs:tty_lines
48BD:	lea     esi, [rax-1]
48C0:	mov     rax, cs:status_window
48C7:	mov     r8d, ecx; columns
48CA:	mov     ecx, edx; lines
48CC:	mov     edx, esi; y
48CE:	mov     esi, 0; x
48D3:	mov     rdi, rax; window
48D6:	call    window_resize
48DB:	mov     ecx, cs:tty_columns
48E1:	cmp     [rbp+display_header], 0
48E5:	setnz   al
48E8:	movzx   edx, al
48EB:	mov     rax, cs:header_window
48F2:	mov     r8d, ecx; columns
48F5:	mov     ecx, edx; lines
48F7:	mov     edx, 1; y
48FC:	mov     esi, 0; x
4901:	mov     rdi, rax; window
4904:	call    window_resize
4909:	mov     ecx, cs:tty_columns
490F:	cmp     [rbp+display_file], 0
4913:	jz      short loc_4920
4915:	mov     eax, cs:tty_lines
491B:	lea     edx, [rax-2]
491E:	jmp     short loc_4925
4920:	mov     edx, 0
4925:	mov     rax, cs:file_window
492C:	mov     r8d, ecx; columns
492F:	mov     ecx, edx; lines
4931:	mov     edx, 2; y
4936:	mov     esi, 0; x
493B:	mov     rdi, rax; window
493E:	call    window_resize
4943:	jmp     short locret_4946
4945:	nop
4946:	leave
4947:	retn
4948:	endbr64
494C:	push    rbp
494D:	mov     rbp, rsp
4950:	sub     rsp, 10h
4954:	mov     [rbp+signum], edi
4957:	mov     edi, 0; resize_required
495C:	mov     eax, 0
4961:	call    resize
4966:	cmp     [rbp+signum], 12h
496A:	jnz     short loc_4980
496C:	mov     edi, 1; mode
4971:	call    tty_set_mode
4976:	mov     eax, 0
497B:	call    tty_defaults
4980:	mov     edx, cs:ViewerColors+1Ch; background
4986:	mov     ecx, cs:ViewerColors+18h
498C:	mov     eax, cs:ViewerColors+20h
4992:	mov     esi, ecx; foreground
4994:	mov     edi, eax; brightness
4996:	call    tty_colors
499B:	mov     eax, 0
49A0:	call    tty_fill
49A5:	mov     eax, 0
49AA:	call    file_length
49AF:	mov     cs:g_size, rax
49B6:	mov     rax, cs:g_size
49BD:	lea     rdx, [rax+0Fh]
49C1:	test    rax, rax
49C4:	cmovs   rax, rdx
49C8:	sar     rax, 4
49CC:	mov     rdx, rax
49CF:	mov     rax, cs:g_size
49D6:	and     eax, 0Fh
49D9:	test    rax, rax
49DC:	jz      short loc_49E5
49DE:	mov     eax, 1
49E3:	jmp     short loc_49EA
49E5:	mov     eax, 0
49EA:	add     rax, rdx
49ED:	mov     cs:g_lines, rax
49F4:	mov     eax, cs:tty_lines
49FA:	cmp     eax, 4
49FD:	jle     short loc_4A36
49FF:	mov     rax, cs:file_window
4A06:	mov     edx, 0; x
4A0B:	mov     esi, 1; y
4A10:	mov     rdi, rax; window
4A13:	call    window_goto
4A18:	mov     rax, cs:file_window
4A1F:	mov     edx, 51h ; 'Q'; length
4A24:	lea     rcx, info_txt; '   Offset     00 01 02 03 04 05 06 07  '...
4A2B:	mov     rsi, rcx; str
4A2E:	mov     rdi, rax; window
4A31:	call    window_puts
4A36:	mov     eax, cs:tty_lines
4A3C:	cmp     eax, 5
4A3F:	jle     short loc_4A78
4A41:	mov     rax, cs:file_window
4A48:	mov     edx, 0; x
4A4D:	mov     esi, 2; y
4A52:	mov     rdi, rax; window
4A55:	call    window_goto
4A5A:	mov     rax, cs:file_window
4A61:	mov     edx, 51h ; 'Q'; length
4A66:	lea     rcx, line_txt; '---------------------------------------'...
4A6D:	mov     rsi, rcx; str
4A70:	mov     rdi, rax; window
4A73:	call    window_puts
4A78:	mov     eax, cs:tty_lines
4A7E:	cmp     eax, 8
4A81:	jle     loc_4B5B
4A87:	mov     eax, cs:tty_lines
4A8D:	cmp     eax, 9
4A90:	jnz     short loc_4A9F
4A92:	mov     cs:g_current_line, 0
4A9D:	jmp     short loc_4ADE
4A9F:	mov     rax, cs:g_lines
4AA6:	mov     edx, cs:tty_lines
4AAC:	sub     edx, 9
4AAF:	movsxd  rsi, edx
4AB2:	cqo
4AB4:	idiv    rsi
4AB7:	mov     rdx, rax
4ABA:	mov     eax, cs:tty_lines
4AC0:	sub     eax, 9
4AC3:	cdqe
4AC5:	imul    rdx, rax
4AC9:	mov     rax, cs:g_current_line
4AD0:	cmp     rdx, rax
4AD3:	cmovle  rax, rdx
4AD7:	mov     cs:g_current_line, rax
4ADE:	mov     eax, cs:tty_lines
4AE4:	lea     ecx, [rax-5]
4AE7:	mov     rax, cs:file_window
4AEE:	mov     edx, 0; x
4AF3:	mov     esi, ecx; y
4AF5:	mov     rdi, rax; window
4AF8:	call    window_goto
4AFD:	mov     rax, cs:file_window
4B04:	mov     edx, 0Ah; length
4B09:	lea     rcx, seek_txt; ' Seek at: '
4B10:	mov     rsi, rcx; str
4B13:	mov     rdi, rax; window
4B16:	call    window_puts
4B1B:	mov     eax, cs:tty_lines
4B21:	lea     ecx, [rax-5]
4B24:	mov     rax, cs:file_window
4B2B:	mov     edx, 0Ah; x
4B30:	mov     esi, ecx; y
4B32:	mov     rdi, rax; window
4B35:	call    window_goto
4B3A:	mov     edx, cs:count; length
4B40:	mov     rax, cs:file_window
4B47:	lea     rcx, g_offset
4B4E:	mov     rsi, rcx; str
4B51:	mov     rdi, rax; window
4B54:	call    window_puts
4B59:	jmp     short loc_4B66
4B5B:	mov     cs:g_current_line, 0
4B66:	mov     eax, 0
4B6B:	call    set_title
4B70:	mov     eax, 0
4B75:	call    set_status
4B7A:	mov     eax, 0
4B7F:	call    set_header
4B84:	mov     eax, 0
4B89:	call    update_all
4B8E:	mov     eax, cs:tty_lines
4B94:	cmp     eax, 8
4B97:	jle     short loc_4BC0
4B99:	mov     eax, cs:count
4B9F:	add     eax, 0Ah
4BA2:	mov     edx, eax; x
4BA4:	mov     eax, cs:tty_lines
4BAA:	lea     ecx, [rax-5]
4BAD:	mov     rax, cs:file_window
4BB4:	mov     esi, ecx; y
4BB6:	mov     rdi, rax; window
4BB9:	call    window_goto
4BBE:	jmp     short loc_4BE3
4BC0:	mov     eax, cs:tty_columns
4BC6:	lea     edx, [rax-1]; x
4BC9:	mov     eax, cs:tty_lines
4BCF:	lea     ecx, [rax-1]
4BD2:	mov     rax, cs:file_window
4BD9:	mov     esi, ecx; y
4BDB:	mov     rdi, rax; window
4BDE:	call    window_goto
4BE3:	mov     eax, 0
4BE8:	call    tty_update
4BED:	cmp     [rbp+signum], 12h
4BF1:	jnz     short loc_4C02
4BF3:	mov     rax, cs:header_text
4BFA:	mov     rdi, rax; string
4BFD:	call    tty_update_title
4C02:	nop
4C03:	leave
4C04:	retn
4C05:	endbr64
4C09:	push    rbp
4C0A:	mov     rbp, rsp
4C0D:	mov     edi, 0; mode
4C12:	call    tty_set_mode
4C17:	mov     eax, 0
4C1C:	call    tty_defaults
4C21:	mov     rax, cs:screen
4C28:	mov     rdi, rax; buf
4C2B:	call    tty_put_screen
4C30:	nop
4C31:	pop     rbp
4C32:	retn
4C33:	endbr64
4C37:	push    rbp
4C38:	mov     rbp, rsp
4C3B:	nop
4C3C:	pop     rbp
4C3D:	retn
4C3E:	endbr64
4C42:	push    rbp
4C43:	mov     rbp, rsp
4C46:	mov     rax, cs:g_program
4C4D:	mov     rsi, rax
4C50:	lea     rax, aUsageSHvicblFi; 'usage: %s [-hvicbl] filen'
4C57:	mov     rdi, rax; format
4C5A:	mov     eax, 0
4C5F:	call    _printf
4C64:	lea     rax, s; ' -h         print this help message'
4C6B:	mov     rdi, rax; s
4C6E:	call    _puts
4C73:	lea     rax, aVPrintTheVersi; ' -v         print the version number'
4C7A:	mov     rdi, rax; s
4C7D:	call    _puts
4C82:	lea     rax, aCUseAnsiColors; ' -c         use ANSI colors'
4C89:	mov     rdi, rax; s
4C8C:	call    _puts
4C91:	lea     rax, aBDonTUseAnsiCo; ' -b         don't use ANSI colors'
4C98:	mov     rdi, rax; s
4C9B:	call    _puts
4CA0:	lea     rax, aLDonTUseTheLas; ' -l         don't use the last screen c'...
4CA7:	mov     rdi, rax; s
4CAA:	call    _puts
4CAF:	nop
4CB0:	pop     rbp
4CB1:	retn
4CB2:	endbr64
4CB6:	push    rbp
4CB7:	mov     rbp, rsp
4CBA:	sub     rsp, 0E0h
4CC1:	mov     [rbp+argc], edi
4CC7:	mov     [rbp+argv], rsi
4CCE:	mov     rax, fs:28h
4CD7:	mov     [rbp+var_8], rax
4CDB:	xor     eax, eax
4CDD:	mov     [rbp+key], 0
4CE7:	mov     [rbp+ansi_colors], 0FFFFFFFFh
4CF1:	mov     [rbp+use_last_screen_character], 1
4CFB:	lea     rax, default_value
4D02:	mov     rsi, rax; locale
4D05:	mov     edi, 6; category
4D0A:	call    _setlocale
4D0F:	mov     eax, 0
4D14:	call    signals_init
4D19:	mov     rax, [rbp+argv]
4D20:	mov     rax, [rax]
4D23:	mov     cs:g_program, rax
4D2A:	lea     rax, name; 'HOME'
4D31:	mov     rdi, rax; name
4D34:	call    _getenv
4D39:	mov     cs:g_home, rax
4D40:	mov     rax, cs:g_home
4D47:	test    rax, rax
4D4A:	jnz     short loc_4D5A
4D4C:	lea     rax, asc_B28E; '.'
4D53:	mov     cs:g_home, rax
4D5A:	mov     eax, 0
4D5F:	call    compute_directories
4D64:	mov     eax, 0
4D69:	call    get_login_name
4D6E:	lea     rax, aColorterm; 'COLORTERM'
4D75:	mov     rdi, rax; name
4D78:	call    _getenv
4D7D:	test    rax, rax
4D80:	jz      loc_4EA1
4D86:	mov     [rbp+ansi_colors], 1
4D90:	jmp     loc_4EA1
4D95:	cmp     [rbp+c], 3Fh ; '?'
4D9C:	jz      loc_4E68
4DA2:	cmp     [rbp+c], 3Fh ; '?'
4DA9:	jl      def_4DFB; jumptable 0000000000004DFB default case, cases 100-103,105-107,109-117
4DAF:	cmp     [rbp+c], 76h ; 'v'
4DB6:	jg      def_4DFB; jumptable 0000000000004DFB default case, cases 100-103,105-107,109-117
4DBC:	cmp     [rbp+c], 62h ; 'b'
4DC3:	jl      def_4DFB; jumptable 0000000000004DFB default case, cases 100-103,105-107,109-117
4DC9:	mov     eax, [rbp+c]
4DCF:	sub     eax, 62h ; 'b'; switch 21 cases
4DD2:	cmp     eax, 14h
4DD5:	ja      def_4DFB; jumptable 0000000000004DFB default case, cases 100-103,105-107,109-117
4DDB:	mov     eax, eax
4DDD:	lea     rdx, ds:0[rax*4]
4DE5:	lea     rax, jpt_4DFB
4DEC:	mov     eax, ds:(jpt_4DFB - 0B3D8h)[rdx+rax]
4DEF:	cdqe
4DF1:	lea     rdx, jpt_4DFB
4DF8:	add     rax, rdx
4DFB:	jmp     rax; switch jump
4DFE:	mov     eax, 0; jumptable 0000000000004DFB case 104
4E03:	call    usage
4E08:	mov     eax, 0
4E0D:	jmp     loc_58F5
4E12:	lea     rax, a492; jumptable 0000000000004DFB case 118
4E19:	mov     rdx, rax
4E1C:	lea     rax, aGnuInteractive; 'GNU Interactive Tools'
4E23:	mov     rsi, rax
4E26:	lea     rax, aSS; '%s %sn'
4E2D:	mov     rdi, rax; format
4E30:	mov     eax, 0
4E35:	call    _printf
4E3A:	mov     eax, 0
4E3F:	jmp     loc_58F5
4E44:	mov     [rbp+ansi_colors], 1; jumptable 0000000000004DFB case 99
4E4E:	jmp     short loc_4EA1
4E50:	mov     [rbp+ansi_colors], 0; jumptable 0000000000004DFB case 98
4E5A:	jmp     short loc_4EA1
4E5C:	mov     [rbp+use_last_screen_character], 0; jumptable 0000000000004DFB case 108
4E66:	jmp     short loc_4EA1
4E68:	mov     eax, 1
4E6D:	jmp     loc_58F5
4E72:	mov     rdx, cs:g_program; jumptable 0000000000004DFB default case, cases 100-103,105-107,109-117
4E79:	mov     rax, cs:stderr@GLIBC_2_2_5
4E80:	lea     rcx, aSUnknownError; '%s: unknown errorn'
4E87:	mov     rsi, rcx; format
4E8A:	mov     rdi, rax; stream
4E8D:	mov     eax, 0
4E92:	call    _fprintf
4E97:	mov     eax, 1
4E9C:	jmp     loc_58F5
4EA1:	mov     rcx, [rbp+argv]
4EA8:	mov     eax, [rbp+argc]
4EAE:	lea     rdx, shortopts; 'hvcblp'
4EB5:	mov     rsi, rcx; argv
4EB8:	mov     edi, eax; argc
4EBA:	call    _getopt
4EBF:	mov     [rbp+c], eax
4EC5:	cmp     [rbp+c], 0FFFFFFFFh
4ECC:	jnz     loc_4D95
4ED2:	mov     eax, cs:optind@GLIBC_2_2_5
4ED8:	cmp     [rbp+argc], eax
4EDE:	jle     short loc_4F25
4EE0:	mov     eax, cs:optind@GLIBC_2_2_5
4EE6:	lea     edx, [rax+1]
4EE9:	mov     cs:optind@GLIBC_2_2_5, edx
4EEF:	cdqe
4EF1:	lea     rdx, ds:0[rax*8]
4EF9:	mov     rax, [rbp+argv]
4F00:	add     rax, rdx
4F03:	mov     rax, [rax]
4F06:	mov     rdi, rax; string
4F09:	call    xstrdup
4F0E:	mov     cs:filename, rax
4F15:	mov     eax, cs:optind@GLIBC_2_2_5
4F1B:	cmp     [rbp+argc], eax
4F21:	jle     short loc_4F5E
4F23:	jmp     short loc_4F39
4F25:	mov     eax, 0
4F2A:	call    usage
4F2F:	mov     eax, 1
4F34:	jmp     loc_58F5
4F39:	mov     rdx, cs:g_program
4F40:	mov     rax, cs:stderr@GLIBC_2_2_5
4F47:	lea     rcx, aSWarningInvali; '%s: warning: invalid extra options igno'...
4F4E:	mov     rsi, rcx; format
4F51:	mov     rdi, rax; stream
4F54:	mov     eax, 0
4F59:	call    _fprintf
4F5E:	mov     edi, 5Ah ; 'Z'; n
4F63:	call    xmalloc
4F68:	mov     cs:title_text, rax
4F6F:	mov     rax, cs:title_text
4F76:	lea     rdx, a492; '4.9.2'
4F7D:	mov     rcx, rdx
4F80:	lea     rdx, aGnuInteractive; 'GNU Interactive Tools'
4F87:	lea     rsi, aSSHexAsciiFile; ' %s %s - Hex/Ascii File Viewer'
4F8E:	mov     rdi, rax; s
4F91:	mov     eax, 0
4F96:	call    _sprintf
4F9B:	mov     edi, 0; kbd_mode
4FA0:	call    tty_init
4FA5:	mov     rax, cs:filename
4FAC:	lea     rdx, [rbp+s]
4FB3:	mov     rsi, rdx; buf
4FB6:	mov     rdi, rax; filename
4FB9:	call    xstat
4FBE:	mov     rax, cs:filename
4FC5:	mov     esi, 0; oflag
4FCA:	mov     rdi, rax; file
4FCD:	mov     eax, 0
4FD2:	call    _open64
4FD7:	mov     cs:fd, eax
4FDD:	mov     eax, cs:fd
4FE3:	cmp     eax, 0FFFFFFFFh
4FE6:	jnz     short loc_501B
4FE8:	mov     rcx, cs:filename
4FEF:	mov     rdx, cs:g_program
4FF6:	mov     rax, cs:stderr@GLIBC_2_2_5
4FFD:	lea     rsi, aSCannotOpenFil; '%s: cannot open file %s.n'
5004:	mov     rdi, rax; stream
5007:	mov     eax, 0
500C:	call    _fprintf
5011:	mov     eax, 1
5016:	jmp     loc_58F5
501B:	mov     eax, [rbp+s.st_mode]
5021:	and     eax, 0F000h
5026:	cmp     eax, 8000h
502B:	setz    al
502E:	movzx   eax, al
5031:	mov     cs:regular_file, eax
5037:	mov     eax, 0
503C:	call    common_configuration_init
5041:	lea     rax, section; '[GITVIEW-Keys]'
5048:	mov     rdi, rax; section
504B:	call    use_section
5050:	mov     edi, 0; keys
5055:	mov     eax, 0
505A:	call    read_keys
505F:	mov     [rbp+keys], eax
5065:	mov     eax, 0
506A:	call    configuration_end
506F:	mov     eax, 0
5074:	call    specific_configuration_init
5079:	lea     rax, aSetup; '[Setup]'
5080:	mov     rdi, rax; section
5083:	call    use_section
5088:	cmp     [rbp+ansi_colors], 0FFFFFFFFh
508F:	jnz     short loc_50AD
5091:	mov     esi, 0; default_value
5096:	lea     rax, var_name; 'AnsiColors'
509D:	mov     rdi, rax; var_name
50A0:	call    get_flag_var
50A5:	mov     cs:AnsiColors, eax
50AB:	jmp     short loc_50B9
50AD:	mov     eax, [rbp+ansi_colors]
50B3:	mov     cs:AnsiColors, eax
50B9:	cmp     [rbp+use_last_screen_character], 0
50C0:	jz      short loc_50DE
50C2:	mov     esi, 0; default_value
50C7:	lea     rax, aUselastscreenc; 'UseLastScreenChar'
50CE:	mov     rdi, rax; var_name
50D1:	call    get_flag_var
50D6:	mov     cs:UseLastScreenChar, eax
50DC:	jmp     short loc_50E8
50DE:	mov     cs:UseLastScreenChar, 0
50E8:	mov     eax, cs:UseLastScreenChar
50EE:	mov     edi, eax; last_char_flag
50F0:	call    tty_set_last_char_flag
50F5:	lea     rax, aGitviewSetup; '[GITVIEW-Setup]'
50FC:	mov     rdi, rax; section
50FF:	call    use_section
5104:	lea     rax, default_value
510B:	mov     rsi, rax; default_value
510E:	lea     rax, aHelp; 'Help'
5115:	mov     rdi, rax; var_name
5118:	call    get_string_var
511D:	mov     cs:g_help, rax
5124:	mov     eax, cs:AnsiColors
512A:	test    eax, eax
512C:	jz      short loc_5137
512E:	lea     rax, color_section; '[GITVIEW-Color]'
5135:	jmp     short loc_513E
5137:	lea     rax, monochrome_section; '[GITVIEW-Monochrome]'
513E:	mov     rdi, rax; section
5141:	call    use_section
5146:	mov     edx, 0Ch; fields_no
514B:	lea     rax, ViewerFields
5152:	mov     rsi, rax; colorset_name
5155:	lea     rax, ViewerColors
515C:	mov     rdi, rax; charset
515F:	call    get_colorset_var
5164:	lea     rax, section; '[GITVIEW-Keys]'
516B:	mov     rdi, rax; section
516E:	call    use_section
5173:	mov     eax, [rbp+keys]
5179:	mov     edi, eax; keys
517B:	mov     eax, 0
5180:	call    read_keys
5185:	mov     [rbp+keys], eax
518B:	cmp     [rbp+keys], 800h
5195:	jnz     short loc_51BE
5197:	mov     rdx, cs:g_program
519E:	mov     rax, cs:stderr@GLIBC_2_2_5
51A5:	mov     ecx, 800h
51AA:	lea     rsi, aSTooManyKeySeq; '%s: too many key sequences; only %d are'...
51B1:	mov     rdi, rax; stream
51B4:	mov     eax, 0
51B9:	call    _fprintf
51BE:	mov     eax, 0
51C3:	call    configuration_end
51C8:	mov     eax, 0
51CD:	call    tty_start_cursorapp
51D2:	mov     eax, 0
51D7:	call    window_init
51DC:	mov     cs:title_window, rax
51E3:	mov     eax, 0
51E8:	call    window_init
51ED:	mov     cs:header_window, rax
51F4:	mov     eax, 0
51F9:	call    window_init
51FE:	mov     cs:file_window, rax
5205:	mov     eax, 0
520A:	call    window_init
520F:	mov     cs:status_window, rax
5216:	mov     edi, 0; resize_required
521B:	mov     eax, 0
5220:	call    resize
5225:	mov     rax, cs:screen
522C:	mov     rdi, rax; buf
522F:	call    tty_get_screen
5234:	mov     edi, 1; mode
5239:	call    tty_set_mode
523E:	mov     eax, 0
5243:	call    tty_defaults
5248:	mov     edi, 1; status
524D:	call    signal_handlers
5252:	mov     eax, cs:count
5258:	cdqe
525A:	lea     rdx, g_offset
5261:	mov     byte ptr [rax+rdx], 0
5265:	mov     cs:g_current_line, 0
5270:	mov     rdx, cs:filename
5277:	mov     rax, cs:header_text
527E:	lea     rcx, aFileS; ' File: %s'
5285:	mov     rsi, rcx; format
5288:	mov     rdi, rax; s
528B:	mov     eax, 0
5290:	call    _sprintf
5295:	mov     rax, cs:header_text
529C:	mov     rdi, rax; string
529F:	call    tty_update_title
52A4:	mov     edi, 0; jumptable 00000000000053D1 cases -9,-7
52A9:	mov     eax, 0
52AE:	call    refresh
52B3:	jmp     short loc_52BF
52B5:	mov     eax, 0
52BA:	call    report_undefined_key
52BF:	lea     rax, [rbp+repeat_count]
52C6:	mov     rdi, rax; repeat_count
52C9:	call    tty_get_key
52CE:	mov     [rbp+ks], rax
52D5:	cmp     [rbp+ks], 0
52DD:	jz      short loc_52B5
52DF:	mov     eax, 0
52E4:	call    set_status
52E9:	mov     rax, [rbp+ks]
52F0:	mov     rax, [rax+10h]
52F4:	test    rax, rax
52F7:	jnz     short loc_5311
52F9:	mov     rax, [rbp+ks]
5300:	mov     rax, [rax]
5303:	movzx   eax, byte ptr [rax]
5306:	movzx   eax, al
5309:	mov     [rbp+key], eax
530F:	jmp     short loc_5350
5311:	mov     rax, [rbp+ks]
5318:	mov     rax, [rax+10h]
531C:	lea     rdx, built_in
5323:	sub     rax, rdx
5326:	mov     rcx, rax
5329:	mov     rdx, 6666666666666667h
5333:	mov     rax, rcx
5336:	imul    rdx
5339:	mov     rax, rdx
533C:	sar     rax, 3
5340:	sar     rcx, 3Fh
5344:	mov     rdx, rcx
5347:	sub     rax, rdx
534A:	mov     [rbp+key], eax
5350:	mov     eax, 0
5355:	call    file_length
535A:	mov     cs:g_size, rax
5361:	mov     rax, cs:g_size
5368:	lea     rdx, [rax+0Fh]
536C:	test    rax, rax
536F:	cmovs   rax, rdx
5373:	sar     rax, 4
5377:	mov     rdx, rax
537A:	mov     rax, cs:g_size
5381:	and     eax, 0Fh
5384:	test    rax, rax
5387:	jz      short loc_5390
5389:	mov     eax, 1
538E:	jmp     short loc_5395
5390:	mov     eax, 0
5395:	add     rax, rdx
5398:	mov     cs:g_lines, rax
539F:	mov     eax, [rbp+key]
53A5:	add     eax, 0Bh; switch 125 cases
53A8:	cmp     eax, 7Ch
53AB:	ja      def_53D1; jumptable 00000000000053D1 default case, cases 0-31,33-47,58-64,71-96,103-112
53B1:	mov     eax, eax
53B3:	lea     rdx, ds:0[rax*4]
53BB:	lea     rax, jpt_53D1
53C2:	mov     eax, ds:(jpt_53D1 - 0B42Ch)[rdx+rax]
53C5:	cdqe
53C7:	lea     rdx, jpt_53D1
53CE:	add     rax, rdx
53D1:	jmp     rax; switch jump
53D4:	mov     [rbp+need_update], 0; jumptable 00000000000053D1 case -1
53DE:	jmp     short loc_5408
53E0:	mov     rax, cs:g_current_line
53E7:	test    rax, rax
53EA:	jz      short loc_541D
53EC:	mov     rax, cs:g_current_line
53F3:	sub     rax, 1
53F7:	mov     cs:g_current_line, rax
53FE:	mov     [rbp+need_update], 1
5408:	mov     eax, [rbp+repeat_count]
540E:	lea     edx, [rax-1]
5411:	mov     [rbp+repeat_count], edx
5417:	test    eax, eax
5419:	jnz     short loc_53E0
541B:	jmp     short loc_541E
541D:	nop
541E:	cmp     [rbp+need_update], 0
5425:	jz      loc_58A7
542B:	mov     eax, 0
5430:	call    update_all
5435:	jmp     loc_58A7
543A:	mov     [rbp+need_update], 0; jumptable 00000000000053D1 case -2
5444:	jmp     short loc_5487
5446:	mov     rax, cs:g_lines
544D:	mov     edx, cs:tty_lines
5453:	sub     edx, 9
5456:	movsxd  rcx, edx
5459:	sub     rax, rcx
545C:	mov     rdx, rax
545F:	mov     rax, cs:g_current_line
5466:	cmp     rdx, rax
5469:	jle     short loc_549C
546B:	mov     rax, cs:g_current_line
5472:	add     rax, 1
5476:	mov     cs:g_current_line, rax
547D:	mov     [rbp+need_update], 1
5487:	mov     eax, [rbp+repeat_count]
548D:	lea     edx, [rax-1]
5490:	mov     [rbp+repeat_count], edx
5496:	test    eax, eax
5498:	jnz     short loc_5446
549A:	jmp     short loc_549D
549C:	nop
549D:	cmp     [rbp+need_update], 0
54A4:	jz      loc_58AA
54AA:	mov     eax, 0
54AF:	call    update_all
54B4:	jmp     loc_58AA
54B9:	mov     eax, cs:count; jumptable 00000000000053D1 case -10
54BF:	test    eax, eax
54C1:	jz      loc_5572; jumptable 00000000000053D1 case -3
54C7:	mov     eax, cs:count
54CD:	sub     eax, 1
54D0:	mov     cs:count, eax
54D6:	mov     eax, cs:tty_lines
54DC:	cmp     eax, 8
54DF:	jle     short loc_554A
54E1:	mov     edx, cs:ViewerColors+1Ch; background
54E7:	mov     ecx, cs:ViewerColors+18h
54ED:	mov     eax, cs:ViewerColors+20h
54F3:	mov     esi, ecx; foreground
54F5:	mov     edi, eax; brightness
54F7:	call    tty_colors
54FC:	lea     rax, seek_txt; ' Seek at: '
5503:	mov     rdi, rax; s
5506:	call    _strlen
550B:	mov     edx, eax
550D:	mov     eax, cs:count
5513:	add     eax, edx
5515:	mov     edx, eax; x
5517:	mov     eax, cs:tty_lines
551D:	lea     ecx, [rax-5]
5520:	mov     rax, cs:file_window
5527:	mov     esi, ecx; y
5529:	mov     rdi, rax; window
552C:	call    window_goto
5531:	mov     rax, cs:file_window
5538:	mov     esi, 20h ; ' '; c
553D:	mov     rdi, rax; window
5540:	call    window_putc
5545:	jmp     loc_58BD
554A:	mov     eax, cs:tty_columns
5550:	lea     edx, [rax-1]; x
5553:	mov     eax, cs:tty_lines
5559:	lea     ecx, [rax-1]
555C:	mov     rax, cs:file_window
5563:	mov     esi, ecx; y
5565:	mov     rdi, rax; window
5568:	call    window_goto
556D:	jmp     loc_58BD
5572:	mov     rax, cs:g_current_line; jumptable 00000000000053D1 case -3
5579:	test    rax, rax
557C:	jz      loc_58AD
5582:	mov     rax, cs:g_current_line
5589:	mov     edx, cs:tty_lines
558F:	sub     edx, 9
5592:	movsxd  rdx, edx
5595:	sub     rax, rdx
5598:	mov     edx, 0
559D:	test    rax, rax
55A0:	cmovs   rax, rdx
55A4:	mov     cs:g_current_line, rax
55AB:	mov     eax, 0
55B0:	call    update_all
55B5:	jmp     loc_58BD
55BA:	mov     rax, cs:g_lines; jumptable 00000000000053D1 cases -4,32
55C1:	mov     edx, cs:tty_lines
55C7:	sub     edx, 9
55CA:	movsxd  rcx, edx
55CD:	sub     rax, rcx
55D0:	mov     rdx, rax
55D3:	mov     rax, cs:g_current_line
55DA:	cmp     rdx, rax
55DD:	jle     loc_58B0
55E3:	mov     rax, cs:g_lines
55EA:	lea     rdx, [rax-1]
55EE:	mov     eax, cs:tty_lines
55F4:	sub     eax, 9
55F7:	movsxd  rcx, eax
55FA:	mov     rax, cs:g_current_line
5601:	add     rax, rcx
5604:	cmp     rdx, rax
5607:	cmovle  rax, rdx
560B:	mov     cs:g_current_line, rax
5612:	mov     eax, 0
5617:	call    update_all
561C:	jmp     loc_58BD
5621:	mov     rax, cs:g_current_line; jumptable 00000000000053D1 case -5
5628:	test    rax, rax
562B:	jz      loc_58B3
5631:	mov     cs:g_current_line, 0
563C:	mov     eax, 0
5641:	call    update_all
5646:	jmp     loc_58B3
564B:	mov     eax, cs:regular_file; jumptable 00000000000053D1 case -6
5651:	test    eax, eax
5653:	jz      loc_58B6
5659:	mov     rax, cs:g_lines
5660:	mov     edx, cs:tty_lines
5666:	sub     edx, 9
5669:	movsxd  rcx, edx
566C:	sub     rax, rcx
566F:	mov     rdx, rax
5672:	mov     rax, cs:g_current_line
5679:	cmp     rdx, rax
567C:	jle     loc_58B6
5682:	mov     rax, cs:g_lines
5689:	mov     edx, cs:tty_lines
568F:	sub     edx, 9
5692:	movsxd  rdx, edx
5695:	sub     rax, rdx
5698:	mov     cs:g_current_line, rax
569F:	mov     eax, 0
56A4:	call    update_all
56A9:	jmp     loc_58B6
56AE:	mov     eax, cs:count; jumptable 00000000000053D1 cases 48-57,65-70,97-102
56B4:	cmp     eax, 7
56B7:	jg      loc_5767
56BD:	mov     eax, cs:tty_lines
56C3:	cmp     eax, 8
56C6:	jle     loc_58B9
56CC:	mov     edx, cs:ViewerColors+1Ch; background
56D2:	mov     ecx, cs:ViewerColors+18h
56D8:	mov     eax, cs:ViewerColors+20h
56DE:	mov     esi, ecx; foreground
56E0:	mov     edi, eax; brightness
56E2:	call    tty_colors
56E7:	lea     rax, seek_txt; ' Seek at: '
56EE:	mov     rdi, rax; s
56F1:	call    _strlen
56F6:	mov     edx, eax
56F8:	mov     eax, cs:count
56FE:	add     eax, edx
5700:	mov     edx, eax; x
5702:	mov     eax, cs:tty_lines
5708:	lea     ecx, [rax-5]
570B:	mov     rax, cs:file_window
5712:	mov     esi, ecx; y
5714:	mov     rdi, rax; window
5717:	call    window_goto
571C:	mov     eax, [rbp+key]
5722:	mov     [rbp+tmp], al
5728:	movsx   edx, [rbp+tmp]
572F:	mov     rax, cs:file_window
5736:	mov     esi, edx; c
5738:	mov     rdi, rax; window
573B:	call    window_putc
5740:	mov     eax, cs:count
5746:	lea     edx, [rax+1]
5749:	mov     cs:count, edx
574F:	cdqe
5751:	lea     rcx, g_offset
5758:	movzx   edx, [rbp+tmp]
575F:	mov     [rax+rcx], dl
5762:	jmp     loc_58B9
5767:	mov     eax, 0
576C:	call    tty_beep
5771:	jmp     loc_58B9
5776:	mov     eax, cs:count; jumptable 00000000000053D1 case -11
577C:	test    eax, eax
577E:	jnz     short loc_578F
5780:	mov     eax, 0
5785:	call    tty_beep
578A:	jmp     loc_58BC
578F:	mov     eax, cs:tty_lines
5795:	cmp     eax, 8
5798:	jle     loc_58BC
579E:	mov     eax, cs:count
57A4:	cdqe
57A6:	lea     rdx, g_offset
57AD:	mov     byte ptr [rax+rdx], 0
57B1:	lea     rax, count
57B8:	mov     rdx, rax
57BB:	lea     rax, asc_B3CC; '%x'
57C2:	mov     rsi, rax
57C5:	lea     rax, g_offset
57CC:	mov     rdi, rax
57CF:	mov     eax, 0
57D4:	call    ___isoc99_sscanf
57D9:	mov     edx, cs:ViewerColors+1Ch; background
57DF:	mov     ecx, cs:ViewerColors+18h
57E5:	mov     eax, cs:ViewerColors+20h
57EB:	mov     esi, ecx; foreground
57ED:	mov     edi, eax; brightness
57EF:	call    tty_colors
57F4:	lea     rax, seek_txt; ' Seek at: '
57FB:	mov     rdi, rax; s
57FE:	call    _strlen
5803:	mov     edx, eax; x
5805:	mov     eax, cs:tty_lines
580B:	lea     ecx, [rax-5]
580E:	mov     rax, cs:file_window
5815:	mov     esi, ecx; y
5817:	mov     rdi, rax; window
581A:	call    window_goto
581F:	mov     rax, cs:file_window
5826:	mov     edx, 8; length
582B:	lea     rcx, str; '        '
5832:	mov     rsi, rcx; str
5835:	mov     rdi, rax; window
5838:	call    window_puts
583D:	mov     eax, cs:count
5843:	test    eax, eax
5845:	jns     short loc_5851
5847:	mov     cs:count, 0
5851:	mov     eax, cs:count
5857:	movsxd  rdx, eax
585A:	mov     rax, cs:g_size
5861:	cmp     rdx, rax
5864:	jle     short loc_5873
5866:	mov     rax, cs:g_size
586D:	mov     cs:count, eax
5873:	mov     eax, cs:count
5879:	sar     eax, 4
587C:	cdqe
587E:	mov     cs:g_current_line, rax
5885:	mov     eax, 0
588A:	call    update_all
588F:	mov     cs:count, 0
5899:	jmp     short loc_58BC
589B:	mov     eax, 0; jumptable 00000000000053D1 default case, cases 0-31,33-47,58-64,71-96,103-112
58A0:	call    report_undefined_key
58A5:	jmp     short loc_58BD
58A7:	nop
58A8:	jmp     short loc_58BD
58AA:	nop
58AB:	jmp     short loc_58BD
58AD:	nop
58AE:	jmp     short loc_58BD
58B0:	nop
58B1:	jmp     short loc_58BD
58B3:	nop
58B4:	jmp     short loc_58BD
58B6:	nop
58B7:	jmp     short loc_58BD
58B9:	nop
58BA:	jmp     short loc_58BD
58BC:	nop
58BD:	mov     eax, 0
58C2:	call    cursor_update
58C7:	jmp     loc_52BF
58CC:	nop; jumptable 00000000000053D1 cases -8,113
58CD:	mov     edi, 0; mode
58D2:	call    tty_set_mode
58D7:	mov     eax, 0
58DC:	call    tty_end_cursorapp
58E1:	mov     rax, cs:screen
58E8:	mov     rdi, rax; screen
58EB:	call    tty_end
58F0:	mov     eax, 0
58F5:	mov     rdx, [rbp+var_8]
58F9:	sub     rdx, fs:28h
5902:	jz      short locret_5909
5904:	call    ___stack_chk_fail
5909:	leave
590A:	retn
590B:	endbr64
590F:	push    rbp
5910:	mov     rbp, rsp
5913:	mov     [rbp+last_char_flag], edi
5916:	mov     eax, [rbp+last_char_flag]
5919:	mov     cs:tty_last_char_flag, eax
591F:	nop
5920:	pop     rbp
5921:	retn
5922:	endbr64
5926:	push    rbp
5927:	mov     rbp, rsp
592A:	sub     rsp, 10h
592E:	mov     [rbp+mode], edi
5931:	cmp     [rbp+mode], 1
5935:	jnz     loc_5AB4
593B:	mov     rax, qword ptr cs:old_term.c_iflag
5942:	mov     rdx, qword ptr cs:old_term.c_cflag
5949:	mov     qword ptr cs:new_term.c_iflag, rax
5950:	mov     qword ptr cs:new_term.c_cflag, rdx
5957:	mov     rax, qword ptr cs:old_term.c_line
595E:	mov     rdx, qword ptr cs:old_term.c_cc+7
5965:	mov     qword ptr cs:new_term.c_line, rax
596C:	mov     qword ptr cs:new_term.c_cc+7, rdx
5973:	mov     rax, qword ptr cs:old_term.c_cc+0Fh
597A:	mov     rdx, qword ptr cs:old_term.c_cc+17h
5981:	mov     qword ptr cs:new_term.c_cc+0Fh, rax
5988:	mov     qword ptr cs:new_term.c_cc+17h, rdx
598F:	mov     rax, qword ptr cs:old_term.c_cc+1Fh
5996:	mov     qword ptr cs:new_term.c_cc+1Fh, rax
599D:	mov     eax, cs:old_term.c_ospeed
59A3:	mov     cs:new_term.c_ospeed, eax
59A9:	mov     eax, cs:new_term.c_iflag
59AF:	and     eax, 0FFFFFA3Ch
59B4:	mov     cs:new_term.c_iflag, eax
59BA:	mov     eax, cs:new_term.c_oflag
59C0:	and     eax, 0FFFFFFFEh
59C3:	mov     cs:new_term.c_oflag, eax
59C9:	mov     eax, cs:new_term.c_lflag
59CF:	or      al, 81h
59D1:	mov     cs:new_term.c_lflag, eax
59D7:	mov     eax, cs:new_term.c_lflag
59DD:	and     eax, 0FFFFFFF5h
59E0:	mov     cs:new_term.c_lflag, eax
59E6:	mov     cs:new_term.c_cc, 7
59ED:	mov     cs:new_term.c_cc+1, 0
59F4:	mov     cs:new_term.c_cc+8, 0
59FB:	mov     cs:new_term.c_cc+9, 0
5A02:	mov     cs:new_term.c_cc+6, 1
5A09:	mov     cs:new_term.c_cc+5, 0
5A10:	mov     cs:new_term.c_cc+2, 0
5A17:	mov     cs:new_term.c_cc+3, 0
5A1E:	mov     cs:new_term.c_cc+0Bh, 0
5A25:	mov     cs:new_term.c_cc+10h, 0
5A2C:	mov     cs:new_term.c_cc+0Ah, 1Ah
5A33:	mov     cs:new_term.c_cc+0Ch, 0
5A3A:	mov     cs:new_term.c_cc+0Dh, 0
5A41:	mov     cs:new_term.c_cc+0Eh, 0
5A48:	mov     cs:new_term.c_cc+0Fh, 0
5A4F:	lea     rax, new_term
5A56:	mov     rdx, rax; termios_p
5A59:	mov     esi, 1; optional_actions
5A5E:	mov     edi, 1; fd
5A63:	call    _tcsetattr
5A68:	lea     rax, new_term
5A6F:	mov     rdi, rax; termios_p
5A72:	call    _cfgetospeed
5A77:	mov     cs:ospeed, eax
5A7D:	mov     edx, 1
5A82:	mov     esi, 540Ah; request
5A87:	mov     edi, 1; fd
5A8C:	mov     eax, 0
5A91:	call    _ioctl
5A96:	mov     esi, 1; action
5A9B:	mov     edi, 1; fd
5AA0:	call    _tcflow
5AA5:	mov     eax, cs:tty_interrupt_char
5AAB:	mov     edi, eax; c
5AAD:	call    tty_set_interrupt_char
5AB2:	jmp     short loc_5ACD
5AB4:	lea     rax, old_term
5ABB:	mov     rdx, rax; termios_p
5ABE:	mov     esi, 1; optional_actions
5AC3:	mov     edi, 1; fd
5AC8:	call    _tcsetattr
5ACD:	mov     eax, [rbp+mode]
5AD0:	mov     cs:tty_mode, eax
5AD6:	nop
5AD7:	leave
5AD8:	retn
5AD9:	endbr64
5ADD:	push    rbp
5ADE:	mov     rbp, rsp
5AE1:	mov     eax, cs:tty_mode
5AE7:	pop     rbp
5AE8:	retn
5AE9:	endbr64
5AED:	push    rbp
5AEE:	mov     rbp, rsp
5AF1:	sub     rsp, 60h
5AF5:	mov     [rbp+c], edi
5AF8:	mov     rax, fs:28h
5B01:	mov     [rbp+var_8], rax
5B05:	xor     eax, eax
5B07:	lea     rax, [rbp+current_term]
5B0B:	mov     rsi, rax; termios_p
5B0E:	mov     edi, 1; fd
5B13:	call    _tcgetattr
5B18:	mov     eax, [rbp+c]
5B1B:	mov     [rbp+current_term.c_cc], al
5B1E:	mov     [rbp+current_term.c_cc+1], 0
5B22:	lea     rax, [rbp+current_term]
5B26:	mov     rdx, rax; termios_p
5B29:	mov     esi, 1; optional_actions
5B2E:	mov     edi, 1; fd
5B33:	call    _tcsetattr
5B38:	mov     eax, [rbp+c]
5B3B:	mov     cs:tty_interrupt_char, eax
5B41:	nop
5B42:	mov     rax, [rbp+var_8]
5B46:	sub     rax, fs:28h
5B4F:	jz      short locret_5B56
5B51:	call    ___stack_chk_fail
5B56:	leave
5B57:	retn
5B58:	endbr64
5B5C:	push    rbp
5B5D:	mov     rbp, rsp
5B60:	sub     rsp, 10h
5B64:	mov     [rbp+bytes_transferred], 0
5B6B:	jmp     short loc_5BA7
5B6D:	mov     eax, cs:tty_index
5B73:	sub     eax, [rbp+bytes_transferred]
5B76:	cdqe
5B78:	mov     edx, [rbp+bytes_transferred]
5B7B:	movsxd  rdx, edx
5B7E:	lea     rcx, tty_cache
5B85:	add     rcx, rdx
5B88:	mov     rdx, rax; count
5B8B:	mov     rsi, rcx; buf
5B8E:	mov     edi, 1; fd
5B93:	call    xwrite
5B98:	mov     [rbp+count], eax
5B9B:	cmp     [rbp+count], 0
5B9F:	js      short loc_5BB4
5BA1:	mov     eax, [rbp+count]
5BA4:	add     [rbp+bytes_transferred], eax
5BA7:	mov     eax, cs:tty_index
5BAD:	cmp     [rbp+bytes_transferred], eax
5BB0:	jl      short loc_5B6D
5BB2:	jmp     short loc_5BB5
5BB4:	nop
5BB5:	mov     cs:tty_index, 0
5BBF:	nop
5BC0:	leave
5BC1:	retn
5BC2:	endbr64
5BC6:	push    rbp
5BC7:	mov     rbp, rsp
5BCA:	sub     rsp, 10h
5BCE:	mov     [rbp+c], edi
5BD1:	mov     eax, cs:tty_index
5BD7:	cmp     eax, 400h
5BDC:	jnz     short loc_5BE8
5BDE:	mov     eax, 0
5BE3:	call    tty_flush
5BE8:	mov     eax, cs:tty_index
5BEE:	lea     edx, [rax+1]
5BF1:	mov     cs:tty_index, edx
5BF7:	mov     edx, [rbp+c]
5BFA:	mov     ecx, edx
5BFC:	cdqe
5BFE:	lea     rdx, tty_cache
5C05:	mov     [rax+rdx], cl
5C08:	mov     eax, 1
5C0D:	leave
5C0E:	retn
5C0F:	endbr64
5C13:	push    rbp
5C14:	mov     rbp, rsp
5C17:	mov     ecx, cs:tty_lines
5C1D:	mov     rax, cs:tty_capability.string+0A0h
5C24:	lea     rdx, tty_writec; int (*)(int)
5C2B:	mov     esi, ecx; int
5C2D:	mov     rdi, rax; char *
5C30:	call    _tputs
5C35:	mov     eax, 0
5C3A:	call    tty_flush
5C3F:	nop
5C40:	pop     rbp
5C41:	retn
5C42:	endbr64
5C46:	push    rbp
5C47:	mov     rbp, rsp
5C4A:	mov     eax, cs:tty_lines
5C50:	lea     ecx, [rax-1]
5C53:	mov     rax, cs:tty_capability.string+1E0h
5C5A:	lea     rdx, tty_writec; int (*)(int)
5C61:	mov     esi, ecx; int
5C63:	mov     rdi, rax; char *
5C66:	call    _tputs
5C6B:	mov     eax, 0
5C70:	call    tty_flush
5C75:	nop
5C76:	pop     rbp
5C77:	retn
5C78:	endbr64
5C7C:	push    rbp
5C7D:	mov     rbp, rsp
5C80:	mov     eax, cs:tty_lines
5C86:	lea     ecx, [rax-1]
5C89:	mov     rax, cs:tty_capability.string+200h
5C90:	lea     rdx, tty_writec; int (*)(int)
5C97:	mov     esi, ecx; int
5C99:	mov     rdi, rax; char *
5C9C:	call    _tputs
5CA1:	mov     eax, 0
5CA6:	call    tty_flush
5CAB:	nop
5CAC:	pop     rbp
5CAD:	retn
5CAE:	endbr64
5CB2:	push    rbp
5CB3:	mov     rbp, rsp
5CB6:	sub     rsp, 10h
5CBA:	mov     [rbp+screen], rdi
5CBE:	mov     eax, cs:tty_mode
5CC4:	cmp     eax, 1
5CC7:	jnz     short loc_5CD3
5CC9:	mov     edi, 0; mode
5CCE:	call    tty_set_mode
5CD3:	mov     eax, 0
5CD8:	call    tty_defaults
5CDD:	cmp     [rbp+screen], 0
5CE2:	jz      short loc_5CFA
5CE4:	mov     eax, cs:LinuxConsole
5CEA:	test    eax, eax
5CEC:	jz      short loc_5CFA
5CEE:	mov     rax, [rbp+screen]
5CF2:	mov     rdi, rax; buf
5CF5:	call    tty_put_screen
5CFA:	mov     eax, 0
5CFF:	call    tty_end_cursorapp
5D04:	mov     eax, cs:tty_lines
5D0A:	mov     esi, 0; x
5D0F:	mov     edi, eax; y
5D11:	call    tty_io_goto
5D16:	mov     eax, 0
5D1B:	call    tty_flush
5D20:	mov     edi, 0Ah; c
5D25:	call    _putchar
5D2A:	nop
5D2B:	leave
5D2C:	retn
5D2D:	endbr64
5D31:	push    rbp
5D32:	mov     rbp, rsp
5D35:	sub     rsp, 20h
5D39:	mov     [rbp+key_seq], rdi
5D3D:	mov     rax, [rbp+key_seq]
5D41:	mov     [rbp+second], rax
5D45:	mov     rax, [rbp+second]
5D49:	mov     [rbp+first], rax
5D4D:	mov     eax, cs:tty_kbdmode
5D53:	test    eax, eax
5D55:	jnz     loc_5E20
5D5B:	mov     rax, [rbp+key_seq]
5D5F:	movzx   eax, byte ptr [rax]
5D62:	cmp     al, 5Eh ; '^'
5D64:	jz      loc_5E20
5D6A:	mov     eax, 0
5D6F:	jmp     locret_5E3A
5D74:	mov     rax, [rbp+second]
5D78:	movzx   eax, byte ptr [rax]
5D7B:	cmp     al, 5Eh ; '^'
5D7D:	jnz     loc_5E03
5D83:	add     [rbp+second], 1
5D88:	mov     rax, [rbp+second]
5D8C:	movzx   eax, byte ptr [rax]
5D8F:	test    al, al
5D91:	jz      short loc_5DFC
5D93:	mov     rax, [rbp+second]
5D97:	movzx   eax, byte ptr [rax]
5D9A:	movzx   eax, al
5D9D:	mov     edi, eax; c
5D9F:	call    _toupper
5DA4:	cmp     eax, 47h ; 'G'
5DA7:	jz      short loc_5DBF
5DA9:	mov     rax, [rbp+second]
5DAD:	movzx   eax, byte ptr [rax]
5DB0:	movzx   eax, al
5DB3:	mov     edi, eax; c
5DB5:	call    _toupper
5DBA:	cmp     eax, 5Ah ; 'Z'
5DBD:	jnz     short loc_5DC6
5DBF:	mov     eax, 0
5DC4:	jmp     short locret_5E3A
5DC6:	mov     rax, [rbp+second]
5DCA:	lea     rdx, [rax+1]
5DCE:	mov     [rbp+second], rdx
5DD2:	movzx   eax, byte ptr [rax]
5DD5:	movzx   eax, al
5DD8:	and     eax, 7Fh
5DDB:	lea     ecx, [rax-20h]
5DDE:	mov     rax, [rbp+first]
5DE2:	lea     rdx, [rax+1]
5DE6:	mov     [rbp+first], rdx
5DEA:	movsxd  rdx, ecx
5DED:	lea     rcx, key_ctrl_table
5DF4:	movzx   edx, byte ptr [rdx+rcx]
5DF8:	mov     [rax], dl
5DFA:	jmp     short loc_5E20
5DFC:	mov     eax, 0
5E01:	jmp     short locret_5E3A
5E03:	mov     rdx, [rbp+second]
5E07:	lea     rax, [rdx+1]
5E0B:	mov     [rbp+second], rax
5E0F:	mov     rax, [rbp+first]
5E13:	lea     rcx, [rax+1]
5E17:	mov     [rbp+first], rcx
5E1B:	movzx   edx, byte ptr [rdx]
5E1E:	mov     [rax], dl
5E20:	mov     rax, [rbp+second]
5E24:	movzx   eax, byte ptr [rax]
5E27:	test    al, al
5E29:	jnz     loc_5D74
5E2F:	mov     rax, [rbp+first]
5E33:	mov     byte ptr [rax], 0
5E36:	mov     rax, [rbp+key_seq]
5E3A:	leave
5E3B:	retn
5E3C:	endbr64
5E40:	push    rbp
5E41:	mov     rbp, rsp
5E44:	sub     rsp, 30h
5E48:	mov     [rbp+key_seq], rdi
5E4C:	mov     rax, fs:28h
5E55:	mov     [rbp+var_8], rax
5E59:	xor     eax, eax
5E5B:	mov     cs:keystr, 0
5E62:	mov     rax, [rbp+key_seq]
5E66:	mov     [rbp+ptr], rax
5E6A:	jmp     loc_6001
5E6F:	mov     rax, [rbp+ptr]
5E73:	cmp     rax, [rbp+key_seq]
5E77:	jz      short loc_5E9A
5E79:	lea     rax, keystr
5E80:	mov     rdi, rax; s
5E83:	call    _strlen
5E88:	mov     rdx, rax
5E8B:	lea     rax, keystr
5E92:	add     rax, rdx
5E95:	mov     word ptr [rax], 20h ; ' '
5E9A:	mov     rax, [rbp+ptr]
5E9E:	movzx   eax, byte ptr [rax]
5EA1:	cmp     al, 1Bh
5EA3:	jnz     short loc_5ED6
5EA5:	lea     rax, keystr
5EAC:	mov     rdi, rax; s
5EAF:	call    _strlen
5EB4:	mov     rdx, rax
5EB7:	lea     rax, keystr
5EBE:	add     rax, rdx
5EC1:	mov     dword ptr [rax], 61637365h
5EC7:	mov     word ptr [rax+4], 6570h
5ECD:	mov     byte ptr [rax+6], 0
5ED1:	jmp     loc_5FFC
5ED6:	mov     rax, [rbp+ptr]
5EDA:	movzx   eax, byte ptr [rax]
5EDD:	cmp     al, 20h ; ' '
5EDF:	jnz     short loc_5F0E
5EE1:	lea     rax, keystr
5EE8:	mov     rdi, rax; s
5EEB:	call    _strlen
5EF0:	mov     rdx, rax
5EF3:	lea     rax, keystr
5EFA:	add     rax, rdx
5EFD:	mov     dword ptr [rax], 63617073h
5F03:	mov     word ptr [rax+4], 65h ; 'e'
5F09:	jmp     loc_5FFC
5F0E:	mov     rax, [rbp+ptr]
5F12:	movzx   eax, byte ptr [rax]
5F15:	cmp     al, 7Fh
5F17:	jnz     short loc_5F4D
5F19:	lea     rax, keystr
5F20:	mov     rdi, rax; s
5F23:	call    _strlen
5F28:	mov     rdx, rax
5F2B:	lea     rax, keystr
5F32:	add     rax, rdx
5F35:	mov     rcx, 636170736B636162h
5F3F:	mov     [rax], rcx
5F42:	mov     word ptr [rax+8], 65h ; 'e'
5F48:	jmp     loc_5FFC
5F4D:	mov     rax, [rbp+ptr]
5F51:	movzx   eax, byte ptr [rax]
5F54:	cmp     al, 0FFh
5F56:	jnz     short loc_5F86
5F58:	lea     rax, keystr
5F5F:	mov     rdi, rax; s
5F62:	call    _strlen
5F67:	mov     rdx, rax
5F6A:	lea     rax, keystr
5F71:	add     rax, rdx
5F74:	mov     dword ptr [rax], 6170735Eh
5F7A:	mov     word ptr [rax+4], 6563h
5F80:	mov     byte ptr [rax+6], 0
5F84:	jmp     short loc_5FFC
5F86:	call    ___ctype_b_loc
5F8B:	mov     rdx, [rax]
5F8E:	mov     rax, [rbp+ptr]
5F92:	movzx   eax, byte ptr [rax]
5F95:	movzx   eax, al
5F98:	add     rax, rax
5F9B:	add     rax, rdx
5F9E:	movzx   eax, word ptr [rax]
5FA1:	movzx   eax, ax
5FA4:	and     eax, 2
5FA7:	test    eax, eax
5FA9:	jz      short loc_5FD8
5FAB:	mov     [rbp+x], 5Eh ; '^'
5FAF:	mov     rax, [rbp+ptr]
5FB3:	movzx   eax, byte ptr [rax]
5FB6:	add     eax, 40h ; '@'
5FB9:	mov     [rbp+x+1], al
5FBC:	mov     [rbp+x+2], 0
5FC0:	lea     rax, [rbp+x]
5FC4:	mov     rsi, rax; src
5FC7:	lea     rax, keystr
5FCE:	mov     rdi, rax; dest
5FD1:	call    _strcat
5FD6:	jmp     short loc_5FFC
5FD8:	mov     rax, [rbp+ptr]
5FDC:	movzx   eax, byte ptr [rax]
5FDF:	mov     [rbp+x], al
5FE2:	mov     [rbp+x+1], 0
5FE6:	lea     rax, [rbp+x]
5FEA:	mov     rsi, rax; src
5FED:	lea     rax, keystr
5FF4:	mov     rdi, rax; dest
5FF7:	call    _strcat
5FFC:	add     [rbp+ptr], 1
6001:	mov     rax, [rbp+ptr]
6005:	movzx   eax, byte ptr [rax]
6008:	test    al, al
600A:	jnz     loc_5E6F
6010:	lea     rax, keystr
6017:	mov     rdx, [rbp+var_8]
601B:	sub     rdx, fs:28h
6024:	jz      short locret_602B
6026:	call    ___stack_chk_fail
602B:	leave
602C:	retn
602D:	endbr64
6031:	push    rbp
6032:	mov     rbp, rsp
6035:	sub     rsp, 20h
6039:	mov     [rbp+tty_io_cursor_x], 0FFFFFFFFh
6040:	mov     [rbp+tty_io_cursor_y], 0FFFFFFFFh
6047:	mov     edx, cs:tty_columns
604D:	mov     eax, cs:tty_lines
6053:	imul    eax, edx
6056:	mov     [rbp+last_pos], eax
6059:	mov     eax, cs:tty_last_char_flag
605F:	test    eax, eax
6061:	jnz     short loc_6067
6063:	sub     [rbp+last_pos], 1
6067:	mov     edi, 0; status
606C:	call    tty_cursor
6071:	mov     [rbp+pos], 0
6078:	jmp     loc_6178
607D:	mov     rdx, cs:tty_scr
6084:	mov     eax, [rbp+pos]
6087:	cdqe
6089:	add     rax, rdx
608C:	movzx   edx, byte ptr [rax]
608F:	mov     rcx, cs:tty_prev_scr
6096:	mov     eax, [rbp+pos]
6099:	cdqe
609B:	add     rax, rcx
609E:	movzx   eax, byte ptr [rax]
60A1:	cmp     dl, al
60A3:	jnz     short loc_60D1
60A5:	mov     rdx, cs:tty_atr
60AC:	mov     eax, [rbp+pos]
60AF:	cdqe
60B1:	add     rax, rdx
60B4:	movzx   edx, byte ptr [rax]
60B7:	mov     rcx, cs:tty_prev_atr
60BE:	mov     eax, [rbp+pos]
60C1:	cdqe
60C3:	add     rax, rcx
60C6:	movzx   eax, byte ptr [rax]
60C9:	cmp     dl, al
60CB:	jz      loc_6174
60D1:	mov     esi, cs:tty_columns
60D7:	mov     eax, [rbp+pos]
60DA:	cdq
60DB:	idiv    esi
60DD:	mov     [rbp+y], eax
60E0:	mov     ecx, cs:tty_columns
60E6:	mov     eax, [rbp+pos]
60E9:	cdq
60EA:	idiv    ecx
60EC:	mov     [rbp+x], edx
60EF:	mov     eax, [rbp+x]
60F2:	cmp     eax, [rbp+tty_io_cursor_x]
60F5:	jnz     short loc_60FF
60F7:	mov     eax, [rbp+y]
60FA:	cmp     eax, [rbp+tty_io_cursor_y]
60FD:	jz      short loc_611A
60FF:	mov     eax, [rbp+x]
6102:	mov     [rbp+tty_io_cursor_x], eax
6105:	mov     eax, [rbp+y]
6108:	mov     [rbp+tty_io_cursor_y], eax
610B:	mov     edx, [rbp+tty_io_cursor_x]
610E:	mov     eax, [rbp+tty_io_cursor_y]
6111:	mov     esi, edx; x
6113:	mov     edi, eax; y
6115:	call    tty_io_goto
611A:	mov     rdx, cs:tty_atr
6121:	mov     eax, [rbp+pos]
6124:	cdqe
6126:	add     rax, rdx
6129:	movzx   eax, byte ptr [rax]
612C:	movzx   eax, al
612F:	mov     edi, eax; attributes
6131:	call    tty_io_colors
6136:	mov     rdx, cs:tty_scr
613D:	mov     eax, [rbp+pos]
6140:	cdqe
6142:	add     rax, rdx
6145:	movzx   eax, byte ptr [rax]
6148:	movzx   eax, al
614B:	mov     edi, eax; c
614D:	mov     eax, 0
6152:	call    tty_writec
6157:	add     [rbp+tty_io_cursor_x], 1
615B:	mov     eax, cs:tty_columns
6161:	cmp     [rbp+tty_io_cursor_x], eax
6164:	jnz     short loc_6174
6166:	mov     [rbp+tty_io_cursor_x], 0
616D:	mov     [rbp+tty_io_cursor_y], 0FFFFFFFFh
6174:	add     [rbp+pos], 1
6178:	mov     eax, [rbp+pos]
617B:	cmp     eax, [rbp+last_pos]
617E:	jl      loc_607D
6184:	mov     edx, cs:tty_cursor_x
618A:	mov     eax, cs:tty_cursor_y
6190:	mov     esi, edx; x
6192:	mov     edi, eax; y
6194:	call    tty_io_goto
6199:	mov     edi, 1; status
619E:	call    tty_cursor
61A3:	mov     eax, cs:tty_index
61A9:	test    eax, eax
61AB:	jz      short loc_61B7
61AD:	mov     eax, 0
61B2:	call    tty_flush
61B7:	mov     edx, cs:tty_columns
61BD:	mov     eax, cs:tty_lines
61C3:	imul    eax, edx
61C6:	movsxd  rdx, eax; n
61C9:	mov     rcx, cs:tty_scr
61D0:	mov     rax, cs:tty_prev_scr
61D7:	mov     rsi, rcx; src
61DA:	mov     rdi, rax; dest
61DD:	call    _memcpy
61E2:	mov     edx, cs:tty_columns
61E8:	mov     eax, cs:tty_lines
61EE:	imul    eax, edx
61F1:	movsxd  rdx, eax; n
61F4:	mov     rcx, cs:tty_atr
61FB:	mov     rax, cs:tty_prev_atr
6202:	mov     rsi, rcx; src
6205:	mov     rdi, rax; dest
6208:	call    _memcpy
620D:	nop
620E:	leave
620F:	retn
6210:	endbr64
6214:	push    rbp
6215:	mov     rbp, rsp
6218:	sub     rsp, 10h
621C:	mov     [rbp+s], rdi
6220:	mov     [rbp+len], esi
6223:	mov     edx, cs:tty_index
6229:	mov     eax, [rbp+len]
622C:	add     eax, edx
622E:	cmp     eax, 3FFh
6233:	jle     short loc_623F
6235:	mov     eax, 0
623A:	call    tty_flush
623F:	mov     eax, [rbp+len]
6242:	movsxd  rdx, eax; n
6245:	mov     eax, cs:tty_index
624B:	cdqe
624D:	lea     rcx, tty_cache
6254:	add     rcx, rax
6257:	mov     rax, [rbp+s]
625B:	mov     rsi, rax; src
625E:	mov     rdi, rcx; dest
6261:	call    _memcpy
6266:	mov     edx, cs:tty_index
626C:	mov     eax, [rbp+len]
626F:	add     eax, edx
6271:	mov     cs:tty_index, eax
6277:	mov     eax, [rbp+len]
627A:	leave
627B:	retn
627C:	endbr64
6280:	push    rbp
6281:	mov     rbp, rsp
6284:	sub     rsp, 20h
6288:	mov     [rbp+buf], rdi
628C:	mov     [rbp+length], esi
628F:	mov     eax, cs:tty_cursor_x
6295:	mov     [rbp+x], eax
6298:	mov     edx, cs:tty_cursor_x
629E:	mov     eax, [rbp+length]
62A1:	add     eax, edx
62A3:	mov     cs:tty_cursor_x, eax
62A9:	mov     eax, cs:tty_columns
62AF:	cmp     [rbp+x], eax
62B2:	jl      short loc_62BE
62B4:	mov     eax, 0
62B9:	jmp     locret_635E
62BE:	mov     edx, cs:tty_cursor_y
62C4:	mov     eax, cs:tty_lines
62CA:	cmp     edx, eax
62CC:	jl      short loc_62D8
62CE:	mov     eax, 0
62D3:	jmp     locret_635E
62D8:	mov     edx, [rbp+x]
62DB:	mov     eax, [rbp+length]
62DE:	add     edx, eax
62E0:	mov     eax, cs:tty_columns
62E6:	cmp     edx, eax
62E8:	jle     short loc_62F6
62EA:	mov     eax, cs:tty_columns
62F0:	sub     eax, [rbp+x]
62F3:	mov     [rbp+length], eax
62F6:	mov     edx, cs:tty_cursor_y
62FC:	mov     eax, cs:tty_columns
6302:	imul    edx, eax
6305:	mov     eax, [rbp+x]
6308:	add     eax, edx
630A:	mov     [rbp+tty_offset], eax
630D:	mov     eax, [rbp+length]
6310:	movsxd  rdx, eax; n
6313:	mov     rcx, cs:tty_scr
631A:	mov     eax, [rbp+tty_offset]
631D:	cdqe
631F:	add     rcx, rax
6322:	mov     rax, [rbp+buf]
6326:	mov     rsi, rax; src
6329:	mov     rdi, rcx; dest
632C:	call    _memcpy
6331:	mov     eax, [rbp+length]
6334:	movsxd  rdx, eax; n
6337:	movzx   eax, cs:tty_current_attribute
633E:	movzx   eax, al
6341:	mov     rsi, cs:tty_atr
6348:	mov     ecx, [rbp+tty_offset]
634B:	movsxd  rcx, ecx
634E:	add     rcx, rsi
6351:	mov     esi, eax; c
6353:	mov     rdi, rcx; s
6356:	call    _memset
635B:	mov     eax, [rbp+length]
635E:	leave
635F:	retn
6360:	endbr64
6364:	push    rbp
6365:	mov     rbp, rsp
6368:	sub     rsp, 20h
636C:	mov     [rbp+c], edi
636F:	mov     rax, fs:28h
6378:	mov     [rbp+var_8], rax
637C:	xor     eax, eax
637E:	mov     eax, [rbp+c]
6381:	mov     [rbp+character], al
6384:	lea     rax, [rbp+character]
6388:	mov     esi, 1; length
638D:	mov     rdi, rax; buf
6390:	call    tty_puts
6395:	mov     rdx, [rbp+var_8]
6399:	sub     rdx, fs:28h
63A2:	jz      short locret_63A9
63A4:	call    ___stack_chk_fail
63A9:	leave
63AA:	retn
63AB:	endbr64
63AF:	push    rbp
63B0:	mov     rbp, rsp
63B3:	sub     rsp, 20h
63B7:	mov     [rbp+buf], rdi
63BB:	mov     [rbp+length], esi
63BE:	mov     eax, 0
63C3:	call    tty_update
63C8:	mov     rax, cs:tty_enter_idle_hook
63CF:	test    rax, rax
63D2:	jz      short loc_63E2
63D4:	mov     rdx, cs:tty_enter_idle_hook
63DB:	mov     eax, 0
63E0:	call    rdx ; tty_enter_idle_hook
63E2:	mov     eax, [rbp+length]
63E5:	movsxd  rdx, eax; count
63E8:	mov     rax, [rbp+buf]
63EC:	mov     rsi, rax; buf
63EF:	mov     edi, 0; fd
63F4:	call    xread
63F9:	mov     [rbp+bytes], eax
63FC:	mov     rax, cs:tty_exit_idle_hook
6403:	test    rax, rax
6406:	jz      short loc_6416
6408:	mov     rdx, cs:tty_exit_idle_hook
640F:	mov     eax, 0
6414:	call    rdx ; tty_exit_idle_hook
6416:	mov     eax, [rbp+bytes]
6419:	leave
641A:	retn
641B:	endbr64
641F:	push    rbp
6420:	mov     rbp, rsp
6423:	mov     eax, 0
6428:	call    tty_io_clear
642D:	mov     edx, cs:tty_lines
6433:	mov     eax, cs:tty_columns
6439:	imul    eax, edx
643C:	movsxd  rdx, eax; n
643F:	mov     rax, cs:tty_scr
6446:	mov     esi, 0; c
644B:	mov     rdi, rax; s
644E:	call    _memset
6453:	mov     edx, cs:tty_lines
6459:	mov     eax, cs:tty_columns
645F:	imul    eax, edx
6462:	movsxd  rdx, eax; n
6465:	mov     rax, cs:tty_atr
646C:	mov     esi, 0; c
6471:	mov     rdi, rax; s
6474:	call    _memset
6479:	mov     edx, cs:tty_lines
647F:	mov     eax, cs:tty_columns
6485:	imul    eax, edx
6488:	movsxd  rdx, eax; n
648B:	mov     rax, cs:tty_prev_scr
6492:	mov     esi, 0; c
6497:	mov     rdi, rax; s
649A:	call    _memset
649F:	mov     edx, cs:tty_lines
64A5:	mov     eax, cs:tty_columns
64AB:	imul    eax, edx
64AE:	movsxd  rdx, eax; n
64B1:	mov     rax, cs:tty_prev_atr
64B8:	mov     esi, 0; c
64BD:	mov     rdi, rax; s
64C0:	call    _memset
64C5:	mov     cs:tty_cursor_x, 0
64CF:	mov     cs:tty_cursor_y, 0
64D9:	nop
64DA:	pop     rbp
64DB:	retn
64DC:	endbr64
64E0:	push    rbp
64E1:	mov     rbp, rsp
64E4:	mov     edx, cs:tty_lines
64EA:	mov     eax, cs:tty_columns
64F0:	imul    eax, edx
64F3:	movsxd  rdx, eax; n
64F6:	mov     rax, cs:tty_scr
64FD:	mov     esi, 20h ; ' '; c
6502:	mov     rdi, rax; s
6505:	call    _memset
650A:	mov     edx, cs:tty_lines
6510:	mov     eax, cs:tty_columns
6516:	imul    eax, edx
6519:	movsxd  rdx, eax; n
651C:	movzx   eax, cs:tty_current_attribute
6523:	movzx   ecx, al
6526:	mov     rax, cs:tty_atr
652D:	mov     esi, ecx; c
652F:	mov     rdi, rax; s
6532:	call    _memset
6537:	mov     eax, 0
653C:	call    tty_touch
6541:	nop
6542:	pop     rbp
6543:	retn
6544:	endbr64
6548:	push    rbp
6549:	mov     rbp, rsp
654C:	mov     edx, cs:tty_lines
6552:	mov     eax, cs:tty_columns
6558:	imul    eax, edx
655B:	movsxd  rdx, eax; n
655E:	mov     rax, cs:tty_prev_scr
6565:	mov     esi, 0; c
656A:	mov     rdi, rax; s
656D:	call    _memset
6572:	nop
6573:	pop     rbp
6574:	retn
6575:	endbr64
6579:	push    rbp
657A:	mov     rbp, rsp
657D:	sub     rsp, 10h
6581:	mov     [rbp+y], edi
6584:	mov     [rbp+x], esi
6587:	mov     eax, cs:tty_capability.integer+180h
658D:	test    eax, eax
658F:	jnz     short loc_659B
6591:	mov     eax, 0
6596:	call    tty_defaults
659B:	cmp     [rbp+x], 0
659F:	js      short loc_65BD
65A1:	mov     eax, cs:tty_columns
65A7:	cmp     [rbp+x], eax
65AA:	jge     short loc_65BD
65AC:	cmp     [rbp+y], 0
65B0:	js      short loc_65BD
65B2:	mov     eax, cs:tty_lines
65B8:	cmp     [rbp+y], eax
65BB:	jl      short loc_65FC
65BD:	mov     eax, cs:tty_lines
65C3:	lea     edx, [rax-1]; int
65C6:	mov     eax, cs:tty_columns
65CC:	lea     ecx, [rax-1]
65CF:	mov     rax, cs:tty_capability.string+0C0h
65D6:	mov     esi, ecx; int
65D8:	mov     rdi, rax; char *
65DB:	call    _tgoto
65E0:	mov     rcx, rax
65E3:	lea     rax, tty_writec
65EA:	mov     rdx, rax; int (*)(int)
65ED:	mov     esi, 1; int
65F2:	mov     rdi, rcx; char *
65F5:	call    _tputs
65FA:	jmp     short loc_662E
65FC:	mov     rax, cs:tty_capability.string+0C0h
6603:	mov     edx, [rbp+y]; int
6606:	mov     ecx, [rbp+x]
6609:	mov     esi, ecx; int
660B:	mov     rdi, rax; char *
660E:	call    _tgoto
6613:	mov     rcx, rax
6616:	lea     rax, tty_writec
661D:	mov     rdx, rax; int (*)(int)
6620:	mov     esi, 1; int
6625:	mov     rdi, rcx; char *
6628:	call    _tputs
662D:	nop
662E:	nop
662F:	leave
6630:	retn
6631:	endbr64
6635:	push    rbp
6636:	mov     rbp, rsp
6639:	sub     rsp, 30h
663D:	mov     [rbp+color], edi
6640:	mov     rax, fs:28h
6649:	mov     [rbp+var_8], rax
664D:	xor     eax, eax
664F:	mov     eax, cs:fg_cache
6655:	cmp     eax, 1
6658:	jnz     short loc_666C
665A:	movzx   eax, cs:tty_io_current_attribute
6661:	movzx   eax, al
6664:	and     eax, 7
6667:	cmp     [rbp+color], eax
666A:	jz      short loc_66E7
666C:	mov     eax, cs:AnsiColors
6672:	cmp     eax, 1
6675:	jnz     short loc_66B0
6677:	mov     eax, dword ptr cs:ansi_foreground; 'x1B[30m'
667D:	mov     dword ptr [rbp+str], eax
6680:	movzx   eax, byte ptr cs:ansi_foreground+4; 'm'
6687:	mov     [rbp+str+4], al
668A:	movzx   eax, [rbp+str+3]
668E:	mov     edx, eax
6690:	mov     eax, [rbp+color]
6693:	add     eax, edx
6695:	mov     [rbp+str+3], al
6698:	lea     rax, [rbp+str]
669C:	mov     esi, 5; len
66A1:	mov     rdi, rax; s
66A4:	mov     eax, 0
66A9:	call    tty_writes
66AE:	jmp     short loc_66C1
66B0:	cmp     [rbp+color], 7
66B4:	setnz   al
66B7:	movzx   eax, al
66BA:	mov     edi, eax; status
66BC:	call    tty_io_reversevid
66C1:	mov     cs:fg_cache, 1
66CB:	movzx   eax, cs:tty_io_current_attribute
66D2:	and     eax, 0FFFFFFF8h
66D5:	mov     edx, eax
66D7:	mov     eax, [rbp+color]
66DA:	and     eax, 7
66DD:	or      eax, edx
66DF:	mov     cs:tty_io_current_attribute, al
66E5:	jmp     short loc_66E8
66E7:	nop
66E8:	mov     rax, [rbp+var_8]
66EC:	sub     rax, fs:28h
66F5:	jz      short locret_66FC
66F7:	call    ___stack_chk_fail
66FC:	leave
66FD:	retn
66FE:	endbr64
6702:	push    rbp
6703:	mov     rbp, rsp
6706:	sub     rsp, 30h
670A:	mov     [rbp+color], edi
670D:	mov     rax, fs:28h
6716:	mov     [rbp+var_8], rax
671A:	xor     eax, eax
671C:	mov     eax, cs:bg_cache
6722:	cmp     eax, 1
6725:	jnz     short loc_673C
6727:	movzx   eax, cs:tty_io_current_attribute
672E:	movzx   eax, al
6731:	sar     eax, 3
6734:	and     eax, 7
6737:	cmp     [rbp+color], eax
673A:	jz      short loc_67BA
673C:	mov     eax, cs:AnsiColors
6742:	cmp     eax, 1
6745:	jnz     short loc_6780
6747:	mov     eax, dword ptr cs:ansi_background
674D:	mov     dword ptr [rbp+str], eax
6750:	movzx   eax, cs:ansi_background+4
6757:	mov     [rbp+str+4], al
675A:	movzx   eax, [rbp+str+3]
675E:	mov     edx, eax
6760:	mov     eax, [rbp+color]
6763:	add     eax, edx
6765:	mov     [rbp+str+3], al
6768:	lea     rax, [rbp+str]
676C:	mov     esi, 5; len
6771:	mov     rdi, rax; s
6774:	mov     eax, 0
6779:	call    tty_writes
677E:	jmp     short loc_6791
6780:	cmp     [rbp+color], 0
6784:	setnz   al
6787:	movzx   eax, al
678A:	mov     edi, eax; status
678C:	call    tty_io_reversevid
6791:	mov     cs:bg_cache, 1
679B:	movzx   eax, cs:tty_io_current_attribute
67A2:	and     eax, 0FFFFFFC7h
67A5:	mov     edx, eax
67A7:	mov     eax, [rbp+color]
67AA:	shl     eax, 3
67AD:	and     eax, 38h
67B0:	or      eax, edx
67B2:	mov     cs:tty_io_current_attribute, al
67B8:	jmp     short loc_67BB
67BA:	nop
67BB:	mov     rax, [rbp+var_8]
67BF:	sub     rax, fs:28h
67C8:	jz      short locret_67CF
67CA:	call    ___stack_chk_fail
67CF:	leave
67D0:	retn
67D1:	endbr64
67D5:	push    rbp
67D6:	mov     rbp, rsp
67D9:	sub     rsp, 10h
67DD:	mov     [rbp+status], edi
67E0:	mov     eax, cs:br_cache
67E6:	cmp     eax, 1
67E9:	jnz     short loc_6804
67EB:	movzx   eax, cs:tty_io_current_attribute
67F2:	movzx   eax, al
67F5:	sar     eax, 6
67F8:	and     eax, 1
67FB:	cmp     [rbp+status], eax
67FE:	jz      loc_68CD
6804:	cmp     [rbp+status], 1
6808:	jnz     short loc_6837
680A:	mov     rax, cs:tty_capability.string+40h
6811:	test    rax, rax
6814:	jz      loc_68A4
681A:	mov     rax, cs:tty_capability.string+40h
6821:	lea     rdx, tty_writec; int (*)(int)
6828:	mov     esi, 1; int
682D:	mov     rdi, rax; char *
6830:	call    _tputs
6835:	jmp     short loc_68A4
6837:	mov     rax, cs:tty_capability.string
683E:	test    rax, rax
6841:	jz      short loc_685E
6843:	mov     rax, cs:tty_capability.string
684A:	lea     rdx, tty_writec; int (*)(int)
6851:	mov     esi, 1; int
6856:	mov     rdi, rax; char *
6859:	call    _tputs
685E:	mov     cs:fg_cache, 0
6868:	mov     cs:bg_cache, 0
6872:	movzx   eax, cs:tty_io_current_attribute
6879:	and     eax, 0FFFFFFBFh
687C:	mov     cs:tty_io_current_attribute, al
6882:	movzx   eax, cs:tty_io_current_attribute
6889:	shr     al, 7
688C:	cmp     al, 1
688E:	jnz     short loc_68A4
6890:	mov     cs:rv_cache, 0
689A:	mov     edi, 1; status
689F:	call    tty_io_reversevid
68A4:	mov     cs:br_cache, 1
68AE:	movzx   eax, cs:tty_io_current_attribute
68B5:	and     eax, 0FFFFFFBFh
68B8:	mov     edx, eax
68BA:	mov     eax, [rbp+status]
68BD:	shl     eax, 6
68C0:	and     eax, 40h
68C3:	or      eax, edx
68C5:	mov     cs:tty_io_current_attribute, al
68CB:	jmp     short locret_68CE
68CD:	nop
68CE:	leave
68CF:	retn
68D0:	endbr64
68D4:	push    rbp
68D5:	mov     rbp, rsp
68D8:	sub     rsp, 10h
68DC:	mov     [rbp+status], edi
68DF:	mov     eax, cs:rv_cache
68E5:	cmp     eax, 1
68E8:	jnz     short loc_6900
68EA:	movzx   eax, cs:tty_io_current_attribute
68F1:	shr     al, 7
68F4:	movzx   eax, al
68F7:	cmp     [rbp+status], eax
68FA:	jz      loc_69C9
6900:	cmp     [rbp+status], 1
6904:	jnz     short loc_6933
6906:	mov     rax, cs:tty_capability.string+20h
690D:	test    rax, rax
6910:	jz      loc_69A3
6916:	mov     rax, cs:tty_capability.string+20h
691D:	lea     rdx, tty_writec; int (*)(int)
6924:	mov     esi, 1; int
6929:	mov     rdi, rax; char *
692C:	call    _tputs
6931:	jmp     short loc_69A3
6933:	mov     rax, cs:tty_capability.string
693A:	test    rax, rax
693D:	jz      short loc_695A
693F:	mov     rax, cs:tty_capability.string
6946:	lea     rdx, tty_writec; int (*)(int)
694D:	mov     esi, 1; int
6952:	mov     rdi, rax; char *
6955:	call    _tputs
695A:	mov     cs:fg_cache, 0
6964:	mov     cs:bg_cache, 0
696E:	movzx   eax, cs:tty_io_current_attribute
6975:	and     eax, 7Fh
6978:	mov     cs:tty_io_current_attribute, al
697E:	movzx   eax, cs:tty_io_current_attribute
6985:	movzx   eax, al
6988:	and     eax, 40h
698B:	test    eax, eax
698D:	jz      short loc_69A3
698F:	mov     cs:br_cache, 0
6999:	mov     edi, 1; status
699E:	call    tty_io_brightness
69A3:	mov     cs:rv_cache, 1
69AD:	movzx   eax, cs:tty_io_current_attribute
69B4:	and     eax, 7Fh
69B7:	mov     edx, eax
69B9:	mov     eax, [rbp+status]
69BC:	shl     eax, 7
69BF:	or      eax, edx
69C1:	mov     cs:tty_io_current_attribute, al
69C7:	jmp     short locret_69CA
69C9:	nop
69CA:	leave
69CB:	retn
69CC:	endbr64
69D0:	push    rbp
69D1:	mov     rbp, rsp
69D4:	sub     rsp, 10h
69D8:	mov     [rbp+attributes], edi
69DB:	mov     eax, [rbp+attributes]
69DE:	sar     eax, 6
69E1:	and     eax, 1
69E4:	mov     edi, eax; status
69E6:	call    tty_io_brightness
69EB:	mov     eax, [rbp+attributes]
69EE:	and     eax, 7
69F1:	mov     edi, eax; color
69F3:	call    tty_io_foreground
69F8:	mov     eax, [rbp+attributes]
69FB:	sar     eax, 3
69FE:	and     eax, 7
6A01:	mov     edi, eax; color
6A03:	call    tty_io_background
6A08:	nop
6A09:	leave
6A0A:	retn
6A0B:	endbr64
6A0F:	push    rbp
6A10:	mov     rbp, rsp
6A13:	mov     [rbp+y], edi
6A16:	mov     [rbp+x], esi
6A19:	mov     eax, [rbp+y]
6A1C:	mov     cs:tty_cursor_y, eax
6A22:	mov     eax, [rbp+x]
6A25:	mov     cs:tty_cursor_x, eax
6A2B:	nop
6A2C:	pop     rbp
6A2D:	retn
6A2E:	endbr64
6A32:	push    rbp
6A33:	mov     rbp, rsp
6A36:	mov     [rbp+y], rdi
6A3A:	mov     [rbp+x], rsi
6A3E:	mov     edx, cs:tty_cursor_y
6A44:	mov     rax, [rbp+y]
6A48:	mov     [rax], edx
6A4A:	mov     edx, cs:tty_cursor_x
6A50:	mov     rax, [rbp+x]
6A54:	mov     [rax], edx
6A56:	nop
6A57:	pop     rbp
6A58:	retn
6A59:	endbr64
6A5D:	push    rbp
6A5E:	mov     rbp, rsp
6A61:	mov     [rbp+color], edi
6A64:	movzx   eax, cs:tty_current_attribute
6A6B:	and     eax, 0FFFFFFF8h
6A6E:	mov     edx, eax
6A70:	mov     eax, [rbp+color]
6A73:	and     eax, 7
6A76:	or      eax, edx
6A78:	mov     cs:tty_current_attribute, al
6A7E:	nop
6A7F:	pop     rbp
6A80:	retn
6A81:	endbr64
6A85:	push    rbp
6A86:	mov     rbp, rsp
6A89:	mov     [rbp+color], edi
6A8C:	movzx   eax, cs:tty_current_attribute
6A93:	and     eax, 0FFFFFFC7h
6A96:	mov     edx, eax
6A98:	mov     eax, [rbp+color]
6A9B:	shl     eax, 3
6A9E:	and     eax, 38h
6AA1:	or      eax, edx
6AA3:	mov     cs:tty_current_attribute, al
6AA9:	nop
6AAA:	pop     rbp
6AAB:	retn
6AAC:	endbr64
6AB0:	push    rbp
6AB1:	mov     rbp, rsp
6AB4:	mov     [rbp+status], edi
6AB7:	movzx   eax, cs:tty_current_attribute
6ABE:	and     eax, 0FFFFFFBFh
6AC1:	mov     edx, eax
6AC3:	mov     eax, [rbp+status]
6AC6:	shl     eax, 6
6AC9:	and     eax, 40h
6ACC:	or      eax, edx
6ACE:	mov     cs:tty_current_attribute, al
6AD4:	nop
6AD5:	pop     rbp
6AD6:	retn
6AD7:	endbr64
6ADB:	push    rbp
6ADC:	mov     rbp, rsp
6ADF:	mov     [rbp+status], edi
6AE2:	movzx   eax, cs:tty_current_attribute
6AE9:	and     eax, 7Fh
6AEC:	mov     edx, eax
6AEE:	mov     eax, [rbp+status]
6AF1:	shl     eax, 7
6AF4:	or      eax, edx
6AF6:	mov     cs:tty_current_attribute, al
6AFC:	nop
6AFD:	pop     rbp
6AFE:	retn
6AFF:	endbr64
6B03:	push    rbp
6B04:	mov     rbp, rsp
6B07:	sub     rsp, 10h
6B0B:	mov     [rbp+brightness], edi
6B0E:	mov     [rbp+foreground], esi
6B11:	mov     [rbp+background], edx
6B14:	mov     eax, [rbp+brightness]
6B17:	mov     edi, eax; status
6B19:	call    tty_brightness
6B1E:	mov     eax, [rbp+foreground]
6B21:	mov     edi, eax; color
6B23:	call    tty_foreground
6B28:	mov     eax, [rbp+background]
6B2B:	mov     edi, eax; color
6B2D:	call    tty_background
6B32:	nop
6B33:	leave
6B34:	retn
6B35:	endbr64
6B39:	push    rbp
6B3A:	mov     rbp, rsp
6B3D:	mov     edi, 7; c
6B42:	mov     eax, 0
6B47:	call    tty_writec
6B4C:	mov     eax, 0
6B51:	call    tty_flush
6B56:	nop
6B57:	pop     rbp
6B58:	retn
6B59:	endbr64
6B5D:	push    rbp
6B5E:	mov     rbp, rsp
6B61:	sub     rsp, 10h
6B65:	mov     [rbp+status], edi
6B68:	cmp     [rbp+status], 0
6B6C:	jz      short loc_6B97
6B6E:	mov     rax, cs:tty_capability.string+80h
6B75:	test    rax, rax
6B78:	jz      short loc_6BBE
6B7A:	mov     rax, cs:tty_capability.string+80h
6B81:	lea     rdx, tty_writec; int (*)(int)
6B88:	mov     esi, 1; int
6B8D:	mov     rdi, rax; char *
6B90:	call    _tputs
6B95:	jmp     short loc_6BBE
6B97:	mov     rax, cs:tty_capability.string+60h
6B9E:	test    rax, rax
6BA1:	jz      short loc_6BBE
6BA3:	mov     rax, cs:tty_capability.string+60h
6BAA:	lea     rdx, tty_writec; int (*)(int)
6BB1:	mov     esi, 1; int
6BB6:	mov     rdi, rax; char *
6BB9:	call    _tputs
6BBE:	nop
6BBF:	leave
6BC0:	retn
6BC1:	endbr64
6BC5:	push    rbp
6BC6:	mov     rbp, rsp
6BC9:	mov     [rbp+status], rdi
6BCD:	movzx   edx, cs:tty_current_attribute
6BD4:	mov     rax, [rbp+status]
6BD8:	mov     [rax], dl
6BDA:	nop
6BDB:	pop     rbp
6BDC:	retn
6BDD:	endbr64
6BE1:	push    rbp
6BE2:	mov     rbp, rsp
6BE5:	mov     [rbp+status], rdi
6BE9:	mov     rax, [rbp+status]
6BED:	movzx   eax, byte ptr [rax]
6BF0:	mov     cs:tty_current_attribute, al
6BF6:	nop
6BF7:	pop     rbp
6BF8:	retn
6BF9:	endbr64
6BFD:	push    rbp
6BFE:	mov     rbp, rsp
6C01:	mov     eax, cs:AnsiColors
6C07:	cmp     eax, 1
6C0A:	jnz     short loc_6C25
6C0C:	mov     esi, 4; len
6C11:	lea     rax, ansi_defaults; 'x1B[0m'
6C18:	mov     rdi, rax; s
6C1B:	mov     eax, 0
6C20:	call    tty_writes
6C25:	mov     rax, cs:tty_capability.string
6C2C:	test    rax, rax
6C2F:	jz      short loc_6C4C
6C31:	mov     rax, cs:tty_capability.string
6C38:	lea     rdx, tty_writec; int (*)(int)
6C3F:	mov     esi, 1; int
6C44:	mov     rdi, rax; char *
6C47:	call    _tputs
6C4C:	mov     cs:fg_cache, 0
6C56:	mov     cs:bg_cache, 0
6C60:	mov     cs:br_cache, 0
6C6A:	mov     cs:rv_cache, 0
6C74:	nop
6C75:	pop     rbp
6C76:	retn
6C77:	endbr64
6C7B:	push    rbp
6C7C:	mov     rbp, rsp
6C7F:	mov     eax, cs:keyindex
6C85:	cdqe
6C87:	lea     rdx, keybuf
6C8E:	movzx   eax, byte ptr [rax+rdx]
6C92:	movsx   eax, al
6C95:	mov     [rbp+key], eax
6C98:	mov     eax, [rbp+key]
6C9B:	and     eax, 80h
6CA0:	test    eax, eax
6CA2:	jz      short loc_6CD5
6CA4:	mov     eax, cs:keyindex
6CAA:	cdqe
6CAC:	lea     rdx, keybuf
6CB3:	movzx   edx, byte ptr [rax+rdx]
6CB7:	mov     eax, cs:keyindex
6CBD:	mov     ecx, edx
6CBF:	and     ecx, 7Fh
6CC2:	cdqe
6CC4:	lea     rdx, keybuf
6CCB:	mov     [rax+rdx], cl
6CCE:	mov     eax, 1Bh
6CD3:	jmp     short loc_6CF6
6CD5:	mov     eax, cs:keyno
6CDB:	sub     eax, 1
6CDE:	mov     cs:keyno, eax
6CE4:	mov     eax, cs:keyindex
6CEA:	add     eax, 1
6CED:	mov     cs:keyindex, eax
6CF3:	mov     eax, [rbp+key]
6CF6:	pop     rbp
6CF7:	retn
6CF8:	endbr64
6CFC:	push    rbp
6CFD:	mov     rbp, rsp
6D00:	mov     eax, 0
6D05:	call    service_pending_signals
6D0A:	mov     eax, cs:keyno
6D10:	test    eax, eax
6D12:	jz      short loc_6D20
6D14:	mov     eax, 0
6D19:	call    tty_extract_key
6D1E:	jmp     short loc_6D97
6D20:	mov     edi, 0FFFFFFFFh; c
6D25:	call    tty_set_interrupt_char
6D2A:	mov     edi, 1; mode
6D2F:	call    signals
6D34:	mov     cs:keyindex, 0
6D3E:	nop
6D3F:	mov     esi, 400h; length
6D44:	lea     rax, keybuf
6D4B:	mov     rdi, rax; buf
6D4E:	mov     eax, 0
6D53:	call    tty_read
6D58:	mov     cs:keyno, eax
6D5E:	mov     eax, cs:keyno
6D64:	test    eax, eax
6D66:	js      short loc_6D3F
6D68:	mov     edi, 0; mode
6D6D:	call    signals
6D72:	mov     edi, 7; c
6D77:	call    tty_set_interrupt_char
6D7C:	mov     eax, cs:keyno
6D82:	test    eax, eax
6D84:	jz      short loc_6D92
6D86:	mov     eax, 0
6D8B:	call    tty_extract_key
6D90:	jmp     short loc_6D97
6D92:	mov     eax, 0FFFFFFFFh
6D97:	pop     rbp
6D98:	retn
6D99:	endbr64
6D9D:	push    rbp
6D9E:	mov     rbp, rsp
6DA1:	sub     rsp, 30h
6DA5:	mov     [rbp+key], rdi
6DA9:	mov     [rbp+key_seq], rsi
6DAD:	mov     [rbp+aux_data], rdx
6DB1:	mov     edi, 18h; n
6DB6:	call    xmalloc
6DBB:	mov     [rbp+new_key], rax
6DBF:	mov     rax, [rbp+key_seq]
6DC3:	mov     rdi, rax; string
6DC6:	call    xstrdup
6DCB:	mov     rdx, [rbp+new_key]
6DCF:	mov     [rdx], rax
6DD2:	mov     rax, [rbp+new_key]
6DD6:	mov     rdx, [rbp+aux_data]
6DDA:	mov     [rax+10h], rdx
6DDE:	mov     rax, [rbp+key]
6DE2:	mov     rdx, [rax]
6DE5:	mov     rax, [rbp+new_key]
6DE9:	mov     [rax+8], rdx
6DED:	mov     rax, [rbp+key]
6DF1:	mov     rdx, [rbp+new_key]
6DF5:	mov     [rax], rdx
6DF8:	nop
6DF9:	leave
6DFA:	retn
6DFB:	endbr64
6DFF:	push    rbp
6E00:	mov     rbp, rsp
6E03:	sub     rsp, 10h
6E07:	mov     [rbp+key_seq], rdi
6E0B:	mov     [rbp+aux_data], rsi
6E0F:	mov     rax, [rbp+key_seq]
6E13:	movzx   eax, byte ptr [rax]
6E16:	test    al, al
6E18:	jz      loc_6EE0
6E1E:	mov     rax, cs:key_0
6E25:	test    rax, rax
6E28:	jz      short loc_6E4A
6E2A:	mov     rax, cs:key_0
6E31:	mov     rax, [rax]
6E34:	mov     rdx, [rax]
6E37:	mov     rax, [rbp+key_seq]
6E3B:	mov     rsi, rdx; s2
6E3E:	mov     rdi, rax; s1
6E41:	call    _strcmp
6E46:	test    eax, eax
6E48:	jg      short loc_6EB0
6E4A:	lea     rax, key_list_head
6E51:	mov     cs:key_0, rax
6E58:	jmp     short loc_6EB0
6E5A:	mov     rax, cs:key_0
6E61:	mov     rax, [rax]
6E64:	mov     rdx, [rax]
6E67:	mov     rax, [rbp+key_seq]
6E6B:	mov     rsi, rdx; s2
6E6E:	mov     rdi, rax; s1
6E71:	call    _strcmp
6E76:	test    eax, eax
6E78:	jg      short loc_6E9B
6E7A:	mov     rax, cs:key_0
6E81:	mov     rdx, [rbp+aux_data]; aux_data
6E85:	mov     rcx, [rbp+key_seq]
6E89:	mov     rsi, rcx; key_seq
6E8C:	mov     rdi, rax; key
6E8F:	mov     eax, 0
6E94:	call    tty_key_list_insert_sequence
6E99:	jmp     short locret_6EE1
6E9B:	mov     rax, cs:key_0
6EA2:	mov     rax, [rax]
6EA5:	add     rax, 8
6EA9:	mov     cs:key_0, rax
6EB0:	mov     rax, cs:key_0
6EB7:	mov     rax, [rax]
6EBA:	test    rax, rax
6EBD:	jnz     short loc_6E5A
6EBF:	mov     rax, cs:key_0
6EC6:	mov     rdx, [rbp+aux_data]; aux_data
6ECA:	mov     rcx, [rbp+key_seq]
6ECE:	mov     rsi, rcx; key_seq
6ED1:	mov     rdi, rax; key
6ED4:	mov     eax, 0
6ED9:	call    tty_key_list_insert_sequence
6EDE:	jmp     short locret_6EE1
6EE0:	nop
6EE1:	leave
6EE2:	retn
6EE3:	endbr64
6EE7:	push    rbp
6EE8:	mov     rbp, rsp
6EEB:	mov     rax, cs:key_list_head
6EF2:	mov     cs:current_key, rax
6EF9:	nop
6EFA:	pop     rbp
6EFB:	retn
6EFC:	endbr64
6F00:	push    rbp
6F01:	mov     rbp, rsp
6F04:	sub     rsp, 20h
6F08:	mov     [rbp+key_seq], rdi
6F0C:	mov     rax, cs:current_key
6F13:	test    rax, rax
6F16:	jnz     short loc_6F65
6F18:	mov     eax, 0
6F1D:	jmp     locret_6FBA
6F22:	mov     rax, cs:current_key
6F29:	mov     rdx, [rax]
6F2C:	mov     rax, [rbp+key_seq]
6F30:	mov     rsi, rdx; s2
6F33:	mov     rdi, rax; s1
6F36:	call    _strcmp
6F3B:	mov     [rbp+cmp], eax
6F3E:	cmp     [rbp+cmp], 0
6F42:	jnz     short loc_6F4D
6F44:	mov     rax, cs:current_key
6F4B:	jmp     short locret_6FBA
6F4D:	cmp     [rbp+cmp], 0
6F51:	js      short loc_6F73
6F53:	mov     rax, cs:current_key
6F5A:	mov     rax, [rax+8]
6F5E:	mov     cs:current_key, rax
6F65:	mov     rax, cs:current_key
6F6C:	test    rax, rax
6F6F:	jnz     short loc_6F22
6F71:	jmp     short loc_6F74
6F73:	nop
6F74:	mov     rax, cs:current_key
6F7B:	test    rax, rax
6F7E:	jz      short loc_6FAC
6F80:	mov     rax, [rbp+key_seq]
6F84:	mov     rdi, rax; s
6F87:	call    _strlen
6F8C:	mov     rdx, rax; n
6F8F:	mov     rax, cs:current_key
6F96:	mov     rcx, [rax]
6F99:	mov     rax, [rbp+key_seq]
6F9D:	mov     rsi, rcx; s2
6FA0:	mov     rdi, rax; s1
6FA3:	call    _strncmp
6FA8:	test    eax, eax
6FAA:	jz      short loc_6FB5
6FAC:	mov     rax, 0FFFFFFFFFFFFFFFFh
6FB3:	jmp     short locret_6FBA
6FB5:	mov     eax, 0
6FBA:	leave
6FBB:	retn
6FBC:	endbr64
6FC0:	push    rbp
6FC1:	mov     rbp, rsp
6FC4:	sub     rsp, 40h
6FC8:	mov     [rbp+key_seq], rdi
6FCC:	mov     rax, fs:28h
6FD5:	mov     [rbp+var_8], rax
6FD9:	xor     eax, eax
6FDB:	lea     rax, aKeysTypedSoFar; 'Keys typed so far: '
6FE2:	mov     [rbp+typed], rax
6FE6:	lea     rax, asc_B72E; ' '
6FED:	mov     [rbp+incomplete], rax
6FF1:	lea     rax, [rbp+tty_status]
6FF5:	mov     rdi, rax; status
6FF8:	call    tty_save
6FFD:	mov     eax, cs:tty_lines
7003:	sub     eax, 1
7006:	mov     esi, 0; x
700B:	mov     edi, eax; y
700D:	call    tty_goto
7012:	mov     edi, 7; color
7017:	call    tty_background
701C:	mov     edi, 0; color
7021:	call    tty_foreground
7026:	mov     eax, cs:tty_columns
702C:	add     eax, 1
702F:	cdqe
7031:	mov     rdi, rax; n
7034:	call    xmalloc
7039:	mov     [rbp+spaces], rax
703D:	mov     eax, cs:tty_columns
7043:	movsxd  rdx, eax; n
7046:	mov     rax, [rbp+spaces]
704A:	mov     esi, 20h ; ' '; c
704F:	mov     rdi, rax; s
7052:	call    _memset
7057:	mov     eax, cs:tty_columns
705D:	movsxd  rdx, eax
7060:	mov     rax, [rbp+spaces]
7064:	add     rax, rdx
7067:	mov     byte ptr [rax], 0
706A:	mov     edx, cs:tty_columns
7070:	mov     rax, [rbp+spaces]
7074:	mov     esi, edx; length
7076:	mov     rdi, rax; buf
7079:	call    tty_puts
707E:	mov     rax, [rbp+spaces]
7082:	mov     rdi, rax; pointer
7085:	call    xfree
708A:	mov     eax, cs:tty_lines
7090:	sub     eax, 1
7093:	mov     esi, 0; x
7098:	mov     edi, eax; y
709A:	call    tty_goto
709F:	mov     rax, [rbp+key_seq]
70A3:	mov     rdi, rax; key_seq
70A6:	call    tty_key_machine2human
70AB:	mov     rax, [rbp+typed]
70AF:	mov     rdi, rax; s
70B2:	call    _strlen
70B7:	mov     edx, eax
70B9:	mov     rax, [rbp+typed]
70BD:	mov     esi, edx; length
70BF:	mov     rdi, rax; buf
70C2:	call    tty_puts
70C7:	lea     rax, keystr
70CE:	mov     rdi, rax; s
70D1:	call    _strlen
70D6:	mov     esi, eax; length
70D8:	lea     rax, keystr
70DF:	mov     rdi, rax; buf
70E2:	call    tty_puts
70E7:	mov     rax, [rbp+incomplete]
70EB:	mov     rdi, rax; s
70EE:	call    _strlen
70F3:	mov     edx, eax
70F5:	mov     rax, [rbp+incomplete]
70F9:	mov     esi, edx; length
70FB:	mov     rdi, rax; buf
70FE:	call    tty_puts
7103:	mov     eax, 0
7108:	call    tty_update
710D:	lea     rax, [rbp+tty_status]
7111:	mov     rdi, rax; status
7114:	call    tty_restore
7119:	nop
711A:	mov     rax, [rbp+var_8]
711E:	sub     rax, fs:28h
7127:	jz      short locret_712E
7129:	call    ___stack_chk_fail
712E:	leave
712F:	retn
7130:	endbr64
7134:	push    rbp
7135:	mov     rbp, rsp
7138:	sub     rsp, 20h
713C:	mov     [rbp+repeat_count], rdi
7140:	mov     [rbp+key], 0
7148:	nop
7149:	mov     eax, 0
714E:	call    tty_getc
7153:	mov     [rbp+c], eax
7156:	cmp     [rbp+c], 0FFFFFFFFh
715A:	jz      short loc_7149
715C:	cmp     [rbp+repeat_count], 0
7161:	jz      short loc_716D
7163:	mov     rax, [rbp+repeat_count]
7167:	mov     dword ptr [rax], 1
716D:	cmp     [rbp+c], 0
7171:	jnz     short loc_717A
7173:	mov     [rbp+c], 0FFh
717A:	mov     eax, cs:tty_kbdmode
7180:	test    eax, eax
7182:	jnz     short loc_71E5
7184:	cmp     [rbp+c], 0Ah
7188:	jz      short loc_7190
718A:	cmp     [rbp+c], 0Dh
718E:	jnz     short loc_7197
7190:	mov     [rbp+c], 0Ah
7197:	call    ___ctype_b_loc
719C:	mov     rdx, [rax]
719F:	mov     eax, [rbp+c]
71A2:	cdqe
71A4:	add     rax, rax
71A7:	add     rax, rdx
71AA:	movzx   eax, word ptr [rax]
71AD:	movzx   eax, ax
71B0:	and     eax, 4000h
71B5:	test    eax, eax
71B7:	jnz     short loc_71BF
71B9:	cmp     [rbp+c], 7
71BD:	jnz     short loc_71E5
71BF:	mov     rax, cs:default_key.key_seq
71C6:	mov     edx, [rbp+c]
71C9:	mov     [rax], dl
71CB:	mov     rax, cs:default_key.key_seq
71D2:	add     rax, 1
71D6:	mov     byte ptr [rax], 0
71D9:	lea     rax, default_key
71E0:	jmp     locret_739B
71E5:	mov     cs:partial, 0
71EF:	mov     cs:key_on_display, 0
71F9:	mov     eax, 0
71FE:	call    tty_key_search_restart
7203:	mov     [rbp+i], 0
720A:	jmp     loc_72D6
720F:	cmp     [rbp+c], 0
7213:	jnz     short loc_721C
7215:	mov     [rbp+c], 0FFh
721C:	mov     rdx, cs:tty_key_seq
7223:	mov     eax, [rbp+i]
7226:	cdqe
7228:	add     rax, rdx
722B:	mov     edx, [rbp+c]
722E:	mov     [rax], dl
7230:	mov     rdx, cs:tty_key_seq
7237:	mov     eax, [rbp+i]
723A:	cdqe
723C:	add     rax, 1
7240:	add     rax, rdx
7243:	mov     byte ptr [rax], 0
7246:	mov     rax, cs:tty_key_seq
724D:	mov     rdi, rax; key_seq
7250:	call    tty_key_search
7255:	mov     [rbp+key], rax
7259:	cmp     [rbp+key], 0FFFFFFFFFFFFFFFFh
725E:	jnz     short loc_727E
7260:	mov     edi, 1; seconds
7265:	call    _alarm
726A:	mov     cs:partial, 0
7274:	mov     eax, 0
7279:	jmp     locret_739B
727E:	cmp     [rbp+key], 0
7283:	jnz     short loc_72E2
7285:	mov     eax, cs:keyno
728B:	test    eax, eax
728D:	jnz     short loc_72BE
728F:	mov     eax, cs:key_on_display
7295:	test    eax, eax
7297:	jz      short loc_72AA
7299:	mov     rax, cs:tty_key_seq
72A0:	mov     rdi, rax; key_seq
72A3:	call    tty_key_print
72A8:	jmp     short loc_72B4
72AA:	mov     edi, 1; seconds
72AF:	call    _alarm
72B4:	mov     cs:partial, 1
72BE:	nop
72BF:	mov     eax, 0
72C4:	call    tty_getc
72C9:	mov     [rbp+c], eax
72CC:	cmp     [rbp+c], 0FFFFFFFFh
72D0:	jz      short loc_72BF
72D2:	add     [rbp+i], 1
72D6:	cmp     [rbp+i], 0Eh
72DA:	jle     loc_720F
72E0:	jmp     short loc_72E3
72E2:	nop
72E3:	cmp     [rbp+i], 0Fh
72E7:	jnz     short loc_7307
72E9:	mov     edi, 1; seconds
72EE:	call    _alarm
72F3:	mov     cs:partial, 0
72FD:	mov     eax, 0
7302:	jmp     locret_739B
7307:	cmp     [rbp+repeat_count], 0
730C:	jz      short loc_7383
730E:	jmp     short loc_7347
7310:	mov     eax, [rbp+i]
7313:	lea     edx, [rax+1]
7316:	mov     eax, cs:keyindex
731C:	add     eax, edx
731E:	mov     cs:keyindex, eax
7324:	mov     eax, cs:keyno
732A:	mov     edx, [rbp+i]
732D:	add     edx, 1
7330:	sub     eax, edx
7332:	mov     cs:keyno, eax
7338:	mov     rax, [rbp+repeat_count]
733C:	mov     eax, [rax]
733E:	lea     edx, [rax+1]
7341:	mov     rax, [rbp+repeat_count]
7345:	mov     [rax], edx
7347:	mov     eax, cs:keyno
734D:	cmp     [rbp+i], eax
7350:	jge     short loc_7383
7352:	mov     eax, [rbp+i]
7355:	add     eax, 1
7358:	movsxd  rdx, eax; n
735B:	mov     eax, cs:keyindex
7361:	cdqe
7363:	lea     rcx, keybuf
736A:	add     rcx, rax
736D:	mov     rax, cs:tty_key_seq
7374:	mov     rsi, rcx; s2
7377:	mov     rdi, rax; s1
737A:	call    _memcmp
737F:	test    eax, eax
7381:	jz      short loc_7310
7383:	mov     edi, 1; seconds
7388:	call    _alarm
738D:	mov     cs:partial, 0
7397:	mov     rax, [rbp+key]
739B:	leave
739C:	retn
739D:	endbr64
73A1:	push    rbp
73A2:	mov     rbp, rsp
73A5:	mov     eax, cs:partial
73AB:	test    eax, eax
73AD:	jz      short loc_73C8
73AF:	mov     rax, cs:tty_key_seq
73B6:	mov     rdi, rax; key_seq
73B9:	call    tty_key_print
73BE:	mov     cs:key_on_display, 1
73C8:	nop
73C9:	pop     rbp
73CA:	retn
73CB:	endbr64
73CF:	push    rbp
73D0:	mov     rbp, rsp
73D3:	mov     rax, cs:tty_key_seq
73DA:	pop     rbp
73DB:	retn
73DC:	endbr64
73E0:	push    rbp
73E1:	mov     rbp, rsp
73E4:	sub     rsp, 60h
73E8:	mov     rax, fs:28h
73F1:	mov     [rbp+var_8], rax
73F5:	xor     eax, eax
73F7:	mov     [rbp+shell_lines], 0
73FE:	mov     [rbp+shell_columns], 0
7405:	mov     [rbp+termcap_lines], 0
740C:	mov     [rbp+termcap_columns], 0
7413:	mov     [rbp+winsz_lines], 0
741A:	mov     [rbp+winsz_columns], 0
7421:	lea     rax, [rbp+winsz]
7425:	mov     rdx, rax
7428:	mov     esi, 5413h; request
742D:	mov     edi, 1; fd
7432:	mov     eax, 0
7437:	call    _ioctl
743C:	test    eax, eax
743E:	jnz     short loc_7466
7440:	movzx   eax, [rbp+winsz.ws_col]
7444:	test    ax, ax
7447:	jz      short loc_7466
7449:	movzx   eax, [rbp+winsz.ws_row]
744D:	test    ax, ax
7450:	jz      short loc_7466
7452:	movzx   eax, [rbp+winsz.ws_col]
7456:	movzx   eax, ax
7459:	mov     [rbp+winsz_columns], eax
745C:	movzx   eax, [rbp+winsz.ws_row]
7460:	movzx   eax, ax
7463:	mov     [rbp+winsz_lines], eax
7466:	lea     rax, aColumns; 'COLUMNS'
746D:	mov     rdi, rax; name
7470:	call    _getenv
7475:	mov     [rbp+env], rax
7479:	cmp     [rbp+env], 0
747E:	jz      short loc_749F
7480:	lea     rdx, [rbp+shell_columns]
7484:	mov     rax, [rbp+env]
7488:	lea     rcx, aD; '%d'
748F:	mov     rsi, rcx
7492:	mov     rdi, rax
7495:	mov     eax, 0
749A:	call    ___isoc99_sscanf
749F:	lea     rax, variable; 'LINES'
74A6:	mov     rdi, rax; name
74A9:	call    _getenv
74AE:	mov     [rbp+env], rax
74B2:	cmp     [rbp+env], 0
74B7:	jz      short loc_74D8
74B9:	lea     rdx, [rbp+shell_lines]
74BD:	mov     rax, [rbp+env]
74C1:	lea     rcx, aD; '%d'
74C8:	mov     rsi, rcx
74CB:	mov     rdi, rax
74CE:	mov     eax, 0
74D3:	call    ___isoc99_sscanf
74D8:	mov     eax, cs:tty_capability.integer+1A0h
74DE:	mov     [rbp+termcap_columns], eax
74E1:	mov     eax, cs:tty_capability.integer+1C0h
74E7:	mov     [rbp+termcap_lines], eax
74EA:	cmp     [rbp+winsz_columns], 0
74EE:	jle     short loc_7504
74F0:	cmp     [rbp+winsz_columns], 400h
74F7:	jg      short loc_7504
74F9:	mov     eax, [rbp+winsz_columns]
74FC:	mov     cs:tty_columns, eax
7502:	jmp     short loc_7544
7504:	mov     eax, [rbp+shell_columns]
7507:	test    eax, eax
7509:	jle     short loc_7520
750B:	mov     eax, [rbp+shell_columns]
750E:	cmp     eax, 400h
7513:	jg      short loc_7520
7515:	mov     eax, [rbp+shell_columns]
7518:	mov     cs:tty_columns, eax
751E:	jmp     short loc_7544
7520:	cmp     [rbp+termcap_columns], 0
7524:	jle     short loc_753A
7526:	cmp     [rbp+termcap_columns], 400h
752D:	jg      short loc_753A
752F:	mov     eax, [rbp+termcap_columns]
7532:	mov     cs:tty_columns, eax
7538:	jmp     short loc_7544
753A:	mov     cs:tty_columns, 50h ; 'P'
7544:	cmp     [rbp+winsz_lines], 0
7548:	jle     short loc_755E
754A:	cmp     [rbp+winsz_lines], 400h
7551:	jg      short loc_755E
7553:	mov     eax, [rbp+winsz_lines]
7556:	mov     cs:tty_lines, eax
755C:	jmp     short loc_759E
755E:	mov     eax, [rbp+shell_lines]
7561:	test    eax, eax
7563:	jle     short loc_757A
7565:	mov     eax, [rbp+shell_lines]
7568:	cmp     eax, 400h
756D:	jg      short loc_757A
756F:	mov     eax, [rbp+shell_lines]
7572:	mov     cs:tty_lines, eax
7578:	jmp     short loc_759E
757A:	cmp     [rbp+termcap_lines], 0
757E:	jle     short loc_7594
7580:	cmp     [rbp+termcap_lines], 400h
7587:	jg      short loc_7594
7589:	mov     eax, [rbp+termcap_lines]
758C:	mov     cs:tty_lines, eax
7592:	jmp     short loc_759E
7594:	mov     cs:tty_lines, 18h
759E:	mov     edx, cs:tty_lines
75A4:	lea     rax, [rbp+buf]
75A8:	lea     rcx, aD; '%d'
75AF:	mov     rsi, rcx; format
75B2:	mov     rdi, rax; s
75B5:	mov     eax, 0
75BA:	call    _sprintf
75BF:	lea     rax, [rbp+buf]
75C3:	mov     rsi, rax; value
75C6:	lea     rax, variable; 'LINES'
75CD:	mov     rdi, rax; variable
75D0:	call    xsetenv
75D5:	mov     edx, cs:tty_columns
75DB:	lea     rax, [rbp+buf]
75DF:	lea     rcx, aD; '%d'
75E6:	mov     rsi, rcx; format
75E9:	mov     rdi, rax; s
75EC:	mov     eax, 0
75F1:	call    _sprintf
75F6:	lea     rax, [rbp+buf]
75FA:	mov     rsi, rax; value
75FD:	lea     rax, aColumns; 'COLUMNS'
7604:	mov     rdi, rax; variable
7607:	call    xsetenv
760C:	mov     rax, cs:tty_scr
7613:	test    rax, rax
7616:	jz      short loc_7627
7618:	mov     rax, cs:tty_scr
761F:	mov     rdi, rax; pointer
7622:	call    xfree
7627:	mov     rax, cs:tty_atr
762E:	test    rax, rax
7631:	jz      short loc_7642
7633:	mov     rax, cs:tty_atr
763A:	mov     rdi, rax; pointer
763D:	call    xfree
7642:	mov     rax, cs:tty_prev_scr
7649:	test    rax, rax
764C:	jz      short loc_765D
764E:	mov     rax, cs:tty_prev_scr
7655:	mov     rdi, rax; pointer
7658:	call    xfree
765D:	mov     rax, cs:tty_prev_atr
7664:	test    rax, rax
7667:	jz      short loc_7678
7669:	mov     rax, cs:tty_prev_atr
7670:	mov     rdi, rax; pointer
7673:	call    xfree
7678:	mov     edx, cs:tty_columns
767E:	mov     eax, cs:tty_lines
7684:	imul    eax, edx
7687:	cdqe
7689:	mov     esi, 1; s
768E:	mov     rdi, rax; n
7691:	call    xcalloc
7696:	mov     cs:tty_scr, rax
769D:	mov     edx, cs:tty_columns
76A3:	mov     eax, cs:tty_lines
76A9:	imul    eax, edx
76AC:	cdqe
76AE:	mov     esi, 1; s
76B3:	mov     rdi, rax; n
76B6:	call    xcalloc
76BB:	mov     cs:tty_atr, rax
76C2:	mov     edx, cs:tty_columns
76C8:	mov     eax, cs:tty_lines
76CE:	imul    eax, edx
76D1:	cdqe
76D3:	mov     esi, 1; s
76D8:	mov     rdi, rax; n
76DB:	call    xcalloc
76E0:	mov     cs:tty_prev_scr, rax
76E7:	mov     edx, cs:tty_columns
76ED:	mov     eax, cs:tty_lines
76F3:	imul    eax, edx
76F6:	cdqe
76F8:	mov     esi, 1; s
76FD:	mov     rdi, rax; n
7700:	call    xcalloc
7705:	mov     cs:tty_prev_atr, rax
770C:	nop
770D:	mov     rax, [rbp+var_8]
7711:	sub     rax, fs:28h
771A:	jz      short locret_7721
771C:	call    ___stack_chk_fail
7721:	leave
7722:	retn
7723:	endbr64
7727:	push    rbp
7728:	mov     rbp, rsp
772B:	sub     rsp, 50h
772F:	mov     [rbp+buf], rdi
7733:	mov     [rbp+op], esi
7736:	mov     rax, fs:28h
773F:	mov     [rbp+var_8], rax
7743:	xor     eax, eax
7745:	lea     rax, [rbp+vcs_name]
7749:	mov     rcx, 7363762F7665642Fh
7753:	mov     [rax], rcx
7756:	mov     word ptr [rax+8], 5858h
775C:	mov     byte ptr [rax+0Ah], 0
7760:	lea     rax, [rbp+vcsa_name]
7764:	mov     [rax], rcx
7767:	mov     dword ptr [rax+8], 585861h
776E:	cmp     [rbp+op], 1
7772:	jnz     short loc_7788
7774:	mov     [rbp+flag], 0
777B:	mov     rax, cs:read_ptr
7782:	mov     [rbp+fn], rax
7786:	jmp     short loc_77A8
7788:	mov     [rbp+flag], 1
778F:	mov     rax, cs:write_ptr
7796:	mov     [rbp+fn], rax
779A:	mov     eax, cs:vcs_is_monochrome
77A0:	test    eax, eax
77A2:	jnz     loc_7894
77A8:	mov     cs:vcs_is_monochrome, 0
77B2:	mov     rax, cs:tty_device
77B9:	movzx   eax, byte ptr [rax+8]
77BD:	mov     [rbp+vcsa_name+9], al
77C0:	mov     rax, cs:tty_device
77C7:	movzx   eax, byte ptr [rax+9]
77CB:	mov     [rbp+vcsa_name+0Ah], al
77CE:	mov     edx, [rbp+flag]
77D1:	lea     rax, [rbp+vcsa_name]
77D5:	mov     esi, edx; oflag
77D7:	mov     rdi, rax; file
77DA:	mov     eax, 0
77DF:	call    _open
77E4:	mov     [rbp+vcsfd], eax
77E7:	cmp     [rbp+vcsfd], 0FFFFFFFFh
77EB:	jz      short loc_7867
77ED:	nop
77EE:	jmp     short vcsa_label
77F0:	nop
77F1:	mov     edx, cs:tty_lines
77F7:	mov     eax, cs:tty_columns
77FD:	imul    eax, edx
7800:	add     eax, 2
7803:	lea     edx, [rax+rax]
7806:	mov     rcx, [rbp+buf]
780A:	mov     eax, [rbp+vcsfd]
780D:	mov     r8, [rbp+fn]
7811:	mov     rsi, rcx
7814:	mov     edi, eax
7816:	mov     eax, 0
781B:	call    r8
781E:	mov     eax, [rbp+vcsfd]
7821:	mov     edi, eax; fd
7823:	call    _close
7828:	cmp     [rbp+op], 2
782C:	jnz     short loc_785D
782E:	mov     rax, [rbp+buf]
7832:	add     rax, 2
7836:	movzx   eax, byte ptr [rax]
7839:	movsx   edx, al
783C:	mov     rax, [rbp+buf]
7840:	add     rax, 3
7844:	movzx   eax, byte ptr [rax]
7847:	movsx   eax, al
784A:	mov     esi, edx; x
784C:	mov     edi, eax; y
784E:	call    tty_io_goto
7853:	mov     eax, 0
7858:	call    tty_flush
785D:	mov     eax, 1
7862:	jmp     loc_797E
7867:	mov     [rbp+vcsa_name+9], 30h ; '0'
786B:	mov     [rbp+vcsa_name+0Ah], 0
786F:	mov     edx, [rbp+flag]
7872:	lea     rax, [rbp+vcsa_name]
7876:	mov     esi, edx; oflag
7878:	mov     rdi, rax; file
787B:	mov     eax, 0
7880:	call    _open
7885:	mov     [rbp+vcsfd], eax
7888:	cmp     [rbp+vcsfd], 0FFFFFFFFh
788C:	jnz     loc_77F0
7892:	jmp     short monochrome
7894:	nop
7895:	mov     cs:vcs_is_monochrome, 1
789F:	cmp     [rbp+op], 2
78A3:	jnz     short loc_78AF
78A5:	mov     eax, 0
78AA:	call    tty_clear
78AF:	mov     rax, cs:tty_device
78B6:	movzx   eax, byte ptr [rax+8]
78BA:	mov     [rbp+vcs_name+8], al
78BD:	mov     rax, cs:tty_device
78C4:	movzx   eax, byte ptr [rax+9]
78C8:	mov     [rbp+vcs_name+9], al
78CB:	mov     edx, [rbp+flag]
78CE:	lea     rax, [rbp+vcs_name]
78D2:	mov     esi, edx; oflag
78D4:	mov     rdi, rax; file
78D7:	mov     eax, 0
78DC:	call    _open
78E1:	mov     [rbp+vcsfd], eax
78E4:	cmp     [rbp+vcsfd], 0FFFFFFFFh
78E8:	jz      short loc_794E
78EA:	nop
78EB:	jmp     short vcs_label
78ED:	nop
78EE:	mov     edx, cs:tty_lines
78F4:	mov     eax, cs:tty_columns
78FA:	imul    eax, edx
78FD:	lea     edx, [rax+4]
7900:	mov     rcx, [rbp+buf]
7904:	mov     eax, [rbp+vcsfd]
7907:	mov     r8, [rbp+fn]
790B:	mov     rsi, rcx
790E:	mov     edi, eax
7910:	mov     eax, 0
7915:	call    r8
7918:	mov     eax, [rbp+vcsfd]
791B:	mov     edi, eax; fd
791D:	call    _close
7922:	cmp     [rbp+op], 2
7926:	jnz     short loc_7947
7928:	mov     eax, cs:tty_lines
792E:	sub     eax, 1
7931:	mov     esi, 0; x
7936:	mov     edi, eax; y
7938:	call    tty_io_goto
793D:	mov     eax, 0
7942:	call    tty_flush
7947:	mov     eax, 1
794C:	jmp     short loc_797E
794E:	mov     [rbp+vcs_name+8], 30h ; '0'
7952:	mov     [rbp+vcs_name+9], 0
7956:	mov     edx, [rbp+flag]
7959:	lea     rax, [rbp+vcs_name]
795D:	mov     esi, edx; oflag
795F:	mov     rdi, rax; file
7962:	mov     eax, 0
7967:	call    _open
796C:	mov     [rbp+vcsfd], eax
796F:	cmp     [rbp+vcsfd], 0FFFFFFFFh
7973:	jnz     loc_78ED
7979:	mov     eax, 0
797E:	mov     rdx, [rbp+var_8]
7982:	sub     rdx, fs:28h
798B:	jz      short locret_7992
798D:	call    ___stack_chk_fail
7992:	leave
7993:	retn
7994:	endbr64
7998:	push    rbp
7999:	mov     rbp, rsp
799C:	sub     rsp, 10h
79A0:	mov     [rbp+buf], rdi
79A4:	mov     eax, cs:LinuxConsole
79AA:	test    eax, eax
79AC:	jz      short loc_79CA
79AE:	mov     rax, [rbp+buf]
79B2:	mov     esi, 1; op
79B7:	mov     rdi, rax; buf
79BA:	mov     eax, 0
79BF:	call    vcs_io
79C4:	mov     cs:vcs_read_ok, eax
79CA:	nop
79CB:	leave
79CC:	retn
79CD:	endbr64
79D1:	push    rbp
79D2:	mov     rbp, rsp
79D5:	sub     rsp, 10h
79D9:	mov     [rbp+buf], rdi
79DD:	mov     eax, 0
79E2:	call    tty_defaults
79E7:	mov     eax, cs:LinuxConsole
79ED:	test    eax, eax
79EF:	jz      short loc_7A5F
79F1:	mov     eax, cs:vcs_read_ok
79F7:	test    eax, eax
79F9:	jz      short loc_7A53
79FB:	mov     eax, 0
7A00:	call    tty_touch
7A05:	mov     rax, [rbp+buf]
7A09:	mov     esi, 2; op
7A0E:	mov     rdi, rax; buf
7A11:	mov     eax, 0
7A16:	call    vcs_io
7A1B:	test    eax, eax
7A1D:	jnz     short loc_7A2B
7A1F:	mov     eax, 0
7A24:	call    tty_clear
7A29:	jmp     short loc_7A69
7A2B:	mov     edx, cs:tty_lines
7A31:	mov     eax, cs:tty_columns
7A37:	imul    eax, edx
7A3A:	movsxd  rdx, eax; n
7A3D:	mov     rax, cs:tty_scr
7A44:	mov     esi, 0; c
7A49:	mov     rdi, rax; s
7A4C:	call    _memset
7A51:	jmp     short loc_7A69
7A53:	mov     eax, 0
7A58:	call    tty_clear
7A5D:	jmp     short loc_7A69
7A5F:	mov     eax, 0
7A64:	call    tty_clear
7A69:	nop
7A6A:	leave
7A6B:	retn
7A6C:	endbr64
7A70:	push    rbp
7A71:	mov     rbp, rsp
7A74:	sub     rsp, 20h
7A78:	mov     [rbp+colorname], rdi
7A7C:	mov     [rbp+i], 0
7A83:	jmp     short loc_7AC7
7A85:	mov     eax, [rbp+i]
7A88:	cdqe
7A8A:	lea     rdx, ds:0[rax*8]
7A92:	lea     rax, colors
7A99:	mov     rax, [rdx+rax]
7A9D:	mov     rdx, [rbp+colorname]
7AA1:	mov     rsi, rdx; s2
7AA4:	mov     rdi, rax; s1
7AA7:	call    _strcmp
7AAC:	test    eax, eax
7AAE:	jnz     short loc_7AC3
7AB0:	cmp     [rbp+i], 7
7AB4:	jle     short loc_7ABE
7AB6:	mov     eax, [rbp+i]
7AB9:	sub     eax, 8
7ABC:	jmp     short locret_7AD2
7ABE:	mov     eax, [rbp+i]
7AC1:	jmp     short locret_7AD2
7AC3:	add     [rbp+i], 1
7AC7:	cmp     [rbp+i], 9
7ACB:	jle     short loc_7A85
7ACD:	mov     eax, 0FFFFFFFFh
7AD2:	leave
7AD3:	retn
7AD4:	endbr64
7AD8:	push    rbp
7AD9:	mov     rbp, rsp
7ADC:	sub     rsp, 20h
7AE0:	mov     [rbp+symbol], rdi
7AE4:	mov     [rbp+i], 11h
7AEB:	jmp     short loc_7B34
7AED:	mov     eax, [rbp+i]
7AF0:	cdqe
7AF2:	shl     rax, 5
7AF6:	mov     rdx, rax
7AF9:	lea     rax, tty_capability.symbol
7B00:	mov     rax, [rdx+rax]
7B04:	mov     rdx, [rbp+symbol]
7B08:	mov     rsi, rdx; s2
7B0B:	mov     rdi, rax; s1
7B0E:	call    _strcmp
7B13:	test    eax, eax
7B15:	jnz     short loc_7B30
7B17:	mov     eax, [rbp+i]
7B1A:	cdqe
7B1C:	shl     rax, 5
7B20:	mov     rdx, rax
7B23:	lea     rax, tty_capability.string
7B2A:	mov     rax, [rdx+rax]
7B2E:	jmp     short locret_7B3F
7B30:	add     [rbp+i], 1
7B34:	cmp     [rbp+i], 25h ; '%'
7B38:	jle     short loc_7AED
7B3A:	mov     eax, 0
7B3F:	leave
7B40:	retn
7B41:	endbr64
7B45:	push    rbp
7B46:	mov     rbp, rsp
7B49:	sub     rsp, 0D0h
7B50:	mov     rax, fs:28h
7B59:	mov     [rbp+var_8], rax
7B5D:	xor     eax, eax
7B5F:	mov     [rbp+term_errors], 0
7B69:	lea     rax, aTerm; 'TERM'
7B70:	mov     rdi, rax; name
7B73:	call    _getenv
7B78:	mov     [rbp+termtype], rax
7B7F:	lea     rax, [rbp+statbuf]
7B86:	mov     rsi, rax; buf
7B89:	mov     edi, 1; fd
7B8E:	call    _fstat
7B93:	mov     rax, [rbp+statbuf.st_rdev]
7B97:	shr     rax, 8
7B9B:	cmp     rax, 4
7B9F:	jnz     short loc_7BAD
7BA1:	mov     cs:LinuxConsole, 1
7BAB:	jmp     short loc_7BB7
7BAD:	mov     cs:LinuxConsole, 0
7BB7:	cmp     [rbp+termtype], 0
7BBF:	jnz     short loc_7BE8
7BC1:	mov     rdx, cs:g_program
7BC8:	mov     rax, cs:stderr@GLIBC_2_2_5
7BCF:	lea     rcx, aSCanTFindTheTe; '%s: can't find the TERM environment var'...
7BD6:	mov     rsi, rcx; format
7BD9:	mov     rdi, rax; stream
7BDC:	mov     eax, 0
7BE1:	call    _fprintf
7BE6:	jmp     short switch_to_vt100
7BE8:	mov     rax, [rbp+termtype]
7BEF:	mov     rdi, rax; s
7BF2:	call    _strlen
7BF7:	cmp     rax, 3Fh ; '?'
7BFB:	jbe     short loc_7C55
7BFD:	mov     rdx, cs:g_program
7C04:	mov     rax, cs:stderr@GLIBC_2_2_5
7C0B:	lea     rcx, aSTheTermEnviro; '%s: the TERM environment variable is to'...
7C12:	mov     rsi, rcx; format
7C15:	mov     rdi, rax; stream
7C18:	mov     eax, 0
7C1D:	call    _fprintf
7C22:	mov     rax, cs:stderr@GLIBC_2_2_5
7C29:	mov     rcx, rax; s
7C2C:	mov     edx, 11h; n
7C31:	mov     esi, 1; size
7C36:	lea     rax, aTryingVt100; 'trying vt100 ...n'
7C3D:	mov     rdi, rax; ptr
7C40:	call    _fwrite
7C45:	lea     rax, vt100; 'vt100'
7C4C:	mov     [rbp+termtype], rax
7C53:	jmp     short retry
7C55:	nop
7C56:	mov     rax, [rbp+termtype]
7C5D:	mov     rsi, rax; char *
7C60:	mov     edi, 0; char *
7C65:	call    _tgetent
7C6A:	mov     [rbp+err], eax
7C70:	cmp     [rbp+err], 0FFFFFFFFh
7C77:	jnz     short loc_7CD5
7C79:	mov     rdx, cs:g_program
7C80:	mov     rax, cs:stderr@GLIBC_2_2_5
7C87:	lea     rcx, term_database; 'terminfo'
7C8E:	lea     rsi, aSCanTFindTheSD; '%s: can't find the %s database.n'
7C95:	mov     rdi, rax; stream
7C98:	mov     eax, 0
7C9D:	call    _fprintf
7CA2:	mov     rdx, cs:g_program
7CA9:	mov     rax, cs:stderr@GLIBC_2_2_5
7CB0:	lea     rcx, term_env; 'TERMINFO'
7CB7:	lea     rsi, aSCheckYourSEnv; '%s: check your %s environment variable '...
7CBE:	mov     rdi, rax; stream
7CC1:	mov     eax, 0
7CC6:	call    _fprintf
7CCB:	mov     edi, 1; status
7CD0:	call    _exit
7CD5:	cmp     [rbp+err], 0
7CDC:	jnz     loc_7E2E
7CE2:	mov     rdx, cs:g_program
7CE9:	mov     rax, cs:stderr@GLIBC_2_2_5
7CF0:	mov     rcx, [rbp+termtype]
7CF7:	lea     r8, term_database; 'terminfo'
7CFE:	lea     rsi, aSCanTFindTheTe_0; '%s: can't find the terminal type %s in '...
7D05:	mov     rdi, rax; stream
7D08:	mov     eax, 0
7D0D:	call    _fprintf
7D12:	mov     rax, [rbp+termtype]
7D19:	lea     rdx, s2; 'iris-ansi'
7D20:	mov     rsi, rdx; s2
7D23:	mov     rdi, rax; s1
7D26:	call    _strcmp
7D2B:	test    eax, eax
7D2D:	jnz     short loc_7D67
7D2F:	mov     rdx, cs:g_program
7D36:	mov     rax, cs:stderr@GLIBC_2_2_5
7D3D:	lea     rcx, aSTryingAnsi; '%s: trying ansi...n'
7D44:	mov     rsi, rcx; format
7D47:	mov     rdi, rax; stream
7D4A:	mov     eax, 0
7D4F:	call    _fprintf
7D54:	lea     rax, aAnsi; 'ansi'
7D5B:	mov     [rbp+termtype], rax
7D62:	jmp     retry
7D67:	mov     rax, [rbp+termtype]
7D6E:	mov     rdi, rax; term
7D71:	call    tty_is_xterm
7D76:	test    eax, eax
7D78:	jz      short loc_7DB2
7D7A:	mov     rdx, cs:g_program
7D81:	mov     rax, cs:stderr@GLIBC_2_2_5
7D88:	lea     rcx, aSTryingXterm; '%s: trying xterm...n'
7D8F:	mov     rsi, rcx; format
7D92:	mov     rdi, rax; stream
7D95:	mov     eax, 0
7D9A:	call    _fprintf
7D9F:	lea     rax, aXterm; 'xterm'
7DA6:	mov     [rbp+termtype], rax
7DAD:	jmp     retry
7DB2:	mov     rax, [rbp+termtype]
7DB9:	lea     rdx, aVt220; 'vt220'
7DC0:	mov     rsi, rdx; s2
7DC3:	mov     rdi, rax; s1
7DC6:	call    _strcmp
7DCB:	test    eax, eax
7DCD:	jz      short loc_7DEC
7DCF:	mov     rax, [rbp+termtype]
7DD6:	lea     rdx, aVt320; 'vt320'
7DDD:	mov     rsi, rdx; s2
7DE0:	mov     rdi, rax; s1
7DE3:	call    _strcmp
7DE8:	test    eax, eax
7DEA:	jnz     short loc_7E24
7DEC:	mov     rdx, cs:g_program
7DF3:	mov     rax, cs:stderr@GLIBC_2_2_5
7DFA:	lea     rcx, aSTryingVt100; '%s: trying vt100...n'
7E01:	mov     rsi, rcx; format
7E04:	mov     rdi, rax; stream
7E07:	mov     eax, 0
7E0C:	call    _fprintf
7E11:	lea     rax, aAnsi; 'ansi'
7E18:	mov     [rbp+termtype], rax
7E1F:	jmp     retry
7E24:	mov     edi, 1; status
7E29:	call    _exit
7E2E:	mov     rax, [rbp+termtype]
7E35:	mov     rdi, rax; string
7E38:	call    xstrdup
7E3D:	mov     cs:tty_type, rax
7E44:	mov     edi, 800h; n
7E49:	call    xmalloc
7E4E:	mov     [rbp+capability_buf], rax
7E55:	mov     rax, cs:tty_capability.name+0E0h
7E5C:	lea     rdx, [rbp+capability_buf]
7E63:	mov     rsi, rdx; char **
7E66:	mov     rdi, rax; char *
7E69:	call    _tgetstr
7E6E:	mov     [rbp+tmp], rax
7E75:	cmp     [rbp+tmp], 0
7E7D:	jz      short loc_7E8B
7E7F:	mov     rax, [rbp+tmp]
7E86:	movzx   eax, byte ptr [rax]
7E89:	jmp     short loc_7E90
7E8B:	mov     eax, 0
7E90:	mov     cs:PC, al
7E96:	mov     rax, cs:tty_capability.name+120h
7E9D:	lea     rdx, [rbp+capability_buf]
7EA4:	mov     rsi, rdx; char **
7EA7:	mov     rdi, rax; char *
7EAA:	call    _tgetstr
7EAF:	mov     cs:BC, rax
7EB6:	mov     rax, cs:tty_capability.name+100h
7EBD:	lea     rdx, [rbp+capability_buf]
7EC4:	mov     rsi, rdx; char **
7EC7:	mov     rdi, rax; char *
7ECA:	call    _tgetstr
7ECF:	mov     cs:UP, rax
7ED6:	mov     rax, cs:BC
7EDD:	test    rax, rax
7EE0:	jz      short loc_7EEE
7EE2:	mov     rax, cs:UP
7EE9:	test    rax, rax
7EEC:	jnz     short loc_7F07
7EEE:	mov     cs:UP, 0
7EF9:	mov     rax, cs:UP
7F00:	mov     cs:BC, rax
7F07:	mov     rax, cs:tty_capability.name
7F0E:	lea     rdx, [rbp+capability_buf]
7F15:	mov     rsi, rdx; char **
7F18:	mov     rdi, rax; char *
7F1B:	call    _tgetstr
7F20:	mov     cs:tty_capability.string, rax
7F27:	mov     rax, cs:tty_capability.name+40h
7F2E:	lea     rdx, [rbp+capability_buf]
7F35:	mov     rsi, rdx; char **
7F38:	mov     rdi, rax; char *
7F3B:	call    _tgetstr
7F40:	mov     cs:tty_capability.string+40h, rax
7F47:	mov     rax, cs:tty_capability.name+20h
7F4E:	lea     rdx, [rbp+capability_buf]
7F55:	mov     rsi, rdx; char **
7F58:	mov     rdi, rax; char *
7F5B:	call    _tgetstr
7F60:	mov     cs:tty_capability.string+20h, rax
7F67:	mov     rax, cs:tty_capability.string
7F6E:	test    rax, rax
7F71:	jnz     short loc_7F8C
7F73:	mov     cs:tty_capability.string+40h, 0
7F7E:	mov     rax, cs:tty_capability.string+40h
7F85:	mov     cs:tty_capability.string+20h, rax
7F8C:	mov     rax, cs:tty_capability.name+140h
7F93:	lea     rdx, [rbp+capability_buf]
7F9A:	mov     rsi, rdx; char **
7F9D:	mov     rdi, rax; char *
7FA0:	call    _tgetstr
7FA5:	mov     cs:tty_capability.string+140h, rax
7FAC:	mov     rax, cs:tty_capability.string+140h
7FB3:	test    rax, rax
7FB6:	jnz     short loc_7FCF
7FB8:	mov     cs:tty_capability.string+140h, 0
7FC3:	mov     cs:tty_capability.integer+180h, 0
7FCD:	jmp     short loc_7FF2
7FCF:	mov     rax, cs:tty_capability.string+140h
7FD6:	mov     cs:tty_capability.string+20h, rax
7FDD:	mov     rax, cs:tty_capability.name+180h
7FE4:	mov     rdi, rax; char *
7FE7:	call    _tgetflag
7FEC:	mov     cs:tty_capability.integer+180h, eax
7FF2:	mov     rax, cs:tty_capability.name+160h
7FF9:	mov     rdi, rax; char *
7FFC:	call    _tgetnum
8001:	mov     cs:tty_capability.integer+160h, eax
8007:	mov     eax, cs:tty_capability.integer+160h
800D:	test    eax, eax
800F:	js      short loc_8038
8011:	mov     cs:tty_capability.string+40h, 0
801C:	mov     rax, cs:tty_capability.string+40h
8023:	mov     cs:tty_capability.string+20h, rax
802A:	mov     rax, cs:tty_capability.string+20h
8031:	mov     cs:tty_capability.string, rax
8038:	mov     rax, cs:tty_capability.name+1A0h
803F:	mov     rdi, rax; char *
8042:	call    _tgetnum
8047:	mov     cs:tty_capability.integer+1A0h, eax
804D:	mov     rax, cs:tty_capability.name+1C0h
8054:	mov     rdi, rax; char *
8057:	call    _tgetnum
805C:	mov     cs:tty_capability.integer+1C0h, eax
8062:	mov     rax, cs:tty_capability.name+60h
8069:	lea     rdx, [rbp+capability_buf]
8070:	mov     rsi, rdx; char **
8073:	mov     rdi, rax; char *
8076:	call    _tgetstr
807B:	mov     cs:tty_capability.string+60h, rax
8082:	mov     rax, cs:tty_capability.name+80h
8089:	lea     rdx, [rbp+capability_buf]
8090:	mov     rsi, rdx; char **
8093:	mov     rdi, rax; char *
8096:	call    _tgetstr
809B:	mov     cs:tty_capability.string+80h, rax
80A2:	mov     rax, cs:tty_capability.string+60h
80A9:	test    rax, rax
80AC:	jz      short loc_80BA
80AE:	mov     rax, cs:tty_capability.string+80h
80B5:	test    rax, rax
80B8:	jnz     short loc_80D3
80BA:	mov     cs:tty_capability.string+60h, 0
80C5:	mov     rax, cs:tty_capability.string+60h
80CC:	mov     cs:tty_capability.string+80h, rax
80D3:	mov     rax, cs:tty_capability.name+0A0h
80DA:	lea     rdx, [rbp+capability_buf]
80E1:	mov     rsi, rdx; char **
80E4:	mov     rdi, rax; char *
80E7:	call    _tgetstr
80EC:	mov     cs:tty_capability.string+0A0h, rax
80F3:	mov     rax, cs:tty_capability.name+0C0h
80FA:	lea     rdx, [rbp+capability_buf]
8101:	mov     rsi, rdx; char **
8104:	mov     rdi, rax; char *
8107:	call    _tgetstr
810C:	mov     cs:tty_capability.string+0C0h, rax
8113:	mov     rax, cs:tty_capability.name+1E0h
811A:	lea     rdx, [rbp+capability_buf]
8121:	mov     rsi, rdx; char **
8124:	mov     rdi, rax; char *
8127:	call    _tgetstr
812C:	mov     cs:tty_capability.string+1E0h, rax
8133:	mov     rax, cs:tty_capability.name+200h
813A:	lea     rdx, [rbp+capability_buf]
8141:	mov     rsi, rdx; char **
8144:	mov     rdi, rax; char *
8147:	call    _tgetstr
814C:	mov     cs:tty_capability.string+200h, rax
8153:	mov     [rbp+i], 11h
815D:	jmp     short loc_81AD
815F:	mov     eax, [rbp+i]
8165:	cdqe
8167:	shl     rax, 5
816B:	mov     rdx, rax
816E:	lea     rax, tty_capability
8175:	mov     rax, [rdx+rax]
8179:	lea     rdx, [rbp+capability_buf]
8180:	mov     rsi, rdx; char **
8183:	mov     rdi, rax; char *
8186:	call    _tgetstr
818B:	mov     edx, [rbp+i]
8191:	movsxd  rdx, edx
8194:	mov     rcx, rdx
8197:	shl     rcx, 5
819B:	lea     rdx, tty_capability.string
81A2:	mov     [rcx+rdx], rax
81A6:	add     [rbp+i], 1
81AD:	cmp     [rbp+i], 25h ; '%'
81B4:	jle     short loc_815F
81B6:	mov     [rbp+i], 0
81C0:	jmp     loc_8272
81C5:	mov     eax, [rbp+i]
81CB:	cdqe
81CD:	shl     rax, 5
81D1:	mov     rdx, rax
81D4:	lea     rax, tty_capability.string
81DB:	mov     rax, [rdx+rax]
81DF:	test    rax, rax
81E2:	jnz     loc_826B
81E8:	mov     eax, [rbp+i]
81EE:	cdqe
81F0:	shl     rax, 5
81F4:	mov     rdx, rax
81F7:	lea     rax, tty_capability.required
81FE:	mov     eax, [rdx+rax]
8201:	test    eax, eax
8203:	jz      short loc_824A
8205:	add     [rbp+term_errors], 1
820C:	mov     eax, [rbp+i]
8212:	cdqe
8214:	shl     rax, 5
8218:	mov     rdx, rax
821B:	lea     rax, tty_capability
8222:	mov     rcx, [rdx+rax]
8226:	mov     rdx, cs:g_program
822D:	mov     rax, cs:stderr@GLIBC_2_2_5
8234:	lea     rsi, aSCanTFindTheST; '%s: can't find the '%s' terminal capabi'...
823B:	mov     rdi, rax; stream
823E:	mov     eax, 0
8243:	call    _fprintf
8248:	jmp     short loc_826B
824A:	mov     eax, [rbp+i]
8250:	cdqe
8252:	shl     rax, 5
8256:	mov     rdx, rax
8259:	lea     rax, tty_capability.string
8260:	lea     rcx, unk_B8DE
8267:	mov     [rdx+rax], rcx
826B:	add     [rbp+i], 1
8272:	cmp     [rbp+i], 25h ; '%'
8279:	jle     loc_81C5
827F:	cmp     [rbp+term_errors], 0
8286:	jz      short loc_82BA
8288:	mov     rdx, cs:g_program
828F:	mov     rax, cs:stderr@GLIBC_2_2_5
8296:	mov     ecx, [rbp+term_errors]
829C:	lea     rsi, aSDErrorsYourTe; '%s: %d errors. Your terminal is too dum'...
82A3:	mov     rdi, rax; stream
82A6:	mov     eax, 0
82AB:	call    _fprintf
82B0:	mov     edi, 1; status
82B5:	call    _exit
82BA:	nop
82BB:	mov     rax, [rbp+var_8]
82BF:	sub     rax, fs:28h
82C8:	jz      short locret_82CF
82CA:	call    ___stack_chk_fail
82CF:	leave
82D0:	retn
82D1:	endbr64
82D5:	push    rbp
82D6:	mov     rbp, rsp
82D9:	sub     rsp, 10h
82DD:	mov     [rbp+kbd_mode], edi
82E0:	mov     edi, 0; fd
82E5:	call    _isatty
82EA:	test    eax, eax
82EC:	jz      short loc_82FC
82EE:	mov     edi, 1; fd
82F3:	call    _isatty
82F8:	test    eax, eax
82FA:	jnz     short loc_832B
82FC:	mov     rdx, cs:g_program
8303:	mov     rax, cs:stderr@GLIBC_2_2_5
830A:	lea     rcx, aSOnlyStderrCan; '%s: only stderr can be redirected.n'
8311:	mov     rsi, rcx; format
8314:	mov     rdi, rax; stream
8317:	mov     eax, 0
831C:	call    _fprintf
8321:	mov     edi, 1; status
8326:	call    _exit
832B:	mov     edi, 1; fd
8330:	call    _ttyname
8335:	mov     cs:tty_device, rax
833C:	mov     rax, cs:tty_device
8343:	test    rax, rax
8346:	jnz     short loc_8377
8348:	mov     rdx, cs:g_program
834F:	mov     rax, cs:stderr@GLIBC_2_2_5
8356:	lea     rcx, aSCanTGetTermin; '%s: can't get terminal name.n'
835D:	mov     rsi, rcx; format
8360:	mov     rdi, rax; stream
8363:	mov     eax, 0
8368:	call    _fprintf
836D:	mov     edi, 1; status
8372:	call    _exit
8377:	lea     rax, old_term
837E:	mov     rsi, rax; termios_p
8381:	mov     edi, 1; fd
8386:	call    _tcgetattr
838B:	mov     edi, 40h ; '@'; n
8390:	call    xmalloc
8395:	mov     cs:tty_key_seq, rax
839C:	mov     rax, cs:tty_key_seq
83A3:	mov     cs:default_key.key_seq, rax
83AA:	mov     cs:default_key.aux_data, 0
83B5:	mov     cs:default_key.next, 0
83C0:	mov     eax, [rbp+kbd_mode]
83C3:	mov     cs:tty_kbdmode, eax
83C9:	mov     rax, cs:tty_device
83D0:	mov     rdi, rax; s
83D3:	call    _strlen
83D8:	mov     cs:tty_device_length, eax
83DE:	mov     eax, 0
83E3:	call    tty_get_capabilities
83E8:	nop
83E9:	leave
83EA:	retn
83EB:	endbr64
83EF:	push    rbp
83F0:	mov     rbp, rsp
83F3:	sub     rsp, 30h
83F7:	mov     [rbp+string], rdi
83FB:	mov     rax, cs:tty_type
8402:	mov     rdi, rax; term
8405:	call    tty_is_xterm
840A:	test    eax, eax
840C:	jz      loc_8516
8412:	mov     rax, [rbp+string]
8416:	mov     rdi, rax; s
8419:	call    _strlen
841E:	mov     [rbp+len], rax
8422:	mov     rax, [rbp+len]
8426:	add     rax, 81h
842C:	mov     rdi, rax; n
842F:	call    xmalloc
8434:	mov     [rbp+temp], rax
8438:	mov     rax, [rbp+string]
843C:	mov     rdi, rax; string
843F:	call    xstrdup
8444:	mov     [rbp+printable_string], rax
8448:	mov     rdx, [rbp+len]
844C:	mov     rax, [rbp+printable_string]
8450:	mov     rsi, rdx; length
8453:	mov     rdi, rax; string
8456:	call    toprintable
845B:	mov     rdx, [rbp+printable_string]
845F:	mov     rax, [rbp+temp]
8463:	mov     r9d, 7
8469:	mov     r8, rdx
846C:	lea     rdx, aGnuInteractive_0; 'GNU Interactive Tools'
8473:	mov     rcx, rdx
8476:	mov     edx, 1Bh
847B:	lea     rsi, aC2SSC; '%c]2;%s - %s%c'
8482:	mov     rdi, rax; s
8485:	mov     eax, 0
848A:	call    _sprintf
848F:	mov     rax, [rbp+len]
8493:	lea     edx, [rax+7Fh]
8496:	mov     eax, cs:tty_columns
849C:	add     eax, eax
849E:	cmp     edx, eax
84A0:	jl      short loc_84CF
84A2:	mov     eax, cs:tty_columns
84A8:	add     eax, eax
84AA:	movsxd  rdx, eax
84AD:	mov     rax, [rbp+temp]
84B1:	add     rax, rdx
84B4:	mov     byte ptr [rax], 7
84B7:	mov     eax, cs:tty_columns
84BD:	add     eax, eax
84BF:	cdqe
84C1:	lea     rdx, [rax+1]
84C5:	mov     rax, [rbp+temp]
84C9:	add     rax, rdx
84CC:	mov     byte ptr [rax], 0
84CF:	mov     rax, [rbp+temp]
84D3:	mov     rdi, rax; s
84D6:	call    _strlen
84DB:	mov     rdx, rax; count
84DE:	mov     rax, [rbp+temp]
84E2:	mov     rsi, rax; buf
84E5:	mov     edi, 1; fd
84EA:	call    xwrite
84EF:	mov     rax, [rbp+printable_string]
84F3:	mov     rdi, rax; pointer
84F6:	call    xfree
84FB:	mov     rax, [rbp+temp]
84FF:	mov     rdi, rax; pointer
8502:	call    xfree
8507:	mov     rax, cs:stdout@GLIBC_2_2_5
850E:	mov     rdi, rax; stream
8511:	call    _fflush
8516:	nop
8517:	leave
8518:	retn
8519:	endbr64
851D:	push    rbp
851E:	mov     rbp, rsp
8521:	sub     rsp, 10h
8525:	mov     [rbp+term], rdi
8529:	mov     rax, [rbp+term]
852D:	mov     edx, 5; n
8532:	lea     rcx, aXterm; 'xterm'
8539:	mov     rsi, rcx; s2
853C:	mov     rdi, rax; s1
853F:	call    _strncmp
8544:	test    eax, eax
8546:	jz      loc_85D8
854C:	mov     rax, [rbp+term]
8550:	mov     edx, 4; n
8555:	lea     rcx, aRxvt; 'rxvt'
855C:	mov     rsi, rcx; s2
855F:	mov     rdi, rax; s1
8562:	call    _strncmp
8567:	test    eax, eax
8569:	jz      short loc_85D8
856B:	mov     rax, [rbp+term]
856F:	mov     edx, 9; n
8574:	lea     rcx, s2; 'iris-ansi'
857B:	mov     rsi, rcx; s2
857E:	mov     rdi, rax; s1
8581:	call    _strncmp
8586:	test    eax, eax
8588:	jz      short loc_85D8
858A:	mov     rax, [rbp+term]
858E:	lea     rdx, aAixterm; 'aixterm'
8595:	mov     rsi, rdx; s2
8598:	mov     rdi, rax; s1
859B:	call    _strcmp
85A0:	test    eax, eax
85A2:	jz      short loc_85D8
85A4:	mov     rax, [rbp+term]
85A8:	lea     rdx, aEterm; 'Eterm'
85AF:	mov     rsi, rdx; s2
85B2:	mov     rdi, rax; s1
85B5:	call    _strcmp
85BA:	test    eax, eax
85BC:	jz      short loc_85D8
85BE:	mov     rax, [rbp+term]
85C2:	lea     rdx, aDtterm; 'dtterm'
85C9:	mov     rsi, rdx; s2
85CC:	mov     rdi, rax; s1
85CF:	call    _strcmp
85D4:	test    eax, eax
85D6:	jnz     short loc_85DF
85D8:	mov     eax, 1
85DD:	jmp     short locret_85E4
85DF:	mov     eax, 0
85E4:	leave
85E5:	retn
85E6:	endbr64
85EA:	push    rbp
85EB:	mov     rbp, rsp
85EE:	sub     rsp, 10h
85F2:	mov     edi, 18h; n
85F7:	call    xmalloc
85FC:	mov     [rbp+window], rax
8600:	mov     rax, [rbp+window]
8604:	mov     r8d, 0; columns
860A:	mov     ecx, 0; lines
860F:	mov     edx, 0; y
8614:	mov     esi, 0; x
8619:	mov     rdi, rax; window
861C:	call    window_resize
8621:	mov     rax, [rbp+window]
8625:	leave
8626:	retn
8627:	endbr64
862B:	push    rbp
862C:	mov     rbp, rsp
862F:	sub     rsp, 10h
8633:	mov     [rbp+window], rdi
8637:	cmp     [rbp+window], 0
863C:	jz      short loc_864A
863E:	mov     rax, [rbp+window]
8642:	mov     rdi, rax; pointer
8645:	call    xfree
864A:	nop
864B:	leave
864C:	retn
864D:	endbr64
8651:	push    rbp
8652:	mov     rbp, rsp
8655:	mov     [rbp+window], rdi
8659:	mov     [rbp+x], esi
865C:	mov     [rbp+y], edx
865F:	mov     [rbp+lines], ecx
8662:	mov     [rbp+columns], r8d
8666:	mov     rax, [rbp+window]
866A:	mov     edx, [rbp+x]
866D:	mov     [rax], edx
866F:	mov     rax, [rbp+window]
8673:	mov     edx, [rbp+y]
8676:	mov     [rax+4], edx
8679:	mov     rax, [rbp+window]
867D:	mov     edx, [rbp+lines]
8680:	mov     [rax+8], edx
8683:	mov     rax, [rbp+window]
8687:	mov     edx, [rbp+columns]
868A:	mov     [rax+0Ch], edx
868D:	nop
868E:	pop     rbp
868F:	retn
8690:	endbr64
8694:	push    rbp
8695:	mov     rbp, rsp
8698:	sub     rsp, 30h
869C:	mov     [rbp+window], rdi
86A0:	mov     [rbp+str], rsi
86A4:	mov     [rbp+length], edx
86A7:	mov     rax, [rbp+window]
86AB:	mov     eax, [rax+10h]
86AE:	mov     [rbp+x], eax
86B1:	mov     rax, [rbp+window]
86B5:	mov     edx, [rax+10h]
86B8:	mov     eax, [rbp+length]
86BB:	add     edx, eax
86BD:	mov     rax, [rbp+window]
86C1:	mov     [rax+10h], edx
86C4:	mov     rax, [rbp+window]
86C8:	mov     eax, [rax+0Ch]
86CB:	cmp     [rbp+x], eax
86CE:	jl      short loc_86D7
86D0:	mov     eax, 0
86D5:	jmp     short locret_8730
86D7:	mov     rax, [rbp+window]
86DB:	mov     edx, [rax+14h]
86DE:	mov     rax, [rbp+window]
86E2:	mov     eax, [rax+8]
86E5:	cmp     edx, eax
86E7:	jl      short loc_86F0
86E9:	mov     eax, 0
86EE:	jmp     short locret_8730
86F0:	mov     edx, [rbp+x]
86F3:	mov     eax, [rbp+length]
86F6:	add     edx, eax
86F8:	mov     rax, [rbp+window]
86FC:	mov     eax, [rax+0Ch]
86FF:	cmp     edx, eax
8701:	jg      short loc_8716
8703:	mov     edx, [rbp+length]
8706:	mov     rax, [rbp+str]
870A:	mov     esi, edx; length
870C:	mov     rdi, rax; buf
870F:	call    tty_puts
8714:	jmp     short locret_8730
8716:	mov     rax, [rbp+window]
871A:	mov     eax, [rax+0Ch]
871D:	sub     eax, [rbp+x]
8720:	mov     edx, eax
8722:	mov     rax, [rbp+str]
8726:	mov     esi, edx; length
8728:	mov     rdi, rax; buf
872B:	call    tty_puts
8730:	leave
8731:	retn
8732:	endbr64
8736:	push    rbp
8737:	mov     rbp, rsp
873A:	sub     rsp, 10h
873E:	mov     [rbp+window], rdi
8742:	mov     [rbp+c], esi
8745:	mov     rax, [rbp+window]
8749:	mov     eax, [rax+10h]
874C:	lea     edx, [rax+1]
874F:	mov     rax, [rbp+window]
8753:	mov     [rax+10h], edx
8756:	mov     rax, [rbp+window]
875A:	mov     edx, [rax+10h]
875D:	mov     rax, [rbp+window]
8761:	mov     eax, [rax+0Ch]
8764:	cmp     edx, eax
8766:	jle     short loc_876F
8768:	mov     eax, 0
876D:	jmp     short locret_8792
876F:	mov     rax, [rbp+window]
8773:	mov     edx, [rax+14h]
8776:	mov     rax, [rbp+window]
877A:	mov     eax, [rax+8]
877D:	cmp     edx, eax
877F:	jl      short loc_8788
8781:	mov     eax, 0
8786:	jmp     short locret_8792
8788:	mov     eax, [rbp+c]
878B:	mov     edi, eax; c
878D:	call    tty_putc
8792:	leave
8793:	retn
8794:	endbr64
8798:	push    rbp
8799:	mov     rbp, rsp
879C:	sub     rsp, 10h
87A0:	mov     [rbp+window], rdi
87A4:	mov     [rbp+y], esi
87A7:	mov     [rbp+x], edx
87AA:	mov     rax, [rbp+window]
87AE:	mov     edx, [rbp+x]
87B1:	mov     [rax+10h], edx
87B4:	mov     rax, [rbp+window]
87B8:	mov     edx, [rbp+y]
87BB:	mov     [rax+14h], edx
87BE:	mov     rax, [rbp+window]
87C2:	mov     edx, [rax]
87C4:	mov     eax, [rbp+x]
87C7:	add     edx, eax
87C9:	mov     rax, [rbp+window]
87CD:	mov     ecx, [rax+4]
87D0:	mov     eax, [rbp+y]
87D3:	add     eax, ecx
87D5:	mov     esi, edx; x
87D7:	mov     edi, eax; y
87D9:	call    tty_goto
87DE:	nop
87DF:	leave
87E0:	retn
87E1:	endbr64
87E5:	push    rbp
87E6:	mov     rbp, rsp
87E9:	mov     [rbp+window], rdi
87ED:	mov     rax, [rbp+window]
87F1:	mov     eax, [rax]
87F3:	pop     rbp
87F4:	retn
87F5:	endbr64
87F9:	push    rbp
87FA:	mov     rbp, rsp
87FD:	mov     [rbp+window], rdi
8801:	mov     rax, [rbp+window]
8805:	mov     eax, [rax+4]
8808:	pop     rbp
8809:	retn
880A:	endbr64
880E:	push    rbp
880F:	mov     rbp, rsp
8812:	mov     [rbp+window], rdi
8816:	mov     rax, [rbp+window]
881A:	mov     eax, [rax+8]
881D:	pop     rbp
881E:	retn
881F:	endbr64
8823:	push    rbp
8824:	mov     rbp, rsp
8827:	mov     [rbp+window], rdi
882B:	mov     rax, [rbp+window]
882F:	mov     eax, [rax+0Ch]
8832:	pop     rbp
8833:	retn
8834:	endbr64
8838:	push    rbp
8839:	mov     rbp, rsp
883C:	sub     rsp, 10h
8840:	lea     rax, aBin; '/bin'
8847:	mov     [rbp+prefix_relative_bin_dir], rax
884B:	lea     rax, aShareGnuit; '/share/gnuit'
8852:	mov     [rbp+prefix_relative_term_dir], rax
8856:	mov     rax, [rbp+prefix_relative_bin_dir]
885A:	mov     rdi, rax; s
885D:	call    _strlen
8862:	add     rax, 0Bh
8866:	mov     rdi, rax; n
8869:	call    xmalloc
886E:	mov     cs:bindir, rax
8875:	mov     rax, cs:bindir
887C:	mov     rdx, [rbp+prefix_relative_bin_dir]
8880:	mov     rcx, rdx
8883:	lea     rdx, aUsrLocal; '/usr/local'
888A:	lea     rsi, aSS_2; '%s%s'
8891:	mov     rdi, rax; s
8894:	mov     eax, 0
8899:	call    _sprintf
889E:	mov     rax, [rbp+prefix_relative_term_dir]
88A2:	mov     rdi, rax; s
88A5:	call    _strlen
88AA:	add     rax, 0Bh
88AE:	mov     rdi, rax; n
88B1:	call    xmalloc
88B6:	mov     cs:termdir, rax
88BD:	mov     rax, cs:termdir
88C4:	mov     rdx, [rbp+prefix_relative_term_dir]
88C8:	mov     rcx, rdx
88CB:	lea     rdx, aUsrLocal; '/usr/local'
88D2:	lea     rsi, aSS_2; '%s%s'
88D9:	mov     rdi, rax; s
88DC:	mov     eax, 0
88E1:	call    _sprintf
88E6:	nop
88E7:	leave
88E8:	retn
88E9:	endbr64
88ED:	push    rbp
88EE:	mov     rbp, rsp
88F1:	push    rbx
88F2:	sub     rsp, 18h
88F6:	lea     rax, aPath; 'PATH'
88FD:	mov     rdi, rax; name
8900:	call    _getenv
8905:	mov     [rbp+path], rax
8909:	cmp     [rbp+path], 0
890E:	jnz     short loc_892B
8910:	mov     rax, cs:bindir
8917:	mov     rsi, rax; value
891A:	lea     rax, aPath; 'PATH'
8921:	mov     rdi, rax; variable
8924:	call    xsetenv
8929:	jmp     short loc_89A1
892B:	mov     rax, [rbp+path]
892F:	mov     rdi, rax; s
8932:	call    _strlen
8937:	mov     rbx, rax
893A:	mov     rax, cs:bindir
8941:	mov     rdi, rax; s
8944:	call    _strlen
8949:	add     rax, rbx
894C:	add     rax, 2
8950:	mov     rdi, rax; n
8953:	call    xmalloc
8958:	mov     [rbp+new_value], rax
895C:	mov     rcx, cs:bindir
8963:	mov     rdx, [rbp+path]
8967:	mov     rax, [rbp+new_value]
896B:	lea     rsi, aSS_1; '%s:%s'
8972:	mov     rdi, rax; s
8975:	mov     eax, 0
897A:	call    _sprintf
897F:	mov     rax, [rbp+new_value]
8983:	mov     rsi, rax; value
8986:	lea     rax, aPath; 'PATH'
898D:	mov     rdi, rax; variable
8990:	call    xsetenv
8995:	mov     rax, [rbp+new_value]
8999:	mov     rdi, rax; pointer
899C:	call    xfree
89A1:	nop
89A2:	mov     rbx, [rbp+var_8]
89A6:	leave
89A7:	retn
89A8:	endbr64
89AC:	push    rbp
89AD:	mov     rbp, rsp
89B0:	sub     rsp, 20h
89B4:	mov     [rbp+signame], rdi
89B8:	mov     eax, 0
89BD:	call    get_local_time
89C2:	mov     [rbp+time], rax
89C6:	call    _getpid
89CB:	mov     esi, eax
89CD:	mov     r8, cs:g_program
89D4:	mov     rax, [rbp+time]
89D8:	mov     edi, [rax]
89DA:	mov     rax, [rbp+time]
89DE:	mov     r9d, [rax+4]
89E2:	mov     rax, [rbp+time]
89E6:	mov     r10d, [rax+8]
89EA:	mov     rax, [rbp+time]
89EE:	mov     ecx, [rax+0Ch]
89F1:	mov     rax, [rbp+time]
89F5:	mov     eax, [rax+10h]
89F8:	cdqe
89FA:	lea     rdx, ds:0[rax*8]
8A02:	lea     rax, month_name
8A09:	mov     rdx, [rdx+rax]
8A0D:	mov     rax, cs:stderr@GLIBC_2_2_5
8A14:	push    [rbp+signame]
8A17:	push    rsi
8A18:	push    r8
8A1A:	push    rdi
8A1B:	mov     r8d, r10d
8A1E:	lea     rsi, aSD2d02d02dSDEx; '%s %d %2d:%02d:%02d %s[%d]: exiting on '...
8A25:	mov     rdi, rax; stream
8A28:	mov     eax, 0
8A2D:	call    _fprintf
8A32:	add     rsp, 20h
8A36:	nop
8A37:	leave
8A38:	retn
8A39:	endbr64
8A3D:	push    rbp
8A3E:	mov     rbp, rsp
8A41:	sub     rsp, 10h
8A45:	mov     [rbp+signum], edi
8A48:	mov     eax, 0
8A4D:	call    clean_up
8A52:	cmp     [rbp+signum], 0Fh
8A56:	jz      short loc_8A74
8A58:	cmp     [rbp+signum], 0Fh
8A5C:	jg      short loc_8AB6
8A5E:	cmp     [rbp+signum], 2
8A62:	jg      short loc_8A6C
8A64:	cmp     [rbp+signum], 0
8A68:	jg      short loc_8A85
8A6A:	jmp     short loc_8AB6
8A6C:	cmp     [rbp+signum], 0Bh
8A70:	jz      short loc_8AA5
8A72:	jmp     short loc_8AB6
8A74:	lea     rax, signame; 'TERM'
8A7B:	mov     rdi, rax; signame
8A7E:	call    display_exit_message
8A83:	jmp     short loc_8B01
8A85:	cmp     [rbp+signum], 1
8A89:	jnz     short loc_8A94
8A8B:	lea     rax, aHup; 'HUP'
8A92:	jmp     short loc_8A9B
8A94:	lea     rax, aInt; 'INT'
8A9B:	mov     rdi, rax; signame
8A9E:	call    display_exit_message
8AA3:	jmp     short loc_8B01
8AA5:	lea     rax, aSegv; 'SEGV'
8AAC:	mov     rdi, rax; signame
8AAF:	call    display_exit_message
8AB4:	jmp     short ask_report
8AB6:	mov     rdx, cs:g_program
8ABD:	mov     rax, cs:stderr@GLIBC_2_2_5
8AC4:	mov     ecx, [rbp+signum]
8AC7:	lea     rsi, aSGotAStupidSig; '%s: got a stupid signal (%d). Unless it'...
8ACE:	mov     rdi, rax; stream
8AD1:	mov     eax, 0
8AD6:	call    _fprintf
8ADB:	mov     rdx, cs:g_program
8AE2:	mov     rax, cs:stderr@GLIBC_2_2_5
8AE9:	lea     rcx, aSPleaseReportT; '%s: please report to ianb@erislabs.net'...
8AF0:	mov     rsi, rcx; format
8AF3:	mov     rdi, rax; stream
8AF6:	mov     eax, 0
8AFB:	call    _fprintf
8B00:	nop
8B01:	mov     eax, [rbp+signum]
8B04:	mov     edi, eax; status
8B06:	call    _exit
8B0B:	endbr64
8B0F:	push    rbp
8B10:	mov     rbp, rsp
8B13:	sub     rsp, 10h
8B17:	mov     [rbp+configfile], rdi
8B1B:	mov     rdx, cs:g_program
8B22:	mov     rax, cs:stderr@GLIBC_2_2_5
8B29:	lea     rcx, aSInstallationP; '%s: installation problem: n'
8B30:	mov     rsi, rcx; format
8B33:	mov     rdi, rax; stream
8B36:	mov     eax, 0
8B3B:	call    _fprintf
8B40:	mov     rdx, cs:g_program
8B47:	mov     rax, cs:stderr@GLIBC_2_2_5
8B4E:	mov     rcx, [rbp+configfile]
8B52:	lea     rsi, aSCannotFindCon; '%s: cannot find configuration file '%s''...
8B59:	mov     rdi, rax; stream
8B5C:	mov     eax, 0
8B61:	call    _fprintf
8B66:	nop
8B67:	leave
8B68:	retn
8B69:	endbr64
8B6D:	push    rbp
8B6E:	mov     rbp, rsp
8B71:	sub     rsp, 10h
8B75:	mov     [rbp+configfile], rdi
8B79:	mov     rdx, cs:g_program
8B80:	mov     rax, cs:stderr@GLIBC_2_2_5
8B87:	mov     rcx, [rbp+configfile]
8B8B:	lea     rsi, aSCannotOpenCon; 'n%s: Cannot open configuration file '%'...
8B92:	mov     rdi, rax; stream
8B95:	mov     eax, 0
8B9A:	call    _fprintf
8B9F:	mov     rdx, cs:g_program
8BA6:	mov     rax, cs:stderr@GLIBC_2_2_5
8BAD:	lea     rcx, aSSeeTheInfoDoc; '%s: See the info documentation for deta'...
8BB4:	mov     rsi, rcx; format
8BB7:	mov     rdi, rax; stream
8BBA:	mov     eax, 0
8BBF:	call    _fprintf
8BC4:	mov     rdx, cs:g_program
8BCB:	mov     rax, cs:stderr@GLIBC_2_2_5
8BD2:	lea     rcx, aSIfTheTermEnvi; '%s: If the TERM environment variable is'...
8BD9:	mov     rsi, rcx; format
8BDC:	mov     rdi, rax; stream
8BDF:	mov     eax, 0
8BE4:	call    _fprintf
8BE9:	mov     rdx, cs:g_program
8BF0:	mov     rax, cs:stderr@GLIBC_2_2_5
8BF7:	lea     rcx, aSConfiguration; '%s: configuration file name is 'gnuitrc'...
8BFE:	mov     rsi, rcx; format
8C01:	mov     rdi, rax; stream
8C04:	mov     eax, 0
8C09:	call    _fprintf
8C0E:	mov     rdx, cs:g_program
8C15:	mov     rax, cs:stderr@GLIBC_2_2_5
8C1C:	lea     rcx, aSYouCanCopyACo; '%s: You can copy a configuration file i'...
8C23:	mov     rsi, rcx; format
8C26:	mov     rdi, rax; stream
8C29:	mov     eax, 0
8C2E:	call    _fprintf
8C33:	mov     rdx, cs:g_program
8C3A:	mov     rax, cs:stderr@GLIBC_2_2_5
8C41:	lea     rcx, aSAndModifyItIn; '%s: and modify it in order to overwrite'...
8C48:	mov     rsi, rcx; format
8C4B:	mov     rdi, rax; stream
8C4E:	mov     eax, 0
8C53:	call    _fprintf
8C58:	mov     rdx, cs:g_program
8C5F:	mov     rax, cs:stderr@GLIBC_2_2_5
8C66:	lea     rcx, aSAddADotAtTheS; '%s: Add a dot at the start of the file,'...
8C6D:	mov     rsi, rcx; format
8C70:	mov     rdi, rax; stream
8C73:	mov     eax, 0
8C78:	call    _fprintf
8C7D:	mov     rdx, cs:g_program
8C84:	mov     rax, cs:stderr@GLIBC_2_2_5
8C8B:	lea     rcx, aSTryModifyingG; '%s: Try modifying 'gnuitrc.generic'...'...
8C92:	mov     rsi, rcx; format
8C95:	mov     rdi, rax; stream
8C98:	mov     eax, 0
8C9D:	call    _fprintf
8CA2:	nop
8CA3:	leave
8CA4:	retn
8CA5:	endbr64
8CA9:	push    rbp
8CAA:	mov     rbp, rsp
8CAD:	push    rbx
8CAE:	sub     rsp, 18h
8CB2:	mov     rax, cs:termdir
8CB9:	mov     rdi, rax; s
8CBC:	call    _strlen
8CC1:	mov     rbx, rax
8CC4:	lea     rax, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
8CCB:	mov     rdi, rax; s
8CCE:	call    _strlen
8CD3:	add     rax, rbx
8CD6:	add     rax, 9
8CDA:	mov     rdi, rax; n
8CDD:	call    xmalloc
8CE2:	mov     [rbp+configfile], rax
8CE6:	mov     rdx, cs:termdir
8CED:	mov     rax, [rbp+configfile]
8CF1:	mov     rsi, rdx; src
8CF4:	mov     rdi, rax; dest
8CF7:	call    _strcpy
8CFC:	mov     rax, [rbp+configfile]
8D00:	lea     rdx, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
8D07:	mov     rsi, rdx; src
8D0A:	mov     rdi, rax; dest
8D0D:	call    _strcat
8D12:	mov     rax, [rbp+configfile]
8D16:	mov     rdi, rax; s
8D19:	call    _strlen
8D1E:	mov     rdx, rax
8D21:	mov     rax, [rbp+configfile]
8D25:	add     rax, rdx
8D28:	mov     dword ptr [rax], 6D6D6F63h
8D2E:	mov     word ptr [rax+4], 6E6Fh
8D34:	mov     byte ptr [rax+6], 0
8D38:	mov     rax, [rbp+configfile]
8D3C:	mov     rdi, rax; file_name
8D3F:	call    configuration_init
8D44:	test    eax, eax
8D46:	jnz     short loc_8D63
8D48:	mov     rax, [rbp+configfile]
8D4C:	mov     rdi, rax; configfile
8D4F:	mov     eax, 0
8D54:	call    configuration_fatal_error
8D59:	mov     edi, 1; status
8D5E:	call    _exit
8D63:	nop
8D64:	mov     rbx, [rbp+var_8]
8D68:	leave
8D69:	retn
8D6A:	endbr64
8D6E:	push    rbp
8D6F:	mov     rbp, rsp
8D72:	push    rbx
8D73:	sub     rsp, 18h
8D77:	mov     rax, cs:g_home
8D7E:	mov     rdi, rax; s
8D81:	call    _strlen
8D86:	mov     rbx, rax
8D89:	lea     rax, USER_CONFIGFILE_PREFIX; '/.gnuitrc.'
8D90:	mov     rdi, rax; s
8D93:	call    _strlen
8D98:	add     rbx, rax
8D9B:	mov     rax, cs:tty_type
8DA2:	mov     rdi, rax; s
8DA5:	call    _strlen
8DAA:	add     rax, rbx
8DAD:	add     rax, 2
8DB1:	mov     rdi, rax; n
8DB4:	call    xmalloc
8DB9:	mov     [rbp+configfile], rax
8DBD:	mov     rdx, cs:g_home
8DC4:	mov     rax, [rbp+configfile]
8DC8:	mov     rsi, rdx; src
8DCB:	mov     rdi, rax; dest
8DCE:	call    _strcpy
8DD3:	mov     rax, [rbp+configfile]
8DD7:	lea     rdx, USER_CONFIGFILE_PREFIX; '/.gnuitrc.'
8DDE:	mov     rsi, rdx; src
8DE1:	mov     rdi, rax; dest
8DE4:	call    _strcat
8DE9:	mov     rdx, cs:tty_type
8DF0:	mov     rax, [rbp+configfile]
8DF4:	mov     rsi, rdx; src
8DF7:	mov     rdi, rax; dest
8DFA:	call    _strcat
8DFF:	mov     rax, [rbp+configfile]
8E03:	mov     rdi, rax; file_name
8E06:	call    configuration_init
8E0B:	test    eax, eax
8E0D:	jnz     loc_9035
8E13:	mov     rax, [rbp+configfile]
8E17:	mov     rdi, rax; pointer
8E1A:	call    xfree
8E1F:	mov     rax, cs:g_home
8E26:	mov     rdi, rax; s
8E29:	call    _strlen
8E2E:	mov     rbx, rax
8E31:	lea     rax, OLD_USER_CONFIGFILE_PREFIX; '/.gitrc.'
8E38:	mov     rdi, rax; s
8E3B:	call    _strlen
8E40:	add     rbx, rax
8E43:	mov     rax, cs:tty_type
8E4A:	mov     rdi, rax; s
8E4D:	call    _strlen
8E52:	add     rax, rbx
8E55:	add     rax, 2
8E59:	mov     rdi, rax; n
8E5C:	call    xmalloc
8E61:	mov     [rbp+configfile], rax
8E65:	mov     rdx, cs:g_home
8E6C:	mov     rax, [rbp+configfile]
8E70:	mov     rsi, rdx; src
8E73:	mov     rdi, rax; dest
8E76:	call    _strcpy
8E7B:	mov     rax, [rbp+configfile]
8E7F:	lea     rdx, OLD_USER_CONFIGFILE_PREFIX; '/.gitrc.'
8E86:	mov     rsi, rdx; src
8E89:	mov     rdi, rax; dest
8E8C:	call    _strcat
8E91:	mov     rdx, cs:tty_type
8E98:	mov     rax, [rbp+configfile]
8E9C:	mov     rsi, rdx; src
8E9F:	mov     rdi, rax; dest
8EA2:	call    _strcat
8EA7:	mov     rax, [rbp+configfile]
8EAB:	mov     rdi, rax; file_name
8EAE:	call    configuration_init
8EB3:	test    eax, eax
8EB5:	jnz     loc_9035
8EBB:	mov     rax, [rbp+configfile]
8EBF:	mov     rdi, rax; pointer
8EC2:	call    xfree
8EC7:	mov     rax, cs:termdir
8ECE:	mov     rdi, rax; s
8ED1:	call    _strlen
8ED6:	mov     rbx, rax
8ED9:	lea     rax, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
8EE0:	mov     rdi, rax; s
8EE3:	call    _strlen
8EE8:	add     rbx, rax
8EEB:	mov     rax, cs:tty_type
8EF2:	mov     rdi, rax; s
8EF5:	call    _strlen
8EFA:	add     rax, rbx
8EFD:	add     rax, 2
8F01:	mov     rdi, rax; n
8F04:	call    xmalloc
8F09:	mov     [rbp+configfile], rax
8F0D:	mov     rdx, cs:termdir
8F14:	mov     rax, [rbp+configfile]
8F18:	mov     rsi, rdx; src
8F1B:	mov     rdi, rax; dest
8F1E:	call    _strcpy
8F23:	mov     rax, [rbp+configfile]
8F27:	lea     rdx, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
8F2E:	mov     rsi, rdx; src
8F31:	mov     rdi, rax; dest
8F34:	call    _strcat
8F39:	mov     rdx, cs:tty_type
8F40:	mov     rax, [rbp+configfile]
8F44:	mov     rsi, rdx; src
8F47:	mov     rdi, rax; dest
8F4A:	call    _strcat
8F4F:	mov     rax, [rbp+configfile]
8F53:	mov     rdi, rax; file_name
8F56:	call    configuration_init
8F5B:	test    eax, eax
8F5D:	jnz     loc_9035
8F63:	mov     rax, [rbp+configfile]
8F67:	mov     rdi, rax; configfile
8F6A:	mov     eax, 0
8F6F:	call    configuration_warning
8F74:	mov     rax, [rbp+configfile]
8F78:	mov     rdi, rax; pointer
8F7B:	call    xfree
8F80:	mov     rax, cs:termdir
8F87:	mov     rdi, rax; s
8F8A:	call    _strlen
8F8F:	mov     rbx, rax
8F92:	lea     rax, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
8F99:	mov     rdi, rax; s
8F9C:	call    _strlen
8FA1:	add     rax, rbx
8FA4:	add     rax, 0Ah
8FA8:	mov     rdi, rax; n
8FAB:	call    xmalloc
8FB0:	mov     [rbp+configfile], rax
8FB4:	mov     rdx, cs:termdir
8FBB:	mov     rax, [rbp+configfile]
8FBF:	mov     rsi, rdx; src
8FC2:	mov     rdi, rax; dest
8FC5:	call    _strcpy
8FCA:	mov     rax, [rbp+configfile]
8FCE:	lea     rdx, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
8FD5:	mov     rsi, rdx; src
8FD8:	mov     rdi, rax; dest
8FDB:	call    _strcat
8FE0:	mov     rax, [rbp+configfile]
8FE4:	mov     rdi, rax; s
8FE7:	call    _strlen
8FEC:	mov     rdx, rax
8FEF:	mov     rax, [rbp+configfile]
8FF3:	add     rax, rdx
8FF6:	mov     rcx, 636972656E6567h
9000:	mov     [rax], rcx
9003:	mov     rax, [rbp+configfile]
9007:	mov     rdi, rax; file_name
900A:	call    configuration_init
900F:	test    eax, eax
9011:	jnz     short loc_902E
9013:	mov     rax, [rbp+configfile]
9017:	mov     rdi, rax; configfile
901A:	mov     eax, 0
901F:	call    configuration_fatal_error
9024:	mov     edi, 1; status
9029:	call    _exit
902E:	mov     eax, 0
9033:	jmp     short loc_9046
9035:	mov     rax, [rbp+configfile]
9039:	mov     rdi, rax; pointer
903C:	call    xfree
9041:	mov     eax, 1
9046:	mov     rbx, [rbp+var_8]
904A:	leave
904B:	retn
904C:	endbr64
9050:	push    rbp
9051:	mov     rbp, rsp
9054:	push    rbx
9055:	sub     rsp, 38h
9059:	mov     [rbp+section], rdi
905D:	lea     rax, aGitfm; '[GITFM-'
9064:	mov     [rbp+gitfmprefix], rax
9068:	lea     rax, aGit; '[GIT-'
906F:	mov     [rbp+gitprefix], rax
9073:	mov     rax, [rbp+section]
9077:	mov     rdi, rax; section_name
907A:	call    configuration_section
907F:	cmp     eax, 0FFFFFFFFh
9082:	jnz     loc_917F
9088:	mov     rax, [rbp+gitfmprefix]
908C:	mov     rdi, rax; s
908F:	call    _strlen
9094:	mov     rdx, rax; n
9097:	mov     rcx, [rbp+gitfmprefix]
909B:	mov     rax, [rbp+section]
909F:	mov     rsi, rcx; s2
90A2:	mov     rdi, rax; s1
90A5:	call    _strncmp
90AA:	test    eax, eax
90AC:	jnz     loc_914F
90B2:	mov     rax, [rbp+gitprefix]
90B6:	mov     rdi, rax; s
90B9:	call    _strlen
90BE:	mov     rbx, rax
90C1:	mov     rax, [rbp+gitprefix]
90C5:	mov     rdi, rax; s
90C8:	call    _strlen
90CD:	mov     rdx, [rbp+section]
90D1:	add     rax, rdx
90D4:	mov     rdi, rax; s
90D7:	call    _strlen
90DC:	add     rax, rbx
90DF:	add     rax, 1
90E3:	mov     rdi, rax; n
90E6:	call    xmalloc
90EB:	mov     [rbp+newsection], rax
90EF:	mov     rdx, [rbp+gitprefix]
90F3:	mov     rax, [rbp+newsection]
90F7:	mov     rsi, rdx; src
90FA:	mov     rdi, rax; dest
90FD:	call    _strcpy
9102:	mov     rax, [rbp+gitfmprefix]
9106:	mov     rdi, rax; s
9109:	call    _strlen
910E:	mov     rdx, [rbp+section]
9112:	add     rdx, rax
9115:	mov     rax, [rbp+newsection]
9119:	mov     rsi, rdx; src
911C:	mov     rdi, rax; dest
911F:	call    _strcat
9124:	mov     rax, [rbp+newsection]
9128:	mov     rdi, rax; section_name
912B:	call    configuration_section
9130:	cmp     eax, 0FFFFFFFFh
9133:	jz      short loc_9143
9135:	mov     rax, [rbp+newsection]
9139:	mov     rdi, rax; pointer
913C:	call    xfree
9141:	jmp     short loc_917F
9143:	mov     rax, [rbp+newsection]
9147:	mov     rdi, rax; pointer
914A:	call    xfree
914F:	mov     rdx, cs:g_program
9156:	mov     rax, cs:stderr@GLIBC_2_2_5
915D:	mov     rcx, [rbp+section]
9161:	lea     rsi, aSCanTFindSecti; '%s: can't find section %s in the config'...
9168:	mov     rdi, rax; stream
916B:	mov     eax, 0
9170:	call    _fprintf
9175:	mov     edi, 1; status
917A:	call    _exit
917F:	mov     rbx, [rbp+var_8]
9183:	leave
9184:	retn
9185:	endbr64
9189:	push    rbp
918A:	mov     rbp, rsp
918D:	sub     rsp, 20h
9191:	mov     [rbp+var_name], rdi
9195:	mov     [rbp+default_value], esi
9198:	mov     rax, fs:28h
91A1:	mov     [rbp+var_8], rax
91A5:	xor     eax, eax
91A7:	lea     rsi, [rbp+data]; dest
91AB:	mov     rax, [rbp+var_name]
91AF:	mov     ecx, 1; seek
91B4:	mov     edx, 1; fields
91B9:	mov     rdi, rax; var_name
91BC:	call    configuration_getvarinfo
91C1:	mov     rax, [rbp+data]
91C5:	test    rax, rax
91C8:	jz      short loc_91D8
91CA:	mov     rax, [rbp+data]
91CE:	mov     rdi, rax; nptr
91D1:	call    _atoi
91D6:	jmp     short loc_91DB
91D8:	mov     eax, [rbp+default_value]
91DB:	mov     rdx, [rbp+var_8]
91DF:	sub     rdx, fs:28h
91E8:	jz      short locret_91EF
91EA:	call    ___stack_chk_fail
91EF:	leave
91F0:	retn
91F1:	endbr64
91F5:	push    rbp
91F6:	mov     rbp, rsp
91F9:	sub     rsp, 40h
91FD:	mov     [rbp+var_name], rdi
9201:	mov     [rbp+options], rsi
9205:	mov     [rbp+options_no], edx
9208:	mov     [rbp+default_value], ecx
920B:	mov     rax, fs:28h
9214:	mov     [rbp+var_8], rax
9218:	xor     eax, eax
921A:	lea     rsi, [rbp+data]; dest
921E:	mov     rax, [rbp+var_name]
9222:	mov     ecx, 1; seek
9227:	mov     edx, 1; fields
922C:	mov     rdi, rax; var_name
922F:	call    configuration_getvarinfo
9234:	mov     rax, [rbp+data]
9238:	test    rax, rax
923B:	jz      short loc_92BB
923D:	mov     [rbp+i], 0
9244:	jmp     short loc_9274
9246:	mov     eax, [rbp+i]
9249:	cdqe
924B:	lea     rdx, ds:0[rax*8]
9253:	mov     rax, [rbp+options]
9257:	add     rax, rdx
925A:	mov     rdx, [rax]
925D:	mov     rax, [rbp+data]
9261:	mov     rsi, rdx; s2
9264:	mov     rdi, rax; s1
9267:	call    _strcmp
926C:	test    eax, eax
926E:	jz      short loc_927E
9270:	add     [rbp+i], 1
9274:	mov     eax, [rbp+i]
9277:	cmp     eax, [rbp+options_no]
927A:	jl      short loc_9246
927C:	jmp     short loc_927F
927E:	nop
927F:	mov     eax, [rbp+i]
9282:	cmp     eax, [rbp+options_no]
9285:	jnz     short loc_92B6
9287:	mov     rsi, [rbp+data]
928B:	mov     rdx, cs:g_program
9292:	mov     rax, cs:stderr@GLIBC_2_2_5
9299:	mov     rcx, [rbp+var_name]
929D:	mov     r8, rsi
92A0:	lea     rsi, aSInvalidSS; '%s: invalid %s (%s).n'
92A7:	mov     rdi, rax; stream
92AA:	mov     eax, 0
92AF:	call    _fprintf
92B4:	jmp     short loc_92BB
92B6:	mov     eax, [rbp+i]
92B9:	jmp     short loc_92BE
92BB:	mov     eax, [rbp+default_value]
92BE:	mov     rdx, [rbp+var_8]
92C2:	sub     rdx, fs:28h
92CB:	jz      short locret_92D2
92CD:	call    ___stack_chk_fail
92D2:	leave
92D3:	retn
92D4:	endbr64
92D8:	push    rbp
92D9:	mov     rbp, rsp
92DC:	sub     rsp, 20h
92E0:	mov     [rbp+var_name], rdi
92E4:	mov     [rbp+default_value], esi
92E7:	mov     rax, fs:28h
92F0:	mov     [rbp+var_8], rax
92F4:	xor     eax, eax
92F6:	lea     rsi, [rbp+data]; dest
92FA:	mov     rax, [rbp+var_name]
92FE:	mov     ecx, 1; seek
9303:	mov     edx, 1; fields
9308:	mov     rdi, rax; var_name
930B:	call    configuration_getvarinfo
9310:	mov     rax, [rbp+data]
9314:	test    rax, rax
9317:	jz      short loc_938D
9319:	mov     rax, [rbp+data]
931D:	lea     rdx, aOn; 'ON'
9324:	mov     rsi, rdx; s2
9327:	mov     rdi, rax; s1
932A:	call    _strcmp
932F:	test    eax, eax
9331:	jnz     short loc_933A
9333:	mov     eax, 1
9338:	jmp     short loc_9390
933A:	mov     rax, [rbp+data]
933E:	lea     rdx, aOff; 'OFF'
9345:	mov     rsi, rdx; s2
9348:	mov     rdi, rax; s1
934B:	call    _strcmp
9350:	test    eax, eax
9352:	jnz     short loc_935B
9354:	mov     eax, 0
9359:	jmp     short loc_9390
935B:	mov     rsi, [rbp+data]
935F:	mov     rdx, cs:g_program
9366:	mov     rax, cs:stderr@GLIBC_2_2_5
936D:	mov     rcx, [rbp+var_name]
9371:	mov     r8, rsi
9374:	lea     rsi, aSInvalidSS; '%s: invalid %s (%s).n'
937B:	mov     rdi, rax; stream
937E:	mov     eax, 0
9383:	call    _fprintf
9388:	mov     eax, [rbp+default_value]
938B:	jmp     short loc_9390
938D:	mov     eax, [rbp+default_value]
9390:	mov     rdx, [rbp+var_8]
9394:	sub     rdx, fs:28h
939D:	jz      short locret_93A4
939F:	call    ___stack_chk_fail
93A4:	leave
93A5:	retn
93A6:	endbr64
93AA:	push    rbp
93AB:	mov     rbp, rsp
93AE:	sub     rsp, 20h
93B2:	mov     [rbp+var_name], rdi
93B6:	mov     [rbp+default_value], rsi
93BA:	mov     rax, fs:28h
93C3:	mov     [rbp+var_8], rax
93C7:	xor     eax, eax
93C9:	lea     rsi, [rbp+data]; dest
93CD:	mov     rax, [rbp+var_name]
93D1:	mov     ecx, 1; seek
93D6:	mov     edx, 1; fields
93DB:	mov     rdi, rax; var_name
93DE:	call    configuration_getvarinfo
93E3:	mov     rax, [rbp+data]
93E7:	test    rax, rax
93EA:	jz      short loc_93FA
93EC:	mov     rax, [rbp+data]
93F0:	mov     rdi, rax; string
93F3:	call    xstrdup
93F8:	jmp     short loc_93FE
93FA:	mov     rax, [rbp+default_value]
93FE:	mov     rdx, [rbp+var_8]
9402:	sub     rdx, fs:28h
940B:	jz      short locret_9412
940D:	call    ___stack_chk_fail
9412:	leave
9413:	retn
9414:	endbr64
9418:	push    rbp
9419:	mov     rbp, rsp
941C:	sub     rsp, 40h
9420:	mov     [rbp+charset], rdi
9424:	mov     [rbp+colorset_name], rsi
9428:	mov     [rbp+fields_no], edx
942B:	mov     rax, fs:28h
9434:	mov     [rbp+var_8], rax
9438:	xor     eax, eax
943A:	mov     [rbp+i], 0
9441:	jmp     loc_94F0
9446:	mov     eax, [rbp+i]
9449:	cdqe
944B:	lea     rdx, ds:0[rax*8]
9453:	mov     rax, [rbp+colorset_name]
9457:	add     rax, rdx
945A:	mov     rax, [rax]
945D:	lea     rsi, [rbp+data]; dest
9461:	mov     ecx, 1; seek
9466:	mov     edx, 1; fields
946B:	mov     rdi, rax; var_name
946E:	call    configuration_getvarinfo
9473:	mov     rax, [rbp+data]
9477:	test    rax, rax
947A:	jz      short loc_94EC
947C:	mov     rax, [rbp+data]
9480:	mov     rdi, rax; colorname
9483:	call    tty_get_color_index
9488:	mov     [rbp+index], eax
948B:	cmp     [rbp+index], 0FFFFFFFFh
948F:	jnz     short loc_94D3
9491:	mov     rsi, [rbp+data]
9495:	mov     eax, [rbp+i]
9498:	cdqe
949A:	lea     rdx, ds:0[rax*8]
94A2:	mov     rax, [rbp+colorset_name]
94A6:	add     rax, rdx
94A9:	mov     rcx, [rax]
94AC:	mov     rdx, cs:g_program
94B3:	mov     rax, cs:stderr@GLIBC_2_2_5
94BA:	mov     r8, rsi
94BD:	lea     rsi, aSInvalidSS; '%s: invalid %s (%s).n'
94C4:	mov     rdi, rax; stream
94C7:	mov     eax, 0
94CC:	call    _fprintf
94D1:	jmp     short loc_94EC
94D3:	mov     eax, [rbp+i]
94D6:	cdqe
94D8:	lea     rdx, ds:0[rax*4]
94E0:	mov     rax, [rbp+charset]
94E4:	add     rdx, rax
94E7:	mov     eax, [rbp+index]
94EA:	mov     [rdx], eax
94EC:	add     [rbp+i], 1
94F0:	mov     eax, [rbp+i]
94F3:	cmp     eax, [rbp+fields_no]
94F6:	jl      loc_9446
94FC:	nop
94FD:	mov     rax, [rbp+var_8]
9501:	sub     rax, fs:28h
950A:	jz      short locret_9511
950C:	call    ___stack_chk_fail
9511:	leave
9512:	retn
9513:	endbr64
9517:	push    rbp
9518:	mov     rbp, rsp
951B:	sub     rsp, 20h
951F:	mov     [rbp+path], rdi
9523:	mov     rax, [rbp+path]
9527:	mov     [rbp+cpath], rax
952B:	mov     rax, [rbp+path]
952F:	mov     [rbp+opath], rax
9533:	mov     rax, [rbp+opath]
9537:	movzx   eax, byte ptr [rax]
953A:	cmp     al, 2Fh ; '/'
953C:	jnz     short loc_9560
953E:	mov     rdx, [rbp+opath]
9542:	lea     rax, [rdx+1]
9546:	mov     [rbp+opath], rax
954A:	mov     rax, [rbp+cpath]
954E:	lea     rcx, [rax+1]
9552:	mov     [rbp+cpath], rcx
9556:	movzx   edx, byte ptr [rdx]
9559:	mov     [rax], dl
955B:	jmp     loc_9663
9560:	lea     rax, postmsg; 'relative path encountered'
9567:	mov     rdi, rax; postmsg
956A:	call    fatal
956F:	jmp     loc_9663
9574:	add     [rbp+opath], 1
9579:	mov     rax, [rbp+opath]
957D:	movzx   eax, byte ptr [rax]
9580:	cmp     al, 2Fh ; '/'
9582:	jz      short loc_9574
9584:	mov     rax, [rbp+opath]
9588:	movzx   eax, byte ptr [rax]
958B:	cmp     al, 2Eh ; '.'
958D:	jnz     short loc_95AD
958F:	mov     rax, [rbp+opath]
9593:	add     rax, 1
9597:	movzx   eax, byte ptr [rax]
959A:	cmp     al, 2Fh ; '/'
959C:	jz      short loc_9574
959E:	mov     rax, [rbp+opath]
95A2:	add     rax, 1
95A6:	movzx   eax, byte ptr [rax]
95A9:	test    al, al
95AB:	jz      short loc_9574
95AD:	mov     rax, [rbp+opath]
95B1:	movzx   eax, byte ptr [rax]
95B4:	cmp     al, 2Eh ; '.'
95B6:	jnz     short loc_9633
95B8:	mov     rax, [rbp+opath]
95BC:	add     rax, 1
95C0:	movzx   eax, byte ptr [rax]
95C3:	cmp     al, 2Eh ; '.'
95C5:	jnz     short loc_9633
95C7:	mov     rax, [rbp+opath]
95CB:	add     rax, 2
95CF:	movzx   eax, byte ptr [rax]
95D2:	cmp     al, 2Fh ; '/'
95D4:	jz      short loc_95E5
95D6:	mov     rax, [rbp+opath]
95DA:	add     rax, 2
95DE:	movzx   eax, byte ptr [rax]
95E1:	test    al, al
95E3:	jnz     short loc_9633
95E5:	mov     rax, [rbp+cpath]
95E9:	sub     rax, 1
95ED:	cmp     [rbp+path], rax
95F1:	jz      short loc_960F
95F3:	sub     [rbp+cpath], 2
95F8:	jmp     short loc_95FF
95FA:	sub     [rbp+cpath], 1
95FF:	mov     rax, [rbp+cpath]
9603:	movzx   eax, byte ptr [rax]
9606:	cmp     al, 2Fh ; '/'
9608:	jnz     short loc_95FA
960A:	add     [rbp+cpath], 1
960F:	add     [rbp+opath], 2
9614:	jmp     short loc_9663
9616:	mov     rdx, [rbp+opath]
961A:	lea     rax, [rdx+1]
961E:	mov     [rbp+opath], rax
9622:	mov     rax, [rbp+cpath]
9626:	lea     rcx, [rax+1]
962A:	mov     [rbp+cpath], rcx
962E:	movzx   edx, byte ptr [rdx]
9631:	mov     [rax], dl
9633:	mov     rax, [rbp+opath]
9637:	movzx   eax, byte ptr [rax]
963A:	test    al, al
963C:	jz      short loc_9649
963E:	mov     rax, [rbp+opath]
9642:	movzx   eax, byte ptr [rax]
9645:	cmp     al, 2Fh ; '/'
9647:	jnz     short loc_9616
9649:	mov     rax, [rbp+opath]
964D:	movzx   eax, byte ptr [rax]
9650:	test    al, al
9652:	jz      short loc_9663
9654:	mov     rax, [rbp+cpath]
9658:	lea     rdx, [rax+1]
965C:	mov     [rbp+cpath], rdx
9660:	mov     byte ptr [rax], 2Fh ; '/'
9663:	mov     rax, [rbp+opath]
9667:	movzx   eax, byte ptr [rax]
966A:	test    al, al
966C:	jnz     loc_9579
9672:	mov     rax, [rbp+cpath]
9676:	sub     rax, 1
967A:	movzx   eax, byte ptr [rax]
967D:	cmp     al, 2Fh ; '/'
967F:	jnz     short loc_9694
9681:	mov     rax, [rbp+cpath]
9685:	sub     rax, [rbp+path]
9689:	cmp     rax, 1
968D:	jle     short loc_9694
968F:	sub     [rbp+cpath], 1
9694:	mov     rax, [rbp+cpath]
9698:	mov     byte ptr [rax], 0
969B:	mov     rax, [rbp+path]
969F:	leave
96A0:	retn
96A1:	endbr64
96A5:	push    rbp
96A6:	mov     rbp, rsp
96A9:	sub     rsp, 10h
96AD:	call    _geteuid
96B2:	mov     [rbp+euid], eax
96B5:	mov     eax, [rbp+euid]
96B8:	mov     edi, eax; uid
96BA:	call    _getpwuid
96BF:	mov     [rbp+pwd], rax
96C3:	cmp     [rbp+pwd], 0
96C8:	jnz     short loc_9747
96CA:	mov     rdx, cs:g_program
96D1:	mov     rax, cs:stderr@GLIBC_2_2_5
96D8:	mov     ecx, [rbp+euid]
96DB:	lea     rsi, aSOoopsICanTGet; '%s: OOOPS, I can't get your user name ('...
96E2:	mov     rdi, rax; stream
96E5:	mov     eax, 0
96EA:	call    _fprintf
96EF:	mov     rdx, cs:g_program
96F6:	mov     rax, cs:stderr@GLIBC_2_2_5
96FD:	lea     rcx, aSystemCracker; 'SYSTEM CRACKER! :-)n'
9704:	lea     rsi, aSYourAccountNo; '%s: Your account no longer exists or yo'...
970B:	mov     rdi, rax; stream
970E:	mov     eax, 0
9713:	call    _fprintf
9718:	mov     rdx, cs:g_program
971F:	mov     rax, cs:stderr@GLIBC_2_2_5
9726:	lea     rcx, aSCorrectThePro; '%s: Correct the problem and try again.'...
972D:	mov     rsi, rcx; format
9730:	mov     rdi, rax; stream
9733:	mov     eax, 0
9738:	call    _fprintf
973D:	mov     edi, 1; status
9742:	call    _exit
9747:	mov     rax, [rbp+pwd]
974B:	mov     rax, [rax]
974E:	mov     rdi, rax; string
9751:	call    xstrdup
9756:	mov     cs:login_name, rax
975D:	nop
975E:	leave
975F:	retn
9760:	endbr64
9764:	push    rbp
9765:	mov     rbp, rsp
9768:	sub     rsp, 30h
976C:	mov     [rbp+name], rdi
9770:	mov     [rbp+dest], rsi
9774:	mov     [rbp+len], edx
9777:	cmp     [rbp+len], 3
977B:	jz      short loc_97C4
977D:	cmp     [rbp+len], 3
9781:	jg      short loc_97EA
9783:	cmp     [rbp+len], 2
9787:	jz      short loc_97AB
9789:	cmp     [rbp+len], 2
978D:	jg      short loc_97EA
978F:	cmp     [rbp+len], 0
9793:	jz      loc_9875
9799:	cmp     [rbp+len], 1
979D:	jnz     short loc_97EA
979F:	mov     rax, [rbp+dest]
97A3:	mov     byte ptr [rax], 20h ; ' '
97A6:	jmp     loc_9876
97AB:	mov     rax, [rbp+dest]
97AF:	add     rax, 1
97B3:	mov     byte ptr [rax], 20h ; ' '
97B6:	movzx   edx, byte ptr [rax]
97B9:	mov     rax, [rbp+dest]
97BD:	mov     [rax], dl
97BF:	jmp     loc_9876
97C4:	mov     rax, [rbp+dest]
97C8:	lea     rdx, [rax+2]
97CC:	mov     byte ptr [rdx], 20h ; ' '
97CF:	mov     rax, [rbp+dest]
97D3:	add     rax, 1
97D7:	movzx   edx, byte ptr [rdx]
97DA:	mov     [rax], dl
97DC:	movzx   edx, byte ptr [rax]
97DF:	mov     rax, [rbp+dest]
97E3:	mov     [rax], dl
97E5:	jmp     loc_9876
97EA:	mov     rax, [rbp+name]
97EE:	mov     rdi, rax; s
97F1:	call    _strlen
97F6:	mov     [rbp+name_len], eax
97F9:	mov     eax, [rbp+name_len]
97FC:	cmp     eax, [rbp+len]
97FF:	jle     short loc_985A
9801:	mov     rax, [rbp+dest]
9805:	lea     rdx, [rax+2]
9809:	mov     byte ptr [rdx], 2Eh ; '.'
980C:	mov     rax, [rbp+dest]
9810:	add     rax, 1
9814:	movzx   edx, byte ptr [rdx]
9817:	mov     [rax], dl
9819:	movzx   edx, byte ptr [rax]
981C:	mov     rax, [rbp+dest]
9820:	mov     [rax], dl
9822:	mov     eax, [rbp+len]
9825:	sub     eax, 3
9828:	cdqe
982A:	mov     edx, [rbp+name_len]
982D:	movsxd  rdx, edx
9830:	mov     ecx, [rbp+len]
9833:	movsxd  rcx, ecx
9836:	sub     rdx, rcx
9839:	lea     rcx, [rdx+3]
983D:	mov     rdx, [rbp+name]
9841:	lea     rsi, [rcx+rdx]; src
9845:	mov     rdx, [rbp+dest]
9849:	lea     rcx, [rdx+3]
984D:	mov     rdx, rax; n
9850:	mov     rdi, rcx; dest
9853:	call    _memcpy
9858:	jmp     short loc_9876
985A:	mov     eax, [rbp+name_len]
985D:	movsxd  rdx, eax; n
9860:	mov     rcx, [rbp+name]
9864:	mov     rax, [rbp+dest]
9868:	mov     rsi, rcx; src
986B:	mov     rdi, rax; dest
986E:	call    _memcpy
9873:	jmp     short loc_9876
9875:	nop
9876:	nop
9877:	leave
9878:	retn
9879:	endbr64
987D:	push    rbp
987E:	mov     rbp, rsp
9881:	push    rbx
9882:	sub     rsp, 28h
9886:	mov     [rbp+path], rdi
988A:	mov     [rbp+temppath], rsi
988E:	mov     [rbp+len], edx
9891:	mov     eax, [rbp+len]
9894:	lea     edx, [rax-1]; len
9897:	mov     rcx, [rbp+temppath]
989B:	mov     rax, [rbp+path]
989F:	mov     rsi, rcx; dest
98A2:	mov     rdi, rax; name
98A5:	call    truncate_long_name
98AA:	mov     eax, [rbp+len]
98AD:	lea     ebx, [rax-1]
98B0:	mov     rax, [rbp+path]
98B4:	mov     rdi, rax; s
98B7:	call    _strlen
98BC:	cmp     ebx, eax
98BE:	jg      short loc_98CA
98C0:	mov     eax, [rbp+len]
98C3:	sub     eax, 1
98C6:	cdqe
98C8:	jmp     short loc_98D8
98CA:	mov     rax, [rbp+path]
98CE:	mov     rdi, rax; s
98D1:	call    _strlen
98D6:	cdqe
98D8:	mov     rdx, [rbp+temppath]
98DC:	add     rax, rdx
98DF:	mov     byte ptr [rax], 0
98E2:	mov     rax, [rbp+temppath]
98E6:	mov     rbx, [rbp+var_8]
98EA:	leave
98EB:	retn
98EC:	endbr64
98F0:	push    rbp
98F1:	mov     rbp, rsp
98F4:	sub     rsp, 20h
98F8:	mov     [rbp+fd], edi
98FB:	mov     eax, [rbp+fd]
98FE:	mov     edx, 1; whence
9903:	mov     esi, 0; offset
9908:	mov     edi, eax; fd
990A:	call    _lseek64
990F:	mov     [rbp+current], rax
9913:	mov     eax, [rbp+fd]
9916:	mov     edx, 2; whence
991B:	mov     esi, 0; offset
9920:	mov     edi, eax; fd
9922:	call    _lseek64
9927:	mov     [rbp+length], rax
992B:	mov     rcx, [rbp+current]
992F:	mov     eax, [rbp+fd]
9932:	mov     edx, 0; whence
9937:	mov     rsi, rcx; offset
993A:	mov     edi, eax; fd
993C:	call    _lseek64
9941:	mov     rax, [rbp+length]
9945:	leave
9946:	retn
9947:	endbr64
994B:	push    rbp
994C:	mov     rbp, rsp
994F:	sub     rsp, 10h
9953:	mov     rax, fs:28h
995C:	mov     [rbp+var_8], rax
9960:	xor     eax, eax
9962:	mov     edi, 0; timer
9967:	call    _time
996C:	mov     [rbp+__time], rax
9970:	lea     rax, [rbp+__time]
9974:	mov     rdi, rax; timer
9977:	call    _localtime
997C:	mov     rdx, [rbp+var_8]
9980:	sub     rdx, fs:28h
9989:	jz      short locret_9990
998B:	call    ___stack_chk_fail
9990:	leave
9991:	retn
9992:	endbr64
9996:	push    rbp
9997:	mov     rbp, rsp
999A:	push    rbx
999B:	sub     rsp, 28h
999F:	mov     [rbp+variable], rdi
99A3:	mov     [rbp+value], rsi
99A7:	mov     rax, [rbp+variable]
99AB:	mov     rdi, rax; s
99AE:	call    _strlen
99B3:	mov     rbx, rax
99B6:	mov     rax, [rbp+value]
99BA:	mov     rdi, rax; s
99BD:	call    _strlen
99C2:	add     rax, rbx
99C5:	add     rax, 2
99C9:	mov     rdi, rax; n
99CC:	call    xmalloc
99D1:	mov     [rbp+environment_string], rax
99D5:	mov     rcx, [rbp+value]
99D9:	mov     rdx, [rbp+variable]
99DD:	mov     rax, [rbp+environment_string]
99E1:	lea     rsi, aSS_0; '%s=%s'
99E8:	mov     rdi, rax; s
99EB:	mov     eax, 0
99F0:	call    _sprintf
99F5:	mov     rax, [rbp+environment_string]
99F9:	mov     rdi, rax; string
99FC:	call    _putenv
9A01:	mov     [rbp+result], eax
9A04:	cmp     [rbp+result], 0FFFFFFFFh
9A08:	jnz     short loc_9A30
9A0A:	mov     rdx, cs:g_program
9A11:	mov     rax, cs:stderr@GLIBC_2_2_5
9A18:	mov     rcx, [rbp+variable]
9A1C:	lea     rsi, aSWarningCannot; '%s: warning: cannot add '%s' to environ'...
9A23:	mov     rdi, rax; stream
9A26:	mov     eax, 0
9A2B:	call    _fprintf
9A30:	mov     eax, [rbp+result]
9A33:	mov     rbx, [rbp+var_8]
9A37:	leave
9A38:	retn
9A39:	endbr64
9A3D:	push    rbp
9A3E:	mov     rbp, rsp
9A41:	sub     rsp, 20h
9A45:	mov     [rbp+string], rdi
9A49:	mov     [rbp+length], rsi
9A4D:	mov     [rbp+i], 0
9A55:	jmp     short loc_9A99
9A57:	call    ___ctype_b_loc
9A5C:	mov     rdx, [rax]
9A5F:	mov     rcx, [rbp+string]
9A63:	mov     rax, [rbp+i]
9A67:	add     rax, rcx
9A6A:	movzx   eax, byte ptr [rax]
9A6D:	movsx   rax, al
9A71:	add     rax, rax
9A74:	add     rax, rdx
9A77:	movzx   eax, word ptr [rax]
9A7A:	movzx   eax, ax
9A7D:	and     eax, 4000h
9A82:	test    eax, eax
9A84:	jnz     short loc_9A94
9A86:	mov     rdx, [rbp+string]
9A8A:	mov     rax, [rbp+i]
9A8E:	add     rax, rdx
9A91:	mov     byte ptr [rax], 3Fh ; '?'
9A94:	add     [rbp+i], 1
9A99:	mov     rax, [rbp+i]
9A9D:	cmp     rax, [rbp+length]
9AA1:	jb      short loc_9A57
9AA3:	nop
9AA4:	nop
9AA5:	leave
9AA6:	retn
9AA7:	endbr64
9AAB:	push    rbp
9AAC:	mov     rbp, rsp
9AAF:	sub     rsp, 20h
9AB3:	mov     [rbp+string], rdi
9AB7:	mov     [rbp+length], rsi
9ABB:	mov     [rbp+i], 0
9AC3:	jmp     loc_9C1D
9AC8:	call    ___ctype_b_loc
9ACD:	mov     rdx, [rax]
9AD0:	mov     rcx, [rbp+string]
9AD4:	mov     rax, [rbp+i]
9AD8:	add     rax, rcx
9ADB:	movzx   eax, byte ptr [rax]
9ADE:	movsx   rax, al
9AE2:	add     rax, rax
9AE5:	add     rax, rdx
9AE8:	movzx   eax, word ptr [rax]
9AEB:	movzx   eax, ax
9AEE:	and     eax, 8
9AF1:	test    eax, eax
9AF3:	jnz     loc_9C18
9AF9:	mov     rdx, [rbp+string]
9AFD:	mov     rax, [rbp+i]
9B01:	add     rax, rdx
9B04:	movzx   eax, byte ptr [rax]
9B07:	cmp     al, 2Eh ; '.'
9B09:	jz      loc_9C18
9B0F:	mov     rdx, [rbp+string]
9B13:	mov     rax, [rbp+i]
9B17:	add     rax, rdx
9B1A:	movzx   eax, byte ptr [rax]
9B1D:	cmp     al, 2Dh ; '-'
9B1F:	jz      loc_9C18
9B25:	mov     rdx, [rbp+string]
9B29:	mov     rax, [rbp+i]
9B2D:	add     rax, rdx
9B30:	movzx   eax, byte ptr [rax]
9B33:	cmp     al, 2Bh ; '+'
9B35:	jz      loc_9C18
9B3B:	mov     rdx, [rbp+string]
9B3F:	mov     rax, [rbp+i]
9B43:	add     rax, rdx
9B46:	movzx   eax, byte ptr [rax]
9B49:	cmp     al, 3Dh ; '='
9B4B:	jz      loc_9C18
9B51:	mov     rdx, [rbp+string]
9B55:	mov     rax, [rbp+i]
9B59:	add     rax, rdx
9B5C:	movzx   eax, byte ptr [rax]
9B5F:	cmp     al, 7Eh ; '~'
9B61:	jz      loc_9C18
9B67:	mov     rdx, [rbp+string]
9B6B:	mov     rax, [rbp+i]
9B6F:	add     rax, rdx
9B72:	movzx   eax, byte ptr [rax]
9B75:	cmp     al, 5Eh ; '^'
9B77:	jz      loc_9C18
9B7D:	mov     rdx, [rbp+string]
9B81:	mov     rax, [rbp+i]
9B85:	add     rax, rdx
9B88:	movzx   eax, byte ptr [rax]
9B8B:	cmp     al, 25h ; '%'
9B8D:	jz      loc_9C18
9B93:	mov     rdx, [rbp+string]
9B97:	mov     rax, [rbp+i]
9B9B:	add     rax, rdx
9B9E:	movzx   eax, byte ptr [rax]
9BA1:	cmp     al, 40h ; '@'
9BA3:	jz      short loc_9C18
9BA5:	mov     rdx, [rbp+string]
9BA9:	mov     rax, [rbp+i]
9BAD:	add     rax, rdx
9BB0:	movzx   eax, byte ptr [rax]
9BB3:	cmp     al, 2Fh ; '/'
9BB5:	jz      short loc_9C18
9BB7:	mov     rdx, [rbp+string]
9BBB:	mov     rax, [rbp+i]
9BBF:	add     rax, rdx
9BC2:	movzx   eax, byte ptr [rax]
9BC5:	cmp     al, 3Ah ; ':'
9BC7:	jz      short loc_9C18
9BC9:	mov     rdx, [rbp+string]
9BCD:	mov     rax, [rbp+i]
9BD1:	add     rax, rdx
9BD4:	movzx   eax, byte ptr [rax]
9BD7:	cmp     al, 7Bh ; '{'
9BD9:	jz      short loc_9C18
9BDB:	mov     rdx, [rbp+string]
9BDF:	mov     rax, [rbp+i]
9BE3:	add     rax, rdx
9BE6:	movzx   eax, byte ptr [rax]
9BE9:	cmp     al, 7Dh ; '}'
9BEB:	jz      short loc_9C18
9BED:	mov     rdx, [rbp+string]
9BF1:	mov     rax, [rbp+i]
9BF5:	add     rax, rdx
9BF8:	movzx   eax, byte ptr [rax]
9BFB:	cmp     al, 2Ch ; ','
9BFD:	jz      short loc_9C18
9BFF:	mov     rdx, [rbp+string]
9C03:	mov     rax, [rbp+i]
9C07:	add     rax, rdx
9C0A:	movzx   eax, byte ptr [rax]
9C0D:	cmp     al, 5Fh ; '_'
9C0F:	jz      short loc_9C18
9C11:	mov     eax, 1
9C16:	jmp     short locret_9C30
9C18:	add     [rbp+i], 1
9C1D:	mov     rax, [rbp+i]
9C21:	cmp     rax, [rbp+length]
9C25:	jb      loc_9AC8
9C2B:	mov     eax, 0
9C30:	leave
9C31:	retn
9C32:	endbr64
9C36:	push    rbp
9C37:	mov     rbp, rsp
9C3A:	sub     rsp, 20h
9C3E:	mov     [rbp+cmd], rdi
9C42:	mov     rax, [rbp+cmd]
9C46:	mov     rdi, rax; s
9C49:	call    _strlen
9C4E:	sub     eax, 1
9C51:	mov     [rbp+i], eax
9C54:	jmp     short loc_9CA4
9C56:	mov     eax, [rbp+i]
9C59:	movsxd  rdx, eax
9C5C:	mov     rax, [rbp+cmd]
9C60:	add     rax, rdx
9C63:	movzx   eax, byte ptr [rax]
9C66:	cmp     al, 26h ; '&'
9C68:	jnz     short loc_9C71
9C6A:	mov     eax, 1
9C6F:	jmp     short locret_9CAF
9C71:	mov     eax, [rbp+i]
9C74:	movsxd  rdx, eax
9C77:	mov     rax, [rbp+cmd]
9C7B:	add     rax, rdx
9C7E:	movzx   eax, byte ptr [rax]
9C81:	cmp     al, 20h ; ' '
9C83:	jz      short loc_9CA0
9C85:	mov     eax, [rbp+i]
9C88:	movsxd  rdx, eax
9C8B:	mov     rax, [rbp+cmd]
9C8F:	add     rax, rdx
9C92:	movzx   eax, byte ptr [rax]
9C95:	cmp     al, 9
9C97:	jz      short loc_9CA0
9C99:	mov     eax, 0
9C9E:	jmp     short locret_9CAF
9CA0:	sub     [rbp+i], 1
9CA4:	cmp     [rbp+i], 0
9CA8:	jns     short loc_9C56
9CAA:	mov     eax, 0
9CAF:	leave
9CB0:	retn
9CB1:	endbr64
9CB5:	push    rbp
9CB6:	mov     rbp, rsp
9CB9:	mov     [rbp+cmd], rdi
9CBD:	jmp     short loc_9CE1
9CBF:	mov     rax, [rbp+cmd]
9CC3:	movzx   eax, byte ptr [rax]
9CC6:	cmp     al, 20h ; ' '
9CC8:	jz      short loc_9CDC
9CCA:	mov     rax, [rbp+cmd]
9CCE:	movzx   eax, byte ptr [rax]
9CD1:	cmp     al, 3Bh ; ';'
9CD3:	jz      short loc_9CDC
9CD5:	mov     eax, 0
9CDA:	jmp     short loc_9CF1
9CDC:	add     [rbp+cmd], 1
9CE1:	mov     rax, [rbp+cmd]
9CE5:	movzx   eax, byte ptr [rax]
9CE8:	test    al, al
9CEA:	jnz     short loc_9CBF
9CEC:	mov     eax, 1
9CF1:	pop     rbp
9CF2:	retn
9CF3:	endbr64
9CF7:	push    rbp
9CF8:	mov     rbp, rsp
9CFB:	sub     rsp, 0B0h
9D02:	mov     rax, fs:28h
9D0B:	mov     [rbp+var_8], rax
9D0F:	xor     eax, eax
9D11:	mov     [rbp+previous], 0
9D1C:	mov     [rbp+fti_head1], 0
9D27:	lea     rsi, [rbp+contents]; dest
9D2B:	lea     rax, [rbp+pattern]
9D2F:	mov     ecx, 0; seek
9D34:	mov     edx, 3; fields
9D39:	mov     rdi, rax; var_name
9D3C:	call    configuration_getvarinfo
9D41:	movzx   eax, [rbp+pattern]
9D45:	test    al, al
9D47:	jz      loc_9E75
9D4D:	mov     rax, [rbp+contents]
9D51:	test    rax, rax
9D54:	jz      short loc_9D6A
9D56:	mov     rax, [rbp+contents]
9D5A:	mov     rdi, rax; colorname
9D5D:	call    tty_get_color_index
9D62:	mov     [rbp+foreground], eax
9D68:	jmp     short loc_9D74
9D6A:	mov     [rbp+foreground], 0FFFFFFFFh
9D74:	mov     rax, [rbp+contents+8]
9D78:	test    rax, rax
9D7B:	jz      short loc_9D91
9D7D:	mov     rax, [rbp+contents+8]
9D81:	mov     rdi, rax; colorname
9D84:	call    tty_get_color_index
9D89:	mov     [rbp+background], eax
9D8F:	jmp     short loc_9D9B
9D91:	mov     [rbp+background], 0FFFFFFFFh
9D9B:	mov     rax, [rbp+contents+10h]
9D9F:	test    rax, rax
9DA2:	jz      short loc_9DB8
9DA4:	mov     rax, [rbp+contents+10h]
9DA8:	mov     rdi, rax; colorname
9DAB:	call    tty_get_color_index
9DB0:	mov     [rbp+brightness], eax
9DB6:	jmp     short loc_9DC2
9DB8:	mov     [rbp+brightness], 0FFFFFFFFh
9DC2:	mov     edi, 20h ; ' '; n
9DC7:	call    xmalloc
9DCC:	mov     [rbp+fti], rax
9DD3:	cmp     [rbp+fti_head1], 0
9DDB:	jnz     short loc_9DFB
9DDD:	mov     rax, [rbp+fti]
9DE4:	mov     [rbp+previous], rax
9DEB:	mov     rax, [rbp+previous]
9DF2:	mov     [rbp+fti_head1], rax
9DF9:	jmp     short loc_9E0D
9DFB:	mov     rax, [rbp+previous]
9E02:	mov     rdx, [rbp+fti]
9E09:	mov     [rax+18h], rdx
9E0D:	lea     rax, [rbp+pattern]
9E11:	mov     rdi, rax; string
9E14:	call    xstrdup
9E19:	mov     rdx, [rbp+fti]
9E20:	mov     [rdx], rax
9E23:	mov     rax, [rbp+fti]
9E2A:	mov     edx, [rbp+foreground]
9E30:	mov     [rax+8], edx
9E33:	mov     rax, [rbp+fti]
9E3A:	mov     edx, [rbp+background]
9E40:	mov     [rax+0Ch], edx
9E43:	mov     rax, [rbp+fti]
9E4A:	mov     edx, [rbp+brightness]
9E50:	mov     [rax+10h], edx
9E53:	mov     rax, [rbp+fti]
9E5A:	mov     qword ptr [rax+18h], 0
9E62:	mov     rax, [rbp+fti]
9E69:	mov     [rbp+previous], rax
9E70:	jmp     loc_9D27
9E75:	nop
9E76:	cmp     [rbp+fti_head1], 0
9E7E:	jz      short loc_9EBC
9E80:	mov     rax, cs:fti_head
9E87:	test    rax, rax
9E8A:	jz      short loc_9EAE
9E8C:	mov     rdx, cs:fti_head
9E93:	mov     rax, [rbp+previous]
9E9A:	mov     [rax+18h], rdx
9E9E:	mov     rax, [rbp+fti_head1]
9EA5:	mov     cs:fti_head, rax
9EAC:	jmp     short loc_9EBC
9EAE:	mov     rax, [rbp+fti_head1]
9EB5:	mov     cs:fti_head, rax
9EBC:	nop
9EBD:	mov     rax, [rbp+var_8]
9EC1:	sub     rax, fs:28h
9ECA:	jz      short locret_9ED1
9ECC:	call    ___stack_chk_fail
9ED1:	leave
9ED2:	retn
9ED3:	endbr64
9ED7:	push    rbp
9ED8:	mov     rbp, rsp
9EDB:	sub     rsp, 10h
9EDF:	mov     [rbp+file_name], rdi
9EE3:	cmp     [rbp+file_name], 0
9EE8:	jnz     short loc_9EF1
9EEA:	mov     eax, 0
9EEF:	jmp     short locret_9F30
9EF1:	mov     rax, [rbp+file_name]
9EF5:	lea     rdx, modes; 'r'
9EFC:	mov     rsi, rdx; modes
9EFF:	mov     rdi, rax; filename
9F02:	call    _fopen
9F07:	mov     cs:fileptr, rax
9F0E:	mov     rax, cs:fileptr
9F15:	test    rax, rax
9F18:	jnz     short loc_9F21
9F1A:	mov     eax, 0
9F1F:	jmp     short locret_9F30
9F21:	mov     cs:sectionptr, 0FFFFFFFFh
9F2B:	mov     eax, 1
9F30:	leave
9F31:	retn
9F32:	endbr64
9F36:	push    rbp
9F37:	mov     rbp, rsp
9F3A:	mov     rax, cs:fileptr
9F41:	test    rax, rax
9F44:	jz      short loc_9F55
9F46:	mov     rax, cs:fileptr
9F4D:	mov     rdi, rax; stream
9F50:	call    _fclose
9F55:	nop
9F56:	pop     rbp
9F57:	retn
9F58:	endbr64
9F5C:	push    rbp
9F5D:	mov     rbp, rsp
9F60:	sub     rsp, 20h
9F64:	mov     rax, cs:fileptr
9F6B:	mov     rdx, rax; stream
9F6E:	mov     esi, 400h; n
9F73:	lea     rax, line
9F7A:	mov     rdi, rax; s
9F7D:	call    _fgets
9F82:	test    rax, rax
9F85:	jnz     short loc_9F91
9F87:	mov     eax, 0
9F8C:	jmp     locret_A04A
9F91:	lea     rax, line
9F98:	mov     rdi, rax; s
9F9B:	call    _strlen
9FA0:	mov     [rbp+len], rax
9FA4:	cmp     [rbp+len], 3FFh
9FAC:	jnz     short loc_9FF3
9FAE:	mov     rdx, cs:g_program
9FB5:	mov     rax, cs:stderr@GLIBC_2_2_5
9FBC:	lea     rcx, aSConfiguration_0; '%s: configuration: line too long. Trunc'...
9FC3:	mov     rsi, rcx; format
9FC6:	mov     rdi, rax; stream
9FC9:	mov     eax, 0
9FCE:	call    _fprintf
9FD3:	mov     rax, cs:fileptr
9FDA:	mov     rdi, rax; stream
9FDD:	call    _fgetc
9FE2:	mov     [rbp+c], eax
9FE5:	cmp     [rbp+c], 0Ah
9FE9:	jz      short loc_9FF3
9FEB:	cmp     [rbp+c], 0FFFFFFFFh
9FEF:	jz      short loc_9FF3
9FF1:	jmp     short loc_9FD3
9FF3:	mov     esi, 23h ; '#'; c
9FF8:	lea     rax, line
9FFF:	mov     rdi, rax; s
A002:	call    _strchr
A007:	mov     [rbp+comment], rax
A00B:	cmp     [rbp+comment], 0
A010:	jz      short loc_A01B
A012:	mov     rax, [rbp+comment]
A016:	mov     byte ptr [rax], 0
A019:	jmp     short loc_A045
A01B:	mov     rax, [rbp+len]
A01F:	lea     rdx, [rax-1]
A023:	lea     rax, line
A02A:	movzx   eax, byte ptr [rdx+rax]
A02E:	cmp     al, 0Ah
A030:	jnz     short loc_A045
A032:	mov     rax, [rbp+len]
A036:	lea     rdx, [rax-1]
A03A:	lea     rax, line
A041:	mov     byte ptr [rdx+rax], 0
A045:	mov     eax, 1
A04A:	leave
A04B:	retn
A04C:	endbr64
A050:	push    rbp
A051:	mov     rbp, rsp
A054:	sub     rsp, 10h
A058:	mov     [rbp+section_name], rdi
A05C:	mov     rax, cs:fileptr
A063:	mov     edx, 0; whence
A068:	mov     esi, 0; off
A06D:	mov     rdi, rax; stream
A070:	call    _fseek
A075:	jmp     short loc_A0AE
A077:	mov     rax, [rbp+section_name]
A07B:	lea     rdx, line
A082:	mov     rsi, rdx; s2
A085:	mov     rdi, rax; s1
A088:	call    _strcmp
A08D:	test    eax, eax
A08F:	jnz     short loc_A0AE
A091:	mov     rax, cs:fileptr
A098:	mov     rdi, rax; stream
A09B:	call    _ftell
A0A0:	mov     cs:sectionptr, eax
A0A6:	mov     eax, cs:sectionptr
A0AC:	jmp     short locret_A0CC
A0AE:	mov     eax, 0
A0B3:	call    configuration_getline
A0B8:	test    eax, eax
A0BA:	jnz     short loc_A077
A0BC:	mov     cs:sectionptr, 0FFFFFFFFh
A0C6:	mov     eax, cs:sectionptr
A0CC:	leave
A0CD:	retn
A0CE:	endbr64
A0D2:	push    rbp
A0D3:	mov     rbp, rsp
A0D6:	push    rbx
A0D7:	sub     rsp, 458h
A0DE:	mov     [rbp+s1], rdi
A0E5:	mov     [rbp+dest], rsi
A0EC:	mov     [rbp+fields], edx
A0F2:	mov     [rbp+seek], ecx
A0F8:	mov     rax, fs:28h
A101:	mov     [rbp+var_18], rax
A105:	xor     eax, eax
A107:	cmp     [rbp+seek], 0
A10E:	jz      short loc_A130
A110:	mov     eax, cs:sectionptr
A116:	movsxd  rcx, eax
A119:	mov     rax, cs:fileptr
A120:	mov     edx, 0; whence
A125:	mov     rsi, rcx; off
A128:	mov     rdi, rax; stream
A12B:	call    _fseek
A130:	cmp     [rbp+fields], 1
A137:	jnz     short loc_A14C
A139:	mov     rax, [rbp+dest]
A140:	mov     qword ptr [rax], 0
A147:	jmp     loc_A503
A14C:	mov     eax, [rbp+fields]
A152:	cdqe
A154:	lea     rdx, ds:0[rax*8]; n
A15C:	mov     rax, [rbp+dest]
A163:	mov     esi, 0; c
A168:	mov     rdi, rax; s
A16B:	call    _memset
A170:	jmp     loc_A503
A175:	mov     [rbp+buf], 0
A17C:	lea     rax, [rbp+buf]
A183:	mov     rdx, rax
A186:	lea     rax, aS; '%s'
A18D:	mov     rsi, rax
A190:	lea     rax, line
A197:	mov     rdi, rax
A19A:	mov     eax, 0
A19F:	call    ___isoc99_sscanf
A1A4:	cmp     [rbp+seek], 0
A1AB:	jnz     short loc_A1B4
A1AD:	mov     [rbp+buf+20h], 0
A1B4:	call    ___ctype_b_loc
A1B9:	mov     rdx, [rax]
A1BC:	movzx   eax, [rbp+buf]
A1C3:	movsx   rax, al
A1C7:	add     rax, rax
A1CA:	add     rax, rdx
A1CD:	movzx   eax, word ptr [rax]
A1D0:	movzx   eax, ax
A1D3:	and     eax, 4000h
A1D8:	test    eax, eax
A1DA:	jz      loc_A535
A1E0:	cmp     [rbp+seek], 0
A1E7:	jz      short loc_A20A
A1E9:	lea     rdx, [rbp+buf]
A1F0:	mov     rax, [rbp+s1]
A1F7:	mov     rsi, rdx; s2
A1FA:	mov     rdi, rax; s1
A1FD:	call    _strcmp
A202:	test    eax, eax
A204:	jnz     loc_A503
A20A:	mov     esi, 3Dh ; '='; c
A20F:	lea     rax, line
A216:	mov     rdi, rax; s
A219:	call    _strchr
A21E:	mov     [rbp+ptr], rax
A225:	cmp     [rbp+ptr], 0
A22D:	jz      loc_A32C
A233:	add     [rbp+ptr], 1
A23B:	mov     rax, [rbp+ptr]
A242:	movzx   eax, byte ptr [rax]
A245:	test    al, al
A247:	jz      loc_A32C
A24D:	mov     rax, [rbp+dest]
A254:	mov     rdx, [rbp+ptr]
A25B:	mov     [rax], rdx
A25E:	mov     [rbp+fld], 1
A268:	jmp     short loc_A2DD
A26A:	mov     rax, [rbp+ptr]
A271:	movzx   eax, byte ptr [rax]
A274:	cmp     al, 3Bh ; ';'
A276:	jnz     short loc_A2D5
A278:	mov     rax, [rbp+ptr]
A27F:	mov     byte ptr [rax], 0
A282:	mov     rax, [rbp+ptr]
A289:	add     rax, 1
A28D:	movzx   eax, byte ptr [rax]
A290:	test    al, al
A292:	jz      short loc_A2CE
A294:	mov     rax, [rbp+ptr]
A29B:	add     rax, 1
A29F:	movzx   eax, byte ptr [rax]
A2A2:	cmp     al, 3Bh ; ';'
A2A4:	jz      short loc_A2CE
A2A6:	mov     eax, [rbp+fld]
A2AC:	cdqe
A2AE:	lea     rdx, ds:0[rax*8]
A2B6:	mov     rax, [rbp+dest]
A2BD:	add     rax, rdx
A2C0:	mov     rdx, [rbp+ptr]
A2C7:	add     rdx, 1
A2CB:	mov     [rax], rdx
A2CE:	add     [rbp+fld], 1
A2D5:	add     [rbp+ptr], 1
A2DD:	mov     rax, [rbp+ptr]
A2E4:	movzx   eax, byte ptr [rax]
A2E7:	test    al, al
A2E9:	jz      short loc_A2FD
A2EB:	mov     eax, [rbp+fld]
A2F1:	cmp     eax, [rbp+fields]
A2F7:	jl      loc_A26A
A2FD:	mov     rax, [rbp+ptr]
A304:	mov     esi, 3Bh ; ';'; c
A309:	mov     rdi, rax; s
A30C:	call    _strchr
A311:	mov     [rbp+ptr], rax
A318:	cmp     [rbp+ptr], 0
A320:	jz      short loc_A32C
A322:	mov     rax, [rbp+ptr]
A329:	mov     byte ptr [rax], 0
A32C:	mov     [rbp+fld], 0
A336:	jmp     loc_A4CD
A33B:	mov     eax, [rbp+fld]
A341:	cdqe
A343:	lea     rdx, ds:0[rax*8]
A34B:	mov     rax, [rbp+dest]
A352:	add     rax, rdx
A355:	mov     rax, [rax]
A358:	test    rax, rax
A35B:	jz      loc_A4C6
A361:	jmp     short loc_A387
A363:	mov     eax, [rbp+fld]
A369:	cdqe
A36B:	lea     rdx, ds:0[rax*8]
A373:	mov     rax, [rbp+dest]
A37A:	add     rax, rdx
A37D:	mov     rdx, [rax]
A380:	add     rdx, 1
A384:	mov     [rax], rdx
A387:	call    ___ctype_b_loc
A38C:	mov     rdx, [rax]
A38F:	mov     eax, [rbp+fld]
A395:	cdqe
A397:	lea     rcx, ds:0[rax*8]
A39F:	mov     rax, [rbp+dest]
A3A6:	add     rax, rcx
A3A9:	mov     rax, [rax]
A3AC:	movzx   eax, byte ptr [rax]
A3AF:	movsx   rax, al
A3B3:	add     rax, rax
A3B6:	add     rax, rdx
A3B9:	movzx   eax, word ptr [rax]
A3BC:	movzx   eax, ax
A3BF:	and     eax, 2000h
A3C4:	test    eax, eax
A3C6:	jnz     short loc_A363
A3C8:	mov     eax, [rbp+fld]
A3CE:	cdqe
A3D0:	lea     rdx, ds:0[rax*8]
A3D8:	mov     rax, [rbp+dest]
A3DF:	add     rax, rdx
A3E2:	mov     rbx, [rax]
A3E5:	mov     eax, [rbp+fld]
A3EB:	cdqe
A3ED:	lea     rdx, ds:0[rax*8]
A3F5:	mov     rax, [rbp+dest]
A3FC:	add     rax, rdx
A3FF:	mov     rax, [rax]
A402:	mov     rdi, rax; s
A405:	call    _strlen
A40A:	sub     rax, 1
A40E:	add     rax, rbx
A411:	mov     [rbp+tmp], rax
A418:	jmp     short loc_A422
A41A:	sub     [rbp+tmp], 1
A422:	call    ___ctype_b_loc
A427:	mov     rdx, [rax]
A42A:	mov     rax, [rbp+tmp]
A431:	movzx   eax, byte ptr [rax]
A434:	movsx   rax, al
A438:	add     rax, rax
A43B:	add     rax, rdx
A43E:	movzx   eax, word ptr [rax]
A441:	movzx   eax, ax
A444:	and     eax, 2000h
A449:	test    eax, eax
A44B:	jz      short loc_A473
A44D:	mov     eax, [rbp+fld]
A453:	cdqe
A455:	lea     rdx, ds:0[rax*8]
A45D:	mov     rax, [rbp+dest]
A464:	add     rax, rdx
A467:	mov     rax, [rax]
A46A:	cmp     [rbp+tmp], rax
A471:	jnb     short loc_A41A
A473:	mov     rax, [rbp+tmp]
A47A:	add     rax, 1
A47E:	mov     byte ptr [rax], 0
A481:	mov     eax, [rbp+fld]
A487:	cdqe
A489:	lea     rdx, ds:0[rax*8]
A491:	mov     rax, [rbp+dest]
A498:	add     rax, rdx
A49B:	mov     rax, [rax]
A49E:	movzx   eax, byte ptr [rax]
A4A1:	test    al, al
A4A3:	jnz     short loc_A4C6
A4A5:	mov     eax, [rbp+fld]
A4AB:	cdqe
A4AD:	lea     rdx, ds:0[rax*8]
A4B5:	mov     rax, [rbp+dest]
A4BC:	add     rax, rdx
A4BF:	mov     qword ptr [rax], 0
A4C6:	add     [rbp+fld], 1
A4CD:	mov     eax, [rbp+fld]
A4D3:	cmp     eax, [rbp+fields]
A4D9:	jl      loc_A33B
A4DF:	cmp     [rbp+seek], 0
A4E6:	jnz     short loc_A538
A4E8:	lea     rdx, [rbp+buf]
A4EF:	mov     rax, [rbp+s1]
A4F6:	mov     rsi, rdx; src
A4F9:	mov     rdi, rax; dest
A4FC:	call    _strcpy
A501:	jmp     short loc_A538
A503:	mov     eax, 0
A508:	call    configuration_getline
A50D:	test    eax, eax
A50F:	jz      short loc_A520
A511:	movzx   eax, cs:line
A518:	test    al, al
A51A:	jnz     loc_A175
A520:	cmp     [rbp+seek], 0
A527:	jnz     short loc_A539
A529:	mov     rax, [rbp+s1]
A530:	mov     byte ptr [rax], 0
A533:	jmp     short loc_A539
A535:	nop
A536:	jmp     short loc_A539
A538:	nop
A539:	mov     rax, [rbp+var_18]
A53D:	sub     rax, fs:28h
A546:	jz      short loc_A54D
A548:	call    ___stack_chk_fail
A54D:	mov     rbx, [rbp+var_8]
A551:	leave
A552:	retn
A553:	endbr64
A557:	push    rbp
A558:	mov     rbp, rsp
A55B:	mov     eax, cs:suspend_requested
A561:	test    eax, eax
A563:	jz      short loc_A5A0
A565:	mov     eax, 0
A56A:	call    hide
A56F:	call    _getpid
A574:	mov     esi, 13h; sig
A579:	mov     edi, eax; pid
A57B:	call    _kill
A580:	mov     cs:suspend_requested, 0
A58A:	mov     cs:refresh_requested, 0
A594:	mov     cs:alarm_requested, 0
A59E:	jmp     short loc_A5F3
A5A0:	mov     eax, cs:refresh_requested
A5A6:	test    eax, eax
A5A8:	jz      short loc_A5DE
A5AA:	mov     eax, 0
A5AF:	call    tty_defaults
A5B4:	mov     eax, 0
A5B9:	call    tty_io_clear
A5BE:	mov     edi, 1Ch; signum
A5C3:	call    refresh
A5C8:	mov     cs:refresh_requested, 0
A5D2:	mov     cs:alarm_requested, 0
A5DC:	jmp     short loc_A5F3
A5DE:	mov     eax, cs:alarm_requested
A5E4:	test    eax, eax
A5E6:	jz      short loc_A5F3
A5E8:	mov     cs:alarm_requested, 0
A5F2:	nop
A5F3:	pop     rbp
A5F4:	retn
A5F5:	endbr64
A5F9:	push    rbp
A5FA:	mov     rbp, rsp
A5FD:	sub     rsp, 10h
A601:	mov     [rbp+mode], edi
A604:	mov     eax, [rbp+mode]
A607:	mov     cs:signals_allowed, eax
A60D:	mov     eax, cs:signals_allowed
A613:	test    eax, eax
A615:	jz      short loc_A621
A617:	mov     eax, 0
A61C:	call    service_pending_signals
A621:	nop
A622:	leave
A623:	retn
A624:	endbr64
A628:	push    rbp
A629:	mov     rbp, rsp
A62C:	sub     rsp, 10h
A630:	mov     [rbp+signum], edi
A633:	mov     eax, cs:signals_allowed
A639:	test    eax, eax
A63B:	jz      short loc_A67D
A63D:	mov     eax, 0
A642:	call    tty_get_mode
A647:	cmp     eax, 1
A64A:	setz    al
A64D:	movzx   eax, al
A650:	mov     cs:refresh_at_SIGCONT, eax
A656:	mov     eax, 0
A65B:	call    hide
A660:	call    _getpid
A665:	mov     esi, 13h; sig
A66A:	mov     edi, eax; pid
A66C:	call    _kill
A671:	mov     cs:suspend_requested, 0
A67B:	jmp     short loc_A687
A67D:	mov     cs:suspend_requested, 1
A687:	mov     eax, [rbp+signum]
A68A:	mov     edi, eax; signum
A68C:	call    install_handler
A691:	nop
A692:	leave
A693:	retn
A694:	endbr64
A698:	push    rbp
A699:	mov     rbp, rsp
A69C:	sub     rsp, 10h
A6A0:	mov     [rbp+signum], edi
A6A3:	mov     eax, cs:signals_allowed
A6A9:	test    eax, eax
A6AB:	jz      short loc_A6D7
A6AD:	mov     eax, 0
A6B2:	call    tty_defaults
A6B7:	mov     eax, 0
A6BC:	call    tty_io_clear
A6C1:	mov     eax, [rbp+signum]
A6C4:	mov     edi, eax; signum
A6C6:	call    refresh
A6CB:	mov     cs:refresh_requested, 0
A6D5:	jmp     short loc_A6E1
A6D7:	mov     cs:refresh_requested, 1
A6E1:	mov     eax, [rbp+signum]
A6E4:	mov     edi, eax; signum
A6E6:	call    install_handler
A6EB:	nop
A6EC:	leave
A6ED:	retn
A6EE:	endbr64
A6F2:	push    rbp
A6F3:	mov     rbp, rsp
A6F6:	sub     rsp, 10h
A6FA:	mov     [rbp+signum], edi
A6FD:	mov     eax, cs:refresh_at_SIGCONT
A703:	test    eax, eax
A705:	jz      short loc_A71B
A707:	mov     eax, [rbp+signum]
A70A:	mov     edi, eax; signum
A70C:	call    refresh
A711:	mov     cs:refresh_requested, 0
A71B:	mov     eax, [rbp+signum]
A71E:	mov     edi, eax; signum
A720:	call    install_handler
A725:	nop
A726:	leave
A727:	retn
A728:	endbr64
A72C:	push    rbp
A72D:	mov     rbp, rsp
A730:	sub     rsp, 10h
A734:	mov     [rbp+signum], edi
A737:	mov     eax, cs:signals_allowed
A73D:	test    eax, eax
A73F:	jz      short loc_A771
A741:	mov     eax, 0
A746:	call    get_local_time
A74B:	mov     eax, [rax]
A74D:	test    eax, eax
A74F:	jnz     short loc_A75B
A751:	mov     eax, [rbp+signum]
A754:	mov     edi, eax
A756:	call    clock_refresh
A75B:	mov     eax, 0
A760:	call    tty_key_print_async
A765:	mov     cs:alarm_requested, 0
A76F:	jmp     short loc_A77B
A771:	mov     cs:alarm_requested, 1
A77B:	mov     eax, [rbp+signum]
A77E:	mov     edi, eax; signum
A780:	call    install_handler
A785:	mov     eax, 0
A78A:	call    get_local_time
A78F:	mov     edx, [rax]
A791:	mov     eax, 3Ch ; '<'
A796:	sub     eax, edx
A798:	mov     edi, eax; seconds
A79A:	call    _alarm
A79F:	nop
A7A0:	leave
A7A1:	retn
A7A2:	endbr64
A7A6:	push    rbp
A7A7:	mov     rbp, rsp
A7AA:	sub     rsp, 10h
A7AE:	mov     [rbp+signum], edi
A7B1:	mov     eax, [rbp+signum]
A7B4:	lea     rdx, panic
A7BB:	mov     rsi, rdx; handler
A7BE:	mov     edi, eax; sig
A7C0:	call    _signal
A7C5:	mov     cs:user_heart_attack, 1
A7CF:	nop
A7D0:	leave
A7D1:	retn
A7D2:	endbr64
A7D6:	push    rbp
A7D7:	mov     rbp, rsp
A7DA:	sub     rsp, 10h
A7DE:	mov     [rbp+signum], edi
A7E1:	cmp     [rbp+signum], 1Ch
A7E5:	jz      short loc_A833
A7E7:	cmp     [rbp+signum], 1Ch
A7EB:	jg      short loc_A85E
A7ED:	cmp     [rbp+signum], 14h
A7F1:	jz      short loc_A807
A7F3:	cmp     [rbp+signum], 14h
A7F7:	jg      short loc_A85E
A7F9:	cmp     [rbp+signum], 0Eh
A7FD:	jz      short loc_A849
A7FF:	cmp     [rbp+signum], 12h
A803:	jz      short loc_A81D
A805:	jmp     short loc_A85E
A807:	lea     rax, suspend
A80E:	mov     rsi, rax; handler
A811:	mov     edi, 14h; sig
A816:	call    _signal
A81B:	jmp     short loc_A85E
A81D:	lea     rax, resume
A824:	mov     rsi, rax; handler
A827:	mov     edi, 12h; sig
A82C:	call    _signal
A831:	jmp     short loc_A85E
A833:	lea     rax, window_change
A83A:	mov     rsi, rax; handler
A83D:	mov     edi, 1Ch; sig
A842:	call    _signal
A847:	jmp     short loc_A85E
A849:	lea     rax, time_change
A850:	mov     rsi, rax; handler
A853:	mov     edi, 0Eh; sig
A858:	call    _signal
A85D:	nop
A85E:	nop
A85F:	leave
A860:	retn
A861:	endbr64
A865:	push    rbp
A866:	mov     rbp, rsp
A869:	sub     rsp, 10h
A86D:	mov     [rbp+status], edi
A870:	cmp     [rbp+status], 1
A874:	jnz     short loc_A8AA
A876:	mov     eax, cs:job_control
A87C:	test    eax, eax
A87E:	jz      short loc_A894
A880:	mov     edi, 14h; signum
A885:	call    install_handler
A88A:	mov     edi, 12h; signum
A88F:	call    install_handler
A894:	mov     edi, 1Ch; signum
A899:	call    install_handler
A89E:	mov     edi, 0Eh; signum
A8A3:	call    install_handler
A8A8:	jmp     short loc_A8F0
A8AA:	mov     eax, cs:job_control
A8B0:	test    eax, eax
A8B2:	jz      short loc_A8D2
A8B4:	mov     esi, (offset dword_0+1); handler
A8B9:	mov     edi, 14h; sig
A8BE:	call    _signal
A8C3:	mov     esi, (offset dword_0+1); handler
A8C8:	mov     edi, 12h; sig
A8CD:	call    _signal
A8D2:	mov     esi, (offset dword_0+1); handler
A8D7:	mov     edi, 1Ch; sig
A8DC:	call    _signal
A8E1:	mov     esi, (offset dword_0+1); handler
A8E6:	mov     edi, 0Eh; sig
A8EB:	call    _signal
A8F0:	nop
A8F1:	leave
A8F2:	retn
A8F3:	endbr64
A8F7:	push    rbp
A8F8:	mov     rbp, rsp
A8FB:	mov     esi, (offset dword_0+1); handler
A900:	mov     edi, 14h; sig
A905:	call    _signal
A90A:	cmp     rax, 1
A90E:	setnz   al
A911:	movzx   eax, al
A914:	mov     cs:job_control, eax
A91A:	mov     esi, (offset dword_0+1); handler
A91F:	mov     edi, 12h; sig
A924:	call    _signal
A929:	mov     esi, (offset dword_0+1); handler
A92E:	mov     edi, 1Ch; sig
A933:	call    _signal
A938:	lea     rax, fatal_signal
A93F:	mov     rsi, rax; handler
A942:	mov     edi, 0Bh; sig
A947:	call    _signal
A94C:	lea     rax, fatal_signal
A953:	mov     rsi, rax; handler
A956:	mov     edi, 1; sig
A95B:	call    _signal
A960:	lea     rax, fatal_signal
A967:	mov     rsi, rax; handler
A96A:	mov     edi, 0Fh; sig
A96F:	call    _signal
A974:	mov     esi, (offset dword_0+1); handler
A979:	mov     edi, 3; sig
A97E:	call    _signal
A983:	lea     rax, panic
A98A:	mov     rsi, rax; handler
A98D:	mov     edi, 2; sig
A992:	call    _signal
A997:	nop
A998:	pop     rbp
A999:	retn
A99A:	endbr64
A99E:	push    rbp
A99F:	mov     rbp, rsp
A9A2:	sub     rsp, 30h
A9A6:	mov     [rbp+fd], edi
A9A9:	mov     [rbp+buf], rsi
A9AD:	mov     [rbp+count], rdx
A9B1:	call    ___errno_location
A9B6:	mov     eax, [rax]
A9B8:	mov     [rbp+old_errno], eax
A9BB:	cmp     [rbp+count], 0
A9C0:	jnz     short loc_A9C8
A9C2:	mov     rax, [rbp+count]
A9C6:	jmp     short locret_A9FF
A9C8:	call    ___errno_location
A9CD:	mov     edx, [rbp+old_errno]
A9D0:	mov     [rax], edx
A9D2:	mov     rdx, [rbp+count]; nbytes
A9D6:	mov     rcx, [rbp+buf]
A9DA:	mov     eax, [rbp+fd]
A9DD:	mov     rsi, rcx; buf
A9E0:	mov     edi, eax; fd
A9E2:	call    read
A9E7:	mov     [rbp+chars], eax
A9EA:	cmp     [rbp+chars], 0
A9EE:	jns     short loc_A9FC
A9F0:	call    ___errno_location
A9F5:	mov     eax, [rax]
A9F7:	cmp     eax, 4
A9FA:	jz      short loc_A9C8
A9FC:	mov     eax, [rbp+chars]
A9FF:	leave
AA00:	retn
AA01:	endbr64
AA05:	push    rbp
AA06:	mov     rbp, rsp
AA09:	sub     rsp, 30h
AA0D:	mov     [rbp+fd], edi
AA10:	mov     [rbp+buf], rsi
AA14:	mov     [rbp+count], rdx
AA18:	call    ___errno_location
AA1D:	mov     eax, [rax]
AA1F:	mov     [rbp+old_errno], eax
AA22:	cmp     [rbp+count], 0
AA27:	jnz     short loc_AA2F
AA29:	mov     rax, [rbp+count]
AA2D:	jmp     short locret_AA66
AA2F:	call    ___errno_location
AA34:	mov     edx, [rbp+old_errno]
AA37:	mov     [rax], edx
AA39:	mov     rdx, [rbp+count]; n
AA3D:	mov     rcx, [rbp+buf]
AA41:	mov     eax, [rbp+fd]
AA44:	mov     rsi, rcx; buf
AA47:	mov     edi, eax; fd
AA49:	call    write
AA4E:	mov     [rbp+chars], eax
AA51:	cmp     [rbp+chars], 0
AA55:	jns     short loc_AA63
AA57:	call    ___errno_location
AA5C:	mov     eax, [rax]
AA5E:	cmp     eax, 4
AA61:	jz      short loc_AA2F
AA63:	mov     eax, [rbp+chars]
AA66:	leave
AA67:	retn
AA68:	endbr64
AA6C:	push    rbp
AA6D:	mov     rbp, rsp
AA70:	sub     rsp, 30h
AA74:	mov     [rbp+path], rdi
AA78:	mov     [rbp+buf], rsi
AA7C:	mov     [rbp+size], rdx
AA80:	call    ___errno_location
AA85:	mov     eax, [rax]
AA87:	mov     [rbp+old_errno], eax
AA8A:	cmp     [rbp+size], 0
AA8F:	jnz     short loc_AA97
AA91:	mov     rax, [rbp+size]
AA95:	jmp     short locret_AAD0
AA97:	call    ___errno_location
AA9C:	mov     edx, [rbp+old_errno]
AA9F:	mov     [rax], edx
AAA1:	mov     rdx, [rbp+size]; len
AAA5:	mov     rcx, [rbp+buf]
AAA9:	mov     rax, [rbp+path]
AAAD:	mov     rsi, rcx; buf
AAB0:	mov     rdi, rax; path
AAB3:	call    _readlink
AAB8:	mov     [rbp+chars], eax
AABB:	cmp     [rbp+chars], 0
AABF:	jns     short loc_AACD
AAC1:	call    ___errno_location
AAC6:	mov     eax, [rax]
AAC8:	cmp     eax, 4
AACB:	jz      short loc_AA97
AACD:	mov     eax, [rbp+chars]
AAD0:	leave
AAD1:	retn
AAD2:	endbr64
AAD6:	push    rbp
AAD7:	mov     rbp, rsp
AADA:	sub     rsp, 20h
AADE:	mov     [rbp+filename], rdi
AAE2:	mov     [rbp+size], 64h ; 'd'
AAE9:	mov     eax, [rbp+size]
AAEC:	cdqe
AAEE:	mov     rdi, rax; n
AAF1:	call    xmalloc
AAF6:	mov     [rbp+buffer], rax
AAFA:	mov     eax, [rbp+size]
AAFD:	movsxd  rdx, eax; size
AB00:	mov     rcx, [rbp+buffer]
AB04:	mov     rax, [rbp+filename]
AB08:	mov     rsi, rcx; buf
AB0B:	mov     rdi, rax; path
AB0E:	mov     eax, 0
AB13:	call    __xreadlink
AB18:	mov     [rbp+nchars], eax
AB1B:	mov     eax, [rbp+nchars]
AB1E:	cmp     eax, [rbp+size]
AB21:	jge     short loc_AB34
AB23:	mov     rax, [rbp+buffer]
AB27:	mov     rdi, rax; pointer
AB2A:	call    xfree
AB2F:	mov     eax, [rbp+nchars]
AB32:	jmp     short locret_AB45
AB34:	mov     rax, [rbp+buffer]
AB38:	mov     rdi, rax; pointer
AB3B:	call    xfree
AB40:	shl     [rbp+size], 1
AB43:	jmp     short loc_AAE9
AB45:	leave
AB46:	retn
AB47:	endbr64
AB4B:	push    rbp
AB4C:	mov     rbp, rsp
AB4F:	sub     rsp, 20h
AB53:	mov     [rbp+filedes], edi
AB56:	mov     [rbp+buf], rsi
AB5A:	call    ___errno_location
AB5F:	mov     eax, [rax]
AB61:	mov     [rbp+old_errno], eax
AB64:	call    ___errno_location
AB69:	mov     edx, [rbp+old_errno]
AB6C:	mov     [rax], edx
AB6E:	mov     rdx, [rbp+buf]
AB72:	mov     eax, [rbp+filedes]
AB75:	mov     rsi, rdx; buf
AB78:	mov     edi, eax; fd
AB7A:	call    _fstat
AB7F:	mov     [rbp+result], eax
AB82:	cmp     [rbp+result], 0
AB86:	jns     short loc_AB94
AB88:	call    ___errno_location
AB8D:	mov     eax, [rax]
AB8F:	cmp     eax, 4
AB92:	jz      short loc_AB64
AB94:	mov     eax, [rbp+result]
AB97:	leave
AB98:	retn
AB99:	endbr64
AB9D:	push    rbp
AB9E:	mov     rbp, rsp
ABA1:	sub     rsp, 20h
ABA5:	mov     [rbp+filename], rdi
ABA9:	mov     [rbp+buf], rsi
ABAD:	call    ___errno_location
ABB2:	mov     eax, [rax]
ABB4:	mov     [rbp+old_errno], eax
ABB7:	call    ___errno_location
ABBC:	mov     edx, [rbp+old_errno]
ABBF:	mov     [rax], edx
ABC1:	mov     rdx, [rbp+buf]
ABC5:	mov     rax, [rbp+filename]
ABC9:	mov     rsi, rdx; buf
ABCC:	mov     rdi, rax; file
ABCF:	call    _stat
ABD4:	mov     [rbp+result], eax
ABD7:	cmp     [rbp+result], 0
ABDB:	jns     short loc_ABE9
ABDD:	call    ___errno_location
ABE2:	mov     eax, [rax]
ABE4:	cmp     eax, 4
ABE7:	jz      short loc_ABB7
ABE9:	mov     eax, [rbp+result]
ABEC:	leave
ABED:	retn
ABEE:	endbr64
ABF2:	push    rbp
ABF3:	mov     rbp, rsp
ABF6:	sub     rsp, 20h
ABFA:	mov     [rbp+filename], rdi
ABFE:	mov     [rbp+buf], rsi
AC02:	call    ___errno_location
AC07:	mov     eax, [rax]
AC09:	mov     [rbp+old_errno], eax
AC0C:	call    ___errno_location
AC11:	mov     edx, [rbp+old_errno]
AC14:	mov     [rax], edx
AC16:	mov     rdx, [rbp+buf]
AC1A:	mov     rax, [rbp+filename]
AC1E:	mov     rsi, rdx; buf
AC21:	mov     rdi, rax; file
AC24:	call    _lstat
AC29:	mov     [rbp+result], eax
AC2C:	cmp     [rbp+result], 0
AC30:	jns     short loc_AC3E
AC32:	call    ___errno_location
AC37:	mov     eax, [rax]
AC39:	cmp     eax, 4
AC3C:	jz      short loc_AC0C
AC3E:	mov     eax, [rbp+result]
AC41:	leave
AC42:	retn
AC43:	endbr64
AC47:	push    rbp
AC48:	mov     rbp, rsp
AC4B:	sub     rsp, 20h
AC4F:	call    ___errno_location
AC54:	mov     dword ptr [rax], 0
AC5A:	mov     [rbp+size], 40h ; '@'
AC62:	mov     rax, [rbp+size]
AC66:	mov     rdi, rax; n
AC69:	call    xmalloc
AC6E:	mov     [rbp+cwd], rax
AC72:	jmp     short loc_AC9B
AC74:	add     [rbp+size], 40h ; '@'
AC79:	mov     rdx, [rbp+size]
AC7D:	mov     rax, [rbp+cwd]
AC81:	mov     rsi, rdx; n
AC84:	mov     rdi, rax; p
AC87:	call    xrealloc
AC8C:	mov     [rbp+cwd], rax
AC90:	call    ___errno_location
AC95:	mov     dword ptr [rax], 0
AC9B:	mov     rdx, [rbp+size]
AC9F:	mov     rax, [rbp+cwd]
ACA3:	mov     rsi, rdx; size
ACA6:	mov     rdi, rax; buf
ACA9:	call    _getcwd
ACAE:	mov     [rbp+result], rax
ACB2:	cmp     [rbp+result], 0
ACB7:	jnz     short loc_ACC5
ACB9:	call    ___errno_location
ACBE:	mov     eax, [rax]
ACC0:	cmp     eax, 22h ; '''
ACC3:	jz      short loc_AC74
ACC5:	cmp     [rbp+result], 0
ACCA:	jnz     short loc_ACDF
ACCC:	mov     rax, [rbp+cwd]
ACD0:	mov     rdi, rax; pointer
ACD3:	call    xfree
ACD8:	mov     eax, 0
ACDD:	jmp     short locret_ACE3
ACDF:	mov     rax, [rbp+cwd]
ACE3:	leave
ACE4:	retn
ACE5:	endbr64
ACE9:	push    rbp
ACEA:	mov     rbp, rsp
ACED:	sub     rsp, 20h
ACF1:	mov     [rbp+name], rdi
ACF5:	mov     rax, [rbp+name]
ACF9:	mov     esi, 2Fh ; '/'; c
ACFE:	mov     rdi, rax; s
AD01:	call    _strrchr
AD06:	mov     [rbp+ptr], rax
AD0A:	cmp     [rbp+ptr], 0
AD0F:	jnz     short loc_AD22
AD11:	lea     rax, string; '.'
AD18:	mov     rdi, rax; string
AD1B:	call    xstrdup
AD20:	jmp     short locret_AD4B
AD22:	mov     rax, [rbp+name]
AD26:	mov     rdi, rax; string
AD29:	call    xstrdup
AD2E:	mov     [rbp+ptr2], rax
AD32:	mov     rax, [rbp+ptr]
AD36:	sub     rax, [rbp+name]
AD3A:	mov     rdx, rax
AD3D:	mov     rax, [rbp+ptr2]
AD41:	add     rax, rdx
AD44:	mov     byte ptr [rax], 30h ; '0'
AD47:	mov     rax, [rbp+ptr2]
AD4B:	leave
AD4C:	retn
AD4D:	endbr64
AD51:	push    rbp
AD52:	mov     rbp, rsp
AD55:	sub     rsp, 20h
AD59:	mov     [rbp+name], rdi
AD5D:	mov     rax, [rbp+name]
AD61:	mov     rdi, rax; s
AD64:	call    _strlen
AD69:	mov     [rbp+len], rax
AD6D:	mov     rax, [rbp+len]
AD71:	lea     rdx, [rax-1]
AD75:	mov     rax, [rbp+name]
AD79:	add     rax, rdx
AD7C:	movzx   eax, byte ptr [rax]
AD7F:	cmp     al, 2Fh ; '/'
AD81:	jnz     short loc_AD95
AD83:	mov     rax, [rbp+len]
AD87:	lea     rdx, [rax-1]
AD8B:	mov     rax, [rbp+name]
AD8F:	add     rax, rdx
AD92:	mov     byte ptr [rax], 0
AD95:	mov     rax, [rbp+name]
AD99:	mov     esi, 2Fh ; '/'; c
AD9E:	mov     rdi, rax; s
ADA1:	call    _strrchr
ADA6:	mov     [rbp+base], rax
ADAA:	cmp     [rbp+base], 0
ADAF:	jz      short loc_ADBB
ADB1:	mov     rax, [rbp+base]
ADB5:	add     rax, 1
ADB9:	jmp     short locret_ADBF
ADBB:	mov     rax, [rbp+name]
ADBF:	leave
ADC0:	retn
ADC1:	endbr64
ADC5:	push    rbp
ADC6:	mov     rbp, rsp
ADC9:	lea     rax, aVirtualMemoryE; 'virtual memory exhausted'
ADD0:	mov     rdi, rax; postmsg
ADD3:	call    fatal
ADDD:	endbr64
ADE1:	push    rbp
ADE2:	mov     rbp, rsp
ADE5:	sub     rsp, 10h
ADE9:	mov     [rbp+pointer], rdi
ADED:	cmp     [rbp+pointer], 0
ADF2:	jz      short loc_AE02
ADF4:	mov     rax, [rbp+pointer]
ADF8:	mov     rdi, rax; ptr
ADFB:	call    _free
AE00:	jmp     short loc_AE11
AE02:	lea     rax, aXfreeTryingToF; 'xfree: trying to free NULL'
AE09:	mov     rdi, rax; postmsg
AE0C:	call    fatal
AE11:	nop
AE12:	leave
AE13:	retn
AE20:	endbr64
AE24:	push    rbx
AE25:	mov     rbx, n
AE28:	call    _malloc
AE2D:	test    p, p
AE30:	jnz     short loc_AE37
AE32:	test    n, n
AE35:	jnz     short loc_AE39
AE37:	pop     n
AE38:	retn
AE39:	call    xalloc_die
AE40:	endbr64
AE44:	push    rbx
AE45:	mov     rbx, n
AE48:	call    _realloc
AE4D:	test    p, p
AE50:	jnz     short loc_AE57
AE52:	test    n, n
AE55:	jnz     short loc_AE59
AE57:	pop     n
AE58:	retn
AE59:	call    xalloc_die
AE60:	endbr64
AE64:	push    rbx
AE65:	mov     rax, pn
AE68:	mov     pn, [pn]
AE6B:	test    p, p
AE6E:	jz      short loc_AEA0
AE70:	mov     rdx, 0AAAAAAAAAAAAAAA9h
AE7A:	cmp     rsi, rdx
AE7D:	ja      short loc_AEB1
AE7F:	lea     rdx, [rsi+1]
AE83:	shr     rdx, 1
AE86:	add     rsi, rdx; size
AE89:	setnz   bl
AE8C:	mov     [pn], rsi
AE8F:	call    _realloc
AE94:	test    rax, rax
AE97:	jnz     short loc_AE9D
AE99:	test    bl, bl
AE9B:	jnz     short loc_AEB1
AE9D:	pop     rbx
AE9E:	retn
AEA0:	mov     ebx, 1
AEA5:	test    rsi, rsi
AEA8:	jnz     short loc_AE8C
AEAA:	mov     esi, 40h ; '@'
AEAF:	jmp     short loc_AE8C
AEB1:	call    xalloc_die
AEC0:	endbr64
AEC4:	push    rbx
AEC5:	mov     esi, 1; size
AECA:	mov     rbx, s
AECD:	call    _calloc
AED2:	test    rax, rax
AED5:	jnz     short loc_AEDC
AED7:	test    s, s
AEDA:	jnz     short loc_AEDE
AEDC:	pop     s
AEDD:	retn
AEDE:	call    xalloc_die
AEF0:	endbr64
AEF4:	sub     rsp, 8
AEF8:	call    _calloc
AEFD:	test    p, p
AF00:	jz      short loc_AF07
AF02:	add     rsp, 8
AF06:	retn
AF07:	call    xalloc_die
AF10:	endbr64
AF14:	push    r12
AF16:	mov     r12, s
AF19:	push    rbp
AF1A:	mov     rbp, p
AF1D:	mov     p, s; size
AF20:	sub     rsp, 8
AF24:	call    _malloc
AF29:	mov     rdi, rax; dest
AF2C:	test    rax, rax
AF2F:	jnz     short loc_AF36
AF31:	test    s, s
AF34:	jnz     short loc_AF48
AF36:	add     rsp, 8
AF3A:	mov     rdx, s; n
AF3D:	mov     rsi, p; src
AF40:	pop     p
AF41:	pop     s
AF43:	jmp     _memcpy
AF48:	call    xalloc_die
AF50:	endbr64
AF54:	push    r12
AF56:	push    rbp
AF57:	mov     rbp, string
AF5A:	sub     rsp, 8
AF5E:	call    _strlen
AF63:	lea     r12, [rax+1]
AF67:	mov     rdi, r12; size
AF6A:	call    _malloc
AF6F:	test    rax, rax
AF72:	jz      short loc_AF89
AF74:	add     rsp, 8
AF78:	mov     rdx, r12; n
AF7B:	mov     rsi, string; src
AF7E:	mov     rdi, rax; dest
AF81:	pop     string
AF82:	pop     r12
AF84:	jmp     _memcpy
AF89:	call    xalloc_die
AF90:	endbr64; _fini
AF94:	sub     rsp, 8
AF98:	add     rsp, 8
AF9C:	retn
10940:	extrn getenv:near
10948:	extrn free:near
10950:	extrn putchar:near
10958:	extrn tputs:near
10960:	extrn localtime:near
10968:	extrn __libc_start_main:near
10970:	extrn abort:near
10978:	extrn __errno_location:near
10980:	extrn strncmp:near
10988:	extrn strcpy:near
10990:	extrn toupper:near
10998:	extrn puts:near
109A0:	extrn isatty:near
109A8:	extrn readlink:near
109B0:	extrn getpid:near
109B8:	extrn fclose:near
109C0:	extrn tgoto:near
109C8:	extrn getpwuid:near
109D0:	extrn strlen:near
109D8:	extrn __stack_chk_fail:near
109E0:	extrn strchr:near
109E8:	extrn printf:near
109F0:	extrn strrchr:near
109F8:	extrn memset:near
10A00:	extrn geteuid:near
10A08:	extrn ioctl:near
10A10:	extrn getcwd:near
10A18:	extrn fgetc:near
10A20:	extrn alarm:near
10A28:	extrn close:near
10A30:	extrn lstat:near
10A38:	extrn memcmp:near
10A40:	extrn fgets:near
10A48:	extrn calloc:near
10A50:	extrn putenv:near
10A58:	extrn strcmp:near
10A60:	extrn signal:near
10A68:	extrn fprintf:near
10A70:	extrn ftell:near
10A78:	extrn stat_0:near
10A80:	extrn memcpy:near
10A88:	extrn kill:near
10A90:	extrn time:near
10A98:	extrn malloc:near
10AA0:	extrn fflush:near
10AA8:	extrn tgetnum:near
10AB0:	extrn __isoc99_sscanf:near
10AB8:	extrn fseek:near
10AC0:	extrn tgetflag:near
10AC8:	extrn tgetstr:near
10AD0:	extrn ttyname:near
10AD8:	extrn realloc:near
10AE0:	extrn setlocale:near
10AE8:	extrn cfgetospeed:near
10AF0:	extrn open64:near
10AF8:	extrn tcgetattr:near
10B00:	extrn tcsetattr:near
10B08:	extrn open:near
10B10:	extrn fopen:near
10B18:	extrn tcflow:near
10B20:	extrn getopt:near
10B28:	extrn atoi:near
10B30:	extrn strcat:near
10B38:	extrn sprintf:near
10B40:	extrn exit:near
10B48:	extrn fwrite:near
10B50:	extrn lseek64:near
10B58:	extrn tgetent:near
10B60:	extrn sleep:near
10B68:	extrn fstat:near
10B70:	extrn __ctype_b_loc:near
10B78:	extrn __imp_read:near
10B80:	extrn __imp___cxa_finalize:near ; weak
10B88:	extrn __imp_write:near
10B98:	extrn __gmon_start__:near ; weak
