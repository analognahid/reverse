4000:	endbr64; _init
4004:	sub     rsp, 8
4008:	mov     rax, cs:__gmon_start___ptr
400F:	test    rax, rax
4012:	jz      short loc_4016
4014:	call    rax ; __gmon_start__
4016:	add     rsp, 8
401A:	retn
4020:	push    cs:qword_2EC08
4026:	bnd jmp cs:qword_2EC10
4030:	endbr64
4034:	push    0
4039:	bnd jmp sub_4020
4040:	endbr64
4044:	push    1
4049:	bnd jmp sub_4020
4050:	endbr64
4054:	push    2
4059:	bnd jmp sub_4020
4060:	endbr64
4064:	push    3
4069:	bnd jmp sub_4020
4070:	endbr64
4074:	push    4
4079:	bnd jmp sub_4020
4080:	endbr64
4084:	push    5
4089:	bnd jmp sub_4020
4090:	endbr64
4094:	push    6
4099:	bnd jmp sub_4020
40A0:	endbr64
40A4:	push    7
40A9:	bnd jmp sub_4020
40B0:	endbr64
40B4:	push    8
40B9:	bnd jmp sub_4020
40C0:	endbr64
40C4:	push    9
40C9:	bnd jmp sub_4020
40D0:	endbr64
40D4:	push    0Ah
40D9:	bnd jmp sub_4020
40E0:	endbr64
40E4:	push    0Bh
40E9:	bnd jmp sub_4020
40F0:	endbr64
40F4:	push    0Ch
40F9:	bnd jmp sub_4020
4100:	endbr64
4104:	push    0Dh
4109:	bnd jmp sub_4020
4110:	endbr64
4114:	push    0Eh
4119:	bnd jmp sub_4020
4120:	endbr64
4124:	push    0Fh
4129:	bnd jmp sub_4020
4130:	endbr64
4134:	push    10h
4139:	bnd jmp sub_4020
4140:	endbr64
4144:	push    11h
4149:	bnd jmp sub_4020
4150:	endbr64
4154:	push    12h
4159:	bnd jmp sub_4020
4160:	endbr64
4164:	push    13h
4169:	bnd jmp sub_4020
4170:	endbr64
4174:	push    14h
4179:	bnd jmp sub_4020
4180:	endbr64
4184:	push    15h
4189:	bnd jmp sub_4020
4190:	endbr64
4194:	push    16h
4199:	bnd jmp sub_4020
41A0:	endbr64
41A4:	push    17h
41A9:	bnd jmp sub_4020
41B0:	endbr64
41B4:	push    18h
41B9:	bnd jmp sub_4020
41C0:	endbr64
41C4:	push    19h
41C9:	bnd jmp sub_4020
41D0:	endbr64
41D4:	push    1Ah
41D9:	bnd jmp sub_4020
41E0:	endbr64
41E4:	push    1Bh
41E9:	bnd jmp sub_4020
41F0:	endbr64
41F4:	push    1Ch
41F9:	bnd jmp sub_4020
4200:	endbr64
4204:	push    1Dh
4209:	bnd jmp sub_4020
4210:	endbr64
4214:	push    1Eh
4219:	bnd jmp sub_4020
4220:	endbr64
4224:	push    1Fh
4229:	bnd jmp sub_4020
4230:	endbr64
4234:	push    20h ; ' '
4239:	bnd jmp sub_4020
4240:	endbr64
4244:	push    21h ; '!'
4249:	bnd jmp sub_4020
4250:	endbr64
4254:	push    22h ; '''
4259:	bnd jmp sub_4020
4260:	endbr64
4264:	push    23h ; '#'
4269:	bnd jmp sub_4020
4270:	endbr64
4274:	push    24h ; '$'
4279:	bnd jmp sub_4020
4280:	endbr64
4284:	push    25h ; '%'
4289:	bnd jmp sub_4020
4290:	endbr64
4294:	push    26h ; '&'
4299:	bnd jmp sub_4020
42A0:	endbr64
42A4:	push    27h ; '''
42A9:	bnd jmp sub_4020
42B0:	endbr64
42B4:	push    28h ; '('
42B9:	bnd jmp sub_4020
42C0:	endbr64
42C4:	push    29h ; ')'
42C9:	bnd jmp sub_4020
42D0:	endbr64
42D4:	push    2Ah ; '*'
42D9:	bnd jmp sub_4020
42E0:	endbr64
42E4:	push    2Bh ; '+'
42E9:	bnd jmp sub_4020
42F0:	endbr64
42F4:	push    2Ch ; ','
42F9:	bnd jmp sub_4020
4300:	endbr64
4304:	push    2Dh ; '-'
4309:	bnd jmp sub_4020
4310:	endbr64
4314:	push    2Eh ; '.'
4319:	bnd jmp sub_4020
4320:	endbr64
4324:	push    2Fh ; '/'
4329:	bnd jmp sub_4020
4330:	endbr64
4334:	push    30h ; '0'
4339:	bnd jmp sub_4020
4340:	endbr64
4344:	push    31h ; '1'
4349:	bnd jmp sub_4020
4350:	endbr64
4354:	push    32h ; '2'
4359:	bnd jmp sub_4020
4360:	endbr64
4364:	push    33h ; '3'
4369:	bnd jmp sub_4020
4370:	endbr64
4374:	push    34h ; '4'
4379:	bnd jmp sub_4020
4380:	endbr64
4384:	push    35h ; '5'
4389:	bnd jmp sub_4020
4390:	endbr64
4394:	push    36h ; '6'
4399:	bnd jmp sub_4020
43A0:	endbr64
43A4:	push    37h ; '7'
43A9:	bnd jmp sub_4020
43B0:	endbr64
43B4:	push    38h ; '8'
43B9:	bnd jmp sub_4020
43C0:	endbr64
43C4:	push    39h ; '9'
43C9:	bnd jmp sub_4020
43D0:	endbr64
43D4:	push    3Ah ; ':'
43D9:	bnd jmp sub_4020
43E0:	endbr64
43E4:	push    3Bh ; ';'
43E9:	bnd jmp sub_4020
43F0:	endbr64
43F4:	push    3Ch ; '<'
43F9:	bnd jmp sub_4020
4400:	endbr64
4404:	push    3Dh ; '='
4409:	bnd jmp sub_4020
4410:	endbr64
4414:	push    3Eh ; '>'
4419:	bnd jmp sub_4020
4420:	endbr64
4424:	push    3Fh ; '?'
4429:	bnd jmp sub_4020
4430:	endbr64
4434:	push    40h ; '@'
4439:	bnd jmp sub_4020
4440:	endbr64
4444:	push    41h ; 'A'
4449:	bnd jmp sub_4020
4450:	endbr64
4454:	push    42h ; 'B'
4459:	bnd jmp sub_4020
4460:	endbr64
4464:	push    43h ; 'C'
4469:	bnd jmp sub_4020
4470:	endbr64
4474:	push    44h ; 'D'
4479:	bnd jmp sub_4020
4480:	endbr64
4484:	push    45h ; 'E'
4489:	bnd jmp sub_4020
4490:	endbr64
4494:	push    46h ; 'F'
4499:	bnd jmp sub_4020
44A0:	endbr64
44A4:	push    47h ; 'G'
44A9:	bnd jmp sub_4020
44B0:	endbr64
44B4:	push    48h ; 'H'
44B9:	bnd jmp sub_4020
44C0:	endbr64
44C4:	push    49h ; 'I'
44C9:	bnd jmp sub_4020
44D0:	endbr64
44D4:	push    4Ah ; 'J'
44D9:	bnd jmp sub_4020
44E0:	endbr64
44E4:	push    4Bh ; 'K'
44E9:	bnd jmp sub_4020
44F0:	endbr64
44F4:	push    4Ch ; 'L'
44F9:	bnd jmp sub_4020
4500:	endbr64
4504:	push    4Dh ; 'M'
4509:	bnd jmp sub_4020
4510:	endbr64
4514:	push    4Eh ; 'N'
4519:	bnd jmp sub_4020
4520:	endbr64
4524:	push    4Fh ; 'O'
4529:	bnd jmp sub_4020
4530:	endbr64
4534:	push    50h ; 'P'
4539:	bnd jmp sub_4020
4540:	endbr64
4544:	push    51h ; 'Q'
4549:	bnd jmp sub_4020
4550:	endbr64
4554:	push    52h ; 'R'
4559:	bnd jmp sub_4020
4560:	endbr64
4564:	push    53h ; 'S'
4569:	bnd jmp sub_4020
4570:	endbr64
4574:	push    54h ; 'T'
4579:	bnd jmp sub_4020
4580:	endbr64
4584:	push    55h ; 'U'
4589:	bnd jmp sub_4020
4590:	endbr64
4594:	push    56h ; 'V'
4599:	bnd jmp sub_4020
45A0:	endbr64
45A4:	push    57h ; 'W'
45A9:	bnd jmp sub_4020
45B0:	endbr64
45B4:	push    58h ; 'X'
45B9:	bnd jmp sub_4020
45C0:	endbr64
45C4:	push    59h ; 'Y'
45C9:	bnd jmp sub_4020
45D0:	endbr64
45D4:	push    5Ah ; 'Z'
45D9:	bnd jmp sub_4020
45E0:	endbr64
45E4:	push    5Bh ; '['
45E9:	bnd jmp sub_4020
45F0:	endbr64
45F4:	push    5Ch ; ''
45F9:	bnd jmp sub_4020
4600:	endbr64
4604:	push    5Dh ; ']'
4609:	bnd jmp sub_4020
4610:	endbr64
4614:	push    5Eh ; '^'
4619:	bnd jmp sub_4020
4620:	endbr64
4624:	push    5Fh ; '_'
4629:	bnd jmp sub_4020
4630:	endbr64
4634:	push    60h ; '`'
4639:	bnd jmp sub_4020
4640:	endbr64
4644:	push    61h ; 'a'
4649:	bnd jmp sub_4020
4650:	endbr64
4654:	push    62h ; 'b'
4659:	bnd jmp sub_4020
4660:	endbr64
4664:	push    63h ; 'c'
4669:	bnd jmp sub_4020
4670:	endbr64
4674:	push    64h ; 'd'
4679:	bnd jmp sub_4020
4680:	endbr64
4684:	push    65h ; 'e'
4689:	bnd jmp sub_4020
4690:	endbr64
4694:	push    66h ; 'f'
4699:	bnd jmp sub_4020
46A0:	endbr64
46A4:	push    67h ; 'g'
46A9:	bnd jmp sub_4020
46B0:	endbr64
46B4:	push    68h ; 'h'
46B9:	bnd jmp sub_4020
46C0:	endbr64
46C4:	push    69h ; 'i'
46C9:	bnd jmp sub_4020
46D0:	endbr64
46D4:	push    6Ah ; 'j'
46D9:	bnd jmp sub_4020
46E0:	endbr64
46E4:	push    6Bh ; 'k'
46E9:	bnd jmp sub_4020
46F0:	endbr64
46F4:	push    6Ch ; 'l'
46F9:	bnd jmp sub_4020
4700:	endbr64
4704:	push    6Dh ; 'm'
4709:	bnd jmp sub_4020
4710:	endbr64
4714:	push    6Eh ; 'n'
4719:	bnd jmp sub_4020
4720:	endbr64
4724:	push    6Fh ; 'o'
4729:	bnd jmp sub_4020
4730:	endbr64
4734:	push    70h ; 'p'
4739:	bnd jmp sub_4020
4740:	endbr64
4744:	push    71h ; 'q'
4749:	bnd jmp sub_4020
4750:	endbr64
4754:	push    72h ; 'r'
4759:	bnd jmp sub_4020
4760:	endbr64
4764:	push    73h ; 's'
4769:	bnd jmp sub_4020
4770:	endbr64
4774:	bnd jmp cs:write_ptr
4780:	endbr64
4784:	bnd jmp cs:read_ptr
4790:	endbr64
4794:	bnd jmp cs:__cxa_finalize_ptr
47A0:	endbr64
47A4:	bnd jmp cs:getenv_ptr
47B0:	endbr64
47B4:	bnd jmp cs:utime_ptr
47C0:	endbr64
47C4:	bnd jmp cs:free_ptr
47D0:	endbr64
47D4:	bnd jmp cs:putchar_ptr
47E0:	endbr64
47E4:	bnd jmp cs:tputs_ptr
47F0:	endbr64
47F4:	bnd jmp cs:strcasecmp_ptr
4800:	endbr64
4804:	bnd jmp cs:localtime_ptr
4810:	endbr64
4814:	bnd jmp cs:abort_ptr
4820:	endbr64
4824:	bnd jmp cs:__errno_location_ptr
4830:	endbr64
4834:	bnd jmp cs:unlink_ptr
4840:	endbr64
4844:	bnd jmp cs:strncpy_ptr
4850:	endbr64
4854:	bnd jmp cs:strncmp_ptr
4860:	endbr64
4864:	bnd jmp cs:_exit_ptr
4870:	endbr64
4874:	bnd jmp cs:strcpy_ptr
4880:	endbr64
4884:	bnd jmp cs:mkdir_ptr
4890:	endbr64
4894:	bnd jmp cs:toupper_ptr
48A0:	endbr64
48A4:	bnd jmp cs:puts_ptr
48B0:	endbr64
48B4:	bnd jmp cs:qsort_ptr
48C0:	endbr64
48C4:	bnd jmp cs:isatty_ptr
48D0:	endbr64
48D4:	bnd jmp cs:localeconv_ptr
48E0:	endbr64
48E4:	bnd jmp cs:readlink_ptr
48F0:	endbr64
48F4:	bnd jmp cs:getpid_ptr
4900:	endbr64
4904:	bnd jmp cs:fclose_ptr
4910:	endbr64
4914:	bnd jmp cs:opendir_ptr
4920:	endbr64
4924:	bnd jmp cs:tgoto_ptr
4930:	endbr64
4934:	bnd jmp cs:getpwuid_ptr
4940:	endbr64
4944:	bnd jmp cs:rmdir_ptr
4950:	endbr64
4954:	bnd jmp cs:__ctype_get_mb_cur_max_ptr
4960:	endbr64
4964:	bnd jmp cs:strlen_ptr
4970:	endbr64
4974:	bnd jmp cs:chdir_ptr
4980:	endbr64
4984:	bnd jmp cs:__stack_chk_fail_ptr
4990:	endbr64
4994:	bnd jmp cs:getuid_ptr
49A0:	endbr64
49A4:	bnd jmp cs:mbrtowc_ptr
49B0:	endbr64
49B4:	bnd jmp cs:strchr_ptr
49C0:	endbr64
49C4:	bnd jmp cs:printf_ptr
49D0:	endbr64
49D4:	bnd jmp cs:getgrgid_ptr
49E0:	endbr64
49E4:	bnd jmp cs:strrchr_ptr
49F0:	endbr64
49F4:	bnd jmp cs:uname_ptr
4A00:	endbr64
4A04:	bnd jmp cs:fnmatch_ptr
4A10:	endbr64
4A14:	bnd jmp cs:memset_ptr
4A20:	endbr64
4A24:	bnd jmp cs:geteuid_ptr
4A30:	endbr64
4A34:	bnd jmp cs:ioctl_ptr
4A40:	endbr64
4A44:	bnd jmp cs:getcwd_ptr
4A50:	endbr64
4A54:	bnd jmp cs:fgetc_ptr
4A60:	endbr64
4A64:	bnd jmp cs:alarm_ptr
4A70:	endbr64
4A74:	bnd jmp cs:close_ptr
4A80:	endbr64
4A84:	bnd jmp cs:closedir_ptr
4A90:	endbr64
4A94:	bnd jmp cs:lstat_ptr
4AA0:	endbr64
4AA4:	bnd jmp cs:srand_ptr
4AB0:	endbr64
4AB4:	bnd jmp cs:memcmp_ptr
4AC0:	endbr64
4AC4:	bnd jmp cs:fgets_ptr
4AD0:	endbr64
4AD4:	bnd jmp cs:calloc_ptr
4AE0:	endbr64
4AE4:	bnd jmp cs:putenv_ptr
4AF0:	endbr64
4AF4:	bnd jmp cs:strcmp_ptr
4B00:	endbr64
4B04:	bnd jmp cs:putc_ptr
4B10:	endbr64
4B14:	bnd jmp cs:signal_ptr
4B20:	endbr64
4B24:	bnd jmp cs:getpwnam_ptr
4B30:	endbr64
4B34:	bnd jmp cs:__memcpy_chk_ptr
4B40:	endbr64
4B44:	bnd jmp cs:fprintf_ptr
4B50:	endbr64
4B54:	bnd jmp cs:ftell_ptr
4B60:	endbr64
4B64:	bnd jmp cs:stat_ptr
4B70:	endbr64
4B74:	bnd jmp cs:memcpy_ptr
4B80:	endbr64
4B84:	bnd jmp cs:getgrnam_ptr
4B90:	endbr64
4B94:	bnd jmp cs:kill_ptr
4BA0:	endbr64
4BA4:	bnd jmp cs:time_ptr
4BB0:	endbr64
4BB4:	bnd jmp cs:getgid_ptr
4BC0:	endbr64
4BC4:	bnd jmp cs:statfs_ptr
4BD0:	endbr64
4BD4:	bnd jmp cs:readdir_ptr
4BE0:	endbr64
4BE4:	bnd jmp cs:tolower_ptr
4BF0:	endbr64
4BF4:	bnd jmp cs:malloc_ptr
4C00:	endbr64
4C04:	bnd jmp cs:strncasecmp_ptr
4C10:	endbr64
4C14:	bnd jmp cs:fflush_ptr
4C20:	endbr64
4C24:	bnd jmp cs:tgetnum_ptr
4C30:	endbr64
4C34:	bnd jmp cs:__isoc99_sscanf_ptr
4C40:	endbr64
4C44:	bnd jmp cs:endpwent_ptr
4C50:	endbr64
4C54:	bnd jmp cs:fseek_ptr
4C60:	endbr64
4C64:	bnd jmp cs:tgetflag_ptr
4C70:	endbr64
4C74:	bnd jmp cs:tgetstr_ptr
4C80:	endbr64
4C84:	bnd jmp cs:statvfs_ptr
4C90:	endbr64
4C94:	bnd jmp cs:chown_ptr
4CA0:	endbr64
4CA4:	bnd jmp cs:ttyname_ptr
4CB0:	endbr64
4CB4:	bnd jmp cs:realloc_ptr
4CC0:	endbr64
4CC4:	bnd jmp cs:setlocale_ptr
4CD0:	endbr64
4CD4:	bnd jmp cs:cfgetospeed_ptr
4CE0:	endbr64
4CE4:	bnd jmp cs:open64_ptr
4CF0:	endbr64
4CF4:	bnd jmp cs:memmove_ptr
4D00:	endbr64
4D04:	bnd jmp cs:error_ptr
4D10:	endbr64
4D14:	bnd jmp cs:tcgetattr_ptr
4D20:	endbr64
4D24:	bnd jmp cs:tcsetattr_ptr
4D30:	endbr64
4D34:	bnd jmp cs:open_ptr
4D40:	endbr64
4D44:	bnd jmp cs:access_ptr
4D50:	endbr64
4D54:	bnd jmp cs:fopen_ptr
4D60:	endbr64
4D64:	bnd jmp cs:tcflow_ptr
4D70:	endbr64
4D74:	bnd jmp cs:rename_ptr
4D80:	endbr64
4D84:	bnd jmp cs:strtoumax_ptr
4D90:	endbr64
4D94:	bnd jmp cs:getopt_ptr
4DA0:	endbr64
4DA4:	bnd jmp cs:atoi_ptr
4DB0:	endbr64
4DB4:	bnd jmp cs:strcat_ptr
4DC0:	endbr64
4DC4:	bnd jmp cs:creat_ptr
4DD0:	endbr64
4DD4:	bnd jmp cs:sprintf_ptr
4DE0:	endbr64
4DE4:	bnd jmp cs:link_ptr
4DF0:	endbr64
4DF4:	bnd jmp cs:exit_ptr
4E00:	endbr64
4E04:	bnd jmp cs:execle_ptr
4E10:	endbr64
4E14:	bnd jmp cs:fwrite_ptr
4E20:	endbr64
4E24:	bnd jmp cs:lseek64_ptr
4E30:	endbr64
4E34:	bnd jmp cs:__fprintf_chk_ptr
4E40:	endbr64
4E44:	bnd jmp cs:strdup_ptr
4E50:	endbr64
4E54:	bnd jmp cs:iswprint_ptr
4E60:	endbr64
4E64:	bnd jmp cs:tgetent_ptr
4E70:	endbr64
4E74:	bnd jmp cs:sleep_ptr
4E80:	endbr64
4E84:	bnd jmp cs:fstat_ptr
4E90:	endbr64
4E94:	bnd jmp cs:wait_ptr
4EA0:	endbr64
4EA4:	bnd jmp cs:fork_ptr
4EB0:	endbr64
4EB4:	bnd jmp cs:rand_ptr
4EC0:	endbr64
4EC4:	bnd jmp cs:__ctype_b_loc_ptr
4ED0:	endbr64
4ED4:	bnd jmp cs:__sprintf_chk_ptr
4EE0:	call    _abort
4EF0:	endbr64
4EF4:	xor     ebp, ebp
4EF6:	mov     r9, rdx; rtld_fini
4EF9:	pop     rsi; argc
4EFA:	mov     rdx, rsp; ubp_av
4EFD:	and     rsp, 0FFFFFFFFFFFFFFF0h
4F01:	push    rax
4F02:	push    rsp; stack_end
4F03:	xor     r8d, r8d; fini
4F06:	xor     ecx, ecx; init
4F08:	lea     rdi, main; main
4F0F:	call    cs:__libc_start_main_ptr
4F15:	hlt
4F20:	lea     rdi, __bss_start
4F27:	lea     rax, __bss_start
4F2E:	cmp     rax, rdi
4F31:	jz      short locret_4F48
4F33:	mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
4F3A:	test    rax, rax
4F3D:	jz      short locret_4F48
4F3F:	jmp     rax
4F48:	retn
4F50:	lea     rdi, __bss_start
4F57:	lea     rsi, __bss_start
4F5E:	sub     rsi, rdi
4F61:	mov     rax, rsi
4F64:	shr     rsi, 3Fh
4F68:	sar     rax, 3
4F6C:	add     rsi, rax
4F6F:	sar     rsi, 1
4F72:	jz      short locret_4F88
4F74:	mov     rax, cs:_ITM_registerTMCloneTable_ptr
4F7B:	test    rax, rax
4F7E:	jz      short locret_4F88
4F80:	jmp     rax
4F88:	retn
4F90:	endbr64
4F94:	cmp     cs:completed_0, 0
4F9B:	jnz     short locret_4FC8
4F9D:	push    rbp
4F9E:	cmp     cs:__cxa_finalize_ptr, 0
4FA6:	mov     rbp, rsp
4FA9:	jz      short loc_4FB7
4FAB:	mov     rdi, cs:__dso_handle; void *
4FB2:	call    __cxa_finalize
4FB7:	call    deregister_tm_clones
4FBC:	mov     cs:completed_0, 1
4FC3:	pop     rbp
4FC4:	retn
4FC8:	retn
4FD0:	endbr64
4FD4:	jmp     register_tm_clones
4FD9:	endbr64
4FDD:	push    rbp
4FDE:	mov     rbp, rsp
4FE1:	mov     eax, cs:tty_lines
4FE7:	cmp     eax, 6
4FEA:	jle     short loc_501A
4FEC:	mov     eax, cs:two_panel_mode
4FF2:	test    eax, eax
4FF4:	jz      short loc_5008
4FF6:	mov     eax, cs:tty_columns
4FFC:	cmp     eax, 0Bh
4FFF:	jle     short loc_501A
5001:	mov     eax, 1
5006:	jmp     short loc_501F
5008:	mov     eax, cs:tty_columns
500E:	cmp     eax, 5
5011:	jle     short loc_501A
5013:	mov     eax, 1
5018:	jmp     short loc_501F
501A:	mov     eax, 0
501F:	pop     rbp
5020:	retn
5021:	endbr64
5025:	push    rbp
5026:	mov     rbp, rsp
5029:	mov     eax, cs:current_mode
502F:	cmp     eax, 1
5032:	setz    al
5035:	movzx   eax, al
5038:	pop     rbp
5039:	retn
503A:	endbr64
503E:	push    rbp
503F:	mov     rbp, rsp
5042:	push    rbx
5043:	sub     rsp, 38h
5047:	mov     [rbp+resize_required], edi
504A:	mov     [rbp+display_title], 0
5051:	mov     [rbp+display_status], 0
5058:	mov     eax, cs:tty_lines
505E:	mov     [rbp+old_tty_lines], eax
5061:	mov     eax, cs:tty_columns
5067:	mov     [rbp+old_tty_columns], eax
506A:	mov     eax, 0
506F:	call    tty_resize
5074:	cmp     [rbp+resize_required], 0
5078:	jnz     short loc_5094
507A:	mov     eax, cs:tty_lines
5080:	cmp     [rbp+old_tty_lines], eax
5083:	jnz     short loc_5094
5085:	mov     eax, cs:tty_columns
508B:	cmp     [rbp+old_tty_columns], eax
508E:	jz      loc_5360
5094:	mov     eax, cs:LinuxConsole
509A:	test    eax, eax
509C:	jz      short loc_50CE
509E:	mov     edx, cs:tty_columns
50A4:	mov     eax, cs:tty_lines
50AA:	imul    eax, edx
50AD:	add     eax, 2
50B0:	add     eax, eax
50B2:	movsxd  rdx, eax
50B5:	mov     rax, cs:screen
50BC:	mov     rsi, rdx; n
50BF:	mov     rdi, rax; p
50C2:	call    xrealloc
50C7:	mov     cs:screen, rax
50CE:	mov     eax, cs:tty_lines
50D4:	cmp     eax, 1
50D7:	jle     short loc_50E0
50D9:	mov     [rbp+display_status], 1
50E0:	mov     eax, cs:tty_lines
50E6:	cmp     eax, 2
50E9:	jle     short loc_50F2
50EB:	mov     [rbp+display_title], 1
50F2:	mov     eax, 0
50F7:	call    panels_can_be_displayed
50FC:	test    eax, eax
50FE:	jz      loc_529E
5104:	mov     eax, cs:two_panel_mode
510A:	test    eax, eax
510C:	jz      loc_5234
5112:	mov     eax, cs:tty_columns
5118:	sar     eax, 1
511A:	mov     [rbp+right_panel_columns], eax
511D:	mov     eax, cs:tty_columns
5123:	and     eax, 1
5126:	mov     edx, eax
5128:	mov     eax, [rbp+right_panel_columns]
512B:	add     eax, edx
512D:	mov     [rbp+left_panel_columns], eax
5130:	mov     rax, cs:src_panel
5137:	mov     rdi, rax; this
513A:	call    panel_window
513F:	mov     rdi, rax; window
5142:	call    window_x
5147:	mov     ebx, eax
5149:	mov     rax, cs:dst_panel
5150:	mov     rdi, rax; this
5153:	call    panel_window
5158:	mov     rdi, rax; window
515B:	call    window_x
5160:	cmp     ebx, eax
5162:	jg      short loc_51CC
5164:	mov     eax, [rbp+left_panel_columns]
5167:	movsxd  rcx, eax
516A:	mov     eax, cs:tty_lines
5170:	sub     eax, 3
5173:	movsxd  rdx, eax
5176:	mov     rax, cs:src_panel
517D:	mov     r8, rcx; columns
5180:	mov     rcx, rdx; lines
5183:	mov     edx, 1; y
5188:	mov     esi, 0; x
518D:	mov     rdi, rax; this
5190:	call    panel_resize
5195:	mov     eax, [rbp+right_panel_columns]
5198:	movsxd  rcx, eax
519B:	mov     eax, cs:tty_lines
51A1:	sub     eax, 3
51A4:	movsxd  rdx, eax
51A7:	mov     eax, [rbp+left_panel_columns]
51AA:	movsxd  rsi, eax; x
51AD:	mov     rax, cs:dst_panel
51B4:	mov     r8, rcx; columns
51B7:	mov     rcx, rdx; lines
51BA:	mov     edx, 1; y
51BF:	mov     rdi, rax; this
51C2:	call    panel_resize
51C7:	jmp     loc_52E6
51CC:	mov     eax, [rbp+right_panel_columns]
51CF:	movsxd  rcx, eax
51D2:	mov     eax, cs:tty_lines
51D8:	sub     eax, 3
51DB:	movsxd  rdx, eax
51DE:	mov     eax, [rbp+left_panel_columns]
51E1:	movsxd  rsi, eax; x
51E4:	mov     rax, cs:src_panel
51EB:	mov     r8, rcx; columns
51EE:	mov     rcx, rdx; lines
51F1:	mov     edx, 1; y
51F6:	mov     rdi, rax; this
51F9:	call    panel_resize
51FE:	mov     eax, [rbp+left_panel_columns]
5201:	movsxd  rcx, eax
5204:	mov     eax, cs:tty_lines
520A:	sub     eax, 3
520D:	movsxd  rdx, eax
5210:	mov     rax, cs:dst_panel
5217:	mov     r8, rcx; columns
521A:	mov     rcx, rdx; lines
521D:	mov     edx, 1; y
5222:	mov     esi, 0; x
5227:	mov     rdi, rax; this
522A:	call    panel_resize
522F:	jmp     loc_52E6
5234:	mov     eax, cs:tty_columns
523A:	movsxd  rcx, eax
523D:	mov     eax, cs:tty_lines
5243:	sub     eax, 3
5246:	movsxd  rdx, eax
5249:	mov     rax, cs:src_panel
5250:	mov     r8, rcx; columns
5253:	mov     rcx, rdx; lines
5256:	mov     edx, 1; y
525B:	mov     esi, 0; x
5260:	mov     rdi, rax; this
5263:	call    panel_resize
5268:	mov     eax, cs:tty_columns
526E:	movsxd  rcx, eax
5271:	mov     eax, cs:tty_lines
5277:	sub     eax, 3
527A:	movsxd  rdx, eax
527D:	mov     rax, cs:dst_panel
5284:	mov     r8, rcx; columns
5287:	mov     rcx, rdx; lines
528A:	mov     edx, 1; y
528F:	mov     esi, 0; x
5294:	mov     rdi, rax; this
5297:	call    panel_resize
529C:	jmp     short loc_52E6
529E:	mov     rax, cs:src_panel
52A5:	mov     r8d, 50h ; 'P'; columns
52AB:	mov     ecx, 2; lines
52B0:	mov     edx, 10000h; y
52B5:	mov     esi, 10000h; x
52BA:	mov     rdi, rax; this
52BD:	call    panel_resize
52C2:	mov     rax, cs:dst_panel
52C9:	mov     r8d, 50h ; 'P'; columns
52CF:	mov     ecx, 2; lines
52D4:	mov     edx, 10000h; y
52D9:	mov     esi, 10000h; x
52DE:	mov     rdi, rax; this
52E1:	call    panel_resize
52E6:	cmp     [rbp+display_title], 0
52EA:	jz      short loc_52F6
52EC:	mov     eax, cs:tty_columns
52F2:	cdqe
52F4:	jmp     short loc_52FB
52F6:	mov     eax, 0
52FB:	mov     esi, 0; line
5300:	mov     rdi, rax; columns
5303:	call    title_resize
5308:	mov     eax, cs:tty_lines
530E:	sub     eax, 1
5311:	movsxd  rdx, eax
5314:	cmp     [rbp+display_status], 0
5318:	jz      short loc_5324
531A:	mov     eax, cs:tty_columns
5320:	cdqe
5322:	jmp     short loc_5329
5324:	mov     eax, 0
5329:	mov     rsi, rdx; line
532C:	mov     rdi, rax; columns
532F:	call    status_resize
5334:	mov     eax, cs:tty_lines
533A:	cmp     eax, 1
533D:	jz      short loc_534A
533F:	mov     eax, cs:tty_lines
5345:	lea     edx, [rax-2]
5348:	jmp     short loc_534F
534A:	mov     edx, 0
534F:	mov     eax, cs:tty_columns
5355:	mov     esi, edx; _line
5357:	mov     edi, eax; _columns
5359:	call    il_resize
535E:	jmp     short loc_5361
5360:	nop
5361:	mov     rbx, [rbp+var_8]
5365:	leave
5366:	retn
5367:	endbr64
536B:	push    rbp
536C:	mov     rbp, rsp
536F:	sub     rsp, 10h
5373:	mov     [rbp+signum], edi
5376:	mov     edi, 0; resize_required
537B:	mov     eax, 0
5380:	call    resize
5385:	cmp     [rbp+signum], 12h
5389:	jnz     short loc_539F
538B:	mov     edi, 1; mode
5390:	call    tty_set_mode
5395:	mov     eax, 0
539A:	call    tty_defaults
539F:	mov     eax, cs:wait_msg
53A5:	test    eax, eax
53A7:	jnz     loc_549F
53AD:	mov     rax, cs:src_panel
53B4:	mov     rdi, rax; this
53B7:	call    panel_no_optimizations
53BC:	mov     rax, cs:dst_panel
53C3:	mov     rdi, rax; this
53C6:	call    panel_no_optimizations
53CB:	mov     rax, cs:src_panel
53D2:	mov     rdi, rax; this
53D5:	call    panel_center_current_entry
53DA:	mov     rax, cs:dst_panel
53E1:	mov     rdi, rax; this
53E4:	call    panel_center_current_entry
53E9:	mov     eax, cs:current_mode
53EF:	test    eax, eax
53F1:	jnz     short loc_5449
53F3:	mov     eax, 0
53F8:	call    panels_can_be_displayed
53FD:	test    eax, eax
53FF:	jnz     short loc_5415
5401:	mov     eax, 0
5406:	call    tty_defaults
540B:	mov     eax, 0
5410:	call    tty_clear
5415:	mov     eax, 0
541A:	call    title_update
541F:	mov     rax, cs:src_panel
5426:	mov     rdi, rax; this
5429:	call    panel_update
542E:	mov     eax, cs:two_panel_mode
5434:	test    eax, eax
5436:	jz      short loc_5458
5438:	mov     rax, cs:dst_panel
543F:	mov     rdi, rax; this
5442:	call    panel_update
5447:	jmp     short loc_5458
5449:	mov     rax, cs:screen
5450:	mov     rdi, rax; buf
5453:	call    tty_put_screen
5458:	mov     eax, 0
545D:	call    status_update
5462:	mov     eax, 0
5467:	call    il_update
546C:	mov     eax, 0
5471:	call    il_update_point
5476:	mov     eax, 0
547B:	call    tty_update
5480:	cmp     [rbp+signum], 12h
5484:	jnz     short locret_54A0
5486:	mov     rax, cs:src_panel
548D:	mov     rdi, rax; this
5490:	call    panel_get_path
5495:	mov     rdi, rax; string
5498:	call    tty_update_title
549D:	jmp     short locret_54A0
549F:	nop
54A0:	leave
54A1:	retn
54A2:	endbr64
54A6:	push    rbp
54A7:	mov     rbp, rsp
54AA:	sub     rsp, 30h
54AE:	mov     [rbp+status_message], rdi
54B2:	mov     eax, 0
54B7:	call    tty_get_previous_key_seq
54BC:	mov     [rbp+prev], rax
54C0:	mov     rax, [rbp+prev]
54C4:	mov     rdi, rax; s
54C7:	call    _strlen
54CC:	mov     [rbp+length], rax
54D0:	cmp     [rbp+length], 0
54D5:	jz      loc_5582
54DB:	mov     rax, [rbp+length]
54DF:	lea     rdx, [rax-1]
54E3:	mov     rax, [rbp+prev]
54E7:	add     rax, rdx
54EA:	movzx   eax, byte ptr [rax]
54ED:	cmp     al, 7
54EF:	jz      loc_5582
54F5:	mov     rax, [rbp+prev]
54F9:	mov     rdi, rax; key_seq
54FC:	call    tty_key_machine2human
5501:	mov     [rbp+str], rax
5505:	mov     rax, [rbp+str]
5509:	mov     rdi, rax; s
550C:	call    _strlen
5511:	sub     rax, 0FFFFFFFFFFFFFF80h
5515:	mov     rdi, rax; n
5518:	call    xmalloc
551D:	mov     [rbp+buf], rax
5521:	mov     rdx, [rbp+str]
5525:	mov     rax, [rbp+buf]
5529:	lea     rcx, format; '%s: not defined.'
5530:	mov     rsi, rcx; format
5533:	mov     rdi, rax; s
5536:	mov     eax, 0
553B:	call    _sprintf
5540:	mov     rax, [rbp+buf]
5544:	mov     edx, 1; alignment
5549:	mov     esi, 2; type
554E:	mov     rdi, rax; message
5551:	call    status
5556:	mov     rax, [rbp+buf]
555A:	mov     rdi, rax; pointer
555D:	call    xfree
5562:	mov     eax, 0
5567:	call    tty_beep
556C:	mov     eax, 0
5571:	call    tty_update
5576:	mov     edi, 1; seconds
557B:	call    _sleep
5580:	jmp     short loc_558C
5582:	mov     eax, 0
5587:	call    tty_beep
558C:	cmp     [rbp+status_message], 0
5591:	jz      short loc_55AB
5593:	mov     rax, [rbp+status_message]
5597:	mov     edx, 0; alignment
559C:	mov     esi, 0; type
55A1:	mov     rdi, rax; message
55A4:	call    status
55A9:	jmp     short loc_55B5
55AB:	mov     eax, 0
55B0:	call    status_default
55B5:	mov     eax, 0
55BA:	call    il_update_point
55BF:	mov     eax, 0
55C4:	call    tty_update
55C9:	nop
55CA:	leave
55CB:	retn
55CC:	endbr64
55D0:	push    rbp
55D1:	mov     rbp, rsp
55D4:	sub     rsp, 20h
55D8:	mov     [rbp+history], rdi
55DC:	mov     [rbp+text], rsi
55E0:	mov     rax, fs:28h
55E9:	mov     [rbp+var_8], rax
55ED:	xor     eax, eax
55EF:	lea     rcx, [rbp+history_text]
55F3:	mov     rax, [rbp+history]
55F7:	mov     edx, 1; offset
55FC:	mov     rsi, rcx; data
55FF:	mov     rdi, rax; stack
5602:	call    xstack_preview
5607:	test    rax, rax
560A:	jz      short loc_5623
560C:	mov     rax, [rbp+history_text]
5610:	mov     rdx, [rbp+text]
5614:	mov     rsi, rdx; s2
5617:	mov     rdi, rax; s1
561A:	call    _strcmp
561F:	test    eax, eax
5621:	jz      short loc_5648
5623:	mov     rax, [rbp+text]
5627:	mov     rdi, rax; string
562A:	call    xstrdup
562F:	mov     [rbp+history_text], rax
5633:	lea     rdx, [rbp+history_text]
5637:	mov     rax, [rbp+history]
563B:	mov     rsi, rdx; data
563E:	mov     rdi, rax; stack
5641:	call    xstack_push
5646:	jmp     short loc_5649
5648:	nop
5649:	mov     rax, [rbp+var_8]
564D:	sub     rax, fs:28h
5656:	jz      short locret_565D
5658:	call    ___stack_chk_fail
565D:	leave
565E:	retn
565F:	endbr64
5663:	push    rbp
5664:	mov     rbp, rsp
5667:	sub     rsp, 20h
566B:	mov     [rbp+history], rdi
566F:	mov     [rbp+offset], esi
5672:	mov     rax, fs:28h
567B:	mov     [rbp+var_8], rax
567F:	xor     eax, eax
5681:	mov     edx, [rbp+offset]; offset
5684:	lea     rcx, [rbp+history_text]
5688:	mov     rax, [rbp+history]
568C:	mov     rsi, rcx; data
568F:	mov     rdi, rax; stack
5692:	call    xstack_preview
5697:	test    rax, rax
569A:	jz      short loc_56A2
569C:	mov     rax, [rbp+history_text]
56A0:	jmp     short loc_56A7
56A2:	mov     eax, 0
56A7:	mov     rdx, [rbp+var_8]
56AB:	sub     rdx, fs:28h
56B4:	jz      short locret_56BB
56B6:	call    ___stack_chk_fail
56BB:	leave
56BC:	retn
56BD:	endbr64
56C1:	push    rbp
56C2:	mov     rbp, rsp
56C5:	sub     rsp, 10h
56C9:	mov     [rbp+key], edi
56CC:	mov     [rbp+flags], esi
56CF:	mov     eax, [rbp+flags]
56D2:	and     eax, 2
56D5:	test    eax, eax
56D7:	jnz     short loc_56E3
56D9:	mov     eax, 0
56DE:	jmp     locret_5994
56E3:	mov     eax, [rbp+key]
56E6:	add     eax, 42h ; 'B'; switch 24 cases
56E9:	cmp     eax, 17h
56EC:	ja      def_5712; jumptable 0000000000005712 default case, case -61
56F2:	mov     eax, eax
56F4:	lea     rdx, ds:0[rax*4]
56FC:	lea     rax, jpt_5712
5703:	mov     eax, ds:(jpt_5712 - 27700h)[rdx+rax]
5706:	cdqe
5708:	lea     rdx, jpt_5712
570F:	add     rax, rdx
5712:	jmp     rax; switch jump
5715:	mov     eax, 0; jumptable 0000000000005712 case -43
571A:	call    il_backward_char
571F:	jmp     loc_598F
5724:	mov     eax, 0; jumptable 0000000000005712 case -44
5729:	call    il_forward_char
572E:	jmp     loc_598F
5733:	mov     eax, 0; jumptable 0000000000005712 case -45
5738:	call    il_backward_word
573D:	jmp     loc_598F
5742:	mov     eax, 0; jumptable 0000000000005712 case -46
5747:	call    il_forward_word
574C:	jmp     loc_598F
5751:	mov     eax, 0; jumptable 0000000000005712 case -47
5756:	call    il_beginning_of_line
575B:	jmp     loc_598F
5760:	mov     eax, 0; jumptable 0000000000005712 case -48
5765:	call    il_end_of_line
576A:	jmp     loc_598F
576F:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -49
5772:	and     eax, 1
5775:	test    eax, eax
5777:	jz      loc_5967
577D:	mov     eax, 0
5782:	call    il_delete_char
5787:	jmp     loc_5967
578C:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -50
578F:	and     eax, 1
5792:	test    eax, eax
5794:	jz      loc_596A
579A:	mov     eax, 0
579F:	call    il_backward_delete_char
57A4:	jmp     loc_596A
57A9:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -51
57AC:	and     eax, 1
57AF:	test    eax, eax
57B1:	jz      loc_596D
57B7:	mov     eax, 0
57BC:	call    il_kill_word
57C1:	jmp     loc_596D
57C6:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -52
57C9:	and     eax, 1
57CC:	test    eax, eax
57CE:	jz      loc_5970
57D4:	mov     eax, 0
57D9:	call    il_backward_kill_word
57DE:	jmp     loc_5970
57E3:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -53
57E6:	and     eax, 1
57E9:	test    eax, eax
57EB:	jz      loc_5973
57F1:	mov     edi, 1; store
57F6:	call    il_kill_line
57FB:	jmp     loc_5973
5800:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -54
5803:	and     eax, 1
5806:	test    eax, eax
5808:	jz      loc_5976
580E:	mov     eax, 0
5813:	call    il_kill_to_beginning_of_line
5818:	jmp     loc_5976
581D:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -55
5820:	and     eax, 1
5823:	test    eax, eax
5825:	jz      loc_5979
582B:	mov     eax, 0
5830:	call    il_kill_to_end_of_line
5835:	jmp     loc_5979
583A:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -56
583D:	and     eax, 1
5840:	test    eax, eax
5842:	jz      loc_597C
5848:	mov     eax, 0
584D:	call    il_just_one_space
5852:	jmp     loc_597C
5857:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -57
585A:	and     eax, 1
585D:	test    eax, eax
585F:	jz      loc_597F
5865:	mov     eax, 0
586A:	call    il_delete_horizontal_space
586F:	jmp     loc_597F
5874:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -58
5877:	and     eax, 1
587A:	test    eax, eax
587C:	jz      loc_5982
5882:	mov     eax, 0
5887:	call    il_downcase_word
588C:	jmp     loc_5982
5891:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -59
5894:	and     eax, 1
5897:	test    eax, eax
5899:	jz      loc_5985
589F:	mov     eax, 0
58A4:	call    il_upcase_word
58A9:	jmp     loc_5985
58AE:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -60
58B1:	and     eax, 1
58B4:	test    eax, eax
58B6:	jz      loc_5988
58BC:	mov     eax, 0
58C1:	call    il_capitalize_word
58C6:	jmp     loc_5988
58CB:	mov     eax, 0; jumptable 0000000000005712 case -62
58D0:	call    il_set_mark
58D5:	jmp     loc_598F
58DA:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -63
58DD:	and     eax, 1
58E0:	test    eax, eax
58E2:	jz      loc_598B
58E8:	mov     eax, 0
58ED:	call    il_kill_region
58F2:	jmp     loc_598B
58F7:	mov     eax, 0; jumptable 0000000000005712 case -64
58FC:	call    il_kill_ring_save
5901:	jmp     loc_598F
5906:	mov     eax, [rbp+flags]; jumptable 0000000000005712 case -65
5909:	and     eax, 1
590C:	test    eax, eax
590E:	jz      short loc_598E
5910:	mov     eax, 0
5915:	call    il_yank
591A:	jmp     short loc_598E
591C:	mov     eax, 0; jumptable 0000000000005712 case -66
5921:	call    il_exchange_point_and_mark
5926:	jmp     short loc_598F
5928:	mov     eax, [rbp+flags]; jumptable 0000000000005712 default case, case -61
592B:	and     eax, 1
592E:	test    eax, eax
5930:	jz      short loc_5960
5932:	call    ___ctype_b_loc
5937:	mov     rdx, [rax]
593A:	mov     eax, [rbp+key]
593D:	cdqe
593F:	add     rax, rax
5942:	add     rax, rdx
5945:	movzx   eax, word ptr [rax]
5948:	movzx   eax, ax
594B:	and     eax, 4000h
5950:	test    eax, eax
5952:	jz      short loc_5960
5954:	mov     eax, [rbp+key]
5957:	mov     edi, eax; c
5959:	call    il_insert_char
595E:	jmp     short loc_598F
5960:	mov     eax, 0
5965:	jmp     short locret_5994
5967:	nop
5968:	jmp     short loc_598F
596A:	nop
596B:	jmp     short loc_598F
596D:	nop
596E:	jmp     short loc_598F
5970:	nop
5971:	jmp     short loc_598F
5973:	nop
5974:	jmp     short loc_598F
5976:	nop
5977:	jmp     short loc_598F
5979:	nop
597A:	jmp     short loc_598F
597C:	nop
597D:	jmp     short loc_598F
597F:	nop
5980:	jmp     short loc_598F
5982:	nop
5983:	jmp     short loc_598F
5985:	nop
5986:	jmp     short loc_598F
5988:	nop
5989:	jmp     short loc_598F
598B:	nop
598C:	jmp     short loc_598F
598E:	nop
598F:	mov     eax, 1
5994:	leave
5995:	retn
5996:	endbr64
599A:	push    rbp
599B:	mov     rbp, rsp
599E:	sub     rsp, 30h
59A2:	mov     [rbp+text], rdi
59A6:	cmp     [rbp+text], 0
59AB:	jnz     short loc_59B7
59AD:	mov     eax, 0
59B2:	jmp     locret_5AE7
59B7:	mov     rax, [rbp+text]
59BB:	mov     rdi, rax; s
59BE:	call    _strlen
59C3:	add     rax, 1
59C7:	mov     [rbp+fixed_text_length], rax
59CB:	mov     rax, [rbp+fixed_text_length]
59CF:	mov     rdi, rax; n
59D2:	call    xmalloc
59D7:	mov     [rbp+fixed_text], rax
59DB:	mov     [rbp+i], 0
59E2:	mov     [rbp+j], 0
59E9:	jmp     loc_5ABB
59EE:	mov     eax, [rbp+i]
59F1:	movsxd  rdx, eax
59F4:	mov     rax, [rbp+text]
59F8:	add     rax, rdx
59FB:	movzx   eax, byte ptr [rax]
59FE:	cmp     al, 9
5A00:	jnz     short loc_5A48
5A02:	add     [rbp+fixed_text_length], 8
5A07:	mov     rdx, [rbp+fixed_text_length]
5A0B:	mov     rax, [rbp+fixed_text]
5A0F:	mov     rsi, rdx; n
5A12:	mov     rdi, rax; p
5A15:	call    xrealloc
5A1A:	mov     [rbp+fixed_text], rax
5A1E:	mov     eax, [rbp+j]
5A21:	movsxd  rdx, eax
5A24:	mov     rax, [rbp+fixed_text]
5A28:	add     rax, rdx
5A2B:	mov     edx, 8; n
5A30:	lea     rcx, asc_27175; '        '
5A37:	mov     rsi, rcx; src
5A3A:	mov     rdi, rax; dest
5A3D:	call    _memcpy
5A42:	add     [rbp+j], 8
5A46:	jmp     short loc_5AB7
5A48:	call    ___ctype_b_loc
5A4D:	mov     rdx, [rax]
5A50:	mov     eax, [rbp+i]
5A53:	movsxd  rcx, eax
5A56:	mov     rax, [rbp+text]
5A5A:	add     rax, rcx
5A5D:	movzx   eax, byte ptr [rax]
5A60:	movsx   rax, al
5A64:	add     rax, rax
5A67:	add     rax, rdx
5A6A:	movzx   eax, word ptr [rax]
5A6D:	movzx   eax, ax
5A70:	and     eax, 4000h
5A75:	test    eax, eax
5A77:	jz      short loc_5AA1
5A79:	mov     eax, [rbp+i]
5A7C:	movsxd  rdx, eax
5A7F:	mov     rax, [rbp+text]
5A83:	lea     rcx, [rdx+rax]
5A87:	mov     eax, [rbp+j]
5A8A:	lea     edx, [rax+1]
5A8D:	mov     [rbp+j], edx
5A90:	movsxd  rdx, eax
5A93:	mov     rax, [rbp+fixed_text]
5A97:	add     rdx, rax
5A9A:	movzx   eax, byte ptr [rcx]
5A9D:	mov     [rdx], al
5A9F:	jmp     short loc_5AB7
5AA1:	mov     eax, [rbp+j]
5AA4:	lea     edx, [rax+1]
5AA7:	mov     [rbp+j], edx
5AAA:	movsxd  rdx, eax
5AAD:	mov     rax, [rbp+fixed_text]
5AB1:	add     rax, rdx
5AB4:	mov     byte ptr [rax], 3Fh ; '?'
5AB7:	add     [rbp+i], 1
5ABB:	mov     eax, [rbp+i]
5ABE:	movsxd  rdx, eax
5AC1:	mov     rax, [rbp+text]
5AC5:	add     rax, rdx
5AC8:	movzx   eax, byte ptr [rax]
5ACB:	test    al, al
5ACD:	jnz     loc_59EE
5AD3:	mov     eax, [rbp+j]
5AD6:	movsxd  rdx, eax
5AD9:	mov     rax, [rbp+fixed_text]
5ADD:	add     rax, rdx
5AE0:	mov     byte ptr [rax], 0
5AE3:	mov     rax, [rbp+fixed_text]
5AE7:	leave
5AE8:	retn
5AE9:	endbr64
5AED:	push    rbp
5AEE:	mov     rbp, rsp
5AF1:	sub     rsp, 30h
5AF5:	mov     [rbp+options], rdi
5AF9:	mov     [rbp+len], 0
5B01:	mov     rax, [rbp+options]
5B05:	mov     [rbp+options_ptr], rax
5B09:	mov     rax, [rbp+options]
5B0D:	mov     rdi, rax; s
5B10:	call    _strlen
5B15:	mov     rdx, rax
5B18:	mov     rax, rdx
5B1B:	add     rax, rax
5B1E:	add     rax, rdx
5B21:	add     rax, 9
5B25:	mov     rdi, rax; n
5B28:	call    xmalloc
5B2D:	mov     [rbp+help], rax
5B31:	mov     rax, [rbp+len]
5B35:	lea     rdx, [rax+1]
5B39:	mov     [rbp+len], rdx
5B3D:	mov     rdx, [rbp+help]
5B41:	add     rax, rdx
5B44:	mov     byte ptr [rax], 28h ; '('
5B47:	jmp     short loc_5B96
5B49:	mov     rax, [rbp+len]
5B4D:	lea     rdx, [rax+1]
5B51:	mov     [rbp+len], rdx
5B55:	mov     rdx, [rbp+help]
5B59:	add     rdx, rax
5B5C:	mov     rax, [rbp+options_ptr]
5B60:	movzx   eax, byte ptr [rax]
5B63:	mov     [rdx], al
5B65:	mov     rax, [rbp+len]
5B69:	lea     rdx, [rax+1]
5B6D:	mov     [rbp+len], rdx
5B71:	mov     rdx, [rbp+help]
5B75:	add     rax, rdx
5B78:	mov     byte ptr [rax], 2Ch ; ','
5B7B:	mov     rax, [rbp+len]
5B7F:	lea     rdx, [rax+1]
5B83:	mov     [rbp+len], rdx
5B87:	mov     rdx, [rbp+help]
5B8B:	add     rax, rdx
5B8E:	mov     byte ptr [rax], 20h ; ' '
5B91:	add     [rbp+options_ptr], 1
5B96:	mov     rax, [rbp+options_ptr]
5B9A:	add     rax, 1
5B9E:	movzx   eax, byte ptr [rax]
5BA1:	test    al, al
5BA3:	jnz     short loc_5B49
5BA5:	mov     rax, [rbp+len]
5BA9:	lea     rdx, [rax+1]
5BAD:	mov     [rbp+len], rdx
5BB1:	mov     rdx, [rbp+help]
5BB5:	add     rdx, rax
5BB8:	mov     rax, [rbp+options_ptr]
5BBC:	movzx   eax, byte ptr [rax]
5BBF:	mov     [rdx], al
5BC1:	mov     rax, [rbp+len]
5BC5:	lea     rdx, [rax+1]
5BC9:	mov     [rbp+len], rdx
5BCD:	mov     rdx, [rbp+help]
5BD1:	add     rax, rdx
5BD4:	mov     byte ptr [rax], 29h ; ')'
5BD7:	mov     rax, [rbp+len]
5BDB:	lea     rdx, [rax+1]
5BDF:	mov     [rbp+len], rdx
5BE3:	mov     rdx, [rbp+help]
5BE7:	add     rax, rdx
5BEA:	mov     byte ptr [rax], 20h ; ' '
5BED:	mov     rax, [rbp+len]
5BF1:	lea     rdx, [rax+1]
5BF5:	mov     [rbp+len], rdx
5BF9:	mov     rdx, [rbp+help]
5BFD:	add     rax, rdx
5C00:	mov     byte ptr [rax], 0
5C03:	mov     rax, [rbp+help]
5C07:	leave
5C08:	retn
5C09:	endbr64
5C0D:	push    rbp
5C0E:	mov     rbp, rsp
5C11:	sub     rsp, 60h
5C15:	mov     [rbp+message], rdi
5C19:	mov     [rbp+options], rsi
5C1D:	mov     [rbp+flags], edx
5C20:	mov     rax, fs:28h
5C29:	mov     [rbp+var_8], rax
5C2D:	xor     eax, eax
5C2F:	mov     [rbp+saved_il], 0
5C37:	mov     eax, [rbp+flags]
5C3A:	and     eax, 10h
5C3D:	test    eax, eax
5C3F:	jz      short loc_5C4F
5C41:	mov     eax, 0
5C46:	call    il_save
5C4B:	mov     [rbp+saved_il], rax
5C4F:	mov     eax, 0
5C54:	call    il_reset_line
5C59:	cmp     [rbp+message], 0
5C5E:	jz      loc_5CF2
5C64:	mov     rax, [rbp+message]
5C68:	mov     rdi, rax; text
5C6B:	call    il_fix_text
5C70:	mov     [rbp+text], rax
5C74:	mov     eax, [rbp+flags]
5C77:	and     eax, 8
5C7A:	test    eax, eax
5C7C:	jz      short loc_5C97
5C7E:	lea     rax, text; '*** '
5C85:	mov     rdi, rax; text
5C88:	call    il_insert_text
5C8D:	mov     edi, 1; flag
5C92:	call    il_set_error_flag
5C97:	mov     rax, [rbp+text]
5C9B:	mov     rdi, rax; text
5C9E:	call    il_insert_text
5CA3:	mov     eax, [rbp+flags]
5CA6:	and     eax, 20h
5CA9:	test    eax, eax
5CAB:	jz      short loc_5CB7
5CAD:	mov     eax, 0
5CB2:	call    il_beginning_of_line
5CB7:	mov     rax, [rbp+text]
5CBB:	mov     rdi, rax; pointer
5CBE:	call    xfree
5CC3:	cmp     [rbp+options], 0
5CC8:	jz      short loc_5CF2
5CCA:	mov     rax, [rbp+options]
5CCE:	mov     rdi, rax; options
5CD1:	call    il_build_help_from_string
5CD6:	mov     [rbp+help], rax
5CDA:	mov     rax, [rbp+help]
5CDE:	mov     rdi, rax; text
5CE1:	call    il_insert_text
5CE6:	mov     rax, [rbp+help]
5CEA:	mov     rdi, rax; pointer
5CED:	call    xfree
5CF2:	mov     eax, 0
5CF7:	call    il_update
5CFC:	mov     eax, 0
5D01:	call    il_update_point
5D06:	mov     eax, 0
5D0B:	call    tty_update
5D10:	mov     eax, [rbp+flags]
5D13:	and     eax, 4
5D16:	test    eax, eax
5D18:	jz      short loc_5D44
5D1A:	mov     eax, 0
5D1F:	call    tty_beep
5D24:	jmp     short loc_5D44
5D26:	mov     eax, 0
5D2B:	call    tty_beep
5D30:	mov     eax, 0
5D35:	call    status_update
5D3A:	mov     eax, 0
5D3F:	call    il_update_point
5D44:	lea     rax, [rbp+repeat_count]
5D48:	mov     rdi, rax; repeat_count
5D4B:	call    tty_get_key
5D50:	mov     [rbp+ks], rax
5D54:	cmp     [rbp+ks], 0
5D59:	jz      short loc_5D26
5D5B:	mov     rax, [rbp+ks]
5D5F:	mov     rax, [rax]
5D62:	movzx   eax, byte ptr [rax]
5D65:	movzx   eax, al
5D68:	mov     [rbp+key], eax
5D6B:	mov     rax, [rbp+ks]
5D6F:	mov     rax, [rax+10h]
5D73:	mov     [rbp+command], rax
5D77:	cmp     [rbp+command], 0
5D7C:	jz      short loc_5DC3
5D7E:	mov     rax, [rbp+command]
5D82:	movzx   eax, byte ptr [rax+1Bh]
5D86:	test    al, al
5D88:	jz      short loc_5DC3
5D8A:	mov     rax, [rbp+command]
5D8E:	mov     rax, [rax]
5D91:	lea     rdx, builtin
5D98:	sub     rax, rdx
5D9B:	mov     rcx, rax
5D9E:	mov     rdx, 0EA0EA0EA0EA0EA1h
5DA8:	mov     rax, rcx
5DAB:	imul    rdx
5DAE:	mov     rax, rdx
5DB1:	sar     rax, 1
5DB4:	sar     rcx, 3Fh
5DB8:	mov     rdx, rcx
5DBB:	sub     rax, rdx
5DBE:	not     eax
5DC0:	mov     [rbp+key], eax
5DC3:	cmp     [rbp+key], 7
5DC7:	jz      loc_5E89
5DCD:	cmp     [rbp+key], 7
5DD1:	jg      short loc_5E1D
5DD3:	cmp     [rbp+key], 0FFFFFFC3h
5DD7:	jz      short loc_5DF0
5DD9:	cmp     [rbp+key], 0FFFFFFF8h
5DDD:	jnz     short loc_5E1D
5DDF:	mov     edi, 0; signum
5DE4:	mov     eax, 0
5DE9:	call    refresh
5DEE:	jmp     short loc_5E66
5DF0:	cmp     [rbp+options], 0
5DF5:	jz      loc_5E89
5DFB:	mov     rax, [rbp+options]
5DFF:	movzx   eax, byte ptr [rax]
5E02:	movsx   eax, al
5E05:	mov     [rbp+key], eax
5E08:	jmp     short loc_5E89
5E0A:	mov     edx, [rbp+flags]
5E0D:	mov     eax, [rbp+key]
5E10:	mov     esi, edx; flags
5E12:	mov     edi, eax; key
5E14:	call    il_dispatch_commands
5E19:	test    eax, eax
5E1B:	jz      short loc_5E36
5E1D:	mov     eax, [rbp+repeat_count]
5E20:	lea     edx, [rax-1]
5E23:	mov     [rbp+repeat_count], edx
5E26:	test    eax, eax
5E28:	jnz     short loc_5E0A
5E2A:	mov     eax, 0
5E2F:	call    il_update
5E34:	jmp     short loc_5E66
5E36:	nop
5E37:	cmp     [rbp+options], 0
5E3C:	jz      short loc_5E8C
5E3E:	cmp     [rbp+options], 0
5E43:	jz      short loc_5E5B
5E45:	mov     edx, [rbp+key]
5E48:	mov     rax, [rbp+options]
5E4C:	mov     esi, edx; c
5E4E:	mov     rdi, rax; s
5E51:	call    _strchr
5E56:	test    rax, rax
5E59:	jnz     short loc_5E8F
5E5B:	mov     eax, 0
5E60:	call    tty_beep
5E65:	nop
5E66:	mov     eax, 0
5E6B:	call    status_update
5E70:	mov     eax, 0
5E75:	call    il_update_point
5E7A:	mov     eax, 0
5E7F:	call    tty_update
5E84:	jmp     loc_5D44
5E89:	nop
5E8A:	jmp     short done
5E8C:	nop
5E8D:	jmp     short done
5E8F:	nop
5E90:	mov     edi, 0; flag
5E95:	call    il_set_error_flag
5E9A:	mov     eax, [rbp+flags]
5E9D:	and     eax, 10h
5EA0:	test    eax, eax
5EA2:	jz      short loc_5ED5
5EA4:	cmp     [rbp+saved_il], 0
5EA9:	jz      short loc_5ED5
5EAB:	mov     rax, [rbp+saved_il]
5EAF:	mov     rdi, rax; saved_il
5EB2:	call    il_restore
5EB7:	mov     eax, 0
5EBC:	call    il_update
5EC1:	mov     eax, 0
5EC6:	call    il_update_point
5ECB:	mov     eax, 0
5ED0:	call    tty_update
5ED5:	cmp     [rbp+key], 7
5ED9:	jz      short loc_5EE0
5EDB:	mov     eax, [rbp+key]
5EDE:	jmp     short loc_5EE5
5EE0:	mov     eax, 0
5EE5:	mov     rdx, [rbp+var_8]
5EE9:	sub     rdx, fs:28h
5EF2:	jz      short locret_5EF9
5EF4:	call    ___stack_chk_fail
5EF9:	leave
5EFA:	retn
5EFB:	endbr64
5EFF:	push    rbp
5F00:	mov     rbp, rsp
5F03:	sub     rsp, 50h
5F07:	mov     [rbp+static_text], rdi
5F0B:	mov     [rbp+dest], rsi
5F0F:	mov     [rbp+default_string], rdx
5F13:	mov     [rbp+history], rcx
5F17:	mov     rax, fs:28h
5F20:	mov     [rbp+var_8], rax
5F24:	xor     eax, eax
5F26:	mov     [rbp+key], 0
5F2D:	mov     [rbp+offset], 0
5F34:	mov     eax, 0
5F39:	call    il_reset_line
5F3E:	cmp     [rbp+static_text], 0
5F43:	jz      short loc_5F51
5F45:	mov     rax, [rbp+static_text]
5F49:	mov     rdi, rax; static_text
5F4C:	call    il_set_static_text
5F51:	cmp     [rbp+default_string], 0
5F56:	jz      short loc_5F64
5F58:	mov     rax, [rbp+default_string]
5F5C:	mov     rdi, rax; text
5F5F:	call    il_insert_text
5F64:	cmp     [rbp+history], 0
5F69:	jz      short loc_5F91
5F6B:	cmp     [rbp+default_string], 0
5F70:	jz      short loc_5F91
5F72:	mov     rdx, [rbp+default_string]
5F76:	mov     rax, [rbp+history]
5F7A:	mov     rsi, rdx; text
5F7D:	mov     rdi, rax; history
5F80:	mov     eax, 0
5F85:	call    il_history_add_entry
5F8A:	mov     [rbp+offset], 1
5F91:	mov     eax, 0
5F96:	call    il_update
5F9B:	mov     eax, 0
5FA0:	call    il_update_point
5FA5:	mov     eax, 0
5FAA:	call    tty_update
5FAF:	jmp     short loc_5FCF
5FB1:	mov     eax, 0
5FB6:	call    tty_beep
5FBB:	mov     eax, 0
5FC0:	call    status_update
5FC5:	mov     eax, 0
5FCA:	call    il_update_point
5FCF:	lea     rax, [rbp+repeat_count]
5FD3:	mov     rdi, rax; repeat_count
5FD6:	call    tty_get_key
5FDB:	mov     [rbp+ks], rax
5FDF:	cmp     [rbp+ks], 0
5FE4:	jz      short loc_5FB1
5FE6:	mov     rax, [rbp+ks]
5FEA:	mov     rax, [rax]
5FED:	movzx   eax, byte ptr [rax]
5FF0:	movzx   eax, al
5FF3:	mov     [rbp+key], eax
5FF6:	mov     rax, [rbp+ks]
5FFA:	mov     rax, [rax+10h]
5FFE:	mov     [rbp+command], rax
6002:	cmp     [rbp+command], 0
6007:	jz      short loc_604E
6009:	mov     rax, [rbp+command]
600D:	movzx   eax, byte ptr [rax+1Bh]
6011:	test    al, al
6013:	jz      short loc_604E
6015:	mov     rax, [rbp+command]
6019:	mov     rax, [rax]
601C:	lea     rdx, builtin
6023:	sub     rax, rdx
6026:	mov     rcx, rax
6029:	mov     rdx, 0EA0EA0EA0EA0EA1h
6033:	mov     rax, rcx
6036:	imul    rdx
6039:	mov     rax, rdx
603C:	sar     rax, 1
603F:	sar     rcx, 3Fh
6043:	mov     rdx, rcx
6046:	sub     rax, rdx
6049:	not     eax
604B:	mov     [rbp+key], eax
604E:	cmp     [rbp+key], 0FFFFFFC3h
6052:	jz      loc_61AF
6058:	cmp     [rbp+key], 0FFFFFFC3h
605C:	jl      def_60A5; jumptable 00000000000060A5 default case, cases -32--11,-9,-7,-5-6
6062:	cmp     [rbp+key], 7
6066:	jg      def_60A5; jumptable 00000000000060A5 default case, cases -32--11,-9,-7,-5-6
606C:	cmp     [rbp+key], 0FFFFFFDEh
6070:	jl      def_60A5; jumptable 00000000000060A5 default case, cases -32--11,-9,-7,-5-6
6076:	mov     eax, [rbp+key]
6079:	add     eax, 22h ; '''; switch 42 cases
607C:	cmp     eax, 29h
607F:	ja      def_60A5; jumptable 00000000000060A5 default case, cases -32--11,-9,-7,-5-6
6085:	mov     eax, eax
6087:	lea     rdx, ds:0[rax*4]
608F:	lea     rax, jpt_60A5
6096:	mov     eax, ds:(jpt_60A5 - 27760h)[rdx+rax]
6099:	cdqe
609B:	lea     rdx, jpt_60A5
60A2:	add     rax, rdx
60A5:	jmp     rax; switch jump
60A8:	cmp     [rbp+history], 0; jumptable 00000000000060A5 cases -33,-6
60AD:	jz      loc_61F3
60B3:	add     [rbp+offset], 1
60B7:	mov     edx, [rbp+offset]
60BA:	mov     rax, [rbp+history]
60BE:	mov     esi, edx; offset
60C0:	mov     rdi, rax; history
60C3:	mov     eax, 0
60C8:	call    il_history_view_entry
60CD:	mov     [rbp+history_text], rax
60D1:	cmp     [rbp+history_text], 0
60D6:	jnz     short loc_60EB
60D8:	sub     [rbp+offset], 1
60DC:	mov     eax, 0
60E1:	call    tty_beep
60E6:	jmp     loc_61F7
60EB:	mov     edi, 0; store
60F0:	call    il_kill_line
60F5:	mov     rax, [rbp+history_text]
60F9:	mov     rdi, rax; text
60FC:	call    il_insert_text
6101:	mov     eax, 0
6106:	call    il_update
610B:	mov     eax, 0
6110:	call    il_update_point
6115:	jmp     loc_61F7
611A:	cmp     [rbp+history], 0; jumptable 00000000000060A5 cases -34,-10
611F:	jz      loc_61F6
6125:	cmp     [rbp+offset], 0
6129:	jnz     short loc_614E
612B:	mov     edi, 0; store
6130:	call    il_kill_line
6135:	mov     eax, 0
613A:	call    il_update
613F:	mov     eax, 0
6144:	call    il_update_point
6149:	jmp     loc_61F7
614E:	mov     edi, 0; store
6153:	call    il_kill_line
6158:	sub     [rbp+offset], 1
615C:	cmp     [rbp+offset], 0
6160:	jle     short loc_6188
6162:	mov     edx, [rbp+offset]
6165:	mov     rax, [rbp+history]
6169:	mov     esi, edx; offset
616B:	mov     rdi, rax; history
616E:	mov     eax, 0
6173:	call    il_history_view_entry
6178:	mov     [rbp+history_text], rax
617C:	mov     rax, [rbp+history_text]
6180:	mov     rdi, rax; text
6183:	call    il_insert_text
6188:	mov     eax, 0
618D:	call    il_update
6192:	mov     eax, 0
6197:	call    il_update_point
619C:	jmp     short loc_61F7
619E:	mov     edi, 0; jumptable 00000000000060A5 case -8
61A3:	mov     eax, 0
61A8:	call    refresh
61AD:	jmp     short loc_61F7
61AF:	mov     rax, [rbp+dest]
61B3:	mov     rdi, rax; dest
61B6:	call    il_get_contents
61BB:	jmp     short loc_621A; jumptable 00000000000060A5 case 7
61BD:	mov     eax, [rbp+key]
61C0:	mov     esi, 3; flags
61C5:	mov     edi, eax; key
61C7:	call    il_dispatch_commands
61CC:	test    eax, eax
61CE:	jnz     short def_60A5; jumptable 00000000000060A5 default case, cases -32--11,-9,-7,-5-6
61D0:	mov     eax, 0
61D5:	call    tty_beep
61DA:	mov     eax, [rbp+repeat_count]; jumptable 00000000000060A5 default case, cases -32--11,-9,-7,-5-6
61DD:	lea     edx, [rax-1]
61E0:	mov     [rbp+repeat_count], edx
61E3:	test    eax, eax
61E5:	jnz     short loc_61BD
61E7:	mov     eax, 0
61EC:	call    il_update
61F1:	jmp     short loc_61F7
61F3:	nop
61F4:	jmp     short loc_61F7
61F6:	nop
61F7:	mov     eax, 0
61FC:	call    status_update
6201:	mov     eax, 0
6206:	call    il_update_point
620B:	mov     eax, 0
6210:	call    tty_update
6215:	jmp     loc_5FCF
621A:	nop; jumptable 00000000000060A5 case 7
621B:	cmp     [rbp+key], 0FFFFFFC3h
621F:	jnz     short loc_624C
6221:	cmp     [rbp+history], 0
6226:	jz      short loc_6243
6228:	mov     rax, [rbp+dest]
622C:	mov     rdx, [rax]
622F:	mov     rax, [rbp+history]
6233:	mov     rsi, rdx; text
6236:	mov     rdi, rax; history
6239:	mov     eax, 0
623E:	call    il_history_add_entry
6243:	mov     rax, [rbp+dest]
6247:	mov     rax, [rax]
624A:	jmp     short loc_6251
624C:	mov     eax, 0
6251:	mov     rdx, [rbp+var_8]
6255:	sub     rdx, fs:28h
625E:	jz      short locret_6265
6260:	call    ___stack_chk_fail
6265:	leave
6266:	retn
6267:	endbr64
626B:	push    rbp
626C:	mov     rbp, rsp
626F:	sub     rsp, 40h
6273:	mov     [rbp+static_text], rdi
6277:	mov     [rbp+dest], rsi
627B:	mov     [rbp+status], edx
627E:	mov     [rbp+action], rcx
6282:	cmp     [rbp+status], 0
6286:	jnz     short loc_62C0
6288:	mov     eax, 0
628D:	call    il_save
6292:	mov     cs:saved_il_1, rax
6299:	mov     eax, 0
629E:	call    il_reset_line
62A3:	cmp     [rbp+static_text], 0
62A8:	jz      short loc_62B6
62AA:	mov     rax, [rbp+static_text]
62AE:	mov     rdi, rax; static_text
62B1:	call    il_set_static_text
62B6:	mov     eax, 0
62BB:	jmp     locret_6517
62C0:	cmp     [rbp+status], 3
62C4:	jnz     short loc_62FD
62C6:	mov     rax, cs:saved_il_1
62CD:	mov     rdi, rax; saved_il
62D0:	call    il_restore
62D5:	mov     eax, 0
62DA:	call    il_update
62DF:	mov     eax, 0
62E4:	call    il_update_point
62E9:	mov     eax, 0
62EE:	call    tty_update
62F3:	mov     eax, 0
62F8:	jmp     locret_6517
62FD:	cmp     [rbp+action], 0
6302:	jnz     short loc_630E
6304:	mov     eax, 0
6309:	jmp     locret_6517
630E:	mov     rax, [rbp+action]
6312:	mov     dword ptr [rax], 0
6318:	mov     eax, 0
631D:	call    il_update
6322:	mov     eax, 0
6327:	call    il_update_point
632C:	mov     eax, 0
6331:	call    tty_update
6336:	mov     edi, 0; repeat_count
633B:	call    tty_get_key
6340:	mov     [rbp+ks], rax
6344:	cmp     [rbp+ks], 0
6349:	jnz     short loc_6373
634B:	mov     eax, 0
6350:	call    status_update
6355:	mov     eax, 0
635A:	call    il_update_point
635F:	mov     eax, 0
6364:	call    tty_update
6369:	mov     eax, 0
636E:	jmp     locret_6517
6373:	mov     rax, [rbp+ks]
6377:	mov     rax, [rax]
637A:	movzx   eax, byte ptr [rax]
637D:	movzx   eax, al
6380:	mov     [rbp+key], eax
6383:	mov     rax, [rbp+ks]
6387:	mov     rax, [rax+10h]
638B:	mov     [rbp+command], rax
638F:	cmp     [rbp+command], 0
6394:	jz      short loc_63DB
6396:	mov     rax, [rbp+command]
639A:	movzx   eax, byte ptr [rax+1Bh]
639E:	test    al, al
63A0:	jz      short loc_63DB
63A2:	mov     rax, [rbp+command]
63A6:	mov     rax, [rax]
63A9:	lea     rdx, builtin
63B0:	sub     rax, rdx
63B3:	mov     rcx, rax
63B6:	mov     rdx, 0EA0EA0EA0EA0EA1h
63C0:	mov     rax, rcx
63C3:	imul    rdx
63C6:	mov     rax, rdx
63C9:	sar     rax, 1
63CC:	sar     rcx, 3Fh
63D0:	mov     rdx, rcx
63D3:	sub     rax, rdx
63D6:	not     eax
63D8:	mov     [rbp+key], eax
63DB:	cmp     [rbp+key], 7
63DF:	jz      loc_64C8
63E5:	cmp     [rbp+key], 7
63E9:	jg      short loc_6449
63EB:	cmp     [rbp+key], 0FFFFFFF8h
63EF:	jz      short loc_6409
63F1:	cmp     [rbp+key], 0FFFFFFF8h
63F5:	jg      short loc_6449
63F7:	cmp     [rbp+key], 0FFFFFFC3h
63FB:	jz      loc_64C8
6401:	cmp     [rbp+key], 0FFFFFFCEh
6405:	jz      short loc_641D
6407:	jmp     short loc_6449
6409:	mov     edi, 0; signum
640E:	mov     eax, 0
6413:	call    refresh
6418:	jmp     restart
641D:	mov     eax, 0
6422:	call    il_is_empty
6427:	test    eax, eax
6429:	jz      short loc_643A
642B:	mov     eax, 0
6430:	call    tty_beep
6435:	jmp     loc_64C9
643A:	mov     rax, [rbp+action]
643E:	mov     dword ptr [rax], 1
6444:	jmp     loc_64C9
6449:	cmp     [rbp+key], 0FFFFFFBCh
644D:	jnz     short loc_6455
644F:	cmp     [rbp+status], 1
6453:	jz      short loc_6461
6455:	cmp     [rbp+key], 0FFFFFFBBh
6459:	jnz     short loc_6487
645B:	cmp     [rbp+status], 2
645F:	jnz     short loc_6487
6461:	mov     eax, 0
6466:	call    il_is_empty
646B:	test    eax, eax
646D:	jz      short loc_647B
646F:	mov     rax, [rbp+action]
6473:	mov     dword ptr [rax], 3
6479:	jmp     short loc_64C9
647B:	mov     rax, [rbp+action]
647F:	mov     dword ptr [rax], 2
6485:	jmp     short loc_64C9
6487:	call    ___ctype_b_loc
648C:	mov     rdx, [rax]
648F:	mov     eax, [rbp+key]
6492:	cdqe
6494:	add     rax, rax
6497:	add     rax, rdx
649A:	movzx   eax, word ptr [rax]
649D:	movzx   eax, ax
64A0:	and     eax, 4000h
64A5:	test    eax, eax
64A7:	jz      short loc_64BF
64A9:	mov     eax, [rbp+key]
64AC:	mov     edi, eax; c
64AE:	call    il_insert_char
64B3:	mov     rax, [rbp+action]
64B7:	mov     dword ptr [rax], 3
64BD:	jmp     short loc_64C9
64BF:	mov     [rbp+key], 7
64C6:	jmp     short loc_64C9
64C8:	nop
64C9:	mov     eax, 0
64CE:	call    status_update
64D3:	mov     eax, 0
64D8:	call    il_update
64DD:	mov     eax, 0
64E2:	call    il_update_point
64E7:	mov     eax, 0
64EC:	call    tty_update
64F1:	mov     rax, [rbp+dest]
64F5:	mov     rdi, rax; dest
64F8:	call    il_get_contents
64FD:	cmp     [rbp+key], 0FFFFFFC3h
6501:	jz      short loc_6512
6503:	cmp     [rbp+key], 7
6507:	jz      short loc_6512
6509:	mov     rax, [rbp+dest]
650D:	mov     rax, [rax]
6510:	jmp     short locret_6517
6512:	mov     eax, 0
6517:	leave
6518:	retn
6519:	endbr64
651D:	push    rbp
651E:	mov     rbp, rsp
6521:	sub     rsp, 10h
6525:	mov     rax, cs:dir_history
652C:	test    rax, rax
652F:	jz      short loc_6581
6531:	mov     [rbp+i], 0
6538:	jmp     short loc_655C
653A:	mov     rdx, cs:dir_history
6541:	mov     eax, [rbp+i]
6544:	cdqe
6546:	shl     rax, 3
654A:	add     rax, rdx
654D:	mov     rax, [rax]
6550:	mov     rdi, rax; pointer
6553:	call    xfree
6558:	add     [rbp+i], 1
655C:	mov     eax, cs:dir_history_count
6562:	cmp     [rbp+i], eax
6565:	jl      short loc_653A
6567:	mov     rax, cs:dir_history
656E:	mov     rdi, rax; pointer
6571:	call    xfree
6576:	mov     cs:dir_history, 0
6581:	mov     cs:dir_history_count, 0
658B:	mov     cs:dir_history_point, 0
6595:	nop
6596:	leave
6597:	retn
6598:	endbr64
659C:	push    rbp
659D:	mov     rbp, rsp
65A0:	push    rbx
65A1:	sub     rsp, 18h
65A5:	mov     [rbp+directory], rdi
65A9:	mov     eax, cs:dir_history_count
65AF:	mov     cs:dir_history_point, eax
65B5:	mov     eax, cs:dir_history_count
65BB:	add     eax, 1
65BE:	mov     cs:dir_history_count, eax
65C4:	mov     eax, cs:dir_history_count
65CA:	cdqe
65CC:	lea     rdx, ds:0[rax*8]
65D4:	mov     rax, cs:dir_history
65DB:	mov     rsi, rdx; n
65DE:	mov     rdi, rax; p
65E1:	call    xrealloc
65E6:	mov     cs:dir_history, rax
65ED:	mov     rdx, cs:dir_history
65F4:	mov     eax, cs:dir_history_point
65FA:	cdqe
65FC:	shl     rax, 3
6600:	lea     rbx, [rdx+rax]
6604:	mov     rax, [rbp+directory]
6608:	mov     rdi, rax; string
660B:	call    xstrdup
6610:	mov     [rbx], rax
6613:	nop
6614:	mov     rbx, [rbp+var_8]
6618:	leave
6619:	retn
661A:	endbr64
661E:	push    rbp
661F:	mov     rbp, rsp
6622:	sub     rsp, 10h
6626:	mov     [rbp+this], rdi
662A:	mov     [rbp+link], rsi
662E:	mov     eax, cs:dir_history_count
6634:	lea     edx, [rax-1]
6637:	mov     eax, cs:dir_history_point
663D:	cmp     edx, eax
663F:	jle     short loc_6686
6641:	mov     rdx, cs:dir_history
6648:	mov     eax, cs:dir_history_point
664E:	add     eax, 1
6651:	mov     cs:dir_history_point, eax
6657:	mov     eax, cs:dir_history_point
665D:	cdqe
665F:	shl     rax, 3
6663:	add     rax, rdx
6666:	mov     rcx, [rax]; aux_info
6669:	mov     rdx, [rbp+link]; other
666D:	mov     rax, [rbp+this]
6671:	mov     r8d, 1; repeat_count
6677:	mov     esi, 21h ; '!'; action
667C:	mov     rdi, rax; this
667F:	call    panel_action
6684:	jmp     short loc_6690
6686:	mov     eax, 0
668B:	call    tty_beep
6690:	nop
6691:	leave
6692:	retn
6693:	endbr64
6697:	push    rbp
6698:	mov     rbp, rsp
669B:	sub     rsp, 10h
669F:	mov     [rbp+this], rdi
66A3:	mov     [rbp+link], rsi
66A7:	mov     eax, cs:dir_history_point
66AD:	test    eax, eax
66AF:	jz      short loc_66F6
66B1:	mov     rdx, cs:dir_history
66B8:	mov     eax, cs:dir_history_point
66BE:	sub     eax, 1
66C1:	mov     cs:dir_history_point, eax
66C7:	mov     eax, cs:dir_history_point
66CD:	cdqe
66CF:	shl     rax, 3
66D3:	add     rax, rdx
66D6:	mov     rcx, [rax]; aux_info
66D9:	mov     rdx, [rbp+link]; other
66DD:	mov     rax, [rbp+this]
66E1:	mov     r8d, 1; repeat_count
66E7:	mov     esi, 21h ; '!'; action
66EC:	mov     rdi, rax; this
66EF:	call    panel_action
66F4:	jmp     short loc_6700
66F6:	mov     eax, 0
66FB:	call    tty_beep
6700:	nop
6701:	leave
6702:	retn
6703:	endbr64
6707:	push    rbp
6708:	mov     rbp, rsp
670B:	mov     edi, 0; screen
6710:	call    tty_end
6715:	mov     eax, 0
671A:	call    status_end
671F:	mov     eax, 0
6724:	call    remove_log
6729:	nop
672A:	pop     rbp
672B:	retn
672C:	endbr64
6730:	push    rbp
6731:	mov     rbp, rsp
6734:	sub     rsp, 10h
6738:	mov     [rbp+postmsg], rdi
673C:	mov     eax, 0
6741:	call    tty_get_mode
6746:	cmp     eax, 1
6749:	jnz     short loc_6755
674B:	mov     eax, 0
6750:	call    clean_up
6755:	mov     rdx, cs:g_program
675C:	mov     rax, cs:stderr@GLIBC_2_2_5
6763:	mov     rcx, [rbp+postmsg]
6767:	lea     rsi, aSFatalErrorS; '%s: fatal error: %s.n'
676E:	mov     rdi, rax; stream
6771:	mov     eax, 0
6776:	call    _fprintf
677B:	mov     edi, 1; status
6780:	call    _exit
6785:	endbr64
6789:	push    rbp
678A:	mov     rbp, rsp
678D:	push    rbx
678E:	sub     rsp, 0B8h
6795:	mov     [rbp+command], rdi
679C:	mov     [rbp+dest], rsi
67A3:	mov     [rbp+p], rdx
67AA:	mov     [rbp+l], rcx
67B1:	mov     rax, fs:28h
67BA:	mov     [rbp+var_18], rax
67BE:	xor     eax, eax
67C0:	mov     [rbp+answer], 0
67CB:	mov     [rbp+question], 0
67D3:	mov     [rbp+i_flag], 0
67DD:	mov     [rbp+tmp], 0
67E5:	mov     rax, [rbp+command]
67EC:	mov     rax, [rax+8]
67F0:	mov     [rbp+src], rax
67F4:	mov     rax, [rbp+src]
67F8:	mov     rdi, rax; s
67FB:	call    _strlen
6800:	add     rax, 1
6804:	mov     [rbp+len], rax
6808:	mov     rax, [rbp+len]
680C:	mov     rdi, rax; n
680F:	call    xmalloc
6814:	mov     rdx, [rbp+dest]
681B:	mov     [rdx], rax
681E:	mov     rax, [rbp+dest]
6825:	mov     rax, [rax]
6828:	mov     [rbp+d], rax
682C:	jmp     loc_7145
6831:	mov     rax, [rbp+src]
6835:	movzx   eax, byte ptr [rax]
6838:	cmp     al, 25h ; '%'
683A:	jz      short loc_685E
683C:	mov     rdx, [rbp+src]
6840:	lea     rax, [rdx+1]
6844:	mov     [rbp+src], rax
6848:	mov     rax, [rbp+d]
684C:	lea     rcx, [rax+1]
6850:	mov     [rbp+d], rcx
6854:	movzx   edx, byte ptr [rdx]
6857:	mov     [rax], dl
6859:	jmp     loc_7145
685E:	call    ___ctype_b_loc
6863:	mov     rdx, [rax]
6866:	add     [rbp+src], 1
686B:	mov     rax, [rbp+src]
686F:	movzx   eax, byte ptr [rax]
6872:	movsx   rax, al
6876:	add     rax, rax
6879:	add     rax, rdx
687C:	movzx   eax, word ptr [rax]
687F:	movzx   eax, ax
6882:	and     eax, 200h
6887:	test    eax, eax
6889:	jz      short loc_6894
688B:	mov     rax, [rbp+p]
6892:	jmp     short loc_689B
6894:	mov     rax, [rbp+l]
689B:	mov     [rbp+t], rax
689F:	mov     rax, [rbp+src]
68A3:	movzx   eax, byte ptr [rax]
68A6:	movsx   eax, al
68A9:	sub     eax, 3Fh ; '?'; switch 60 cases
68AC:	cmp     eax, 3Bh
68AF:	ja      def_68D5; jumptable 00000000000068D5 default case, cases 64,67,69,72,74,75,78,81-83,85-89,91-96,99,101,104,106,107,110,113,114,117-121
68B5:	mov     eax, eax
68B7:	lea     rdx, ds:0[rax*4]
68BF:	lea     rax, jpt_68D5
68C6:	mov     eax, ds:(jpt_68D5 - 27808h)[rdx+rax]
68C9:	cdqe
68CB:	lea     rdx, jpt_68D5
68D2:	add     rax, rdx
68D5:	jmp     rax; switch jump
68D8:	mov     eax, cs:busy_0; jumptable 00000000000068D5 case 63
68DE:	test    eax, eax
68E0:	jz      short loc_68F1
68E2:	mov     cs:busy_0, 0
68EC:	jmp     bad_command
68F1:	add     [rbp+src], 1
68F6:	mov     rax, [rbp+src]
68FA:	movzx   eax, byte ptr [rax]
68FD:	cmp     al, 7Bh ; '{'
68FF:	jnz     loc_7169
6905:	add     [rbp+src], 1
690A:	mov     rax, [rbp+src]
690E:	mov     esi, 7Dh ; '}'; c
6913:	mov     rdi, rax; s
6916:	call    _strchr
691B:	mov     [rbp+ptr], rax
691F:	cmp     [rbp+ptr], 0
6924:	jz      loc_716C
692A:	mov     rax, [rbp+ptr]
692E:	mov     byte ptr [rax], 0
6931:	mov     rax, [rbp+src]
6935:	mov     edx, 2; flags
693A:	lea     rcx, options; 'yn'
6941:	mov     rsi, rcx; options
6944:	mov     rdi, rax; message
6947:	call    il_read_char
694C:	mov     [rbp+c], al
6952:	mov     rax, [rbp+ptr]
6956:	mov     byte ptr [rax], 7Dh ; '}'
6959:	cmp     [rbp+c], 79h ; 'y'
6960:	jnz     loc_719D
6966:	mov     rax, [rbp+ptr]
696A:	mov     [rbp+src], rax
696E:	jmp     loc_70A9
6973:	mov     eax, cs:busy_0; jumptable 00000000000068D5 case 115
6979:	test    eax, eax
697B:	jz      short loc_698C
697D:	mov     cs:busy_0, 0
6987:	jmp     bad_command
698C:	add     [rbp+src], 1
6991:	mov     rax, [rbp+src]
6995:	movzx   eax, byte ptr [rax]
6998:	cmp     al, 7Bh ; '{'
699A:	jnz     loc_716F
69A0:	add     [rbp+src], 1
69A5:	mov     rax, [rbp+src]
69A9:	mov     esi, 2Ch ; ','; c
69AE:	mov     rdi, rax; s
69B1:	call    _strchr
69B6:	mov     [rbp+ptr], rax
69BA:	cmp     [rbp+ptr], 0
69BF:	jz      loc_7172
69C5:	mov     rax, [rbp+ptr]
69C9:	mov     byte ptr [rax], 0
69CC:	mov     cs:busy_0, 1
69D6:	mov     rax, [rbp+command]
69DD:	mov     rax, [rax+8]
69E1:	mov     [rbp+save_body], rax
69E5:	mov     rax, [rbp+command]
69EC:	mov     rdx, [rbp+src]
69F0:	mov     [rax+8], rdx
69F4:	mov     rcx, [rbp+l]; l
69FB:	mov     rdx, [rbp+p]; p
6A02:	lea     rsi, [rbp+answer]; dest
6A09:	mov     rax, [rbp+command]
6A10:	mov     rdi, rax; command
6A13:	mov     eax, 0
6A18:	call    command_expand
6A1D:	mov     [rbp+retval], eax
6A23:	mov     rax, [rbp+command]
6A2A:	mov     rdx, [rbp+save_body]
6A2E:	mov     [rax+8], rdx
6A32:	mov     cs:busy_0, 0
6A3C:	cmp     [rbp+retval], 0
6A43:	jg      short loc_6A5E
6A45:	mov     rax, [rbp+ptr]
6A49:	mov     byte ptr [rax], 2Ch ; ','
6A4C:	cmp     [rbp+retval], 0
6A53:	jnz     loc_71A0
6A59:	jmp     bad_command
6A5E:	mov     rax, [rbp+command]
6A65:	mov     rax, [rax]
6A68:	mov     rdi, rax; s
6A6B:	call    _strlen
6A70:	mov     rbx, rax
6A73:	mov     rax, [rbp+answer]
6A7A:	mov     rdi, rax; s
6A7D:	call    _strlen
6A82:	add     rax, rbx
6A85:	add     rax, 11h
6A89:	mov     rdi, rax; n
6A8C:	call    xmalloc
6A91:	mov     [rbp+question], rax
6A95:	mov     rcx, [rbp+answer]
6A9C:	mov     rax, [rbp+command]
6AA3:	mov     rdx, [rax]
6AA6:	mov     rax, [rbp+question]
6AAA:	lea     rsi, aSS_1; '%s: %s'
6AB1:	mov     rdi, rax; s
6AB4:	mov     eax, 0
6AB9:	call    _sprintf
6ABE:	mov     rax, [rbp+answer]
6AC5:	mov     rdi, rax; pointer
6AC8:	call    xfree
6ACD:	mov     [rbp+answer], 0
6AD8:	mov     rax, [rbp+ptr]
6ADC:	lea     rdx, [rax+1]
6AE0:	mov     [rbp+ptr], rdx
6AE4:	mov     byte ptr [rax], 2Ch ; ','
6AE7:	mov     rax, [rbp+ptr]
6AEB:	mov     esi, 7Dh ; '}'; c
6AF0:	mov     rdi, rax; s
6AF3:	call    _strchr
6AF8:	mov     [rbp+src], rax
6AFC:	cmp     [rbp+src], 0
6B01:	jz      loc_7175
6B07:	mov     rax, [rbp+src]
6B0B:	mov     byte ptr [rax], 0
6B0E:	mov     rax, [rbp+question]
6B12:	mov     rdi, rax; s
6B15:	call    _strlen
6B1A:	cmp     rax, 32h ; '2'
6B1E:	jbe     short loc_6B2B
6B20:	mov     rax, [rbp+question]
6B24:	add     rax, 32h ; '2'
6B28:	mov     byte ptr [rax], 0
6B2B:	mov     cs:busy_0, 1
6B35:	mov     rax, [rbp+command]
6B3C:	mov     rax, [rax+8]
6B40:	mov     [rbp+save_body], rax
6B44:	mov     rax, [rbp+command]
6B4B:	mov     rdx, [rbp+ptr]
6B4F:	mov     [rax+8], rdx
6B53:	mov     rcx, [rbp+l]; l
6B5A:	mov     rdx, [rbp+p]; p
6B61:	lea     rsi, [rbp+answer]; dest
6B68:	mov     rax, [rbp+command]
6B6F:	mov     rdi, rax; command
6B72:	mov     eax, 0
6B77:	call    command_expand
6B7C:	mov     [rbp+retval], eax
6B82:	mov     rax, [rbp+command]
6B89:	mov     rdx, [rbp+save_body]
6B8D:	mov     [rax+8], rdx
6B91:	mov     cs:busy_0, 0
6B9B:	cmp     [rbp+retval], 0
6BA2:	jg      short loc_6BD1
6BA4:	mov     rax, [rbp+src]
6BA8:	mov     byte ptr [rax], 7Dh ; '}'
6BAB:	mov     rax, [rbp+question]
6BAF:	mov     rdi, rax; pointer
6BB2:	call    xfree
6BB7:	mov     [rbp+question], 0
6BBF:	cmp     [rbp+retval], 0
6BC6:	jnz     loc_71A3
6BCC:	jmp     bad_command
6BD1:	mov     rax, [rbp+command]
6BD8:	mov     rcx, [rax+28h]; history
6BDC:	mov     rdx, [rbp+answer]; default_string
6BE3:	lea     rsi, [rbp+tmp]; dest
6BE7:	mov     rax, [rbp+question]
6BEB:	mov     rdi, rax; static_text
6BEE:	call    il_read_line
6BF3:	mov     [rbp+flag], rax
6BF7:	mov     rax, [rbp+question]
6BFB:	mov     rdi, rax; pointer
6BFE:	call    xfree
6C03:	mov     rax, [rbp+answer]
6C0A:	mov     rdi, rax; pointer
6C0D:	call    xfree
6C12:	mov     [rbp+answer], 0
6C1D:	mov     rax, [rbp+answer]
6C24:	mov     [rbp+question], rax
6C28:	cmp     [rbp+flag], 0
6C2D:	jnz     short loc_6C3B
6C2F:	mov     rax, [rbp+src]
6C33:	mov     byte ptr [rax], 7Dh ; '}'
6C36:	jmp     strings_dont_match
6C3B:	mov     rax, [rbp+src]
6C3F:	mov     byte ptr [rax], 7Dh ; '}'
6C42:	jmp     loc_70A9
6C47:	mov     rax, [rbp+t]; jumptable 00000000000068D5 cases 70,102
6C4B:	mov     rdi, rax; this
6C4E:	call    panel_get_current_file_type
6C53:	cmp     eax, 1
6C56:	jnz     loc_71A6
6C5C:	jmp     short get_file_name
6C5E:	nop; jumptable 00000000000068D5 cases 65,97
6C5F:	jmp     short get_file_name
6C61:	nop
6C62:	jmp     short get_file_name
6C64:	nop
6C65:	jmp     short get_file_name
6C67:	nop
6C68:	jmp     short get_file_name
6C6A:	nop
6C6B:	mov     rax, [rbp+t]
6C6F:	mov     rdi, rax; this
6C72:	call    panel_get_current_file_name
6C77:	mov     [rbp+ptr], rax
6C7B:	mov     rax, [rbp+ptr]
6C7F:	mov     rdi, rax; s
6C82:	call    _strlen
6C87:	add     rax, 3
6C8B:	mov     rdi, rax; n
6C8E:	call    xmalloc
6C93:	mov     [rbp+tmp], rax
6C97:	mov     rax, [rbp+tmp]
6C9B:	mov     rdx, [rbp+ptr]
6C9F:	lea     rcx, aS_5; ''%s''
6CA6:	mov     rsi, rcx; format
6CA9:	mov     rdi, rax; s
6CAC:	mov     eax, 0
6CB1:	call    _sprintf
6CB6:	jmp     loc_70A9
6CBB:	mov     rax, [rbp+t]; jumptable 00000000000068D5 cases 68,100
6CBF:	mov     rdi, rax; this
6CC2:	call    panel_get_current_file_type
6CC7:	test    eax, eax
6CC9:	jz      short loc_6C61
6CCB:	jmp     strings_dont_match
6CD0:	mov     rax, [rbp+t]; jumptable 00000000000068D5 cases 76,108
6CD4:	mov     rdi, rax; this
6CD7:	call    panel_get_current_file_type
6CDC:	cmp     eax, 2
6CDF:	jz      short loc_6C64
6CE1:	jmp     strings_dont_match
6CE6:	mov     rax, [rbp+t]; jumptable 00000000000068D5 cases 84,116
6CEA:	mov     rdi, rax; this
6CED:	call    panel_get_current_file_type
6CF2:	cmp     eax, 3
6CF5:	jz      loc_6C67
6CFB:	jmp     strings_dont_match
6D00:	mov     rax, [rbp+t]; jumptable 00000000000068D5 cases 90,122
6D04:	mov     rdi, rax; this
6D07:	call    panel_get_current_file_type
6D0C:	cmp     eax, 4
6D0F:	jz      loc_6C6A
6D15:	jmp     strings_dont_match
6D1A:	mov     edi, 10h; jumptable 00000000000068D5 cases 77,109
6D1F:	call    xmalloc
6D24:	mov     [rbp+tmp], rax
6D28:	mov     rax, [rbp+t]
6D2C:	mov     rdi, rax; this
6D2F:	call    panel_get_current_file_mode
6D34:	and     eax, 0FFFh
6D39:	mov     edx, eax
6D3B:	mov     rax, [rbp+tmp]
6D3F:	lea     rcx, aO; '%o'
6D46:	mov     rsi, rcx; format
6D49:	mov     rdi, rax; s
6D4C:	mov     eax, 0
6D51:	call    _sprintf
6D56:	jmp     loc_70A9
6D5B:	mov     rax, [rbp+t]; jumptable 00000000000068D5 cases 79,111
6D5F:	mov     rdi, rax; this
6D62:	call    panel_get_current_file_uid
6D67:	mov     [rbp+uid], eax
6D6D:	mov     eax, [rbp+uid]
6D73:	mov     edi, eax; uid
6D75:	call    _getpwuid
6D7A:	mov     [rbp+pwd], rax
6D7E:	cmp     [rbp+pwd], 0
6D83:	jz      short loc_6D9D
6D85:	mov     rax, [rbp+pwd]
6D89:	mov     rax, [rax]
6D8C:	mov     rdi, rax; string
6D8F:	call    xstrdup
6D94:	mov     [rbp+tmp], rax
6D98:	jmp     loc_70A9
6D9D:	mov     edi, 10h; n
6DA2:	call    xmalloc
6DA7:	mov     [rbp+tmp], rax
6DAB:	mov     edx, [rbp+uid]
6DB1:	mov     rax, [rbp+tmp]
6DB5:	lea     rcx, aO; '%o'
6DBC:	mov     rsi, rcx; format
6DBF:	mov     rdi, rax; s
6DC2:	mov     eax, 0
6DC7:	call    _sprintf
6DCC:	jmp     loc_70A9
6DD1:	mov     rax, [rbp+t]; jumptable 00000000000068D5 cases 71,103
6DD5:	mov     rdi, rax; this
6DD8:	call    panel_get_current_file_gid
6DDD:	mov     [rbp+gid], eax
6DE3:	mov     eax, [rbp+gid]
6DE9:	mov     edi, eax; gid
6DEB:	call    _getgrgid
6DF0:	mov     [rbp+grp], rax
6DF4:	cmp     [rbp+grp], 0
6DF9:	jz      short loc_6E13
6DFB:	mov     rax, [rbp+grp]
6DFF:	mov     rax, [rax]
6E02:	mov     rdi, rax; string
6E05:	call    xstrdup
6E0A:	mov     [rbp+tmp], rax
6E0E:	jmp     loc_70A9
6E13:	mov     edi, 10h; n
6E18:	call    xmalloc
6E1D:	mov     [rbp+tmp], rax
6E21:	mov     edx, [rbp+gid]
6E27:	mov     rax, [rbp+tmp]
6E2B:	lea     rcx, aO; '%o'
6E32:	mov     rsi, rcx; format
6E35:	mov     rdi, rax; s
6E38:	mov     eax, 0
6E3D:	call    _sprintf
6E42:	jmp     loc_70A9
6E47:	mov     rax, [rbp+t]; jumptable 00000000000068D5 cases 80,112
6E4B:	mov     rax, [rax+18h]
6E4F:	mov     rdi, rax; s
6E52:	call    _strlen
6E57:	add     rax, 3
6E5B:	mov     rdi, rax; n
6E5E:	call    xmalloc
6E63:	mov     [rbp+tmp], rax
6E67:	mov     rax, [rbp+t]
6E6B:	mov     rdx, [rax+18h]
6E6F:	mov     rax, [rbp+tmp]
6E73:	lea     rcx, aS_5; ''%s''
6E7A:	mov     rsi, rcx; format
6E7D:	mov     rdi, rax; s
6E80:	mov     eax, 0
6E85:	call    _sprintf
6E8A:	jmp     loc_70A9
6E8F:	mov     rax, [rbp+t]; jumptable 00000000000068D5 cases 66,98
6E93:	mov     rax, [rax+18h]
6E97:	mov     esi, 2Fh ; '/'; c
6E9C:	mov     rdi, rax; s
6E9F:	call    _strrchr
6EA4:	mov     [rbp+ptr], rax
6EA8:	add     [rbp+ptr], 1
6EAD:	mov     rax, [rbp+ptr]
6EB1:	movzx   eax, byte ptr [rax]
6EB4:	test    al, al
6EB6:	jz      short loc_6EBE
6EB8:	mov     rax, [rbp+ptr]
6EBC:	jmp     short loc_6EC5
6EBE:	lea     rax, aRoot; '/root'
6EC5:	mov     [rbp+ptr], rax
6EC9:	mov     rax, [rbp+ptr]
6ECD:	mov     rdi, rax; s
6ED0:	call    _strlen
6ED5:	add     rax, 3
6ED9:	mov     rdi, rax; n
6EDC:	call    xmalloc
6EE1:	mov     [rbp+tmp], rax
6EE5:	mov     rax, [rbp+tmp]
6EE9:	mov     rdx, [rbp+ptr]
6EED:	lea     rcx, aS_5; ''%s''
6EF4:	mov     rsi, rcx; format
6EF7:	mov     rdi, rax; s
6EFA:	mov     eax, 0
6EFF:	call    _sprintf
6F04:	jmp     loc_70A9
6F09:	mov     rax, [rbp+src]; jumptable 00000000000068D5 cases 73,105
6F0D:	movzx   eax, byte ptr [rax]
6F10:	cmp     al, 69h ; 'i'
6F12:	jnz     short loc_6F1B
6F14:	mov     eax, 1
6F19:	jmp     short loc_6F20
6F1B:	mov     eax, 2
6F20:	mov     [rbp+i_flag], eax
6F26:	mov     eax, cs:busy_0
6F2C:	test    eax, eax
6F2E:	jz      short loc_6F7F
6F30:	mov     rax, [rbp+t]
6F34:	mov     eax, [rax+70h]
6F37:	test    eax, eax
6F39:	jz      short loc_6F7F
6F3B:	mov     [rbp+tmplen], 14h
6F43:	mov     rax, [rbp+tmplen]
6F47:	add     rax, 1
6F4B:	mov     rdi, rax; n
6F4E:	call    xmalloc
6F53:	mov     [rbp+tmp], rax
6F57:	mov     rax, [rbp+tmp]
6F5B:	mov     rbx, 64657463656C6573h
6F65:	mov     rsi, 73656972746E6520h
6F6F:	mov     [rax], rbx
6F72:	mov     [rax+8], rsi
6F76:	mov     byte ptr [rax+10h], 0
6F7A:	jmp     loc_70A9
6F7F:	mov     [rbp+tmp], 0
6F87:	mov     [rbp+tmplen], 0
6F8F:	mov     rax, [rbp+t]
6F93:	mov     rdi, rax; this
6F96:	call    panel_init_iterator
6F9B:	jmp     loc_707E
6FA0:	mov     rax, [rbp+tmplen]
6FA4:	mov     [rbp+oldtmplen], rax
6FA8:	mov     rax, [rbp+t]
6FAC:	mov     rcx, [rax+38h]
6FB0:	mov     eax, [rbp+entry]
6FB6:	movsxd  rdx, eax
6FB9:	mov     rax, rdx
6FBC:	shl     rax, 2
6FC0:	add     rax, rdx
6FC3:	shl     rax, 4
6FC7:	add     rax, rcx
6FCA:	mov     rax, [rax]
6FCD:	mov     rdi, rax; s
6FD0:	call    _strlen
6FD5:	mov     rdx, [rbp+tmplen]
6FD9:	add     rax, rdx
6FDC:	add     rax, 3
6FE0:	mov     [rbp+tmplen], rax
6FE4:	mov     rax, [rbp+tmplen]
6FE8:	lea     rdx, [rax+1]
6FEC:	mov     rax, [rbp+tmp]
6FF0:	mov     rsi, rdx; n
6FF3:	mov     rdi, rax; p
6FF6:	call    xrealloc
6FFB:	mov     [rbp+tmp], rax
6FFF:	mov     rdx, [rbp+tmp]
7003:	mov     rax, [rbp+oldtmplen]
7007:	add     rax, rdx
700A:	mov     byte ptr [rax], 22h ; '''
700D:	mov     rax, [rbp+t]
7011:	mov     rcx, [rax+38h]
7015:	mov     eax, [rbp+entry]
701B:	movsxd  rdx, eax
701E:	mov     rax, rdx
7021:	shl     rax, 2
7025:	add     rax, rdx
7028:	shl     rax, 4
702C:	add     rax, rcx
702F:	mov     rax, [rax]
7032:	mov     rcx, [rbp+tmp]
7036:	mov     rdx, [rbp+oldtmplen]
703A:	add     rdx, 1
703E:	add     rdx, rcx
7041:	mov     rsi, rax; src
7044:	mov     rdi, rdx; dest
7047:	call    _strcpy
704C:	mov     rdx, [rbp+tmp]
7050:	mov     rax, [rbp+tmplen]
7054:	sub     rax, 2
7058:	add     rax, rdx
705B:	mov     byte ptr [rax], 22h ; '''
705E:	mov     rdx, [rbp+tmp]
7062:	mov     rax, [rbp+tmplen]
7066:	sub     rax, 1
706A:	add     rax, rdx
706D:	mov     byte ptr [rax], 20h ; ' '
7070:	mov     rdx, [rbp+tmp]
7074:	mov     rax, [rbp+tmplen]
7078:	add     rax, rdx
707B:	mov     byte ptr [rax], 0
707E:	mov     rax, [rbp+t]
7082:	mov     rdi, rax; this
7085:	call    panel_get_next
708A:	mov     [rbp+entry], eax
7090:	cmp     [rbp+entry], 0FFFFFFFFh
7097:	jnz     loc_6FA0
709D:	cmp     [rbp+tmplen], 0
70A2:	jz      loc_71A9
70A8:	nop
70A9:	add     [rbp+src], 1
70AE:	mov     rax, [rbp+d]
70B2:	mov     byte ptr [rax], 0
70B5:	mov     rax, [rbp+tmp]
70B9:	test    rax, rax
70BC:	jz      loc_7145
70C2:	mov     rax, [rbp+tmp]
70C6:	mov     rdi, rax; s
70C9:	call    _strlen
70CE:	add     [rbp+len], rax
70D2:	mov     rax, [rbp+dest]
70D9:	mov     rax, [rax]
70DC:	mov     rdx, [rbp+len]
70E0:	mov     rsi, rdx; n
70E3:	mov     rdi, rax; p
70E6:	call    xrealloc
70EB:	mov     rdx, [rbp+dest]
70F2:	mov     [rdx], rax
70F5:	mov     rdx, [rbp+tmp]
70F9:	mov     rax, [rbp+dest]
7100:	mov     rax, [rax]
7103:	mov     rsi, rdx; src
7106:	mov     rdi, rax; dest
7109:	call    _strcat
710E:	mov     rax, [rbp+dest]
7115:	mov     rbx, [rax]
7118:	mov     rax, [rbp+dest]
711F:	mov     rax, [rax]
7122:	mov     rdi, rax; s
7125:	call    _strlen
712A:	add     rax, rbx
712D:	mov     [rbp+d], rax
7131:	mov     rax, [rbp+tmp]
7135:	mov     rdi, rax; pointer
7138:	call    xfree
713D:	mov     [rbp+tmp], 0
7145:	mov     rax, [rbp+src]
7149:	movzx   eax, byte ptr [rax]
714C:	test    al, al
714E:	jnz     loc_6831
7154:	mov     rax, [rbp+d]
7158:	mov     byte ptr [rax], 0
715B:	mov     eax, [rbp+i_flag]
7161:	add     eax, 1
7164:	jmp     short loc_71D2
7166:	nop; jumptable 00000000000068D5 default case, cases 64,67,69,72,74,75,78,81-83,85-89,91-96,99,101,104,106,107,110,113,114,117-121
7167:	jmp     short bad_command
7169:	nop
716A:	jmp     short bad_command
716C:	nop
716D:	jmp     short bad_command
716F:	nop
7170:	jmp     short bad_command
7172:	nop
7173:	jmp     short bad_command
7175:	nop
7176:	mov     rax, [rbp+dest]
717D:	mov     rax, [rax]
7180:	mov     rdi, rax; pointer
7183:	call    xfree
7188:	mov     rax, [rbp+dest]
718F:	mov     qword ptr [rax], 0
7196:	mov     eax, 0
719B:	jmp     short loc_71D2
719D:	nop
719E:	jmp     short strings_dont_match
71A0:	nop
71A1:	jmp     short strings_dont_match
71A3:	nop
71A4:	jmp     short strings_dont_match
71A6:	nop
71A7:	jmp     short strings_dont_match
71A9:	nop
71AA:	mov     rax, [rbp+tmp]
71AE:	test    rax, rax
71B1:	jz      short loc_71BF
71B3:	mov     rax, [rbp+tmp]
71B7:	mov     rdi, rax; pointer
71BA:	call    xfree
71BF:	mov     rax, [rbp+dest]
71C6:	mov     qword ptr [rax], 0
71CD:	mov     eax, 0FFFFFFFFh
71D2:	mov     rdx, [rbp+var_18]
71D6:	sub     rdx, fs:28h
71DF:	jz      short loc_71E6
71E1:	call    ___stack_chk_fail
71E6:	mov     rbx, [rbp+var_8]
71EA:	leave
71EB:	retn
71EC:	endbr64
71F0:	push    rbp
71F1:	mov     rbp, rsp
71F4:	sub     rsp, 30h
71F8:	mov     [rbp+variable], rdi
71FC:	mov     [rbp+alternate_variable], rsi
7200:	mov     [rbp+value], rdx
7204:	mov     rax, [rbp+variable]
7208:	mov     rdi, rax; name
720B:	call    _getenv
7210:	test    rax, rax
7213:	jnz     short loc_725B
7215:	cmp     [rbp+alternate_variable], 0
721A:	jz      short loc_7248
721C:	mov     rax, [rbp+alternate_variable]
7220:	mov     rdi, rax; name
7223:	call    _getenv
7228:	mov     [rbp+alternate_value], rax
722C:	cmp     [rbp+alternate_value], 0
7231:	jz      short loc_7248
7233:	mov     rdx, [rbp+alternate_value]
7237:	mov     rax, [rbp+variable]
723B:	mov     rsi, rdx; value
723E:	mov     rdi, rax; variable
7241:	call    xsetenv
7246:	jmp     short loc_725B
7248:	mov     rdx, [rbp+value]
724C:	mov     rax, [rbp+variable]
7250:	mov     rsi, rdx; value
7253:	mov     rdi, rax; variable
7256:	call    xsetenv
725B:	nop
725C:	leave
725D:	retn
725E:	endbr64
7262:	push    rbp
7263:	mov     rbp, rsp
7266:	sub     rsp, 0C0h
726D:	mov     [rbp+keys], edi
7273:	mov     [rbp+errors], rsi
727A:	mov     rax, fs:28h
7283:	mov     [rbp+var_8], rax
7287:	xor     eax, eax
7289:	mov     rax, [rbp+errors]
7290:	mov     dword ptr [rax], 0
7296:	mov     eax, [rbp+keys]
729C:	mov     [rbp+i], eax
72A2:	jmp     loc_763E
72A7:	lea     rsi, [rbp+contents]; dest
72AE:	lea     rax, [rbp+key_seq]
72B2:	mov     ecx, 0; seek
72B7:	mov     edx, 6; fields
72BC:	mov     rdi, rax; var_name
72BF:	call    configuration_getvarinfo
72C4:	movzx   eax, [rbp+key_seq]
72C8:	test    al, al
72CA:	jz      loc_7650
72D0:	movzx   eax, [rbp+key_seq]
72D4:	cmp     al, 5Eh ; '^'
72D6:	jz      short loc_7335
72D8:	lea     rax, [rbp+key_seq]
72DC:	mov     rdi, rax; symbol
72DF:	call    tty_get_symbol_key_seq
72E4:	mov     [rbp+key_seq_ptr], rax
72EB:	cmp     [rbp+key_seq_ptr], 0
72F3:	jz      short loc_7329
72F5:	mov     rax, [rbp+key_seq_ptr]
72FC:	movzx   eax, byte ptr [rax]
72FF:	test    al, al
7301:	jz      loc_7636
7307:	mov     rdx, [rbp+key_seq_ptr]
730E:	lea     rax, [rbp+key_seq]
7312:	mov     rsi, rdx; src
7315:	mov     rdi, rax; dest
7318:	call    _strcpy
731D:	mov     [rbp+need_conversion], 0
7327:	jmp     short loc_733F
7329:	mov     [rbp+need_conversion], 1
7333:	jmp     short loc_733F
7335:	mov     [rbp+need_conversion], 1
733F:	mov     esi, 30h ; '0'; s
7344:	mov     edi, 1; n
7349:	call    xcalloc
734E:	mov     [rbp+command], rax
7355:	mov     rax, [rbp+contents]
735C:	test    rax, rax
735F:	jz      short loc_739A
7361:	mov     rax, [rbp+contents]
7368:	mov     rdi, rax; string
736B:	call    xstrdup
7370:	mov     rdx, [rbp+command]
7377:	mov     [rdx], rax
737A:	mov     edi, 8; esize
737F:	call    xstack_init
7384:	mov     rdx, [rbp+command]
738B:	mov     [rdx+28h], rax
738F:	mov     rax, [rbp+contents+10h]
7393:	test    rax, rax
7396:	jz      short loc_73C5
7398:	jmp     short loc_73AE
739A:	mov     rax, [rbp+command]
73A1:	mov     rdi, rax; pointer
73A4:	call    xfree
73A9:	jmp     loc_7637
73AE:	mov     rax, [rbp+contents+10h]
73B2:	mov     rdi, rax; string
73B5:	call    xstrdup
73BA:	mov     rdx, [rbp+command]
73C1:	mov     [rdx+10h], rax
73C5:	mov     rax, [rbp+contents+8]
73CC:	test    rax, rax
73CF:	jz      loc_7482
73D5:	mov     rax, [rbp+contents+8]
73DC:	mov     rdi, rax; string
73DF:	call    xstrdup
73E4:	mov     rdx, [rbp+command]
73EB:	mov     [rdx+8], rax
73EF:	mov     rax, [rbp+contents+18h]
73F3:	test    rax, rax
73F6:	jz      short loc_741D
73F8:	mov     rax, [rbp+contents+18h]
73FC:	movzx   eax, byte ptr [rax]
73FF:	movsx   eax, al
7402:	mov     edi, eax; c
7404:	call    _tolower
7409:	cmp     eax, 79h ; 'y'
740C:	setz    al
740F:	mov     edx, eax
7411:	mov     rax, [rbp+command]
7418:	mov     [rax+18h], dl
741B:	jmp     short loc_7428
741D:	mov     rax, [rbp+command]
7424:	mov     byte ptr [rax+18h], 1
7428:	mov     rax, [rbp+contents+20h]
742C:	test    rax, rax
742F:	jz      short loc_7454
7431:	mov     rax, [rbp+contents+20h]
7435:	movzx   eax, byte ptr [rax]
7438:	movsx   eax, al
743B:	mov     edi, eax; c
743D:	call    _tolower
7442:	cmp     eax, 79h ; 'y'
7445:	setz    al
7448:	mov     edx, eax
744A:	mov     rax, [rbp+command]
7451:	mov     [rax+19h], dl
7454:	mov     rax, [rbp+contents+28h]
7458:	test    rax, rax
745B:	jz      short loc_7485
745D:	mov     rax, [rbp+contents+28h]
7461:	movzx   eax, byte ptr [rax]
7464:	movsx   eax, al
7467:	mov     edi, eax; c
7469:	call    _tolower
746E:	cmp     eax, 79h ; 'y'
7471:	setz    al
7474:	mov     edx, eax
7476:	mov     rax, [rbp+command]
747D:	mov     [rax+1Ah], dl
7480:	jmp     short insert
7482:	nop
7483:	jmp     short insert
7485:	nop
7486:	call    ___ctype_b_loc
748B:	mov     rdx, [rax]
748E:	mov     rax, [rbp+command]
7495:	mov     rax, [rax]
7498:	movzx   eax, byte ptr [rax]
749B:	movsx   rax, al
749F:	add     rax, rax
74A2:	add     rax, rdx
74A5:	movzx   eax, word ptr [rax]
74A8:	movzx   eax, ax
74AB:	and     eax, 200h
74B0:	test    eax, eax
74B2:	jz      loc_7565
74B8:	mov     [rbp+j], 0
74C2:	jmp     loc_7558
74C7:	mov     eax, [rbp+j]
74CD:	movsxd  rdx, eax
74D0:	mov     rax, rdx
74D3:	shl     rax, 3
74D7:	add     rax, rdx
74DA:	shl     rax, 2
74DE:	sub     rax, rdx
74E1:	lea     rdx, builtin
74E8:	add     rdx, rax
74EB:	mov     rax, [rbp+command]
74F2:	mov     rax, [rax]
74F5:	mov     rsi, rdx; s2
74F8:	mov     rdi, rax; s1
74FB:	call    _strcmp
7500:	test    eax, eax
7502:	jnz     short loc_7551
7504:	mov     rax, [rbp+command]
750B:	mov     rax, [rax]
750E:	mov     rdi, rax; pointer
7511:	call    xfree
7516:	mov     eax, [rbp+j]
751C:	movsxd  rdx, eax
751F:	mov     rax, rdx
7522:	shl     rax, 3
7526:	add     rax, rdx
7529:	shl     rax, 2
752D:	sub     rax, rdx
7530:	lea     rdx, builtin
7537:	add     rdx, rax
753A:	mov     rax, [rbp+command]
7541:	mov     [rax], rdx
7544:	mov     rax, [rbp+command]
754B:	mov     byte ptr [rax+1Bh], 1
754F:	jmp     short loc_7565
7551:	add     [rbp+j], 1
7558:	cmp     [rbp+j], 56h ; 'V'
755F:	jle     loc_74C7
7565:	lea     rax, [rbp+key_seq]
7569:	mov     rdi, rax; string
756C:	call    xstrdup
7571:	mov     rdx, [rbp+command]
7578:	mov     [rdx+20h], rax
757C:	mov     rax, [rbp+command]
7583:	movzx   eax, byte ptr [rax+1Bh]
7587:	test    al, al
7589:	jnz     short loc_75AF
758B:	mov     rax, [rbp+command]
7592:	mov     rax, [rax+8]
7596:	test    rax, rax
7599:	jnz     short loc_75AF
759B:	mov     rax, [rbp+command]
75A2:	mov     rax, [rax+10h]
75A6:	test    rax, rax
75A9:	jz      loc_7637
75AF:	cmp     [rbp+need_conversion], 0
75B6:	jz      short loc_761E
75B8:	lea     rax, [rbp+key_seq]
75BC:	mov     rdi, rax; key_seq
75BF:	call    tty_key_human2machine
75C4:	test    rax, rax
75C7:	jz      short loc_75E1
75C9:	mov     rdx, [rbp+command]
75D0:	lea     rax, [rbp+key_seq]
75D4:	mov     rsi, rdx; aux_data
75D7:	mov     rdi, rax; key_seq
75DA:	call    tty_key_list_insert
75DF:	jmp     short loc_7637
75E1:	mov     rdx, cs:g_program
75E8:	mov     rax, cs:stderr@GLIBC_2_2_5
75EF:	lea     rcx, [rbp+key_seq]
75F3:	lea     rsi, aSWarningInvali_0; '%s: warning: invalid key sequence '%s''...
75FA:	mov     rdi, rax; stream
75FD:	mov     eax, 0
7602:	call    _fprintf
7607:	mov     rax, [rbp+errors]
760E:	mov     eax, [rax]
7610:	lea     edx, [rax+1]
7613:	mov     rax, [rbp+errors]
761A:	mov     [rax], edx
761C:	jmp     short loc_7637
761E:	mov     rdx, [rbp+command]
7625:	lea     rax, [rbp+key_seq]
7629:	mov     rsi, rdx; aux_data
762C:	mov     rdi, rax; key_seq
762F:	call    tty_key_list_insert
7634:	jmp     short loc_7637
7636:	nop
7637:	add     [rbp+i], 1
763E:	cmp     [rbp+i], 7FFh
7648:	jle     loc_72A7
764E:	jmp     short loc_7651
7650:	nop
7651:	mov     eax, [rbp+i]
7657:	mov     rdx, [rbp+var_8]
765B:	sub     rdx, fs:28h
7664:	jz      short locret_766B
7666:	call    ___stack_chk_fail
766B:	leave
766C:	retn
766D:	endbr64
7671:	push    rbp
7672:	mov     rbp, rsp
7675:	mov     edi, 0; mode
767A:	call    tty_set_mode
767F:	mov     eax, 0
7684:	call    tty_defaults
7689:	mov     rax, cs:screen
7690:	mov     rdi, rax; buf
7693:	call    tty_put_screen
7698:	nop
7699:	pop     rbp
769A:	retn
769B:	endbr64
769F:	push    rbp
76A0:	mov     rbp, rsp
76A3:	push    rbx
76A4:	sub     rsp, 48h
76A8:	mov     rax, fs:28h
76B1:	mov     [rbp+var_18], rax
76B5:	xor     eax, eax
76B7:	lea     rax, PS1; ' $ '
76BE:	mov     rdi, rax; s
76C1:	call    _strlen
76C6:	mov     edx, eax
76C8:	mov     eax, 33h ; '3'
76CD:	sub     eax, edx
76CF:	mov     ebx, eax
76D1:	mov     rax, cs:src_panel
76D8:	mov     rdi, rax; this
76DB:	call    panel_get_path
76E0:	mov     rcx, rax
76E3:	lea     rax, [rbp+temp]
76E7:	mov     edx, ebx; len
76E9:	mov     rsi, rax; temppath
76EC:	mov     rdi, rcx; path
76EF:	call    truncate_string
76F4:	mov     rdx, rax
76F7:	lea     rax, PS1; ' $ '
76FE:	mov     rsi, rax; src
7701:	mov     rdi, rdx; dest
7704:	call    _strcat
7709:	mov     rdi, rax; static_text
770C:	call    il_set_static_text
7711:	nop
7712:	mov     rax, [rbp+var_18]
7716:	sub     rax, fs:28h
771F:	jz      short loc_7726
7721:	call    ___stack_chk_fail
7726:	mov     rbx, [rbp+var_8]
772A:	leave
772B:	retn
772C:	endbr64
7730:	push    rbp
7731:	mov     rbp, rsp
7734:	mov     rdx, cs:src_panel; other
773B:	mov     rax, cs:dst_panel
7742:	mov     r8d, 1; repeat_count
7748:	mov     rcx, 0FFFFFFFFFFFFFFFFh; aux_info
774F:	mov     esi, 22h ; '''; action
7754:	mov     rdi, rax; this
7757:	call    panel_action
775C:	mov     rdx, cs:dst_panel; other
7763:	mov     rax, cs:src_panel
776A:	mov     r8d, 1; repeat_count
7770:	mov     rcx, 0FFFFFFFFFFFFFFFFh; aux_info
7777:	mov     esi, 22h ; '''; action
777C:	mov     rdi, rax; this
777F:	call    panel_action
7784:	nop
7785:	pop     rbp
7786:	retn
7787:	endbr64
778B:	push    rbp
778C:	mov     rbp, rsp
778F:	mov     rax, cs:g_program
7796:	mov     rsi, rax
7799:	lea     rax, aUsageSHvcblpPa; 'usage: %s [-hvcblp] [path1] [path2]n'
77A0:	mov     rdi, rax; format
77A3:	mov     eax, 0
77A8:	call    _printf
77AD:	lea     rax, s; ' -h         print this help message'
77B4:	mov     rdi, rax; s
77B7:	call    _puts
77BC:	lea     rax, aVPrintTheVersi; ' -v         print the version number'
77C3:	mov     rdi, rax; s
77C6:	call    _puts
77CB:	lea     rax, aCUseAnsiColors; ' -c         use ANSI colors'
77D2:	mov     rdi, rax; s
77D5:	call    _puts
77DA:	lea     rax, aBDonTUseAnsiCo; ' -b         don't use ANSI colors'
77E1:	mov     rdi, rax; s
77E4:	call    _puts
77E9:	lea     rax, aLDonTUseTheLas; ' -l         don't use the last screen c'...
77F0:	mov     rdi, rax; s
77F3:	call    _puts
77F8:	lea     rax, aPOutputFinalPa; ' -p         output final path at exit'
77FF:	mov     rdi, rax; s
7802:	call    _puts
7807:	nop
7808:	pop     rbp
7809:	retn
780A:	endbr64
780E:	push    rbp
780F:	mov     rbp, rsp
7812:	push    rbx
7813:	sub     rsp, 168h
781A:	mov     [rbp+argc], edi
7820:	mov     [rbp+argv], rsi
7827:	mov     rax, fs:28h
7830:	mov     [rbp+var_18], rax
7834:	xor     eax, eax
7836:	mov     [rbp+len], 0
7841:	mov     [rbp+output_final_path], 0
784B:	mov     [rbp+saved_il], 0
7856:	mov     [rbp+ansi_colors], 0FFFFFFFFh
7860:	mov     [rbp+use_last_screen_character], 1
786A:	mov     [rbp+app_end], 0
7874:	mov     [rbp+first_time], 1
787E:	mov     [rbp+errors], 0
7888:	mov     [rbp+cmdln], 0
7893:	mov     [rbp+input], 0
789E:	mov     [rbp+search_string], 0
78A9:	mov     eax, 0
78AE:	call    signals_init
78B3:	lea     rax, default_value
78BA:	mov     rsi, rax; locale
78BD:	mov     edi, 6; category
78C2:	call    _setlocale
78C7:	mov     rax, [rbp+argv]
78CE:	mov     rax, [rax]
78D1:	mov     cs:g_program, rax
78D8:	lea     rax, name; 'HOME'
78DF:	mov     rdi, rax; name
78E2:	call    _getenv
78E7:	mov     cs:g_home, rax
78EE:	mov     rax, cs:g_home
78F5:	test    rax, rax
78F8:	jnz     short loc_7908
78FA:	lea     rax, asc_272FB; '.'
7901:	mov     cs:g_home, rax
7908:	mov     eax, 0
790D:	call    compute_directories
7912:	mov     eax, 0
7917:	call    update_path
791C:	mov     eax, 0
7921:	call    get_login_name
7926:	mov     edi, 25h ; '%'; n
792B:	call    xmalloc
7930:	mov     cs:exit_msg, rax
7937:	mov     rax, cs:exit_msg
793E:	lea     rdx, aGnuInteractive; 'GNU Interactive Tools'
7945:	lea     rcx, aExitS; 'Exit %s? '
794C:	mov     rsi, rcx; format
794F:	mov     rdi, rax; s
7952:	mov     eax, 0
7957:	call    _sprintf
795C:	lea     rax, aColorterm; 'COLORTERM'
7963:	mov     rdi, rax; name
7966:	call    _getenv
796B:	test    rax, rax
796E:	jz      loc_7A67
7974:	mov     [rbp+ansi_colors], 1
797E:	jmp     loc_7A67
7983:	mov     eax, [rbp+c]
7989:	sub     eax, 3Fh ; '?'; switch 56 cases
798C:	cmp     eax, 37h
798F:	ja      def_79B5; jumptable 00000000000079B5 default case, cases 64-97,100-103,105-107,109-111,113-117
7995:	mov     eax, eax
7997:	lea     rdx, ds:0[rax*4]
799F:	lea     rax, jpt_79B5
79A6:	mov     eax, ds:(jpt_79B5 - 278F8h)[rdx+rax]
79A9:	cdqe
79AB:	lea     rdx, jpt_79B5
79B2:	add     rax, rdx
79B5:	jmp     rax; switch jump
79B8:	mov     eax, 0; jumptable 00000000000079B5 case 104
79BD:	call    usage
79C2:	mov     eax, 0
79C7:	jmp     loc_AD7B
79CC:	lea     rax, a492; jumptable 00000000000079B5 case 118
79D3:	mov     rdx, rax
79D6:	lea     rax, aGnuInteractive; 'GNU Interactive Tools'
79DD:	mov     rsi, rax
79E0:	lea     rax, aSS; '%s %sn'
79E7:	mov     rdi, rax; format
79EA:	mov     eax, 0
79EF:	call    _printf
79F4:	mov     eax, 0
79F9:	jmp     loc_AD7B
79FE:	mov     [rbp+ansi_colors], 1; jumptable 00000000000079B5 case 99
7A08:	jmp     short loc_7A67
7A0A:	mov     [rbp+ansi_colors], 0; jumptable 00000000000079B5 case 98
7A14:	jmp     short loc_7A67
7A16:	mov     [rbp+use_last_screen_character], 0; jumptable 00000000000079B5 case 108
7A20:	jmp     short loc_7A67
7A22:	mov     [rbp+output_final_path], 1; jumptable 00000000000079B5 case 112
7A2C:	jmp     short loc_7A67
7A2E:	mov     eax, 1; jumptable 00000000000079B5 case 63
7A33:	jmp     loc_AD7B
7A38:	mov     rdx, cs:g_program; jumptable 00000000000079B5 default case, cases 64-97,100-103,105-107,109-111,113-117
7A3F:	mov     rax, cs:stderr@GLIBC_2_2_5
7A46:	lea     rcx, aSUnknownError; '%s: unknown errorn'
7A4D:	mov     rsi, rcx; format
7A50:	mov     rdi, rax; stream
7A53:	mov     eax, 0
7A58:	call    _fprintf
7A5D:	mov     eax, 1
7A62:	jmp     loc_AD7B
7A67:	mov     rcx, [rbp+argv]
7A6E:	mov     eax, [rbp+argc]
7A74:	lea     rdx, shortopts; 'hvcblp'
7A7B:	mov     rsi, rcx; argv
7A7E:	mov     edi, eax; argc
7A80:	call    _getopt
7A85:	mov     [rbp+c], eax
7A8B:	cmp     [rbp+c], 0FFFFFFFFh
7A92:	jnz     loc_7983
7A98:	lea     rax, asc_272FB; '.'
7A9F:	mov     [rbp+right_panel_path], rax
7AA6:	mov     rax, [rbp+right_panel_path]
7AAD:	mov     [rbp+left_panel_path], rax
7AB4:	mov     eax, cs:optind@GLIBC_2_2_5
7ABA:	cmp     [rbp+argc], eax
7AC0:	jle     loc_7B4E
7AC6:	mov     eax, cs:optind@GLIBC_2_2_5
7ACC:	lea     edx, [rax+1]
7ACF:	mov     cs:optind@GLIBC_2_2_5, edx
7AD5:	cdqe
7AD7:	lea     rdx, ds:0[rax*8]
7ADF:	mov     rax, [rbp+argv]
7AE6:	add     rax, rdx
7AE9:	mov     rax, [rax]
7AEC:	mov     rdi, rax; string
7AEF:	call    xstrdup
7AF4:	mov     [rbp+left_panel_path], rax
7AFB:	mov     eax, cs:optind@GLIBC_2_2_5
7B01:	cmp     [rbp+argc], eax
7B07:	jle     short loc_7B40
7B09:	mov     eax, cs:optind@GLIBC_2_2_5
7B0F:	lea     edx, [rax+1]
7B12:	mov     cs:optind@GLIBC_2_2_5, edx
7B18:	cdqe
7B1A:	lea     rdx, ds:0[rax*8]
7B22:	mov     rax, [rbp+argv]
7B29:	add     rax, rdx
7B2C:	mov     rax, [rax]
7B2F:	mov     rdi, rax; string
7B32:	call    xstrdup
7B37:	mov     [rbp+right_panel_path], rax
7B3E:	jmp     short loc_7B4E
7B40:	mov     rax, [rbp+left_panel_path]
7B47:	mov     [rbp+right_panel_path], rax
7B4E:	mov     eax, cs:optind@GLIBC_2_2_5
7B54:	cmp     [rbp+argc], eax
7B5A:	jle     short loc_7B81
7B5C:	mov     rdx, cs:g_program
7B63:	mov     rax, cs:stderr@GLIBC_2_2_5
7B6A:	lea     rcx, aSWarningInvali; '%s: warning: invalid extra options igno'...
7B71:	mov     rsi, rcx; format
7B74:	mov     rdi, rax; stream
7B77:	mov     eax, 0
7B7C:	call    _fprintf
7B81:	mov     edi, 0Ah; c
7B86:	call    _putchar
7B8B:	lea     r9, aMar282023; 'Mar 28 2023'
7B92:	lea     r8, a143302; '14:33:02'
7B99:	lea     rax, aX8664UnknownLi; 'x86_64-unknown-linux-gnu'
7BA0:	mov     rcx, rax
7BA3:	lea     rax, a492; '4.9.2'
7BAA:	mov     rdx, rax
7BAD:	lea     rax, aGnuInteractive; 'GNU Interactive Tools'
7BB4:	mov     rsi, rax
7BB7:	lea     rax, aSSSSS; '%s %s (%s), %s %sn'
7BBE:	mov     rdi, rax; format
7BC1:	mov     eax, 0
7BC6:	call    _printf
7BCB:	mov     rax, cs:copyright
7BD2:	mov     rdi, rax; format
7BD5:	mov     eax, 0
7BDA:	call    _printf
7BDF:	lea     rax, value; 'vi'
7BE6:	mov     rdx, rax; value
7BE9:	lea     rax, alternate_variable; 'EDITOR'
7BF0:	mov     rsi, rax; alternate_variable
7BF3:	lea     rax, variable; 'GIT_EDITOR'
7BFA:	mov     rdi, rax; variable
7BFD:	mov     eax, 0
7C02:	call    add_to_environment
7C07:	lea     rax, aMore; 'more'
7C0E:	mov     rdx, rax; value
7C11:	lea     rax, aPager; 'PAGER'
7C18:	mov     rsi, rax; alternate_variable
7C1B:	lea     rax, aGitPager; 'GIT_PAGER'
7C22:	mov     rdi, rax; variable
7C25:	mov     eax, 0
7C2A:	call    add_to_environment
7C2F:	lea     rax, aLynx; 'lynx'
7C36:	mov     rdx, rax; value
7C39:	mov     esi, 0; alternate_variable
7C3E:	lea     rax, aGitBrowser; 'GIT_BROWSER'
7C45:	mov     rdi, rax; variable
7C48:	mov     eax, 0
7C4D:	call    add_to_environment
7C52:	lea     rax, aBinSh; '/bin/sh'
7C59:	mov     rdx, rax; value
7C5C:	lea     rax, aShell; 'SHELL'
7C63:	mov     rsi, rax; alternate_variable
7C66:	lea     rax, aGitShell; 'GIT_SHELL'
7C6D:	mov     rdi, rax; variable
7C70:	mov     eax, 0
7C75:	call    add_to_environment
7C7A:	lea     rax, aMail; 'mail'
7C81:	mov     rdx, rax; value
7C84:	mov     esi, 0; alternate_variable
7C89:	lea     rax, aGitRmail; 'GIT_RMAIL'
7C90:	mov     rdi, rax; variable
7C93:	mov     eax, 0
7C98:	call    add_to_environment
7C9D:	lea     rax, aFree_0; 'free'
7CA4:	mov     rdx, rax; value
7CA7:	mov     esi, 0; alternate_variable
7CAC:	lea     rax, aGitVmstat; 'GIT_VMSTAT'
7CB3:	mov     rdi, rax; variable
7CB6:	mov     eax, 0
7CBB:	call    add_to_environment
7CC0:	mov     edi, 0; kbd_mode
7CC5:	call    tty_init
7CCA:	mov     eax, 0
7CCF:	call    common_configuration_init
7CD4:	lea     rax, section; '[GITFM-FTI]'
7CDB:	mov     rdi, rax; section
7CDE:	call    use_section
7CE3:	mov     eax, 0
7CE8:	call    get_file_type_info
7CED:	lea     rax, aGitfmKeys; '[GITFM-Keys]'
7CF4:	mov     rdi, rax; section
7CF7:	call    use_section
7CFC:	lea     rax, [rbp+errors]
7D03:	mov     rsi, rax; errors
7D06:	mov     edi, 0; keys
7D0B:	mov     eax, 0
7D10:	call    read_keys
7D15:	mov     [rbp+keys], eax
7D1B:	mov     edx, cs:wait_msg
7D21:	mov     eax, [rbp+errors]
7D27:	add     eax, edx
7D29:	mov     cs:wait_msg, eax
7D2F:	mov     eax, 0
7D34:	call    configuration_end
7D39:	mov     eax, 0
7D3E:	call    specific_configuration_init
7D43:	test    eax, eax
7D45:	setz    al
7D48:	movzx   edx, al
7D4B:	mov     eax, cs:wait_msg
7D51:	add     eax, edx
7D53:	mov     cs:wait_msg, eax
7D59:	lea     rax, aTmpdir; 'TMPDIR'
7D60:	mov     rdi, rax; name
7D63:	call    _getenv
7D68:	mov     [rbp+temporary_directory], rax
7D6F:	cmp     [rbp+temporary_directory], 0
7D77:	jnz     short loc_7D87
7D79:	lea     rax, aTmp; '/tmp'
7D80:	mov     [rbp+temporary_directory], rax
7D87:	mov     rax, [rbp+temporary_directory]
7D8E:	mov     rdi, rax; s
7D91:	call    _strlen
7D96:	add     rax, 21h ; '!'
7D9A:	mov     rdi, rax; n
7D9D:	call    xmalloc
7DA2:	mov     cs:stdout_log_name, rax
7DA9:	mov     rax, [rbp+temporary_directory]
7DB0:	mov     rdi, rax; s
7DB3:	call    _strlen
7DB8:	add     rax, 21h ; '!'
7DBC:	mov     rdi, rax; n
7DBF:	call    xmalloc
7DC4:	mov     cs:stderr_log_name, rax
7DCB:	mov     edi, 0; timer
7DD0:	call    _time
7DD5:	mov     edi, eax; seed
7DD7:	call    _srand
7DDC:	call    _rand
7DE1:	pxor    xmm1, xmm1
7DE5:	cvtsi2sd xmm1, eax
7DE9:	movsd   xmm0, cs:qword_276F0
7DF1:	mulsd   xmm0, xmm1
7DF5:	movsd   xmm1, cs:qword_276F8
7DFD:	divsd   xmm0, xmm1
7E01:	cvttsd2si eax, xmm0
7E05:	add     eax, 1
7E08:	mov     [rbp+r1], eax
7E0E:	call    _rand
7E13:	pxor    xmm1, xmm1
7E17:	cvtsi2sd xmm1, eax
7E1B:	movsd   xmm0, cs:qword_276F0
7E23:	mulsd   xmm0, xmm1
7E27:	movsd   xmm1, cs:qword_276F8
7E2F:	divsd   xmm0, xmm1
7E33:	cvttsd2si eax, xmm0
7E37:	add     eax, 1
7E3A:	mov     [rbp+r2], eax
7E40:	call    _getpid
7E45:	mov     ecx, eax
7E47:	mov     rax, cs:stdout_log_name
7E4E:	mov     esi, [rbp+r1]
7E54:	mov     rdx, [rbp+temporary_directory]
7E5B:	mov     r8d, esi
7E5E:	lea     rsi, aSGit1DD; '%s/git.1.%d.%d'
7E65:	mov     rdi, rax; s
7E68:	mov     eax, 0
7E6D:	call    _sprintf
7E72:	call    _getpid
7E77:	mov     ecx, eax
7E79:	mov     rax, cs:stderr_log_name
7E80:	mov     esi, [rbp+r2]
7E86:	mov     rdx, [rbp+temporary_directory]
7E8D:	mov     r8d, esi
7E90:	lea     rsi, aSGit2DD; '%s/git.2.%d.%d'
7E97:	mov     rdi, rax; s
7E9A:	mov     eax, 0
7E9F:	call    _sprintf
7EA4:	lea     rax, aSetup; '[Setup]'
7EAB:	mov     rdi, rax; section
7EAE:	call    use_section
7EB3:	cmp     [rbp+ansi_colors], 0FFFFFFFFh
7EBA:	jnz     short loc_7ED8
7EBC:	mov     esi, 0; default_value
7EC1:	lea     rax, var_name; 'AnsiColors'
7EC8:	mov     rdi, rax; var_name
7ECB:	call    get_flag_var
7ED0:	mov     cs:AnsiColors, eax
7ED6:	jmp     short loc_7EE4
7ED8:	mov     eax, [rbp+ansi_colors]
7EDE:	mov     cs:AnsiColors, eax
7EE4:	cmp     [rbp+use_last_screen_character], 0
7EEB:	jz      short loc_7F09
7EED:	mov     esi, 0; default_value
7EF2:	lea     rax, aUselastscreenc; 'UseLastScreenChar'
7EF9:	mov     rdi, rax; var_name
7EFC:	call    get_flag_var
7F01:	mov     cs:UseLastScreenChar, eax
7F07:	jmp     short loc_7F13
7F09:	mov     cs:UseLastScreenChar, 0
7F13:	mov     eax, cs:UseLastScreenChar
7F19:	mov     edi, eax; last_char_flag
7F1B:	call    tty_set_last_char_flag
7F20:	lea     rax, aGitfmSetup; '[GITFM-Setup]'
7F27:	mov     rdi, rax; section
7F2A:	call    use_section
7F2F:	mov     eax, cs:AnsiColors
7F35:	cmp     eax, 1
7F38:	jnz     short loc_7F56
7F3A:	mov     esi, 1; default_value
7F3F:	lea     rax, aTypesensitivit; 'TypeSensitivity'
7F46:	mov     rdi, rax; var_name
7F49:	call    get_flag_var
7F4E:	mov     cs:TypeSensitivity, eax
7F54:	jmp     short loc_7F60
7F56:	mov     cs:TypeSensitivity, 0
7F60:	mov     esi, 0; default_value
7F65:	lea     rax, aConfirmonexit; 'ConfirmOnExit'
7F6C:	mov     rdi, rax; var_name
7F6F:	call    get_flag_var
7F74:	mov     cs:ConfirmOnExit, eax
7F7A:	lea     rax, default_value
7F81:	mov     rsi, rax; default_value
7F84:	lea     rax, aNormalmodehelp; 'NormalModeHelp'
7F8B:	mov     rdi, rax; var_name
7F8E:	call    get_string_var
7F93:	mov     cs:NormalModeHelp, rax
7F9A:	lea     rax, default_value
7FA1:	mov     rsi, rax; default_value
7FA4:	lea     rax, aCommandlinemod; 'CommandLineModeHelp'
7FAB:	mov     rdi, rax; var_name
7FAE:	call    get_string_var
7FB3:	mov     cs:CommandLineModeHelp, rax
7FBA:	mov     eax, cs:AnsiColors
7FC0:	test    eax, eax
7FC2:	jz      short loc_7FCD
7FC4:	lea     rax, color_section; '[GITFM-Color]'
7FCB:	jmp     short loc_7FD4
7FCD:	lea     rax, monochrome_section; '[GITFM-Monochrome]'
7FD4:	mov     rdi, rax; section
7FD7:	call    use_section
7FDC:	mov     edx, 8; fields_no
7FE1:	lea     rax, TitleFields
7FE8:	mov     rsi, rax; colorset_name
7FEB:	lea     rax, TitleColors
7FF2:	mov     rdi, rax; charset
7FF5:	call    get_colorset_var
7FFA:	lea     rax, section; '[GITFM-FTI]'
8001:	mov     rdi, rax; section
8004:	call    use_section
8009:	mov     eax, 0
800E:	call    get_file_type_info
8013:	lea     rax, aGitfmKeys; '[GITFM-Keys]'
801A:	mov     rdi, rax; section
801D:	call    use_section
8022:	lea     rdx, [rbp+errors]
8029:	mov     eax, [rbp+keys]
802F:	mov     rsi, rdx; errors
8032:	mov     edi, eax; keys
8034:	mov     eax, 0
8039:	call    read_keys
803E:	mov     [rbp+keys], eax
8044:	mov     edx, cs:wait_msg
804A:	mov     eax, [rbp+errors]
8050:	add     eax, edx
8052:	mov     cs:wait_msg, eax
8058:	cmp     [rbp+keys], 800h
8062:	jnz     short loc_808B
8064:	mov     rdx, cs:g_program
806B:	mov     rax, cs:stderr@GLIBC_2_2_5
8072:	mov     ecx, 800h
8077:	lea     rsi, aSTooManyKeySeq; '%s: too many key sequences; only %d are'...
807E:	mov     rdi, rax; stream
8081:	mov     eax, 0
8086:	call    _fprintf
808B:	call    _getuid
8090:	test    eax, eax
8092:	jnz     short loc_809B
8094:	mov     byte ptr cs:PS1+1, 23h ; '#'; '$ '
809B:	mov     eax, 0
80A0:	call    xgetcwd
80A5:	mov     [rbp+current_path], rax
80AC:	cmp     [rbp+current_path], 0
80B4:	jnz     short loc_80CA
80B6:	lea     rax, postmsg; '`getcwd' failed: permission denied'
80BD:	mov     rdi, rax; postmsg
80C0:	mov     eax, 0
80C5:	call    fatal
80CA:	mov     eax, 0
80CF:	call    tty_start_cursorapp
80D4:	mov     eax, 0
80D9:	call    title_init
80DE:	mov     eax, 0
80E3:	call    il_init
80E8:	mov     rax, cs:NormalModeHelp
80EF:	mov     rdi, rax; default_message
80F2:	call    status_init
80F7:	mov     rax, [rbp+left_panel_path]
80FE:	movzx   eax, byte ptr [rax]
8101:	cmp     al, 2Fh ; '/'
8103:	jnz     short loc_811D
8105:	mov     rax, [rbp+left_panel_path]
810C:	mov     rdi, rax; string
810F:	call    xstrdup
8114:	mov     [rbp+panel_path], rax
811B:	jmp     short loc_817D
811D:	mov     rax, [rbp+current_path]
8124:	mov     rdi, rax; s
8127:	call    _strlen
812C:	mov     rbx, rax
812F:	mov     rax, [rbp+left_panel_path]
8136:	mov     rdi, rax; s
8139:	call    _strlen
813E:	add     rax, rbx
8141:	add     rax, 2
8145:	mov     rdi, rax; n
8148:	call    xmalloc
814D:	mov     [rbp+panel_path], rax
8154:	mov     rcx, [rbp+left_panel_path]
815B:	mov     rdx, [rbp+current_path]
8162:	mov     rax, [rbp+panel_path]
8169:	lea     rsi, aSS_0; '%s/%s'
8170:	mov     rdi, rax; s
8173:	mov     eax, 0
8178:	call    _sprintf
817D:	mov     rax, [rbp+panel_path]
8184:	mov     rdi, rax; path
8187:	call    panel_init
818C:	mov     cs:left_panel, rax
8193:	mov     rax, [rbp+panel_path]
819A:	mov     rdi, rax; pointer
819D:	call    xfree
81A2:	mov     rax, [rbp+right_panel_path]
81A9:	movzx   eax, byte ptr [rax]
81AC:	cmp     al, 2Fh ; '/'
81AE:	jnz     short loc_81C8
81B0:	mov     rax, [rbp+right_panel_path]
81B7:	mov     rdi, rax; string
81BA:	call    xstrdup
81BF:	mov     [rbp+panel_path], rax
81C6:	jmp     short loc_8228
81C8:	mov     rax, [rbp+current_path]
81CF:	mov     rdi, rax; s
81D2:	call    _strlen
81D7:	mov     rbx, rax
81DA:	mov     rax, [rbp+right_panel_path]
81E1:	mov     rdi, rax; s
81E4:	call    _strlen
81E9:	add     rax, rbx
81EC:	add     rax, 2
81F0:	mov     rdi, rax; n
81F3:	call    xmalloc
81F8:	mov     [rbp+panel_path], rax
81FF:	mov     rcx, [rbp+right_panel_path]
8206:	mov     rdx, [rbp+current_path]
820D:	mov     rax, [rbp+panel_path]
8214:	lea     rsi, aSS_0; '%s/%s'
821B:	mov     rdi, rax; s
821E:	mov     eax, 0
8223:	call    _sprintf
8228:	mov     rax, [rbp+panel_path]
822F:	mov     rdi, rax; path
8232:	call    panel_init
8237:	mov     cs:right_panel, rax
823E:	mov     rax, [rbp+panel_path]
8245:	mov     rdi, rax; pointer
8248:	call    xfree
824D:	mov     rax, [rbp+current_path]
8254:	mov     rdi, rax; pointer
8257:	call    xfree
825C:	mov     eax, 0
8261:	call    configuration_end
8266:	mov     rax, cs:left_panel
826D:	mov     cs:src_panel, rax
8274:	mov     rax, cs:right_panel
827B:	mov     cs:dst_panel, rax
8282:	mov     edi, 0; resize_required
8287:	mov     eax, 0
828C:	call    resize
8291:	mov     rax, cs:screen
8298:	mov     rdi, rax; buf
829B:	call    tty_get_screen
82A0:	mov     edi, 1; mode
82A5:	call    tty_set_mode
82AA:	mov     eax, 0
82AF:	call    tty_defaults
82B4:	mov     cs:dir_history, 0
82BF:	mov     cs:dir_history_count, 0
82C9:	mov     cs:dir_history_point, 0
82D3:	mov     edi, 1; status
82D8:	call    signal_handlers
82DD:	mov     rax, cs:src_panel
82E4:	mov     rdi, rax; this
82E7:	call    panel_get_path
82EC:	mov     rdi, rax; string
82EF:	call    tty_update_title
82F4:	mov     eax, cs:wait_msg
82FA:	test    eax, eax
82FC:	jz      short loc_8354
82FE:	mov     edi, 0; seconds
8303:	call    _alarm
8308:	mov     rax, cs:__bss_start
830F:	mov     rcx, rax; s
8312:	mov     edx, 21h ; '!'; n
8317:	mov     esi, 1; size
831C:	lea     rax, aPressAlmostAny; 'Press almost any key to continuen'
8323:	mov     rdi, rax; ptr
8326:	call    _fwrite
832B:	mov     eax, cs:tty_lines
8331:	sub     eax, 1
8334:	mov     esi, 0; x
8339:	mov     edi, eax; y
833B:	call    tty_goto
8340:	mov     edi, 0; repeat_count
8345:	call    tty_get_key
834A:	mov     cs:wait_msg, 0
8354:	mov     rax, cs:src_panel
835B:	mov     rdi, rax; this
835E:	call    panel_get_path
8363:	mov     rdi, rax; string
8366:	call    tty_update_title
836B:	mov     eax, 0
8370:	call    get_local_time
8375:	mov     edx, [rax]
8377:	mov     eax, 3Ch ; '<'
837C:	sub     eax, edx
837E:	mov     edi, eax; seconds
8380:	call    _alarm
8385:	mov     eax, cs:panel_no
838B:	test    eax, eax
838D:	jz      short loc_8398
838F:	mov     rax, cs:right_panel
8396:	jmp     short loc_839F
8398:	mov     rax, cs:left_panel
839F:	mov     cs:src_panel, rax
83A6:	mov     eax, cs:panel_no
83AC:	test    eax, eax
83AE:	jz      short loc_83B9
83B0:	mov     rax, cs:left_panel
83B7:	jmp     short loc_83C0
83B9:	mov     rax, cs:right_panel
83C0:	mov     cs:dst_panel, rax
83C7:	mov     eax, cs:tty_lines
83CD:	cmp     eax, 6
83D0:	jg      short loc_83E6
83D2:	mov     eax, 0
83D7:	call    tty_defaults
83DC:	mov     eax, 0
83E1:	call    tty_clear
83E6:	mov     eax, 0
83EB:	call    title_update
83F0:	mov     eax, 0
83F5:	call    status_default
83FA:	mov     rax, [rbp+saved_il]
8401:	mov     rdi, rax; saved_il
8404:	call    il_restore
8409:	mov     eax, 0
840E:	call    tty_update
8413:	mov     eax, 0
8418:	call    il_save
841D:	mov     [rbp+saved_il], rax
8424:	mov     eax, 0
8429:	call    reread
842E:	mov     edi, 0; signum
8433:	mov     eax, 0
8438:	call    refresh
843D:	mov     rax, [rbp+saved_il]
8444:	mov     rdi, rax; saved_il
8447:	call    il_restore
844C:	mov     rax, cs:src_panel
8453:	mov     esi, 1; status
8458:	mov     rdi, rax; this
845B:	call    panel_set_focus
8460:	cmp     [rbp+first_time], 0
8467:	jz      short loc_848F
8469:	mov     rax, cs:src_panel
8470:	mov     rdi, rax; this
8473:	call    panel_get_path
8478:	mov     rdi, rax; directory
847B:	mov     eax, 0
8480:	call    dir_history_add
8485:	mov     [rbp+first_time], 0
848F:	mov     eax, 0
8494:	call    set_prompt
8499:	mov     eax, 0
849E:	call    il_save
84A3:	mov     [rbp+saved_il], rax
84AA:	jmp     loc_ACC2
84AF:	mov     rax, [rbp+saved_il]
84B6:	mov     rdi, rax; saved_il
84B9:	call    il_restore
84BE:	mov     eax, 0
84C3:	call    il_save
84C8:	mov     [rbp+saved_il], rax
84CF:	mov     eax, 0
84D4:	call    il_update
84D9:	mov     eax, 0
84DE:	call    il_update_point
84E3:	mov     eax, 0
84E8:	call    tty_update
84ED:	lea     rax, [rbp+cmdln]
84F4:	mov     rdi, rax; dest
84F7:	call    il_get_contents
84FC:	mov     cs:user_heart_attack, 0
8506:	jmp     short loc_8517
8508:	mov     edi, 0; status_message
850D:	mov     eax, 0
8512:	call    report_undefined_key
8517:	lea     rax, [rbp+repeat_count]
851E:	mov     rdi, rax; repeat_count
8521:	call    tty_get_key
8526:	mov     [rbp+ks], rax
852A:	cmp     [rbp+ks], 0
852F:	jz      short loc_8508
8531:	mov     eax, 0
8536:	call    status_update
853B:	mov     rax, [rbp+ks]
853F:	mov     rax, [rax]
8542:	movzx   eax, byte ptr [rax]
8545:	movzx   eax, al
8548:	mov     [rbp+key], eax
854E:	mov     rax, [rbp+ks]
8552:	mov     rax, [rax+10h]
8556:	mov     [rbp+command], rax
855A:	cmp     [rbp+command], 0
855F:	jz      loc_8A13
8565:	mov     rax, [rbp+command]
8569:	movzx   eax, byte ptr [rax+1Bh]
856D:	test    al, al
856F:	jz      short loc_85B2
8571:	mov     rax, [rbp+command]
8575:	mov     rax, [rax]
8578:	lea     rdx, builtin
857F:	sub     rax, rdx
8582:	mov     rcx, rax
8585:	mov     rdx, 0EA0EA0EA0EA0EA1h
858F:	mov     rax, rcx
8592:	imul    rdx
8595:	mov     rax, rdx
8598:	sar     rax, 1
859B:	sar     rcx, 3Fh
859F:	mov     rdx, rcx
85A2:	sub     rax, rdx
85A5:	not     eax
85A7:	mov     [rbp+key], eax
85AD:	jmp     loc_8A13
85B2:	mov     rax, [rbp+command]
85B6:	mov     rax, [rax]
85B9:	test    rax, rax
85BC:	jz      loc_8A13
85C2:	mov     rax, cs:src_panel
85C9:	mov     rdi, rax; this
85CC:	call    panel_no_optimizations
85D1:	mov     rax, cs:dst_panel
85D8:	mov     rdi, rax; this
85DB:	call    panel_no_optimizations
85E0:	mov     rax, [rbp+command]
85E4:	mov     rax, [rax+8]
85E8:	test    rax, rax
85EB:	jz      loc_8997
85F1:	mov     qword ptr [rbp+iai.action], 0
85F9:	mov     rcx, cs:dst_panel; l
8600:	mov     rdx, cs:src_panel; p
8607:	lea     rsi, [rbp+iai]; dest
860B:	mov     rax, [rbp+command]
860F:	mov     rdi, rax; command
8612:	mov     eax, 0
8617:	call    command_expand
861C:	mov     [rbp+retval], eax
8622:	cmp     [rbp+retval], 0
8629:	jz      loc_8924
862F:	cmp     [rbp+retval], 0
8636:	jle     loc_8991
863C:	mov     rax, [rbp+command]
8640:	mov     rax, [rax]
8643:	mov     rdi, rax; s
8646:	call    _strlen
864B:	mov     rbx, rax
864E:	mov     rax, qword ptr [rbp+iai.action]
8652:	mov     rdi, rax; s
8655:	call    _strlen
865A:	add     rax, rbx
865D:	add     rax, 21h ; '!'
8661:	mov     [rbp+msglen], rax
8665:	mov     rax, [rbp+msglen]
8669:	mov     rdi, rax; n
866C:	call    xmalloc
8671:	mov     [rbp+msg], rax
8675:	mov     rcx, qword ptr [rbp+iai.action]
8679:	mov     rax, [rbp+command]
867D:	mov     rdx, [rax]
8680:	mov     rax, [rbp+msg]
8684:	lea     rsi, aSS_1; '%s: %s'
868B:	mov     rdi, rax; s
868E:	mov     eax, 0
8693:	call    _sprintf
8698:	mov     rax, [rbp+msg]
869C:	mov     edx, 1; alignment
86A1:	mov     esi, 1; type
86A6:	mov     rdi, rax; message
86A9:	call    status
86AE:	mov     eax, 0
86B3:	call    tty_update
86B8:	mov     rax, [rbp+msg]
86BC:	mov     rdi, rax; pointer
86BF:	call    xfree
86C4:	mov     rax, [rbp+command]
86C8:	movzx   eax, byte ptr [rax+1Ah]
86CC:	test    al, al
86CE:	jz      short loc_873A
86D0:	mov     rax, [rbp+command]
86D4:	mov     rax, [rax]
86D7:	mov     rdi, rax; s
86DA:	call    _strlen
86DF:	add     rax, 41h ; 'A'
86E3:	mov     rdi, rax; n
86E6:	call    xmalloc
86EB:	mov     [rbp+msg], rax
86EF:	mov     rax, [rbp+command]
86F3:	mov     rdx, [rax]
86F6:	mov     rax, [rbp+msg]
86FA:	mov     rcx, rdx
86FD:	lea     rdx, aUserDefined; 'user-defined'
8704:	lea     rsi, aWaitRunningSCo; 'Wait, running %s command %s...'
870B:	mov     rdi, rax; s
870E:	mov     eax, 0
8713:	call    _sprintf
8718:	mov     rax, [rbp+msg]
871C:	mov     rdi, rax; message
871F:	call    il_message
8724:	mov     eax, 0
8729:	call    tty_update
872E:	mov     rax, [rbp+msg]
8732:	mov     rdi, rax; pointer
8735:	call    xfree
873A:	mov     rax, qword ptr [rbp+iai.action]
873E:	mov     rdi, rax; cmd
8741:	call    is_a_bg_command
8746:	test    eax, eax
8748:	jnz     short loc_8756
874A:	mov     rax, qword ptr [rbp+iai.action]
874E:	mov     rdi, rax; string
8751:	call    tty_update_title
8756:	mov     rax, [rbp+command]
875A:	movzx   eax, byte ptr [rax+1Ah]
875E:	movsx   edx, al
8761:	mov     rax, qword ptr [rbp+iai.action]
8765:	mov     esi, edx; hide
8767:	mov     rdi, rax; command
876A:	call    start
876F:	mov     [rbp+child_exit_code], eax
8775:	mov     rax, qword ptr [rbp+iai.action]
8779:	mov     rdi, rax; pointer
877C:	call    xfree
8781:	mov     rax, [rbp+command]
8785:	movzx   eax, byte ptr [rax+1Ah]
8789:	test    al, al
878B:	jz      short loc_87F2
878D:	mov     eax, [rbp+child_exit_code]
8793:	and     eax, 7Fh
8796:	add     eax, 1
8799:	sar     al, 1
879B:	test    al, al
879D:	jle     short loc_87BA
879F:	mov     edx, 0Ch; flags
87A4:	mov     esi, 0; options
87A9:	lea     rax, message; 'Command interrupted by signal'
87B0:	mov     rdi, rax; message
87B3:	call    il_read_char
87B8:	jmp     short loc_882D
87BA:	mov     eax, [rbp+child_exit_code]
87C0:	and     eax, 7Fh
87C3:	test    eax, eax
87C5:	jnz     short loc_882D
87C7:	mov     eax, [rbp+child_exit_code]
87CD:	sar     eax, 8
87D0:	movzx   eax, al
87D3:	test    eax, eax
87D5:	jz      short loc_882D
87D7:	mov     eax, 0
87DC:	call    tty_beep
87E1:	mov     rax, [rbp+command]
87E5:	mov     rax, [rax]
87E8:	mov     rdi, rax; command
87EB:	call    display_errors
87F0:	jmp     short loc_882D
87F2:	mov     rax, [rbp+command]
87F6:	movzx   eax, byte ptr [rax+18h]
87FA:	test    al, al
87FC:	jz      short loc_880D
87FE:	mov     rax, cs:screen
8805:	mov     rdi, rax; buf
8808:	call    tty_get_screen
880D:	mov     eax, 0
8812:	call    tty_touch
8817:	mov     rax, [rbp+command]
881B:	movzx   eax, byte ptr [rax+19h]
881F:	test    al, al
8821:	jz      short loc_882D
8823:	mov     cs:wait_msg, 1
882D:	mov     eax, [rbp+child_exit_code]
8833:	and     eax, 7Fh
8836:	test    eax, eax
8838:	jnz     loc_88C1
883E:	mov     eax, [rbp+child_exit_code]
8844:	sar     eax, 8
8847:	movzx   eax, al
884A:	test    eax, eax
884C:	jnz     short loc_88C1
884E:	mov     rax, [rbp+command]
8852:	mov     rax, [rax+10h]
8856:	test    rax, rax
8859:	jz      short loc_88C1
885B:	mov     rax, [rbp+command]
885F:	mov     rax, [rax+10h]
8863:	mov     rdi, rax; string
8866:	mov     eax, 0
886B:	call    tilde_expand
8870:	mov     [rbp+expanded_dir], rax
8874:	mov     rdx, cs:dst_panel; other
887B:	mov     rax, cs:src_panel
8882:	mov     rcx, [rbp+expanded_dir]; aux_info
8886:	mov     r8d, 1; repeat_count
888C:	mov     esi, 21h ; '!'; action
8891:	mov     rdi, rax; this
8894:	call    panel_action
8899:	mov     rax, cs:src_panel
88A0:	mov     rdi, rax; this
88A3:	call    panel_get_path
88A8:	mov     rdi, rax; directory
88AB:	mov     eax, 0
88B0:	call    dir_history_add
88B5:	mov     rax, [rbp+expanded_dir]
88B9:	mov     rdi, rax; pointer
88BC:	call    xfree
88C1:	mov     eax, [rbp+child_exit_code]
88C7:	and     eax, 7Fh
88CA:	test    eax, eax
88CC:	jnz     restart
88D2:	mov     eax, [rbp+child_exit_code]
88D8:	sar     eax, 8
88DB:	movzx   eax, al
88DE:	test    eax, eax
88E0:	jnz     restart
88E6:	cmp     [rbp+retval], 2
88ED:	jnz     short loc_8903
88EF:	mov     rax, cs:src_panel
88F6:	mov     rdi, rax; this
88F9:	call    panel_unselect_all
88FE:	jmp     restart
8903:	cmp     [rbp+retval], 3
890A:	jnz     restart
8910:	mov     rax, cs:dst_panel
8917:	mov     rdi, rax; this
891A:	call    panel_unselect_all
891F:	jmp     restart
8924:	mov     rax, [rbp+ks]
8928:	mov     rax, [rax]
892B:	mov     rdi, rax; s
892E:	call    _strlen
8933:	add     rax, 51h ; 'Q'
8937:	mov     rdi, rax; n
893A:	call    xmalloc
893F:	mov     [rbp+msg_0], rax
8943:	mov     rax, [rbp+command]
8947:	mov     rcx, [rax+20h]
894B:	mov     rax, [rbp+command]
894F:	mov     rdx, [rax]
8952:	mov     rax, [rbp+msg_0]
8956:	lea     rsi, aSInvalidComman; '%s: invalid command on key sequence %s '...
895D:	mov     rdi, rax; s
8960:	mov     eax, 0
8965:	call    _sprintf
896A:	mov     rax, [rbp+msg_0]
896E:	mov     edx, 1Ch; flags
8973:	mov     esi, 0; options
8978:	mov     rdi, rax; message
897B:	call    il_read_char
8980:	mov     rax, [rbp+msg_0]
8984:	mov     rdi, rax; pointer
8987:	call    xfree
898C:	jmp     loc_ACC2
8991:	nop
8992:	jmp     loc_ACC2
8997:	mov     rax, [rbp+command]
899B:	mov     rax, [rax+10h]
899F:	test    rax, rax
89A2:	jz      restart
89A8:	mov     rax, [rbp+command]
89AC:	mov     rax, [rax+10h]
89B0:	mov     rdi, rax; string
89B3:	mov     eax, 0
89B8:	call    tilde_expand
89BD:	mov     [rbp+expanded_dir_0], rax
89C1:	mov     rdx, cs:dst_panel; other
89C8:	mov     rax, cs:src_panel
89CF:	mov     rcx, [rbp+expanded_dir_0]; aux_info
89D3:	mov     r8d, 1; repeat_count
89D9:	mov     esi, 21h ; '!'; action
89DE:	mov     rdi, rax; this
89E1:	call    panel_action
89E6:	mov     rax, cs:src_panel
89ED:	mov     rdi, rax; this
89F0:	call    panel_get_path
89F5:	mov     rdi, rax; directory
89F8:	mov     eax, 0
89FD:	call    dir_history_add
8A02:	mov     rax, [rbp+expanded_dir_0]
8A06:	mov     rdi, rax; pointer
8A09:	call    xfree
8A0E:	jmp     restart
8A13:	mov     eax, [rbp+key]
8A19:	add     eax, 57h ; 'W'; switch 95 cases
8A1C:	cmp     eax, 5Eh
8A1F:	ja      def_8A45; jumptable 0000000000008A45 default case, cases -66--62,-60--43,0-6
8A25:	mov     eax, eax
8A27:	lea     rdx, ds:0[rax*4]
8A2F:	lea     rax, jpt_8A45
8A36:	mov     eax, ds:(jpt_8A45 - 279D8h)[rdx+rax]
8A39:	cdqe
8A3B:	lea     rdx, jpt_8A45
8A42:	add     rax, rdx
8A45:	jmp     rax; switch jump
8A48:	mov     rax, [rbp+saved_il]; jumptable 0000000000008A45 case 7
8A4F:	mov     rdi, rax; some_il
8A52:	call    il_free
8A57:	mov     edi, 0; store
8A5C:	call    il_kill_line
8A61:	mov     eax, 0
8A66:	call    il_save
8A6B:	mov     [rbp+saved_il], rax
8A72:	jmp     loc_ACC2
8A77:	mov     eax, cs:two_panel_mode; jumptable 0000000000008A45 case -35
8A7D:	test    eax, eax
8A7F:	jz      loc_A65C
8A85:	mov     eax, [rbp+repeat_count]
8A8B:	and     eax, 1
8A8E:	test    eax, eax
8A90:	jnz     short loc_8A97
8A92:	jmp     loc_ACC2
8A97:	mov     rax, cs:src_panel
8A9E:	mov     esi, 0; status
8AA3:	mov     rdi, rax; this
8AA6:	call    panel_set_focus
8AAB:	mov     rax, cs:src_panel
8AB2:	mov     cs:tmp_panel, rax
8AB9:	mov     rax, cs:dst_panel
8AC0:	mov     cs:src_panel, rax
8AC7:	mov     rax, cs:tmp_panel
8ACE:	mov     cs:dst_panel, rax
8AD5:	mov     eax, cs:panel_no
8ADB:	test    eax, eax
8ADD:	setz    al
8AE0:	movzx   eax, al
8AE3:	mov     cs:panel_no, eax
8AE9:	mov     rax, cs:src_panel
8AF0:	mov     esi, 1; status
8AF5:	mov     rdi, rax; this
8AF8:	call    panel_set_focus
8AFD:	mov     rax, [rbp+saved_il]
8B04:	mov     rdi, rax; some_il
8B07:	call    il_free
8B0C:	mov     eax, 0
8B11:	call    set_prompt
8B16:	mov     eax, 0
8B1B:	call    il_save
8B20:	mov     [rbp+saved_il], rax
8B27:	mov     rax, cs:src_panel
8B2E:	mov     rdi, rax; this
8B31:	call    panel_get_path
8B36:	mov     rdi, rax; string
8B39:	call    tty_update_title
8B3E:	jmp     loc_ACC2
8B43:	mov     ecx, [rbp+repeat_count]; jumptable 0000000000008A45 case -33
8B49:	mov     rdx, cs:dst_panel; other
8B50:	mov     rax, cs:src_panel
8B57:	mov     r8d, ecx; repeat_count
8B5A:	mov     ecx, 0; aux_info
8B5F:	mov     esi, 1Bh; action
8B64:	mov     rdi, rax; this
8B67:	call    panel_action
8B6C:	jmp     loc_ACC2
8B71:	mov     ecx, [rbp+repeat_count]; jumptable 0000000000008A45 case -34
8B77:	mov     rdx, cs:dst_panel; other
8B7E:	mov     rax, cs:src_panel
8B85:	mov     r8d, ecx; repeat_count
8B88:	mov     ecx, 0; aux_info
8B8D:	mov     esi, 1Ch; action
8B92:	mov     rdi, rax; this
8B95:	call    panel_action
8B9A:	jmp     loc_ACC2
8B9F:	mov     [rbp+action_status], 0; jumptable 0000000000008A45 case -61
8BA9:	mov     rax, [rbp+saved_il]
8BB0:	mov     rdi, rax; some_il
8BB3:	call    il_free
8BB8:	lea     rax, [rbp+cmdln]
8BBF:	mov     rdi, rax; dest
8BC2:	call    il_get_contents
8BC7:	mov     rax, [rbp+cmdln]
8BCE:	mov     rdi, rax; s
8BD1:	call    _strlen
8BD6:	sub     eax, 1
8BD9:	mov     [rbp+i], eax
8BDF:	jmp     short loc_8C16
8BE1:	mov     rdx, [rbp+cmdln]
8BE8:	mov     eax, [rbp+i]
8BEE:	cdqe
8BF0:	add     rax, rdx
8BF3:	movzx   eax, byte ptr [rax]
8BF6:	cmp     al, 20h ; ' '
8BF8:	jnz     short loc_8C21
8BFA:	mov     rdx, [rbp+cmdln]
8C01:	mov     eax, [rbp+i]
8C07:	cdqe
8C09:	add     rax, rdx
8C0C:	mov     byte ptr [rax], 0
8C0F:	sub     [rbp+i], 1
8C16:	cmp     [rbp+i], 0
8C1D:	jns     short loc_8BE1
8C1F:	jmp     short loc_8C22
8C21:	nop
8C22:	mov     rax, [rbp+cmdln]
8C29:	movzx   eax, byte ptr [rax]
8C2C:	movsx   eax, al
8C2F:	cmp     eax, 2Dh ; '-'
8C32:	jz      loc_8CDA
8C38:	cmp     eax, 2Dh ; '-'
8C3B:	jg      loc_8DF4
8C41:	cmp     eax, 2Bh ; '+'
8C44:	jz      short loc_8C65
8C46:	cmp     eax, 2Bh ; '+'
8C49:	jg      loc_8DF4
8C4F:	test    eax, eax
8C51:	jz      loc_8D4F
8C57:	cmp     eax, 2Ah ; '*'
8C5A:	jz      loc_8DAD
8C60:	jmp     loc_8DF4
8C65:	mov     rax, [rbp+cmdln]
8C6C:	add     rax, 1
8C70:	movzx   eax, byte ptr [rax]
8C73:	test    al, al
8C75:	jnz     short loc_8C9F
8C77:	mov     rdx, cs:dst_panel; other
8C7E:	mov     rax, cs:src_panel
8C85:	mov     r8d, 1; repeat_count
8C8B:	mov     ecx, 0; aux_info
8C90:	mov     esi, 5; action
8C95:	mov     rdi, rax; this
8C98:	call    panel_action
8C9D:	jmp     short loc_8CCB
8C9F:	mov     rax, [rbp+cmdln]
8CA6:	lea     rcx, [rax+1]; aux_info
8CAA:	mov     rdx, cs:dst_panel; other
8CB1:	mov     rax, cs:src_panel
8CB8:	mov     r8d, 1; repeat_count
8CBE:	mov     esi, 24h ; '$'; action
8CC3:	mov     rdi, rax; this
8CC6:	call    panel_action
8CCB:	mov     edi, 0; store
8CD0:	call    il_kill_line
8CD5:	jmp     loc_8F3D
8CDA:	mov     rax, [rbp+cmdln]
8CE1:	add     rax, 1
8CE5:	movzx   eax, byte ptr [rax]
8CE8:	test    al, al
8CEA:	jnz     short loc_8D14
8CEC:	mov     rdx, cs:dst_panel; other
8CF3:	mov     rax, cs:src_panel
8CFA:	mov     r8d, 1; repeat_count
8D00:	mov     ecx, 0; aux_info
8D05:	mov     esi, 6; action
8D0A:	mov     rdi, rax; this
8D0D:	call    panel_action
8D12:	jmp     short loc_8D40
8D14:	mov     rax, [rbp+cmdln]
8D1B:	lea     rcx, [rax+1]; aux_info
8D1F:	mov     rdx, cs:dst_panel; other
8D26:	mov     rax, cs:src_panel
8D2D:	mov     r8d, 1; repeat_count
8D33:	mov     esi, 25h ; '%'; action
8D38:	mov     rdi, rax; this
8D3B:	call    panel_action
8D40:	mov     edi, 0; store
8D45:	call    il_kill_line
8D4A:	jmp     loc_8F3D
8D4F:	mov     rcx, cs:screen; aux_info
8D56:	mov     rdx, cs:dst_panel; other
8D5D:	mov     rax, cs:src_panel
8D64:	mov     r8d, 1; repeat_count
8D6A:	mov     esi, 1; action
8D6F:	mov     rdi, rax; this
8D72:	call    panel_action
8D77:	mov     [rbp+action_status], eax
8D7D:	mov     rax, cs:src_panel
8D84:	mov     rdi, rax; this
8D87:	call    panel_get_path
8D8C:	mov     rdi, rax; string
8D8F:	call    tty_update_title
8D94:	mov     edi, 0; store
8D99:	call    il_kill_line
8D9E:	mov     eax, 0
8DA3:	call    set_prompt
8DA8:	jmp     loc_8F3D
8DAD:	mov     rax, [rbp+cmdln]
8DB4:	add     rax, 1
8DB8:	movzx   eax, byte ptr [rax]
8DBB:	test    al, al
8DBD:	jnz     short loc_8DF4
8DBF:	mov     rdx, cs:dst_panel; other
8DC6:	mov     rax, cs:src_panel
8DCD:	mov     r8d, 1; repeat_count
8DD3:	mov     ecx, 0; aux_info
8DD8:	mov     esi, 7; action
8DDD:	mov     rdi, rax; this
8DE0:	call    panel_action
8DE5:	mov     edi, 0; store
8DEA:	call    il_kill_line
8DEF:	jmp     loc_8F3D
8DF4:	mov     rax, [rbp+cmdln]
8DFB:	lea     rdx, [rbp+output_string]
8E02:	mov     rsi, rdx; output
8E05:	mov     rdi, rax; hstring
8E08:	mov     eax, 0
8E0D:	call    history_expand
8E12:	test    eax, eax
8E14:	js      loc_8F23
8E1A:	mov     rax, [rbp+output_string]
8E21:	mov     rdi, rax; cmd
8E24:	call    is_an_empty_command
8E29:	test    eax, eax
8E2B:	jz      short loc_8E5C
8E2D:	mov     eax, 0
8E32:	call    il_save
8E37:	mov     [rbp+saved_il], rax
8E3E:	mov     edx, 1Ch; flags
8E43:	mov     esi, 0; options
8E48:	lea     rax, aVoidCommand; 'Void command.'
8E4F:	mov     rdi, rax; message
8E52:	call    il_read_char
8E57:	jmp     loc_8F3D
8E5C:	mov     rax, [rbp+output_string]
8E63:	mov     rdi, rax; cmd
8E66:	call    is_a_bg_command
8E6B:	mov     [rbp+bg_cmd], eax
8E71:	cmp     [rbp+bg_cmd], 0
8E78:	jnz     short loc_8E89
8E7A:	mov     rax, [rbp+output_string]
8E81:	mov     rdi, rax; string
8E84:	call    tty_update_title
8E89:	mov     edi, 0; store
8E8E:	call    il_kill_line
8E93:	mov     rax, [rbp+output_string]
8E9A:	mov     rdi, rax; text
8E9D:	call    il_insert_text
8EA2:	mov     rax, [rbp+output_string]
8EA9:	mov     edx, [rbp+bg_cmd]
8EAF:	mov     esi, edx; hide
8EB1:	mov     rdi, rax; command
8EB4:	call    start
8EB9:	mov     edi, 0; dir
8EBE:	call    il_history
8EC3:	mov     edi, 0; store
8EC8:	call    il_kill_line
8ECD:	cmp     [rbp+bg_cmd], 0
8ED4:	jnz     short loc_8F3C
8ED6:	mov     rax, cs:src_panel
8EDD:	mov     rdi, rax; this
8EE0:	call    panel_no_optimizations
8EE5:	mov     rax, cs:dst_panel
8EEC:	mov     rdi, rax; this
8EEF:	call    panel_no_optimizations
8EF4:	mov     eax, 0
8EF9:	call    tty_touch
8EFE:	mov     rax, cs:screen
8F05:	mov     rdi, rax; buf
8F08:	call    tty_get_screen
8F0D:	mov     [rbp+action_status], 1
8F17:	mov     cs:wait_msg, 1
8F21:	jmp     short loc_8F3C
8F23:	mov     rax, [rbp+output_string]
8F2A:	mov     edx, 1Ch; flags
8F2F:	mov     esi, 0; options
8F34:	mov     rdi, rax; message
8F37:	call    il_read_char
8F3C:	nop
8F3D:	mov     eax, 0
8F42:	call    il_save
8F47:	mov     [rbp+saved_il], rax
8F4E:	cmp     [rbp+action_status], 0
8F55:	jz      loc_ACC2
8F5B:	jmp     restart
8F60:	mov     [rbp+i], 0; jumptable 0000000000008A45 case -27
8F6A:	jmp     short loc_8F99
8F6C:	mov     rdx, cs:dst_panel; other
8F73:	mov     rax, cs:src_panel
8F7A:	mov     r8d, 1; repeat_count
8F80:	mov     ecx, 0; aux_info
8F85:	mov     esi, 4; action
8F8A:	mov     rdi, rax; this
8F8D:	call    panel_action
8F92:	add     [rbp+i], 1
8F99:	mov     eax, [rbp+repeat_count]
8F9F:	cmp     [rbp+i], eax
8FA5:	jl      short loc_8F6C
8FA7:	jmp     loc_ACC2
8FAC:	mov     [rbp+i], 0; jumptable 0000000000008A45 case -31
8FB6:	jmp     short loc_8FE5
8FB8:	mov     rdx, cs:dst_panel; other
8FBF:	mov     rax, cs:src_panel
8FC6:	mov     r8d, 1; repeat_count
8FCC:	mov     ecx, 0; aux_info
8FD1:	mov     esi, 1Dh; action
8FD6:	mov     rdi, rax; this
8FD9:	call    panel_action
8FDE:	add     [rbp+i], 1
8FE5:	mov     eax, [rbp+repeat_count]
8FEB:	cmp     [rbp+i], eax
8FF1:	jl      short loc_8FB8
8FF3:	jmp     loc_ACC2
8FF8:	mov     [rbp+i], 0; jumptable 0000000000008A45 case -32
9002:	jmp     short loc_9031
9004:	mov     rdx, cs:dst_panel; other
900B:	mov     rax, cs:src_panel
9012:	mov     r8d, 1; repeat_count
9018:	mov     ecx, 0; aux_info
901D:	mov     esi, 1Eh; action
9022:	mov     rdi, rax; this
9025:	call    panel_action
902A:	add     [rbp+i], 1
9031:	mov     eax, [rbp+repeat_count]
9037:	cmp     [rbp+i], eax
903D:	jl      short loc_9004
903F:	jmp     loc_ACC2
9044:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -29
904B:	mov     rax, cs:src_panel
9052:	mov     r8d, 1; repeat_count
9058:	mov     ecx, 0; aux_info
905D:	mov     esi, 1Fh; action
9062:	mov     rdi, rax; this
9065:	call    panel_action
906A:	jmp     loc_ACC2
906F:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -30
9076:	mov     rax, cs:src_panel
907D:	mov     r8d, 1; repeat_count
9083:	mov     ecx, 0; aux_info
9088:	mov     esi, 20h ; ' '; action
908D:	mov     rdi, rax; this
9090:	call    panel_action
9095:	jmp     loc_ACC2
909A:	mov     eax, 0; jumptable 0000000000008A45 case -8
909F:	call    reread
90A4:	mov     rax, cs:src_panel
90AB:	mov     rdi, rax; this
90AE:	call    panel_get_path
90B3:	mov     rdi, rax; string
90B6:	call    tty_update_title
90BB:	mov     edi, 0; signum
90C0:	mov     eax, 0
90C5:	call    refresh
90CA:	jmp     loc_ACC2
90CF:	mov     eax, [rbp+repeat_count]; jumptable 0000000000008A45 case -7
90D5:	and     eax, 1
90D8:	test    eax, eax
90DA:	jnz     short loc_90E1
90DC:	jmp     loc_ACC2
90E1:	mov     edi, 0; seconds
90E6:	call    _alarm
90EB:	mov     rax, cs:screen
90F2:	mov     rdi, rax; buf
90F5:	call    tty_put_screen
90FA:	mov     rax, cs:CommandLineModeHelp
9101:	mov     edx, 0; alignment
9106:	mov     esi, 0; type
910B:	mov     rdi, rax; message
910E:	call    status
9113:	mov     eax, 0
9118:	call    tty_update
911D:	mov     rax, [rbp+saved_il]
9124:	mov     rdi, rax; saved_il
9127:	call    il_restore
912C:	mov     eax, 0
9131:	call    il_save
9136:	mov     [rbp+saved_il], rax
913D:	mov     eax, 0
9142:	call    il_update
9147:	mov     eax, 0
914C:	call    il_update_point
9151:	mov     eax, 0
9156:	call    tty_update
915B:	lea     rax, [rbp+cmdln]
9162:	mov     rdi, rax; dest
9165:	call    il_get_contents
916A:	mov     cs:current_mode, 1
9174:	jmp     short loc_918A
9176:	mov     rax, cs:CommandLineModeHelp
917D:	mov     rdi, rax; status_message
9180:	mov     eax, 0
9185:	call    report_undefined_key
918A:	lea     rax, [rbp+repeat_count]
9191:	mov     rdi, rax; repeat_count
9194:	call    tty_get_key
9199:	mov     [rbp+ks], rax
919D:	cmp     [rbp+ks], 0
91A2:	jz      short loc_9176
91A4:	mov     rax, [rbp+ks]
91A8:	mov     rax, [rax]
91AB:	movzx   eax, byte ptr [rax]
91AE:	movzx   eax, al
91B1:	mov     [rbp+key], eax
91B7:	mov     rax, [rbp+ks]
91BB:	mov     rax, [rax+10h]
91BF:	mov     [rbp+command], rax
91C3:	cmp     [rbp+command], 0
91C8:	jz      short loc_9212
91CA:	mov     rax, [rbp+command]
91CE:	movzx   eax, byte ptr [rax+1Bh]
91D2:	test    al, al
91D4:	jz      short loc_9212
91D6:	mov     rax, [rbp+command]
91DA:	mov     rax, [rax]
91DD:	lea     rdx, builtin
91E4:	sub     rax, rdx
91E7:	mov     rcx, rax
91EA:	mov     rdx, 0EA0EA0EA0EA0EA1h
91F4:	mov     rax, rcx
91F7:	imul    rdx
91FA:	mov     rax, rdx
91FD:	sar     rax, 1
9200:	sar     rcx, 3Fh
9204:	mov     rdx, rcx
9207:	sub     rax, rdx
920A:	not     eax
920C:	mov     [rbp+key], eax
9212:	cmp     [rbp+key], 0FFFFFFF9h
9219:	jnz     short loc_924D
921B:	mov     eax, [rbp+repeat_count]
9221:	and     eax, 1
9224:	test    eax, eax
9226:	jz      short loc_924D
9228:	mov     rax, [rbp+saved_il]
922F:	mov     rdi, rax; some_il
9232:	call    il_free
9237:	mov     eax, 0
923C:	call    il_save
9241:	mov     [rbp+saved_il], rax
9248:	jmp     end_tty_mode
924D:	cmp     [rbp+key], 0FFFFFFC3h
9254:	jz      loc_92E5
925A:	cmp     [rbp+key], 0FFFFFFC3h
9261:	jl      def_92B3; jumptable 00000000000092B3 default case, cases -32--11,-9,-7,-4-6
9267:	cmp     [rbp+key], 7
926E:	jg      def_92B3; jumptable 00000000000092B3 default case, cases -32--11,-9,-7,-4-6
9274:	cmp     [rbp+key], 0FFFFFFDEh
927B:	jl      def_92B3; jumptable 00000000000092B3 default case, cases -32--11,-9,-7,-4-6
9281:	mov     eax, [rbp+key]
9287:	add     eax, 22h ; '''; switch 42 cases
928A:	cmp     eax, 29h
928D:	ja      def_92B3; jumptable 00000000000092B3 default case, cases -32--11,-9,-7,-4-6
9293:	mov     eax, eax
9295:	lea     rdx, ds:0[rax*4]
929D:	lea     rax, jpt_92B3
92A4:	mov     eax, ds:(jpt_92B3 - 27B54h)[rdx+rax]
92A7:	cdqe
92A9:	lea     rdx, jpt_92B3
92B0:	add     rax, rdx
92B3:	jmp     rax; switch jump
92B6:	mov     rax, [rbp+saved_il]; jumptable 00000000000092B3 case 7
92BD:	mov     rdi, rax; some_il
92C0:	call    il_free
92C5:	mov     edi, 0; store
92CA:	call    il_kill_line
92CF:	mov     eax, 0
92D4:	call    il_save
92D9:	mov     [rbp+saved_il], rax
92E0:	jmp     loc_95C5
92E5:	mov     rax, [rbp+cmdln]
92EC:	movzx   eax, byte ptr [rax]
92EF:	test    al, al
92F1:	jz      loc_95C1
92F7:	mov     rax, [rbp+saved_il]
92FE:	mov     rdi, rax; some_il
9301:	call    il_free
9306:	mov     rax, [rbp+cmdln]
930D:	lea     rdx, [rbp+output_string]
9314:	mov     rsi, rdx; output
9317:	mov     rdi, rax; hstring
931A:	mov     eax, 0
931F:	call    history_expand
9324:	test    eax, eax
9326:	jns     short loc_9357
9328:	mov     rax, [rbp+output_string]
932F:	mov     edx, 1Ch; flags
9334:	mov     esi, 0; options
9339:	mov     rdi, rax; message
933C:	call    il_read_char
9341:	mov     eax, 0
9346:	call    il_save
934B:	mov     [rbp+saved_il], rax
9352:	jmp     loc_95C5
9357:	mov     rax, cs:screen
935E:	mov     rdi, rax; buf
9361:	call    tty_put_screen
9366:	mov     edi, 0; store
936B:	call    il_kill_line
9370:	mov     rax, [rbp+output_string]
9377:	mov     rdi, rax; text
937A:	call    il_insert_text
937F:	mov     rax, [rbp+output_string]
9386:	mov     rdi, rax; string
9389:	call    tty_update_title
938E:	mov     rax, [rbp+output_string]
9395:	mov     esi, 0; hide
939A:	mov     rdi, rax; command
939D:	call    start
93A2:	mov     rax, cs:screen
93A9:	mov     rdi, rax; buf
93AC:	call    tty_get_screen
93B1:	mov     edi, 0; dir
93B6:	call    il_history
93BB:	mov     rax, cs:CommandLineModeHelp
93C2:	mov     edx, 0; alignment
93C7:	mov     esi, 0; type
93CC:	mov     rdi, rax; message
93CF:	call    status
93D4:	mov     edi, 0; store
93D9:	call    il_kill_line
93DE:	mov     eax, 0
93E3:	call    il_save
93E8:	mov     [rbp+saved_il], rax
93EF:	mov     rax, cs:src_panel
93F6:	mov     rdi, rax; this
93F9:	call    panel_get_path
93FE:	mov     rdi, rax; string
9401:	call    tty_update_title
9406:	mov     eax, 0
940B:	call    tty_update
9410:	jmp     loc_95C1
9415:	mov     rax, [rbp+saved_il]; jumptable 00000000000092B3 cases -33,-6
941C:	mov     rdi, rax; some_il
941F:	call    il_free
9424:	mov     [rbp+i], 0
942E:	jmp     short loc_944B
9430:	mov     edi, 1; dir
9435:	call    il_history
943A:	mov     eax, 0
943F:	call    tty_update
9444:	add     [rbp+i], 1
944B:	mov     eax, [rbp+repeat_count]
9451:	cmp     [rbp+i], eax
9457:	jl      short loc_9430
9459:	mov     eax, 0
945E:	call    il_save
9463:	mov     [rbp+saved_il], rax
946A:	jmp     loc_95C5
946F:	mov     rax, [rbp+saved_il]; jumptable 00000000000092B3 cases -34,-10
9476:	mov     rdi, rax; some_il
9479:	call    il_free
947E:	mov     [rbp+i], 0
9488:	jmp     short loc_94A5
948A:	mov     edi, 2; dir
948F:	call    il_history
9494:	mov     eax, 0
9499:	call    tty_update
949E:	add     [rbp+i], 1
94A5:	mov     eax, [rbp+repeat_count]
94AB:	cmp     [rbp+i], eax
94B1:	jl      short loc_948A
94B3:	mov     eax, 0
94B8:	call    il_save
94BD:	mov     [rbp+saved_il], rax
94C4:	jmp     loc_95C5
94C9:	mov     edi, 0; jumptable 00000000000092B3 case -8
94CE:	mov     eax, 0
94D3:	call    refresh
94D8:	mov     rax, cs:screen
94DF:	mov     rdi, rax; buf
94E2:	call    tty_put_screen
94E7:	mov     rax, cs:CommandLineModeHelp
94EE:	mov     edx, 0; alignment
94F3:	mov     esi, 0; type
94F8:	mov     rdi, rax; message
94FB:	call    status
9500:	mov     eax, 0
9505:	call    tty_update
950A:	jmp     loc_95C5
950F:	mov     eax, cs:ConfirmOnExit; jumptable 00000000000092B3 case -5
9515:	test    eax, eax
9517:	jz      short loc_953B
9519:	mov     rax, cs:exit_msg
9520:	mov     edx, 0; flags
9525:	lea     rcx, options; 'yn'
952C:	mov     rsi, rcx; options
952F:	mov     rdi, rax; message
9532:	call    il_read_char
9537:	cmp     al, 79h ; 'y'
9539:	jnz     short loc_954A
953B:	mov     [rbp+app_end], 1
9545:	jmp     end_tty_mode
954A:	mov     rax, cs:CommandLineModeHelp
9551:	mov     edx, 0; alignment
9556:	mov     esi, 0; type
955B:	mov     rdi, rax; message
955E:	call    status
9563:	mov     eax, 0
9568:	call    tty_update
956D:	jmp     short loc_95C5
956F:	cmp     [rbp+key], 0; jumptable 00000000000092B3 default case, cases -32--11,-9,-7,-4-6
9576:	jz      short loc_95C4
9578:	mov     rax, [rbp+saved_il]
957F:	mov     rdi, rax; some_il
9582:	call    il_free
9587:	jmp     short loc_959B
9589:	mov     eax, [rbp+key]
958F:	mov     esi, 3; flags
9594:	mov     edi, eax; key
9596:	call    il_dispatch_commands
959B:	mov     eax, [rbp+repeat_count]
95A1:	lea     edx, [rax-1]
95A4:	mov     [rbp+repeat_count], edx
95AA:	test    eax, eax
95AC:	jnz     short loc_9589
95AE:	mov     eax, 0
95B3:	call    il_save
95B8:	mov     [rbp+saved_il], rax
95BF:	jmp     short loc_95C4
95C1:	nop
95C2:	jmp     short loc_95C5
95C4:	nop
95C5:	mov     eax, 0
95CA:	call    status_update
95CF:	jmp     loc_911D
95D4:	mov     rax, cs:src_panel
95DB:	mov     rdi, rax; this
95DE:	call    panel_no_optimizations
95E3:	mov     rax, cs:dst_panel
95EA:	mov     rdi, rax; this
95ED:	call    panel_no_optimizations
95F2:	mov     eax, 0
95F7:	call    tty_touch
95FC:	mov     eax, 0
9601:	call    status_default
9606:	mov     eax, 0
960B:	call    tty_update
9610:	mov     eax, 0
9615:	call    get_local_time
961A:	mov     edx, [rax]
961C:	mov     eax, 3Ch ; '<'
9621:	sub     eax, edx
9623:	mov     edi, eax; seconds
9625:	call    _alarm
962A:	mov     cs:current_mode, 0
9634:	cmp     [rbp+app_end], 0
963B:	jz      restart
9641:	jmp     loc_ACC2
9646:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -1
964D:	mov     rax, cs:src_panel
9654:	mov     r8d, 1; repeat_count
965A:	mov     ecx, 0; aux_info
965F:	mov     esi, 2; action
9664:	mov     rdi, rax; this
9667:	call    panel_action
966C:	jmp     loc_ACC2
9671:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -2
9678:	mov     rax, cs:src_panel
967F:	mov     r8d, 1; repeat_count
9685:	mov     ecx, 0; aux_info
968A:	mov     esi, 1Ah; action
968F:	mov     rdi, rax; this
9692:	call    panel_action
9697:	jmp     loc_ACC2
969C:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -3
96A3:	mov     rax, cs:src_panel
96AA:	mov     r8d, 1; repeat_count
96B0:	mov     ecx, 0; aux_info
96B5:	mov     esi, 19h; action
96BA:	mov     rdi, rax; this
96BD:	call    panel_action
96C2:	jmp     loc_ACC2
96C7:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -4
96CE:	mov     rax, cs:src_panel
96D5:	mov     r8d, 1; repeat_count
96DB:	mov     ecx, 0; aux_info
96E0:	mov     esi, 3; action
96E5:	mov     rdi, rax; this
96E8:	call    panel_action
96ED:	jmp     loc_ACC2
96F2:	mov     eax, 0FFFFFFFDh; jumptable 0000000000008A45 cases -16--11
96F7:	sub     eax, [rbp+key]
96FD:	mov     esi, eax; action
96FF:	mov     rax, cs:src_panel
9706:	mov     r8d, 1; repeat_count
970C:	mov     ecx, 0; aux_info
9711:	mov     edx, 0; other
9716:	mov     rdi, rax; this
9719:	call    panel_action
971E:	jmp     loc_ACC2
9723:	mov     eax, 0FFFFFFFEh; jumptable 0000000000008A45 cases -26--17
9728:	sub     eax, [rbp+key]
972E:	mov     esi, eax; action
9730:	mov     rax, cs:src_panel
9737:	mov     r8d, 1; repeat_count
973D:	mov     ecx, 0; aux_info
9742:	mov     edx, 0; other
9747:	mov     rdi, rax; this
974A:	call    panel_action
974F:	jmp     loc_ACC2
9754:	mov     eax, cs:ConfirmOnExit; jumptable 0000000000008A45 case -5
975A:	test    eax, eax
975C:	jz      short loc_9784
975E:	mov     rax, cs:exit_msg
9765:	mov     edx, 0; flags
976A:	lea     rcx, options; 'yn'
9771:	mov     rsi, rcx; options
9774:	mov     rdi, rax; message
9777:	call    il_read_char
977C:	cmp     al, 79h ; 'y'
977E:	jnz     loc_ACC2
9784:	mov     [rbp+app_end], 1
978E:	jmp     loc_ACC2
9793:	mov     rax, cs:src_panel; jumptable 0000000000008A45 case -28
979A:	mov     rdi, rax; this
979D:	call    panel_get_current_file_name
97A2:	mov     [rbp+srcptr], rax
97A9:	mov     rax, [rbp+srcptr]
97B0:	mov     rdi, rax; s
97B3:	call    _strlen
97B8:	add     rax, 5
97BC:	mov     rdi, rax; n
97BF:	call    xmalloc
97C4:	mov     [rbp+ptr], rax
97CB:	mov     rax, [rbp+cmdln]
97D2:	mov     rdi, rax; s
97D5:	call    _strlen
97DA:	mov     [rbp+len], rax
97E1:	mov     rax, [rbp+saved_il]
97E8:	mov     rdi, rax; some_il
97EB:	call    il_free
97F0:	cmp     [rbp+len], 0
97F8:	jz      loc_98B5
97FE:	mov     rbx, [rbp+cmdln]
9805:	mov     eax, 0
980A:	call    il_point
980F:	sub     rax, 1
9813:	add     rax, rbx
9816:	movzx   eax, byte ptr [rax]
9819:	cmp     al, 2Fh ; '/'
981B:	jz      short loc_983C
981D:	mov     rbx, [rbp+cmdln]
9824:	mov     eax, 0
9829:	call    il_point
982E:	sub     rax, 1
9832:	add     rax, rbx
9835:	movzx   eax, byte ptr [rax]
9838:	cmp     al, 20h ; ' '
983A:	jnz     short loc_98B5
983C:	mov     rax, [rbp+srcptr]
9843:	mov     rdi, rax; s
9846:	call    _strlen
984B:	mov     rdx, rax
984E:	mov     rax, [rbp+srcptr]
9855:	mov     rsi, rdx; length
9858:	mov     rdi, rax; string
985B:	call    needs_quotes
9860:	test    eax, eax
9862:	jz      short loc_988E
9864:	mov     rdx, [rbp+srcptr]
986B:	mov     rax, [rbp+ptr]
9872:	lea     rcx, aS; ''%s' '
9879:	mov     rsi, rcx; format
987C:	mov     rdi, rax; s
987F:	mov     eax, 0
9884:	call    _sprintf
9889:	jmp     loc_9929
988E:	mov     rdx, [rbp+srcptr]
9895:	mov     rax, [rbp+ptr]
989C:	lea     rcx, aS_0; '%s '
98A3:	mov     rsi, rcx; format
98A6:	mov     rdi, rax; s
98A9:	mov     eax, 0
98AE:	call    _sprintf
98B3:	jmp     short loc_9929
98B5:	mov     rax, [rbp+srcptr]
98BC:	mov     rdi, rax; s
98BF:	call    _strlen
98C4:	mov     rdx, rax
98C7:	mov     rax, [rbp+srcptr]
98CE:	mov     rsi, rdx; length
98D1:	mov     rdi, rax; string
98D4:	call    needs_quotes
98D9:	test    eax, eax
98DB:	jz      short loc_9904
98DD:	mov     rdx, [rbp+srcptr]
98E4:	mov     rax, [rbp+ptr]
98EB:	lea     rcx, aS_1; ' '%s' '
98F2:	mov     rsi, rcx; format
98F5:	mov     rdi, rax; s
98F8:	mov     eax, 0
98FD:	call    _sprintf
9902:	jmp     short loc_9929
9904:	mov     rdx, [rbp+srcptr]
990B:	mov     rax, [rbp+ptr]
9912:	lea     rcx, aS_2; ' %s '
9919:	mov     rsi, rcx; format
991C:	mov     rdi, rax; s
991F:	mov     eax, 0
9924:	call    _sprintf
9929:	mov     rax, [rbp+ptr]
9930:	mov     rdi, rax; s
9933:	call    _strlen
9938:	mov     [rbp+ptrlen], rax
993C:	mov     rax, [rbp+ptr]
9943:	mov     rdi, rax; s
9946:	call    _strlen
994B:	mov     rdx, rax
994E:	mov     rax, [rbp+ptr]
9955:	mov     rsi, rdx; length
9958:	mov     rdi, rax; string
995B:	call    toprintable
9960:	mov     rax, [rbp+ptr]
9967:	mov     rdi, rax; text
996A:	call    il_insert_text
996F:	mov     rax, [rbp+ptr]
9976:	mov     rdi, rax; pointer
9979:	call    xfree
997E:	mov     eax, 0
9983:	call    il_save
9988:	mov     [rbp+saved_il], rax
998F:	jmp     loc_ACC2
9994:	mov     rax, cs:dst_panel; jumptable 0000000000008A45 case -41
999B:	mov     rax, [rax+18h]
999F:	mov     [rbp+srcptr], rax
99A6:	mov     rax, cs:dst_panel
99AD:	mov     rax, [rax+78h]
99B1:	add     rax, 5
99B5:	mov     rdi, rax; n
99B8:	call    xmalloc
99BD:	mov     [rbp+ptr], rax
99C4:	jmp     copy_to_cmdln
99C9:	mov     rax, [rbp+cmdln]; jumptable 0000000000008A45 case -42
99D0:	mov     rdi, rax; s
99D3:	call    _strlen
99D8:	mov     [rbp+len], rax
99DF:	mov     rax, [rbp+saved_il]
99E6:	mov     rdi, rax; some_il
99E9:	call    il_free
99EE:	mov     rax, cs:src_panel
99F5:	mov     rdi, rax; this
99F8:	call    panel_init_iterator
99FD:	jmp     loc_9B19
9A02:	mov     rax, cs:src_panel
9A09:	mov     rcx, [rax+38h]
9A0D:	mov     eax, [rbp+entry]
9A13:	movsxd  rdx, eax
9A16:	mov     rax, rdx
9A19:	shl     rax, 2
9A1D:	add     rax, rdx
9A20:	shl     rax, 4
9A24:	add     rax, rcx
9A27:	mov     rax, [rax]
9A2A:	mov     [rbp+srcptr], rax
9A31:	mov     rax, [rbp+srcptr]
9A38:	mov     rdi, rax; s
9A3B:	call    _strlen
9A40:	add     rax, 5
9A44:	mov     rdi, rax; n
9A47:	call    xmalloc
9A4C:	mov     [rbp+ptr], rax
9A53:	mov     rax, [rbp+srcptr]
9A5A:	mov     rdi, rax; s
9A5D:	call    _strlen
9A62:	mov     rdx, rax
9A65:	mov     rax, [rbp+srcptr]
9A6C:	mov     rsi, rdx; length
9A6F:	mov     rdi, rax; string
9A72:	call    needs_quotes
9A77:	test    eax, eax
9A79:	jz      short loc_9AA2
9A7B:	mov     rdx, [rbp+srcptr]
9A82:	mov     rax, [rbp+ptr]
9A89:	lea     rcx, aS_3; ' '%s''
9A90:	mov     rsi, rcx; format
9A93:	mov     rdi, rax; s
9A96:	mov     eax, 0
9A9B:	call    _sprintf
9AA0:	jmp     short loc_9AC7
9AA2:	mov     rdx, [rbp+srcptr]
9AA9:	mov     rax, [rbp+ptr]
9AB0:	lea     rcx, aS_4; ' %s'
9AB7:	mov     rsi, rcx; format
9ABA:	mov     rdi, rax; s
9ABD:	mov     eax, 0
9AC2:	call    _sprintf
9AC7:	mov     rax, [rbp+ptr]
9ACE:	mov     rdi, rax; s
9AD1:	call    _strlen
9AD6:	mov     [rbp+ptrlen], rax
9ADA:	mov     rax, [rbp+ptrlen]
9ADE:	add     [rbp+len], rax
9AE5:	mov     rdx, [rbp+ptrlen]
9AE9:	mov     rax, [rbp+ptr]
9AF0:	mov     rsi, rdx; length
9AF3:	mov     rdi, rax; string
9AF6:	call    toprintable
9AFB:	mov     rax, [rbp+ptr]
9B02:	mov     rdi, rax; text
9B05:	call    il_insert_text
9B0A:	mov     rax, [rbp+ptr]
9B11:	mov     rdi, rax; pointer
9B14:	call    xfree
9B19:	mov     rax, cs:src_panel
9B20:	mov     rdi, rax; this
9B23:	call    panel_get_next
9B28:	mov     [rbp+entry], eax
9B2E:	cmp     [rbp+entry], 0FFFFFFFFh
9B35:	jnz     loc_9A02
9B3B:	lea     rax, asc_2760F; ' '
9B42:	mov     rdi, rax; text
9B45:	call    il_insert_text
9B4A:	mov     eax, 0
9B4F:	call    il_save
9B54:	mov     [rbp+saved_il], rax
9B5B:	jmp     loc_ACC2
9B60:	mov     rax, [rbp+saved_il]; jumptable 0000000000008A45 case -6
9B67:	mov     rdi, rax; some_il
9B6A:	call    il_free
9B6F:	mov     [rbp+i], 0
9B79:	jmp     short loc_9B96
9B7B:	mov     edi, 1; dir
9B80:	call    il_history
9B85:	mov     eax, 0
9B8A:	call    tty_update
9B8F:	add     [rbp+i], 1
9B96:	mov     eax, [rbp+repeat_count]
9B9C:	cmp     [rbp+i], eax
9BA2:	jl      short loc_9B7B
9BA4:	mov     eax, 0
9BA9:	call    il_save
9BAE:	mov     [rbp+saved_il], rax
9BB5:	jmp     loc_ACC2
9BBA:	mov     rax, [rbp+saved_il]; jumptable 0000000000008A45 case -10
9BC1:	mov     rdi, rax; some_il
9BC4:	call    il_free
9BC9:	mov     [rbp+i], 0
9BD3:	jmp     short loc_9BF0
9BD5:	mov     edi, 2; dir
9BDA:	call    il_history
9BDF:	mov     eax, 0
9BE4:	call    tty_update
9BE9:	add     [rbp+i], 1
9BF0:	mov     eax, [rbp+repeat_count]
9BF6:	cmp     [rbp+i], eax
9BFC:	jl      short loc_9BD5
9BFE:	mov     eax, 0
9C03:	call    il_save
9C08:	mov     [rbp+saved_il], rax
9C0F:	jmp     loc_ACC2
9C14:	mov     eax, [rbp+repeat_count]; jumptable 0000000000008A45 case -9
9C1A:	and     eax, 1
9C1D:	test    eax, eax
9C1F:	jnz     short loc_9C26
9C21:	jmp     loc_ACC2
9C26:	mov     eax, cs:two_panel_mode
9C2C:	test    eax, eax
9C2E:	jnz     short loc_9C35
9C30:	jmp     loc_ACC2
9C35:	mov     rax, cs:src_panel
9C3C:	mov     rdi, rax; this
9C3F:	call    panel_no_optimizations
9C44:	mov     rax, cs:dst_panel
9C4B:	mov     rdi, rax; this
9C4E:	call    panel_no_optimizations
9C53:	mov     rdx, cs:dst_panel; other
9C5A:	mov     rax, cs:src_panel
9C61:	mov     r8d, 1; repeat_count
9C67:	mov     ecx, 0; aux_info
9C6C:	mov     esi, 23h ; '#'; action
9C71:	mov     rdi, rax; this
9C74:	call    panel_action
9C79:	mov     rax, cs:src_panel
9C80:	mov     rdi, rax; this
9C83:	call    panel_update
9C88:	mov     rax, cs:dst_panel
9C8F:	mov     rdi, rax; this
9C92:	call    panel_update
9C97:	jmp     loc_ACC2
9C9C:	mov     rax, [rbp+command]; jumptable 0000000000008A45 case -36
9CA0:	mov     rdx, [rax+28h]
9CA4:	lea     rax, [rbp+input]
9CAB:	mov     rcx, rdx; history
9CAE:	mov     edx, 0; default_string
9CB3:	mov     rsi, rax; dest
9CB6:	lea     rax, static_text; 'Directory: '
9CBD:	mov     rdi, rax; static_text
9CC0:	call    il_read_line
9CC5:	test    rax, rax
9CC8:	jz      loc_ACC2
9CCE:	mov     rax, [rbp+input]
9CD5:	movzx   eax, byte ptr [rax]
9CD8:	test    al, al
9CDA:	jnz     short loc_9CE1
9CDC:	jmp     loc_ACC2
9CE1:	mov     rax, [rbp+input]
9CE8:	mov     rdi, rax; string
9CEB:	mov     eax, 0
9CF0:	call    tilde_expand
9CF5:	mov     [rbp+expanded_input], rax
9CF9:	mov     rdx, cs:dst_panel; other
9D00:	mov     rax, cs:src_panel
9D07:	mov     rcx, [rbp+expanded_input]; aux_info
9D0B:	mov     r8d, 1; repeat_count
9D11:	mov     esi, 21h ; '!'; action
9D16:	mov     rdi, rax; this
9D19:	call    panel_action
9D1E:	mov     rax, cs:src_panel
9D25:	mov     rdi, rax; this
9D28:	call    panel_get_path
9D2D:	mov     rdi, rax; directory
9D30:	mov     eax, 0
9D35:	call    dir_history_add
9D3A:	mov     rax, [rbp+expanded_input]
9D3E:	mov     rdi, rax; pointer
9D41:	call    xfree
9D46:	mov     rax, [rbp+input]
9D4D:	mov     rdi, rax; pointer
9D50:	call    xfree
9D55:	mov     [rbp+input], 0
9D60:	mov     rax, [rbp+saved_il]
9D67:	mov     rdi, rax; saved_il
9D6A:	call    il_restore
9D6F:	mov     eax, 0
9D74:	call    set_prompt
9D79:	mov     eax, 0
9D7E:	call    il_save
9D83:	mov     [rbp+saved_il], rax
9D8A:	mov     rax, cs:src_panel
9D91:	mov     rdi, rax; this
9D94:	call    panel_get_path
9D99:	mov     rdi, rax; string
9D9C:	call    tty_update_title
9DA1:	jmp     loc_ACC2
9DA6:	mov     rax, [rbp+command]; jumptable 0000000000008A45 case -37
9DAA:	mov     rdx, [rax+28h]
9DAE:	lea     rax, [rbp+input]
9DB5:	mov     rcx, rdx; history
9DB8:	mov     edx, 0; default_string
9DBD:	mov     rsi, rax; dest
9DC0:	lea     rax, aSelectFilesMat; 'Select files matching one of the patter'...
9DC7:	mov     rdi, rax; static_text
9DCA:	call    il_read_line
9DCF:	test    rax, rax
9DD2:	jz      loc_ACC2
9DD8:	mov     rax, [rbp+input]
9DDF:	movzx   eax, byte ptr [rax]
9DE2:	test    al, al
9DE4:	jnz     short loc_9DEB
9DE6:	jmp     loc_ACC2
9DEB:	mov     rcx, [rbp+input]; aux_info
9DF2:	mov     rdx, cs:dst_panel; other
9DF9:	mov     rax, cs:src_panel
9E00:	mov     r8d, 1; repeat_count
9E06:	mov     esi, 24h ; '$'; action
9E0B:	mov     rdi, rax; this
9E0E:	call    panel_action
9E13:	mov     rax, [rbp+input]
9E1A:	mov     rdi, rax; pointer
9E1D:	call    xfree
9E22:	mov     [rbp+input], 0
9E2D:	jmp     loc_ACC2
9E32:	mov     rax, [rbp+command]; jumptable 0000000000008A45 case -38
9E36:	mov     rdx, [rax+28h]
9E3A:	lea     rax, [rbp+input]
9E41:	mov     rcx, rdx; history
9E44:	mov     edx, 0; default_string
9E49:	mov     rsi, rax; dest
9E4C:	lea     rax, aUnselectFilesM; 'Unselect files matching one of the patt'...
9E53:	mov     rdi, rax; static_text
9E56:	call    il_read_line
9E5B:	test    rax, rax
9E5E:	jz      loc_ACC2
9E64:	mov     rax, [rbp+input]
9E6B:	movzx   eax, byte ptr [rax]
9E6E:	test    al, al
9E70:	jnz     short loc_9E77
9E72:	jmp     loc_ACC2
9E77:	mov     rcx, [rbp+input]; aux_info
9E7E:	mov     rdx, cs:dst_panel; other
9E85:	mov     rax, cs:src_panel
9E8C:	mov     r8d, 1; repeat_count
9E92:	mov     esi, 25h ; '%'; action
9E97:	mov     rdi, rax; this
9E9A:	call    panel_action
9E9F:	mov     rax, [rbp+input]
9EA6:	mov     rdi, rax; pointer
9EA9:	call    xfree
9EAE:	mov     [rbp+input], 0
9EB9:	jmp     loc_ACC2
9EBE:	mov     rax, cs:dst_panel; jumptable 0000000000008A45 case -39
9EC5:	mov     rcx, [rax+18h]; aux_info
9EC9:	mov     rdx, cs:dst_panel; other
9ED0:	mov     rax, cs:src_panel
9ED7:	mov     r8d, 1; repeat_count
9EDD:	mov     esi, 21h ; '!'; action
9EE2:	mov     rdi, rax; this
9EE5:	call    panel_action
9EEA:	mov     rax, cs:src_panel
9EF1:	mov     rdi, rax; this
9EF4:	call    panel_get_path
9EF9:	mov     rdi, rax; directory
9EFC:	mov     eax, 0
9F01:	call    dir_history_add
9F06:	mov     rax, [rbp+saved_il]
9F0D:	mov     rdi, rax; some_il
9F10:	call    il_free
9F15:	mov     eax, 0
9F1A:	call    set_prompt
9F1F:	mov     eax, 0
9F24:	call    il_save
9F29:	mov     [rbp+saved_il], rax
9F30:	mov     rax, cs:src_panel
9F37:	mov     rdi, rax; this
9F3A:	call    panel_get_path
9F3F:	mov     rdi, rax; string
9F42:	call    tty_update_title
9F47:	jmp     loc_ACC2
9F4C:	mov     rax, cs:src_panel; jumptable 0000000000008A45 case -40
9F53:	mov     rcx, [rax+18h]; aux_info
9F57:	mov     rdx, cs:src_panel; other
9F5E:	mov     rax, cs:dst_panel
9F65:	mov     r8d, 1; repeat_count
9F6B:	mov     esi, 21h ; '!'; action
9F70:	mov     rdi, rax; this
9F73:	call    panel_action
9F78:	mov     rax, cs:dst_panel
9F7F:	mov     rdi, rax; this
9F82:	call    panel_get_path
9F87:	mov     rdi, rax; directory
9F8A:	mov     eax, 0
9F8F:	call    dir_history_add
9F94:	jmp     loc_ACC2
9F99:	mov     rax, [rbp+command]; jumptable 0000000000008A45 case -67
9F9D:	mov     rdx, [rax+28h]
9FA1:	lea     rax, [rbp+input]
9FA8:	mov     rcx, rdx; history
9FAB:	mov     edx, 0; default_string
9FB0:	mov     rsi, rax; dest
9FB3:	lea     rax, aScrollStep; 'Scroll step: '
9FBA:	mov     rdi, rax; static_text
9FBD:	call    il_read_line
9FC2:	test    rax, rax
9FC5:	jz      loc_ACC2
9FCB:	mov     rax, [rbp+input]
9FD2:	movzx   eax, byte ptr [rax]
9FD5:	test    al, al
9FD7:	jnz     short loc_9FDE
9FD9:	jmp     loc_ACC2
9FDE:	mov     rcx, [rbp+input]; aux_info
9FE5:	mov     rdx, cs:dst_panel; other
9FEC:	mov     rax, cs:src_panel
9FF3:	mov     r8d, 1; repeat_count
9FF9:	mov     esi, 26h ; '&'; action
9FFE:	mov     rdi, rax; this
A001:	call    panel_action
A006:	mov     rax, [rbp+input]
A00D:	mov     rdi, rax; pointer
A010:	call    xfree
A015:	mov     [rbp+input], 0
A020:	jmp     loc_ACC2
A025:	mov     [rbp+previous_isearch_failed], 0; jumptable 0000000000008A45 case -68
A02F:	mov     [rbp+resuming_previous_isearch], 0
A039:	mov     ecx, 0; action
A03E:	mov     edx, 0; status
A043:	mov     esi, 0; dest
A048:	lea     rax, aISearchBackwar; 'I-search backward: '
A04F:	mov     rdi, rax; static_text
A052:	call    il_isearch
A057:	mov     rdx, cs:dst_panel; other
A05E:	mov     rax, cs:src_panel
A065:	mov     r8d, 1; repeat_count
A06B:	mov     ecx, 0; aux_info
A070:	mov     esi, 27h ; '''; action
A075:	mov     rdi, rax; this
A078:	call    panel_action
A07D:	lea     rdx, [rbp+iai]
A081:	lea     rax, [rbp+input]
A088:	mov     rcx, rdx; action
A08B:	mov     edx, 1; status
A090:	mov     rsi, rax; dest
A093:	mov     edi, 0; static_text
A098:	call    il_isearch
A09D:	test    rax, rax
A0A0:	jnz     short loc_A0B5
A0A2:	cmp     [rbp+search_string], 0
A0AA:	jnz     loc_A248
A0B0:	jmp     loc_A257
A0B5:	mov     rax, [rbp+input]
A0BC:	movzx   eax, byte ptr [rax]
A0BF:	test    al, al
A0C1:	jnz     short loc_A123
A0C3:	cmp     [rbp+search_string], 0
A0CB:	jz      short loc_A123
A0CD:	mov     rax, [rbp+search_string]
A0D4:	movzx   eax, byte ptr [rax]
A0D7:	test    al, al
A0D9:	jz      short loc_A123
A0DB:	mov     rax, [rbp+input]
A0E2:	mov     rdi, rax; pointer
A0E5:	call    xfree
A0EA:	mov     rax, [rbp+search_string]
A0F1:	mov     rdi, rax; s
A0F4:	call    _strdup
A0F9:	mov     [rbp+input], rax
A100:	mov     rax, [rbp+input]
A107:	mov     rdi, rax; text
A10A:	call    il_insert_text
A10F:	mov     [rbp+resuming_previous_isearch], 1
A119:	mov     [rbp+previous_isearch_failed], 0
A123:	mov     eax, [rbp+iai.action]
A126:	cmp     eax, 2
A129:	jnz     short loc_A152
A12B:	cmp     [rbp+previous_isearch_failed], 0
A132:	jz      short loc_A152
A134:	mov     rax, cs:src_panel
A13B:	mov     esi, 1; value
A140:	mov     rdi, rax; this
A143:	call    panel_set_wrapped_isearch_flag
A148:	mov     [rbp+previous_isearch_failed], 0
A152:	mov     rax, [rbp+input]
A159:	mov     [rbp+iai.string], rax
A15D:	mov     rdx, cs:dst_panel; other
A164:	mov     rax, cs:src_panel
A16B:	lea     rcx, [rbp+iai]; aux_info
A16F:	mov     r8d, 1; repeat_count
A175:	mov     esi, 28h ; '('; action
A17A:	mov     rdi, rax; this
A17D:	call    panel_action
A182:	mov     eax, [rbp+iai.action]
A185:	cmp     eax, 0FFFFFFFFh
A188:	jnz     short loc_A1A3
A18A:	mov     [rbp+previous_isearch_failed], 1
A194:	mov     eax, 0
A199:	call    tty_beep
A19E:	jmp     loc_A07D
A1A3:	mov     [rbp+update], 0
A1AD:	cmp     [rbp+resuming_previous_isearch], 0
A1B4:	jz      short loc_A1EC
A1B6:	mov     rbx, [rbp+iai.length]
A1BA:	mov     rax, [rbp+search_string]
A1C1:	mov     rdi, rax; s
A1C4:	call    _strlen
A1C9:	cmp     rbx, rax
A1CC:	jnb     short loc_A1EC
A1CE:	mov     edi, 0; store
A1D3:	call    il_kill_line
A1D8:	mov     [rbp+resuming_previous_isearch], 0
A1E2:	mov     [rbp+update], 1
A1EC:	mov     rbx, [rbp+iai.length]
A1F0:	mov     rax, [rbp+input]
A1F7:	mov     rdi, rax; s
A1FA:	call    _strlen
A1FF:	cmp     rbx, rax
A202:	jnb     short loc_A218
A204:	mov     eax, 0
A209:	call    il_backward_delete_char
A20E:	mov     [rbp+update], 1
A218:	cmp     [rbp+update], 0
A21F:	jz      loc_A07D
A225:	mov     eax, 0
A22A:	call    il_update
A22F:	mov     eax, 0
A234:	call    il_update_point
A239:	mov     eax, 0
A23E:	call    tty_update
A243:	jmp     loc_A07D
A248:	mov     rax, [rbp+search_string]
A24F:	mov     rdi, rax; pointer
A252:	call    xfree
A257:	mov     rax, [rbp+input]
A25E:	test    rax, rax
A261:	jnz     short loc_A268
A263:	jmp     loc_ACC2
A268:	mov     rax, [rbp+input]
A26F:	mov     rdi, rax; s
A272:	call    _strdup
A277:	mov     [rbp+search_string], rax
A27E:	mov     rdx, cs:dst_panel; other
A285:	mov     rax, cs:src_panel
A28C:	mov     r8d, 1; repeat_count
A292:	mov     ecx, 0; aux_info
A297:	mov     esi, 2Ah ; '*'; action
A29C:	mov     rdi, rax; this
A29F:	call    panel_action
A2A4:	mov     ecx, 0; action
A2A9:	mov     edx, 3; status
A2AE:	mov     esi, 0; dest
A2B3:	mov     edi, 0; static_text
A2B8:	call    il_isearch
A2BD:	jmp     loc_ACC2
A2C2:	mov     [rbp+previous_isearch_failed], 0; jumptable 0000000000008A45 case -69
A2CC:	mov     [rbp+resuming_previous_isearch], 0
A2D6:	mov     ecx, 0; action
A2DB:	mov     edx, 0; status
A2E0:	mov     esi, 0; dest
A2E5:	lea     rax, aISearch; 'I-search: '
A2EC:	mov     rdi, rax; static_text
A2EF:	call    il_isearch
A2F4:	mov     rdx, cs:dst_panel; other
A2FB:	mov     rax, cs:src_panel
A302:	mov     r8d, 1; repeat_count
A308:	mov     ecx, 0; aux_info
A30D:	mov     esi, 27h ; '''; action
A312:	mov     rdi, rax; this
A315:	call    panel_action
A31A:	lea     rdx, [rbp+iai]
A31E:	lea     rax, [rbp+input]
A325:	mov     rcx, rdx; action
A328:	mov     edx, 2; status
A32D:	mov     rsi, rax; dest
A330:	mov     edi, 0; static_text
A335:	call    il_isearch
A33A:	test    rax, rax
A33D:	jnz     short loc_A352
A33F:	cmp     [rbp+search_string], 0
A347:	jnz     loc_A4EF
A34D:	jmp     loc_A4FE
A352:	mov     rax, [rbp+input]
A359:	movzx   eax, byte ptr [rax]
A35C:	test    al, al
A35E:	jnz     short loc_A3C0
A360:	cmp     [rbp+search_string], 0
A368:	jz      short loc_A3C0
A36A:	mov     rax, [rbp+search_string]
A371:	movzx   eax, byte ptr [rax]
A374:	test    al, al
A376:	jz      short loc_A3C0
A378:	mov     rax, [rbp+input]
A37F:	mov     rdi, rax; pointer
A382:	call    xfree
A387:	mov     rax, [rbp+search_string]
A38E:	mov     rdi, rax; s
A391:	call    _strdup
A396:	mov     [rbp+input], rax
A39D:	mov     rax, [rbp+input]
A3A4:	mov     rdi, rax; text
A3A7:	call    il_insert_text
A3AC:	mov     [rbp+resuming_previous_isearch], 1
A3B6:	mov     [rbp+previous_isearch_failed], 0
A3C0:	mov     eax, [rbp+iai.action]
A3C3:	cmp     eax, 2
A3C6:	jnz     short loc_A3F9
A3C8:	cmp     [rbp+previous_isearch_failed], 0
A3CF:	jz      short loc_A3F9
A3D1:	mov     eax, 0
A3D6:	call    tty_beep
A3DB:	mov     rax, cs:src_panel
A3E2:	mov     esi, 1; value
A3E7:	mov     rdi, rax; this
A3EA:	call    panel_set_wrapped_isearch_flag
A3EF:	mov     [rbp+previous_isearch_failed], 0
A3F9:	mov     rax, [rbp+input]
A400:	mov     [rbp+iai.string], rax
A404:	mov     rdx, cs:dst_panel; other
A40B:	mov     rax, cs:src_panel
A412:	lea     rcx, [rbp+iai]; aux_info
A416:	mov     r8d, 1; repeat_count
A41C:	mov     esi, 29h ; ')'; action
A421:	mov     rdi, rax; this
A424:	call    panel_action
A429:	mov     eax, [rbp+iai.action]
A42C:	cmp     eax, 0FFFFFFFFh
A42F:	jnz     short loc_A44A
A431:	mov     [rbp+previous_isearch_failed], 1
A43B:	mov     eax, 0
A440:	call    tty_beep
A445:	jmp     loc_A31A
A44A:	mov     [rbp+update_0], 0
A454:	cmp     [rbp+resuming_previous_isearch], 0
A45B:	jz      short loc_A493
A45D:	mov     rbx, [rbp+iai.length]
A461:	mov     rax, [rbp+search_string]
A468:	mov     rdi, rax; s
A46B:	call    _strlen
A470:	cmp     rbx, rax
A473:	jnb     short loc_A493
A475:	mov     edi, 0; store
A47A:	call    il_kill_line
A47F:	mov     [rbp+resuming_previous_isearch], 0
A489:	mov     [rbp+update_0], 1
A493:	mov     rbx, [rbp+iai.length]
A497:	mov     rax, [rbp+input]
A49E:	mov     rdi, rax; s
A4A1:	call    _strlen
A4A6:	cmp     rbx, rax
A4A9:	jnb     short loc_A4BF
A4AB:	mov     eax, 0
A4B0:	call    il_backward_delete_char
A4B5:	mov     [rbp+update_0], 1
A4BF:	cmp     [rbp+update_0], 0
A4C6:	jz      loc_A31A
A4CC:	mov     eax, 0
A4D1:	call    il_update
A4D6:	mov     eax, 0
A4DB:	call    il_update_point
A4E0:	mov     eax, 0
A4E5:	call    tty_update
A4EA:	jmp     loc_A31A
A4EF:	mov     rax, [rbp+search_string]
A4F6:	mov     rdi, rax; pointer
A4F9:	call    xfree
A4FE:	mov     rax, [rbp+input]
A505:	test    rax, rax
A508:	jnz     short loc_A50F
A50A:	jmp     loc_ACC2
A50F:	mov     rax, [rbp+input]
A516:	mov     rdi, rax; s
A519:	call    _strdup
A51E:	mov     [rbp+search_string], rax
A525:	mov     rdx, cs:dst_panel; other
A52C:	mov     rax, cs:src_panel
A533:	mov     r8d, 1; repeat_count
A539:	mov     ecx, 0; aux_info
A53E:	mov     esi, 2Ah ; '*'; action
A543:	mov     rdi, rax; this
A546:	call    panel_action
A54B:	mov     ecx, 0; action
A550:	mov     edx, 3; status
A555:	mov     esi, 0; dest
A55A:	mov     edi, 0; static_text
A55F:	call    il_isearch
A564:	jmp     loc_ACC2
A569:	mov     eax, 0; jumptable 0000000000008A45 case -72
A56E:	call    dir_history_reset
A573:	mov     rax, cs:src_panel
A57A:	mov     rdi, rax; this
A57D:	call    panel_get_path
A582:	mov     rdi, rax; directory
A585:	mov     eax, 0
A58A:	call    dir_history_add
A58F:	jmp     loc_ACC2
A594:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -70
A59B:	mov     rax, cs:src_panel
A5A2:	mov     rsi, rdx; link
A5A5:	mov     rdi, rax; this
A5A8:	mov     eax, 0
A5AD:	call    dir_history_prev
A5B2:	mov     rax, [rbp+saved_il]
A5B9:	mov     rdi, rax; saved_il
A5BC:	call    il_restore
A5C1:	mov     eax, 0
A5C6:	call    set_prompt
A5CB:	mov     eax, 0
A5D0:	call    il_save
A5D5:	mov     [rbp+saved_il], rax
A5DC:	mov     rax, cs:src_panel
A5E3:	mov     rdi, rax; this
A5E6:	call    panel_get_path
A5EB:	mov     rdi, rax; string
A5EE:	call    tty_update_title
A5F3:	jmp     loc_ACC2
A5F8:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -71
A5FF:	mov     rax, cs:src_panel
A606:	mov     rsi, rdx; link
A609:	mov     rdi, rax; this
A60C:	mov     eax, 0
A611:	call    dir_history_next
A616:	mov     rax, [rbp+saved_il]
A61D:	mov     rdi, rax; saved_il
A620:	call    il_restore
A625:	mov     eax, 0
A62A:	call    set_prompt
A62F:	mov     eax, 0
A634:	call    il_save
A639:	mov     [rbp+saved_il], rax
A640:	mov     rax, cs:src_panel
A647:	mov     rdi, rax; this
A64A:	call    panel_get_path
A64F:	mov     rdi, rax; string
A652:	call    tty_update_title
A657:	jmp     loc_ACC2
A65C:	nop
A65D:	mov     rax, cs:src_panel; jumptable 0000000000008A45 case -74
A664:	mov     esi, 0; status
A669:	mov     rdi, rax; this
A66C:	call    panel_set_focus
A671:	mov     rax, cs:src_panel
A678:	mov     cs:tmp_panel, rax
A67F:	mov     rax, cs:dst_panel
A686:	mov     cs:src_panel, rax
A68D:	mov     rax, cs:tmp_panel
A694:	mov     cs:dst_panel, rax
A69B:	mov     eax, cs:panel_no
A6A1:	test    eax, eax
A6A3:	setz    al
A6A6:	movzx   eax, al
A6A9:	mov     cs:panel_no, eax
A6AF:	mov     rax, cs:src_panel
A6B6:	mov     esi, 1; status
A6BB:	mov     rdi, rax; this
A6BE:	call    panel_set_focus
A6C3:	mov     rax, cs:src_panel
A6CA:	mov     rdi, rax; this
A6CD:	call    panel_activate
A6D2:	mov     rax, [rbp+saved_il]
A6D9:	mov     rdi, rax; some_il
A6DC:	call    il_free
A6E1:	mov     eax, 0
A6E6:	call    set_prompt
A6EB:	mov     eax, 0
A6F0:	call    il_save
A6F5:	mov     [rbp+saved_il], rax
A6FC:	mov     rax, cs:src_panel
A703:	mov     rdi, rax; this
A706:	call    panel_get_path
A70B:	mov     rdi, rax; string
A70E:	call    tty_update_title
A713:	mov     rax, cs:src_panel; jumptable 0000000000008A45 case -73
A71A:	mov     rdi, rax; this
A71D:	call    panel_no_optimizations
A722:	mov     rax, cs:dst_panel
A729:	mov     rdi, rax; this
A72C:	call    panel_no_optimizations
A731:	mov     eax, 0
A736:	call    tty_touch
A73B:	mov     rax, cs:dst_panel
A742:	mov     rdi, rax; this
A745:	call    panel_deactivate
A74A:	mov     cs:two_panel_mode, 0
A754:	mov     edi, 1; resize_required
A759:	mov     eax, 0
A75E:	call    resize
A763:	mov     rax, cs:src_panel
A76A:	mov     r8d, 1; repeat_count
A770:	mov     ecx, 0; aux_info
A775:	mov     edx, 0; other
A77A:	mov     esi, 0Eh; action
A77F:	mov     rdi, rax; this
A782:	call    panel_action
A787:	mov     rax, cs:dst_panel
A78E:	mov     r8d, 1; repeat_count
A794:	mov     ecx, 0; aux_info
A799:	mov     edx, 0; other
A79E:	mov     esi, 0Eh; action
A7A3:	mov     rdi, rax; this
A7A6:	call    panel_action
A7AB:	mov     rax, cs:src_panel
A7B2:	mov     rdi, rax; this
A7B5:	call    panel_update
A7BA:	jmp     loc_ACC2
A7BF:	mov     rax, cs:src_panel; jumptable 0000000000008A45 case -75
A7C6:	mov     rdi, rax; this
A7C9:	call    panel_no_optimizations
A7CE:	mov     rax, cs:dst_panel
A7D5:	mov     rdi, rax; this
A7D8:	call    panel_no_optimizations
A7DD:	mov     eax, 0
A7E2:	call    tty_touch
A7E7:	mov     rax, cs:dst_panel
A7EE:	mov     rdi, rax; this
A7F1:	call    panel_activate
A7F6:	mov     cs:two_panel_mode, 1
A800:	mov     edi, 1; resize_required
A805:	mov     eax, 0
A80A:	call    resize
A80F:	mov     eax, cs:tty_columns
A815:	cmp     eax, 0Bh
A818:	jg      short loc_A829
A81A:	mov     edi, 1; signum
A81F:	mov     eax, 0
A824:	call    refresh
A829:	mov     rax, cs:src_panel
A830:	mov     r8d, 1; repeat_count
A836:	mov     ecx, 0; aux_info
A83B:	mov     edx, 0; other
A840:	mov     esi, 0Bh; action
A845:	mov     rdi, rax; this
A848:	call    panel_action
A84D:	mov     rax, cs:dst_panel
A854:	mov     r8d, 1; repeat_count
A85A:	mov     ecx, 0; aux_info
A85F:	mov     edx, 0; other
A864:	mov     esi, 0Bh; action
A869:	mov     rdi, rax; this
A86C:	call    panel_action
A871:	mov     rax, cs:src_panel
A878:	mov     rdi, rax; this
A87B:	call    panel_update
A880:	mov     rax, cs:dst_panel
A887:	mov     rdi, rax; this
A88A:	call    panel_update
A88F:	jmp     loc_ACC2
A894:	mov     edi, 0; jumptable 0000000000008A45 case -76
A899:	call    il_echo
A89E:	mov     [rbp+lock_password], 0
A8A9:	lea     rax, [rbp+lock_password]
A8B0:	mov     ecx, 0; history
A8B5:	mov     edx, 0; default_string
A8BA:	mov     rsi, rax; dest
A8BD:	lea     rax, aEnterAPassword; 'Enter a password: '
A8C4:	mov     rdi, rax; static_text
A8C7:	call    il_read_line
A8CC:	mov     rax, [rbp+lock_password]
A8D3:	test    rax, rax
A8D6:	jz      short loc_A8E6
A8D8:	mov     rax, [rbp+lock_password]
A8DF:	movzx   eax, byte ptr [rax]
A8E2:	test    al, al
A8E4:	jnz     short loc_A8F5
A8E6:	mov     edi, 1; echo
A8EB:	call    il_echo
A8F0:	jmp     loc_ACC2
A8F5:	mov     [rbp+unlock_password], 0
A900:	lea     rax, [rbp+unlock_password]
A907:	mov     ecx, 0; history
A90C:	mov     edx, 0; default_string
A911:	mov     rsi, rax; dest
A914:	lea     rax, aEnterPasswordT; 'Enter password to unlock: '
A91B:	mov     rdi, rax; static_text
A91E:	call    il_read_line
A923:	mov     eax, 0
A928:	call    tty_update
A92D:	mov     rax, [rbp+unlock_password]
A934:	test    rax, rax
A937:	jz      short loc_A956
A939:	mov     rdx, [rbp+unlock_password]
A940:	mov     rax, [rbp+lock_password]
A947:	mov     rsi, rdx; s2
A94A:	mov     rdi, rax; s1
A94D:	call    _strcmp
A952:	test    eax, eax
A954:	jz      short loc_A988
A956:	lea     rax, lock_bad; 'Bad password, try again...'
A95D:	mov     rdi, rax; message
A960:	call    il_message
A965:	mov     eax, 0
A96A:	call    tty_beep
A96F:	mov     eax, 0
A974:	call    tty_update
A979:	mov     edi, 2; seconds
A97E:	call    _sleep
A983:	jmp     loc_A900
A988:	nop
A989:	mov     eax, 0
A98E:	call    tty_update
A993:	mov     rax, [rbp+lock_password]
A99A:	mov     rdi, rax; pointer
A99D:	call    xfree
A9A2:	mov     rax, [rbp+unlock_password]
A9A9:	mov     rdi, rax; pointer
A9AC:	call    xfree
A9B1:	mov     edi, 1; echo
A9B6:	call    il_echo
A9BB:	jmp     loc_ACC2
A9C0:	mov     [rbp+cmp_mode], 1; jumptable 0000000000008A45 case -77
A9CA:	mov     rdx, cs:dst_panel; other
A9D1:	mov     rax, cs:src_panel
A9D8:	lea     rcx, [rbp+cmp_mode]; aux_info
A9DF:	mov     r8d, 1; repeat_count
A9E5:	mov     esi, 2Bh ; '+'; action
A9EA:	mov     rdi, rax; this
A9ED:	call    panel_action
A9F2:	jmp     loc_ACC2
A9F7:	mov     [rbp+cmp_mode], 0; jumptable 0000000000008A45 case -78
AA01:	mov     rdx, cs:dst_panel; other
AA08:	mov     rax, cs:src_panel
AA0F:	lea     rcx, [rbp+cmp_mode]; aux_info
AA16:	mov     r8d, 1; repeat_count
AA1C:	mov     esi, 2Bh ; '+'; action
AA21:	mov     rdi, rax; this
AA24:	call    panel_action
AA29:	jmp     loc_ACC2
AA2E:	mov     [rbp+to_case], 0; jumptable 0000000000008A45 case -79
AA38:	mov     rdx, cs:dst_panel; other
AA3F:	mov     rax, cs:src_panel
AA46:	lea     rcx, [rbp+to_case]; aux_info
AA4D:	mov     r8d, 1; repeat_count
AA53:	mov     esi, 2Ch ; ','; action
AA58:	mov     rdi, rax; this
AA5B:	call    panel_action
AA60:	jmp     loc_ACC2
AA65:	mov     [rbp+to_case], 1; jumptable 0000000000008A45 case -80
AA6F:	mov     rdx, cs:dst_panel; other
AA76:	mov     rax, cs:src_panel
AA7D:	lea     rcx, [rbp+to_case]; aux_info
AA84:	mov     r8d, 1; repeat_count
AA8A:	mov     esi, 2Ch ; ','; action
AA8F:	mov     rdi, rax; this
AA92:	call    panel_action
AA97:	jmp     loc_ACC2
AA9C:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -81
AAA3:	mov     rax, cs:src_panel
AAAA:	mov     r8d, 1; repeat_count
AAB0:	mov     ecx, 0; aux_info
AAB5:	mov     esi, 2Dh ; '-'; action
AABA:	mov     rdi, rax; this
AABD:	call    panel_action
AAC2:	mov     rax, [rbp+saved_il]
AAC9:	mov     rdi, rax; saved_il
AACC:	call    il_restore
AAD1:	mov     eax, 0
AAD6:	call    set_prompt
AADB:	mov     eax, 0
AAE0:	call    il_save
AAE5:	mov     [rbp+saved_il], rax
AAEC:	mov     rax, cs:src_panel
AAF3:	mov     rdi, rax; this
AAF6:	call    panel_get_path
AAFB:	mov     rdi, rax; string
AAFE:	call    tty_update_title
AB03:	jmp     loc_ACC2
AB08:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -82
AB0F:	mov     rax, cs:src_panel
AB16:	mov     r8d, 1; repeat_count
AB1C:	mov     ecx, 0; aux_info
AB21:	mov     esi, 2Eh ; '.'; action
AB26:	mov     rdi, rax; this
AB29:	call    panel_action
AB2E:	jmp     loc_ACC2
AB33:	mov     rax, [rbp+command]; jumptable 0000000000008A45 case -83
AB37:	mov     rdx, [rax+28h]
AB3B:	lea     rax, [rbp+input]
AB42:	mov     rcx, rdx; history
AB45:	lea     rdx, default_string; '0'
AB4C:	mov     rsi, rax; dest
AB4F:	lea     rax, aBinSizeInKb; 'Bin size (in Kb): '
AB56:	mov     rdi, rax; static_text
AB59:	call    il_read_line
AB5E:	test    rax, rax
AB61:	jz      loc_ACC2
AB67:	mov     rax, [rbp+input]
AB6E:	movzx   eax, byte ptr [rax]
AB71:	test    al, al
AB73:	jnz     short loc_AB7A
AB75:	jmp     loc_ACC2
AB7A:	mov     rcx, [rbp+input]; aux_info
AB81:	mov     rdx, cs:dst_panel; other
AB88:	mov     rax, cs:src_panel
AB8F:	mov     r8d, 1; repeat_count
AB95:	mov     esi, 2Fh ; '/'; action
AB9A:	mov     rdi, rax; this
AB9D:	call    panel_action
ABA2:	mov     rax, [rbp+input]
ABA9:	mov     rdi, rax; pointer
ABAC:	call    xfree
ABB1:	mov     [rbp+input], 0
ABBC:	jmp     loc_ACC2
ABC1:	mov     esi, [rbp+repeat_count]; jumptable 0000000000008A45 case -84
ABC7:	mov     rcx, [rbp+input]; aux_info
ABCE:	mov     rdx, cs:dst_panel; other
ABD5:	mov     rax, cs:src_panel
ABDC:	mov     r8d, esi; repeat_count
ABDF:	mov     esi, 30h ; '0'; action
ABE4:	mov     rdi, rax; this
ABE7:	call    panel_action
ABEC:	jmp     loc_ACC2
ABF1:	mov     esi, [rbp+repeat_count]; jumptable 0000000000008A45 case -85
ABF7:	mov     rcx, [rbp+input]; aux_info
ABFE:	mov     rdx, cs:dst_panel; other
AC05:	mov     rax, cs:src_panel
AC0C:	mov     r8d, esi; repeat_count
AC0F:	mov     esi, 31h ; '1'; action
AC14:	mov     rdi, rax; this
AC17:	call    panel_action
AC1C:	jmp     loc_ACC2
AC21:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -86
AC28:	mov     rax, cs:src_panel
AC2F:	mov     r8d, 1; repeat_count
AC35:	mov     ecx, 0; aux_info
AC3A:	mov     esi, 32h ; '2'; action
AC3F:	mov     rdi, rax; this
AC42:	call    panel_action
AC47:	jmp     short loc_ACC2
AC49:	mov     rdx, cs:dst_panel; jumptable 0000000000008A45 case -87
AC50:	mov     rax, cs:src_panel
AC57:	mov     r8d, 1; repeat_count
AC5D:	mov     ecx, 0; aux_info
AC62:	mov     esi, 33h ; '3'; action
AC67:	mov     rdi, rax; this
AC6A:	call    panel_action
AC6F:	jmp     short loc_ACC2
AC71:	cmp     [rbp+key], 0; jumptable 0000000000008A45 default case, cases -66--62,-60--43,0-6
AC78:	jz      short loc_ACC1
AC7A:	mov     rax, [rbp+saved_il]
AC81:	mov     rdi, rax; some_il
AC84:	call    il_free
AC89:	jmp     short loc_AC9D
AC8B:	mov     eax, [rbp+key]
AC91:	mov     esi, 3; flags
AC96:	mov     edi, eax; key
AC98:	call    il_dispatch_commands
AC9D:	mov     eax, [rbp+repeat_count]
ACA3:	lea     edx, [rax-1]
ACA6:	mov     [rbp+repeat_count], edx
ACAC:	test    eax, eax
ACAE:	jnz     short loc_AC8B
ACB0:	mov     eax, 0
ACB5:	call    il_save
ACBA:	mov     [rbp+saved_il], rax
ACC1:	nop
ACC2:	cmp     [rbp+app_end], 0
ACC9:	jz      loc_84AF
ACCF:	mov     rax, cs:src_panel
ACD6:	mov     rdi, rax; this
ACD9:	call    panel_get_path
ACDE:	mov     [rbp+final_path], rax
ACE2:	mov     rax, cs:left_panel
ACE9:	mov     rdi, rax; this
ACEC:	call    panel_end
ACF1:	mov     rax, cs:right_panel
ACF8:	mov     rdi, rax; this
ACFB:	call    panel_end
AD00:	mov     edi, 0; mode
AD05:	call    tty_set_mode
AD0A:	mov     eax, 0
AD0F:	call    tty_defaults
AD14:	mov     rax, cs:il
AD1B:	test    rax, rax
AD1E:	jz      short loc_AD2A
AD20:	mov     eax, 0
AD25:	call    il_end
AD2A:	mov     eax, 0
AD2F:	call    status_end
AD34:	mov     eax, 0
AD39:	call    remove_log
AD3E:	mov     rax, cs:screen
AD45:	mov     rdi, rax; screen
AD48:	call    tty_end
AD4D:	cmp     [rbp+output_final_path], 0
AD54:	jz      short loc_AD76
AD56:	mov     rax, [rbp+final_path]
AD5A:	mov     rdi, rax; s
AD5D:	call    _strlen
AD62:	mov     rdx, rax; n
AD65:	mov     rax, [rbp+final_path]
AD69:	mov     rsi, rax; buf
AD6C:	mov     edi, 3; fd
AD71:	call    write
AD76:	mov     eax, 0
AD7B:	mov     rdx, [rbp+var_18]
AD7F:	sub     rdx, fs:28h
AD88:	jz      short loc_AD8F
AD8A:	call    ___stack_chk_fail
AD8F:	mov     rbx, [rbp+var_8]
AD93:	leave
AD94:	retn
AD95:	endbr64
AD99:	push    rbp
AD9A:	mov     rbp, rsp
AD9D:	mov     [rbp+last_char_flag], edi
ADA0:	mov     eax, [rbp+last_char_flag]
ADA3:	mov     cs:tty_last_char_flag, eax
ADA9:	nop
ADAA:	pop     rbp
ADAB:	retn
ADAC:	endbr64
ADB0:	push    rbp
ADB1:	mov     rbp, rsp
ADB4:	sub     rsp, 10h
ADB8:	mov     [rbp+mode], edi
ADBB:	cmp     [rbp+mode], 1
ADBF:	jnz     loc_AF3E
ADC5:	mov     rax, qword ptr cs:old_term.c_iflag
ADCC:	mov     rdx, qword ptr cs:old_term.c_cflag
ADD3:	mov     qword ptr cs:new_term.c_iflag, rax
ADDA:	mov     qword ptr cs:new_term.c_cflag, rdx
ADE1:	mov     rax, qword ptr cs:old_term.c_line
ADE8:	mov     rdx, qword ptr cs:old_term.c_cc+7
ADEF:	mov     qword ptr cs:new_term.c_line, rax
ADF6:	mov     qword ptr cs:new_term.c_cc+7, rdx
ADFD:	mov     rax, qword ptr cs:old_term.c_cc+0Fh
AE04:	mov     rdx, qword ptr cs:old_term.c_cc+17h
AE0B:	mov     qword ptr cs:new_term.c_cc+0Fh, rax
AE12:	mov     qword ptr cs:new_term.c_cc+17h, rdx
AE19:	mov     rax, qword ptr cs:old_term.c_cc+1Fh
AE20:	mov     qword ptr cs:new_term.c_cc+1Fh, rax
AE27:	mov     eax, cs:old_term.c_ospeed
AE2D:	mov     cs:new_term.c_ospeed, eax
AE33:	mov     eax, cs:new_term.c_iflag
AE39:	and     eax, 0FFFFFA3Ch
AE3E:	mov     cs:new_term.c_iflag, eax
AE44:	mov     eax, cs:new_term.c_oflag
AE4A:	and     eax, 0FFFFFFFEh
AE4D:	mov     cs:new_term.c_oflag, eax
AE53:	mov     eax, cs:new_term.c_lflag
AE59:	or      al, 81h
AE5B:	mov     cs:new_term.c_lflag, eax
AE61:	mov     eax, cs:new_term.c_lflag
AE67:	and     eax, 0FFFFFFF5h
AE6A:	mov     cs:new_term.c_lflag, eax
AE70:	mov     cs:new_term.c_cc, 7
AE77:	mov     cs:new_term.c_cc+1, 0
AE7E:	mov     cs:new_term.c_cc+8, 0
AE85:	mov     cs:new_term.c_cc+9, 0
AE8C:	mov     cs:new_term.c_cc+6, 1
AE93:	mov     cs:new_term.c_cc+5, 0
AE9A:	mov     cs:new_term.c_cc+2, 0
AEA1:	mov     cs:new_term.c_cc+3, 0
AEA8:	mov     cs:new_term.c_cc+0Bh, 0
AEAF:	mov     cs:new_term.c_cc+10h, 0
AEB6:	mov     cs:new_term.c_cc+0Ah, 1Ah
AEBD:	mov     cs:new_term.c_cc+0Ch, 0
AEC4:	mov     cs:new_term.c_cc+0Dh, 0
AECB:	mov     cs:new_term.c_cc+0Eh, 0
AED2:	mov     cs:new_term.c_cc+0Fh, 0
AED9:	lea     rax, new_term
AEE0:	mov     rdx, rax; termios_p
AEE3:	mov     esi, 1; optional_actions
AEE8:	mov     edi, 1; fd
AEED:	call    _tcsetattr
AEF2:	lea     rax, new_term
AEF9:	mov     rdi, rax; termios_p
AEFC:	call    _cfgetospeed
AF01:	mov     cs:ospeed, eax
AF07:	mov     edx, 1
AF0C:	mov     esi, 540Ah; request
AF11:	mov     edi, 1; fd
AF16:	mov     eax, 0
AF1B:	call    _ioctl
AF20:	mov     esi, 1; action
AF25:	mov     edi, 1; fd
AF2A:	call    _tcflow
AF2F:	mov     eax, cs:tty_interrupt_char
AF35:	mov     edi, eax; c
AF37:	call    tty_set_interrupt_char
AF3C:	jmp     short loc_AF57
AF3E:	lea     rax, old_term
AF45:	mov     rdx, rax; termios_p
AF48:	mov     esi, 1; optional_actions
AF4D:	mov     edi, 1; fd
AF52:	call    _tcsetattr
AF57:	mov     eax, [rbp+mode]
AF5A:	mov     cs:tty_mode, eax
AF60:	nop
AF61:	leave
AF62:	retn
AF63:	endbr64
AF67:	push    rbp
AF68:	mov     rbp, rsp
AF6B:	mov     eax, cs:tty_mode
AF71:	pop     rbp
AF72:	retn
AF73:	endbr64
AF77:	push    rbp
AF78:	mov     rbp, rsp
AF7B:	sub     rsp, 60h
AF7F:	mov     [rbp+c], edi
AF82:	mov     rax, fs:28h
AF8B:	mov     [rbp+var_8], rax
AF8F:	xor     eax, eax
AF91:	lea     rax, [rbp+current_term]
AF95:	mov     rsi, rax; termios_p
AF98:	mov     edi, 1; fd
AF9D:	call    _tcgetattr
AFA2:	mov     eax, [rbp+c]
AFA5:	mov     [rbp+current_term.c_cc], al
AFA8:	mov     [rbp+current_term.c_cc+1], 0
AFAC:	lea     rax, [rbp+current_term]
AFB0:	mov     rdx, rax; termios_p
AFB3:	mov     esi, 1; optional_actions
AFB8:	mov     edi, 1; fd
AFBD:	call    _tcsetattr
AFC2:	mov     eax, [rbp+c]
AFC5:	mov     cs:tty_interrupt_char, eax
AFCB:	nop
AFCC:	mov     rax, [rbp+var_8]
AFD0:	sub     rax, fs:28h
AFD9:	jz      short locret_AFE0
AFDB:	call    ___stack_chk_fail
AFE0:	leave
AFE1:	retn
AFE2:	endbr64
AFE6:	push    rbp
AFE7:	mov     rbp, rsp
AFEA:	sub     rsp, 10h
AFEE:	mov     [rbp+bytes_transferred], 0
AFF5:	jmp     short loc_B031
AFF7:	mov     eax, cs:tty_index
AFFD:	sub     eax, [rbp+bytes_transferred]
B000:	cdqe
B002:	mov     edx, [rbp+bytes_transferred]
B005:	movsxd  rdx, edx
B008:	lea     rcx, tty_cache
B00F:	add     rcx, rdx
B012:	mov     rdx, rax; count
B015:	mov     rsi, rcx; buf
B018:	mov     edi, 1; fd
B01D:	call    xwrite
B022:	mov     [rbp+count], eax
B025:	cmp     [rbp+count], 0
B029:	js      short loc_B03E
B02B:	mov     eax, [rbp+count]
B02E:	add     [rbp+bytes_transferred], eax
B031:	mov     eax, cs:tty_index
B037:	cmp     [rbp+bytes_transferred], eax
B03A:	jl      short loc_AFF7
B03C:	jmp     short loc_B03F
B03E:	nop
B03F:	mov     cs:tty_index, 0
B049:	nop
B04A:	leave
B04B:	retn
B04C:	endbr64
B050:	push    rbp
B051:	mov     rbp, rsp
B054:	sub     rsp, 10h
B058:	mov     [rbp+c], edi
B05B:	mov     eax, cs:tty_index
B061:	cmp     eax, 400h
B066:	jnz     short loc_B072
B068:	mov     eax, 0
B06D:	call    tty_flush
B072:	mov     eax, cs:tty_index
B078:	lea     edx, [rax+1]
B07B:	mov     cs:tty_index, edx
B081:	mov     edx, [rbp+c]
B084:	mov     ecx, edx
B086:	cdqe
B088:	lea     rdx, tty_cache
B08F:	mov     [rax+rdx], cl
B092:	mov     eax, 1
B097:	leave
B098:	retn
B099:	endbr64
B09D:	push    rbp
B09E:	mov     rbp, rsp
B0A1:	mov     ecx, cs:tty_lines
B0A7:	mov     rax, cs:tty_capability.string+0A0h
B0AE:	lea     rdx, tty_writec; int (*)(int)
B0B5:	mov     esi, ecx; int
B0B7:	mov     rdi, rax; char *
B0BA:	call    _tputs
B0BF:	mov     eax, 0
B0C4:	call    tty_flush
B0C9:	nop
B0CA:	pop     rbp
B0CB:	retn
B0CC:	endbr64
B0D0:	push    rbp
B0D1:	mov     rbp, rsp
B0D4:	mov     eax, cs:tty_lines
B0DA:	lea     ecx, [rax-1]
B0DD:	mov     rax, cs:tty_capability.string+1E0h
B0E4:	lea     rdx, tty_writec; int (*)(int)
B0EB:	mov     esi, ecx; int
B0ED:	mov     rdi, rax; char *
B0F0:	call    _tputs
B0F5:	mov     eax, 0
B0FA:	call    tty_flush
B0FF:	nop
B100:	pop     rbp
B101:	retn
B102:	endbr64
B106:	push    rbp
B107:	mov     rbp, rsp
B10A:	mov     eax, cs:tty_lines
B110:	lea     ecx, [rax-1]
B113:	mov     rax, cs:tty_capability.string+200h
B11A:	lea     rdx, tty_writec; int (*)(int)
B121:	mov     esi, ecx; int
B123:	mov     rdi, rax; char *
B126:	call    _tputs
B12B:	mov     eax, 0
B130:	call    tty_flush
B135:	nop
B136:	pop     rbp
B137:	retn
B138:	endbr64
B13C:	push    rbp
B13D:	mov     rbp, rsp
B140:	sub     rsp, 10h
B144:	mov     [rbp+screen], rdi
B148:	mov     eax, cs:tty_mode
B14E:	cmp     eax, 1
B151:	jnz     short loc_B15D
B153:	mov     edi, 0; mode
B158:	call    tty_set_mode
B15D:	mov     eax, 0
B162:	call    tty_defaults
B167:	cmp     [rbp+screen], 0
B16C:	jz      short loc_B184
B16E:	mov     eax, cs:LinuxConsole
B174:	test    eax, eax
B176:	jz      short loc_B184
B178:	mov     rax, [rbp+screen]
B17C:	mov     rdi, rax; buf
B17F:	call    tty_put_screen
B184:	mov     eax, 0
B189:	call    tty_end_cursorapp
B18E:	mov     eax, cs:tty_lines
B194:	mov     esi, 0; x
B199:	mov     edi, eax; y
B19B:	call    tty_io_goto
B1A0:	mov     eax, 0
B1A5:	call    tty_flush
B1AA:	mov     edi, 0Ah; c
B1AF:	call    _putchar
B1B4:	nop
B1B5:	leave
B1B6:	retn
B1B7:	endbr64
B1BB:	push    rbp
B1BC:	mov     rbp, rsp
B1BF:	sub     rsp, 20h
B1C3:	mov     [rbp+key_seq], rdi
B1C7:	mov     rax, [rbp+key_seq]
B1CB:	mov     [rbp+second], rax
B1CF:	mov     rax, [rbp+second]
B1D3:	mov     [rbp+first], rax
B1D7:	mov     eax, cs:tty_kbdmode
B1DD:	test    eax, eax
B1DF:	jnz     loc_B2AA
B1E5:	mov     rax, [rbp+key_seq]
B1E9:	movzx   eax, byte ptr [rax]
B1EC:	cmp     al, 5Eh ; '^'
B1EE:	jz      loc_B2AA
B1F4:	mov     eax, 0
B1F9:	jmp     locret_B2C4
B1FE:	mov     rax, [rbp+second]
B202:	movzx   eax, byte ptr [rax]
B205:	cmp     al, 5Eh ; '^'
B207:	jnz     loc_B28D
B20D:	add     [rbp+second], 1
B212:	mov     rax, [rbp+second]
B216:	movzx   eax, byte ptr [rax]
B219:	test    al, al
B21B:	jz      short loc_B286
B21D:	mov     rax, [rbp+second]
B221:	movzx   eax, byte ptr [rax]
B224:	movzx   eax, al
B227:	mov     edi, eax; c
B229:	call    _toupper
B22E:	cmp     eax, 47h ; 'G'
B231:	jz      short loc_B249
B233:	mov     rax, [rbp+second]
B237:	movzx   eax, byte ptr [rax]
B23A:	movzx   eax, al
B23D:	mov     edi, eax; c
B23F:	call    _toupper
B244:	cmp     eax, 5Ah ; 'Z'
B247:	jnz     short loc_B250
B249:	mov     eax, 0
B24E:	jmp     short locret_B2C4
B250:	mov     rax, [rbp+second]
B254:	lea     rdx, [rax+1]
B258:	mov     [rbp+second], rdx
B25C:	movzx   eax, byte ptr [rax]
B25F:	movzx   eax, al
B262:	and     eax, 7Fh
B265:	lea     ecx, [rax-20h]
B268:	mov     rax, [rbp+first]
B26C:	lea     rdx, [rax+1]
B270:	mov     [rbp+first], rdx
B274:	movsxd  rdx, ecx
B277:	lea     rcx, key_ctrl_table
B27E:	movzx   edx, byte ptr [rdx+rcx]
B282:	mov     [rax], dl
B284:	jmp     short loc_B2AA
B286:	mov     eax, 0
B28B:	jmp     short locret_B2C4
B28D:	mov     rdx, [rbp+second]
B291:	lea     rax, [rdx+1]
B295:	mov     [rbp+second], rax
B299:	mov     rax, [rbp+first]
B29D:	lea     rcx, [rax+1]
B2A1:	mov     [rbp+first], rcx
B2A5:	movzx   edx, byte ptr [rdx]
B2A8:	mov     [rax], dl
B2AA:	mov     rax, [rbp+second]
B2AE:	movzx   eax, byte ptr [rax]
B2B1:	test    al, al
B2B3:	jnz     loc_B1FE
B2B9:	mov     rax, [rbp+first]
B2BD:	mov     byte ptr [rax], 0
B2C0:	mov     rax, [rbp+key_seq]
B2C4:	leave
B2C5:	retn
B2C6:	endbr64
B2CA:	push    rbp
B2CB:	mov     rbp, rsp
B2CE:	sub     rsp, 30h
B2D2:	mov     [rbp+key_seq], rdi
B2D6:	mov     rax, fs:28h
B2DF:	mov     [rbp+var_8], rax
B2E3:	xor     eax, eax
B2E5:	mov     cs:keystr, 0
B2EC:	mov     rax, [rbp+key_seq]
B2F0:	mov     [rbp+ptr], rax
B2F4:	jmp     loc_B48B
B2F9:	mov     rax, [rbp+ptr]
B2FD:	cmp     rax, [rbp+key_seq]
B301:	jz      short loc_B324
B303:	lea     rax, keystr
B30A:	mov     rdi, rax; s
B30D:	call    _strlen
B312:	mov     rdx, rax
B315:	lea     rax, keystr
B31C:	add     rax, rdx
B31F:	mov     word ptr [rax], 20h ; ' '
B324:	mov     rax, [rbp+ptr]
B328:	movzx   eax, byte ptr [rax]
B32B:	cmp     al, 1Bh
B32D:	jnz     short loc_B360
B32F:	lea     rax, keystr
B336:	mov     rdi, rax; s
B339:	call    _strlen
B33E:	mov     rdx, rax
B341:	lea     rax, keystr
B348:	add     rax, rdx
B34B:	mov     dword ptr [rax], 61637365h
B351:	mov     word ptr [rax+4], 6570h
B357:	mov     byte ptr [rax+6], 0
B35B:	jmp     loc_B486
B360:	mov     rax, [rbp+ptr]
B364:	movzx   eax, byte ptr [rax]
B367:	cmp     al, 20h ; ' '
B369:	jnz     short loc_B398
B36B:	lea     rax, keystr
B372:	mov     rdi, rax; s
B375:	call    _strlen
B37A:	mov     rdx, rax
B37D:	lea     rax, keystr
B384:	add     rax, rdx
B387:	mov     dword ptr [rax], 63617073h
B38D:	mov     word ptr [rax+4], 65h ; 'e'
B393:	jmp     loc_B486
B398:	mov     rax, [rbp+ptr]
B39C:	movzx   eax, byte ptr [rax]
B39F:	cmp     al, 7Fh
B3A1:	jnz     short loc_B3D7
B3A3:	lea     rax, keystr
B3AA:	mov     rdi, rax; s
B3AD:	call    _strlen
B3B2:	mov     rdx, rax
B3B5:	lea     rax, keystr
B3BC:	add     rax, rdx
B3BF:	mov     rcx, 636170736B636162h
B3C9:	mov     [rax], rcx
B3CC:	mov     word ptr [rax+8], 65h ; 'e'
B3D2:	jmp     loc_B486
B3D7:	mov     rax, [rbp+ptr]
B3DB:	movzx   eax, byte ptr [rax]
B3DE:	cmp     al, 0FFh
B3E0:	jnz     short loc_B410
B3E2:	lea     rax, keystr
B3E9:	mov     rdi, rax; s
B3EC:	call    _strlen
B3F1:	mov     rdx, rax
B3F4:	lea     rax, keystr
B3FB:	add     rax, rdx
B3FE:	mov     dword ptr [rax], 6170735Eh
B404:	mov     word ptr [rax+4], 6563h
B40A:	mov     byte ptr [rax+6], 0
B40E:	jmp     short loc_B486
B410:	call    ___ctype_b_loc
B415:	mov     rdx, [rax]
B418:	mov     rax, [rbp+ptr]
B41C:	movzx   eax, byte ptr [rax]
B41F:	movzx   eax, al
B422:	add     rax, rax
B425:	add     rax, rdx
B428:	movzx   eax, word ptr [rax]
B42B:	movzx   eax, ax
B42E:	and     eax, 2
B431:	test    eax, eax
B433:	jz      short loc_B462
B435:	mov     [rbp+x], 5Eh ; '^'
B439:	mov     rax, [rbp+ptr]
B43D:	movzx   eax, byte ptr [rax]
B440:	add     eax, 40h ; '@'
B443:	mov     [rbp+x+1], al
B446:	mov     [rbp+x+2], 0
B44A:	lea     rax, [rbp+x]
B44E:	mov     rsi, rax; src
B451:	lea     rax, keystr
B458:	mov     rdi, rax; dest
B45B:	call    _strcat
B460:	jmp     short loc_B486
B462:	mov     rax, [rbp+ptr]
B466:	movzx   eax, byte ptr [rax]
B469:	mov     [rbp+x], al
B46C:	mov     [rbp+x+1], 0
B470:	lea     rax, [rbp+x]
B474:	mov     rsi, rax; src
B477:	lea     rax, keystr
B47E:	mov     rdi, rax; dest
B481:	call    _strcat
B486:	add     [rbp+ptr], 1
B48B:	mov     rax, [rbp+ptr]
B48F:	movzx   eax, byte ptr [rax]
B492:	test    al, al
B494:	jnz     loc_B2F9
B49A:	lea     rax, keystr
B4A1:	mov     rdx, [rbp+var_8]
B4A5:	sub     rdx, fs:28h
B4AE:	jz      short locret_B4B5
B4B0:	call    ___stack_chk_fail
B4B5:	leave
B4B6:	retn
B4B7:	endbr64
B4BB:	push    rbp
B4BC:	mov     rbp, rsp
B4BF:	sub     rsp, 20h
B4C3:	mov     [rbp+tty_io_cursor_x], 0FFFFFFFFh
B4CA:	mov     [rbp+tty_io_cursor_y], 0FFFFFFFFh
B4D1:	mov     edx, cs:tty_columns
B4D7:	mov     eax, cs:tty_lines
B4DD:	imul    eax, edx
B4E0:	mov     [rbp+last_pos], eax
B4E3:	mov     eax, cs:tty_last_char_flag
B4E9:	test    eax, eax
B4EB:	jnz     short loc_B4F1
B4ED:	sub     [rbp+last_pos], 1
B4F1:	mov     edi, 0; status
B4F6:	call    tty_cursor
B4FB:	mov     [rbp+pos], 0
B502:	jmp     loc_B602
B507:	mov     rdx, cs:tty_scr
B50E:	mov     eax, [rbp+pos]
B511:	cdqe
B513:	add     rax, rdx
B516:	movzx   edx, byte ptr [rax]
B519:	mov     rcx, cs:tty_prev_scr
B520:	mov     eax, [rbp+pos]
B523:	cdqe
B525:	add     rax, rcx
B528:	movzx   eax, byte ptr [rax]
B52B:	cmp     dl, al
B52D:	jnz     short loc_B55B
B52F:	mov     rdx, cs:tty_atr
B536:	mov     eax, [rbp+pos]
B539:	cdqe
B53B:	add     rax, rdx
B53E:	movzx   edx, byte ptr [rax]
B541:	mov     rcx, cs:tty_prev_atr
B548:	mov     eax, [rbp+pos]
B54B:	cdqe
B54D:	add     rax, rcx
B550:	movzx   eax, byte ptr [rax]
B553:	cmp     dl, al
B555:	jz      loc_B5FE
B55B:	mov     esi, cs:tty_columns
B561:	mov     eax, [rbp+pos]
B564:	cdq
B565:	idiv    esi
B567:	mov     [rbp+y], eax
B56A:	mov     ecx, cs:tty_columns
B570:	mov     eax, [rbp+pos]
B573:	cdq
B574:	idiv    ecx
B576:	mov     [rbp+x], edx
B579:	mov     eax, [rbp+x]
B57C:	cmp     eax, [rbp+tty_io_cursor_x]
B57F:	jnz     short loc_B589
B581:	mov     eax, [rbp+y]
B584:	cmp     eax, [rbp+tty_io_cursor_y]
B587:	jz      short loc_B5A4
B589:	mov     eax, [rbp+x]
B58C:	mov     [rbp+tty_io_cursor_x], eax
B58F:	mov     eax, [rbp+y]
B592:	mov     [rbp+tty_io_cursor_y], eax
B595:	mov     edx, [rbp+tty_io_cursor_x]
B598:	mov     eax, [rbp+tty_io_cursor_y]
B59B:	mov     esi, edx; x
B59D:	mov     edi, eax; y
B59F:	call    tty_io_goto
B5A4:	mov     rdx, cs:tty_atr
B5AB:	mov     eax, [rbp+pos]
B5AE:	cdqe
B5B0:	add     rax, rdx
B5B3:	movzx   eax, byte ptr [rax]
B5B6:	movzx   eax, al
B5B9:	mov     edi, eax; attributes
B5BB:	call    tty_io_colors
B5C0:	mov     rdx, cs:tty_scr
B5C7:	mov     eax, [rbp+pos]
B5CA:	cdqe
B5CC:	add     rax, rdx
B5CF:	movzx   eax, byte ptr [rax]
B5D2:	movzx   eax, al
B5D5:	mov     edi, eax; c
B5D7:	mov     eax, 0
B5DC:	call    tty_writec
B5E1:	add     [rbp+tty_io_cursor_x], 1
B5E5:	mov     eax, cs:tty_columns
B5EB:	cmp     [rbp+tty_io_cursor_x], eax
B5EE:	jnz     short loc_B5FE
B5F0:	mov     [rbp+tty_io_cursor_x], 0
B5F7:	mov     [rbp+tty_io_cursor_y], 0FFFFFFFFh
B5FE:	add     [rbp+pos], 1
B602:	mov     eax, [rbp+pos]
B605:	cmp     eax, [rbp+last_pos]
B608:	jl      loc_B507
B60E:	mov     edx, cs:tty_cursor_x
B614:	mov     eax, cs:tty_cursor_y
B61A:	mov     esi, edx; x
B61C:	mov     edi, eax; y
B61E:	call    tty_io_goto
B623:	mov     edi, 1; status
B628:	call    tty_cursor
B62D:	mov     eax, cs:tty_index
B633:	test    eax, eax
B635:	jz      short loc_B641
B637:	mov     eax, 0
B63C:	call    tty_flush
B641:	mov     edx, cs:tty_columns
B647:	mov     eax, cs:tty_lines
B64D:	imul    eax, edx
B650:	movsxd  rdx, eax; n
B653:	mov     rcx, cs:tty_scr
B65A:	mov     rax, cs:tty_prev_scr
B661:	mov     rsi, rcx; src
B664:	mov     rdi, rax; dest
B667:	call    _memcpy
B66C:	mov     edx, cs:tty_columns
B672:	mov     eax, cs:tty_lines
B678:	imul    eax, edx
B67B:	movsxd  rdx, eax; n
B67E:	mov     rcx, cs:tty_atr
B685:	mov     rax, cs:tty_prev_atr
B68C:	mov     rsi, rcx; src
B68F:	mov     rdi, rax; dest
B692:	call    _memcpy
B697:	nop
B698:	leave
B699:	retn
B69A:	endbr64
B69E:	push    rbp
B69F:	mov     rbp, rsp
B6A2:	sub     rsp, 10h
B6A6:	mov     [rbp+s], rdi
B6AA:	mov     [rbp+len], esi
B6AD:	mov     edx, cs:tty_index
B6B3:	mov     eax, [rbp+len]
B6B6:	add     eax, edx
B6B8:	cmp     eax, 3FFh
B6BD:	jle     short loc_B6C9
B6BF:	mov     eax, 0
B6C4:	call    tty_flush
B6C9:	mov     eax, [rbp+len]
B6CC:	movsxd  rdx, eax; n
B6CF:	mov     eax, cs:tty_index
B6D5:	cdqe
B6D7:	lea     rcx, tty_cache
B6DE:	add     rcx, rax
B6E1:	mov     rax, [rbp+s]
B6E5:	mov     rsi, rax; src
B6E8:	mov     rdi, rcx; dest
B6EB:	call    _memcpy
B6F0:	mov     edx, cs:tty_index
B6F6:	mov     eax, [rbp+len]
B6F9:	add     eax, edx
B6FB:	mov     cs:tty_index, eax
B701:	mov     eax, [rbp+len]
B704:	leave
B705:	retn
B706:	endbr64
B70A:	push    rbp
B70B:	mov     rbp, rsp
B70E:	sub     rsp, 20h
B712:	mov     [rbp+buf], rdi
B716:	mov     [rbp+length], esi
B719:	mov     eax, cs:tty_cursor_x
B71F:	mov     [rbp+x], eax
B722:	mov     edx, cs:tty_cursor_x
B728:	mov     eax, [rbp+length]
B72B:	add     eax, edx
B72D:	mov     cs:tty_cursor_x, eax
B733:	mov     eax, cs:tty_columns
B739:	cmp     [rbp+x], eax
B73C:	jl      short loc_B748
B73E:	mov     eax, 0
B743:	jmp     locret_B7E8
B748:	mov     edx, cs:tty_cursor_y
B74E:	mov     eax, cs:tty_lines
B754:	cmp     edx, eax
B756:	jl      short loc_B762
B758:	mov     eax, 0
B75D:	jmp     locret_B7E8
B762:	mov     edx, [rbp+x]
B765:	mov     eax, [rbp+length]
B768:	add     edx, eax
B76A:	mov     eax, cs:tty_columns
B770:	cmp     edx, eax
B772:	jle     short loc_B780
B774:	mov     eax, cs:tty_columns
B77A:	sub     eax, [rbp+x]
B77D:	mov     [rbp+length], eax
B780:	mov     edx, cs:tty_cursor_y
B786:	mov     eax, cs:tty_columns
B78C:	imul    edx, eax
B78F:	mov     eax, [rbp+x]
B792:	add     eax, edx
B794:	mov     [rbp+tty_offset], eax
B797:	mov     eax, [rbp+length]
B79A:	movsxd  rdx, eax; n
B79D:	mov     rcx, cs:tty_scr
B7A4:	mov     eax, [rbp+tty_offset]
B7A7:	cdqe
B7A9:	add     rcx, rax
B7AC:	mov     rax, [rbp+buf]
B7B0:	mov     rsi, rax; src
B7B3:	mov     rdi, rcx; dest
B7B6:	call    _memcpy
B7BB:	mov     eax, [rbp+length]
B7BE:	movsxd  rdx, eax; n
B7C1:	movzx   eax, cs:tty_current_attribute
B7C8:	movzx   eax, al
B7CB:	mov     rsi, cs:tty_atr
B7D2:	mov     ecx, [rbp+tty_offset]
B7D5:	movsxd  rcx, ecx
B7D8:	add     rcx, rsi
B7DB:	mov     esi, eax; c
B7DD:	mov     rdi, rcx; s
B7E0:	call    _memset
B7E5:	mov     eax, [rbp+length]
B7E8:	leave
B7E9:	retn
B7EA:	endbr64
B7EE:	push    rbp
B7EF:	mov     rbp, rsp
B7F2:	sub     rsp, 20h
B7F6:	mov     [rbp+c], edi
B7F9:	mov     rax, fs:28h
B802:	mov     [rbp+var_8], rax
B806:	xor     eax, eax
B808:	mov     eax, [rbp+c]
B80B:	mov     [rbp+character], al
B80E:	lea     rax, [rbp+character]
B812:	mov     esi, 1; length
B817:	mov     rdi, rax; buf
B81A:	call    tty_puts
B81F:	mov     rdx, [rbp+var_8]
B823:	sub     rdx, fs:28h
B82C:	jz      short locret_B833
B82E:	call    ___stack_chk_fail
B833:	leave
B834:	retn
B835:	endbr64
B839:	push    rbp
B83A:	mov     rbp, rsp
B83D:	sub     rsp, 20h
B841:	mov     [rbp+buf], rdi
B845:	mov     [rbp+length], esi
B848:	mov     eax, 0
B84D:	call    tty_update
B852:	mov     rax, cs:tty_enter_idle_hook
B859:	test    rax, rax
B85C:	jz      short loc_B86C
B85E:	mov     rdx, cs:tty_enter_idle_hook
B865:	mov     eax, 0
B86A:	call    rdx ; tty_enter_idle_hook
B86C:	mov     eax, [rbp+length]
B86F:	movsxd  rdx, eax; count
B872:	mov     rax, [rbp+buf]
B876:	mov     rsi, rax; buf
B879:	mov     edi, 0; fd
B87E:	call    xread
B883:	mov     [rbp+bytes], eax
B886:	mov     rax, cs:tty_exit_idle_hook
B88D:	test    rax, rax
B890:	jz      short loc_B8A0
B892:	mov     rdx, cs:tty_exit_idle_hook
B899:	mov     eax, 0
B89E:	call    rdx ; tty_exit_idle_hook
B8A0:	mov     eax, [rbp+bytes]
B8A3:	leave
B8A4:	retn
B8A5:	endbr64
B8A9:	push    rbp
B8AA:	mov     rbp, rsp
B8AD:	mov     eax, 0
B8B2:	call    tty_io_clear
B8B7:	mov     edx, cs:tty_lines
B8BD:	mov     eax, cs:tty_columns
B8C3:	imul    eax, edx
B8C6:	movsxd  rdx, eax; n
B8C9:	mov     rax, cs:tty_scr
B8D0:	mov     esi, 0; c
B8D5:	mov     rdi, rax; s
B8D8:	call    _memset
B8DD:	mov     edx, cs:tty_lines
B8E3:	mov     eax, cs:tty_columns
B8E9:	imul    eax, edx
B8EC:	movsxd  rdx, eax; n
B8EF:	mov     rax, cs:tty_atr
B8F6:	mov     esi, 0; c
B8FB:	mov     rdi, rax; s
B8FE:	call    _memset
B903:	mov     edx, cs:tty_lines
B909:	mov     eax, cs:tty_columns
B90F:	imul    eax, edx
B912:	movsxd  rdx, eax; n
B915:	mov     rax, cs:tty_prev_scr
B91C:	mov     esi, 0; c
B921:	mov     rdi, rax; s
B924:	call    _memset
B929:	mov     edx, cs:tty_lines
B92F:	mov     eax, cs:tty_columns
B935:	imul    eax, edx
B938:	movsxd  rdx, eax; n
B93B:	mov     rax, cs:tty_prev_atr
B942:	mov     esi, 0; c
B947:	mov     rdi, rax; s
B94A:	call    _memset
B94F:	mov     cs:tty_cursor_x, 0
B959:	mov     cs:tty_cursor_y, 0
B963:	nop
B964:	pop     rbp
B965:	retn
B966:	endbr64
B96A:	push    rbp
B96B:	mov     rbp, rsp
B96E:	mov     edx, cs:tty_lines
B974:	mov     eax, cs:tty_columns
B97A:	imul    eax, edx
B97D:	movsxd  rdx, eax; n
B980:	mov     rax, cs:tty_scr
B987:	mov     esi, 20h ; ' '; c
B98C:	mov     rdi, rax; s
B98F:	call    _memset
B994:	mov     edx, cs:tty_lines
B99A:	mov     eax, cs:tty_columns
B9A0:	imul    eax, edx
B9A3:	movsxd  rdx, eax; n
B9A6:	movzx   eax, cs:tty_current_attribute
B9AD:	movzx   ecx, al
B9B0:	mov     rax, cs:tty_atr
B9B7:	mov     esi, ecx; c
B9B9:	mov     rdi, rax; s
B9BC:	call    _memset
B9C1:	mov     eax, 0
B9C6:	call    tty_touch
B9CB:	nop
B9CC:	pop     rbp
B9CD:	retn
B9CE:	endbr64
B9D2:	push    rbp
B9D3:	mov     rbp, rsp
B9D6:	mov     edx, cs:tty_lines
B9DC:	mov     eax, cs:tty_columns
B9E2:	imul    eax, edx
B9E5:	movsxd  rdx, eax; n
B9E8:	mov     rax, cs:tty_prev_scr
B9EF:	mov     esi, 0; c
B9F4:	mov     rdi, rax; s
B9F7:	call    _memset
B9FC:	nop
B9FD:	pop     rbp
B9FE:	retn
B9FF:	endbr64
BA03:	push    rbp
BA04:	mov     rbp, rsp
BA07:	sub     rsp, 10h
BA0B:	mov     [rbp+y], edi
BA0E:	mov     [rbp+x], esi
BA11:	mov     eax, cs:tty_capability.integer+180h
BA17:	test    eax, eax
BA19:	jnz     short loc_BA25
BA1B:	mov     eax, 0
BA20:	call    tty_defaults
BA25:	cmp     [rbp+x], 0
BA29:	js      short loc_BA47
BA2B:	mov     eax, cs:tty_columns
BA31:	cmp     [rbp+x], eax
BA34:	jge     short loc_BA47
BA36:	cmp     [rbp+y], 0
BA3A:	js      short loc_BA47
BA3C:	mov     eax, cs:tty_lines
BA42:	cmp     [rbp+y], eax
BA45:	jl      short loc_BA86
BA47:	mov     eax, cs:tty_lines
BA4D:	lea     edx, [rax-1]; int
BA50:	mov     eax, cs:tty_columns
BA56:	lea     ecx, [rax-1]
BA59:	mov     rax, cs:tty_capability.string+0C0h
BA60:	mov     esi, ecx; int
BA62:	mov     rdi, rax; char *
BA65:	call    _tgoto
BA6A:	mov     rcx, rax
BA6D:	lea     rax, tty_writec
BA74:	mov     rdx, rax; int (*)(int)
BA77:	mov     esi, 1; int
BA7C:	mov     rdi, rcx; char *
BA7F:	call    _tputs
BA84:	jmp     short loc_BAB8
BA86:	mov     rax, cs:tty_capability.string+0C0h
BA8D:	mov     edx, [rbp+y]; int
BA90:	mov     ecx, [rbp+x]
BA93:	mov     esi, ecx; int
BA95:	mov     rdi, rax; char *
BA98:	call    _tgoto
BA9D:	mov     rcx, rax
BAA0:	lea     rax, tty_writec
BAA7:	mov     rdx, rax; int (*)(int)
BAAA:	mov     esi, 1; int
BAAF:	mov     rdi, rcx; char *
BAB2:	call    _tputs
BAB7:	nop
BAB8:	nop
BAB9:	leave
BABA:	retn
BABB:	endbr64
BABF:	push    rbp
BAC0:	mov     rbp, rsp
BAC3:	sub     rsp, 30h
BAC7:	mov     [rbp+color], edi
BACA:	mov     rax, fs:28h
BAD3:	mov     [rbp+var_8], rax
BAD7:	xor     eax, eax
BAD9:	mov     eax, cs:fg_cache
BADF:	cmp     eax, 1
BAE2:	jnz     short loc_BAF6
BAE4:	movzx   eax, cs:tty_io_current_attribute
BAEB:	movzx   eax, al
BAEE:	and     eax, 7
BAF1:	cmp     [rbp+color], eax
BAF4:	jz      short loc_BB71
BAF6:	mov     eax, cs:AnsiColors
BAFC:	cmp     eax, 1
BAFF:	jnz     short loc_BB3A
BB01:	mov     eax, dword ptr cs:ansi_foreground; 'x1B[30m'
BB07:	mov     dword ptr [rbp+str], eax
BB0A:	movzx   eax, byte ptr cs:ansi_foreground+4; 'm'
BB11:	mov     [rbp+str+4], al
BB14:	movzx   eax, [rbp+str+3]
BB18:	mov     edx, eax
BB1A:	mov     eax, [rbp+color]
BB1D:	add     eax, edx
BB1F:	mov     [rbp+str+3], al
BB22:	lea     rax, [rbp+str]
BB26:	mov     esi, 5; len
BB2B:	mov     rdi, rax; s
BB2E:	mov     eax, 0
BB33:	call    tty_writes
BB38:	jmp     short loc_BB4B
BB3A:	cmp     [rbp+color], 7
BB3E:	setnz   al
BB41:	movzx   eax, al
BB44:	mov     edi, eax; status
BB46:	call    tty_io_reversevid
BB4B:	mov     cs:fg_cache, 1
BB55:	movzx   eax, cs:tty_io_current_attribute
BB5C:	and     eax, 0FFFFFFF8h
BB5F:	mov     edx, eax
BB61:	mov     eax, [rbp+color]
BB64:	and     eax, 7
BB67:	or      eax, edx
BB69:	mov     cs:tty_io_current_attribute, al
BB6F:	jmp     short loc_BB72
BB71:	nop
BB72:	mov     rax, [rbp+var_8]
BB76:	sub     rax, fs:28h
BB7F:	jz      short locret_BB86
BB81:	call    ___stack_chk_fail
BB86:	leave
BB87:	retn
BB88:	endbr64
BB8C:	push    rbp
BB8D:	mov     rbp, rsp
BB90:	sub     rsp, 30h
BB94:	mov     [rbp+color], edi
BB97:	mov     rax, fs:28h
BBA0:	mov     [rbp+var_8], rax
BBA4:	xor     eax, eax
BBA6:	mov     eax, cs:bg_cache
BBAC:	cmp     eax, 1
BBAF:	jnz     short loc_BBC6
BBB1:	movzx   eax, cs:tty_io_current_attribute
BBB8:	movzx   eax, al
BBBB:	sar     eax, 3
BBBE:	and     eax, 7
BBC1:	cmp     [rbp+color], eax
BBC4:	jz      short loc_BC44
BBC6:	mov     eax, cs:AnsiColors
BBCC:	cmp     eax, 1
BBCF:	jnz     short loc_BC0A
BBD1:	mov     eax, dword ptr cs:ansi_background
BBD7:	mov     dword ptr [rbp+str], eax
BBDA:	movzx   eax, cs:ansi_background+4
BBE1:	mov     [rbp+str+4], al
BBE4:	movzx   eax, [rbp+str+3]
BBE8:	mov     edx, eax
BBEA:	mov     eax, [rbp+color]
BBED:	add     eax, edx
BBEF:	mov     [rbp+str+3], al
BBF2:	lea     rax, [rbp+str]
BBF6:	mov     esi, 5; len
BBFB:	mov     rdi, rax; s
BBFE:	mov     eax, 0
BC03:	call    tty_writes
BC08:	jmp     short loc_BC1B
BC0A:	cmp     [rbp+color], 0
BC0E:	setnz   al
BC11:	movzx   eax, al
BC14:	mov     edi, eax; status
BC16:	call    tty_io_reversevid
BC1B:	mov     cs:bg_cache, 1
BC25:	movzx   eax, cs:tty_io_current_attribute
BC2C:	and     eax, 0FFFFFFC7h
BC2F:	mov     edx, eax
BC31:	mov     eax, [rbp+color]
BC34:	shl     eax, 3
BC37:	and     eax, 38h
BC3A:	or      eax, edx
BC3C:	mov     cs:tty_io_current_attribute, al
BC42:	jmp     short loc_BC45
BC44:	nop
BC45:	mov     rax, [rbp+var_8]
BC49:	sub     rax, fs:28h
BC52:	jz      short locret_BC59
BC54:	call    ___stack_chk_fail
BC59:	leave
BC5A:	retn
BC5B:	endbr64
BC5F:	push    rbp
BC60:	mov     rbp, rsp
BC63:	sub     rsp, 10h
BC67:	mov     [rbp+status], edi
BC6A:	mov     eax, cs:br_cache
BC70:	cmp     eax, 1
BC73:	jnz     short loc_BC8E
BC75:	movzx   eax, cs:tty_io_current_attribute
BC7C:	movzx   eax, al
BC7F:	sar     eax, 6
BC82:	and     eax, 1
BC85:	cmp     [rbp+status], eax
BC88:	jz      loc_BD57
BC8E:	cmp     [rbp+status], 1
BC92:	jnz     short loc_BCC1
BC94:	mov     rax, cs:tty_capability.string+40h
BC9B:	test    rax, rax
BC9E:	jz      loc_BD2E
BCA4:	mov     rax, cs:tty_capability.string+40h
BCAB:	lea     rdx, tty_writec; int (*)(int)
BCB2:	mov     esi, 1; int
BCB7:	mov     rdi, rax; char *
BCBA:	call    _tputs
BCBF:	jmp     short loc_BD2E
BCC1:	mov     rax, cs:tty_capability.string
BCC8:	test    rax, rax
BCCB:	jz      short loc_BCE8
BCCD:	mov     rax, cs:tty_capability.string
BCD4:	lea     rdx, tty_writec; int (*)(int)
BCDB:	mov     esi, 1; int
BCE0:	mov     rdi, rax; char *
BCE3:	call    _tputs
BCE8:	mov     cs:fg_cache, 0
BCF2:	mov     cs:bg_cache, 0
BCFC:	movzx   eax, cs:tty_io_current_attribute
BD03:	and     eax, 0FFFFFFBFh
BD06:	mov     cs:tty_io_current_attribute, al
BD0C:	movzx   eax, cs:tty_io_current_attribute
BD13:	shr     al, 7
BD16:	cmp     al, 1
BD18:	jnz     short loc_BD2E
BD1A:	mov     cs:rv_cache, 0
BD24:	mov     edi, 1; status
BD29:	call    tty_io_reversevid
BD2E:	mov     cs:br_cache, 1
BD38:	movzx   eax, cs:tty_io_current_attribute
BD3F:	and     eax, 0FFFFFFBFh
BD42:	mov     edx, eax
BD44:	mov     eax, [rbp+status]
BD47:	shl     eax, 6
BD4A:	and     eax, 40h
BD4D:	or      eax, edx
BD4F:	mov     cs:tty_io_current_attribute, al
BD55:	jmp     short locret_BD58
BD57:	nop
BD58:	leave
BD59:	retn
BD5A:	endbr64
BD5E:	push    rbp
BD5F:	mov     rbp, rsp
BD62:	sub     rsp, 10h
BD66:	mov     [rbp+status], edi
BD69:	mov     eax, cs:rv_cache
BD6F:	cmp     eax, 1
BD72:	jnz     short loc_BD8A
BD74:	movzx   eax, cs:tty_io_current_attribute
BD7B:	shr     al, 7
BD7E:	movzx   eax, al
BD81:	cmp     [rbp+status], eax
BD84:	jz      loc_BE53
BD8A:	cmp     [rbp+status], 1
BD8E:	jnz     short loc_BDBD
BD90:	mov     rax, cs:tty_capability.string+20h
BD97:	test    rax, rax
BD9A:	jz      loc_BE2D
BDA0:	mov     rax, cs:tty_capability.string+20h
BDA7:	lea     rdx, tty_writec; int (*)(int)
BDAE:	mov     esi, 1; int
BDB3:	mov     rdi, rax; char *
BDB6:	call    _tputs
BDBB:	jmp     short loc_BE2D
BDBD:	mov     rax, cs:tty_capability.string
BDC4:	test    rax, rax
BDC7:	jz      short loc_BDE4
BDC9:	mov     rax, cs:tty_capability.string
BDD0:	lea     rdx, tty_writec; int (*)(int)
BDD7:	mov     esi, 1; int
BDDC:	mov     rdi, rax; char *
BDDF:	call    _tputs
BDE4:	mov     cs:fg_cache, 0
BDEE:	mov     cs:bg_cache, 0
BDF8:	movzx   eax, cs:tty_io_current_attribute
BDFF:	and     eax, 7Fh
BE02:	mov     cs:tty_io_current_attribute, al
BE08:	movzx   eax, cs:tty_io_current_attribute
BE0F:	movzx   eax, al
BE12:	and     eax, 40h
BE15:	test    eax, eax
BE17:	jz      short loc_BE2D
BE19:	mov     cs:br_cache, 0
BE23:	mov     edi, 1; status
BE28:	call    tty_io_brightness
BE2D:	mov     cs:rv_cache, 1
BE37:	movzx   eax, cs:tty_io_current_attribute
BE3E:	and     eax, 7Fh
BE41:	mov     edx, eax
BE43:	mov     eax, [rbp+status]
BE46:	shl     eax, 7
BE49:	or      eax, edx
BE4B:	mov     cs:tty_io_current_attribute, al
BE51:	jmp     short locret_BE54
BE53:	nop
BE54:	leave
BE55:	retn
BE56:	endbr64
BE5A:	push    rbp
BE5B:	mov     rbp, rsp
BE5E:	sub     rsp, 10h
BE62:	mov     [rbp+attributes], edi
BE65:	mov     eax, [rbp+attributes]
BE68:	sar     eax, 6
BE6B:	and     eax, 1
BE6E:	mov     edi, eax; status
BE70:	call    tty_io_brightness
BE75:	mov     eax, [rbp+attributes]
BE78:	and     eax, 7
BE7B:	mov     edi, eax; color
BE7D:	call    tty_io_foreground
BE82:	mov     eax, [rbp+attributes]
BE85:	sar     eax, 3
BE88:	and     eax, 7
BE8B:	mov     edi, eax; color
BE8D:	call    tty_io_background
BE92:	nop
BE93:	leave
BE94:	retn
BE95:	endbr64
BE99:	push    rbp
BE9A:	mov     rbp, rsp
BE9D:	mov     [rbp+y], edi
BEA0:	mov     [rbp+x], esi
BEA3:	mov     eax, [rbp+y]
BEA6:	mov     cs:tty_cursor_y, eax
BEAC:	mov     eax, [rbp+x]
BEAF:	mov     cs:tty_cursor_x, eax
BEB5:	nop
BEB6:	pop     rbp
BEB7:	retn
BEB8:	endbr64
BEBC:	push    rbp
BEBD:	mov     rbp, rsp
BEC0:	mov     [rbp+y], rdi
BEC4:	mov     [rbp+x], rsi
BEC8:	mov     edx, cs:tty_cursor_y
BECE:	mov     rax, [rbp+y]
BED2:	mov     [rax], edx
BED4:	mov     edx, cs:tty_cursor_x
BEDA:	mov     rax, [rbp+x]
BEDE:	mov     [rax], edx
BEE0:	nop
BEE1:	pop     rbp
BEE2:	retn
BEE3:	endbr64
BEE7:	push    rbp
BEE8:	mov     rbp, rsp
BEEB:	mov     [rbp+color], edi
BEEE:	movzx   eax, cs:tty_current_attribute
BEF5:	and     eax, 0FFFFFFF8h
BEF8:	mov     edx, eax
BEFA:	mov     eax, [rbp+color]
BEFD:	and     eax, 7
BF00:	or      eax, edx
BF02:	mov     cs:tty_current_attribute, al
BF08:	nop
BF09:	pop     rbp
BF0A:	retn
BF0B:	endbr64
BF0F:	push    rbp
BF10:	mov     rbp, rsp
BF13:	mov     [rbp+color], edi
BF16:	movzx   eax, cs:tty_current_attribute
BF1D:	and     eax, 0FFFFFFC7h
BF20:	mov     edx, eax
BF22:	mov     eax, [rbp+color]
BF25:	shl     eax, 3
BF28:	and     eax, 38h
BF2B:	or      eax, edx
BF2D:	mov     cs:tty_current_attribute, al
BF33:	nop
BF34:	pop     rbp
BF35:	retn
BF36:	endbr64
BF3A:	push    rbp
BF3B:	mov     rbp, rsp
BF3E:	mov     [rbp+status], edi
BF41:	movzx   eax, cs:tty_current_attribute
BF48:	and     eax, 0FFFFFFBFh
BF4B:	mov     edx, eax
BF4D:	mov     eax, [rbp+status]
BF50:	shl     eax, 6
BF53:	and     eax, 40h
BF56:	or      eax, edx
BF58:	mov     cs:tty_current_attribute, al
BF5E:	nop
BF5F:	pop     rbp
BF60:	retn
BF61:	endbr64
BF65:	push    rbp
BF66:	mov     rbp, rsp
BF69:	mov     [rbp+status], edi
BF6C:	movzx   eax, cs:tty_current_attribute
BF73:	and     eax, 7Fh
BF76:	mov     edx, eax
BF78:	mov     eax, [rbp+status]
BF7B:	shl     eax, 7
BF7E:	or      eax, edx
BF80:	mov     cs:tty_current_attribute, al
BF86:	nop
BF87:	pop     rbp
BF88:	retn
BF89:	endbr64
BF8D:	push    rbp
BF8E:	mov     rbp, rsp
BF91:	sub     rsp, 10h
BF95:	mov     [rbp+brightness], edi
BF98:	mov     [rbp+foreground], esi
BF9B:	mov     [rbp+background], edx
BF9E:	mov     eax, [rbp+brightness]
BFA1:	mov     edi, eax; status
BFA3:	call    tty_brightness
BFA8:	mov     eax, [rbp+foreground]
BFAB:	mov     edi, eax; color
BFAD:	call    tty_foreground
BFB2:	mov     eax, [rbp+background]
BFB5:	mov     edi, eax; color
BFB7:	call    tty_background
BFBC:	nop
BFBD:	leave
BFBE:	retn
BFBF:	endbr64
BFC3:	push    rbp
BFC4:	mov     rbp, rsp
BFC7:	mov     edi, 7; c
BFCC:	mov     eax, 0
BFD1:	call    tty_writec
BFD6:	mov     eax, 0
BFDB:	call    tty_flush
BFE0:	nop
BFE1:	pop     rbp
BFE2:	retn
BFE3:	endbr64
BFE7:	push    rbp
BFE8:	mov     rbp, rsp
BFEB:	sub     rsp, 10h
BFEF:	mov     [rbp+status], edi
BFF2:	cmp     [rbp+status], 0
BFF6:	jz      short loc_C021
BFF8:	mov     rax, cs:tty_capability.string+80h
BFFF:	test    rax, rax
C002:	jz      short loc_C048
C004:	mov     rax, cs:tty_capability.string+80h
C00B:	lea     rdx, tty_writec; int (*)(int)
C012:	mov     esi, 1; int
C017:	mov     rdi, rax; char *
C01A:	call    _tputs
C01F:	jmp     short loc_C048
C021:	mov     rax, cs:tty_capability.string+60h
C028:	test    rax, rax
C02B:	jz      short loc_C048
C02D:	mov     rax, cs:tty_capability.string+60h
C034:	lea     rdx, tty_writec; int (*)(int)
C03B:	mov     esi, 1; int
C040:	mov     rdi, rax; char *
C043:	call    _tputs
C048:	nop
C049:	leave
C04A:	retn
C04B:	endbr64
C04F:	push    rbp
C050:	mov     rbp, rsp
C053:	mov     [rbp+status], rdi
C057:	movzx   edx, cs:tty_current_attribute
C05E:	mov     rax, [rbp+status]
C062:	mov     [rax], dl
C064:	nop
C065:	pop     rbp
C066:	retn
C067:	endbr64
C06B:	push    rbp
C06C:	mov     rbp, rsp
C06F:	mov     [rbp+status], rdi
C073:	mov     rax, [rbp+status]
C077:	movzx   eax, byte ptr [rax]
C07A:	mov     cs:tty_current_attribute, al
C080:	nop
C081:	pop     rbp
C082:	retn
C083:	endbr64
C087:	push    rbp
C088:	mov     rbp, rsp
C08B:	mov     eax, cs:AnsiColors
C091:	cmp     eax, 1
C094:	jnz     short loc_C0AF
C096:	mov     esi, 4; len
C09B:	lea     rax, ansi_defaults; 'x1B[0m'
C0A2:	mov     rdi, rax; s
C0A5:	mov     eax, 0
C0AA:	call    tty_writes
C0AF:	mov     rax, cs:tty_capability.string
C0B6:	test    rax, rax
C0B9:	jz      short loc_C0D6
C0BB:	mov     rax, cs:tty_capability.string
C0C2:	lea     rdx, tty_writec; int (*)(int)
C0C9:	mov     esi, 1; int
C0CE:	mov     rdi, rax; char *
C0D1:	call    _tputs
C0D6:	mov     cs:fg_cache, 0
C0E0:	mov     cs:bg_cache, 0
C0EA:	mov     cs:br_cache, 0
C0F4:	mov     cs:rv_cache, 0
C0FE:	nop
C0FF:	pop     rbp
C100:	retn
C101:	endbr64
C105:	push    rbp
C106:	mov     rbp, rsp
C109:	mov     eax, cs:keyindex
C10F:	cdqe
C111:	lea     rdx, keybuf
C118:	movzx   eax, byte ptr [rax+rdx]
C11C:	movsx   eax, al
C11F:	mov     [rbp+key], eax
C122:	mov     eax, [rbp+key]
C125:	and     eax, 80h
C12A:	test    eax, eax
C12C:	jz      short loc_C15F
C12E:	mov     eax, cs:keyindex
C134:	cdqe
C136:	lea     rdx, keybuf
C13D:	movzx   edx, byte ptr [rax+rdx]
C141:	mov     eax, cs:keyindex
C147:	mov     ecx, edx
C149:	and     ecx, 7Fh
C14C:	cdqe
C14E:	lea     rdx, keybuf
C155:	mov     [rax+rdx], cl
C158:	mov     eax, 1Bh
C15D:	jmp     short loc_C180
C15F:	mov     eax, cs:keyno
C165:	sub     eax, 1
C168:	mov     cs:keyno, eax
C16E:	mov     eax, cs:keyindex
C174:	add     eax, 1
C177:	mov     cs:keyindex, eax
C17D:	mov     eax, [rbp+key]
C180:	pop     rbp
C181:	retn
C182:	endbr64
C186:	push    rbp
C187:	mov     rbp, rsp
C18A:	mov     eax, 0
C18F:	call    service_pending_signals
C194:	mov     eax, cs:keyno
C19A:	test    eax, eax
C19C:	jz      short loc_C1AA
C19E:	mov     eax, 0
C1A3:	call    tty_extract_key
C1A8:	jmp     short loc_C221
C1AA:	mov     edi, 0FFFFFFFFh; c
C1AF:	call    tty_set_interrupt_char
C1B4:	mov     edi, 1; mode
C1B9:	call    signals
C1BE:	mov     cs:keyindex, 0
C1C8:	nop
C1C9:	mov     esi, 400h; length
C1CE:	lea     rax, keybuf
C1D5:	mov     rdi, rax; buf
C1D8:	mov     eax, 0
C1DD:	call    tty_read
C1E2:	mov     cs:keyno, eax
C1E8:	mov     eax, cs:keyno
C1EE:	test    eax, eax
C1F0:	js      short loc_C1C9
C1F2:	mov     edi, 0; mode
C1F7:	call    signals
C1FC:	mov     edi, 7; c
C201:	call    tty_set_interrupt_char
C206:	mov     eax, cs:keyno
C20C:	test    eax, eax
C20E:	jz      short loc_C21C
C210:	mov     eax, 0
C215:	call    tty_extract_key
C21A:	jmp     short loc_C221
C21C:	mov     eax, 0FFFFFFFFh
C221:	pop     rbp
C222:	retn
C223:	endbr64
C227:	push    rbp
C228:	mov     rbp, rsp
C22B:	sub     rsp, 30h
C22F:	mov     [rbp+key], rdi
C233:	mov     [rbp+key_seq], rsi
C237:	mov     [rbp+aux_data], rdx
C23B:	mov     edi, 18h; n
C240:	call    xmalloc
C245:	mov     [rbp+new_key], rax
C249:	mov     rax, [rbp+key_seq]
C24D:	mov     rdi, rax; string
C250:	call    xstrdup
C255:	mov     rdx, [rbp+new_key]
C259:	mov     [rdx], rax
C25C:	mov     rax, [rbp+new_key]
C260:	mov     rdx, [rbp+aux_data]
C264:	mov     [rax+10h], rdx
C268:	mov     rax, [rbp+key]
C26C:	mov     rdx, [rax]
C26F:	mov     rax, [rbp+new_key]
C273:	mov     [rax+8], rdx
C277:	mov     rax, [rbp+key]
C27B:	mov     rdx, [rbp+new_key]
C27F:	mov     [rax], rdx
C282:	nop
C283:	leave
C284:	retn
C285:	endbr64
C289:	push    rbp
C28A:	mov     rbp, rsp
C28D:	sub     rsp, 10h
C291:	mov     [rbp+key_seq], rdi
C295:	mov     [rbp+aux_data], rsi
C299:	mov     rax, [rbp+key_seq]
C29D:	movzx   eax, byte ptr [rax]
C2A0:	test    al, al
C2A2:	jz      loc_C36A
C2A8:	mov     rax, cs:key_0
C2AF:	test    rax, rax
C2B2:	jz      short loc_C2D4
C2B4:	mov     rax, cs:key_0
C2BB:	mov     rax, [rax]
C2BE:	mov     rdx, [rax]
C2C1:	mov     rax, [rbp+key_seq]
C2C5:	mov     rsi, rdx; s2
C2C8:	mov     rdi, rax; s1
C2CB:	call    _strcmp
C2D0:	test    eax, eax
C2D2:	jg      short loc_C33A
C2D4:	lea     rax, key_list_head
C2DB:	mov     cs:key_0, rax
C2E2:	jmp     short loc_C33A
C2E4:	mov     rax, cs:key_0
C2EB:	mov     rax, [rax]
C2EE:	mov     rdx, [rax]
C2F1:	mov     rax, [rbp+key_seq]
C2F5:	mov     rsi, rdx; s2
C2F8:	mov     rdi, rax; s1
C2FB:	call    _strcmp
C300:	test    eax, eax
C302:	jg      short loc_C325
C304:	mov     rax, cs:key_0
C30B:	mov     rdx, [rbp+aux_data]; aux_data
C30F:	mov     rcx, [rbp+key_seq]
C313:	mov     rsi, rcx; key_seq
C316:	mov     rdi, rax; key
C319:	mov     eax, 0
C31E:	call    tty_key_list_insert_sequence
C323:	jmp     short locret_C36B
C325:	mov     rax, cs:key_0
C32C:	mov     rax, [rax]
C32F:	add     rax, 8
C333:	mov     cs:key_0, rax
C33A:	mov     rax, cs:key_0
C341:	mov     rax, [rax]
C344:	test    rax, rax
C347:	jnz     short loc_C2E4
C349:	mov     rax, cs:key_0
C350:	mov     rdx, [rbp+aux_data]; aux_data
C354:	mov     rcx, [rbp+key_seq]
C358:	mov     rsi, rcx; key_seq
C35B:	mov     rdi, rax; key
C35E:	mov     eax, 0
C363:	call    tty_key_list_insert_sequence
C368:	jmp     short locret_C36B
C36A:	nop
C36B:	leave
C36C:	retn
C36D:	endbr64
C371:	push    rbp
C372:	mov     rbp, rsp
C375:	mov     rax, cs:key_list_head
C37C:	mov     cs:current_key, rax
C383:	nop
C384:	pop     rbp
C385:	retn
C386:	endbr64
C38A:	push    rbp
C38B:	mov     rbp, rsp
C38E:	sub     rsp, 20h
C392:	mov     [rbp+key_seq], rdi
C396:	mov     rax, cs:current_key
C39D:	test    rax, rax
C3A0:	jnz     short loc_C3EF
C3A2:	mov     eax, 0
C3A7:	jmp     locret_C444
C3AC:	mov     rax, cs:current_key
C3B3:	mov     rdx, [rax]
C3B6:	mov     rax, [rbp+key_seq]
C3BA:	mov     rsi, rdx; s2
C3BD:	mov     rdi, rax; s1
C3C0:	call    _strcmp
C3C5:	mov     [rbp+cmp], eax
C3C8:	cmp     [rbp+cmp], 0
C3CC:	jnz     short loc_C3D7
C3CE:	mov     rax, cs:current_key
C3D5:	jmp     short locret_C444
C3D7:	cmp     [rbp+cmp], 0
C3DB:	js      short loc_C3FD
C3DD:	mov     rax, cs:current_key
C3E4:	mov     rax, [rax+8]
C3E8:	mov     cs:current_key, rax
C3EF:	mov     rax, cs:current_key
C3F6:	test    rax, rax
C3F9:	jnz     short loc_C3AC
C3FB:	jmp     short loc_C3FE
C3FD:	nop
C3FE:	mov     rax, cs:current_key
C405:	test    rax, rax
C408:	jz      short loc_C436
C40A:	mov     rax, [rbp+key_seq]
C40E:	mov     rdi, rax; s
C411:	call    _strlen
C416:	mov     rdx, rax; n
C419:	mov     rax, cs:current_key
C420:	mov     rcx, [rax]
C423:	mov     rax, [rbp+key_seq]
C427:	mov     rsi, rcx; s2
C42A:	mov     rdi, rax; s1
C42D:	call    _strncmp
C432:	test    eax, eax
C434:	jz      short loc_C43F
C436:	mov     rax, 0FFFFFFFFFFFFFFFFh
C43D:	jmp     short locret_C444
C43F:	mov     eax, 0
C444:	leave
C445:	retn
C446:	endbr64
C44A:	push    rbp
C44B:	mov     rbp, rsp
C44E:	sub     rsp, 40h
C452:	mov     [rbp+key_seq], rdi
C456:	mov     rax, fs:28h
C45F:	mov     [rbp+var_8], rax
C463:	xor     eax, eax
C465:	lea     rax, aKeysTypedSoFar; 'Keys typed so far: '
C46C:	mov     [rbp+typed], rax
C470:	lea     rax, asc_27D0E; ' '
C477:	mov     [rbp+incomplete], rax
C47B:	lea     rax, [rbp+tty_status]
C47F:	mov     rdi, rax; status
C482:	call    tty_save
C487:	mov     eax, cs:tty_lines
C48D:	sub     eax, 1
C490:	mov     esi, 0; x
C495:	mov     edi, eax; y
C497:	call    tty_goto
C49C:	mov     edi, 7; color
C4A1:	call    tty_background
C4A6:	mov     edi, 0; color
C4AB:	call    tty_foreground
C4B0:	mov     eax, cs:tty_columns
C4B6:	add     eax, 1
C4B9:	cdqe
C4BB:	mov     rdi, rax; n
C4BE:	call    xmalloc
C4C3:	mov     [rbp+spaces], rax
C4C7:	mov     eax, cs:tty_columns
C4CD:	movsxd  rdx, eax; n
C4D0:	mov     rax, [rbp+spaces]
C4D4:	mov     esi, 20h ; ' '; c
C4D9:	mov     rdi, rax; s
C4DC:	call    _memset
C4E1:	mov     eax, cs:tty_columns
C4E7:	movsxd  rdx, eax
C4EA:	mov     rax, [rbp+spaces]
C4EE:	add     rax, rdx
C4F1:	mov     byte ptr [rax], 0
C4F4:	mov     edx, cs:tty_columns
C4FA:	mov     rax, [rbp+spaces]
C4FE:	mov     esi, edx; length
C500:	mov     rdi, rax; buf
C503:	call    tty_puts
C508:	mov     rax, [rbp+spaces]
C50C:	mov     rdi, rax; pointer
C50F:	call    xfree
C514:	mov     eax, cs:tty_lines
C51A:	sub     eax, 1
C51D:	mov     esi, 0; x
C522:	mov     edi, eax; y
C524:	call    tty_goto
C529:	mov     rax, [rbp+key_seq]
C52D:	mov     rdi, rax; key_seq
C530:	call    tty_key_machine2human
C535:	mov     rax, [rbp+typed]
C539:	mov     rdi, rax; s
C53C:	call    _strlen
C541:	mov     edx, eax
C543:	mov     rax, [rbp+typed]
C547:	mov     esi, edx; length
C549:	mov     rdi, rax; buf
C54C:	call    tty_puts
C551:	lea     rax, keystr
C558:	mov     rdi, rax; s
C55B:	call    _strlen
C560:	mov     esi, eax; length
C562:	lea     rax, keystr
C569:	mov     rdi, rax; buf
C56C:	call    tty_puts
C571:	mov     rax, [rbp+incomplete]
C575:	mov     rdi, rax; s
C578:	call    _strlen
C57D:	mov     edx, eax
C57F:	mov     rax, [rbp+incomplete]
C583:	mov     esi, edx; length
C585:	mov     rdi, rax; buf
C588:	call    tty_puts
C58D:	mov     eax, 0
C592:	call    tty_update
C597:	lea     rax, [rbp+tty_status]
C59B:	mov     rdi, rax; status
C59E:	call    tty_restore
C5A3:	nop
C5A4:	mov     rax, [rbp+var_8]
C5A8:	sub     rax, fs:28h
C5B1:	jz      short locret_C5B8
C5B3:	call    ___stack_chk_fail
C5B8:	leave
C5B9:	retn
C5BA:	endbr64
C5BE:	push    rbp
C5BF:	mov     rbp, rsp
C5C2:	sub     rsp, 20h
C5C6:	mov     [rbp+repeat_count], rdi
C5CA:	mov     [rbp+key], 0
C5D2:	nop
C5D3:	mov     eax, 0
C5D8:	call    tty_getc
C5DD:	mov     [rbp+c], eax
C5E0:	cmp     [rbp+c], 0FFFFFFFFh
C5E4:	jz      short loc_C5D3
C5E6:	cmp     [rbp+repeat_count], 0
C5EB:	jz      short loc_C5F7
C5ED:	mov     rax, [rbp+repeat_count]
C5F1:	mov     dword ptr [rax], 1
C5F7:	cmp     [rbp+c], 0
C5FB:	jnz     short loc_C604
C5FD:	mov     [rbp+c], 0FFh
C604:	mov     eax, cs:tty_kbdmode
C60A:	test    eax, eax
C60C:	jnz     short loc_C66F
C60E:	cmp     [rbp+c], 0Ah
C612:	jz      short loc_C61A
C614:	cmp     [rbp+c], 0Dh
C618:	jnz     short loc_C621
C61A:	mov     [rbp+c], 0Ah
C621:	call    ___ctype_b_loc
C626:	mov     rdx, [rax]
C629:	mov     eax, [rbp+c]
C62C:	cdqe
C62E:	add     rax, rax
C631:	add     rax, rdx
C634:	movzx   eax, word ptr [rax]
C637:	movzx   eax, ax
C63A:	and     eax, 4000h
C63F:	test    eax, eax
C641:	jnz     short loc_C649
C643:	cmp     [rbp+c], 7
C647:	jnz     short loc_C66F
C649:	mov     rax, cs:default_key.key_seq
C650:	mov     edx, [rbp+c]
C653:	mov     [rax], dl
C655:	mov     rax, cs:default_key.key_seq
C65C:	add     rax, 1
C660:	mov     byte ptr [rax], 0
C663:	lea     rax, default_key
C66A:	jmp     locret_C825
C66F:	mov     cs:partial, 0
C679:	mov     cs:key_on_display, 0
C683:	mov     eax, 0
C688:	call    tty_key_search_restart
C68D:	mov     [rbp+i], 0
C694:	jmp     loc_C760
C699:	cmp     [rbp+c], 0
C69D:	jnz     short loc_C6A6
C69F:	mov     [rbp+c], 0FFh
C6A6:	mov     rdx, cs:tty_key_seq
C6AD:	mov     eax, [rbp+i]
C6B0:	cdqe
C6B2:	add     rax, rdx
C6B5:	mov     edx, [rbp+c]
C6B8:	mov     [rax], dl
C6BA:	mov     rdx, cs:tty_key_seq
C6C1:	mov     eax, [rbp+i]
C6C4:	cdqe
C6C6:	add     rax, 1
C6CA:	add     rax, rdx
C6CD:	mov     byte ptr [rax], 0
C6D0:	mov     rax, cs:tty_key_seq
C6D7:	mov     rdi, rax; key_seq
C6DA:	call    tty_key_search
C6DF:	mov     [rbp+key], rax
C6E3:	cmp     [rbp+key], 0FFFFFFFFFFFFFFFFh
C6E8:	jnz     short loc_C708
C6EA:	mov     edi, 1; seconds
C6EF:	call    _alarm
C6F4:	mov     cs:partial, 0
C6FE:	mov     eax, 0
C703:	jmp     locret_C825
C708:	cmp     [rbp+key], 0
C70D:	jnz     short loc_C76C
C70F:	mov     eax, cs:keyno
C715:	test    eax, eax
C717:	jnz     short loc_C748
C719:	mov     eax, cs:key_on_display
C71F:	test    eax, eax
C721:	jz      short loc_C734
C723:	mov     rax, cs:tty_key_seq
C72A:	mov     rdi, rax; key_seq
C72D:	call    tty_key_print
C732:	jmp     short loc_C73E
C734:	mov     edi, 1; seconds
C739:	call    _alarm
C73E:	mov     cs:partial, 1
C748:	nop
C749:	mov     eax, 0
C74E:	call    tty_getc
C753:	mov     [rbp+c], eax
C756:	cmp     [rbp+c], 0FFFFFFFFh
C75A:	jz      short loc_C749
C75C:	add     [rbp+i], 1
C760:	cmp     [rbp+i], 0Eh
C764:	jle     loc_C699
C76A:	jmp     short loc_C76D
C76C:	nop
C76D:	cmp     [rbp+i], 0Fh
C771:	jnz     short loc_C791
C773:	mov     edi, 1; seconds
C778:	call    _alarm
C77D:	mov     cs:partial, 0
C787:	mov     eax, 0
C78C:	jmp     locret_C825
C791:	cmp     [rbp+repeat_count], 0
C796:	jz      short loc_C80D
C798:	jmp     short loc_C7D1
C79A:	mov     eax, [rbp+i]
C79D:	lea     edx, [rax+1]
C7A0:	mov     eax, cs:keyindex
C7A6:	add     eax, edx
C7A8:	mov     cs:keyindex, eax
C7AE:	mov     eax, cs:keyno
C7B4:	mov     edx, [rbp+i]
C7B7:	add     edx, 1
C7BA:	sub     eax, edx
C7BC:	mov     cs:keyno, eax
C7C2:	mov     rax, [rbp+repeat_count]
C7C6:	mov     eax, [rax]
C7C8:	lea     edx, [rax+1]
C7CB:	mov     rax, [rbp+repeat_count]
C7CF:	mov     [rax], edx
C7D1:	mov     eax, cs:keyno
C7D7:	cmp     [rbp+i], eax
C7DA:	jge     short loc_C80D
C7DC:	mov     eax, [rbp+i]
C7DF:	add     eax, 1
C7E2:	movsxd  rdx, eax; n
C7E5:	mov     eax, cs:keyindex
C7EB:	cdqe
C7ED:	lea     rcx, keybuf
C7F4:	add     rcx, rax
C7F7:	mov     rax, cs:tty_key_seq
C7FE:	mov     rsi, rcx; s2
C801:	mov     rdi, rax; s1
C804:	call    _memcmp
C809:	test    eax, eax
C80B:	jz      short loc_C79A
C80D:	mov     edi, 1; seconds
C812:	call    _alarm
C817:	mov     cs:partial, 0
C821:	mov     rax, [rbp+key]
C825:	leave
C826:	retn
C827:	endbr64
C82B:	push    rbp
C82C:	mov     rbp, rsp
C82F:	mov     eax, cs:partial
C835:	test    eax, eax
C837:	jz      short loc_C852
C839:	mov     rax, cs:tty_key_seq
C840:	mov     rdi, rax; key_seq
C843:	call    tty_key_print
C848:	mov     cs:key_on_display, 1
C852:	nop
C853:	pop     rbp
C854:	retn
C855:	endbr64
C859:	push    rbp
C85A:	mov     rbp, rsp
C85D:	mov     rax, cs:tty_key_seq
C864:	pop     rbp
C865:	retn
C866:	endbr64
C86A:	push    rbp
C86B:	mov     rbp, rsp
C86E:	sub     rsp, 60h
C872:	mov     rax, fs:28h
C87B:	mov     [rbp+var_8], rax
C87F:	xor     eax, eax
C881:	mov     [rbp+shell_lines], 0
C888:	mov     [rbp+shell_columns], 0
C88F:	mov     [rbp+termcap_lines], 0
C896:	mov     [rbp+termcap_columns], 0
C89D:	mov     [rbp+winsz_lines], 0
C8A4:	mov     [rbp+winsz_columns], 0
C8AB:	lea     rax, [rbp+winsz]
C8AF:	mov     rdx, rax
C8B2:	mov     esi, 5413h; request
C8B7:	mov     edi, 1; fd
C8BC:	mov     eax, 0
C8C1:	call    _ioctl
C8C6:	test    eax, eax
C8C8:	jnz     short loc_C8F0
C8CA:	movzx   eax, [rbp+winsz.ws_col]
C8CE:	test    ax, ax
C8D1:	jz      short loc_C8F0
C8D3:	movzx   eax, [rbp+winsz.ws_row]
C8D7:	test    ax, ax
C8DA:	jz      short loc_C8F0
C8DC:	movzx   eax, [rbp+winsz.ws_col]
C8E0:	movzx   eax, ax
C8E3:	mov     [rbp+winsz_columns], eax
C8E6:	movzx   eax, [rbp+winsz.ws_row]
C8EA:	movzx   eax, ax
C8ED:	mov     [rbp+winsz_lines], eax
C8F0:	lea     rax, aColumns; 'COLUMNS'
C8F7:	mov     rdi, rax; name
C8FA:	call    _getenv
C8FF:	mov     [rbp+env], rax
C903:	cmp     [rbp+env], 0
C908:	jz      short loc_C929
C90A:	lea     rdx, [rbp+shell_columns]
C90E:	mov     rax, [rbp+env]
C912:	lea     rcx, aD; '%d'
C919:	mov     rsi, rcx
C91C:	mov     rdi, rax
C91F:	mov     eax, 0
C924:	call    ___isoc99_sscanf
C929:	lea     rax, aLines; 'LINES'
C930:	mov     rdi, rax; name
C933:	call    _getenv
C938:	mov     [rbp+env], rax
C93C:	cmp     [rbp+env], 0
C941:	jz      short loc_C962
C943:	lea     rdx, [rbp+shell_lines]
C947:	mov     rax, [rbp+env]
C94B:	lea     rcx, aD; '%d'
C952:	mov     rsi, rcx
C955:	mov     rdi, rax
C958:	mov     eax, 0
C95D:	call    ___isoc99_sscanf
C962:	mov     eax, cs:tty_capability.integer+1A0h
C968:	mov     [rbp+termcap_columns], eax
C96B:	mov     eax, cs:tty_capability.integer+1C0h
C971:	mov     [rbp+termcap_lines], eax
C974:	cmp     [rbp+winsz_columns], 0
C978:	jle     short loc_C98E
C97A:	cmp     [rbp+winsz_columns], 400h
C981:	jg      short loc_C98E
C983:	mov     eax, [rbp+winsz_columns]
C986:	mov     cs:tty_columns, eax
C98C:	jmp     short loc_C9CE
C98E:	mov     eax, [rbp+shell_columns]
C991:	test    eax, eax
C993:	jle     short loc_C9AA
C995:	mov     eax, [rbp+shell_columns]
C998:	cmp     eax, 400h
C99D:	jg      short loc_C9AA
C99F:	mov     eax, [rbp+shell_columns]
C9A2:	mov     cs:tty_columns, eax
C9A8:	jmp     short loc_C9CE
C9AA:	cmp     [rbp+termcap_columns], 0
C9AE:	jle     short loc_C9C4
C9B0:	cmp     [rbp+termcap_columns], 400h
C9B7:	jg      short loc_C9C4
C9B9:	mov     eax, [rbp+termcap_columns]
C9BC:	mov     cs:tty_columns, eax
C9C2:	jmp     short loc_C9CE
C9C4:	mov     cs:tty_columns, 50h ; 'P'
C9CE:	cmp     [rbp+winsz_lines], 0
C9D2:	jle     short loc_C9E8
C9D4:	cmp     [rbp+winsz_lines], 400h
C9DB:	jg      short loc_C9E8
C9DD:	mov     eax, [rbp+winsz_lines]
C9E0:	mov     cs:tty_lines, eax
C9E6:	jmp     short loc_CA28
C9E8:	mov     eax, [rbp+shell_lines]
C9EB:	test    eax, eax
C9ED:	jle     short loc_CA04
C9EF:	mov     eax, [rbp+shell_lines]
C9F2:	cmp     eax, 400h
C9F7:	jg      short loc_CA04
C9F9:	mov     eax, [rbp+shell_lines]
C9FC:	mov     cs:tty_lines, eax
CA02:	jmp     short loc_CA28
CA04:	cmp     [rbp+termcap_lines], 0
CA08:	jle     short loc_CA1E
CA0A:	cmp     [rbp+termcap_lines], 400h
CA11:	jg      short loc_CA1E
CA13:	mov     eax, [rbp+termcap_lines]
CA16:	mov     cs:tty_lines, eax
CA1C:	jmp     short loc_CA28
CA1E:	mov     cs:tty_lines, 18h
CA28:	mov     edx, cs:tty_lines
CA2E:	lea     rax, [rbp+buf]
CA32:	lea     rcx, aD; '%d'
CA39:	mov     rsi, rcx; format
CA3C:	mov     rdi, rax; s
CA3F:	mov     eax, 0
CA44:	call    _sprintf
CA49:	lea     rax, [rbp+buf]
CA4D:	mov     rsi, rax; value
CA50:	lea     rax, aLines; 'LINES'
CA57:	mov     rdi, rax; variable
CA5A:	call    xsetenv
CA5F:	mov     edx, cs:tty_columns
CA65:	lea     rax, [rbp+buf]
CA69:	lea     rcx, aD; '%d'
CA70:	mov     rsi, rcx; format
CA73:	mov     rdi, rax; s
CA76:	mov     eax, 0
CA7B:	call    _sprintf
CA80:	lea     rax, [rbp+buf]
CA84:	mov     rsi, rax; value
CA87:	lea     rax, aColumns; 'COLUMNS'
CA8E:	mov     rdi, rax; variable
CA91:	call    xsetenv
CA96:	mov     rax, cs:tty_scr
CA9D:	test    rax, rax
CAA0:	jz      short loc_CAB1
CAA2:	mov     rax, cs:tty_scr
CAA9:	mov     rdi, rax; pointer
CAAC:	call    xfree
CAB1:	mov     rax, cs:tty_atr
CAB8:	test    rax, rax
CABB:	jz      short loc_CACC
CABD:	mov     rax, cs:tty_atr
CAC4:	mov     rdi, rax; pointer
CAC7:	call    xfree
CACC:	mov     rax, cs:tty_prev_scr
CAD3:	test    rax, rax
CAD6:	jz      short loc_CAE7
CAD8:	mov     rax, cs:tty_prev_scr
CADF:	mov     rdi, rax; pointer
CAE2:	call    xfree
CAE7:	mov     rax, cs:tty_prev_atr
CAEE:	test    rax, rax
CAF1:	jz      short loc_CB02
CAF3:	mov     rax, cs:tty_prev_atr
CAFA:	mov     rdi, rax; pointer
CAFD:	call    xfree
CB02:	mov     edx, cs:tty_columns
CB08:	mov     eax, cs:tty_lines
CB0E:	imul    eax, edx
CB11:	cdqe
CB13:	mov     esi, 1; s
CB18:	mov     rdi, rax; n
CB1B:	call    xcalloc
CB20:	mov     cs:tty_scr, rax
CB27:	mov     edx, cs:tty_columns
CB2D:	mov     eax, cs:tty_lines
CB33:	imul    eax, edx
CB36:	cdqe
CB38:	mov     esi, 1; s
CB3D:	mov     rdi, rax; n
CB40:	call    xcalloc
CB45:	mov     cs:tty_atr, rax
CB4C:	mov     edx, cs:tty_columns
CB52:	mov     eax, cs:tty_lines
CB58:	imul    eax, edx
CB5B:	cdqe
CB5D:	mov     esi, 1; s
CB62:	mov     rdi, rax; n
CB65:	call    xcalloc
CB6A:	mov     cs:tty_prev_scr, rax
CB71:	mov     edx, cs:tty_columns
CB77:	mov     eax, cs:tty_lines
CB7D:	imul    eax, edx
CB80:	cdqe
CB82:	mov     esi, 1; s
CB87:	mov     rdi, rax; n
CB8A:	call    xcalloc
CB8F:	mov     cs:tty_prev_atr, rax
CB96:	nop
CB97:	mov     rax, [rbp+var_8]
CB9B:	sub     rax, fs:28h
CBA4:	jz      short locret_CBAB
CBA6:	call    ___stack_chk_fail
CBAB:	leave
CBAC:	retn
CBAD:	endbr64
CBB1:	push    rbp
CBB2:	mov     rbp, rsp
CBB5:	sub     rsp, 50h
CBB9:	mov     [rbp+buf], rdi
CBBD:	mov     [rbp+op], esi
CBC0:	mov     rax, fs:28h
CBC9:	mov     [rbp+var_8], rax
CBCD:	xor     eax, eax
CBCF:	lea     rax, [rbp+vcs_name]
CBD3:	mov     rcx, 7363762F7665642Fh
CBDD:	mov     [rax], rcx
CBE0:	mov     word ptr [rax+8], 5858h
CBE6:	mov     byte ptr [rax+0Ah], 0
CBEA:	lea     rax, [rbp+vcsa_name]
CBEE:	mov     [rax], rcx
CBF1:	mov     dword ptr [rax+8], 585861h
CBF8:	cmp     [rbp+op], 1
CBFC:	jnz     short loc_CC12
CBFE:	mov     [rbp+flag], 0
CC05:	mov     rax, cs:read_ptr
CC0C:	mov     [rbp+fn], rax
CC10:	jmp     short loc_CC32
CC12:	mov     [rbp+flag], 1
CC19:	mov     rax, cs:write_ptr
CC20:	mov     [rbp+fn], rax
CC24:	mov     eax, cs:vcs_is_monochrome
CC2A:	test    eax, eax
CC2C:	jnz     loc_CD1E
CC32:	mov     cs:vcs_is_monochrome, 0
CC3C:	mov     rax, cs:tty_device
CC43:	movzx   eax, byte ptr [rax+8]
CC47:	mov     [rbp+vcsa_name+9], al
CC4A:	mov     rax, cs:tty_device
CC51:	movzx   eax, byte ptr [rax+9]
CC55:	mov     [rbp+vcsa_name+0Ah], al
CC58:	mov     edx, [rbp+flag]
CC5B:	lea     rax, [rbp+vcsa_name]
CC5F:	mov     esi, edx; oflag
CC61:	mov     rdi, rax; file
CC64:	mov     eax, 0
CC69:	call    _open
CC6E:	mov     [rbp+vcsfd], eax
CC71:	cmp     [rbp+vcsfd], 0FFFFFFFFh
CC75:	jz      short loc_CCF1
CC77:	nop
CC78:	jmp     short vcsa_label
CC7A:	nop
CC7B:	mov     edx, cs:tty_lines
CC81:	mov     eax, cs:tty_columns
CC87:	imul    eax, edx
CC8A:	add     eax, 2
CC8D:	lea     edx, [rax+rax]
CC90:	mov     rcx, [rbp+buf]
CC94:	mov     eax, [rbp+vcsfd]
CC97:	mov     r8, [rbp+fn]
CC9B:	mov     rsi, rcx
CC9E:	mov     edi, eax
CCA0:	mov     eax, 0
CCA5:	call    r8
CCA8:	mov     eax, [rbp+vcsfd]
CCAB:	mov     edi, eax; fd
CCAD:	call    _close
CCB2:	cmp     [rbp+op], 2
CCB6:	jnz     short loc_CCE7
CCB8:	mov     rax, [rbp+buf]
CCBC:	add     rax, 2
CCC0:	movzx   eax, byte ptr [rax]
CCC3:	movsx   edx, al
CCC6:	mov     rax, [rbp+buf]
CCCA:	add     rax, 3
CCCE:	movzx   eax, byte ptr [rax]
CCD1:	movsx   eax, al
CCD4:	mov     esi, edx; x
CCD6:	mov     edi, eax; y
CCD8:	call    tty_io_goto
CCDD:	mov     eax, 0
CCE2:	call    tty_flush
CCE7:	mov     eax, 1
CCEC:	jmp     loc_CE08
CCF1:	mov     [rbp+vcsa_name+9], 30h ; '0'
CCF5:	mov     [rbp+vcsa_name+0Ah], 0
CCF9:	mov     edx, [rbp+flag]
CCFC:	lea     rax, [rbp+vcsa_name]
CD00:	mov     esi, edx; oflag
CD02:	mov     rdi, rax; file
CD05:	mov     eax, 0
CD0A:	call    _open
CD0F:	mov     [rbp+vcsfd], eax
CD12:	cmp     [rbp+vcsfd], 0FFFFFFFFh
CD16:	jnz     loc_CC7A
CD1C:	jmp     short monochrome
CD1E:	nop
CD1F:	mov     cs:vcs_is_monochrome, 1
CD29:	cmp     [rbp+op], 2
CD2D:	jnz     short loc_CD39
CD2F:	mov     eax, 0
CD34:	call    tty_clear
CD39:	mov     rax, cs:tty_device
CD40:	movzx   eax, byte ptr [rax+8]
CD44:	mov     [rbp+vcs_name+8], al
CD47:	mov     rax, cs:tty_device
CD4E:	movzx   eax, byte ptr [rax+9]
CD52:	mov     [rbp+vcs_name+9], al
CD55:	mov     edx, [rbp+flag]
CD58:	lea     rax, [rbp+vcs_name]
CD5C:	mov     esi, edx; oflag
CD5E:	mov     rdi, rax; file
CD61:	mov     eax, 0
CD66:	call    _open
CD6B:	mov     [rbp+vcsfd], eax
CD6E:	cmp     [rbp+vcsfd], 0FFFFFFFFh
CD72:	jz      short loc_CDD8
CD74:	nop
CD75:	jmp     short vcs_label
CD77:	nop
CD78:	mov     edx, cs:tty_lines
CD7E:	mov     eax, cs:tty_columns
CD84:	imul    eax, edx
CD87:	lea     edx, [rax+4]
CD8A:	mov     rcx, [rbp+buf]
CD8E:	mov     eax, [rbp+vcsfd]
CD91:	mov     r8, [rbp+fn]
CD95:	mov     rsi, rcx
CD98:	mov     edi, eax
CD9A:	mov     eax, 0
CD9F:	call    r8
CDA2:	mov     eax, [rbp+vcsfd]
CDA5:	mov     edi, eax; fd
CDA7:	call    _close
CDAC:	cmp     [rbp+op], 2
CDB0:	jnz     short loc_CDD1
CDB2:	mov     eax, cs:tty_lines
CDB8:	sub     eax, 1
CDBB:	mov     esi, 0; x
CDC0:	mov     edi, eax; y
CDC2:	call    tty_io_goto
CDC7:	mov     eax, 0
CDCC:	call    tty_flush
CDD1:	mov     eax, 1
CDD6:	jmp     short loc_CE08
CDD8:	mov     [rbp+vcs_name+8], 30h ; '0'
CDDC:	mov     [rbp+vcs_name+9], 0
CDE0:	mov     edx, [rbp+flag]
CDE3:	lea     rax, [rbp+vcs_name]
CDE7:	mov     esi, edx; oflag
CDE9:	mov     rdi, rax; file
CDEC:	mov     eax, 0
CDF1:	call    _open
CDF6:	mov     [rbp+vcsfd], eax
CDF9:	cmp     [rbp+vcsfd], 0FFFFFFFFh
CDFD:	jnz     loc_CD77
CE03:	mov     eax, 0
CE08:	mov     rdx, [rbp+var_8]
CE0C:	sub     rdx, fs:28h
CE15:	jz      short locret_CE1C
CE17:	call    ___stack_chk_fail
CE1C:	leave
CE1D:	retn
CE1E:	endbr64
CE22:	push    rbp
CE23:	mov     rbp, rsp
CE26:	sub     rsp, 10h
CE2A:	mov     [rbp+buf], rdi
CE2E:	mov     eax, cs:LinuxConsole
CE34:	test    eax, eax
CE36:	jz      short loc_CE54
CE38:	mov     rax, [rbp+buf]
CE3C:	mov     esi, 1; op
CE41:	mov     rdi, rax; buf
CE44:	mov     eax, 0
CE49:	call    vcs_io
CE4E:	mov     cs:vcs_read_ok, eax
CE54:	nop
CE55:	leave
CE56:	retn
CE57:	endbr64
CE5B:	push    rbp
CE5C:	mov     rbp, rsp
CE5F:	sub     rsp, 10h
CE63:	mov     [rbp+buf], rdi
CE67:	mov     eax, 0
CE6C:	call    tty_defaults
CE71:	mov     eax, cs:LinuxConsole
CE77:	test    eax, eax
CE79:	jz      short loc_CEE9
CE7B:	mov     eax, cs:vcs_read_ok
CE81:	test    eax, eax
CE83:	jz      short loc_CEDD
CE85:	mov     eax, 0
CE8A:	call    tty_touch
CE8F:	mov     rax, [rbp+buf]
CE93:	mov     esi, 2; op
CE98:	mov     rdi, rax; buf
CE9B:	mov     eax, 0
CEA0:	call    vcs_io
CEA5:	test    eax, eax
CEA7:	jnz     short loc_CEB5
CEA9:	mov     eax, 0
CEAE:	call    tty_clear
CEB3:	jmp     short loc_CEF3
CEB5:	mov     edx, cs:tty_lines
CEBB:	mov     eax, cs:tty_columns
CEC1:	imul    eax, edx
CEC4:	movsxd  rdx, eax; n
CEC7:	mov     rax, cs:tty_scr
CECE:	mov     esi, 0; c
CED3:	mov     rdi, rax; s
CED6:	call    _memset
CEDB:	jmp     short loc_CEF3
CEDD:	mov     eax, 0
CEE2:	call    tty_clear
CEE7:	jmp     short loc_CEF3
CEE9:	mov     eax, 0
CEEE:	call    tty_clear
CEF3:	nop
CEF4:	leave
CEF5:	retn
CEF6:	endbr64
CEFA:	push    rbp
CEFB:	mov     rbp, rsp
CEFE:	sub     rsp, 20h
CF02:	mov     [rbp+colorname], rdi
CF06:	mov     [rbp+i], 0
CF0D:	jmp     short loc_CF51
CF0F:	mov     eax, [rbp+i]
CF12:	cdqe
CF14:	lea     rdx, ds:0[rax*8]
CF1C:	lea     rax, colors
CF23:	mov     rax, [rdx+rax]
CF27:	mov     rdx, [rbp+colorname]
CF2B:	mov     rsi, rdx; s2
CF2E:	mov     rdi, rax; s1
CF31:	call    _strcmp
CF36:	test    eax, eax
CF38:	jnz     short loc_CF4D
CF3A:	cmp     [rbp+i], 7
CF3E:	jle     short loc_CF48
CF40:	mov     eax, [rbp+i]
CF43:	sub     eax, 8
CF46:	jmp     short locret_CF5C
CF48:	mov     eax, [rbp+i]
CF4B:	jmp     short locret_CF5C
CF4D:	add     [rbp+i], 1
CF51:	cmp     [rbp+i], 9
CF55:	jle     short loc_CF0F
CF57:	mov     eax, 0FFFFFFFFh
CF5C:	leave
CF5D:	retn
CF5E:	endbr64
CF62:	push    rbp
CF63:	mov     rbp, rsp
CF66:	sub     rsp, 20h
CF6A:	mov     [rbp+symbol], rdi
CF6E:	mov     [rbp+i], 11h
CF75:	jmp     short loc_CFBE
CF77:	mov     eax, [rbp+i]
CF7A:	cdqe
CF7C:	shl     rax, 5
CF80:	mov     rdx, rax
CF83:	lea     rax, tty_capability.symbol
CF8A:	mov     rax, [rdx+rax]
CF8E:	mov     rdx, [rbp+symbol]
CF92:	mov     rsi, rdx; s2
CF95:	mov     rdi, rax; s1
CF98:	call    _strcmp
CF9D:	test    eax, eax
CF9F:	jnz     short loc_CFBA
CFA1:	mov     eax, [rbp+i]
CFA4:	cdqe
CFA6:	shl     rax, 5
CFAA:	mov     rdx, rax
CFAD:	lea     rax, tty_capability.string
CFB4:	mov     rax, [rdx+rax]
CFB8:	jmp     short locret_CFC9
CFBA:	add     [rbp+i], 1
CFBE:	cmp     [rbp+i], 25h ; '%'
CFC2:	jle     short loc_CF77
CFC4:	mov     eax, 0
CFC9:	leave
CFCA:	retn
CFCB:	endbr64
CFCF:	push    rbp
CFD0:	mov     rbp, rsp
CFD3:	sub     rsp, 0D0h
CFDA:	mov     rax, fs:28h
CFE3:	mov     [rbp+var_8], rax
CFE7:	xor     eax, eax
CFE9:	mov     [rbp+term_errors], 0
CFF3:	lea     rax, aTerm; 'TERM'
CFFA:	mov     rdi, rax; name
CFFD:	call    _getenv
D002:	mov     [rbp+termtype], rax
D009:	lea     rax, [rbp+statbuf]
D010:	mov     rsi, rax; buf
D013:	mov     edi, 1; fd
D018:	call    _fstat
D01D:	mov     rax, [rbp+statbuf.st_rdev]
D021:	shr     rax, 8
D025:	cmp     rax, 4
D029:	jnz     short loc_D037
D02B:	mov     cs:LinuxConsole, 1
D035:	jmp     short loc_D041
D037:	mov     cs:LinuxConsole, 0
D041:	cmp     [rbp+termtype], 0
D049:	jnz     short loc_D072
D04B:	mov     rdx, cs:g_program
D052:	mov     rax, cs:stderr@GLIBC_2_2_5
D059:	lea     rcx, aSCanTFindTheTe; '%s: can't find the TERM environment var'...
D060:	mov     rsi, rcx; format
D063:	mov     rdi, rax; stream
D066:	mov     eax, 0
D06B:	call    _fprintf
D070:	jmp     short switch_to_vt100
D072:	mov     rax, [rbp+termtype]
D079:	mov     rdi, rax; s
D07C:	call    _strlen
D081:	cmp     rax, 3Fh ; '?'
D085:	jbe     short loc_D0DF
D087:	mov     rdx, cs:g_program
D08E:	mov     rax, cs:stderr@GLIBC_2_2_5
D095:	lea     rcx, aSTheTermEnviro; '%s: the TERM environment variable is to'...
D09C:	mov     rsi, rcx; format
D09F:	mov     rdi, rax; stream
D0A2:	mov     eax, 0
D0A7:	call    _fprintf
D0AC:	mov     rax, cs:stderr@GLIBC_2_2_5
D0B3:	mov     rcx, rax; s
D0B6:	mov     edx, 11h; n
D0BB:	mov     esi, 1; size
D0C0:	lea     rax, aTryingVt100; 'trying vt100 ...n'
D0C7:	mov     rdi, rax; ptr
D0CA:	call    _fwrite
D0CF:	lea     rax, vt100; 'vt100'
D0D6:	mov     [rbp+termtype], rax
D0DD:	jmp     short retry
D0DF:	nop
D0E0:	mov     rax, [rbp+termtype]
D0E7:	mov     rsi, rax; char *
D0EA:	mov     edi, 0; char *
D0EF:	call    _tgetent
D0F4:	mov     [rbp+err], eax
D0FA:	cmp     [rbp+err], 0FFFFFFFFh
D101:	jnz     short loc_D15F
D103:	mov     rdx, cs:g_program
D10A:	mov     rax, cs:stderr@GLIBC_2_2_5
D111:	lea     rcx, term_database; 'terminfo'
D118:	lea     rsi, aSCanTFindTheSD; '%s: can't find the %s database.n'
D11F:	mov     rdi, rax; stream
D122:	mov     eax, 0
D127:	call    _fprintf
D12C:	mov     rdx, cs:g_program
D133:	mov     rax, cs:stderr@GLIBC_2_2_5
D13A:	lea     rcx, term_env; 'TERMINFO'
D141:	lea     rsi, aSCheckYourSEnv; '%s: check your %s environment variable '...
D148:	mov     rdi, rax; stream
D14B:	mov     eax, 0
D150:	call    _fprintf
D155:	mov     edi, 1; status
D15A:	call    _exit
D15F:	cmp     [rbp+err], 0
D166:	jnz     loc_D2B8
D16C:	mov     rdx, cs:g_program
D173:	mov     rax, cs:stderr@GLIBC_2_2_5
D17A:	mov     rcx, [rbp+termtype]
D181:	lea     r8, term_database; 'terminfo'
D188:	lea     rsi, aSCanTFindTheTe_0; '%s: can't find the terminal type %s in '...
D18F:	mov     rdi, rax; stream
D192:	mov     eax, 0
D197:	call    _fprintf
D19C:	mov     rax, [rbp+termtype]
D1A3:	lea     rdx, s2; 'iris-ansi'
D1AA:	mov     rsi, rdx; s2
D1AD:	mov     rdi, rax; s1
D1B0:	call    _strcmp
D1B5:	test    eax, eax
D1B7:	jnz     short loc_D1F1
D1B9:	mov     rdx, cs:g_program
D1C0:	mov     rax, cs:stderr@GLIBC_2_2_5
D1C7:	lea     rcx, aSTryingAnsi; '%s: trying ansi...n'
D1CE:	mov     rsi, rcx; format
D1D1:	mov     rdi, rax; stream
D1D4:	mov     eax, 0
D1D9:	call    _fprintf
D1DE:	lea     rax, aAnsi; 'ansi'
D1E5:	mov     [rbp+termtype], rax
D1EC:	jmp     retry
D1F1:	mov     rax, [rbp+termtype]
D1F8:	mov     rdi, rax; term
D1FB:	call    tty_is_xterm
D200:	test    eax, eax
D202:	jz      short loc_D23C
D204:	mov     rdx, cs:g_program
D20B:	mov     rax, cs:stderr@GLIBC_2_2_5
D212:	lea     rcx, aSTryingXterm; '%s: trying xterm...n'
D219:	mov     rsi, rcx; format
D21C:	mov     rdi, rax; stream
D21F:	mov     eax, 0
D224:	call    _fprintf
D229:	lea     rax, aXterm; 'xterm'
D230:	mov     [rbp+termtype], rax
D237:	jmp     retry
D23C:	mov     rax, [rbp+termtype]
D243:	lea     rdx, aVt220; 'vt220'
D24A:	mov     rsi, rdx; s2
D24D:	mov     rdi, rax; s1
D250:	call    _strcmp
D255:	test    eax, eax
D257:	jz      short loc_D276
D259:	mov     rax, [rbp+termtype]
D260:	lea     rdx, aVt320; 'vt320'
D267:	mov     rsi, rdx; s2
D26A:	mov     rdi, rax; s1
D26D:	call    _strcmp
D272:	test    eax, eax
D274:	jnz     short loc_D2AE
D276:	mov     rdx, cs:g_program
D27D:	mov     rax, cs:stderr@GLIBC_2_2_5
D284:	lea     rcx, aSTryingVt100; '%s: trying vt100...n'
D28B:	mov     rsi, rcx; format
D28E:	mov     rdi, rax; stream
D291:	mov     eax, 0
D296:	call    _fprintf
D29B:	lea     rax, aAnsi; 'ansi'
D2A2:	mov     [rbp+termtype], rax
D2A9:	jmp     retry
D2AE:	mov     edi, 1; status
D2B3:	call    _exit
D2B8:	mov     rax, [rbp+termtype]
D2BF:	mov     rdi, rax; string
D2C2:	call    xstrdup
D2C7:	mov     cs:tty_type, rax
D2CE:	mov     edi, 800h; n
D2D3:	call    xmalloc
D2D8:	mov     [rbp+capability_buf], rax
D2DF:	mov     rax, cs:tty_capability.name+0E0h
D2E6:	lea     rdx, [rbp+capability_buf]
D2ED:	mov     rsi, rdx; char **
D2F0:	mov     rdi, rax; char *
D2F3:	call    _tgetstr
D2F8:	mov     [rbp+tmp], rax
D2FF:	cmp     [rbp+tmp], 0
D307:	jz      short loc_D315
D309:	mov     rax, [rbp+tmp]
D310:	movzx   eax, byte ptr [rax]
D313:	jmp     short loc_D31A
D315:	mov     eax, 0
D31A:	mov     cs:PC, al
D320:	mov     rax, cs:tty_capability.name+120h
D327:	lea     rdx, [rbp+capability_buf]
D32E:	mov     rsi, rdx; char **
D331:	mov     rdi, rax; char *
D334:	call    _tgetstr
D339:	mov     cs:BC, rax
D340:	mov     rax, cs:tty_capability.name+100h
D347:	lea     rdx, [rbp+capability_buf]
D34E:	mov     rsi, rdx; char **
D351:	mov     rdi, rax; char *
D354:	call    _tgetstr
D359:	mov     cs:UP, rax
D360:	mov     rax, cs:BC
D367:	test    rax, rax
D36A:	jz      short loc_D378
D36C:	mov     rax, cs:UP
D373:	test    rax, rax
D376:	jnz     short loc_D391
D378:	mov     cs:UP, 0
D383:	mov     rax, cs:UP
D38A:	mov     cs:BC, rax
D391:	mov     rax, cs:tty_capability.name
D398:	lea     rdx, [rbp+capability_buf]
D39F:	mov     rsi, rdx; char **
D3A2:	mov     rdi, rax; char *
D3A5:	call    _tgetstr
D3AA:	mov     cs:tty_capability.string, rax
D3B1:	mov     rax, cs:tty_capability.name+40h
D3B8:	lea     rdx, [rbp+capability_buf]
D3BF:	mov     rsi, rdx; char **
D3C2:	mov     rdi, rax; char *
D3C5:	call    _tgetstr
D3CA:	mov     cs:tty_capability.string+40h, rax
D3D1:	mov     rax, cs:tty_capability.name+20h
D3D8:	lea     rdx, [rbp+capability_buf]
D3DF:	mov     rsi, rdx; char **
D3E2:	mov     rdi, rax; char *
D3E5:	call    _tgetstr
D3EA:	mov     cs:tty_capability.string+20h, rax
D3F1:	mov     rax, cs:tty_capability.string
D3F8:	test    rax, rax
D3FB:	jnz     short loc_D416
D3FD:	mov     cs:tty_capability.string+40h, 0
D408:	mov     rax, cs:tty_capability.string+40h
D40F:	mov     cs:tty_capability.string+20h, rax
D416:	mov     rax, cs:tty_capability.name+140h
D41D:	lea     rdx, [rbp+capability_buf]
D424:	mov     rsi, rdx; char **
D427:	mov     rdi, rax; char *
D42A:	call    _tgetstr
D42F:	mov     cs:tty_capability.string+140h, rax
D436:	mov     rax, cs:tty_capability.string+140h
D43D:	test    rax, rax
D440:	jnz     short loc_D459
D442:	mov     cs:tty_capability.string+140h, 0
D44D:	mov     cs:tty_capability.integer+180h, 0
D457:	jmp     short loc_D47C
D459:	mov     rax, cs:tty_capability.string+140h
D460:	mov     cs:tty_capability.string+20h, rax
D467:	mov     rax, cs:tty_capability.name+180h
D46E:	mov     rdi, rax; char *
D471:	call    _tgetflag
D476:	mov     cs:tty_capability.integer+180h, eax
D47C:	mov     rax, cs:tty_capability.name+160h
D483:	mov     rdi, rax; char *
D486:	call    _tgetnum
D48B:	mov     cs:tty_capability.integer+160h, eax
D491:	mov     eax, cs:tty_capability.integer+160h
D497:	test    eax, eax
D499:	js      short loc_D4C2
D49B:	mov     cs:tty_capability.string+40h, 0
D4A6:	mov     rax, cs:tty_capability.string+40h
D4AD:	mov     cs:tty_capability.string+20h, rax
D4B4:	mov     rax, cs:tty_capability.string+20h
D4BB:	mov     cs:tty_capability.string, rax
D4C2:	mov     rax, cs:tty_capability.name+1A0h
D4C9:	mov     rdi, rax; char *
D4CC:	call    _tgetnum
D4D1:	mov     cs:tty_capability.integer+1A0h, eax
D4D7:	mov     rax, cs:tty_capability.name+1C0h
D4DE:	mov     rdi, rax; char *
D4E1:	call    _tgetnum
D4E6:	mov     cs:tty_capability.integer+1C0h, eax
D4EC:	mov     rax, cs:tty_capability.name+60h
D4F3:	lea     rdx, [rbp+capability_buf]
D4FA:	mov     rsi, rdx; char **
D4FD:	mov     rdi, rax; char *
D500:	call    _tgetstr
D505:	mov     cs:tty_capability.string+60h, rax
D50C:	mov     rax, cs:tty_capability.name+80h
D513:	lea     rdx, [rbp+capability_buf]
D51A:	mov     rsi, rdx; char **
D51D:	mov     rdi, rax; char *
D520:	call    _tgetstr
D525:	mov     cs:tty_capability.string+80h, rax
D52C:	mov     rax, cs:tty_capability.string+60h
D533:	test    rax, rax
D536:	jz      short loc_D544
D538:	mov     rax, cs:tty_capability.string+80h
D53F:	test    rax, rax
D542:	jnz     short loc_D55D
D544:	mov     cs:tty_capability.string+60h, 0
D54F:	mov     rax, cs:tty_capability.string+60h
D556:	mov     cs:tty_capability.string+80h, rax
D55D:	mov     rax, cs:tty_capability.name+0A0h
D564:	lea     rdx, [rbp+capability_buf]
D56B:	mov     rsi, rdx; char **
D56E:	mov     rdi, rax; char *
D571:	call    _tgetstr
D576:	mov     cs:tty_capability.string+0A0h, rax
D57D:	mov     rax, cs:tty_capability.name+0C0h
D584:	lea     rdx, [rbp+capability_buf]
D58B:	mov     rsi, rdx; char **
D58E:	mov     rdi, rax; char *
D591:	call    _tgetstr
D596:	mov     cs:tty_capability.string+0C0h, rax
D59D:	mov     rax, cs:tty_capability.name+1E0h
D5A4:	lea     rdx, [rbp+capability_buf]
D5AB:	mov     rsi, rdx; char **
D5AE:	mov     rdi, rax; char *
D5B1:	call    _tgetstr
D5B6:	mov     cs:tty_capability.string+1E0h, rax
D5BD:	mov     rax, cs:tty_capability.name+200h
D5C4:	lea     rdx, [rbp+capability_buf]
D5CB:	mov     rsi, rdx; char **
D5CE:	mov     rdi, rax; char *
D5D1:	call    _tgetstr
D5D6:	mov     cs:tty_capability.string+200h, rax
D5DD:	mov     [rbp+i], 11h
D5E7:	jmp     short loc_D637
D5E9:	mov     eax, [rbp+i]
D5EF:	cdqe
D5F1:	shl     rax, 5
D5F5:	mov     rdx, rax
D5F8:	lea     rax, tty_capability
D5FF:	mov     rax, [rdx+rax]
D603:	lea     rdx, [rbp+capability_buf]
D60A:	mov     rsi, rdx; char **
D60D:	mov     rdi, rax; char *
D610:	call    _tgetstr
D615:	mov     edx, [rbp+i]
D61B:	movsxd  rdx, edx
D61E:	mov     rcx, rdx
D621:	shl     rcx, 5
D625:	lea     rdx, tty_capability.string
D62C:	mov     [rcx+rdx], rax
D630:	add     [rbp+i], 1
D637:	cmp     [rbp+i], 25h ; '%'
D63E:	jle     short loc_D5E9
D640:	mov     [rbp+i], 0
D64A:	jmp     loc_D6FC
D64F:	mov     eax, [rbp+i]
D655:	cdqe
D657:	shl     rax, 5
D65B:	mov     rdx, rax
D65E:	lea     rax, tty_capability.string
D665:	mov     rax, [rdx+rax]
D669:	test    rax, rax
D66C:	jnz     loc_D6F5
D672:	mov     eax, [rbp+i]
D678:	cdqe
D67A:	shl     rax, 5
D67E:	mov     rdx, rax
D681:	lea     rax, tty_capability.required
D688:	mov     eax, [rdx+rax]
D68B:	test    eax, eax
D68D:	jz      short loc_D6D4
D68F:	add     [rbp+term_errors], 1
D696:	mov     eax, [rbp+i]
D69C:	cdqe
D69E:	shl     rax, 5
D6A2:	mov     rdx, rax
D6A5:	lea     rax, tty_capability
D6AC:	mov     rcx, [rdx+rax]
D6B0:	mov     rdx, cs:g_program
D6B7:	mov     rax, cs:stderr@GLIBC_2_2_5
D6BE:	lea     rsi, aSCanTFindTheST; '%s: can't find the '%s' terminal capabi'...
D6C5:	mov     rdi, rax; stream
D6C8:	mov     eax, 0
D6CD:	call    _fprintf
D6D2:	jmp     short loc_D6F5
D6D4:	mov     eax, [rbp+i]
D6DA:	cdqe
D6DC:	shl     rax, 5
D6E0:	mov     rdx, rax
D6E3:	lea     rax, tty_capability.string
D6EA:	lea     rcx, unk_27EBE
D6F1:	mov     [rdx+rax], rcx
D6F5:	add     [rbp+i], 1
D6FC:	cmp     [rbp+i], 25h ; '%'
D703:	jle     loc_D64F
D709:	cmp     [rbp+term_errors], 0
D710:	jz      short loc_D744
D712:	mov     rdx, cs:g_program
D719:	mov     rax, cs:stderr@GLIBC_2_2_5
D720:	mov     ecx, [rbp+term_errors]
D726:	lea     rsi, aSDErrorsYourTe; '%s: %d errors. Your terminal is too dum'...
D72D:	mov     rdi, rax; stream
D730:	mov     eax, 0
D735:	call    _fprintf
D73A:	mov     edi, 1; status
D73F:	call    _exit
D744:	nop
D745:	mov     rax, [rbp+var_8]
D749:	sub     rax, fs:28h
D752:	jz      short locret_D759
D754:	call    ___stack_chk_fail
D759:	leave
D75A:	retn
D75B:	endbr64
D75F:	push    rbp
D760:	mov     rbp, rsp
D763:	sub     rsp, 10h
D767:	mov     [rbp+kbd_mode], edi
D76A:	mov     edi, 0; fd
D76F:	call    _isatty
D774:	test    eax, eax
D776:	jz      short loc_D786
D778:	mov     edi, 1; fd
D77D:	call    _isatty
D782:	test    eax, eax
D784:	jnz     short loc_D7B5
D786:	mov     rdx, cs:g_program
D78D:	mov     rax, cs:stderr@GLIBC_2_2_5
D794:	lea     rcx, aSOnlyStderrCan; '%s: only stderr can be redirected.n'
D79B:	mov     rsi, rcx; format
D79E:	mov     rdi, rax; stream
D7A1:	mov     eax, 0
D7A6:	call    _fprintf
D7AB:	mov     edi, 1; status
D7B0:	call    _exit
D7B5:	mov     edi, 1; fd
D7BA:	call    _ttyname
D7BF:	mov     cs:tty_device, rax
D7C6:	mov     rax, cs:tty_device
D7CD:	test    rax, rax
D7D0:	jnz     short loc_D801
D7D2:	mov     rdx, cs:g_program
D7D9:	mov     rax, cs:stderr@GLIBC_2_2_5
D7E0:	lea     rcx, aSCanTGetTermin; '%s: can't get terminal name.n'
D7E7:	mov     rsi, rcx; format
D7EA:	mov     rdi, rax; stream
D7ED:	mov     eax, 0
D7F2:	call    _fprintf
D7F7:	mov     edi, 1; status
D7FC:	call    _exit
D801:	lea     rax, old_term
D808:	mov     rsi, rax; termios_p
D80B:	mov     edi, 1; fd
D810:	call    _tcgetattr
D815:	mov     edi, 40h ; '@'; n
D81A:	call    xmalloc
D81F:	mov     cs:tty_key_seq, rax
D826:	mov     rax, cs:tty_key_seq
D82D:	mov     cs:default_key.key_seq, rax
D834:	mov     cs:default_key.aux_data, 0
D83F:	mov     cs:default_key.next, 0
D84A:	mov     eax, [rbp+kbd_mode]
D84D:	mov     cs:tty_kbdmode, eax
D853:	mov     rax, cs:tty_device
D85A:	mov     rdi, rax; s
D85D:	call    _strlen
D862:	mov     cs:tty_device_length, eax
D868:	mov     eax, 0
D86D:	call    tty_get_capabilities
D872:	nop
D873:	leave
D874:	retn
D875:	endbr64
D879:	push    rbp
D87A:	mov     rbp, rsp
D87D:	sub     rsp, 30h
D881:	mov     [rbp+string], rdi
D885:	mov     rax, cs:tty_type
D88C:	mov     rdi, rax; term
D88F:	call    tty_is_xterm
D894:	test    eax, eax
D896:	jz      loc_D9A0
D89C:	mov     rax, [rbp+string]
D8A0:	mov     rdi, rax; s
D8A3:	call    _strlen
D8A8:	mov     [rbp+len], rax
D8AC:	mov     rax, [rbp+len]
D8B0:	add     rax, 81h
D8B6:	mov     rdi, rax; n
D8B9:	call    xmalloc
D8BE:	mov     [rbp+temp], rax
D8C2:	mov     rax, [rbp+string]
D8C6:	mov     rdi, rax; string
D8C9:	call    xstrdup
D8CE:	mov     [rbp+printable_string], rax
D8D2:	mov     rdx, [rbp+len]
D8D6:	mov     rax, [rbp+printable_string]
D8DA:	mov     rsi, rdx; length
D8DD:	mov     rdi, rax; string
D8E0:	call    toprintable
D8E5:	mov     rdx, [rbp+printable_string]
D8E9:	mov     rax, [rbp+temp]
D8ED:	mov     r9d, 7
D8F3:	mov     r8, rdx
D8F6:	lea     rdx, aGnuInteractive_0; 'GNU Interactive Tools'
D8FD:	mov     rcx, rdx
D900:	mov     edx, 1Bh
D905:	lea     rsi, aC2SSC; '%c]2;%s - %s%c'
D90C:	mov     rdi, rax; s
D90F:	mov     eax, 0
D914:	call    _sprintf
D919:	mov     rax, [rbp+len]
D91D:	lea     edx, [rax+7Fh]
D920:	mov     eax, cs:tty_columns
D926:	add     eax, eax
D928:	cmp     edx, eax
D92A:	jl      short loc_D959
D92C:	mov     eax, cs:tty_columns
D932:	add     eax, eax
D934:	movsxd  rdx, eax
D937:	mov     rax, [rbp+temp]
D93B:	add     rax, rdx
D93E:	mov     byte ptr [rax], 7
D941:	mov     eax, cs:tty_columns
D947:	add     eax, eax
D949:	cdqe
D94B:	lea     rdx, [rax+1]
D94F:	mov     rax, [rbp+temp]
D953:	add     rax, rdx
D956:	mov     byte ptr [rax], 0
D959:	mov     rax, [rbp+temp]
D95D:	mov     rdi, rax; s
D960:	call    _strlen
D965:	mov     rdx, rax; count
D968:	mov     rax, [rbp+temp]
D96C:	mov     rsi, rax; buf
D96F:	mov     edi, 1; fd
D974:	call    xwrite
D979:	mov     rax, [rbp+printable_string]
D97D:	mov     rdi, rax; pointer
D980:	call    xfree
D985:	mov     rax, [rbp+temp]
D989:	mov     rdi, rax; pointer
D98C:	call    xfree
D991:	mov     rax, cs:__bss_start
D998:	mov     rdi, rax; stream
D99B:	call    _fflush
D9A0:	nop
D9A1:	leave
D9A2:	retn
D9A3:	endbr64
D9A7:	push    rbp
D9A8:	mov     rbp, rsp
D9AB:	sub     rsp, 10h
D9AF:	mov     [rbp+term], rdi
D9B3:	mov     rax, [rbp+term]
D9B7:	mov     edx, 5; n
D9BC:	lea     rcx, aXterm; 'xterm'
D9C3:	mov     rsi, rcx; s2
D9C6:	mov     rdi, rax; s1
D9C9:	call    _strncmp
D9CE:	test    eax, eax
D9D0:	jz      loc_DA62
D9D6:	mov     rax, [rbp+term]
D9DA:	mov     edx, 4; n
D9DF:	lea     rcx, aRxvt; 'rxvt'
D9E6:	mov     rsi, rcx; s2
D9E9:	mov     rdi, rax; s1
D9EC:	call    _strncmp
D9F1:	test    eax, eax
D9F3:	jz      short loc_DA62
D9F5:	mov     rax, [rbp+term]
D9F9:	mov     edx, 9; n
D9FE:	lea     rcx, s2; 'iris-ansi'
DA05:	mov     rsi, rcx; s2
DA08:	mov     rdi, rax; s1
DA0B:	call    _strncmp
DA10:	test    eax, eax
DA12:	jz      short loc_DA62
DA14:	mov     rax, [rbp+term]
DA18:	lea     rdx, aAixterm; 'aixterm'
DA1F:	mov     rsi, rdx; s2
DA22:	mov     rdi, rax; s1
DA25:	call    _strcmp
DA2A:	test    eax, eax
DA2C:	jz      short loc_DA62
DA2E:	mov     rax, [rbp+term]
DA32:	lea     rdx, aEterm; 'Eterm'
DA39:	mov     rsi, rdx; s2
DA3C:	mov     rdi, rax; s1
DA3F:	call    _strcmp
DA44:	test    eax, eax
DA46:	jz      short loc_DA62
DA48:	mov     rax, [rbp+term]
DA4C:	lea     rdx, aDtterm; 'dtterm'
DA53:	mov     rsi, rdx; s2
DA56:	mov     rdi, rax; s1
DA59:	call    _strcmp
DA5E:	test    eax, eax
DA60:	jnz     short loc_DA69
DA62:	mov     eax, 1
DA67:	jmp     short locret_DA6E
DA69:	mov     eax, 0
DA6E:	leave
DA6F:	retn
DA70:	endbr64
DA74:	push    rbp
DA75:	mov     rbp, rsp
DA78:	sub     rsp, 10h
DA7C:	mov     edi, 18h; n
DA81:	call    xmalloc
DA86:	mov     [rbp+window], rax
DA8A:	mov     rax, [rbp+window]
DA8E:	mov     r8d, 0; columns
DA94:	mov     ecx, 0; lines
DA99:	mov     edx, 0; y
DA9E:	mov     esi, 0; x
DAA3:	mov     rdi, rax; window
DAA6:	call    window_resize
DAAB:	mov     rax, [rbp+window]
DAAF:	leave
DAB0:	retn
DAB1:	endbr64
DAB5:	push    rbp
DAB6:	mov     rbp, rsp
DAB9:	sub     rsp, 10h
DABD:	mov     [rbp+window], rdi
DAC1:	cmp     [rbp+window], 0
DAC6:	jz      short loc_DAD4
DAC8:	mov     rax, [rbp+window]
DACC:	mov     rdi, rax; pointer
DACF:	call    xfree
DAD4:	nop
DAD5:	leave
DAD6:	retn
DAD7:	endbr64
DADB:	push    rbp
DADC:	mov     rbp, rsp
DADF:	mov     [rbp+window], rdi
DAE3:	mov     [rbp+x], esi
DAE6:	mov     [rbp+y], edx
DAE9:	mov     [rbp+lines], ecx
DAEC:	mov     [rbp+columns], r8d
DAF0:	mov     rax, [rbp+window]
DAF4:	mov     edx, [rbp+x]
DAF7:	mov     [rax], edx
DAF9:	mov     rax, [rbp+window]
DAFD:	mov     edx, [rbp+y]
DB00:	mov     [rax+4], edx
DB03:	mov     rax, [rbp+window]
DB07:	mov     edx, [rbp+lines]
DB0A:	mov     [rax+8], edx
DB0D:	mov     rax, [rbp+window]
DB11:	mov     edx, [rbp+columns]
DB14:	mov     [rax+0Ch], edx
DB17:	nop
DB18:	pop     rbp
DB19:	retn
DB1A:	endbr64
DB1E:	push    rbp
DB1F:	mov     rbp, rsp
DB22:	sub     rsp, 30h
DB26:	mov     [rbp+window], rdi
DB2A:	mov     [rbp+str], rsi
DB2E:	mov     [rbp+length], edx
DB31:	mov     rax, [rbp+window]
DB35:	mov     eax, [rax+10h]
DB38:	mov     [rbp+x], eax
DB3B:	mov     rax, [rbp+window]
DB3F:	mov     edx, [rax+10h]
DB42:	mov     eax, [rbp+length]
DB45:	add     edx, eax
DB47:	mov     rax, [rbp+window]
DB4B:	mov     [rax+10h], edx
DB4E:	mov     rax, [rbp+window]
DB52:	mov     eax, [rax+0Ch]
DB55:	cmp     [rbp+x], eax
DB58:	jl      short loc_DB61
DB5A:	mov     eax, 0
DB5F:	jmp     short locret_DBBA
DB61:	mov     rax, [rbp+window]
DB65:	mov     edx, [rax+14h]
DB68:	mov     rax, [rbp+window]
DB6C:	mov     eax, [rax+8]
DB6F:	cmp     edx, eax
DB71:	jl      short loc_DB7A
DB73:	mov     eax, 0
DB78:	jmp     short locret_DBBA
DB7A:	mov     edx, [rbp+x]
DB7D:	mov     eax, [rbp+length]
DB80:	add     edx, eax
DB82:	mov     rax, [rbp+window]
DB86:	mov     eax, [rax+0Ch]
DB89:	cmp     edx, eax
DB8B:	jg      short loc_DBA0
DB8D:	mov     edx, [rbp+length]
DB90:	mov     rax, [rbp+str]
DB94:	mov     esi, edx; length
DB96:	mov     rdi, rax; buf
DB99:	call    tty_puts
DB9E:	jmp     short locret_DBBA
DBA0:	mov     rax, [rbp+window]
DBA4:	mov     eax, [rax+0Ch]
DBA7:	sub     eax, [rbp+x]
DBAA:	mov     edx, eax
DBAC:	mov     rax, [rbp+str]
DBB0:	mov     esi, edx; length
DBB2:	mov     rdi, rax; buf
DBB5:	call    tty_puts
DBBA:	leave
DBBB:	retn
DBBC:	endbr64
DBC0:	push    rbp
DBC1:	mov     rbp, rsp
DBC4:	sub     rsp, 10h
DBC8:	mov     [rbp+window], rdi
DBCC:	mov     [rbp+c], esi
DBCF:	mov     rax, [rbp+window]
DBD3:	mov     eax, [rax+10h]
DBD6:	lea     edx, [rax+1]
DBD9:	mov     rax, [rbp+window]
DBDD:	mov     [rax+10h], edx
DBE0:	mov     rax, [rbp+window]
DBE4:	mov     edx, [rax+10h]
DBE7:	mov     rax, [rbp+window]
DBEB:	mov     eax, [rax+0Ch]
DBEE:	cmp     edx, eax
DBF0:	jle     short loc_DBF9
DBF2:	mov     eax, 0
DBF7:	jmp     short locret_DC1C
DBF9:	mov     rax, [rbp+window]
DBFD:	mov     edx, [rax+14h]
DC00:	mov     rax, [rbp+window]
DC04:	mov     eax, [rax+8]
DC07:	cmp     edx, eax
DC09:	jl      short loc_DC12
DC0B:	mov     eax, 0
DC10:	jmp     short locret_DC1C
DC12:	mov     eax, [rbp+c]
DC15:	mov     edi, eax; c
DC17:	call    tty_putc
DC1C:	leave
DC1D:	retn
DC1E:	endbr64
DC22:	push    rbp
DC23:	mov     rbp, rsp
DC26:	sub     rsp, 10h
DC2A:	mov     [rbp+window], rdi
DC2E:	mov     [rbp+y], esi
DC31:	mov     [rbp+x], edx
DC34:	mov     rax, [rbp+window]
DC38:	mov     edx, [rbp+x]
DC3B:	mov     [rax+10h], edx
DC3E:	mov     rax, [rbp+window]
DC42:	mov     edx, [rbp+y]
DC45:	mov     [rax+14h], edx
DC48:	mov     rax, [rbp+window]
DC4C:	mov     edx, [rax]
DC4E:	mov     eax, [rbp+x]
DC51:	add     edx, eax
DC53:	mov     rax, [rbp+window]
DC57:	mov     ecx, [rax+4]
DC5A:	mov     eax, [rbp+y]
DC5D:	add     eax, ecx
DC5F:	mov     esi, edx; x
DC61:	mov     edi, eax; y
DC63:	call    tty_goto
DC68:	nop
DC69:	leave
DC6A:	retn
DC6B:	endbr64
DC6F:	push    rbp
DC70:	mov     rbp, rsp
DC73:	mov     [rbp+window], rdi
DC77:	mov     rax, [rbp+window]
DC7B:	mov     eax, [rax]
DC7D:	pop     rbp
DC7E:	retn
DC7F:	endbr64
DC83:	push    rbp
DC84:	mov     rbp, rsp
DC87:	mov     [rbp+window], rdi
DC8B:	mov     rax, [rbp+window]
DC8F:	mov     eax, [rax+4]
DC92:	pop     rbp
DC93:	retn
DC94:	endbr64
DC98:	push    rbp
DC99:	mov     rbp, rsp
DC9C:	mov     [rbp+window], rdi
DCA0:	mov     rax, [rbp+window]
DCA4:	mov     eax, [rax+8]
DCA7:	pop     rbp
DCA8:	retn
DCA9:	endbr64
DCAD:	push    rbp
DCAE:	mov     rbp, rsp
DCB1:	mov     [rbp+window], rdi
DCB5:	mov     rax, [rbp+window]
DCB9:	mov     eax, [rax+0Ch]
DCBC:	pop     rbp
DCBD:	retn
DCBE:	endbr64
DCC2:	push    rbp
DCC3:	mov     rbp, rsp
DCC6:	mov     eax, edi
DCC8:	mov     [rbp+c], al
DCCB:	cmp     [rbp+c], 60h ; '`'
DCCF:	jle     short loc_DCD7
DCD1:	cmp     [rbp+c], 7Ah ; 'z'
DCD5:	jle     short loc_DCFB
DCD7:	cmp     [rbp+c], 40h ; '@'
DCDB:	jle     short loc_DCE3
DCDD:	cmp     [rbp+c], 5Ah ; 'Z'
DCE1:	jle     short loc_DCFB
DCE3:	cmp     [rbp+c], 2Fh ; '/'
DCE7:	jle     short loc_DCEF
DCE9:	cmp     [rbp+c], 39h ; '9'
DCED:	jle     short loc_DCFB
DCEF:	cmp     [rbp+c], 24h ; '$'
DCF3:	jz      short loc_DCFB
DCF5:	cmp     [rbp+c], 25h ; '%'
DCF9:	jnz     short loc_DD02
DCFB:	mov     eax, 0
DD00:	jmp     short loc_DD07
DD02:	mov     eax, 1
DD07:	pop     rbp
DD08:	retn
DD09:	endbr64
DD0D:	push    rbp
DD0E:	mov     rbp, rsp
DD11:	push    rbx
DD12:	sub     rsp, 38h
DD16:	mov     [rbp+flags], edi
DD19:	mov     rax, cs:il
DD20:	mov     rdx, [rax+20h]
DD24:	mov     rax, cs:il
DD2B:	mov     rax, [rax+18h]
DD2F:	cmp     rdx, rax
DD32:	jz      loc_DF02
DD38:	mov     rax, cs:il
DD3F:	mov     rdx, [rax+20h]
DD43:	mov     rax, cs:il
DD4A:	mov     rax, [rax+18h]
DD4E:	cmp     rdx, rax
DD51:	jbe     short loc_DD73
DD53:	mov     rax, cs:il
DD5A:	mov     rax, [rax+18h]
DD5E:	mov     [rbp+region_start], rax
DD62:	mov     rax, cs:il
DD69:	mov     rax, [rax+20h]
DD6D:	mov     [rbp+region_end], rax
DD71:	jmp     short loc_DD91
DD73:	mov     rax, cs:il
DD7A:	mov     rax, [rax+20h]
DD7E:	mov     [rbp+region_start], rax
DD82:	mov     rax, cs:il
DD89:	mov     rax, [rax+18h]
DD8D:	mov     [rbp+region_end], rax
DD91:	mov     rax, [rbp+region_end]
DD95:	sub     rax, [rbp+region_start]
DD99:	mov     [rbp+region_size], rax
DD9D:	mov     eax, [rbp+flags]
DDA0:	and     eax, 1
DDA3:	test    eax, eax
DDA5:	jz      loc_DE2B
DDAB:	mov     rax, cs:il
DDB2:	mov     rax, [rax+60h]
DDB6:	test    rax, rax
DDB9:	jz      short loc_DDCE
DDBB:	mov     rax, cs:il
DDC2:	mov     rax, [rax+60h]
DDC6:	mov     rdi, rax; pointer
DDC9:	call    xfree
DDCE:	mov     rax, [rbp+region_size]
DDD2:	add     rax, 1
DDD6:	mov     rbx, cs:il
DDDD:	mov     rdi, rax; n
DDE0:	call    xmalloc
DDE5:	mov     [rbx+60h], rax
DDE9:	mov     rax, cs:il
DDF0:	mov     rdx, [rax+58h]
DDF4:	mov     rax, [rbp+region_start]
DDF8:	lea     rcx, [rdx+rax]
DDFC:	mov     rax, cs:il
DE03:	mov     rax, [rax+60h]
DE07:	mov     rdx, [rbp+region_size]; n
DE0B:	mov     rsi, rcx; src
DE0E:	mov     rdi, rax; dest
DE11:	call    _memcpy
DE16:	mov     rax, cs:il
DE1D:	mov     rdx, [rax+60h]
DE21:	mov     rax, [rbp+region_size]
DE25:	add     rax, rdx
DE28:	mov     byte ptr [rax], 0
DE2B:	mov     eax, [rbp+flags]
DE2E:	and     eax, 2
DE31:	test    eax, eax
DE33:	jz      loc_DF03
DE39:	mov     rax, cs:il
DE40:	mov     rdx, [rax+48h]
DE44:	mov     rax, cs:il
DE4B:	sub     rdx, [rbp+region_size]
DE4F:	mov     [rax+48h], rdx
DE53:	mov     rax, cs:il
DE5A:	mov     rdx, [rax+38h]
DE5E:	mov     rax, cs:il
DE65:	sub     rdx, [rbp+region_size]
DE69:	mov     [rax+38h], rdx
DE6D:	mov     rax, cs:il
DE74:	mov     rdx, [rbp+region_start]
DE78:	mov     [rax+18h], rdx
DE7C:	mov     rax, cs:il
DE83:	mov     rdx, [rbp+region_start]
DE87:	mov     [rax+20h], rdx
DE8B:	mov     rax, cs:il
DE92:	mov     rdx, [rax+58h]
DE96:	mov     rax, [rbp+region_end]
DE9A:	add     rdx, rax
DE9D:	mov     rax, cs:il
DEA4:	mov     rcx, [rax+58h]
DEA8:	mov     rax, [rbp+region_start]
DEAC:	add     rax, rcx
DEAF:	mov     rsi, rdx; src
DEB2:	mov     rdi, rax; dest
DEB5:	call    _strcpy
DEBA:	mov     rax, cs:il
DEC1:	mov     rdx, [rax+38h]
DEC5:	mov     rax, cs:il
DECC:	add     rdx, 1
DED0:	mov     [rax+50h], rdx
DED4:	mov     rax, cs:il
DEDB:	mov     rdx, [rax+50h]
DEDF:	mov     rax, cs:il
DEE6:	mov     rax, [rax+58h]
DEEA:	mov     rbx, cs:il
DEF1:	mov     rsi, rdx; n
DEF4:	mov     rdi, rax; p
DEF7:	call    xrealloc
DEFC:	mov     [rbx+58h], rax
DF00:	jmp     short loc_DF03
DF02:	nop
DF03:	mov     rbx, [rbp+var_8]
DF07:	leave
DF08:	retn
DF09:	endbr64
DF0D:	push    rbp
DF0E:	mov     rbp, rsp
DF11:	sub     rsp, 10h
DF15:	mov     [rbp+some_il], rdi
DF19:	cmp     [rbp+some_il], 0
DF1E:	jz      short loc_DF68
DF20:	mov     rax, [rbp+some_il]
DF24:	mov     rax, [rax+58h]
DF28:	test    rax, rax
DF2B:	jz      short loc_DF3D
DF2D:	mov     rax, [rbp+some_il]
DF31:	mov     rax, [rax+58h]
DF35:	mov     rdi, rax; pointer
DF38:	call    xfree
DF3D:	mov     rax, [rbp+some_il]
DF41:	mov     rax, [rax+60h]
DF45:	test    rax, rax
DF48:	jz      short loc_DF5A
DF4A:	mov     rax, [rbp+some_il]
DF4E:	mov     rax, [rax+60h]
DF52:	mov     rdi, rax; pointer
DF55:	call    xfree
DF5A:	mov     rax, [rbp+some_il]
DF5E:	mov     rdi, rax; pointer
DF61:	call    xfree
DF66:	jmp     short locret_DF69
DF68:	nop
DF69:	leave
DF6A:	retn
DF6B:	endbr64
DF6F:	push    rbp
DF70:	mov     rbp, rsp
DF73:	mov     rax, cs:il
DF7A:	mov     rdx, [rax+28h]
DF7E:	mov     rax, cs:il
DF85:	mov     rcx, [rax+40h]
DF89:	mov     rax, rdx
DF8C:	sub     rax, rcx
DF8F:	cmp     rax, 3
DF93:	jbe     short loc_DFB7
DF95:	mov     rax, cs:il
DF9C:	mov     rdx, [rax+28h]
DFA0:	mov     rax, cs:il
DFA7:	mov     rcx, [rax+40h]
DFAB:	mov     rax, rdx
DFAE:	sub     rax, rcx
DFB1:	shr     rax, 2
DFB5:	jmp     short loc_DFBC
DFB7:	mov     eax, 1
DFBC:	pop     rbp
DFBD:	retn
DFBE:	endbr64
DFC2:	push    rbp
DFC3:	mov     rbp, rsp
DFC6:	push    rbx
DFC7:	sub     rsp, 18h
DFCB:	mov     rax, fs:28h
DFD4:	mov     [rbp+var_18], rax
DFD8:	xor     eax, eax
DFDA:	mov     edi, 70h ; 'p'; n
DFDF:	call    xmalloc
DFE4:	mov     cs:il, rax
DFEB:	mov     rax, cs:il
DFF2:	mov     dword ptr [rax+8], 1
DFF9:	mov     rax, cs:il
E000:	mov     dword ptr [rax+0Ch], 0
E007:	mov     rax, cs:il
E00E:	mov     qword ptr [rax+58h], 0
E016:	mov     rax, cs:il
E01D:	mov     qword ptr [rax+60h], 0
E025:	mov     rax, cs:il
E02C:	mov     qword ptr [rax+28h], 0
E034:	mov     rax, cs:il
E03B:	mov     qword ptr [rax+30h], 0
E043:	mov     eax, 0
E048:	call    il_reset_line
E04D:	mov     rbx, cs:il
E054:	mov     eax, 0
E059:	call    window_init
E05E:	mov     [rbx], rax
E061:	lea     rax, aGitfmSetup_0; '[GITFM-Setup]'
E068:	mov     rdi, rax; section
E06B:	call    use_section
E070:	lea     rax, [rbp+data]
E074:	mov     ecx, 1; seek
E079:	mov     edx, 1; fields
E07E:	mov     rsi, rax; dest
E081:	lea     rax, aHistoryfile; 'HistoryFile'
E088:	mov     rdi, rax; var_name
E08B:	call    configuration_getvarinfo
E090:	mov     rax, [rbp+data]
E094:	test    rax, rax
E097:	jz      short loc_E09F
E099:	mov     rax, [rbp+data]
E09D:	jmp     short loc_E0A6
E09F:	lea     rax, aGithistory; '~/.githistory'
E0A6:	mov     rbx, cs:il
E0AD:	mov     rdi, rax; string
E0B0:	mov     eax, 0
E0B5:	call    tilde_expand
E0BA:	mov     [rbx+68h], rax
E0BE:	mov     eax, cs:AnsiColors
E0C4:	test    eax, eax
E0C6:	jz      short loc_E0D1
E0C8:	lea     rax, color_section; '[GITFM-Color]'
E0CF:	jmp     short loc_E0D8
E0D1:	lea     rax, monochrome_section; '[GITFM-Monochrome]'
E0D8:	mov     rdi, rax; section
E0DB:	call    use_section
E0E0:	mov     edx, 6; fields_no
E0E5:	lea     rax, InputLineFields
E0EC:	mov     rsi, rax; colorset_name
E0EF:	lea     rax, InputLineColors
E0F6:	mov     rdi, rax; charset
E0F9:	call    get_colorset_var
E0FE:	mov     eax, 0
E103:	call    using_history
E108:	mov     rax, cs:il
E10F:	mov     rax, [rax+68h]
E113:	mov     rdi, rax; filename
E116:	mov     eax, 0
E11B:	call    read_history
E120:	nop
E121:	mov     eax, 0
E126:	call    next_history
E12B:	test    rax, rax
E12E:	jnz     short loc_E121
E130:	mov     edi, 200h; max
E135:	mov     eax, 0
E13A:	call    stifle_history
E13F:	nop
E140:	mov     rax, [rbp+var_18]
E144:	sub     rax, fs:28h
E14D:	jz      short loc_E154
E14F:	call    ___stack_chk_fail
E154:	mov     rbx, [rbp+var_8]
E158:	leave
E159:	retn
E15A:	endbr64
E15E:	push    rbp
E15F:	mov     rbp, rsp
E162:	mov     rax, cs:il
E169:	mov     rax, [rax+68h]
E16D:	mov     rdi, rax; filename
E170:	mov     eax, 0
E175:	call    write_history
E17A:	mov     rax, cs:il
E181:	mov     rax, [rax]
E184:	mov     rdi, rax; window
E187:	call    mprRemoveSignalHandler
E18C:	mov     rax, cs:il
E193:	mov     rdi, rax; some_il
E196:	call    il_free
E19B:	mov     cs:il, 0
E1A6:	nop
E1A7:	pop     rbp
E1A8:	retn
E1A9:	endbr64
E1AD:	push    rbp
E1AE:	mov     rbp, rsp
E1B1:	sub     rsp, 10h
E1B5:	mov     [rbp+_columns], edi
E1B8:	mov     [rbp+_line], esi
E1BB:	mov     rax, cs:il
E1C2:	mov     edx, [rbp+_columns]
E1C5:	movsxd  rdx, edx
E1C8:	mov     [rax+28h], rdx
E1CC:	mov     rax, cs:il
E1D3:	mov     edx, [rbp+_line]
E1D6:	movsxd  rdx, edx
E1D9:	mov     [rax+30h], rdx
E1DD:	mov     rax, cs:il
E1E4:	mov     rax, [rax]
E1E7:	mov     ecx, [rbp+_columns]
E1EA:	mov     edx, [rbp+_line]; y
E1ED:	mov     r8d, ecx; columns
E1F0:	mov     ecx, 1; lines
E1F5:	mov     esi, 0; x
E1FA:	mov     rdi, rax; window
E1FD:	call    window_resize
E202:	nop
E203:	leave
E204:	retn
E205:	endbr64
E209:	push    rbp
E20A:	mov     rbp, rsp
E20D:	push    rbx
E20E:	sub     rsp, 18h
E212:	mov     edi, 70h ; 'p'; n
E217:	call    xmalloc
E21C:	mov     [rbp+saved_il], rax
E220:	mov     rdx, cs:il
E227:	mov     rax, [rbp+saved_il]
E22B:	mov     rcx, [rdx]
E22E:	mov     rbx, [rdx+8]
E232:	mov     [rax], rcx
E235:	mov     [rax+8], rbx
E239:	mov     rcx, [rdx+10h]
E23D:	mov     rbx, [rdx+18h]
E241:	mov     [rax+10h], rcx
E245:	mov     [rax+18h], rbx
E249:	mov     rcx, [rdx+20h]
E24D:	mov     rbx, [rdx+28h]
E251:	mov     [rax+20h], rcx
E255:	mov     [rax+28h], rbx
E259:	mov     rcx, [rdx+30h]
E25D:	mov     rbx, [rdx+38h]
E261:	mov     [rax+30h], rcx
E265:	mov     [rax+38h], rbx
E269:	mov     rcx, [rdx+40h]
E26D:	mov     rbx, [rdx+48h]
E271:	mov     [rax+40h], rcx
E275:	mov     [rax+48h], rbx
E279:	mov     rcx, [rdx+50h]
E27D:	mov     rbx, [rdx+58h]
E281:	mov     [rax+50h], rcx
E285:	mov     [rax+58h], rbx
E289:	mov     rcx, [rdx+60h]
E28D:	mov     rbx, [rdx+68h]
E291:	mov     [rax+60h], rcx
E295:	mov     [rax+68h], rbx
E299:	mov     rax, [rbp+saved_il]
E29D:	mov     rax, [rax+58h]
E2A1:	test    rax, rax
E2A4:	jz      short loc_E2E7
E2A6:	mov     rax, [rbp+saved_il]
E2AA:	mov     rax, [rax+50h]
E2AE:	mov     rbx, cs:il
E2B5:	mov     rdi, rax; n
E2B8:	call    xmalloc
E2BD:	mov     [rbx+58h], rax
E2C1:	mov     rax, [rbp+saved_il]
E2C5:	mov     rdx, [rax+50h]; n
E2C9:	mov     rax, [rbp+saved_il]
E2CD:	mov     rcx, [rax+58h]
E2D1:	mov     rax, cs:il
E2D8:	mov     rax, [rax+58h]
E2DC:	mov     rsi, rcx; src
E2DF:	mov     rdi, rax; dest
E2E2:	call    _memcpy
E2E7:	mov     rax, [rbp+saved_il]
E2EB:	mov     rax, [rax+60h]
E2EF:	test    rax, rax
E2F2:	jz      short loc_E30F
E2F4:	mov     rax, [rbp+saved_il]
E2F8:	mov     rax, [rax+60h]
E2FC:	mov     rbx, cs:il
E303:	mov     rdi, rax; string
E306:	call    xstrdup
E30B:	mov     [rbx+60h], rax
E30F:	mov     rax, [rbp+saved_il]
E313:	mov     rbx, [rbp+var_8]
E317:	leave
E318:	retn
E319:	endbr64
E31D:	push    rbp
E31E:	mov     rbp, rsp
E321:	sub     rsp, 20h
E325:	mov     [rbp+saved_il], rdi
E329:	mov     rax, cs:il
E330:	mov     rax, [rax+28h]
E334:	mov     [rbp+columns], rax
E338:	mov     rax, cs:il
E33F:	mov     rax, [rax+30h]
E343:	mov     [rbp+line], rax
E347:	cmp     [rbp+saved_il], 0
E34C:	jz      short loc_E37D
E34E:	mov     rax, cs:il
E355:	mov     rdi, rax; some_il
E358:	call    il_free
E35D:	mov     rax, [rbp+saved_il]
E361:	mov     cs:il, rax
E368:	mov     rax, [rbp+line]
E36C:	mov     edx, eax
E36E:	mov     rax, [rbp+columns]
E372:	mov     esi, edx; _line
E374:	mov     edi, eax; _columns
E376:	call    il_resize
E37B:	jmp     short locret_E37E
E37D:	nop
E37E:	leave
E37F:	retn
E380:	endbr64
E384:	push    rbp
E385:	mov     rbp, rsp
E388:	mov     rax, cs:il
E38F:	mov     rdx, [rax+18h]
E393:	mov     rax, cs:il
E39A:	mov     rcx, [rax+40h]
E39E:	mov     rax, rdx
E3A1:	sub     rax, rcx
E3A4:	pop     rbp
E3A5:	retn
E3A6:	endbr64
E3AA:	push    rbp
E3AB:	mov     rbp, rsp
E3AE:	mov     [rbp+echo], edi
E3B1:	mov     rax, cs:il
E3B8:	mov     eax, [rax+8]
E3BB:	mov     [rbp+old_echo_flag], eax
E3BE:	mov     rax, cs:il
E3C5:	mov     edx, [rbp+echo]
E3C8:	mov     [rax+8], edx
E3CB:	mov     eax, [rbp+old_echo_flag]
E3CE:	pop     rbp
E3CF:	retn
E3D0:	endbr64
E3D4:	push    rbp
E3D5:	mov     rbp, rsp
E3D8:	mov     rax, cs:il
E3DF:	mov     rax, [rax+48h]
E3E3:	test    rax, rax
E3E6:	setz    al
E3E9:	movzx   eax, al
E3EC:	pop     rbp
E3ED:	retn
E3EE:	endbr64
E3F2:	push    rbp
E3F3:	mov     rbp, rsp
E3F6:	mov     rdx, cs:il
E3FD:	mov     rax, cs:il
E404:	mov     rdx, [rdx+18h]
E408:	mov     [rax+20h], rdx
E40C:	nop
E40D:	pop     rbp
E40E:	retn
E40F:	endbr64
E413:	push    rbp
E414:	mov     rbp, rsp
E417:	mov     edi, 3; flags
E41C:	mov     eax, 0
E421:	call    il_region_command
E426:	mov     rax, cs:il
E42D:	mov     dword ptr [rax+10h], 18h
E434:	nop
E435:	pop     rbp
E436:	retn
E437:	endbr64
E43B:	push    rbp
E43C:	mov     rbp, rsp
E43F:	mov     edi, 1; flags
E444:	mov     eax, 0
E449:	call    il_region_command
E44E:	mov     rax, cs:il
E455:	mov     dword ptr [rax+10h], 19h
E45C:	nop
E45D:	pop     rbp
E45E:	retn
E45F:	endbr64
E463:	push    rbp
E464:	mov     rbp, rsp
E467:	mov     rax, cs:il
E46E:	mov     rax, [rax+60h]
E472:	test    rax, rax
E475:	jz      short loc_E498
E477:	mov     rax, cs:il
E47E:	mov     rax, [rax+60h]
E482:	mov     rdi, rax; text
E485:	call    il_insert_text
E48A:	mov     rax, cs:il
E491:	mov     dword ptr [rax+10h], 1Ah
E498:	nop
E499:	pop     rbp
E49A:	retn
E49B:	endbr64
E49F:	push    rbp
E4A0:	mov     rbp, rsp
E4A3:	mov     rax, cs:il
E4AA:	mov     rax, [rax+18h]
E4AE:	mov     [rbp+point], eax
E4B1:	mov     rdx, cs:il
E4B8:	mov     rax, cs:il
E4BF:	mov     rdx, [rdx+20h]
E4C3:	mov     [rax+18h], rdx
E4C7:	mov     rax, cs:il
E4CE:	mov     edx, [rbp+point]
E4D1:	movsxd  rdx, edx
E4D4:	mov     [rax+20h], rdx
E4D8:	nop
E4D9:	pop     rbp
E4DA:	retn
E4DB:	endbr64
E4DF:	push    rbp
E4E0:	mov     rbp, rsp
E4E3:	mov     rax, cs:il
E4EA:	mov     rdx, [rax+18h]
E4EE:	mov     rax, cs:il
E4F5:	mov     rax, [rax+40h]
E4F9:	cmp     rdx, rax
E4FC:	jbe     short loc_E51F
E4FE:	mov     rax, cs:il
E505:	mov     rdx, [rax+18h]
E509:	sub     rdx, 1
E50D:	mov     [rax+18h], rdx
E511:	mov     rax, cs:il
E518:	mov     dword ptr [rax+10h], 1
E51F:	nop
E520:	pop     rbp
E521:	retn
E522:	endbr64
E526:	push    rbp
E527:	mov     rbp, rsp
E52A:	mov     rax, cs:il
E531:	mov     rdx, [rax+18h]
E535:	mov     rax, cs:il
E53C:	mov     rax, [rax+38h]
E540:	cmp     rdx, rax
E543:	jnb     short loc_E566
E545:	mov     rax, cs:il
E54C:	mov     rdx, [rax+18h]
E550:	add     rdx, 1
E554:	mov     [rax+18h], rdx
E558:	mov     rax, cs:il
E55F:	mov     dword ptr [rax+10h], 2
E566:	nop
E567:	pop     rbp
E568:	retn
E569:	endbr64
E56D:	push    rbp
E56E:	mov     rbp, rsp
E571:	mov     rax, cs:il
E578:	mov     rdx, [rax+18h]
E57C:	mov     rax, cs:il
E583:	mov     rax, [rax+40h]
E587:	cmp     rdx, rax
E58A:	jbe     loc_E652
E590:	jmp     short loc_E59C
E592:	mov     eax, 0
E597:	call    il_backward_char
E59C:	mov     rax, cs:il
E5A3:	mov     rdx, [rax+18h]
E5A7:	mov     rax, cs:il
E5AE:	mov     rax, [rax+40h]
E5B2:	cmp     rdx, rax
E5B5:	jbe     short loc_E5F6
E5B7:	mov     rax, cs:il
E5BE:	mov     rdx, [rax+58h]
E5C2:	mov     rax, cs:il
E5C9:	mov     rax, [rax+18h]
E5CD:	sub     rax, 1
E5D1:	add     rax, rdx
E5D4:	movzx   eax, byte ptr [rax]
E5D7:	movsx   eax, al
E5DA:	mov     edi, eax; c
E5DC:	mov     eax, 0
E5E1:	call    il_separator
E5E6:	test    eax, eax
E5E8:	jnz     short loc_E592
E5EA:	jmp     short loc_E5F6
E5EC:	mov     eax, 0
E5F1:	call    il_backward_char
E5F6:	mov     rax, cs:il
E5FD:	mov     rdx, [rax+18h]
E601:	mov     rax, cs:il
E608:	mov     rax, [rax+40h]
E60C:	cmp     rdx, rax
E60F:	jbe     short loc_E644
E611:	mov     rax, cs:il
E618:	mov     rdx, [rax+58h]
E61C:	mov     rax, cs:il
E623:	mov     rax, [rax+18h]
E627:	sub     rax, 1
E62B:	add     rax, rdx
E62E:	movzx   eax, byte ptr [rax]
E631:	movsx   eax, al
E634:	mov     edi, eax; c
E636:	mov     eax, 0
E63B:	call    il_separator
E640:	test    eax, eax
E642:	jz      short loc_E5EC
E644:	mov     rax, cs:il
E64B:	mov     dword ptr [rax+10h], 3
E652:	nop
E653:	pop     rbp
E654:	retn
E655:	endbr64
E659:	push    rbp
E65A:	mov     rbp, rsp
E65D:	mov     rax, cs:il
E664:	mov     rdx, [rax+18h]
E668:	mov     rax, cs:il
E66F:	mov     rax, [rax+38h]
E673:	cmp     rdx, rax
E676:	jnb     loc_E736
E67C:	jmp     short loc_E688
E67E:	mov     eax, 0
E683:	call    il_forward_char
E688:	mov     rax, cs:il
E68F:	mov     rdx, [rax+18h]
E693:	mov     rax, cs:il
E69A:	mov     rax, [rax+38h]
E69E:	cmp     rdx, rax
E6A1:	jnb     short loc_E6DE
E6A3:	mov     rax, cs:il
E6AA:	mov     rdx, [rax+58h]
E6AE:	mov     rax, cs:il
E6B5:	mov     rax, [rax+18h]
E6B9:	add     rax, rdx
E6BC:	movzx   eax, byte ptr [rax]
E6BF:	movsx   eax, al
E6C2:	mov     edi, eax; c
E6C4:	mov     eax, 0
E6C9:	call    il_separator
E6CE:	test    eax, eax
E6D0:	jnz     short loc_E67E
E6D2:	jmp     short loc_E6DE
E6D4:	mov     eax, 0
E6D9:	call    il_forward_char
E6DE:	mov     rax, cs:il
E6E5:	mov     rdx, [rax+18h]
E6E9:	mov     rax, cs:il
E6F0:	mov     rax, [rax+38h]
E6F4:	cmp     rdx, rax
E6F7:	jnb     short loc_E728
E6F9:	mov     rax, cs:il
E700:	mov     rdx, [rax+58h]
E704:	mov     rax, cs:il
E70B:	mov     rax, [rax+18h]
E70F:	add     rax, rdx
E712:	movzx   eax, byte ptr [rax]
E715:	movsx   eax, al
E718:	mov     edi, eax; c
E71A:	mov     eax, 0
E71F:	call    il_separator
E724:	test    eax, eax
E726:	jz      short loc_E6D4
E728:	mov     rax, cs:il
E72F:	mov     dword ptr [rax+10h], 4
E736:	nop
E737:	pop     rbp
E738:	retn
E739:	endbr64
E73D:	push    rbp
E73E:	mov     rbp, rsp
E741:	mov     rdx, cs:il
E748:	mov     rax, cs:il
E74F:	mov     rdx, [rdx+40h]
E753:	mov     [rax+18h], rdx
E757:	mov     rax, cs:il
E75E:	mov     dword ptr [rax+10h], 5
E765:	nop
E766:	pop     rbp
E767:	retn
E768:	endbr64
E76C:	push    rbp
E76D:	mov     rbp, rsp
E770:	mov     rdx, cs:il
E777:	mov     rax, cs:il
E77E:	mov     rdx, [rdx+38h]
E782:	mov     [rax+18h], rdx
E786:	mov     rax, cs:il
E78D:	mov     dword ptr [rax+10h], 6
E794:	nop
E795:	pop     rbp
E796:	retn
E797:	endbr64
E79B:	push    rbp
E79C:	mov     rbp, rsp
E79F:	push    rbx
E7A0:	sub     rsp, 18h
E7A4:	mov     [rbp+c], edi
E7A7:	call    ___ctype_b_loc
E7AC:	mov     rdx, [rax]
E7AF:	mov     eax, [rbp+c]
E7B2:	cdqe
E7B4:	add     rax, rax
E7B7:	add     rax, rdx
E7BA:	movzx   eax, word ptr [rax]
E7BD:	movzx   eax, ax
E7C0:	and     eax, 4000h
E7C5:	test    eax, eax
E7C7:	jz      loc_E8FA
E7CD:	mov     rax, cs:il
E7D4:	mov     rax, [rax+38h]
E7D8:	lea     rdx, [rax+1]
E7DC:	mov     rax, cs:il
E7E3:	mov     rax, [rax+50h]
E7E7:	cmp     rdx, rax
E7EA:	jb      short loc_E832
E7EC:	mov     rax, cs:il
E7F3:	mov     rdx, [rax+38h]
E7F7:	mov     rax, cs:il
E7FE:	add     rdx, 21h ; '!'
E802:	mov     [rax+50h], rdx
E806:	mov     rax, cs:il
E80D:	mov     rdx, [rax+50h]
E811:	mov     rax, cs:il
E818:	mov     rax, [rax+58h]
E81C:	mov     rbx, cs:il
E823:	mov     rsi, rdx; n
E826:	mov     rdi, rax; p
E829:	call    xrealloc
E82E:	mov     [rbx+58h], rax
E832:	mov     rax, cs:il
E839:	mov     rdx, [rax+38h]
E83D:	mov     rax, cs:il
E844:	mov     rcx, [rax+18h]
E848:	mov     rax, rdx
E84B:	sub     rax, rcx
E84E:	lea     rdx, [rax+1]; n
E852:	mov     rax, cs:il
E859:	mov     rcx, [rax+58h]
E85D:	mov     rax, cs:il
E864:	mov     rax, [rax+18h]
E868:	add     rcx, rax
E86B:	mov     rax, cs:il
E872:	mov     rsi, [rax+58h]
E876:	mov     rax, cs:il
E87D:	mov     rax, [rax+18h]
E881:	add     rax, 1
E885:	add     rax, rsi
E888:	mov     rsi, rcx; src
E88B:	mov     rdi, rax; dest
E88E:	call    _memmove
E893:	mov     rax, cs:il
E89A:	mov     rdx, [rax+58h]
E89E:	mov     rax, cs:il
E8A5:	mov     rax, [rax+18h]
E8A9:	add     rax, rdx
E8AC:	mov     edx, [rbp+c]
E8AF:	mov     [rax], dl
E8B1:	mov     rax, cs:il
E8B8:	mov     rdx, [rax+18h]
E8BC:	add     rdx, 1
E8C0:	mov     [rax+18h], rdx
E8C4:	mov     rax, cs:il
E8CB:	mov     rdx, [rax+38h]
E8CF:	add     rdx, 1
E8D3:	mov     [rax+38h], rdx
E8D7:	mov     rax, cs:il
E8DE:	mov     rdx, [rax+48h]
E8E2:	add     rdx, 1
E8E6:	mov     [rax+48h], rdx
E8EA:	mov     rax, cs:il
E8F1:	mov     dword ptr [rax+10h], 7
E8F8:	jmp     short loc_E8FB
E8FA:	nop
E8FB:	mov     rbx, [rbp+var_8]
E8FF:	leave
E900:	retn
E901:	endbr64
E905:	push    rbp
E906:	mov     rbp, rsp
E909:	push    rbx
E90A:	sub     rsp, 8
E90E:	mov     rax, cs:il
E915:	mov     rdx, [rax+18h]
E919:	mov     rax, cs:il
E920:	mov     rax, [rax+38h]
E924:	cmp     rdx, rax
E927:	jnb     loc_EA1B
E92D:	mov     rax, cs:il
E934:	mov     rdx, [rax+38h]
E938:	mov     rax, cs:il
E93F:	mov     rcx, [rax+18h]
E943:	mov     rax, rdx
E946:	sub     rax, rcx
E949:	lea     rdx, [rax+1]; n
E94D:	mov     rax, cs:il
E954:	mov     rcx, [rax+58h]
E958:	mov     rax, cs:il
E95F:	mov     rax, [rax+18h]
E963:	add     rax, 1
E967:	add     rcx, rax
E96A:	mov     rax, cs:il
E971:	mov     rsi, [rax+58h]
E975:	mov     rax, cs:il
E97C:	mov     rax, [rax+18h]
E980:	add     rax, rsi
E983:	mov     rsi, rcx; src
E986:	mov     rdi, rax; dest
E989:	call    _memcpy
E98E:	mov     rax, cs:il
E995:	mov     rdx, [rax+38h]
E999:	sub     rdx, 1
E99D:	mov     [rax+38h], rdx
E9A1:	mov     rax, cs:il
E9A8:	mov     rdx, [rax+48h]
E9AC:	sub     rdx, 1
E9B0:	mov     [rax+48h], rdx
E9B4:	mov     rax, cs:il
E9BB:	mov     rax, [rax+38h]
E9BF:	and     eax, 0Fh
E9C2:	test    rax, rax
E9C5:	jnz     short loc_EA0D
E9C7:	mov     rax, cs:il
E9CE:	mov     rdx, [rax+38h]
E9D2:	mov     rax, cs:il
E9D9:	add     rdx, 1
E9DD:	mov     [rax+50h], rdx
E9E1:	mov     rax, cs:il
E9E8:	mov     rdx, [rax+50h]
E9EC:	mov     rax, cs:il
E9F3:	mov     rax, [rax+58h]
E9F7:	mov     rbx, cs:il
E9FE:	mov     rsi, rdx; n
EA01:	mov     rdi, rax; p
EA04:	call    xrealloc
EA09:	mov     [rbx+58h], rax
EA0D:	mov     rax, cs:il
EA14:	mov     dword ptr [rax+10h], 8
EA1B:	nop
EA1C:	mov     rbx, [rbp+var_8]
EA20:	leave
EA21:	retn
EA22:	endbr64
EA26:	push    rbp
EA27:	mov     rbp, rsp
EA2A:	push    rbx
EA2B:	sub     rsp, 8
EA2F:	mov     rax, cs:il
EA36:	mov     rdx, [rax+18h]
EA3A:	mov     rax, cs:il
EA41:	mov     rax, [rax+40h]
EA45:	cmp     rdx, rax
EA48:	jbe     loc_EB4F
EA4E:	mov     rax, cs:il
EA55:	mov     rdx, [rax+38h]
EA59:	mov     rax, cs:il
EA60:	mov     rcx, [rax+18h]
EA64:	mov     rax, rdx
EA67:	sub     rax, rcx
EA6A:	lea     rdx, [rax+1]; n
EA6E:	mov     rax, cs:il
EA75:	mov     rcx, [rax+58h]
EA79:	mov     rax, cs:il
EA80:	mov     rax, [rax+18h]
EA84:	add     rcx, rax
EA87:	mov     rax, cs:il
EA8E:	mov     rsi, [rax+58h]
EA92:	mov     rax, cs:il
EA99:	mov     rax, [rax+18h]
EA9D:	sub     rax, 1
EAA1:	add     rax, rsi
EAA4:	mov     rsi, rcx; src
EAA7:	mov     rdi, rax; dest
EAAA:	call    _memcpy
EAAF:	mov     rax, cs:il
EAB6:	mov     rdx, [rax+18h]
EABA:	sub     rdx, 1
EABE:	mov     [rax+18h], rdx
EAC2:	mov     rax, cs:il
EAC9:	mov     rdx, [rax+38h]
EACD:	sub     rdx, 1
EAD1:	mov     [rax+38h], rdx
EAD5:	mov     rax, cs:il
EADC:	mov     rdx, [rax+48h]
EAE0:	sub     rdx, 1
EAE4:	mov     [rax+48h], rdx
EAE8:	mov     rax, cs:il
EAEF:	mov     rax, [rax+38h]
EAF3:	and     eax, 0Fh
EAF6:	test    rax, rax
EAF9:	jnz     short loc_EB41
EAFB:	mov     rax, cs:il
EB02:	mov     rdx, [rax+38h]
EB06:	mov     rax, cs:il
EB0D:	add     rdx, 1
EB11:	mov     [rax+50h], rdx
EB15:	mov     rax, cs:il
EB1C:	mov     rdx, [rax+50h]
EB20:	mov     rax, cs:il
EB27:	mov     rax, [rax+58h]
EB2B:	mov     rbx, cs:il
EB32:	mov     rsi, rdx; n
EB35:	mov     rdi, rax; p
EB38:	call    xrealloc
EB3D:	mov     [rbx+58h], rax
EB41:	mov     rax, cs:il
EB48:	mov     dword ptr [rax+10h], 9
EB4F:	nop
EB50:	mov     rbx, [rbp+var_8]
EB54:	leave
EB55:	retn
EB56:	endbr64
EB5A:	push    rbp
EB5B:	mov     rbp, rsp
EB5E:	sub     rsp, 10h
EB62:	mov     rax, cs:il
EB69:	mov     rax, [rax+20h]
EB6D:	mov     [rbp+old_mark], rax
EB71:	mov     eax, 0
EB76:	call    il_set_mark
EB7B:	mov     eax, 0
EB80:	call    il_forward_word
EB85:	mov     rax, cs:il
EB8C:	mov     rax, [rax+18h]
EB90:	mov     [rbp+end_of_word], rax
EB94:	mov     edi, 3; flags
EB99:	mov     eax, 0
EB9E:	call    il_region_command
EBA3:	mov     rax, cs:il
EBAA:	mov     rax, [rax+18h]
EBAE:	cmp     [rbp+old_mark], rax
EBB2:	ja      short loc_EBC5
EBB4:	mov     rax, cs:il
EBBB:	mov     rdx, [rbp+old_mark]
EBBF:	mov     [rax+20h], rdx
EBC3:	jmp     short loc_EC0B
EBC5:	mov     rax, [rbp+old_mark]
EBC9:	cmp     rax, [rbp+end_of_word]
EBCD:	jb      short loc_EBF5
EBCF:	mov     rax, cs:il
EBD6:	mov     rax, [rax+18h]
EBDA:	sub     rax, [rbp+end_of_word]
EBDE:	mov     rcx, rax
EBE1:	mov     rax, cs:il
EBE8:	mov     rdx, [rbp+old_mark]
EBEC:	add     rdx, rcx
EBEF:	mov     [rax+20h], rdx
EBF3:	jmp     short loc_EC0B
EBF5:	mov     rdx, cs:il
EBFC:	mov     rax, cs:il
EC03:	mov     rdx, [rdx+18h]
EC07:	mov     [rax+20h], rdx
EC0B:	mov     rax, cs:il
EC12:	mov     dword ptr [rax+10h], 0Ah
EC19:	nop
EC1A:	leave
EC1B:	retn
EC1C:	endbr64
EC20:	push    rbp
EC21:	mov     rbp, rsp
EC24:	sub     rsp, 10h
EC28:	mov     rax, cs:il
EC2F:	mov     rax, [rax+20h]
EC33:	mov     [rbp+old_mark], rax
EC37:	mov     rax, cs:il
EC3E:	mov     rax, [rax+18h]
EC42:	mov     [rbp+old_point], rax
EC46:	mov     eax, 0
EC4B:	call    il_set_mark
EC50:	mov     eax, 0
EC55:	call    il_backward_word
EC5A:	mov     edi, 3; flags
EC5F:	mov     eax, 0
EC64:	call    il_region_command
EC69:	mov     rax, cs:il
EC70:	mov     rax, [rax+18h]
EC74:	cmp     [rbp+old_mark], rax
EC78:	ja      short loc_EC8B
EC7A:	mov     rax, cs:il
EC81:	mov     rdx, [rbp+old_mark]
EC85:	mov     [rax+20h], rdx
EC89:	jmp     short loc_ECD1
EC8B:	mov     rax, [rbp+old_mark]
EC8F:	cmp     rax, [rbp+old_point]
EC93:	jb      short loc_ECBB
EC95:	mov     rax, cs:il
EC9C:	mov     rax, [rax+18h]
ECA0:	sub     rax, [rbp+old_point]
ECA4:	mov     rcx, rax
ECA7:	mov     rax, cs:il
ECAE:	mov     rdx, [rbp+old_mark]
ECB2:	add     rdx, rcx
ECB5:	mov     [rax+20h], rdx
ECB9:	jmp     short loc_ECD1
ECBB:	mov     rdx, cs:il
ECC2:	mov     rax, cs:il
ECC9:	mov     rdx, [rdx+18h]
ECCD:	mov     [rax+20h], rdx
ECD1:	mov     rax, cs:il
ECD8:	mov     dword ptr [rax+10h], 0Bh
ECDF:	nop
ECE0:	leave
ECE1:	retn
ECE2:	endbr64
ECE6:	push    rbp
ECE7:	mov     rbp, rsp
ECEA:	push    rbx
ECEB:	sub     rsp, 8
ECEF:	mov     rax, cs:il
ECF6:	mov     qword ptr [rax+18h], 0
ECFE:	mov     rax, cs:il
ED05:	mov     qword ptr [rax+20h], 0
ED0D:	mov     rax, cs:il
ED14:	mov     qword ptr [rax+38h], 0
ED1C:	mov     rax, cs:il
ED23:	mov     qword ptr [rax+40h], 0
ED2B:	mov     rax, cs:il
ED32:	mov     qword ptr [rax+48h], 0
ED3A:	mov     rax, cs:il
ED41:	mov     qword ptr [rax+50h], 1
ED49:	mov     rax, cs:il
ED50:	mov     rdx, [rax+50h]
ED54:	mov     rax, cs:il
ED5B:	mov     rax, [rax+58h]
ED5F:	mov     rbx, cs:il
ED66:	mov     rsi, rdx; n
ED69:	mov     rdi, rax; p
ED6C:	call    xrealloc
ED71:	mov     [rbx+58h], rax
ED75:	mov     rax, cs:il
ED7C:	mov     rax, [rax+58h]
ED80:	mov     byte ptr [rax], 0
ED83:	mov     rax, cs:il
ED8A:	mov     dword ptr [rax+10h], 0Ch
ED91:	nop
ED92:	mov     rbx, [rbp+var_8]
ED96:	leave
ED97:	retn
ED98:	endbr64
ED9C:	push    rbp
ED9D:	mov     rbp, rsp
EDA0:	sub     rsp, 10h
EDA4:	mov     [rbp+store], edi
EDA7:	mov     eax, 0
EDAC:	call    il_beginning_of_line
EDB1:	mov     eax, 0
EDB6:	call    il_set_mark
EDBB:	mov     eax, 0
EDC0:	call    il_end_of_line
EDC5:	mov     eax, [rbp+store]
EDC8:	or      eax, 2
EDCB:	mov     edi, eax; flags
EDCD:	mov     eax, 0
EDD2:	call    il_region_command
EDD7:	mov     rdx, cs:il
EDDE:	mov     rax, cs:il
EDE5:	mov     rdx, [rdx+18h]
EDE9:	mov     [rax+20h], rdx
EDED:	mov     rax, cs:il
EDF4:	mov     dword ptr [rax+10h], 0Dh
EDFB:	nop
EDFC:	leave
EDFD:	retn
EDFE:	endbr64
EE02:	push    rbp
EE03:	mov     rbp, rsp
EE06:	sub     rsp, 10h
EE0A:	mov     rax, cs:il
EE11:	mov     rdx, [rax+20h]
EE15:	mov     rax, cs:il
EE1C:	mov     rax, [rax+18h]
EE20:	cmp     rdx, rax
EE23:	ja      short loc_EE32
EE25:	mov     rax, cs:il
EE2C:	mov     rax, [rax+40h]
EE30:	jmp     short loc_EE4E
EE32:	mov     rax, cs:il
EE39:	mov     rdx, [rax+20h]
EE3D:	mov     rax, cs:il
EE44:	mov     rcx, [rax+18h]
EE48:	mov     rax, rdx
EE4B:	sub     rax, rcx
EE4E:	mov     [rbp+old_mark], rax
EE52:	mov     eax, 0
EE57:	call    il_set_mark
EE5C:	mov     eax, 0
EE61:	call    il_beginning_of_line
EE66:	mov     edi, 3; flags
EE6B:	mov     eax, 0
EE70:	call    il_region_command
EE75:	mov     rax, cs:il
EE7C:	mov     rdx, [rax+38h]
EE80:	mov     rcx, cs:il
EE87:	mov     rax, [rbp+old_mark]
EE8B:	cmp     rdx, rax
EE8E:	cmovbe  rax, rdx
EE92:	mov     [rcx+20h], rax
EE96:	mov     rax, cs:il
EE9D:	mov     dword ptr [rax+10h], 0Eh
EEA4:	nop
EEA5:	leave
EEA6:	retn
EEA7:	endbr64
EEAB:	push    rbp
EEAC:	mov     rbp, rsp
EEAF:	sub     rsp, 10h
EEB3:	mov     rax, cs:il
EEBA:	mov     rax, [rax+20h]
EEBE:	mov     [rbp+old_mark], rax
EEC2:	mov     eax, 0
EEC7:	call    il_set_mark
EECC:	mov     eax, 0
EED1:	call    il_end_of_line
EED6:	mov     edi, 3; flags
EEDB:	mov     eax, 0
EEE0:	call    il_region_command
EEE5:	mov     rax, cs:il
EEEC:	mov     rdx, [rax+38h]
EEF0:	mov     rcx, cs:il
EEF7:	mov     rax, [rbp+old_mark]
EEFB:	cmp     rdx, rax
EEFE:	cmovbe  rax, rdx
EF02:	mov     [rcx+20h], rax
EF06:	mov     rax, cs:il
EF0D:	mov     dword ptr [rax+10h], 0Fh
EF14:	nop
EF15:	leave
EF16:	retn
EF17:	endbr64
EF1B:	push    rbp
EF1C:	mov     rbp, rsp
EF1F:	mov     rax, cs:il
EF26:	mov     rdx, [rax+58h]
EF2A:	mov     rax, cs:il
EF31:	mov     rax, [rax+18h]
EF35:	add     rax, rdx
EF38:	movzx   eax, byte ptr [rax]
EF3B:	cmp     al, 20h ; ' '
EF3D:	jnz     short loc_EF61
EF3F:	mov     eax, 0
EF44:	call    il_delete_horizontal_space
EF49:	mov     edi, 20h ; ' '; c
EF4E:	call    il_insert_char
EF53:	mov     rax, cs:il
EF5A:	mov     dword ptr [rax+10h], 10h
EF61:	nop
EF62:	pop     rbp
EF63:	retn
EF64:	endbr64
EF68:	push    rbp
EF69:	mov     rbp, rsp
EF6C:	mov     rax, cs:il
EF73:	mov     rdx, [rax+58h]
EF77:	mov     rax, cs:il
EF7E:	mov     rax, [rax+18h]
EF82:	add     rax, rdx
EF85:	movzx   eax, byte ptr [rax]
EF88:	cmp     al, 20h ; ' '
EF8A:	jnz     short loc_F006
EF8C:	jmp     short loc_EF98
EF8E:	mov     eax, 0
EF93:	call    il_delete_char
EF98:	mov     rax, cs:il
EF9F:	mov     rdx, [rax+58h]
EFA3:	mov     rax, cs:il
EFAA:	mov     rax, [rax+18h]
EFAE:	add     rax, rdx
EFB1:	movzx   eax, byte ptr [rax]
EFB4:	cmp     al, 20h ; ' '
EFB6:	jz      short loc_EF8E
EFB8:	jmp     short loc_EFC4
EFBA:	mov     eax, 0
EFBF:	call    il_backward_delete_char
EFC4:	mov     rax, cs:il
EFCB:	mov     rax, [rax+48h]
EFCF:	test    rax, rax
EFD2:	jz      short loc_EFF8
EFD4:	mov     rax, cs:il
EFDB:	mov     rdx, [rax+58h]
EFDF:	mov     rax, cs:il
EFE6:	mov     rax, [rax+18h]
EFEA:	sub     rax, 1
EFEE:	add     rax, rdx
EFF1:	movzx   eax, byte ptr [rax]
EFF4:	cmp     al, 20h ; ' '
EFF6:	jz      short loc_EFBA
EFF8:	mov     rax, cs:il
EFFF:	mov     dword ptr [rax+10h], 11h
F006:	nop
F007:	pop     rbp
F008:	retn
F009:	endbr64
F00D:	push    rbp
F00E:	mov     rbp, rsp
F011:	sub     rsp, 10h
F015:	mov     rax, cs:il
F01C:	mov     rdx, [rax+18h]
F020:	mov     rax, cs:il
F027:	mov     rax, [rax+38h]
F02B:	cmp     rdx, rax
F02E:	jnb     short loc_F0AC
F030:	mov     rax, cs:il
F037:	mov     rax, [rax+18h]
F03B:	mov     [rbp+previous_point], rax
F03F:	mov     eax, 0
F044:	call    il_forward_word
F049:	mov     rax, [rbp+previous_point]
F04D:	mov     [rbp+i], rax
F051:	jmp     short loc_F08D
F053:	mov     rax, cs:il
F05A:	mov     rdx, [rax+58h]
F05E:	mov     rax, [rbp+i]
F062:	add     rax, rdx
F065:	movzx   eax, byte ptr [rax]
F068:	movsx   eax, al
F06B:	mov     edi, eax; c
F06D:	call    _tolower
F072:	mov     edx, eax
F074:	mov     rax, cs:il
F07B:	mov     rcx, [rax+58h]
F07F:	mov     rax, [rbp+i]
F083:	add     rax, rcx
F086:	mov     [rax], dl
F088:	add     [rbp+i], 1
F08D:	mov     rax, cs:il
F094:	mov     rax, [rax+18h]
F098:	cmp     [rbp+i], rax
F09C:	jb      short loc_F053
F09E:	mov     rax, cs:il
F0A5:	mov     dword ptr [rax+10h], 12h
F0AC:	nop
F0AD:	leave
F0AE:	retn
F0AF:	endbr64
F0B3:	push    rbp
F0B4:	mov     rbp, rsp
F0B7:	sub     rsp, 10h
F0BB:	mov     rax, cs:il
F0C2:	mov     rdx, [rax+18h]
F0C6:	mov     rax, cs:il
F0CD:	mov     rax, [rax+38h]
F0D1:	cmp     rdx, rax
F0D4:	jnb     short loc_F152
F0D6:	mov     rax, cs:il
F0DD:	mov     rax, [rax+18h]
F0E1:	mov     [rbp+previous_point], rax
F0E5:	mov     eax, 0
F0EA:	call    il_forward_word
F0EF:	mov     rax, [rbp+previous_point]
F0F3:	mov     [rbp+i], rax
F0F7:	jmp     short loc_F133
F0F9:	mov     rax, cs:il
F100:	mov     rdx, [rax+58h]
F104:	mov     rax, [rbp+i]
F108:	add     rax, rdx
F10B:	movzx   eax, byte ptr [rax]
F10E:	movsx   eax, al
F111:	mov     edi, eax; c
F113:	call    _toupper
F118:	mov     edx, eax
F11A:	mov     rax, cs:il
F121:	mov     rcx, [rax+58h]
F125:	mov     rax, [rbp+i]
F129:	add     rax, rcx
F12C:	mov     [rax], dl
F12E:	add     [rbp+i], 1
F133:	mov     rax, cs:il
F13A:	mov     rax, [rax+18h]
F13E:	cmp     [rbp+i], rax
F142:	jb      short loc_F0F9
F144:	mov     rax, cs:il
F14B:	mov     dword ptr [rax+10h], 13h
F152:	nop
F153:	leave
F154:	retn
F155:	endbr64
F159:	push    rbp
F15A:	mov     rbp, rsp
F15D:	sub     rsp, 20h
F161:	mov     rax, cs:il
F168:	mov     rdx, [rax+18h]
F16C:	mov     rax, cs:il
F173:	mov     rax, [rax+38h]
F177:	cmp     rdx, rax
F17A:	jnb     loc_F282
F180:	mov     [rbp+first], 1
F187:	mov     rax, cs:il
F18E:	mov     rax, [rax+18h]
F192:	mov     [rbp+previous_point], rax
F196:	mov     eax, 0
F19B:	call    il_forward_word
F1A0:	mov     rax, [rbp+previous_point]
F1A4:	mov     [rbp+i], rax
F1A8:	jmp     loc_F25F
F1AD:	call    ___ctype_b_loc
F1B2:	mov     rdx, [rax]
F1B5:	mov     rax, cs:il
F1BC:	mov     rcx, [rax+58h]
F1C0:	mov     rax, [rbp+i]
F1C4:	add     rax, rcx
F1C7:	movzx   eax, byte ptr [rax]
F1CA:	movsx   rax, al
F1CE:	add     rax, rax
F1D1:	add     rax, rdx
F1D4:	movzx   eax, word ptr [rax]
F1D7:	movzx   eax, ax
F1DA:	and     eax, 8
F1DD:	test    eax, eax
F1DF:	jz      short loc_F25A
F1E1:	cmp     [rbp+first], 0
F1E5:	jz      short loc_F225
F1E7:	mov     rax, cs:il
F1EE:	mov     rdx, [rax+58h]
F1F2:	mov     rax, [rbp+i]
F1F6:	add     rax, rdx
F1F9:	movzx   eax, byte ptr [rax]
F1FC:	movsx   eax, al
F1FF:	mov     edi, eax; c
F201:	call    _toupper
F206:	mov     edx, eax
F208:	mov     rax, cs:il
F20F:	mov     rcx, [rax+58h]
F213:	mov     rax, [rbp+i]
F217:	add     rax, rcx
F21A:	mov     [rax], dl
F21C:	mov     [rbp+first], 0
F223:	jmp     short loc_F25A
F225:	mov     rax, cs:il
F22C:	mov     rdx, [rax+58h]
F230:	mov     rax, [rbp+i]
F234:	add     rax, rdx
F237:	movzx   eax, byte ptr [rax]
F23A:	movsx   eax, al
F23D:	mov     edi, eax; c
F23F:	call    _tolower
F244:	mov     edx, eax
F246:	mov     rax, cs:il
F24D:	mov     rcx, [rax+58h]
F251:	mov     rax, [rbp+i]
F255:	add     rax, rcx
F258:	mov     [rax], dl
F25A:	add     [rbp+i], 1
F25F:	mov     rax, cs:il
F266:	mov     rax, [rax+18h]
F26A:	cmp     [rbp+i], rax
F26E:	jb      loc_F1AD
F274:	mov     rax, cs:il
F27B:	mov     dword ptr [rax+10h], 14h
F282:	nop
F283:	leave
F284:	retn
F285:	endbr64
F289:	push    rbp
F28A:	mov     rbp, rsp
F28D:	push    rbx
F28E:	sub     rsp, 28h
F292:	mov     [rbp+static_text], rdi
F296:	mov     rax, [rbp+static_text]
F29A:	mov     rdi, rax; s
F29D:	call    _strlen
F2A2:	mov     [rbp+len], rax
F2A6:	mov     rax, cs:il
F2AD:	mov     rdx, [rax+18h]
F2B1:	mov     rax, cs:il
F2B8:	mov     rcx, [rax+40h]
F2BC:	mov     rax, [rbp+len]
F2C0:	sub     rax, rcx
F2C3:	mov     rsi, rax
F2C6:	mov     rax, cs:il
F2CD:	add     rdx, rsi
F2D0:	mov     [rax+18h], rdx
F2D4:	mov     rax, cs:il
F2DB:	mov     rdx, [rax+20h]
F2DF:	mov     rax, cs:il
F2E6:	mov     rcx, [rax+40h]
F2EA:	mov     rax, [rbp+len]
F2EE:	sub     rax, rcx
F2F1:	mov     rsi, rax
F2F4:	mov     rax, cs:il
F2FB:	add     rdx, rsi
F2FE:	mov     [rax+20h], rdx
F302:	mov     rax, cs:il
F309:	mov     rdx, [rax+48h]
F30D:	mov     rax, [rbp+len]
F311:	add     rax, rdx
F314:	lea     rdx, [rax+1]
F318:	mov     rax, cs:il
F31F:	mov     rax, [rax+50h]
F323:	cmp     rdx, rax
F326:	jbe     short loc_F375
F328:	mov     rax, cs:il
F32F:	mov     rdx, [rax+48h]
F333:	mov     rax, [rbp+len]
F337:	add     rdx, rax
F33A:	mov     rax, cs:il
F341:	add     rdx, 1
F345:	mov     [rax+50h], rdx
F349:	mov     rax, cs:il
F350:	mov     rdx, [rax+50h]
F354:	mov     rax, cs:il
F35B:	mov     rax, [rax+58h]
F35F:	mov     rbx, cs:il
F366:	mov     rsi, rdx; n
F369:	mov     rdi, rax; p
F36C:	call    xrealloc
F371:	mov     [rbx+58h], rax
F375:	mov     rax, cs:il
F37C:	mov     rax, [rax+48h]
F380:	lea     rdx, [rax+1]; n
F384:	mov     rax, cs:il
F38B:	mov     rcx, [rax+58h]
F38F:	mov     rax, cs:il
F396:	mov     rax, [rax+40h]
F39A:	add     rcx, rax
F39D:	mov     rax, cs:il
F3A4:	mov     rsi, [rax+58h]
F3A8:	mov     rax, [rbp+len]
F3AC:	add     rax, rsi
F3AF:	mov     rsi, rcx; src
F3B2:	mov     rdi, rax; dest
F3B5:	call    _memmove
F3BA:	mov     rax, cs:il
F3C1:	mov     rax, [rax+58h]
F3C5:	mov     rdx, [rbp+len]; n
F3C9:	mov     rcx, [rbp+static_text]
F3CD:	mov     rsi, rcx; src
F3D0:	mov     rdi, rax; dest
F3D3:	call    _memcpy
F3D8:	mov     rax, cs:il
F3DF:	mov     rax, [rax+58h]
F3E3:	mov     rdx, [rbp+len]
F3E7:	mov     rsi, rdx; length
F3EA:	mov     rdi, rax; string
F3ED:	call    toprintable
F3F2:	mov     rax, cs:il
F3F9:	mov     rdx, [rbp+len]
F3FD:	mov     [rax+40h], rdx
F401:	mov     rcx, [rax+40h]
F405:	mov     rax, cs:il
F40C:	mov     rdx, [rax+48h]
F410:	mov     rax, cs:il
F417:	add     rdx, rcx
F41A:	mov     [rax+38h], rdx
F41E:	mov     rax, cs:il
F425:	mov     dword ptr [rax+10h], 15h
F42C:	nop
F42D:	mov     rbx, [rbp+var_8]
F431:	leave
F432:	retn
F433:	endbr64
F437:	push    rbp
F438:	mov     rbp, rsp
F43B:	push    rbx
F43C:	sub     rsp, 28h
F440:	mov     [rbp+text], rdi
F444:	cmp     [rbp+text], 0
F449:	jz      loc_F5F2
F44F:	mov     rax, [rbp+text]
F453:	mov     rdi, rax; s
F456:	call    _strlen
F45B:	mov     [rbp+len], rax
F45F:	mov     rax, cs:il
F466:	mov     rdx, [rax+38h]
F46A:	mov     rax, [rbp+len]
F46E:	add     rax, rdx
F471:	lea     rdx, [rax+1]
F475:	mov     rax, cs:il
F47C:	mov     rax, [rax+50h]
F480:	cmp     rdx, rax
F483:	jbe     short loc_F4D2
F485:	mov     rax, cs:il
F48C:	mov     rdx, [rax+50h]
F490:	mov     rax, [rbp+len]
F494:	add     rdx, rax
F497:	mov     rax, cs:il
F49E:	add     rdx, 21h ; '!'
F4A2:	mov     [rax+50h], rdx
F4A6:	mov     rax, cs:il
F4AD:	mov     rdx, [rax+50h]
F4B1:	mov     rax, cs:il
F4B8:	mov     rax, [rax+58h]
F4BC:	mov     rbx, cs:il
F4C3:	mov     rsi, rdx; n
F4C6:	mov     rdi, rax; p
F4C9:	call    xrealloc
F4CE:	mov     [rbx+58h], rax
F4D2:	mov     rax, cs:il
F4D9:	mov     rdx, [rax+38h]
F4DD:	mov     rax, cs:il
F4E4:	mov     rcx, [rax+18h]
F4E8:	mov     rax, rdx
F4EB:	sub     rax, rcx
F4EE:	lea     rdx, [rax+1]; n
F4F2:	mov     rax, cs:il
F4F9:	mov     rcx, [rax+58h]
F4FD:	mov     rax, cs:il
F504:	mov     rax, [rax+18h]
F508:	add     rcx, rax
F50B:	mov     rax, cs:il
F512:	mov     rsi, [rax+58h]
F516:	mov     rax, cs:il
F51D:	mov     rdi, [rax+18h]
F521:	mov     rax, [rbp+len]
F525:	add     rax, rdi
F528:	add     rax, rsi
F52B:	mov     rsi, rcx; src
F52E:	mov     rdi, rax; dest
F531:	call    _memmove
F536:	mov     rax, cs:il
F53D:	mov     rdx, [rax+58h]
F541:	mov     rax, cs:il
F548:	mov     rax, [rax+18h]
F54C:	lea     rcx, [rdx+rax]
F550:	mov     rdx, [rbp+len]; n
F554:	mov     rax, [rbp+text]
F558:	mov     rsi, rax; src
F55B:	mov     rdi, rcx; dest
F55E:	call    _memcpy
F563:	mov     rax, cs:il
F56A:	mov     rdx, [rax+58h]
F56E:	mov     rax, cs:il
F575:	mov     rax, [rax+18h]
F579:	add     rdx, rax
F57C:	mov     rax, [rbp+len]
F580:	mov     rsi, rax; length
F583:	mov     rdi, rdx; string
F586:	call    toprintable
F58B:	mov     rax, cs:il
F592:	mov     rcx, [rax+18h]
F596:	mov     rax, cs:il
F59D:	mov     rdx, [rbp+len]
F5A1:	add     rdx, rcx
F5A4:	mov     [rax+18h], rdx
F5A8:	mov     rax, cs:il
F5AF:	mov     rcx, [rax+38h]
F5B3:	mov     rax, cs:il
F5BA:	mov     rdx, [rbp+len]
F5BE:	add     rdx, rcx
F5C1:	mov     [rax+38h], rdx
F5C5:	mov     rax, cs:il
F5CC:	mov     rcx, [rax+48h]
F5D0:	mov     rax, cs:il
F5D7:	mov     rdx, [rbp+len]
F5DB:	add     rdx, rcx
F5DE:	mov     [rax+48h], rdx
F5E2:	mov     rax, cs:il
F5E9:	mov     dword ptr [rax+10h], 16h
F5F0:	jmp     short loc_F5F3
F5F2:	nop
F5F3:	mov     rbx, [rbp+var_8]
F5F7:	leave
F5F8:	retn
F5F9:	endbr64
F5FD:	push    rbp
F5FE:	mov     rbp, rsp
F601:	mov     rax, cs:il
F608:	mov     rax, [rax+40h]
F60C:	mov     [rbp+normal_static_length], eax
F60F:	mov     rax, cs:il
F616:	mov     rcx, [rax+58h]
F61A:	mov     rax, cs:il
F621:	mov     rdx, [rax+40h]
F625:	mov     rax, cs:il
F62C:	add     rdx, rcx
F62F:	mov     [rax+58h], rdx
F633:	mov     rax, cs:il
F63A:	mov     rdx, [rax+38h]
F63E:	mov     rax, cs:il
F645:	mov     rcx, [rax+40h]
F649:	mov     rax, cs:il
F650:	sub     rdx, rcx
F653:	mov     [rax+38h], rdx
F657:	mov     rax, cs:il
F65E:	mov     rdx, [rax+18h]
F662:	mov     rax, cs:il
F669:	mov     rcx, [rax+40h]
F66D:	mov     rax, cs:il
F674:	sub     rdx, rcx
F677:	mov     [rax+18h], rdx
F67B:	mov     rax, cs:il
F682:	mov     rdx, [rax+20h]
F686:	mov     rax, cs:il
F68D:	mov     rcx, [rax+40h]
F691:	mov     rax, cs:il
F698:	sub     rdx, rcx
F69B:	mov     [rax+20h], rdx
F69F:	mov     rax, cs:il
F6A6:	mov     qword ptr [rax+40h], 0
F6AE:	mov     eax, [rbp+normal_static_length]
F6B1:	pop     rbp
F6B2:	retn
F6B3:	endbr64
F6B7:	push    rbp
F6B8:	mov     rbp, rsp
F6BB:	mov     [rbp+normal_static_length], edi
F6BE:	mov     rax, cs:il
F6C5:	mov     edx, [rbp+normal_static_length]
F6C8:	movsxd  rdx, edx
F6CB:	mov     [rax+40h], rdx
F6CF:	mov     rax, cs:il
F6D6:	mov     rdx, [rax+58h]
F6DA:	mov     rax, cs:il
F6E1:	mov     rax, [rax+40h]
F6E5:	neg     rax
F6E8:	mov     rcx, rax
F6EB:	mov     rax, cs:il
F6F2:	add     rdx, rcx
F6F5:	mov     [rax+58h], rdx
F6F9:	mov     rax, cs:il
F700:	mov     rcx, [rax+38h]
F704:	mov     rax, cs:il
F70B:	mov     rdx, [rax+40h]
F70F:	mov     rax, cs:il
F716:	add     rdx, rcx
F719:	mov     [rax+38h], rdx
F71D:	mov     rax, cs:il
F724:	mov     rcx, [rax+18h]
F728:	mov     rax, cs:il
F72F:	mov     rdx, [rax+40h]
F733:	mov     rax, cs:il
F73A:	add     rdx, rcx
F73D:	mov     [rax+18h], rdx
F741:	mov     rax, cs:il
F748:	mov     rcx, [rax+20h]
F74C:	mov     rax, cs:il
F753:	mov     rdx, [rax+40h]
F757:	mov     rax, cs:il
F75E:	add     rdx, rcx
F761:	mov     [rax+20h], rdx
F765:	nop
F766:	pop     rbp
F767:	retn
F768:	endbr64
F76C:	push    rbp
F76D:	mov     rbp, rsp
F770:	sub     rsp, 20h
F774:	mov     [rbp+normal_static_length], 0
F77C:	mov     rax, cs:il
F783:	mov     rdx, [rax+28h]
F787:	mov     rax, cs:il
F78E:	mov     rax, [rax+40h]
F792:	add     rax, 3
F796:	cmp     rdx, rax
F799:	setb    al
F79C:	movzx   eax, al
F79F:	mov     [rbp+il_too_small], eax
F7A2:	mov     rax, cs:il
F7A9:	mov     eax, [rax+0Ch]
F7AC:	test    eax, eax
F7AE:	jz      short loc_F7B8
F7B0:	mov     edx, cs:InputLineColors+10h
F7B6:	jmp     short loc_F7BE
F7B8:	mov     edx, cs:InputLineColors+4; background
F7BE:	mov     rax, cs:il
F7C5:	mov     eax, [rax+0Ch]
F7C8:	test    eax, eax
F7CA:	jz      short loc_F7D4
F7CC:	mov     ecx, cs:InputLineColors+0Ch
F7D2:	jmp     short loc_F7DA
F7D4:	mov     ecx, cs:InputLineColors
F7DA:	mov     rax, cs:il
F7E1:	mov     eax, [rax+0Ch]
F7E4:	test    eax, eax
F7E6:	jz      short loc_F7F0
F7E8:	mov     eax, cs:InputLineColors+14h
F7EE:	jmp     short loc_F7F6
F7F0:	mov     eax, cs:InputLineColors+8
F7F6:	mov     esi, ecx; foreground
F7F8:	mov     edi, eax; brightness
F7FA:	call    tty_colors
F7FF:	cmp     [rbp+il_too_small], 0
F803:	jz      short loc_F815
F805:	mov     eax, 0
F80A:	call    il_hide_static
F80F:	cdqe
F811:	mov     [rbp+normal_static_length], rax
F815:	mov     eax, 0
F81A:	call    il_compute_scroll
F81F:	mov     [rbp+scroll], eax
F822:	mov     rax, cs:il
F829:	mov     rdx, [rax+18h]
F82D:	mov     rax, cs:il
F834:	mov     rax, [rax+28h]
F838:	cmp     rdx, rax
F83B:	jb      short loc_F898
F83D:	mov     rax, cs:il
F844:	mov     rdx, [rax+18h]
F848:	mov     rax, cs:il
F84F:	mov     rax, [rax+28h]
F853:	sub     rdx, rax
F856:	mov     eax, [rbp+scroll]
F859:	sub     eax, 1
F85C:	cdqe
F85E:	lea     rsi, [rdx+rax]
F862:	mov     rax, cs:il
F869:	mov     rdx, [rax+18h]
F86D:	mov     rax, cs:il
F874:	mov     rcx, [rax+28h]
F878:	mov     rax, rdx
F87B:	sub     rax, rcx
F87E:	mov     edx, [rbp+scroll]
F881:	movsxd  rcx, edx
F884:	mov     edx, 0
F889:	div     rcx
F88C:	mov     rax, rsi
F88F:	sub     rax, rdx
F892:	add     rax, 1
F896:	jmp     short loc_F89D
F898:	mov     eax, 0
F89D:	mov     [rbp+len], rax
F8A1:	mov     rax, cs:il
F8A8:	mov     rax, [rax+18h]
F8AC:	mov     edx, eax
F8AE:	mov     rax, [rbp+len]
F8B2:	mov     ecx, eax
F8B4:	mov     eax, edx
F8B6:	sub     eax, ecx
F8B8:	mov     edx, eax; x
F8BA:	mov     rax, cs:il
F8C1:	mov     rax, [rax]
F8C4:	mov     esi, 0; y
F8C9:	mov     rdi, rax; window
F8CC:	call    window_goto
F8D1:	cmp     [rbp+il_too_small], 0
F8D5:	jz      short loc_F8E8
F8D7:	mov     rax, [rbp+normal_static_length]
F8DB:	mov     rdi, rax; normal_static_length
F8DE:	mov     eax, 0
F8E3:	call    il_restore_static
F8E8:	nop
F8E9:	leave
F8EA:	retn
F8EB:	endbr64
F8EF:	push    rbp
F8F0:	mov     rbp, rsp
F8F3:	sub     rsp, 30h
F8F7:	mov     rax, fs:28h
F900:	mov     [rbp+var_8], rax
F904:	xor     eax, eax
F906:	mov     [rbp+normal_static_length], 0
F90E:	mov     rax, cs:il
F915:	mov     rdx, [rax+28h]
F919:	mov     rax, cs:il
F920:	mov     rax, [rax+40h]
F924:	add     rax, 3
F928:	cmp     rdx, rax
F92B:	setb    al
F92E:	movzx   eax, al
F931:	mov     [rbp+il_too_small], eax
F934:	lea     rax, [rbp+status]
F938:	mov     rdi, rax; status
F93B:	call    tty_save
F940:	mov     rax, cs:il
F947:	mov     eax, [rax+0Ch]
F94A:	test    eax, eax
F94C:	jz      short loc_F956
F94E:	mov     edx, cs:InputLineColors+10h
F954:	jmp     short loc_F95C
F956:	mov     edx, cs:InputLineColors+4; background
F95C:	mov     rax, cs:il
F963:	mov     eax, [rax+0Ch]
F966:	test    eax, eax
F968:	jz      short loc_F972
F96A:	mov     ecx, cs:InputLineColors+0Ch
F970:	jmp     short loc_F978
F972:	mov     ecx, cs:InputLineColors
F978:	mov     rax, cs:il
F97F:	mov     eax, [rax+0Ch]
F982:	test    eax, eax
F984:	jz      short loc_F98E
F986:	mov     eax, cs:InputLineColors+14h
F98C:	jmp     short loc_F994
F98E:	mov     eax, cs:InputLineColors+8
F994:	mov     esi, ecx; foreground
F996:	mov     edi, eax; brightness
F998:	call    tty_colors
F99D:	cmp     [rbp+il_too_small], 0
F9A1:	jz      short loc_F9B3
F9A3:	mov     eax, 0
F9A8:	call    il_hide_static
F9AD:	cdqe
F9AF:	mov     [rbp+normal_static_length], rax
F9B3:	mov     eax, 0
F9B8:	call    il_compute_scroll
F9BD:	mov     [rbp+scroll], eax
F9C0:	mov     rax, cs:il
F9C7:	mov     rdx, [rax+18h]
F9CB:	mov     rax, cs:il
F9D2:	mov     rax, [rax+28h]
F9D6:	cmp     rdx, rax
F9D9:	jb      short loc_FA30
F9DB:	mov     rax, cs:il
F9E2:	mov     rax, [rax+18h]
F9E6:	mov     edx, eax
F9E8:	mov     rax, cs:il
F9EF:	mov     rax, [rax+28h]
F9F3:	sub     edx, eax
F9F5:	mov     eax, [rbp+scroll]
F9F8:	lea     esi, [rdx+rax]
F9FB:	mov     rax, cs:il
FA02:	mov     rdx, [rax+18h]
FA06:	mov     rax, cs:il
FA0D:	mov     rcx, [rax+28h]
FA11:	mov     rax, rdx
FA14:	sub     rax, rcx
FA17:	mov     edx, [rbp+scroll]
FA1A:	movsxd  rcx, edx
FA1D:	mov     edx, 0
FA22:	div     rcx
FA25:	mov     rax, rdx
FA28:	mov     edx, eax
FA2A:	mov     eax, esi
FA2C:	sub     eax, edx
FA2E:	jmp     short loc_FA35
FA30:	mov     eax, 0
FA35:	mov     [rbp+len], eax
FA38:	mov     rax, cs:il
FA3F:	mov     rax, [rax+28h]
FA43:	mov     rdi, rax; n
FA46:	call    xmalloc
FA4B:	mov     [rbp+temp], rax
FA4F:	mov     rax, cs:il
FA56:	mov     rdx, [rax+28h]; n
FA5A:	mov     rax, [rbp+temp]
FA5E:	mov     esi, 20h ; ' '; c
FA63:	mov     rdi, rax; s
FA66:	call    _memset
FA6B:	mov     rax, cs:il
FA72:	mov     eax, [rax+8]
FA75:	test    eax, eax
FA77:	jz      short loc_FAF1
FA79:	mov     rax, cs:il
FA80:	mov     rdx, [rax+38h]
FA84:	mov     rax, cs:il
FA8B:	mov     rcx, [rax+40h]
FA8F:	mov     rax, rdx
FA92:	sub     rax, rcx
FA95:	mov     ecx, [rbp+len]
FA98:	sub     rax, rcx
FA9B:	mov     rdx, rax
FA9E:	mov     rax, cs:il
FAA5:	mov     rcx, [rax+28h]
FAA9:	mov     rax, cs:il
FAB0:	mov     rsi, [rax+40h]
FAB4:	mov     rax, rcx
FAB7:	sub     rax, rsi
FABA:	cmp     rdx, rax
FABD:	cmova   rdx, rax; n
FAC1:	mov     rax, cs:il
FAC8:	mov     rcx, [rax+58h]
FACC:	mov     rax, cs:il
FAD3:	mov     rsi, [rax+40h]
FAD7:	mov     eax, [rbp+len]
FADA:	add     rax, rsi
FADD:	add     rcx, rax
FAE0:	mov     rax, [rbp+temp]
FAE4:	mov     rsi, rcx; src
FAE7:	mov     rdi, rax; dest
FAEA:	call    _memcpy
FAEF:	jmp     short loc_FB4A
FAF1:	mov     rax, cs:il
FAF8:	mov     rdx, [rax+38h]
FAFC:	mov     rax, cs:il
FB03:	mov     rcx, [rax+40h]
FB07:	mov     rax, rdx
FB0A:	sub     rax, rcx
FB0D:	mov     ecx, [rbp+len]
FB10:	sub     rax, rcx
FB13:	mov     rdx, rax
FB16:	mov     rax, cs:il
FB1D:	mov     rcx, [rax+28h]
FB21:	mov     rax, cs:il
FB28:	mov     rsi, [rax+40h]
FB2C:	mov     rax, rcx
FB2F:	sub     rax, rsi
FB32:	cmp     rdx, rax
FB35:	cmova   rdx, rax; n
FB39:	mov     rax, [rbp+temp]
FB3D:	mov     esi, 2Ah ; '*'; c
FB42:	mov     rdi, rax; s
FB45:	call    _memset
FB4A:	mov     rax, cs:il
FB51:	mov     rax, [rax]
FB54:	mov     edx, 0; x
FB59:	mov     esi, 0; y
FB5E:	mov     rdi, rax; window
FB61:	call    window_goto
FB66:	cmp     [rbp+il_too_small], 0
FB6A:	jnz     short loc_FB99
FB6C:	mov     rax, cs:il
FB73:	mov     rax, [rax+40h]
FB77:	mov     edx, eax; length
FB79:	mov     rax, cs:il
FB80:	mov     rcx, [rax+58h]
FB84:	mov     rax, cs:il
FB8B:	mov     rax, [rax]
FB8E:	mov     rsi, rcx; str
FB91:	mov     rdi, rax; window
FB94:	call    window_puts
FB99:	mov     rax, cs:il
FBA0:	mov     rax, [rax+28h]
FBA4:	mov     edx, eax
FBA6:	mov     rax, cs:il
FBAD:	mov     rax, [rax+40h]
FBB1:	mov     ecx, eax
FBB3:	mov     eax, edx
FBB5:	sub     eax, ecx
FBB7:	mov     edx, eax; length
FBB9:	mov     rax, cs:il
FBC0:	mov     rax, [rax]
FBC3:	mov     rcx, [rbp+temp]
FBC7:	mov     rsi, rcx; str
FBCA:	mov     rdi, rax; window
FBCD:	call    window_puts
FBD2:	mov     rax, cs:il
FBD9:	mov     rax, [rax+18h]
FBDD:	sub     eax, [rbp+len]
FBE0:	mov     edx, eax; x
FBE2:	mov     rax, cs:il
FBE9:	mov     rax, [rax]
FBEC:	mov     esi, 0; y
FBF1:	mov     rdi, rax; window
FBF4:	call    window_goto
FBF9:	cmp     [rbp+il_too_small], 0
FBFD:	jz      short loc_FC10
FBFF:	mov     rax, [rbp+normal_static_length]
FC03:	mov     rdi, rax; normal_static_length
FC06:	mov     eax, 0
FC0B:	call    il_restore_static
FC10:	mov     rax, [rbp+temp]
FC14:	mov     rdi, rax; pointer
FC17:	call    xfree
FC1C:	lea     rax, [rbp+status]
FC20:	mov     rdi, rax; status
FC23:	call    tty_restore
FC28:	nop
FC29:	mov     rax, [rbp+var_8]
FC2D:	sub     rax, fs:28h
FC36:	jz      short locret_FC3D
FC38:	call    ___stack_chk_fail
FC3D:	leave
FC3E:	retn
FC3F:	endbr64
FC43:	push    rbp
FC44:	mov     rbp, rsp
FC47:	sub     rsp, 10h
FC4B:	mov     [rbp+dest], rdi
FC4F:	mov     rax, cs:il
FC56:	mov     rax, [rax+48h]
FC5A:	lea     rdx, [rax+1]
FC5E:	mov     rax, [rbp+dest]
FC62:	mov     rax, [rax]
FC65:	mov     rsi, rdx; n
FC68:	mov     rdi, rax; p
FC6B:	call    xrealloc
FC70:	mov     rdx, [rbp+dest]
FC74:	mov     [rdx], rax
FC77:	mov     rax, cs:il
FC7E:	mov     rax, [rax+48h]
FC82:	lea     rdx, [rax+1]; n
FC86:	mov     rax, cs:il
FC8D:	mov     rcx, [rax+58h]
FC91:	mov     rax, cs:il
FC98:	mov     rax, [rax+40h]
FC9C:	add     rcx, rax
FC9F:	mov     rax, [rbp+dest]
FCA3:	mov     rax, [rax]
FCA6:	mov     rsi, rcx; src
FCA9:	mov     rdi, rax; dest
FCAC:	call    _memcpy
FCB1:	mov     rax, cs:il
FCB8:	mov     rax, [rax+48h]
FCBC:	leave
FCBD:	retn
FCBE:	endbr64
FCC2:	push    rbp
FCC3:	mov     rbp, rsp
FCC6:	sub     rsp, 10h
FCCA:	mov     [rbp+message], rdi
FCCE:	mov     eax, 0
FCD3:	call    il_reset_line
FCD8:	cmp     [rbp+message], 0
FCDD:	jz      short loc_FCE5
FCDF:	mov     rax, [rbp+message]
FCE3:	jmp     short loc_FCEC
FCE5:	lea     rax, aWait_0; 'Wait....'
FCEC:	mov     rdi, rax; static_text
FCEF:	call    il_set_static_text
FCF4:	mov     eax, 0
FCF9:	call    il_update
FCFE:	mov     eax, 0
FD03:	call    il_update_point
FD08:	nop
FD09:	leave
FD0A:	retn
FD0B:	endbr64
FD0F:	push    rbp
FD10:	mov     rbp, rsp
FD13:	mov     [rbp+flag], edi
FD16:	mov     rax, cs:il
FD1D:	mov     edx, [rbp+flag]
FD20:	mov     [rax+0Ch], edx
FD23:	nop
FD24:	pop     rbp
FD25:	retn
FD26:	endbr64
FD2A:	push    rbp
FD2B:	mov     rbp, rsp
FD2E:	push    rbx
FD2F:	sub     rsp, 28h
FD33:	mov     [rbp+dir], edi
FD36:	cmp     [rbp+dir], 2
FD3A:	jz      loc_FE8E
FD40:	cmp     [rbp+dir], 2
FD44:	jg      loc_10098
FD4A:	cmp     [rbp+dir], 0
FD4E:	jz      loc_FFCA
FD54:	cmp     [rbp+dir], 1
FD58:	jnz     loc_10098
FD5E:	mov     eax, cs:browsing_1
FD64:	test    eax, eax
FD66:	jnz     short loc_FD82
FD68:	mov     cs:browsing_1, 1
FD72:	mov     eax, 0
FD77:	call    where_history
FD7C:	mov     cs:last_history_position_0, eax
FD82:	mov     eax, 0
FD87:	call    previous_history
FD8C:	mov     [rbp+hist], rax
FD90:	cmp     [rbp+hist], 0
FD95:	jz      loc_1009B
FD9B:	mov     rax, [rbp+hist]
FD9F:	mov     rax, [rax]
FDA2:	mov     rbx, cs:il
FDA9:	mov     rdi, rax; s
FDAC:	call    _strlen
FDB1:	mov     [rbx+48h], rax
FDB5:	mov     rax, cs:il
FDBC:	mov     rcx, [rax+40h]
FDC0:	mov     rax, cs:il
FDC7:	mov     rdx, [rax+48h]
FDCB:	mov     rax, cs:il
FDD2:	add     rdx, rcx
FDD5:	mov     [rax+38h], rdx
FDD9:	mov     rdx, cs:il
FDE0:	mov     rax, cs:il
FDE7:	mov     rdx, [rdx+38h]
FDEB:	mov     [rax+18h], rdx
FDEF:	mov     rax, cs:il
FDF6:	mov     rax, [rax+38h]
FDFA:	lea     rdx, [rax+1]
FDFE:	mov     rax, cs:il
FE05:	mov     rax, [rax+50h]
FE09:	cmp     rdx, rax
FE0C:	jbe     short loc_FE54
FE0E:	mov     rax, cs:il
FE15:	mov     rdx, [rax+38h]
FE19:	mov     rax, cs:il
FE20:	add     rdx, 1
FE24:	mov     [rax+50h], rdx
FE28:	mov     rax, cs:il
FE2F:	mov     rdx, [rax+50h]
FE33:	mov     rax, cs:il
FE3A:	mov     rax, [rax+58h]
FE3E:	mov     rbx, cs:il
FE45:	mov     rsi, rdx; n
FE48:	mov     rdi, rax; p
FE4B:	call    xrealloc
FE50:	mov     [rbx+58h], rax
FE54:	mov     rax, [rbp+hist]
FE58:	mov     rax, [rax]
FE5B:	mov     rdx, cs:il
FE62:	mov     rcx, [rdx+58h]
FE66:	mov     rdx, cs:il
FE6D:	mov     rdx, [rdx+40h]
FE71:	add     rdx, rcx
FE74:	mov     rsi, rax; src
FE77:	mov     rdi, rdx; dest
FE7A:	call    _strcpy
FE7F:	mov     eax, 0
FE84:	call    il_update
FE89:	jmp     loc_1009B
FE8E:	mov     eax, cs:browsing_1
FE94:	test    eax, eax
FE96:	jnz     short loc_FEB2
FE98:	mov     cs:browsing_1, 1
FEA2:	mov     eax, 0
FEA7:	call    where_history
FEAC:	mov     cs:last_history_position_0, eax
FEB2:	mov     eax, 0
FEB7:	call    next_history
FEBC:	mov     [rbp+hist], rax
FEC0:	cmp     [rbp+hist], 0
FEC5:	jz      loc_FFB1
FECB:	mov     rax, [rbp+hist]
FECF:	mov     rax, [rax]
FED2:	mov     rbx, cs:il
FED9:	mov     rdi, rax; s
FEDC:	call    _strlen
FEE1:	mov     [rbx+48h], rax
FEE5:	mov     rax, cs:il
FEEC:	mov     rcx, [rax+40h]
FEF0:	mov     rax, cs:il
FEF7:	mov     rdx, [rax+48h]
FEFB:	mov     rax, cs:il
FF02:	add     rdx, rcx
FF05:	mov     [rax+38h], rdx
FF09:	mov     rdx, cs:il
FF10:	mov     rax, cs:il
FF17:	mov     rdx, [rdx+38h]
FF1B:	mov     [rax+18h], rdx
FF1F:	mov     rax, cs:il
FF26:	mov     rax, [rax+38h]
FF2A:	lea     rdx, [rax+1]
FF2E:	mov     rax, cs:il
FF35:	mov     rax, [rax+50h]
FF39:	cmp     rdx, rax
FF3C:	jbe     short loc_FF84
FF3E:	mov     rax, cs:il
FF45:	mov     rdx, [rax+38h]
FF49:	mov     rax, cs:il
FF50:	add     rdx, 1
FF54:	mov     [rax+50h], rdx
FF58:	mov     rax, cs:il
FF5F:	mov     rdx, [rax+50h]
FF63:	mov     rax, cs:il
FF6A:	mov     rax, [rax+58h]
FF6E:	mov     rbx, cs:il
FF75:	mov     rsi, rdx; n
FF78:	mov     rdi, rax; p
FF7B:	call    xrealloc
FF80:	mov     [rbx+58h], rax
FF84:	mov     rax, [rbp+hist]
FF88:	mov     rax, [rax]
FF8B:	mov     rdx, cs:il
FF92:	mov     rcx, [rdx+58h]
FF96:	mov     rdx, cs:il
FF9D:	mov     rdx, [rdx+40h]
FFA1:	add     rdx, rcx
FFA4:	mov     rsi, rax; src
FFA7:	mov     rdi, rdx; dest
FFAA:	call    _strcpy
FFAF:	jmp     short loc_FFBB
FFB1:	mov     edi, 0; store
FFB6:	call    il_kill_line
FFBB:	mov     eax, 0
FFC0:	call    il_update
FFC5:	jmp     loc_1009C
FFCA:	mov     eax, cs:browsing_1
FFD0:	test    eax, eax
FFD2:	jz      short loc_FFF0
FFD4:	mov     eax, cs:last_history_position_0
FFDA:	mov     edi, eax; pos
FFDC:	mov     eax, 0
FFE1:	call    history_set_pos
FFE6:	mov     cs:browsing_1, 0
FFF0:	mov     eax, 0
FFF5:	call    previous_history
FFFA:	mov     [rbp+hist], rax
FFFE:	cmp     [rbp+hist], 0
10003:	jz      short loc_10066
10005:	mov     rax, [rbp+hist]
10009:	mov     rax, [rax]
1000C:	mov     rdx, cs:il
10013:	mov     rcx, [rdx+58h]
10017:	mov     rdx, cs:il
1001E:	mov     rdx, [rdx+40h]
10022:	add     rdx, rcx
10025:	mov     rsi, rax; s2
10028:	mov     rdi, rdx; s1
1002B:	call    _strcmp
10030:	test    eax, eax
10032:	jz      short loc_1008C
10034:	mov     rax, cs:il
1003B:	mov     rdx, [rax+58h]
1003F:	mov     rax, cs:il
10046:	mov     rax, [rax+40h]
1004A:	add     rax, rdx
1004D:	mov     rdi, rax; string
10050:	mov     eax, 0
10055:	call    add_history
1005A:	mov     eax, 0
1005F:	call    next_history
10064:	jmp     short loc_1008C
10066:	mov     rax, cs:il
1006D:	mov     rdx, [rax+58h]
10071:	mov     rax, cs:il
10078:	mov     rax, [rax+40h]
1007C:	add     rax, rdx
1007F:	mov     rdi, rax; string
10082:	mov     eax, 0
10087:	call    add_history
1008C:	mov     eax, 0
10091:	call    next_history
10096:	jmp     short loc_1009C
10098:	nop
10099:	jmp     short loc_1009C
1009B:	nop
1009C:	nop
1009D:	mov     rbx, [rbp+var_8]
100A1:	leave
100A2:	retn
100A3:	endbr64
100A7:	push    rbp
100A8:	mov     rbp, rsp
100AB:	sub     rsp, 10h
100AF:	mov     [rbp+default_message], rdi
100B3:	mov     eax, cs:AnsiColors
100B9:	test    eax, eax
100BB:	jz      short loc_100C6
100BD:	lea     rax, color_section; '[GITFM-Color]'
100C4:	jmp     short loc_100CD
100C6:	lea     rax, monochrome_section; '[GITFM-Monochrome]'
100CD:	mov     rdi, rax; section
100D0:	call    use_section
100D5:	mov     edx, 9; fields_no
100DA:	lea     rax, StatusBarFields
100E1:	mov     rsi, rax; colorset_name
100E4:	lea     rax, StatusBarColors
100EB:	mov     rdi, rax; charset
100EE:	call    get_colorset_var
100F3:	mov     rax, [rbp+default_message]
100F7:	mov     rdi, rax; string
100FA:	call    xstrdup
100FF:	mov     cs:status_default_message, rax
10106:	mov     rax, cs:status_default_message
1010D:	mov     rdi, rax; s
10110:	call    _strlen
10115:	mov     rdx, rax
10118:	mov     rax, cs:status_default_message
1011F:	mov     rsi, rdx; length
10122:	mov     rdi, rax; string
10125:	call    toprintable
1012A:	mov     eax, 0
1012F:	call    window_init
10134:	mov     cs:status_window, rax
1013B:	lea     rax, u
10142:	mov     rdi, rax; name
10145:	call    _uname
1014A:	nop
1014B:	leave
1014C:	retn
1014D:	endbr64
10151:	push    rbp
10152:	mov     rbp, rsp
10155:	mov     rax, cs:status_window
1015C:	mov     rdi, rax; window
1015F:	call    mprRemoveSignalHandler
10164:	nop
10165:	pop     rbp
10166:	retn
10167:	endbr64
1016B:	push    rbp
1016C:	mov     rbp, rsp
1016F:	sub     rsp, 10h
10173:	mov     [rbp+columns], rdi
10177:	mov     [rbp+line], rsi
1017B:	mov     rax, cs:status_buffer
10182:	test    rax, rax
10185:	jz      short loc_10196
10187:	mov     rax, cs:status_buffer
1018E:	mov     rdi, rax; pointer
10191:	call    xfree
10196:	mov     rax, [rbp+columns]
1019A:	mov     rdi, rax; n
1019D:	call    xmalloc
101A2:	mov     cs:status_buffer, rax
101A9:	mov     rax, [rbp+columns]
101AD:	mov     ecx, eax
101AF:	mov     rax, [rbp+line]
101B3:	mov     edx, eax; y
101B5:	mov     rax, cs:status_window
101BC:	mov     r8d, ecx; columns
101BF:	mov     ecx, 1; lines
101C4:	mov     esi, 0; x
101C9:	mov     rdi, rax; window
101CC:	call    window_resize
101D1:	nop
101D2:	leave
101D3:	retn
101D4:	endbr64
101D8:	push    rbp
101D9:	mov     rbp, rsp
101DC:	sub     rsp, 60h
101E0:	mov     rax, fs:28h
101E9:	mov     [rbp+var_8], rax
101ED:	xor     eax, eax
101EF:	mov     rax, cs:status_window
101F6:	mov     eax, [rax+0Ch]
101F9:	movsxd  rdx, eax; n
101FC:	mov     rax, cs:status_buffer
10203:	mov     esi, 20h ; ' '; c
10208:	mov     rdi, rax; s
1020B:	call    _memset
10210:	mov     rax, cs:status_message
10217:	mov     rdi, rax; s
1021A:	call    _strlen
1021F:	add     rax, 1
10223:	mov     [rbp+temp_msg_len], rax
10227:	mov     rax, [rbp+temp_msg_len]
1022B:	mov     rdi, rax; n
1022E:	call    xmalloc
10233:	mov     [rbp+temp_msg], rax
10237:	mov     [rbp+i], 0
1023E:	mov     [rbp+j], 0
10245:	jmp     loc_1059D
1024A:	mov     rdx, cs:status_message
10251:	mov     eax, [rbp+i]
10254:	cdqe
10256:	add     rax, rdx
10259:	movzx   eax, byte ptr [rax]
1025C:	cmp     al, 5Ch ; ''
1025E:	jnz     loc_10515
10264:	mov     rdx, cs:status_message
1026B:	mov     eax, [rbp+i]
1026E:	cdqe
10270:	add     rax, 1
10274:	add     rax, rdx
10277:	movzx   eax, byte ptr [rax]
1027A:	movsx   eax, al
1027D:	test    eax, eax
1027F:	jz      loc_104B3
10285:	test    eax, eax
10287:	js      def_102CB; jumptable 00000000000102CB default case, cases 93-99,101-103,105-108,110-114
1028D:	cmp     eax, 73h ; 's'
10290:	jg      def_102CB; jumptable 00000000000102CB default case, cases 93-99,101-103,105-108,110-114
10296:	cmp     eax, 5Ch ; ''
10299:	jl      def_102CB; jumptable 00000000000102CB default case, cases 93-99,101-103,105-108,110-114
1029F:	sub     eax, 5Ch ; ''; switch 24 cases
102A2:	cmp     eax, 17h
102A5:	ja      def_102CB; jumptable 00000000000102CB default case, cases 93-99,101-103,105-108,110-114
102AB:	mov     eax, eax
102AD:	lea     rdx, ds:0[rax*4]
102B5:	lea     rax, jpt_102CB
102BC:	mov     eax, ds:(jpt_102CB - 28120h)[rdx+rax]
102BF:	cdqe
102C1:	lea     rdx, jpt_102CB
102C8:	add     rax, rdx
102CB:	jmp     rax; switch jump
102CE:	lea     rax, u.nodename; jumptable 00000000000102CB case 104
102D5:	mov     [rbp+ptr], rax
102D9:	jmp     short get_system_info
102DB:	lea     rax, u; jumptable 00000000000102CB case 115
102E2:	mov     [rbp+ptr], rax
102E6:	jmp     short get_system_info
102E8:	lea     rax, u.machine; jumptable 00000000000102CB case 109
102EF:	mov     [rbp+ptr], rax
102F3:	mov     rax, [rbp+ptr]
102F7:	movzx   eax, byte ptr [rax]
102FA:	test    al, al
102FC:	jz      short loc_10350
102FE:	mov     rax, [rbp+ptr]
10302:	mov     rdi, rax; s
10305:	call    _strlen
1030A:	mov     [rbp+len], rax
1030E:	mov     rax, [rbp+len]
10312:	add     [rbp+temp_msg_len], rax
10316:	mov     rdx, [rbp+temp_msg_len]
1031A:	mov     rax, [rbp+temp_msg]
1031E:	mov     rsi, rdx; n
10321:	mov     rdi, rax; p
10324:	call    xrealloc
10329:	mov     [rbp+temp_msg], rax
1032D:	mov     eax, [rbp+j]
10330:	movsxd  rdx, eax
10333:	mov     rax, [rbp+temp_msg]
10337:	lea     rcx, [rdx+rax]
1033B:	mov     rdx, [rbp+len]; n
1033F:	mov     rax, [rbp+ptr]
10343:	mov     rsi, rax; src
10346:	mov     rdi, rcx; dest
10349:	call    _memcpy
1034E:	jmp     short loc_1039E
10350:	mov     [rbp+len], 6
10358:	mov     rax, [rbp+len]
1035C:	add     [rbp+temp_msg_len], rax
10360:	mov     rdx, [rbp+temp_msg_len]
10364:	mov     rax, [rbp+temp_msg]
10368:	mov     rsi, rdx; n
1036B:	mov     rdi, rax; p
1036E:	call    xrealloc
10373:	mov     [rbp+temp_msg], rax
10377:	mov     eax, [rbp+j]
1037A:	movsxd  rdx, eax
1037D:	mov     rax, [rbp+temp_msg]
10381:	lea     rcx, [rdx+rax]
10385:	mov     rax, [rbp+len]
10389:	mov     rdx, rax; n
1038C:	lea     rax, aNone; '(none)'
10393:	mov     rsi, rax; src
10396:	mov     rdi, rcx; dest
10399:	call    _memcpy
1039E:	mov     rax, [rbp+len]
103A2:	mov     edx, eax
103A4:	mov     eax, [rbp+j]
103A7:	add     eax, edx
103A9:	mov     [rbp+j], eax
103AC:	add     [rbp+i], 1
103B0:	jmp     loc_10599
103B5:	mov     eax, 0; jumptable 00000000000102CB case 100
103BA:	call    get_local_time
103BF:	mov     [rbp+time], rax
103C3:	mov     rax, [rbp+time]
103C7:	mov     eax, [rax+14h]
103CA:	lea     edi, [rax+76Ch]
103D0:	mov     rax, [rbp+time]
103D4:	mov     esi, [rax+0Ch]
103D7:	mov     rax, [rbp+time]
103DB:	mov     eax, [rax+10h]
103DE:	cdqe
103E0:	lea     rdx, ds:0[rax*8]
103E8:	lea     rax, month_name
103EF:	mov     rcx, [rdx+rax]
103F3:	mov     rax, [rbp+time]
103F7:	mov     eax, [rax+18h]
103FA:	cdqe
103FC:	lea     rdx, ds:0[rax*8]
10404:	lea     rax, day_name
1040B:	mov     rdx, [rdx+rax]
1040F:	lea     rax, [rbp+date_str]
10413:	mov     r9d, edi
10416:	mov     r8d, esi
10419:	lea     rsi, aSS02dD; '%s %s %02d %d'
10420:	mov     rdi, rax; s
10423:	mov     eax, 0
10428:	call    _sprintf
1042D:	lea     rax, [rbp+date_str]
10431:	mov     rdi, rax; s
10434:	call    _strlen
10439:	mov     [rbp+len], rax
1043D:	mov     rax, [rbp+len]
10441:	add     [rbp+temp_msg_len], rax
10445:	mov     rdx, [rbp+temp_msg_len]
10449:	mov     rax, [rbp+temp_msg]
1044D:	mov     rsi, rdx; n
10450:	mov     rdi, rax; p
10453:	call    xrealloc
10458:	mov     [rbp+temp_msg], rax
1045C:	mov     eax, [rbp+j]
1045F:	movsxd  rdx, eax
10462:	mov     rax, [rbp+temp_msg]
10466:	lea     rcx, [rdx+rax]
1046A:	mov     rdx, [rbp+len]; n
1046E:	lea     rax, [rbp+date_str]
10472:	mov     rsi, rax; src
10475:	mov     rdi, rcx; dest
10478:	call    _memcpy
1047D:	mov     rax, [rbp+len]
10481:	mov     edx, eax
10483:	mov     eax, [rbp+j]
10486:	add     eax, edx
10488:	mov     [rbp+j], eax
1048B:	add     [rbp+i], 1
1048F:	jmp     loc_10599
10494:	mov     eax, [rbp+j]; jumptable 00000000000102CB case 92
10497:	lea     edx, [rax+1]
1049A:	mov     [rbp+j], edx
1049D:	movsxd  rdx, eax
104A0:	mov     rax, [rbp+temp_msg]
104A4:	add     rax, rdx
104A7:	mov     byte ptr [rax], 5Ch ; ''
104AA:	add     [rbp+i], 1
104AE:	jmp     loc_10599
104B3:	mov     eax, [rbp+j]
104B6:	lea     edx, [rax+1]
104B9:	mov     [rbp+j], edx
104BC:	movsxd  rdx, eax
104BF:	mov     rax, [rbp+temp_msg]
104C3:	add     rax, rdx
104C6:	mov     byte ptr [rax], 5Ch ; ''
104C9:	jmp     loc_10599
104CE:	mov     eax, [rbp+j]; jumptable 00000000000102CB default case, cases 93-99,101-103,105-108,110-114
104D1:	lea     edx, [rax+1]
104D4:	mov     [rbp+j], edx
104D7:	movsxd  rdx, eax
104DA:	mov     rax, [rbp+temp_msg]
104DE:	add     rax, rdx
104E1:	mov     byte ptr [rax], 5Ch ; ''
104E4:	mov     rdx, cs:status_message
104EB:	add     [rbp+i], 1
104EF:	mov     eax, [rbp+i]
104F2:	cdqe
104F4:	lea     rcx, [rdx+rax]
104F8:	mov     eax, [rbp+j]
104FB:	lea     edx, [rax+1]
104FE:	mov     [rbp+j], edx
10501:	movsxd  rdx, eax
10504:	mov     rax, [rbp+temp_msg]
10508:	add     rdx, rax
1050B:	movzx   eax, byte ptr [rcx]
1050E:	mov     [rdx], al
10510:	jmp     loc_10599
10515:	mov     rdx, cs:status_message
1051C:	mov     eax, [rbp+i]
1051F:	cdqe
10521:	add     rax, rdx
10524:	movzx   eax, byte ptr [rax]
10527:	cmp     al, 9
10529:	jnz     short loc_10571
1052B:	add     [rbp+temp_msg_len], 8
10530:	mov     rdx, [rbp+temp_msg_len]
10534:	mov     rax, [rbp+temp_msg]
10538:	mov     rsi, rdx; n
1053B:	mov     rdi, rax; p
1053E:	call    xrealloc
10543:	mov     [rbp+temp_msg], rax
10547:	mov     eax, [rbp+j]
1054A:	movsxd  rdx, eax
1054D:	mov     rax, [rbp+temp_msg]
10551:	add     rax, rdx
10554:	mov     edx, 8; n
10559:	lea     rcx, asc_28116; '        '
10560:	mov     rsi, rcx; src
10563:	mov     rdi, rax; dest
10566:	call    _memcpy
1056B:	add     [rbp+j], 8
1056F:	jmp     short loc_10599
10571:	mov     rdx, cs:status_message
10578:	mov     eax, [rbp+i]
1057B:	cdqe
1057D:	lea     rcx, [rdx+rax]
10581:	mov     eax, [rbp+j]
10584:	lea     edx, [rax+1]
10587:	mov     [rbp+j], edx
1058A:	movsxd  rdx, eax
1058D:	mov     rax, [rbp+temp_msg]
10591:	add     rdx, rax
10594:	movzx   eax, byte ptr [rcx]
10597:	mov     [rdx], al
10599:	add     [rbp+i], 1
1059D:	mov     rdx, cs:status_message
105A4:	mov     eax, [rbp+i]
105A7:	cdqe
105A9:	add     rax, rdx
105AC:	movzx   eax, byte ptr [rax]
105AF:	test    al, al
105B1:	jnz     loc_1024A
105B7:	mov     eax, [rbp+j]
105BA:	movsxd  rdx, eax
105BD:	mov     rax, [rbp+temp_msg]
105C1:	add     rax, rdx
105C4:	mov     byte ptr [rax], 0
105C7:	mov     rax, [rbp+temp_msg]
105CB:	mov     rdi, rax; s
105CE:	call    _strlen
105D3:	mov     [rbp+len], rax
105D7:	movzx   eax, cs:status_alignment
105DE:	test    al, al
105E0:	jnz     short loc_10629
105E2:	mov     rax, [rbp+len]
105E6:	mov     edx, eax
105E8:	mov     rax, cs:status_window
105EF:	mov     eax, [rax+0Ch]
105F2:	cmp     edx, eax
105F4:	jge     short loc_10629
105F6:	mov     rdx, cs:status_buffer
105FD:	mov     rax, cs:status_window
10604:	mov     eax, [rax+0Ch]
10607:	cdqe
10609:	sub     rax, [rbp+len]
1060D:	shr     rax, 1
10610:	lea     rcx, [rdx+rax]
10614:	mov     rdx, [rbp+len]; n
10618:	mov     rax, [rbp+temp_msg]
1061C:	mov     rsi, rax; src
1061F:	mov     rdi, rcx; dest
10622:	call    _memcpy
10627:	jmp     short loc_10657
10629:	mov     rax, [rbp+len]
1062D:	mov     edx, eax
1062F:	mov     rax, cs:status_window
10636:	mov     eax, [rax+0Ch]
10639:	cmp     edx, eax
1063B:	cmovle  eax, edx
1063E:	movsxd  rdx, eax; n
10641:	mov     rax, cs:status_buffer
10648:	mov     rcx, [rbp+temp_msg]
1064C:	mov     rsi, rcx; src
1064F:	mov     rdi, rax; dest
10652:	call    _memcpy
10657:	mov     rax, [rbp+temp_msg]
1065B:	mov     rdi, rax; pointer
1065E:	call    xfree
10663:	mov     [rbp+i], 0
1066A:	jmp     short loc_106AE
1066C:	mov     rdx, cs:status_buffer
10673:	mov     eax, [rbp+i]
10676:	cdqe
10678:	add     rax, rdx
1067B:	movzx   eax, byte ptr [rax]
1067E:	cmp     al, 0Dh
10680:	jz      short loc_10698
10682:	mov     rdx, cs:status_buffer
10689:	mov     eax, [rbp+i]
1068C:	cdqe
1068E:	add     rax, rdx
10691:	movzx   eax, byte ptr [rax]
10694:	cmp     al, 0Ah
10696:	jnz     short loc_106AA
10698:	mov     rdx, cs:status_buffer
1069F:	mov     eax, [rbp+i]
106A2:	cdqe
106A4:	add     rax, rdx
106A7:	mov     byte ptr [rax], 20h ; ' '
106AA:	add     [rbp+i], 1
106AE:	mov     rax, cs:status_window
106B5:	mov     eax, [rax+0Ch]
106B8:	cmp     [rbp+i], eax
106BB:	jl      short loc_1066C
106BD:	nop
106BE:	mov     rax, [rbp+var_8]
106C2:	sub     rax, fs:28h
106CB:	jz      short locret_106D2
106CD:	call    ___stack_chk_fail
106D2:	leave
106D3:	retn
106D4:	endbr64
106D8:	push    rbp
106D9:	mov     rbp, rsp
106DC:	sub     rsp, 10h
106E0:	mov     rax, fs:28h
106E9:	mov     [rbp+var_8], rax
106ED:	xor     eax, eax
106EF:	lea     rax, [rbp+status]
106F3:	mov     rdi, rax; status
106F6:	call    tty_save
106FB:	mov     eax, 0
10700:	call    build_message
10705:	movzx   eax, cs:status_type
1070C:	movsx   eax, al
1070F:	cmp     eax, 1
10712:	jz      short loc_1071B
10714:	cmp     eax, 2
10717:	jz      short loc_10738
10719:	jmp     short loc_10755
1071B:	mov     edx, cs:StatusBarColors+10h; background
10721:	mov     ecx, cs:StatusBarColors+0Ch
10727:	mov     eax, cs:StatusBarColors+14h
1072D:	mov     esi, ecx; foreground
1072F:	mov     edi, eax; brightness
10731:	call    tty_colors
10736:	jmp     short loc_10771
10738:	mov     edx, cs:StatusBarColors+1Ch; background
1073E:	mov     ecx, cs:StatusBarColors+18h
10744:	mov     eax, cs:StatusBarColors+20h
1074A:	mov     esi, ecx; foreground
1074C:	mov     edi, eax; brightness
1074E:	call    tty_colors
10753:	jmp     short loc_10771
10755:	mov     edx, cs:StatusBarColors+4; background
1075B:	mov     ecx, cs:StatusBarColors
10761:	mov     eax, cs:StatusBarColors+8
10767:	mov     esi, ecx; foreground
10769:	mov     edi, eax; brightness
1076B:	call    tty_colors
10770:	nop
10771:	mov     rax, cs:status_window
10778:	mov     edx, 0; x
1077D:	mov     esi, 0; y
10782:	mov     rdi, rax; window
10785:	call    window_goto
1078A:	mov     rax, cs:status_window
10791:	mov     edx, [rax+0Ch]; length
10794:	mov     rcx, cs:status_buffer
1079B:	mov     rax, cs:status_window
107A2:	mov     rsi, rcx; str
107A5:	mov     rdi, rax; window
107A8:	call    window_puts
107AD:	lea     rax, [rbp+status]
107B1:	mov     rdi, rax; status
107B4:	call    tty_restore
107B9:	nop
107BA:	mov     rax, [rbp+var_8]
107BE:	sub     rax, fs:28h
107C7:	jz      short locret_107CE
107C9:	call    ___stack_chk_fail
107CE:	leave
107CF:	retn
107D0:	endbr64
107D4:	push    rbp
107D5:	mov     rbp, rsp
107D8:	sub     rsp, 10h
107DC:	mov     [rbp+message], rdi
107E0:	mov     [rbp+type], esi
107E3:	mov     [rbp+alignment], edx
107E6:	mov     rax, cs:status_message
107ED:	test    rax, rax
107F0:	jz      short loc_10801
107F2:	mov     rax, cs:status_message
107F9:	mov     rdi, rax; pointer
107FC:	call    xfree
10801:	mov     rax, [rbp+message]
10805:	mov     rdi, rax; string
10808:	call    xstrdup
1080D:	mov     cs:status_message, rax
10814:	mov     rax, cs:status_message
1081B:	mov     rdi, rax; s
1081E:	call    _strlen
10823:	mov     rdx, rax
10826:	mov     rax, cs:status_message
1082D:	mov     rsi, rdx; length
10830:	mov     rdi, rax; string
10833:	call    toprintable
10838:	mov     eax, [rbp+type]
1083B:	mov     cs:status_type, al
10841:	mov     eax, [rbp+alignment]
10844:	mov     cs:status_alignment, al
1084A:	mov     eax, 0
1084F:	call    status_update
10854:	nop
10855:	leave
10856:	retn
10857:	endbr64
1085B:	push    rbp
1085C:	mov     rbp, rsp
1085F:	mov     rax, cs:status_default_message
10866:	mov     rdi, rax; string
10869:	call    xstrdup
1086E:	mov     edx, 0; alignment
10873:	mov     esi, 0; type
10878:	mov     rdi, rax; message
1087B:	call    status
10880:	nop
10881:	pop     rbp
10882:	retn
10883:	endbr64
10887:	push    rbp
10888:	mov     rbp, rsp
1088B:	mov     [rbp+a], rdi
1088F:	mov     [rbp+b], rsi
10893:	mov     rax, [rbp+a]
10897:	mov     eax, [rax]
10899:	mov     [rbp+tmp], eax
1089C:	mov     rax, [rbp+b]
108A0:	mov     edx, [rax]
108A2:	mov     rax, [rbp+a]
108A6:	mov     [rax], edx
108A8:	mov     rax, [rbp+b]
108AC:	mov     edx, [rbp+tmp]
108AF:	mov     [rax], edx
108B1:	nop
108B2:	pop     rbp
108B3:	retn
108B4:	endbr64
108B8:	push    rbp
108B9:	mov     rbp, rsp
108BC:	sub     rsp, 20h
108C0:	mov     [rbp+path], rdi
108C4:	mov     edi, 98h; n
108C9:	call    xmalloc
108CE:	mov     [rbp+this], rax
108D2:	mov     rax, [rbp+this]
108D6:	mov     dword ptr [rax+58h], 0
108DD:	mov     rax, [rbp+this]
108E1:	mov     dword ptr [rax+5Ch], 0
108E8:	mov     rax, [rbp+this]
108EC:	mov     dword ptr [rax+60h], 1
108F3:	mov     rax, [rbp+this]
108F7:	mov     dword ptr [rax+64h], 1
108FE:	mov     rax, [rbp+this]
10902:	mov     byte ptr [rax+6Ch], 0
10906:	mov     rax, [rbp+this]
1090A:	mov     dword ptr [rax+68h], 0
10911:	mov     rax, [rbp+this]
10915:	mov     dword ptr [rax+70h], 0
1091C:	mov     rax, [rbp+this]
10920:	mov     dword ptr [rax+50h], 0FFFFFFFFh
10927:	mov     rax, [rbp+this]
1092B:	mov     dword ptr [rax+84h], 0
10935:	mov     rax, [rbp+this]
10939:	mov     edx, [rax+84h]
1093F:	mov     rax, [rbp+this]
10943:	mov     [rax+80h], edx
10949:	mov     rax, [rbp+this]
1094D:	mov     dword ptr [rax+28h], 0
10954:	mov     rax, [rbp+this]
10958:	mov     dword ptr [rax+2Ch], 0
1095F:	mov     rax, [rbp+this]
10963:	mov     dword ptr [rax+14h], 3FFFFFFFh
1096A:	mov     rax, [rbp+this]
1096E:	mov     qword ptr [rax+20h], 0
10976:	mov     rax, [rbp+this]
1097A:	mov     qword ptr [rax], 0
10981:	mov     rax, [rbp+this]
10985:	mov     qword ptr [rax+48h], 0
1098D:	mov     rax, [rbp+this]
10991:	mov     byte ptr [rax+6Dh], 1
10995:	mov     rax, [rbp+this]
10999:	mov     dword ptr [rax+88h], 1
109A3:	mov     rax, [rbp+this]
109A7:	mov     dword ptr [rax+8Ch], 0
109B1:	mov     rax, [rbp+this]
109B5:	mov     dword ptr [rax+74h], 0
109BC:	mov     rax, [rbp+this]
109C0:	mov     dword ptr [rax+10h], 0
109C7:	mov     rax, [rbp+this]
109CB:	mov     qword ptr [rax+38h], 0
109D3:	mov     rax, [rbp+path]
109D7:	mov     rdi, rax; path
109DA:	call    _chdir
109DF:	cmp     eax, 0FFFFFFFFh
109E2:	jnz     short loc_109F3
109E4:	lea     rax, aChdirFailedPer; '`chdir' failed: permission denied'
109EB:	mov     rdi, rax; postmsg
109EE:	call    fatal
109F3:	mov     eax, 0
109F8:	call    xgetcwd
109FD:	mov     rdx, [rbp+this]
10A01:	mov     [rdx+18h], rax
10A05:	mov     rax, [rbp+this]
10A09:	mov     rax, [rax+18h]
10A0D:	test    rax, rax
10A10:	jnz     short loc_10A21
10A12:	lea     rax, aGetcwdFailedPe_0; '`getcwd' failed: permission denied'
10A19:	mov     rdi, rax; postmsg
10A1C:	call    fatal
10A21:	mov     rax, [rbp+this]
10A25:	mov     rax, [rax+18h]
10A29:	mov     rdi, rax; path
10A2C:	call    minimize_path
10A31:	mov     rax, [rbp+this]
10A35:	mov     rax, [rax+18h]
10A39:	mov     rdi, rax; s
10A3C:	call    _strlen
10A41:	mov     rdx, [rbp+this]
10A45:	mov     [rdx+78h], rax
10A49:	mov     eax, 0
10A4E:	call    window_init
10A53:	mov     rdx, [rbp+this]
10A57:	mov     [rdx+8], rax
10A5B:	mov     eax, cs:configured_1
10A61:	test    eax, eax
10A63:	jz      short loc_10A8E
10A65:	mov     edx, cs:StartupFileDisplayMode
10A6B:	mov     rax, [rbp+this]
10A6F:	mov     [rax+80h], edx
10A75:	mov     edx, cs:StartupFileSortMethod
10A7B:	mov     rax, [rbp+this]
10A7F:	mov     [rax+84h], edx
10A85:	mov     rax, [rbp+this]
10A89:	jmp     locret_10BED
10A8E:	lea     rax, aSetup_0; '[Setup]'
10A95:	mov     rdi, rax; section
10A98:	call    use_section
10A9D:	mov     esi, 0; default_value
10AA2:	lea     rax, aStartupscrolls; 'StartupScrollStep'
10AA9:	mov     rdi, rax; var_name
10AAC:	call    get_int_var
10AB1:	mov     cs:StartupScrollStep, eax
10AB7:	lea     rax, aGitfmSetup_1; '[GITFM-Setup]'
10ABE:	mov     rdi, rax; section
10AC1:	call    use_section
10AC6:	mov     ecx, 0; default_value
10ACB:	mov     edx, 6; options_no
10AD0:	lea     rax, FileDisplayMode
10AD7:	mov     rsi, rax; options
10ADA:	lea     rax, aStartupfiledis; 'StartupFileDisplayMode'
10AE1:	mov     rdi, rax; var_name
10AE4:	call    get_const_var
10AE9:	mov     cs:StartupFileDisplayMode, eax
10AEF:	mov     edx, cs:StartupFileDisplayMode
10AF5:	mov     rax, [rbp+this]
10AF9:	mov     [rax+80h], edx
10AFF:	mov     ecx, 0; default_value
10B04:	mov     edx, 9; options_no
10B09:	lea     rax, FileSortMethod
10B10:	mov     rsi, rax; options
10B13:	lea     rax, aStartupfilesor; 'StartupFileSortMethod'
10B1A:	mov     rdi, rax; var_name
10B1D:	call    get_const_var
10B22:	mov     cs:StartupFileSortMethod, eax
10B28:	mov     edx, cs:StartupFileSortMethod
10B2E:	mov     rax, [rbp+this]
10B32:	mov     [rax+84h], edx
10B38:	mov     esi, 1; default_value
10B3D:	lea     rax, aInfodisplay; 'InfoDisplay'
10B44:	mov     rdi, rax; var_name
10B47:	call    get_flag_var
10B4C:	mov     cs:InfoDisplay, eax
10B52:	mov     esi, 1; default_value
10B57:	lea     rax, aLeadingdotmatc; 'LeadingDotMatch'
10B5E:	mov     rdi, rax; var_name
10B61:	call    get_flag_var
10B66:	mov     cs:LeadingDotMatch, eax
10B6C:	mov     eax, cs:AnsiColors
10B72:	test    eax, eax
10B74:	jz      short loc_10B7F
10B76:	lea     rax, color_section; '[GITFM-Color]'
10B7D:	jmp     short loc_10B86
10B7F:	lea     rax, monochrome_section; '[GITFM-Monochrome]'
10B86:	mov     rdi, rax; section
10B89:	call    use_section
10B8E:	mov     edx, 14h; fields_no
10B93:	lea     rax, PanelFields
10B9A:	mov     rsi, rax; colorset_name
10B9D:	lea     rax, PanelColors
10BA4:	mov     rdi, rax; charset
10BA7:	call    get_colorset_var
10BAC:	mov     edi, 8; esize
10BB1:	call    xstack_init
10BB6:	mov     cs:copy_history, rax
10BBD:	mov     edi, 8; esize
10BC2:	call    xstack_init
10BC7:	mov     cs:move_history, rax
10BCE:	mov     edi, 8; esize
10BD3:	call    xstack_init
10BD8:	mov     cs:mkdir_history, rax
10BDF:	mov     cs:configured_1, 1
10BE9:	mov     rax, [rbp+this]
10BED:	leave
10BEE:	retn
10BEF:	endbr64
10BF3:	push    rbp
10BF4:	mov     rbp, rsp
10BF7:	sub     rsp, 20h
10BFB:	mov     [rbp+this], rdi
10BFF:	mov     rax, [rbp+this]
10C03:	mov     rax, [rax]
10C06:	test    rax, rax
10C09:	jz      short loc_10C1A
10C0B:	mov     rax, [rbp+this]
10C0F:	mov     rax, [rax]
10C12:	mov     rdi, rax; dirp
10C15:	call    _closedir
10C1A:	mov     [rbp+i], 0
10C21:	jmp     short loc_10C9E
10C23:	mov     rax, [rbp+this]
10C27:	mov     rcx, [rax+38h]
10C2B:	mov     eax, [rbp+i]
10C2E:	movsxd  rdx, eax
10C31:	mov     rax, rdx
10C34:	shl     rax, 2
10C38:	add     rax, rdx
10C3B:	shl     rax, 4
10C3F:	add     rax, rcx
10C42:	mov     rax, [rax]
10C45:	test    rax, rax
10C48:	jz      short loc_10C9A
10C4A:	mov     rax, [rbp+this]
10C4E:	mov     rcx, [rax+38h]
10C52:	mov     eax, [rbp+i]
10C55:	movsxd  rdx, eax
10C58:	mov     rax, rdx
10C5B:	shl     rax, 2
10C5F:	add     rax, rdx
10C62:	shl     rax, 4
10C66:	add     rax, rcx
10C69:	mov     rax, [rax]
10C6C:	mov     rdi, rax; pointer
10C6F:	call    xfree
10C74:	mov     rax, [rbp+this]
10C78:	mov     rcx, [rax+38h]
10C7C:	mov     eax, [rbp+i]
10C7F:	movsxd  rdx, eax
10C82:	mov     rax, rdx
10C85:	shl     rax, 2
10C89:	add     rax, rdx
10C8C:	shl     rax, 4
10C90:	add     rax, rcx
10C93:	mov     qword ptr [rax], 0
10C9A:	add     [rbp+i], 1
10C9E:	mov     rax, [rbp+this]
10CA2:	mov     eax, [rax+68h]
10CA5:	cmp     [rbp+i], eax
10CA8:	jl      loc_10C23
10CAE:	mov     rax, [rbp+this]
10CB2:	mov     rax, [rax+38h]
10CB6:	mov     rdi, rax; pointer
10CB9:	call    xfree
10CBE:	mov     rax, [rbp+this]
10CC2:	mov     rax, [rax+20h]
10CC6:	mov     rdi, rax; pointer
10CC9:	call    xfree
10CCE:	mov     rax, [rbp+this]
10CD2:	mov     rax, [rax+8]
10CD6:	mov     rdi, rax; window
10CD9:	call    mprRemoveSignalHandler
10CDE:	mov     rax, [rbp+this]
10CE2:	mov     rdi, rax; pointer
10CE5:	call    xfree
10CEA:	nop
10CEB:	leave
10CEC:	retn
10CED:	endbr64
10CF1:	push    rbp
10CF2:	mov     rbp, rsp
10CF5:	mov     [rbp+this], rdi
10CF9:	mov     rax, [rbp+this]
10CFD:	mov     rax, [rax+8]
10D01:	pop     rbp
10D02:	retn
10D03:	endbr64
10D07:	push    rbp
10D08:	mov     rbp, rsp
10D0B:	sub     rsp, 10h
10D0F:	mov     [rbp+name], rdi
10D13:	mov     [rbp+which], esi
10D16:	mov     [rbp+filled], edx
10D19:	cmp     [rbp+filled], 0
10D1D:	jz      loc_10DB1
10D23:	mov     eax, [rbp+which]
10D26:	cdqe
10D28:	shl     rax, 4
10D2C:	mov     rdx, rax
10D2F:	lea     rax, tname_0
10D36:	add     rax, rdx
10D39:	mov     edx, 0Eh; n
10D3E:	mov     esi, 20h ; ' '; c
10D43:	mov     rdi, rax; s
10D46:	call    _memset
10D4B:	mov     eax, [rbp+which]
10D4E:	cdqe
10D50:	shl     rax, 4
10D54:	mov     rdx, rax
10D57:	lea     rax, tname_0+0Eh
10D5E:	mov     byte ptr [rdx+rax], 0
10D62:	mov     rax, [rbp+name]
10D66:	mov     rdi, rax; s
10D69:	call    _strlen
10D6E:	cmp     rax, 0Eh
10D72:	ja      short loc_10D85
10D74:	mov     rax, [rbp+name]
10D78:	mov     rdi, rax; s
10D7B:	call    _strlen
10D80:	mov     rdx, rax
10D83:	jmp     short loc_10D8A
10D85:	mov     edx, 0Eh; n
10D8A:	mov     eax, [rbp+which]
10D8D:	cdqe
10D8F:	shl     rax, 4
10D93:	mov     rcx, rax
10D96:	lea     rax, tname_0
10D9D:	add     rcx, rax
10DA0:	mov     rax, [rbp+name]
10DA4:	mov     rsi, rax; src
10DA7:	mov     rdi, rcx; dest
10DAA:	call    _memcpy
10DAF:	jmp     short locret_10DDC
10DB1:	mov     eax, [rbp+which]
10DB4:	cdqe
10DB6:	shl     rax, 4
10DBA:	mov     rdx, rax
10DBD:	lea     rax, tname_0
10DC4:	lea     rcx, [rdx+rax]
10DC8:	mov     rax, [rbp+name]
10DCC:	mov     edx, 0Eh; n
10DD1:	mov     rsi, rax; src
10DD4:	mov     rdi, rcx; dest
10DD7:	call    _strncpy
10DDC:	leave
10DDD:	retn
10DDE:	endbr64
10DE2:	push    rbp
10DE3:	mov     rbp, rsp
10DE6:	sub     rsp, 40h
10DEA:	mov     [rbp+_first], rdi
10DEE:	mov     [rbp+_second], rsi
10DF2:	mov     rax, [rbp+_first]
10DF6:	mov     [rbp+first], rax
10DFA:	mov     rax, [rbp+_second]
10DFE:	mov     [rbp+second], rax
10E02:	mov     rax, [rbp+first]
10E06:	movzx   eax, byte ptr [rax+48h]
10E0A:	test    al, al
10E0C:	setz    al
10E0F:	movzx   eax, al
10E12:	mov     [rbp+first_is_dir], eax
10E15:	mov     rax, [rbp+second]
10E19:	movzx   eax, byte ptr [rax+48h]
10E1D:	test    al, al
10E1F:	setz    al
10E22:	movzx   eax, al
10E25:	mov     [rbp+second_is_dir], eax
10E28:	mov     eax, [rbp+first_is_dir]
10E2B:	cmp     eax, [rbp+second_is_dir]
10E2E:	jz      short loc_10E4A
10E30:	cmp     [rbp+first_is_dir], 0
10E34:	jz      short loc_10E40
10E36:	mov     eax, 0FFFFFFFFh
10E3B:	jmp     locret_110AE
10E40:	mov     eax, 1
10E45:	jmp     locret_110AE
10E4A:	mov     eax, cs:CurrentSortMethod
10E50:	cmp     eax, 8; switch 9 cases
10E53:	ja      def_10E79; jumptable 0000000000010E79 default case
10E59:	mov     eax, eax
10E5B:	lea     rdx, ds:0[rax*4]
10E63:	lea     rax, jpt_10E79
10E6A:	mov     eax, ds:(jpt_10E79 - 28DE4h)[rdx+rax]
10E6D:	cdqe
10E6F:	lea     rdx, jpt_10E79
10E76:	add     rax, rdx
10E79:	jmp     rax; switch jump
10E7C:	mov     rax, [rbp+first]; jumptable 0000000000010E79 case 1
10E80:	mov     rax, [rax]
10E83:	mov     esi, 2Eh ; '.'; c
10E88:	mov     rdi, rax; s
10E8B:	call    _strrchr
10E90:	mov     [rbp+pfirst], rax
10E94:	mov     rax, [rbp+second]
10E98:	mov     rax, [rax]
10E9B:	mov     esi, 2Eh ; '.'; c
10EA0:	mov     rdi, rax; s
10EA3:	call    _strrchr
10EA8:	mov     [rbp+psecond], rax
10EAC:	cmp     [rbp+pfirst], 0
10EB1:	jz      short loc_10EE8
10EB3:	cmp     [rbp+psecond], 0
10EB8:	jz      short loc_10EE8
10EBA:	add     [rbp+psecond], 1
10EBF:	add     [rbp+pfirst], 1
10EC4:	mov     rdx, [rbp+psecond]
10EC8:	mov     rax, [rbp+pfirst]
10ECC:	mov     rsi, rdx; s2
10ECF:	mov     rdi, rax; s1
10ED2:	call    _strcmp
10ED7:	mov     [rbp+retval], eax
10EDA:	cmp     [rbp+retval], 0
10EDE:	jz      short loc_10F15
10EE0:	mov     eax, [rbp+retval]
10EE3:	jmp     locret_110AE
10EE8:	cmp     [rbp+pfirst], 0
10EED:	jnz     short loc_10EFA
10EEF:	cmp     [rbp+psecond], 0
10EF4:	jz      loc_1107F
10EFA:	cmp     [rbp+pfirst], 0
10EFF:	jz      short loc_10F0B
10F01:	mov     eax, 0FFFFFFFFh
10F06:	jmp     locret_110AE
10F0B:	mov     eax, 1
10F10:	jmp     locret_110AE
10F15:	jmp     loc_1107F
10F1A:	mov     rax, [rbp+first]; jumptable 0000000000010E79 case 2
10F1E:	mov     rdx, [rax+8]
10F22:	mov     rax, [rbp+second]
10F26:	mov     rax, [rax+8]
10F2A:	cmp     rdx, rax
10F2D:	jz      loc_11082
10F33:	mov     rax, [rbp+first]
10F37:	mov     rax, [rax+8]
10F3B:	mov     edx, eax
10F3D:	mov     rax, [rbp+second]
10F41:	mov     rax, [rax+8]
10F45:	mov     ecx, eax
10F47:	mov     eax, edx
10F49:	sub     eax, ecx
10F4B:	jmp     locret_110AE
10F50:	mov     rax, [rbp+first]; jumptable 0000000000010E79 case 3
10F54:	mov     rdx, [rax+20h]
10F58:	mov     rax, [rbp+second]
10F5C:	mov     rax, [rax+20h]
10F60:	cmp     rdx, rax
10F63:	jz      loc_11085
10F69:	mov     rax, [rbp+first]
10F6D:	mov     rax, [rax+20h]
10F71:	mov     edx, eax
10F73:	mov     rax, [rbp+second]
10F77:	mov     rax, [rax+20h]
10F7B:	mov     ecx, eax
10F7D:	mov     eax, edx
10F7F:	sub     eax, ecx
10F81:	jmp     locret_110AE
10F86:	mov     rax, [rbp+first]; jumptable 0000000000010E79 case 4
10F8A:	mov     edx, [rax+10h]
10F8D:	mov     rax, [rbp+second]
10F91:	mov     eax, [rax+10h]
10F94:	cmp     edx, eax
10F96:	jz      loc_11088
10F9C:	mov     rax, [rbp+first]
10FA0:	mov     edx, [rax+10h]
10FA3:	mov     rax, [rbp+second]
10FA7:	mov     ecx, [rax+10h]
10FAA:	mov     eax, edx
10FAC:	sub     eax, ecx
10FAE:	jmp     locret_110AE
10FB3:	mov     rax, [rbp+first]; jumptable 0000000000010E79 case 5
10FB7:	mov     edx, [rax+14h]
10FBA:	mov     rax, [rbp+second]
10FBE:	mov     eax, [rax+14h]
10FC1:	cmp     edx, eax
10FC3:	jz      loc_1108B
10FC9:	mov     rax, [rbp+first]
10FCD:	mov     edx, [rax+14h]
10FD0:	mov     rax, [rbp+second]
10FD4:	mov     ecx, [rax+14h]
10FD7:	mov     eax, edx
10FD9:	sub     eax, ecx
10FDB:	jmp     locret_110AE
10FE0:	mov     rax, [rbp+first]; jumptable 0000000000010E79 case 6
10FE4:	mov     edx, [rax+18h]
10FE7:	mov     rax, [rbp+second]
10FEB:	mov     eax, [rax+18h]
10FEE:	cmp     edx, eax
10FF0:	jz      loc_1108E
10FF6:	mov     rax, [rbp+first]
10FFA:	mov     edx, [rax+18h]
10FFD:	mov     rax, [rbp+second]
11001:	mov     ecx, [rax+18h]
11004:	mov     eax, edx
11006:	sub     eax, ecx
11008:	jmp     locret_110AE
1100D:	mov     rax, [rbp+first]; jumptable 0000000000010E79 case 7
11011:	mov     edx, [rax+14h]
11014:	mov     rax, [rbp+second]
11018:	mov     eax, [rax+14h]
1101B:	cmp     edx, eax
1101D:	jz      short loc_11091
1101F:	mov     rax, [rbp+second]
11023:	mov     rdx, [rax+28h]
11027:	mov     rax, [rbp+first]
1102B:	mov     rax, [rax+28h]
1102F:	mov     rsi, rdx; s2
11032:	mov     rdi, rax; s1
11035:	call    _strcmp
1103A:	jmp     short locret_110AE
1103C:	mov     rax, [rbp+first]; jumptable 0000000000010E79 case 8
11040:	mov     edx, [rax+18h]
11043:	mov     rax, [rbp+second]
11047:	mov     eax, [rax+18h]
1104A:	cmp     edx, eax
1104C:	jz      short loc_11094
1104E:	mov     rax, [rbp+second]
11052:	mov     rdx, [rax+30h]
11056:	mov     rax, [rbp+first]
1105A:	mov     rax, [rax+30h]
1105E:	mov     rsi, rdx; s2
11061:	mov     rdi, rax; s1
11064:	call    _strcmp
11069:	jmp     short locret_110AE
1106B:	lea     rax, aBadSortMethod; jumptable 0000000000010E79 default case
11072:	mov     rdi, rax; postmsg
11075:	call    fatal
1107A:	jmp     short loc_11095
1107C:	nop; jumptable 0000000000010E79 case 0
1107D:	jmp     short loc_11095
1107F:	nop
11080:	jmp     short loc_11095
11082:	nop
11083:	jmp     short loc_11095
11085:	nop
11086:	jmp     short loc_11095
11088:	nop
11089:	jmp     short loc_11095
1108B:	nop
1108C:	jmp     short loc_11095
1108E:	nop
1108F:	jmp     short loc_11095
11091:	nop
11092:	jmp     short loc_11095
11094:	nop
11095:	mov     rax, [rbp+second]
11099:	mov     rdx, [rax]
1109C:	mov     rax, [rbp+first]
110A0:	mov     rax, [rax]
110A3:	mov     rsi, rdx; s2
110A6:	mov     rdi, rax; s1
110A9:	call    _strcmp
110AE:	leave
110AF:	retn
110B0:	endbr64
110B4:	push    rbp
110B5:	mov     rbp, rsp
110B8:	mov     [rbp+this], rdi
110BC:	mov     rax, [rbp+this]
110C0:	mov     dword ptr [rax+14h], 3FFFFFFFh
110C7:	nop
110C8:	pop     rbp
110C9:	retn
110CA:	endbr64
110CE:	push    rbp
110CF:	mov     rbp, rsp
110D2:	mov     [rbp+this], rdi
110D6:	mov     rax, [rbp+this]
110DA:	mov     rcx, [rax+38h]
110DE:	mov     rax, [rbp+this]
110E2:	mov     eax, [rax+28h]
110E5:	movsxd  rdx, eax
110E8:	mov     rax, rdx
110EB:	shl     rax, 2
110EF:	add     rax, rdx
110F2:	shl     rax, 4
110F6:	add     rax, rcx
110F9:	mov     rax, [rax]
110FC:	pop     rbp
110FD:	retn
110FE:	endbr64
11102:	push    rbp
11103:	mov     rbp, rsp
11106:	mov     [rbp+this], rdi
1110A:	mov     rax, [rbp+this]
1110E:	mov     rcx, [rax+38h]
11112:	mov     rax, [rbp+this]
11116:	mov     eax, [rax+28h]
11119:	movsxd  rdx, eax
1111C:	mov     rax, rdx
1111F:	shl     rax, 2
11123:	add     rax, rdx
11126:	shl     rax, 4
1112A:	add     rax, rcx
1112D:	mov     eax, [rax+14h]
11130:	pop     rbp
11131:	retn
11132:	endbr64
11136:	push    rbp
11137:	mov     rbp, rsp
1113A:	mov     [rbp+this], rdi
1113E:	mov     rax, [rbp+this]
11142:	mov     rcx, [rax+38h]
11146:	mov     rax, [rbp+this]
1114A:	mov     eax, [rax+28h]
1114D:	movsxd  rdx, eax
11150:	mov     rax, rdx
11153:	shl     rax, 2
11157:	add     rax, rdx
1115A:	shl     rax, 4
1115E:	add     rax, rcx
11161:	mov     eax, [rax+18h]
11164:	pop     rbp
11165:	retn
11166:	endbr64
1116A:	push    rbp
1116B:	mov     rbp, rsp
1116E:	mov     [rbp+this], rdi
11172:	mov     rax, [rbp+this]
11176:	mov     rcx, [rax+38h]
1117A:	mov     rax, [rbp+this]
1117E:	mov     eax, [rax+28h]
11181:	movsxd  rdx, eax
11184:	mov     rax, rdx
11187:	shl     rax, 2
1118B:	add     rax, rdx
1118E:	shl     rax, 4
11192:	add     rax, rcx
11195:	mov     eax, [rax+10h]
11198:	pop     rbp
11199:	retn
1119A:	endbr64
1119E:	push    rbp
1119F:	mov     rbp, rsp
111A2:	mov     [rbp+this], rdi
111A6:	mov     rax, [rbp+this]
111AA:	mov     rcx, [rax+38h]
111AE:	mov     rax, [rbp+this]
111B2:	mov     eax, [rax+28h]
111B5:	movsxd  rdx, eax
111B8:	mov     rax, rdx
111BB:	shl     rax, 2
111BF:	add     rax, rdx
111C2:	shl     rax, 4
111C6:	add     rax, rcx
111C9:	movzx   eax, byte ptr [rax+48h]
111CD:	movsx   eax, al
111D0:	pop     rbp
111D1:	retn
111D2:	endbr64
111D6:	push    rbp
111D7:	mov     rbp, rsp
111DA:	mov     [rbp+this], rdi
111DE:	mov     rax, [rbp+this]
111E2:	mov     eax, [rax+60h]
111E5:	sub     eax, 2
111E8:	mov     [rbp+lines], eax
111EB:	mov     rax, [rbp+this]
111EF:	mov     edx, [rax+28h]
111F2:	mov     eax, [rbp+lines]
111F5:	mov     ecx, eax
111F7:	shr     ecx, 1Fh
111FA:	add     eax, ecx
111FC:	sar     eax, 1
111FE:	neg     eax
11200:	add     eax, edx
11202:	mov     [rbp+tmp], eax
11205:	mov     edx, [rbp+tmp]
11208:	mov     eax, [rbp+lines]
1120B:	add     edx, eax
1120D:	mov     rax, [rbp+this]
11211:	mov     eax, [rax+68h]
11214:	cmp     edx, eax
11216:	jl      short loc_1122E
11218:	mov     rax, [rbp+this]
1121C:	mov     eax, [rax+68h]
1121F:	sub     eax, [rbp+lines]
11222:	mov     edx, 0
11227:	test    eax, eax
11229:	cmovs   eax, edx
1122C:	jmp     short loc_1123B
1122E:	mov     eax, [rbp+tmp]
11231:	mov     edx, 0
11236:	test    eax, eax
11238:	cmovs   eax, edx
1123B:	pop     rbp
1123C:	retn
1123D:	endbr64
11241:	push    rbp
11242:	mov     rbp, rsp
11245:	sub     rsp, 8
11249:	mov     [rbp+this], rdi
1124D:	mov     rax, [rbp+this]
11251:	mov     edx, [rax+2Ch]
11254:	mov     rax, [rbp+this]
11258:	mov     eax, [rax+28h]
1125B:	cmp     edx, eax
1125D:	jg      short loc_112A4
1125F:	mov     rax, [rbp+this]
11263:	mov     edx, [rax+2Ch]
11266:	mov     rax, [rbp+this]
1126A:	mov     eax, [rax+60h]
1126D:	add     eax, edx
1126F:	lea     edx, [rax-2]
11272:	mov     rax, [rbp+this]
11276:	mov     eax, [rax+28h]
11279:	cmp     edx, eax
1127B:	jle     short loc_112A4
1127D:	mov     rax, [rbp+this]
11281:	mov     edx, [rax+2Ch]
11284:	mov     rax, [rbp+this]
11288:	mov     eax, [rax+60h]
1128B:	add     eax, edx
1128D:	lea     edx, [rax-2]
11290:	mov     rax, [rbp+this]
11294:	mov     eax, [rax+68h]
11297:	cmp     edx, eax
11299:	jg      short loc_112A4
1129B:	mov     rax, [rbp+this]
1129F:	mov     eax, [rax+2Ch]
112A2:	jmp     short locret_112B5
112A4:	mov     rax, [rbp+this]
112A8:	mov     rdi, rax; this
112AB:	mov     eax, 0
112B0:	call    panel_get_centered_fos
112B5:	leave
112B6:	retn
112B7:	endbr64
112BB:	push    rbp
112BC:	mov     rbp, rsp
112BF:	sub     rsp, 10h
112C3:	mov     [rbp+this], rdi
112C7:	mov     [rbp+entry], esi
112CA:	mov     rax, [rbp+this]
112CE:	mov     edx, [rbp+entry]
112D1:	mov     [rax+28h], edx
112D4:	mov     rax, [rbp+this]
112D8:	mov     rdi, rax; this
112DB:	mov     eax, 0
112E0:	call    panel_get_fos
112E5:	mov     rdx, [rbp+this]
112E9:	mov     [rdx+2Ch], eax
112EC:	nop
112ED:	leave
112EE:	retn
112EF:	endbr64
112F3:	push    rbp
112F4:	mov     rbp, rsp
112F7:	sub     rsp, 8
112FB:	mov     [rbp+this], rdi
112FF:	mov     rax, [rbp+this]
11303:	mov     rdi, rax; this
11306:	mov     eax, 0
1130B:	call    panel_get_centered_fos
11310:	mov     rdx, [rbp+this]
11314:	mov     [rdx+2Ch], eax
11317:	nop
11318:	leave
11319:	retn
1131A:	endbr64
1131E:	push    rbp
1131F:	mov     rbp, rsp
11322:	mov     [rbp+this], rdi
11326:	mov     rax, [rbp+this]
1132A:	mov     byte ptr [rax+6Dh], 1
1132E:	nop
1132F:	pop     rbp
11330:	retn
11331:	endbr64
11335:	push    rbp
11336:	mov     rbp, rsp
11339:	mov     [rbp+this], rdi
1133D:	mov     rax, [rbp+this]
11341:	mov     byte ptr [rax+6Dh], 0
11345:	nop
11346:	pop     rbp
11347:	retn
11348:	endbr64
1134C:	push    rbp
1134D:	mov     rbp, rsp
11350:	sub     rsp, 30h
11354:	mov     [rbp+this], rdi
11358:	mov     [rbp+x], rsi
1135C:	mov     [rbp+y], rdx
11360:	mov     [rbp+lines], rcx
11364:	mov     [rbp+columns], r8
11368:	mov     rax, [rbp+x]
1136C:	mov     edx, eax
1136E:	mov     rax, [rbp+this]
11372:	mov     [rax+58h], edx
11375:	mov     rax, [rbp+y]
11379:	mov     edx, eax
1137B:	mov     rax, [rbp+this]
1137F:	mov     [rax+5Ch], edx
11382:	mov     rax, [rbp+lines]
11386:	mov     edx, eax
11388:	mov     rax, [rbp+this]
1138C:	mov     [rax+60h], edx
1138F:	mov     rax, [rbp+columns]
11393:	mov     edx, eax
11395:	mov     rax, [rbp+this]
11399:	mov     [rax+64h], edx
1139C:	mov     rax, [rbp+this]
113A0:	mov     dword ptr [rax+8Ch], 0
113AA:	mov     eax, cs:StartupScrollStep
113B0:	test    eax, eax
113B2:	jle     short loc_113C8
113B4:	mov     rax, [rbp+this]
113B8:	mov     eax, [rax+60h]
113BB:	lea     edx, [rax-1]
113BE:	mov     eax, cs:StartupScrollStep
113C4:	cmp     edx, eax
113C6:	jg      short loc_113E6
113C8:	mov     rax, [rbp+this]
113CC:	mov     eax, [rax+60h]
113CF:	mov     edx, eax
113D1:	shr     edx, 1Fh
113D4:	add     eax, edx
113D6:	sar     eax, 1
113D8:	mov     edx, eax
113DA:	mov     rax, [rbp+this]
113DE:	mov     [rax+88h], edx
113E4:	jmp     short loc_113F6
113E6:	mov     edx, cs:StartupScrollStep
113EC:	mov     rax, [rbp+this]
113F0:	mov     [rax+88h], edx
113F6:	mov     rax, [rbp+this]
113FA:	mov     eax, [rax+64h]
113FD:	movsxd  rdx, eax
11400:	mov     rax, [rbp+this]
11404:	mov     rax, [rax+20h]
11408:	mov     rsi, rdx; n
1140B:	mov     rdi, rax; p
1140E:	call    xrealloc
11413:	mov     rdx, [rbp+this]
11417:	mov     [rdx+20h], rax
1141B:	mov     rax, [rbp+columns]
1141F:	mov     edi, eax
11421:	mov     rax, [rbp+lines]
11425:	mov     ecx, eax; lines
11427:	mov     rax, [rbp+y]
1142B:	mov     edx, eax; y
1142D:	mov     rax, [rbp+x]
11431:	mov     esi, eax; x
11433:	mov     rax, [rbp+this]
11437:	mov     rax, [rax+8]
1143B:	mov     r8d, edi; columns
1143E:	mov     rdi, rax; window
11441:	call    window_resize
11446:	mov     rax, [rbp+this]
1144A:	mov     rdi, rax; this
1144D:	call    panel_center_current_entry
11452:	mov     rax, [rbp+this]
11456:	mov     dword ptr [rax+74h], 0
1145D:	nop
1145E:	leave
1145F:	retn
11460:	endbr64
11464:	push    rbp
11465:	mov     rbp, rsp
11468:	mov     [rbp+this], rdi
1146C:	mov     [rbp+value], esi
1146F:	mov     eax, [rbp+value]
11472:	mov     edx, eax
11474:	mov     rax, [rbp+this]
11478:	mov     [rax+6Eh], dl
1147B:	nop
1147C:	pop     rbp
1147D:	retn
1147E:	endbr64
11482:	push    rbp
11483:	mov     rbp, rsp
11486:	sub     rsp, 30h
1148A:	mov     [rbp+this], rdi
1148E:	mov     [rbp+string], rsi
11492:	mov     [rbp+len], rdx
11496:	mov     [rbp+start_entry], ecx
11499:	mov     eax, [rbp+start_entry]
1149C:	mov     [rbp+i], eax
1149F:	jmp     short loc_114E3
114A1:	mov     rax, [rbp+this]
114A5:	mov     rcx, [rax+38h]
114A9:	mov     eax, [rbp+i]
114AC:	movsxd  rdx, eax
114AF:	mov     rax, rdx
114B2:	shl     rax, 2
114B6:	add     rax, rdx
114B9:	shl     rax, 4
114BD:	add     rax, rcx
114C0:	mov     rcx, [rax]
114C3:	mov     rdx, [rbp+len]; n
114C7:	mov     rax, [rbp+string]
114CB:	mov     rsi, rcx; s2
114CE:	mov     rdi, rax; s1
114D1:	call    _strncasecmp
114D6:	test    eax, eax
114D8:	jnz     short loc_114DF
114DA:	mov     eax, [rbp+i]
114DD:	jmp     short locret_114EE
114DF:	sub     [rbp+i], 1
114E3:	cmp     [rbp+i], 0
114E7:	jns     short loc_114A1
114E9:	mov     eax, 0FFFFFFFFh
114EE:	leave
114EF:	retn
114F0:	endbr64
114F4:	push    rbp
114F5:	mov     rbp, rsp
114F8:	sub     rsp, 30h
114FC:	mov     [rbp+this], rdi
11500:	mov     [rbp+string], rsi
11504:	mov     [rbp+len], rdx
11508:	mov     [rbp+start_entry], ecx
1150B:	mov     eax, [rbp+start_entry]
1150E:	mov     [rbp+entry], eax
11511:	jmp     short loc_11555
11513:	mov     rax, [rbp+this]
11517:	mov     rcx, [rax+38h]
1151B:	mov     eax, [rbp+entry]
1151E:	movsxd  rdx, eax
11521:	mov     rax, rdx
11524:	shl     rax, 2
11528:	add     rax, rdx
1152B:	shl     rax, 4
1152F:	add     rax, rcx
11532:	mov     rcx, [rax]
11535:	mov     rdx, [rbp+len]; n
11539:	mov     rax, [rbp+string]
1153D:	mov     rsi, rcx; s2
11540:	mov     rdi, rax; s1
11543:	call    _strncasecmp
11548:	test    eax, eax
1154A:	jnz     short loc_11551
1154C:	mov     eax, [rbp+entry]
1154F:	jmp     short locret_11566
11551:	add     [rbp+entry], 1
11555:	mov     rax, [rbp+this]
11559:	mov     eax, [rax+68h]
1155C:	cmp     [rbp+entry], eax
1155F:	jl      short loc_11513
11561:	mov     eax, 0FFFFFFFFh
11566:	leave
11567:	retn
11568:	endbr64
1156C:	push    rbp
1156D:	mov     rbp, rsp
11570:	push    rbx
11571:	sub     rsp, 38h
11575:	mov     [rbp+format], rdi
11579:	mov     [rbp+string], rsi
1157D:	mov     [rbp+options], rdx
11581:	mov     [rbp+flags], ecx
11584:	mov     rax, [rbp+format]
11588:	mov     rdi, rax; s
1158B:	call    _strlen
11590:	mov     rbx, rax
11593:	mov     rax, [rbp+string]
11597:	mov     rdi, rax; s
1159A:	call    _strlen
1159F:	add     rax, rbx
115A2:	add     rax, 1
115A6:	mov     rdi, rax; n
115A9:	call    xmalloc
115AE:	mov     [rbp+message], rax
115B2:	mov     rdx, [rbp+string]
115B6:	mov     rcx, [rbp+format]
115BA:	mov     rax, [rbp+message]
115BE:	mov     rsi, rcx; format
115C1:	mov     rdi, rax; s
115C4:	mov     eax, 0
115C9:	call    _sprintf
115CE:	mov     edx, [rbp+flags]; flags
115D1:	mov     rcx, [rbp+options]
115D5:	mov     rax, [rbp+message]
115D9:	mov     rsi, rcx; options
115DC:	mov     rdi, rax; message
115DF:	call    il_read_char
115E4:	mov     [rbp+c], al
115E7:	mov     rax, [rbp+message]
115EB:	mov     rdi, rax; pointer
115EE:	call    xfree
115F3:	movzx   eax, [rbp+c]
115F7:	mov     rbx, [rbp+var_8]
115FB:	leave
115FC:	retn
115FD:	endbr64
11601:	push    rbp
11602:	mov     rbp, rsp
11605:	push    rbx
11606:	sub     rsp, 48h
1160A:	mov     [rbp+format], rdi
1160E:	mov     [rbp+string1], rsi
11612:	mov     [rbp+string2], rdx
11616:	mov     [rbp+options], rcx
1161A:	mov     [rbp+flags], r8d
1161E:	mov     rax, [rbp+format]
11622:	mov     rdi, rax; s
11625:	call    _strlen
1162A:	mov     rbx, rax
1162D:	mov     rax, [rbp+string1]
11631:	mov     rdi, rax; s
11634:	call    _strlen
11639:	add     rbx, rax
1163C:	mov     rax, [rbp+string2]
11640:	mov     rdi, rax; s
11643:	call    _strlen
11648:	add     rax, rbx
1164B:	add     rax, 1
1164F:	mov     rdi, rax; n
11652:	call    xmalloc
11657:	mov     [rbp+message], rax
1165B:	mov     rcx, [rbp+string2]
1165F:	mov     rdx, [rbp+string1]
11663:	mov     rsi, [rbp+format]; format
11667:	mov     rax, [rbp+message]
1166B:	mov     rdi, rax; s
1166E:	mov     eax, 0
11673:	call    _sprintf
11678:	mov     edx, [rbp+flags]; flags
1167B:	mov     rcx, [rbp+options]
1167F:	mov     rax, [rbp+message]
11683:	mov     rsi, rcx; options
11686:	mov     rdi, rax; message
11689:	call    il_read_char
1168E:	mov     [rbp+c], al
11691:	mov     rax, [rbp+message]
11695:	mov     rdi, rax; pointer
11698:	call    xfree
1169D:	movzx   eax, [rbp+c]
116A1:	mov     rbx, [rbp+var_8]
116A5:	leave
116A6:	retn
116A7:	endbr64
116AB:	push    rbp
116AC:	mov     rbp, rsp
116AF:	sub     rsp, 10h
116B3:	mov     [rbp+this], rdi
116B7:	mov     rax, [rbp+this]
116BB:	mov     esi, 0; entry
116C0:	mov     rdi, rax; this
116C3:	mov     eax, 0
116C8:	call    panel_set_current_entry
116CD:	mov     rax, [rbp+this]
116D1:	mov     rax, [rax+18h]
116D5:	mov     ecx, 1Eh; flags
116DA:	mov     edx, 0; options
116DF:	mov     rsi, rax; string
116E2:	lea     rax, aSPermissionDen_0; '%s/: Permission denied.'
116E9:	mov     rdi, rax; format
116EC:	mov     eax, 0
116F1:	call    panel_2s_message
116F6:	mov     rax, [rbp+this]
116FA:	mov     rax, [rax+18h]
116FE:	lea     rdx, filename; '/'
11705:	mov     rsi, rdx; s2
11708:	mov     rdi, rax; s1
1170B:	call    _strcmp
11710:	test    eax, eax
11712:	jnz     short loc_11723
11714:	lea     rax, aPermissionDeni; '/: Permission denied'
1171B:	mov     rdi, rax; postmsg
1171E:	call    fatal
11723:	mov     rax, [rbp+this]
11727:	mov     rax, [rax+18h]
1172B:	mov     word ptr [rax], 2Fh ; '/'
11730:	mov     rax, [rbp+this]
11734:	mov     qword ptr [rax+78h], 1
1173C:	mov     rax, [rbp+this]
11740:	mov     rax, [rax+18h]
11744:	mov     rdi, rax; path
11747:	call    _chdir
1174C:	mov     rax, [rbp+this]
11750:	mov     r8d, 1; repeat_count
11756:	mov     ecx, 0; aux_info
1175B:	mov     edx, 0; other
11760:	mov     esi, 22h ; '''; action
11765:	mov     rdi, rax; this
11768:	call    panel_action
1176D:	nop
1176E:	leave
1176F:	retn
11770:	endbr64
11774:	push    rbp
11775:	mov     rbp, rsp
11778:	sub     rsp, 30h
1177C:	mov     [rbp+this], rdi
11780:	mov     [rbp+entry], esi
11783:	mov     [rbp+longest_length], 0
1178B:	mov     [rbp+longest_fti], 0
11793:	mov     rax, [rbp+this]
11797:	mov     rcx, [rax+38h]
1179B:	mov     eax, [rbp+entry]
1179E:	movsxd  rdx, eax
117A1:	mov     rax, rdx
117A4:	shl     rax, 2
117A8:	add     rax, rdx
117AB:	shl     rax, 4
117AF:	add     rax, rcx
117B2:	mov     byte ptr [rax+4Bh], 1
117B6:	mov     rax, cs:fti_head
117BD:	mov     [rbp+fti], rax
117C1:	jmp     short loc_11839
117C3:	mov     rax, [rbp+this]
117C7:	mov     rcx, [rax+38h]
117CB:	mov     eax, [rbp+entry]
117CE:	movsxd  rdx, eax
117D1:	mov     rax, rdx
117D4:	shl     rax, 2
117D8:	add     rax, rdx
117DB:	shl     rax, 4
117DF:	add     rax, rcx
117E2:	mov     rcx, [rax]
117E5:	mov     rax, [rbp+fti]
117E9:	mov     rax, [rax]
117EC:	mov     edx, 15h; flags
117F1:	mov     rsi, rcx; name
117F4:	mov     rdi, rax; pattern
117F7:	call    _fnmatch
117FC:	test    eax, eax
117FE:	jnz     short loc_1182D
11800:	mov     rax, [rbp+fti]
11804:	mov     rax, [rax]
11807:	mov     rdi, rax; s
1180A:	call    _strlen
1180F:	mov     [rbp+length], rax
11813:	mov     rax, [rbp+length]
11817:	cmp     rax, [rbp+longest_length]
1181B:	jbe     short loc_1182D
1181D:	mov     rax, [rbp+fti]
11821:	mov     [rbp+longest_fti], rax
11825:	mov     rax, [rbp+length]
11829:	mov     [rbp+longest_length], rax
1182D:	mov     rax, [rbp+fti]
11831:	mov     rax, [rax+18h]
11835:	mov     [rbp+fti], rax
11839:	cmp     [rbp+fti], 0
1183E:	jnz     short loc_117C3
11840:	mov     rax, [rbp+longest_fti]
11844:	mov     [rbp+fti], rax
11848:	cmp     [rbp+fti], 0
1184D:	jz      loc_11915
11853:	mov     rax, [rbp+fti]
11857:	mov     eax, [rax+10h]
1185A:	cmp     eax, 0FFFFFFFFh
1185D:	jz      short loc_1186A
1185F:	mov     rax, [rbp+fti]
11863:	mov     eax, [rax+10h]
11866:	mov     ecx, eax
11868:	jmp     short loc_1186F
1186A:	mov     ecx, 0
1186F:	mov     rax, [rbp+this]
11873:	mov     rsi, [rax+38h]
11877:	mov     eax, [rbp+entry]
1187A:	movsxd  rdx, eax
1187D:	mov     rax, rdx
11880:	shl     rax, 2
11884:	add     rax, rdx
11887:	shl     rax, 4
1188B:	add     rax, rsi
1188E:	mov     [rax+4Eh], cl
11891:	mov     rax, [rbp+fti]
11895:	mov     eax, [rax+8]
11898:	cmp     eax, 0FFFFFFFFh
1189B:	jnz     short loc_118A7
1189D:	mov     eax, cs:PanelColors+1Ch
118A3:	mov     ecx, eax
118A5:	jmp     short loc_118B0
118A7:	mov     rax, [rbp+fti]
118AB:	mov     eax, [rax+8]
118AE:	mov     ecx, eax
118B0:	mov     rax, [rbp+this]
118B4:	mov     rsi, [rax+38h]
118B8:	mov     eax, [rbp+entry]
118BB:	movsxd  rdx, eax
118BE:	mov     rax, rdx
118C1:	shl     rax, 2
118C5:	add     rax, rdx
118C8:	shl     rax, 4
118CC:	add     rax, rsi
118CF:	mov     [rax+4Ch], cl
118D2:	mov     rax, [rbp+fti]
118D6:	mov     eax, [rax+0Ch]
118D9:	cmp     eax, 0FFFFFFFFh
118DC:	jnz     short loc_118E8
118DE:	mov     eax, cs:PanelColors+4
118E4:	mov     ecx, eax
118E6:	jmp     short loc_118F1
118E8:	mov     rax, [rbp+fti]
118EC:	mov     eax, [rax+0Ch]
118EF:	mov     ecx, eax
118F1:	mov     rax, [rbp+this]
118F5:	mov     rsi, [rax+38h]
118F9:	mov     eax, [rbp+entry]
118FC:	movsxd  rdx, eax
118FF:	mov     rax, rdx
11902:	shl     rax, 2
11906:	add     rax, rdx
11909:	shl     rax, 4
1190D:	add     rax, rsi
11910:	mov     [rax+4Dh], cl
11913:	jmp     short loc_11938
11915:	mov     rax, [rbp+this]
11919:	mov     rcx, [rax+38h]
1191D:	mov     eax, [rbp+entry]
11920:	movsxd  rdx, eax
11923:	mov     rax, rdx
11926:	shl     rax, 2
1192A:	add     rax, rdx
1192D:	shl     rax, 4
11931:	add     rax, rcx
11934:	mov     byte ptr [rax+4Eh], 2
11938:	nop
11939:	leave
1193A:	retn
1193B:	endbr64
1193F:	push    rbp
11940:	mov     rbp, rsp
11943:	push    rbx
11944:	sub     rsp, 178h
1194B:	mov     [rbp+this], rdi
11952:	mov     [rbp+entry], esi
11958:	mov     rax, fs:28h
11961:	mov     [rbp+var_18], rax
11965:	xor     eax, eax
11967:	lea     rax, [rbp+s]
1196E:	mov     edx, 90h; n
11973:	mov     esi, 0; c
11978:	mov     rdi, rax; s
1197B:	call    _memset
11980:	mov     rax, [rbp+this]
11987:	mov     rcx, [rax+38h]
1198B:	mov     eax, [rbp+entry]
11991:	movsxd  rdx, eax
11994:	mov     rax, rdx
11997:	shl     rax, 2
1199B:	add     rax, rdx
1199E:	shl     rax, 4
119A2:	add     rax, rcx
119A5:	mov     rax, [rax]
119A8:	lea     rdx, [rbp+s]
119AF:	mov     rsi, rdx; buf
119B2:	mov     rdi, rax; filename
119B5:	call    xlstat
119BA:	mov     rax, [rbp+this]
119C1:	mov     rcx, [rax+38h]
119C5:	mov     eax, [rbp+entry]
119CB:	movsxd  rdx, eax
119CE:	mov     rax, rdx
119D1:	shl     rax, 2
119D5:	add     rax, rdx
119D8:	shl     rax, 4
119DC:	lea     rdx, [rcx+rax]
119E0:	mov     eax, [rbp+s.st_mode]
119E6:	mov     [rdx+10h], eax
119E9:	mov     rax, [rbp+this]
119F0:	mov     rcx, [rax+38h]
119F4:	mov     eax, [rbp+entry]
119FA:	movsxd  rdx, eax
119FD:	mov     rax, rdx
11A00:	shl     rax, 2
11A04:	add     rax, rdx
11A07:	shl     rax, 4
11A0B:	lea     rdx, [rcx+rax]
11A0F:	mov     eax, [rbp+s.st_uid]
11A15:	mov     [rdx+14h], eax
11A18:	mov     rax, [rbp+this]
11A1F:	mov     rcx, [rax+38h]
11A23:	mov     eax, [rbp+entry]
11A29:	movsxd  rdx, eax
11A2C:	mov     rax, rdx
11A2F:	shl     rax, 2
11A33:	add     rax, rdx
11A36:	shl     rax, 4
11A3A:	lea     rdx, [rcx+rax]
11A3E:	mov     eax, [rbp+s.st_gid]
11A44:	mov     [rdx+18h], eax
11A47:	mov     rax, [rbp+s.st_ino]
11A4E:	test    rax, rax
11A51:	jz      loc_11D9A
11A57:	mov     eax, [rbp+s.st_mode]
11A5D:	and     eax, 0F000h
11A62:	cmp     eax, 4000h
11A67:	jnz     short loc_11A97
11A69:	mov     rax, [rbp+this]
11A70:	mov     rcx, [rax+38h]
11A74:	mov     eax, [rbp+entry]
11A7A:	movsxd  rdx, eax
11A7D:	mov     rax, rdx
11A80:	shl     rax, 2
11A84:	add     rax, rdx
11A87:	shl     rax, 4
11A8B:	add     rax, rcx
11A8E:	mov     byte ptr [rax+48h], 0
11A92:	jmp     loc_11D64
11A97:	mov     eax, [rbp+s.st_mode]
11A9D:	and     eax, 0F000h
11AA2:	cmp     eax, 8000h
11AA7:	jnz     short loc_11B28
11AA9:	mov     rax, [rbp+this]
11AB0:	mov     rcx, [rax+38h]
11AB4:	mov     eax, [rbp+entry]
11ABA:	movsxd  rdx, eax
11ABD:	mov     rax, rdx
11AC0:	shl     rax, 2
11AC4:	add     rax, rdx
11AC7:	shl     rax, 4
11ACB:	add     rax, rcx
11ACE:	mov     byte ptr [rax+48h], 1
11AD2:	mov     eax, [rbp+s.st_mode]
11AD8:	and     eax, 49h
11ADB:	test    eax, eax
11ADD:	jz      short loc_11AF4
11ADF:	mov     rax, [rbp+this]
11AE6:	mov     eax, [rax+10h]
11AE9:	test    eax, eax
11AEB:	jnz     short loc_11AF4
11AED:	mov     esi, 1
11AF2:	jmp     short loc_11AF9
11AF4:	mov     esi, 0
11AF9:	mov     rax, [rbp+this]
11B00:	mov     rcx, [rax+38h]
11B04:	mov     eax, [rbp+entry]
11B0A:	movsxd  rdx, eax
11B0D:	mov     rax, rdx
11B10:	shl     rax, 2
11B14:	add     rax, rdx
11B17:	shl     rax, 4
11B1B:	add     rax, rcx
11B1E:	mov     edx, esi
11B20:	mov     [rax+4Ah], dl
11B23:	jmp     loc_11D64
11B28:	mov     rax, [rbp+this]
11B2F:	mov     rcx, [rax+38h]
11B33:	mov     eax, [rbp+entry]
11B39:	movsxd  rdx, eax
11B3C:	mov     rax, rdx
11B3F:	shl     rax, 2
11B43:	add     rax, rdx
11B46:	shl     rax, 4
11B4A:	add     rax, rcx
11B4D:	mov     byte ptr [rax+4Ah], 0
11B51:	mov     eax, [rbp+s.st_mode]
11B57:	and     eax, 0F000h
11B5C:	cmp     eax, 1000h
11B61:	jnz     short loc_11B91
11B63:	mov     rax, [rbp+this]
11B6A:	mov     rcx, [rax+38h]
11B6E:	mov     eax, [rbp+entry]
11B74:	movsxd  rdx, eax
11B77:	mov     rax, rdx
11B7A:	shl     rax, 2
11B7E:	add     rax, rdx
11B81:	shl     rax, 4
11B85:	add     rax, rcx
11B88:	mov     byte ptr [rax+48h], 3
11B8C:	jmp     loc_11D64
11B91:	mov     eax, [rbp+s.st_mode]
11B97:	and     eax, 0F000h
11B9C:	cmp     eax, 0C000h
11BA1:	jnz     short loc_11BD1
11BA3:	mov     rax, [rbp+this]
11BAA:	mov     rcx, [rax+38h]
11BAE:	mov     eax, [rbp+entry]
11BB4:	movsxd  rdx, eax
11BB7:	mov     rax, rdx
11BBA:	shl     rax, 2
11BBE:	add     rax, rdx
11BC1:	shl     rax, 4
11BC5:	add     rax, rcx
11BC8:	mov     byte ptr [rax+48h], 4
11BCC:	jmp     loc_11D64
11BD1:	mov     eax, [rbp+s.st_mode]
11BD7:	and     eax, 0F000h
11BDC:	cmp     eax, 0A000h
11BE1:	jnz     loc_11D3B
11BE7:	mov     rax, [rbp+this]
11BEE:	mov     rcx, [rax+38h]
11BF2:	mov     eax, [rbp+entry]
11BF8:	movsxd  rdx, eax
11BFB:	mov     rax, rdx
11BFE:	shl     rax, 2
11C02:	add     rax, rdx
11C05:	shl     rax, 4
11C09:	add     rax, rcx
11C0C:	mov     rax, [rax]
11C0F:	lea     rdx, [rbp+s_tmp]
11C16:	mov     rsi, rdx; buf
11C19:	mov     rdi, rax; filename
11C1C:	call    xstat
11C21:	mov     [rbp+stat_error], eax
11C27:	cmp     [rbp+stat_error], 0FFFFFFFFh
11C2E:	jnz     loc_11CB7
11C34:	mov     rax, [rbp+this]
11C3B:	mov     rcx, [rax+38h]
11C3F:	mov     eax, [rbp+entry]
11C45:	movsxd  rdx, eax
11C48:	mov     rax, rdx
11C4B:	shl     rax, 2
11C4F:	add     rax, rdx
11C52:	shl     rax, 4
11C56:	add     rax, rcx
11C59:	mov     byte ptr [rax+48h], 2
11C5D:	mov     rax, [rbp+this]
11C64:	mov     rcx, [rax+38h]
11C68:	mov     eax, [rbp+entry]
11C6E:	movsxd  rdx, eax
11C71:	mov     rax, rdx
11C74:	shl     rax, 2
11C78:	add     rax, rdx
11C7B:	shl     rax, 4
11C7F:	add     rax, rcx
11C82:	mov     rax, [rax]
11C85:	mov     rdi, rax; filename
11C88:	call    xreadlink
11C8D:	mov     [rbp+sz], eax
11C93:	cmp     [rbp+sz], 0FFFFFFFFh
11C9A:	jz      short loc_11CA6
11C9C:	mov     eax, [rbp+sz]
11CA2:	cdqe
11CA4:	jmp     short loc_11CAB
11CA6:	mov     eax, 0
11CAB:	mov     [rbp+s.st_size], rax
11CB2:	jmp     loc_11D64
11CB7:	mov     eax, [rbp+s_tmp.st_mode]
11CBD:	and     eax, 0F000h
11CC2:	cmp     eax, 4000h
11CC7:	setnz   sil
11CCB:	mov     rax, [rbp+this]
11CD2:	mov     rcx, [rax+38h]
11CD6:	mov     eax, [rbp+entry]
11CDC:	movsxd  rdx, eax
11CDF:	mov     rax, rdx
11CE2:	shl     rax, 2
11CE6:	add     rax, rdx
11CE9:	shl     rax, 4
11CED:	add     rax, rcx
11CF0:	mov     edx, esi
11CF2:	mov     [rax+48h], dl
11CF5:	mov     rax, [rbp+s_tmp.st_size]
11CF9:	mov     [rbp+s.st_size], rax
11D00:	mov     eax, [rbp+s_tmp.st_mode]
11D06:	and     eax, 49h
11D09:	test    eax, eax
11D0B:	setnz   sil
11D0F:	mov     rax, [rbp+this]
11D16:	mov     rcx, [rax+38h]
11D1A:	mov     eax, [rbp+entry]
11D20:	movsxd  rdx, eax
11D23:	mov     rax, rdx
11D26:	shl     rax, 2
11D2A:	add     rax, rdx
11D2D:	shl     rax, 4
11D31:	add     rax, rcx
11D34:	mov     edx, esi
11D36:	mov     [rax+4Ah], dl
11D39:	jmp     short loc_11D64
11D3B:	mov     rax, [rbp+this]
11D42:	mov     rcx, [rax+38h]
11D46:	mov     eax, [rbp+entry]
11D4C:	movsxd  rdx, eax
11D4F:	mov     rax, rdx
11D52:	shl     rax, 2
11D56:	add     rax, rdx
11D59:	shl     rax, 4
11D5D:	add     rax, rcx
11D60:	mov     byte ptr [rax+48h], 1
11D64:	mov     rax, [rbp+this]
11D6B:	mov     rcx, [rax+38h]
11D6F:	mov     eax, [rbp+entry]
11D75:	movsxd  rdx, eax
11D78:	mov     rax, rdx
11D7B:	shl     rax, 2
11D7F:	add     rax, rdx
11D82:	shl     rax, 4
11D86:	lea     rdx, [rcx+rax]
11D8A:	mov     rax, [rbp+s.st_size]
11D91:	mov     [rdx+8], rax
11D95:	jmp     loc_11E3B
11D9A:	mov     rax, [rbp+this]
11DA1:	mov     rcx, [rax+38h]
11DA5:	mov     eax, [rbp+entry]
11DAB:	movsxd  rdx, eax
11DAE:	mov     rax, rdx
11DB1:	shl     rax, 2
11DB5:	add     rax, rdx
11DB8:	shl     rax, 4
11DBC:	add     rax, rcx
11DBF:	mov     byte ptr [rax+48h], 2
11DC3:	mov     rax, [rbp+this]
11DCA:	mov     rcx, [rax+38h]
11DCE:	mov     eax, [rbp+entry]
11DD4:	movsxd  rdx, eax
11DD7:	mov     rax, rdx
11DDA:	shl     rax, 2
11DDE:	add     rax, rdx
11DE1:	shl     rax, 4
11DE5:	add     rax, rcx
11DE8:	mov     rax, [rax]
11DEB:	mov     rdi, rax; filename
11DEE:	call    xreadlink
11DF3:	mov     [rbp+sz], eax
11DF9:	cmp     [rbp+sz], 0FFFFFFFFh
11E00:	jz      short loc_11E0D
11E02:	mov     eax, [rbp+sz]
11E08:	movsxd  rdx, eax
11E0B:	jmp     short loc_11E12
11E0D:	mov     edx, 0
11E12:	mov     rax, [rbp+this]
11E19:	mov     rsi, [rax+38h]
11E1D:	mov     eax, [rbp+entry]
11E23:	movsxd  rcx, eax
11E26:	mov     rax, rcx
11E29:	shl     rax, 2
11E2D:	add     rax, rcx
11E30:	shl     rax, 4
11E34:	add     rax, rsi
11E37:	mov     [rax+8], rdx
11E3B:	mov     eax, [rbp+s.st_uid]
11E41:	mov     edi, eax; uid
11E43:	call    getuser
11E48:	mov     [rbp+owner], rax
11E4F:	cmp     [rbp+owner], 0
11E57:	jz      loc_11F07
11E5D:	mov     rax, [rbp+owner]
11E64:	mov     rdi, rax; s
11E67:	call    _strlen
11E6C:	cmp     rax, 7
11E70:	jbe     short loc_11E87
11E72:	mov     rax, [rbp+owner]
11E79:	mov     rdi, rax; s
11E7C:	call    _strlen
11E81:	lea     rdx, [rax+1]
11E85:	jmp     short loc_11E8C
11E87:	mov     edx, 9
11E8C:	mov     rax, [rbp+this]
11E93:	mov     rsi, [rax+38h]
11E97:	mov     eax, [rbp+entry]
11E9D:	movsxd  rcx, eax
11EA0:	mov     rax, rcx
11EA3:	shl     rax, 2
11EA7:	add     rax, rcx
11EAA:	shl     rax, 4
11EAE:	lea     rbx, [rsi+rax]
11EB2:	mov     rdi, rdx; n
11EB5:	call    xmalloc
11EBA:	mov     [rbx+28h], rax
11EBE:	mov     rax, [rbp+this]
11EC5:	mov     rcx, [rax+38h]
11EC9:	mov     eax, [rbp+entry]
11ECF:	movsxd  rdx, eax
11ED2:	mov     rax, rdx
11ED5:	shl     rax, 2
11ED9:	add     rax, rdx
11EDC:	shl     rax, 4
11EE0:	add     rax, rcx
11EE3:	mov     rax, [rax+28h]
11EE7:	mov     rdx, [rbp+owner]
11EEE:	lea     rcx, a7s; '%-7s'
11EF5:	mov     rsi, rcx; format
11EF8:	mov     rdi, rax; s
11EFB:	mov     eax, 0
11F00:	call    _sprintf
11F05:	jmp     short loc_11F81
11F07:	mov     rax, [rbp+this]
11F0E:	mov     rcx, [rax+38h]
11F12:	mov     eax, [rbp+entry]
11F18:	movsxd  rdx, eax
11F1B:	mov     rax, rdx
11F1E:	shl     rax, 2
11F22:	add     rax, rdx
11F25:	shl     rax, 4
11F29:	lea     rbx, [rcx+rax]
11F2D:	mov     edi, 20h ; ' '; n
11F32:	call    xmalloc
11F37:	mov     [rbx+28h], rax
11F3B:	mov     edx, [rbp+s.st_uid]
11F41:	mov     rax, [rbp+this]
11F48:	mov     rsi, [rax+38h]
11F4C:	mov     eax, [rbp+entry]
11F52:	movsxd  rcx, eax
11F55:	mov     rax, rcx
11F58:	shl     rax, 2
11F5C:	add     rax, rcx
11F5F:	shl     rax, 4
11F63:	add     rax, rsi
11F66:	mov     rax, [rax+28h]
11F6A:	lea     rcx, a7u; '%-7u'
11F71:	mov     rsi, rcx; format
11F74:	mov     rdi, rax; s
11F77:	mov     eax, 0
11F7C:	call    _sprintf
11F81:	mov     eax, [rbp+s.st_gid]
11F87:	mov     edi, eax; gid
11F89:	call    getgroup
11F8E:	mov     [rbp+group], rax
11F95:	cmp     [rbp+group], 0
11F9D:	jz      loc_1204D
11FA3:	mov     rax, [rbp+group]
11FAA:	mov     rdi, rax; s
11FAD:	call    _strlen
11FB2:	cmp     rax, 7
11FB6:	jbe     short loc_11FCD
11FB8:	mov     rax, [rbp+group]
11FBF:	mov     rdi, rax; s
11FC2:	call    _strlen
11FC7:	lea     rdx, [rax+1]
11FCB:	jmp     short loc_11FD2
11FCD:	mov     edx, 9
11FD2:	mov     rax, [rbp+this]
11FD9:	mov     rsi, [rax+38h]
11FDD:	mov     eax, [rbp+entry]
11FE3:	movsxd  rcx, eax
11FE6:	mov     rax, rcx
11FE9:	shl     rax, 2
11FED:	add     rax, rcx
11FF0:	shl     rax, 4
11FF4:	lea     rbx, [rsi+rax]
11FF8:	mov     rdi, rdx; n
11FFB:	call    xmalloc
12000:	mov     [rbx+30h], rax
12004:	mov     rax, [rbp+this]
1200B:	mov     rcx, [rax+38h]
1200F:	mov     eax, [rbp+entry]
12015:	movsxd  rdx, eax
12018:	mov     rax, rdx
1201B:	shl     rax, 2
1201F:	add     rax, rdx
12022:	shl     rax, 4
12026:	add     rax, rcx
12029:	mov     rax, [rax+30h]
1202D:	mov     rdx, [rbp+group]
12034:	lea     rcx, a7s; '%-7s'
1203B:	mov     rsi, rcx; format
1203E:	mov     rdi, rax; s
12041:	mov     eax, 0
12046:	call    _sprintf
1204B:	jmp     short loc_120C7
1204D:	mov     rax, [rbp+this]
12054:	mov     rcx, [rax+38h]
12058:	mov     eax, [rbp+entry]
1205E:	movsxd  rdx, eax
12061:	mov     rax, rdx
12064:	shl     rax, 2
12068:	add     rax, rdx
1206B:	shl     rax, 4
1206F:	lea     rbx, [rcx+rax]
12073:	mov     edi, 20h ; ' '; n
12078:	call    xmalloc
1207D:	mov     [rbx+30h], rax
12081:	mov     edx, [rbp+s.st_gid]
12087:	mov     rax, [rbp+this]
1208E:	mov     rsi, [rax+38h]
12092:	mov     eax, [rbp+entry]
12098:	movsxd  rcx, eax
1209B:	mov     rax, rcx
1209E:	shl     rax, 2
120A2:	add     rax, rcx
120A5:	shl     rax, 4
120A9:	add     rax, rsi
120AC:	mov     rax, [rax+30h]
120B0:	lea     rcx, a7u; '%-7u'
120B7:	mov     rsi, rcx; format
120BA:	mov     rdi, rax; s
120BD:	mov     eax, 0
120C2:	call    _sprintf
120C7:	mov     rax, [rbp+this]
120CE:	mov     rcx, [rax+38h]
120D2:	mov     eax, [rbp+entry]
120D8:	movsxd  rdx, eax
120DB:	mov     rax, rdx
120DE:	shl     rax, 2
120E2:	add     rax, rdx
120E5:	shl     rax, 4
120E9:	lea     rdx, [rcx+rax]
120ED:	mov     rax, [rbp+s.st_mtim.tv_sec]
120F4:	mov     [rdx+20h], rax
120F8:	lea     rax, [rbp+s]
120FF:	add     rax, 58h ; 'X'
12103:	mov     rdi, rax; timer
12106:	call    _localtime
1210B:	mov     [rbp+time], rax
12112:	mov     rax, [rbp+time]
12119:	mov     edx, [rax+8]
1211C:	movsxd  rax, edx
1211F:	imul    rax, 2AAAAAABh
12126:	shr     rax, 20h
1212A:	sar     eax, 1
1212C:	mov     ecx, edx
1212E:	sar     ecx, 1Fh
12131:	sub     eax, ecx
12133:	mov     [rbp+hour], eax
12139:	mov     ecx, [rbp+hour]
1213F:	mov     eax, ecx
12141:	add     eax, eax
12143:	add     eax, ecx
12145:	shl     eax, 2
12148:	sub     edx, eax
1214A:	mov     [rbp+hour], edx
12150:	cmp     [rbp+hour], 0
12157:	jnz     short loc_12163
12159:	mov     [rbp+hour], 0Ch
12163:	mov     rax, [rbp+time]
1216A:	mov     eax, [rax+8]
1216D:	cmp     eax, 0Bh
12170:	jg      short loc_1217A
12172:	mov     r9d, 61h ; 'a'
12178:	jmp     short loc_12180
1217A:	mov     r9d, 70h ; 'p'
12180:	mov     rax, [rbp+time]
12187:	mov     edi, [rax+4]
1218A:	mov     rax, [rbp+time]
12191:	mov     eax, [rax+14h]
12194:	movsxd  rdx, eax
12197:	imul    rdx, 51EB851Fh
1219E:	shr     rdx, 20h
121A2:	sar     edx, 5
121A5:	mov     ecx, eax
121A7:	sar     ecx, 1Fh
121AA:	sub     edx, ecx
121AC:	imul    ecx, edx, 64h ; 'd'
121AF:	sub     eax, ecx
121B1:	mov     edx, eax
121B3:	mov     rax, [rbp+time]
121BA:	mov     ecx, [rax+0Ch]
121BD:	mov     rax, [rbp+time]
121C4:	mov     eax, [rax+10h]
121C7:	lea     esi, [rax+1]
121CA:	mov     rax, [rbp+this]
121D1:	mov     r10, [rax+38h]
121D5:	mov     eax, [rbp+entry]
121DB:	movsxd  r8, eax
121DE:	mov     rax, r8
121E1:	shl     rax, 2
121E5:	add     rax, r8
121E8:	shl     rax, 4
121EC:	add     rax, r10
121EF:	add     rax, 38h ; '8'
121F3:	mov     r8d, [rbp+hour]
121FA:	push    r9
121FC:	push    rdi
121FD:	mov     r9d, r8d
12200:	mov     r8d, edx
12203:	mov     edx, esi
12205:	lea     rsi, a2d02d02d2d02dC; '%2d-%02d-%02d %2d:%02d%c'
1220C:	mov     rdi, rax; s
1220F:	mov     eax, 0
12214:	call    _sprintf
12219:	add     rsp, 10h
1221D:	nop
1221E:	mov     rax, [rbp+var_18]
12222:	sub     rax, fs:28h
1222B:	jz      short loc_12232
1222D:	call    ___stack_chk_fail
12232:	mov     rbx, [rbp+var_8]
12236:	leave
12237:	retn
12238:	endbr64
1223C:	push    rbp
1223D:	mov     rbp, rsp
12240:	push    rbx
12241:	sub     rsp, 1E8h
12248:	mov     [rbp+this], rdi
1224F:	mov     [rbp+directory], rsi
12256:	mov     [rbp+verify], edx
1225C:	mov     rax, fs:28h
12265:	mov     [rbp+var_18], rax
12269:	xor     eax, eax
1226B:	mov     [rbp+dotdot_found], 0
12275:	mov     [rbp+old_dir_entry], 0
12280:	mov     [rbp+old_entries], 0
1228A:	mov     [rbp+backdir_index], 0FFFFFFFFh
12294:	mov     rax, [rbp+directory]
1229B:	mov     rdi, rax; name
1229E:	call    _opendir
122A3:	mov     [rbp+tmpdir], rax
122AA:	cmp     [rbp+tmpdir], 0
122B2:	jnz     loc_1238B
122B8:	mov     rax, [rbp+directory]
122BF:	lea     rdx, asc_285DE; '..'
122C6:	mov     rsi, rdx; s2
122C9:	mov     rdi, rax; s1
122CC:	call    _strcmp
122D1:	test    eax, eax
122D3:	jz      short loc_122DF
122D5:	mov     eax, 0
122DA:	jmp     loc_13107
122DF:	mov     eax, 0
122E4:	call    xgetcwd
122E9:	mov     [rbp+directory], rax
122F0:	cmp     [rbp+directory], 0
122F8:	jnz     short loc_12352
122FA:	mov     rax, [rbp+this]
12301:	mov     rax, [rax+18h]
12305:	mov     rdi, rax; string
12308:	call    xstrdup
1230D:	mov     [rbp+directory], rax
12314:	mov     rax, [rbp+directory]
1231B:	mov     esi, 2Fh ; '/'; c
12320:	mov     rdi, rax; s
12323:	call    _strrchr
12328:	mov     [rbp+ptr], rax
1232F:	cmp     [rbp+ptr], 0
12337:	jnz     short loc_12348
12339:	lea     rax, aBadDirectory; 'bad directory'
12340:	mov     rdi, rax; postmsg
12343:	call    fatal
12348:	mov     rax, [rbp+ptr]
1234F:	mov     byte ptr [rax], 0
12352:	mov     rax, [rbp+directory]
12359:	mov     rdi, rax; name
1235C:	call    _opendir
12361:	mov     [rbp+tmpdir], rax
12368:	cmp     [rbp+tmpdir], 0
12370:	jnz     short loc_1238B
12372:	mov     rax, [rbp+directory]
12379:	mov     rdi, rax; pointer
1237C:	call    xfree
12381:	mov     eax, 0
12386:	jmp     loc_13107
1238B:	mov     rax, [rbp+directory]
12392:	mov     rdi, rax; path
12395:	call    _chdir
1239A:	cmp     eax, 0FFFFFFFFh
1239D:	jnz     short loc_123B8
1239F:	mov     rax, [rbp+tmpdir]
123A6:	mov     rdi, rax; dirp
123A9:	call    _closedir
123AE:	mov     eax, 0
123B3:	jmp     loc_13107
123B8:	mov     rax, [rbp+this]
123BF:	mov     rax, [rax]
123C2:	test    rax, rax
123C5:	jz      short loc_123D9
123C7:	mov     rax, [rbp+this]
123CE:	mov     rax, [rax]
123D1:	mov     rdi, rax; dirp
123D4:	call    _closedir
123D9:	mov     rax, [rbp+this]
123E0:	mov     rdx, [rbp+tmpdir]
123E7:	mov     [rax], rdx
123EA:	mov     rax, [rbp+this]
123F1:	mov     rax, [rax+78h]
123F5:	add     rax, 1
123F9:	mov     rdi, rax; n
123FC:	call    xmalloc
12401:	mov     [rbp+old_path], rax
12408:	mov     rax, [rbp+this]
1240F:	mov     rdx, [rax+18h]
12413:	mov     rax, [rbp+old_path]
1241A:	mov     rsi, rdx; src
1241D:	mov     rdi, rax; dest
12420:	call    _strcpy
12425:	mov     rax, [rbp+directory]
1242C:	movzx   eax, byte ptr [rax]
1242F:	cmp     al, 2Fh ; '/'
12431:	jnz     short loc_12452
12433:	mov     rax, [rbp+directory]
1243A:	mov     rdi, rax; string
1243D:	call    xstrdup
12442:	mov     rdx, [rbp+this]
12449:	mov     [rdx+18h], rax
1244D:	jmp     loc_12590
12452:	mov     eax, 0
12457:	call    xgetcwd
1245C:	mov     [rbp+path], rax
12463:	cmp     [rbp+path], 0
1246B:	jz      short loc_12497
1246D:	mov     rax, [rbp+this]
12474:	mov     rax, [rax+18h]
12478:	mov     rdi, rax; pointer
1247B:	call    xfree
12480:	mov     rax, [rbp+this]
12487:	mov     rdx, [rbp+path]
1248E:	mov     [rax+18h], rdx
12492:	jmp     loc_12590
12497:	mov     rax, [rbp+this]
1249E:	mov     rax, [rax+18h]
124A2:	mov     rdi, rax; s
124A5:	call    _strlen
124AA:	mov     rdx, [rbp+this]
124B1:	mov     [rdx+78h], rax
124B5:	mov     rax, [rbp+directory]
124BC:	lea     rdx, asc_285DE; '..'
124C3:	mov     rsi, rdx; s2
124C6:	mov     rdi, rax; s1
124C9:	call    _strcmp
124CE:	test    eax, eax
124D0:	jnz     short loc_12516
124D2:	mov     rax, [rbp+this]
124D9:	mov     rax, [rax+18h]
124DD:	mov     esi, 2Fh ; '/'; c
124E2:	mov     rdi, rax; s
124E5:	call    _strrchr
124EA:	mov     [rbp+ptr_0], rax
124F1:	cmp     [rbp+ptr_0], 0
124F9:	jnz     short loc_1250A
124FB:	lea     rax, aBadPath; 'bad path'
12502:	mov     rdi, rax; postmsg
12505:	call    fatal
1250A:	mov     rax, [rbp+ptr_0]
12511:	mov     byte ptr [rax], 0
12514:	jmp     short loc_12590
12516:	mov     rax, [rbp+this]
1251D:	mov     rbx, [rax+78h]
12521:	mov     rax, [rbp+directory]
12528:	mov     rdi, rax; s
1252B:	call    _strlen
12530:	add     rax, rbx
12533:	lea     rdx, [rax+2]
12537:	mov     rax, [rbp+this]
1253E:	mov     rax, [rax+18h]
12542:	mov     rsi, rdx; n
12545:	mov     rdi, rax; p
12548:	call    xrealloc
1254D:	mov     rdx, [rbp+this]
12554:	mov     [rdx+18h], rax
12558:	mov     rax, [rbp+this]
1255F:	mov     rbx, [rax+18h]
12563:	mov     rdi, rbx; s
12566:	call    _strlen
1256B:	add     rax, rbx
1256E:	mov     word ptr [rax], 2Fh ; '/'
12573:	mov     rax, [rbp+this]
1257A:	mov     rax, [rax+18h]
1257E:	mov     rdx, [rbp+directory]
12585:	mov     rsi, rdx; src
12588:	mov     rdi, rax; dest
1258B:	call    _strcat
12590:	mov     rax, [rbp+this]
12597:	mov     rax, [rax+18h]
1259B:	mov     rdi, rax; path
1259E:	call    minimize_path
125A3:	mov     rax, [rbp+this]
125AA:	mov     rax, [rax+18h]
125AE:	mov     rdi, rax; s
125B1:	call    _strlen
125B6:	mov     rdx, [rbp+this]
125BD:	mov     [rdx+78h], rax
125C1:	mov     rax, [rbp+this]
125C8:	mov     rax, [rax+18h]
125CC:	lea     rdx, [rbp+s]
125D3:	mov     rsi, rdx; buf
125D6:	mov     rdi, rax; filename
125D9:	call    xstat
125DE:	mov     rax, [rbp+s.st_size]
125E2:	cmp     rax, 7FFh
125E8:	jle     short loc_12603
125EA:	mov     rax, cs:panel_il_message
125F1:	mov     rdi, rax; message
125F4:	call    il_message
125F9:	mov     eax, 0
125FE:	call    tty_update
12603:	lea     rax, [rbp+fstat]
1260A:	mov     rsi, rax; buf
1260D:	lea     rax, file; '.'
12614:	mov     rdi, rax; file
12617:	call    _statfs
1261C:	mov     rax, [rbp+fstat.f_type]
12623:	cmp     rax, 4D44h
12629:	setz    al
1262C:	movzx   edx, al
1262F:	mov     rax, [rbp+this]
12636:	mov     [rax+10h], edx
12639:	cmp     [rbp+verify], 0
12640:	jz      short loc_12678
12642:	mov     rax, [rbp+this]
12649:	mov     eax, [rax+70h]
1264C:	test    eax, eax
1264E:	jz      short loc_12678
12650:	mov     rax, [rbp+this]
12657:	mov     rdx, [rax+18h]
1265B:	mov     rax, [rbp+old_path]
12662:	mov     rsi, rdx; s2
12665:	mov     rdi, rax; s1
12668:	call    _strcmp
1266D:	test    eax, eax
1266F:	jnz     short loc_12678
12671:	mov     eax, 1
12676:	jmp     short loc_1267D
12678:	mov     eax, 0
1267D:	mov     [rbp+verify], eax
12683:	cmp     [rbp+verify], 0
1268A:	jz      short loc_126C2
1268C:	mov     rax, [rbp+this]
12693:	mov     rax, [rax+38h]
12697:	mov     [rbp+old_dir_entry], rax
1269E:	mov     rax, [rbp+this]
126A5:	mov     eax, [rax+68h]
126A8:	mov     [rbp+old_entries], eax
126AE:	mov     rax, [rbp+this]
126B5:	mov     qword ptr [rax+38h], 0
126BD:	jmp     loc_127AD
126C2:	mov     rax, [rbp+this]
126C9:	mov     rax, [rax+38h]
126CD:	test    rax, rax
126D0:	jz      loc_127AD
126D6:	mov     [rbp+entry], 0
126E0:	jmp     loc_12775
126E5:	mov     rax, [rbp+this]
126EC:	mov     rcx, [rax+38h]
126F0:	mov     eax, [rbp+entry]
126F6:	movsxd  rdx, eax
126F9:	mov     rax, rdx
126FC:	shl     rax, 2
12700:	add     rax, rdx
12703:	shl     rax, 4
12707:	add     rax, rcx
1270A:	mov     rax, [rax]
1270D:	test    rax, rax
12710:	jz      short loc_1276E
12712:	mov     rax, [rbp+this]
12719:	mov     rcx, [rax+38h]
1271D:	mov     eax, [rbp+entry]
12723:	movsxd  rdx, eax
12726:	mov     rax, rdx
12729:	shl     rax, 2
1272D:	add     rax, rdx
12730:	shl     rax, 4
12734:	add     rax, rcx
12737:	mov     rax, [rax]
1273A:	mov     rdi, rax; pointer
1273D:	call    xfree
12742:	mov     rax, [rbp+this]
12749:	mov     rcx, [rax+38h]
1274D:	mov     eax, [rbp+entry]
12753:	movsxd  rdx, eax
12756:	mov     rax, rdx
12759:	shl     rax, 2
1275D:	add     rax, rdx
12760:	shl     rax, 4
12764:	add     rax, rcx
12767:	mov     qword ptr [rax], 0
1276E:	add     [rbp+entry], 1
12775:	mov     rax, [rbp+this]
1277C:	mov     eax, [rax+68h]
1277F:	cmp     [rbp+entry], eax
12785:	jl      loc_126E5
1278B:	mov     rax, [rbp+this]
12792:	mov     rax, [rax+38h]
12796:	mov     rdi, rax; pointer
12799:	call    xfree
1279E:	mov     rax, [rbp+this]
127A5:	mov     qword ptr [rax+38h], 0
127AD:	mov     edi, 50h ; 'P'; n
127B2:	call    xmalloc
127B7:	mov     rdx, [rbp+this]
127BE:	mov     [rdx+38h], rax
127C2:	mov     rax, [rbp+this]
127C9:	mov     dword ptr [rax+70h], 0
127D0:	mov     rax, [rbp+this]
127D7:	mov     dword ptr [rax+30h], 0
127DE:	mov     rax, [rbp+this]
127E5:	mov     dword ptr [rax+68h], 0
127EC:	jmp     loc_12B50
127F1:	mov     rax, [rbp+d]
127F8:	movzx   eax, byte ptr [rax+13h]
127FC:	cmp     al, 2Eh ; '.'
127FE:	jnz     short loc_1282B
12800:	mov     rax, [rbp+d]
12807:	movzx   eax, byte ptr [rax+14h]
1280B:	test    al, al
1280D:	jnz     short loc_1282B
1280F:	mov     rax, [rbp+this]
12816:	mov     eax, [rax+68h]
12819:	lea     edx, [rax-1]
1281C:	mov     rax, [rbp+this]
12823:	mov     [rax+68h], edx
12826:	jmp     loc_12B39
1282B:	mov     rax, [rbp+d]
12832:	add     rax, 13h
12836:	lea     rdx, asc_285DE; '..'
1283D:	mov     rsi, rdx; s2
12840:	mov     rdi, rax; s1
12843:	call    _strcmp
12848:	test    eax, eax
1284A:	jnz     short loc_1289A
1284C:	mov     [rbp+dotdot_found], 1
12856:	mov     rax, [rbp+this]
1285D:	mov     rax, [rax+18h]
12861:	add     rax, 1
12865:	movzx   eax, byte ptr [rax]
12868:	test    al, al
1286A:	jz      short loc_1287E
1286C:	mov     rax, [rbp+this]
12873:	mov     eax, [rax+68h]
12876:	mov     [rbp+backdir_index], eax
1287C:	jmp     short loc_1289A
1287E:	mov     rax, [rbp+this]
12885:	mov     eax, [rax+68h]
12888:	lea     edx, [rax-1]
1288B:	mov     rax, [rbp+this]
12892:	mov     [rax+68h], edx
12895:	jmp     loc_12B39
1289A:	mov     rax, [rbp+this]
128A1:	mov     eax, [rax+68h]
128A4:	add     eax, 1
128A7:	movsxd  rdx, eax
128AA:	mov     rax, rdx
128AD:	shl     rax, 2
128B1:	add     rax, rdx
128B4:	shl     rax, 4
128B8:	mov     rdx, rax
128BB:	mov     rax, [rbp+this]
128C2:	mov     rax, [rax+38h]
128C6:	mov     rsi, rdx; n
128C9:	mov     rdi, rax; p
128CC:	call    xrealloc
128D1:	mov     rdx, [rbp+this]
128D8:	mov     [rdx+38h], rax
128DC:	cmp     [rbp+verify], 0
128E3:	jz      loc_12A04
128E9:	mov     [rbp+entry], 0
128F3:	jmp     loc_129B5
128F8:	mov     eax, [rbp+entry]
128FE:	movsxd  rdx, eax
12901:	mov     rax, rdx
12904:	shl     rax, 2
12908:	add     rax, rdx
1290B:	shl     rax, 4
1290F:	mov     rdx, rax
12912:	mov     rax, [rbp+old_dir_entry]
12919:	add     rax, rdx
1291C:	mov     rax, [rax]
1291F:	mov     rdx, [rbp+d]
12926:	add     rdx, 13h
1292A:	mov     rsi, rax; s2
1292D:	mov     rdi, rdx; s1
12930:	call    _strcmp
12935:	test    eax, eax
12937:	jnz     short loc_129AE
12939:	mov     eax, [rbp+entry]
1293F:	movsxd  rdx, eax
12942:	mov     rax, rdx
12945:	shl     rax, 2
12949:	add     rax, rdx
1294C:	shl     rax, 4
12950:	mov     rdx, rax
12953:	mov     rax, [rbp+old_dir_entry]
1295A:	lea     rcx, [rdx+rax]
1295E:	mov     rax, [rbp+this]
12965:	mov     rsi, [rax+38h]
12969:	mov     rax, [rbp+this]
12970:	mov     eax, [rax+68h]
12973:	movsxd  rdx, eax
12976:	mov     rax, rdx
12979:	shl     rax, 2
1297D:	add     rax, rdx
12980:	shl     rax, 4
12984:	add     rax, rsi
12987:	movzx   edx, byte ptr [rcx+49h]
1298B:	mov     [rax+49h], dl
1298E:	movzx   edx, byte ptr [rax+49h]
12992:	mov     rax, [rbp+this]
12999:	mov     ecx, [rax+70h]
1299C:	movsx   eax, dl
1299F:	lea     edx, [rcx+rax]
129A2:	mov     rax, [rbp+this]
129A9:	mov     [rax+70h], edx
129AC:	jmp     short loc_129C7
129AE:	add     [rbp+entry], 1
129B5:	mov     eax, [rbp+entry]
129BB:	cmp     eax, [rbp+old_entries]
129C1:	jl      loc_128F8
129C7:	mov     eax, [rbp+entry]
129CD:	cmp     eax, [rbp+old_entries]
129D3:	jnz     short loc_12A31
129D5:	mov     rax, [rbp+this]
129DC:	mov     rcx, [rax+38h]
129E0:	mov     rax, [rbp+this]
129E7:	mov     eax, [rax+68h]
129EA:	movsxd  rdx, eax
129ED:	mov     rax, rdx
129F0:	shl     rax, 2
129F4:	add     rax, rdx
129F7:	shl     rax, 4
129FB:	add     rax, rcx
129FE:	mov     byte ptr [rax+49h], 0
12A02:	jmp     short loc_12A31
12A04:	mov     rax, [rbp+this]
12A0B:	mov     rcx, [rax+38h]
12A0F:	mov     rax, [rbp+this]
12A16:	mov     eax, [rax+68h]
12A19:	movsxd  rdx, eax
12A1C:	mov     rax, rdx
12A1F:	shl     rax, 2
12A23:	add     rax, rdx
12A26:	shl     rax, 4
12A2A:	add     rax, rcx
12A2D:	mov     byte ptr [rax+49h], 0
12A31:	mov     rax, [rbp+this]
12A38:	mov     rcx, [rax+38h]
12A3C:	mov     rax, [rbp+this]
12A43:	mov     eax, [rax+68h]
12A46:	movsxd  rdx, eax
12A49:	mov     rax, rdx
12A4C:	shl     rax, 2
12A50:	add     rax, rdx
12A53:	shl     rax, 4
12A57:	add     rax, rcx
12A5A:	mov     byte ptr [rax+4Bh], 0
12A5E:	mov     rax, [rbp+d]
12A65:	add     rax, 13h
12A69:	mov     rdi, rax; s
12A6C:	call    _strlen
12A71:	mov     [rbp+namelen], eax
12A77:	mov     eax, [rbp+namelen]
12A7D:	add     eax, 1
12A80:	movsxd  rdx, eax
12A83:	mov     rax, [rbp+this]
12A8A:	mov     rsi, [rax+38h]
12A8E:	mov     rax, [rbp+this]
12A95:	mov     eax, [rax+68h]
12A98:	movsxd  rcx, eax
12A9B:	mov     rax, rcx
12A9E:	shl     rax, 2
12AA2:	add     rax, rcx
12AA5:	shl     rax, 4
12AA9:	lea     rbx, [rsi+rax]
12AAD:	mov     rdi, rdx; n
12AB0:	call    xmalloc
12AB5:	mov     [rbx], rax
12AB8:	mov     rax, [rbp+d]
12ABF:	lea     rdx, [rax+13h]
12AC3:	mov     rax, [rbp+this]
12ACA:	mov     rsi, [rax+38h]
12ACE:	mov     rax, [rbp+this]
12AD5:	mov     eax, [rax+68h]
12AD8:	movsxd  rcx, eax
12ADB:	mov     rax, rcx
12ADE:	shl     rax, 2
12AE2:	add     rax, rcx
12AE5:	shl     rax, 4
12AE9:	add     rax, rsi
12AEC:	mov     rax, [rax]
12AEF:	mov     rsi, rdx; src
12AF2:	mov     rdi, rax; dest
12AF5:	call    _strcpy
12AFA:	mov     rax, [rbp+this]
12B01:	mov     edx, [rax+30h]
12B04:	mov     eax, [rbp+namelen]
12B0A:	cmp     edx, eax
12B0C:	cmovl   edx, eax
12B0F:	mov     rax, [rbp+this]
12B16:	mov     [rax+30h], edx
12B19:	mov     rax, [rbp+this]
12B20:	mov     edx, [rax+68h]
12B23:	mov     rax, [rbp+this]
12B2A:	mov     esi, edx; entry
12B2C:	mov     rdi, rax; this
12B2F:	mov     eax, 0
12B34:	call    panel_load_inode
12B39:	mov     rax, [rbp+this]
12B40:	mov     eax, [rax+68h]
12B43:	lea     edx, [rax+1]
12B46:	mov     rax, [rbp+this]
12B4D:	mov     [rax+68h], edx
12B50:	mov     rax, [rbp+this]
12B57:	mov     rax, [rax]
12B5A:	mov     rdi, rax; dirp
12B5D:	call    _readdir
12B62:	mov     [rbp+d], rax
12B69:	cmp     [rbp+d], 0
12B71:	jnz     loc_127F1
12B77:	cmp     [rbp+dotdot_found], 0
12B7E:	jz      short loc_12BF6
12B80:	cmp     [rbp+backdir_index], 0FFFFFFFFh
12B87:	jz      loc_12DC5
12B8D:	mov     rax, [rbp+this]
12B94:	mov     rcx, [rax+38h]
12B98:	mov     eax, [rbp+backdir_index]
12B9E:	movsxd  rdx, eax
12BA1:	mov     rax, rdx
12BA4:	shl     rax, 2
12BA8:	add     rax, rdx
12BAB:	shl     rax, 4
12BAF:	add     rax, rcx
12BB2:	mov     eax, [rax+10h]
12BB5:	and     eax, 0F000h
12BBA:	cmp     eax, 4000h
12BBF:	jz      loc_12DC5
12BC5:	mov     rax, [rbp+this]
12BCC:	mov     rcx, [rax+38h]
12BD0:	mov     eax, [rbp+backdir_index]
12BD6:	movsxd  rdx, eax
12BD9:	mov     rax, rdx
12BDC:	shl     rax, 2
12BE0:	add     rax, rdx
12BE3:	shl     rax, 4
12BE7:	add     rax, rcx
12BEA:	mov     dword ptr [rax+10h], 4000h
12BF1:	jmp     loc_12DC5
12BF6:	mov     rax, [rbp+this]
12BFD:	mov     eax, [rax+68h]
12C00:	add     eax, 1
12C03:	movsxd  rdx, eax
12C06:	mov     rax, rdx
12C09:	shl     rax, 2
12C0D:	add     rax, rdx
12C10:	shl     rax, 4
12C14:	mov     rdx, rax
12C17:	mov     rax, [rbp+this]
12C1E:	mov     rax, [rax+38h]
12C22:	mov     rsi, rdx; n
12C25:	mov     rdi, rax; p
12C28:	call    xrealloc
12C2D:	mov     rdx, [rbp+this]
12C34:	mov     [rdx+38h], rax
12C38:	mov     rax, [rbp+this]
12C3F:	mov     rcx, [rax+38h]
12C43:	mov     rax, [rbp+this]
12C4A:	mov     eax, [rax+68h]
12C4D:	movsxd  rdx, eax
12C50:	mov     rax, rdx
12C53:	shl     rax, 2
12C57:	add     rax, rdx
12C5A:	shl     rax, 4
12C5E:	add     rax, rcx
12C61:	mov     byte ptr [rax+49h], 0
12C65:	mov     rax, [rbp+this]
12C6C:	mov     rcx, [rax+38h]
12C70:	mov     rax, [rbp+this]
12C77:	mov     eax, [rax+68h]
12C7A:	movsxd  rdx, eax
12C7D:	mov     rax, rdx
12C80:	shl     rax, 2
12C84:	add     rax, rdx
12C87:	shl     rax, 4
12C8B:	add     rax, rcx
12C8E:	mov     byte ptr [rax+4Bh], 1
12C92:	mov     [rbp+namelen], 2
12C9C:	mov     eax, [rbp+namelen]
12CA2:	add     eax, 1
12CA5:	movsxd  rdx, eax
12CA8:	mov     rax, [rbp+this]
12CAF:	mov     rsi, [rax+38h]
12CB3:	mov     rax, [rbp+this]
12CBA:	mov     eax, [rax+68h]
12CBD:	movsxd  rcx, eax
12CC0:	mov     rax, rcx
12CC3:	shl     rax, 2
12CC7:	add     rax, rcx
12CCA:	shl     rax, 4
12CCE:	lea     rbx, [rsi+rax]
12CD2:	mov     rdi, rdx; n
12CD5:	call    xmalloc
12CDA:	mov     [rbx], rax
12CDD:	mov     rax, [rbp+this]
12CE4:	mov     rcx, [rax+38h]
12CE8:	mov     rax, [rbp+this]
12CEF:	mov     eax, [rax+68h]
12CF2:	movsxd  rdx, eax
12CF5:	mov     rax, rdx
12CF8:	shl     rax, 2
12CFC:	add     rax, rdx
12CFF:	shl     rax, 4
12D03:	add     rax, rcx
12D06:	mov     rax, [rax]
12D09:	mov     word ptr [rax], 2E2Eh
12D0E:	mov     byte ptr [rax+2], 0
12D12:	mov     rax, [rbp+this]
12D19:	mov     edx, [rax+30h]
12D1C:	mov     eax, [rbp+namelen]
12D22:	cmp     edx, eax
12D24:	cmovl   edx, eax
12D27:	mov     rax, [rbp+this]
12D2E:	mov     [rax+30h], edx
12D31:	mov     rax, [rbp+this]
12D38:	mov     edx, [rax+68h]
12D3B:	mov     rax, [rbp+this]
12D42:	mov     esi, edx; entry
12D44:	mov     rdi, rax; this
12D47:	mov     eax, 0
12D4C:	call    panel_load_inode
12D51:	mov     rax, [rbp+this]
12D58:	mov     rcx, [rax+38h]
12D5C:	mov     rax, [rbp+this]
12D63:	mov     eax, [rax+68h]
12D66:	movsxd  rdx, eax
12D69:	mov     rax, rdx
12D6C:	shl     rax, 2
12D70:	add     rax, rdx
12D73:	shl     rax, 4
12D77:	add     rax, rcx
12D7A:	mov     dword ptr [rax+10h], 4000h
12D81:	mov     rax, [rbp+this]
12D88:	mov     rcx, [rax+38h]
12D8C:	mov     rax, [rbp+this]
12D93:	mov     eax, [rax+68h]
12D96:	movsxd  rdx, eax
12D99:	mov     rax, rdx
12D9C:	shl     rax, 2
12DA0:	add     rax, rdx
12DA3:	shl     rax, 4
12DA7:	add     rax, rcx
12DAA:	mov     byte ptr [rax+48h], 0
12DAE:	mov     rax, [rbp+this]
12DB5:	mov     eax, [rax+68h]
12DB8:	lea     edx, [rax+1]
12DBB:	mov     rax, [rbp+this]
12DC2:	mov     [rax+68h], edx
12DC5:	cmp     [rbp+verify], 0
12DCC:	jz      loc_12E8F
12DD2:	mov     [rbp+entry], 0
12DDC:	jmp     loc_12E6E
12DE1:	mov     eax, [rbp+entry]
12DE7:	movsxd  rdx, eax
12DEA:	mov     rax, rdx
12DED:	shl     rax, 2
12DF1:	add     rax, rdx
12DF4:	shl     rax, 4
12DF8:	mov     rdx, rax
12DFB:	mov     rax, [rbp+old_dir_entry]
12E02:	add     rax, rdx
12E05:	mov     rax, [rax]
12E08:	test    rax, rax
12E0B:	jz      short loc_12E67
12E0D:	mov     eax, [rbp+entry]
12E13:	movsxd  rdx, eax
12E16:	mov     rax, rdx
12E19:	shl     rax, 2
12E1D:	add     rax, rdx
12E20:	shl     rax, 4
12E24:	mov     rdx, rax
12E27:	mov     rax, [rbp+old_dir_entry]
12E2E:	add     rax, rdx
12E31:	mov     rax, [rax]
12E34:	mov     rdi, rax; pointer
12E37:	call    xfree
12E3C:	mov     eax, [rbp+entry]
12E42:	movsxd  rdx, eax
12E45:	mov     rax, rdx
12E48:	shl     rax, 2
12E4C:	add     rax, rdx
12E4F:	shl     rax, 4
12E53:	mov     rdx, rax
12E56:	mov     rax, [rbp+old_dir_entry]
12E5D:	add     rax, rdx
12E60:	mov     qword ptr [rax], 0
12E67:	add     [rbp+entry], 1
12E6E:	mov     eax, [rbp+entry]
12E74:	cmp     eax, [rbp+old_entries]
12E7A:	jl      loc_12DE1
12E80:	mov     rax, [rbp+old_dir_entry]
12E87:	mov     rdi, rax; pointer
12E8A:	call    xfree
12E8F:	mov     rax, [rbp+this]
12E96:	mov     eax, [rax+84h]
12E9C:	mov     cs:CurrentSortMethod, eax
12EA2:	mov     rax, [rbp+this]
12EA9:	mov     dword ptr [rax+74h], 0
12EB0:	cmp     [rbp+backdir_index], 0FFFFFFFFh
12EB7:	jz      loc_1307D
12EBD:	mov     rax, [rbp+this]
12EC4:	mov     rax, [rax+38h]
12EC8:	mov     rcx, [rax]
12ECB:	mov     rbx, [rax+8]
12ECF:	mov     [rbp+tmp.name], rcx
12ED6:	mov     [rbp+tmp.size], rbx
12EDD:	mov     rcx, [rax+10h]
12EE1:	mov     rbx, [rax+18h]
12EE5:	mov     qword ptr [rbp+tmp.mode], rcx
12EEC:	mov     qword ptr [rbp+tmp.gid], rbx
12EF3:	mov     rcx, [rax+20h]
12EF7:	mov     rbx, [rax+28h]
12EFB:	mov     [rbp+tmp.mtime], rcx
12F02:	mov     [rbp+tmp.owner], rbx
12F09:	mov     rcx, [rax+30h]
12F0D:	mov     rbx, [rax+38h]
12F11:	mov     [rbp+tmp.group], rcx
12F18:	mov     qword ptr [rbp+tmp.date], rbx
12F1F:	mov     rdx, [rax+48h]
12F23:	mov     rax, [rax+40h]
12F27:	mov     qword ptr [rbp+tmp.date+8], rax
12F2E:	mov     qword ptr [rbp+tmp.type], rdx
12F35:	mov     rax, [rbp+this]
12F3C:	mov     rcx, [rax+38h]
12F40:	mov     eax, [rbp+backdir_index]
12F46:	movsxd  rdx, eax
12F49:	mov     rax, rdx
12F4C:	shl     rax, 2
12F50:	add     rax, rdx
12F53:	shl     rax, 4
12F57:	lea     rdx, [rcx+rax]
12F5B:	mov     rax, [rbp+this]
12F62:	mov     rax, [rax+38h]
12F66:	mov     rcx, [rdx]
12F69:	mov     rbx, [rdx+8]
12F6D:	mov     [rax], rcx
12F70:	mov     [rax+8], rbx
12F74:	mov     rcx, [rdx+10h]
12F78:	mov     rbx, [rdx+18h]
12F7C:	mov     [rax+10h], rcx
12F80:	mov     [rax+18h], rbx
12F84:	mov     rcx, [rdx+20h]
12F88:	mov     rbx, [rdx+28h]
12F8C:	mov     [rax+20h], rcx
12F90:	mov     [rax+28h], rbx
12F94:	mov     rcx, [rdx+30h]
12F98:	mov     rbx, [rdx+38h]
12F9C:	mov     [rax+30h], rcx
12FA0:	mov     [rax+38h], rbx
12FA4:	mov     rcx, [rdx+40h]
12FA8:	mov     rbx, [rdx+48h]
12FAC:	mov     [rax+40h], rcx
12FB0:	mov     [rax+48h], rbx
12FB4:	mov     rax, [rbp+this]
12FBB:	mov     rcx, [rax+38h]
12FBF:	mov     eax, [rbp+backdir_index]
12FC5:	movsxd  rdx, eax
12FC8:	mov     rax, rdx
12FCB:	shl     rax, 2
12FCF:	add     rax, rdx
12FD2:	shl     rax, 4
12FD6:	add     rax, rcx
12FD9:	mov     rcx, [rbp+tmp.name]
12FE0:	mov     rbx, [rbp+tmp.size]
12FE7:	mov     [rax], rcx
12FEA:	mov     [rax+8], rbx
12FEE:	mov     rcx, qword ptr [rbp+tmp.mode]
12FF5:	mov     rbx, qword ptr [rbp+tmp.gid]
12FFC:	mov     [rax+10h], rcx
13000:	mov     [rax+18h], rbx
13004:	mov     rcx, [rbp+tmp.mtime]
1300B:	mov     rbx, [rbp+tmp.owner]
13012:	mov     [rax+20h], rcx
13016:	mov     [rax+28h], rbx
1301A:	mov     rcx, [rbp+tmp.group]
13021:	mov     rbx, qword ptr [rbp+tmp.date]
13028:	mov     [rax+30h], rcx
1302C:	mov     [rax+38h], rbx
13030:	mov     rcx, qword ptr [rbp+tmp.date+8]
13037:	mov     rbx, qword ptr [rbp+tmp.type]
1303E:	mov     [rax+40h], rcx
13042:	mov     [rax+48h], rbx
13046:	mov     rax, [rbp+this]
1304D:	mov     eax, [rax+68h]
13050:	sub     eax, 1
13053:	cdqe
13055:	mov     rdx, [rbp+this]
1305C:	mov     rdx, [rdx+38h]
13060:	lea     rdi, [rdx+50h]; base
13064:	lea     rdx, sort_compare_fn
1306B:	mov     rcx, rdx; compar
1306E:	mov     edx, 50h ; 'P'; size
13073:	mov     rsi, rax; nmemb
13076:	call    _qsort
1307B:	jmp     short loc_130AC
1307D:	mov     rax, [rbp+this]
13084:	mov     eax, [rax+68h]
13087:	movsxd  rsi, eax; nmemb
1308A:	mov     rax, [rbp+this]
13091:	mov     rax, [rax+38h]
13095:	lea     rdx, sort_compare_fn
1309C:	mov     rcx, rdx; compar
1309F:	mov     edx, 50h ; 'P'; size
130A4:	mov     rdi, rax; base
130A7:	call    _qsort
130AC:	mov     rax, [rbp+this]
130B3:	mov     edx, [rax+68h]
130B6:	mov     rax, [rbp+this]
130BD:	mov     eax, [rax+28h]
130C0:	cmp     edx, eax
130C2:	jle     short loc_130D0
130C4:	mov     rax, [rbp+this]
130CB:	mov     eax, [rax+28h]
130CE:	jmp     short loc_130DD
130D0:	mov     rax, [rbp+this]
130D7:	mov     eax, [rax+68h]
130DA:	sub     eax, 1
130DD:	mov     rdx, [rbp+this]
130E4:	mov     esi, eax; entry
130E6:	mov     rdi, rdx; this
130E9:	mov     eax, 0
130EE:	call    panel_set_current_entry
130F3:	mov     rax, [rbp+old_path]
130FA:	mov     rdi, rax; pointer
130FD:	call    xfree
13102:	mov     eax, 1
13107:	mov     rdx, [rbp+var_18]
1310B:	sub     rdx, fs:28h
13114:	jz      short loc_1311B
13116:	call    ___stack_chk_fail
1311B:	mov     rbx, [rbp+var_8]
1311F:	leave
13120:	retn
13121:	endbr64
13125:	push    rbp
13126:	mov     rbp, rsp
13129:	mov     [rbp+this], rdi
1312D:	mov     rax, [rbp+this]
13131:	mov     dword ptr [rax+50h], 0FFFFFFFFh
13138:	mov     rax, [rbp+this]
1313C:	mov     edx, [rax+70h]
1313F:	mov     rax, [rbp+this]
13143:	mov     [rax+54h], edx
13146:	nop
13147:	pop     rbp
13148:	retn
13149:	endbr64
1314D:	push    rbp
1314E:	mov     rbp, rsp
13151:	mov     [rbp+this], rdi
13155:	mov     rax, [rbp+this]
13159:	mov     eax, [rax+54h]
1315C:	test    eax, eax
1315E:	jz      short loc_131C0
13160:	mov     rax, [rbp+this]
13164:	mov     eax, [rax+50h]
13167:	add     eax, 1
1316A:	mov     [rbp+i], eax
1316D:	jmp     short loc_131AD
1316F:	mov     rax, [rbp+this]
13173:	mov     rcx, [rax+38h]
13177:	mov     eax, [rbp+i]
1317A:	movsxd  rdx, eax
1317D:	mov     rax, rdx
13180:	shl     rax, 2
13184:	add     rax, rdx
13187:	shl     rax, 4
1318B:	add     rax, rcx
1318E:	movzx   eax, byte ptr [rax+49h]
13192:	test    al, al
13194:	jz      short loc_131A9
13196:	mov     rax, [rbp+this]
1319A:	mov     edx, [rbp+i]
1319D:	mov     [rax+50h], edx
131A0:	mov     rax, [rbp+this]
131A4:	mov     eax, [rax+50h]
131A7:	jmp     short loc_13221
131A9:	add     [rbp+i], 1
131AD:	mov     rax, [rbp+this]
131B1:	mov     eax, [rax+68h]
131B4:	cmp     [rbp+i], eax
131B7:	jl      short loc_1316F
131B9:	mov     eax, 0FFFFFFFFh
131BE:	jmp     short loc_13221
131C0:	mov     rax, [rbp+this]
131C4:	mov     eax, [rax+50h]
131C7:	test    eax, eax
131C9:	jnz     short loc_131D2
131CB:	mov     eax, 0FFFFFFFFh
131D0:	jmp     short loc_13221
131D2:	mov     rax, [rbp+this]
131D6:	mov     dword ptr [rax+50h], 0
131DD:	mov     rax, [rbp+this]
131E1:	mov     rax, [rax+18h]
131E5:	movzx   eax, byte ptr [rax]
131E8:	cmp     al, 2Fh ; '/'
131EA:	jnz     short loc_13208
131EC:	mov     rax, [rbp+this]
131F0:	mov     rax, [rax+18h]
131F4:	add     rax, 1
131F8:	movzx   eax, byte ptr [rax]
131FB:	test    al, al
131FD:	jnz     short loc_13208
131FF:	mov     rax, [rbp+this]
13203:	mov     eax, [rax+28h]
13206:	jmp     short loc_13221
13208:	mov     rax, [rbp+this]
1320C:	mov     eax, [rax+28h]
1320F:	test    eax, eax
13211:	jz      short loc_1321C
13213:	mov     rax, [rbp+this]
13217:	mov     eax, [rax+28h]
1321A:	jmp     short loc_13221
1321C:	mov     eax, 0FFFFFFFFh
13221:	pop     rbp
13222:	retn
13223:	endbr64
13227:	push    rbp
13228:	mov     rbp, rsp
1322B:	sub     rsp, 30h
1322F:	mov     [rbp+this], rdi
13233:	mov     rax, fs:28h
1323C:	mov     [rbp+var_8], rax
13240:	xor     eax, eax
13242:	mov     rax, [rbp+this]
13246:	movzx   eax, byte ptr [rax+6Dh]
1324A:	test    al, al
1324C:	jz      loc_1336B
13252:	lea     rax, [rbp+status]
13256:	mov     rdi, rax; status
13259:	call    tty_save
1325E:	mov     rax, [rbp+this]
13262:	mov     eax, [rax+2Ch]
13265:	mov     [rbp+i], eax
13268:	jmp     short loc_1327F
1326A:	mov     edx, [rbp+i]
1326D:	mov     rax, [rbp+this]
13271:	mov     esi, edx; entry
13273:	mov     rdi, rax; this
13276:	call    panel_update_entry
1327B:	add     [rbp+i], 1
1327F:	mov     rax, [rbp+this]
13283:	mov     eax, [rax+68h]
13286:	cmp     [rbp+i], eax
13289:	jge     short loc_132A7
1328B:	mov     rax, [rbp+this]
1328F:	mov     ecx, [rax+2Ch]
13292:	mov     eax, [rbp+i]
13295:	sub     eax, ecx
13297:	mov     edx, eax
13299:	mov     rax, [rbp+this]
1329D:	mov     eax, [rax+60h]
132A0:	sub     eax, 2
132A3:	cmp     edx, eax
132A5:	jl      short loc_1326A
132A7:	mov     eax, cs:PanelColors+4
132AD:	mov     edx, eax; background
132AF:	mov     esi, 7; foreground
132B4:	mov     edi, 0; brightness
132B9:	call    tty_colors
132BE:	mov     rax, [rbp+this]
132C2:	mov     eax, [rax+64h]
132C5:	movsxd  rdx, eax; n
132C8:	mov     rax, [rbp+this]
132CC:	mov     rax, [rax+20h]
132D0:	mov     esi, 20h ; ' '; c
132D5:	mov     rdi, rax; s
132D8:	call    _memset
132DD:	mov     rax, [rbp+this]
132E1:	mov     eax, [rax+60h]
132E4:	lea     edx, [rax-2]
132E7:	mov     rax, [rbp+this]
132EB:	mov     eax, [rax+14h]
132EE:	cmp     edx, eax
132F0:	cmovle  eax, edx
132F3:	mov     [rbp+limit], eax
132F6:	jmp     short loc_13347
132F8:	mov     rax, [rbp+this]
132FC:	mov     edx, [rax+2Ch]
132FF:	mov     eax, [rbp+i]
13302:	sub     eax, edx
13304:	lea     ecx, [rax+1]
13307:	mov     rax, [rbp+this]
1330B:	mov     rax, [rax+8]
1330F:	mov     edx, 1; x
13314:	mov     esi, ecx; y
13316:	mov     rdi, rax; window
13319:	call    window_goto
1331E:	mov     rax, [rbp+this]
13322:	mov     eax, [rax+64h]
13325:	lea     edx, [rax-2]; length
13328:	mov     rax, [rbp+this]
1332C:	mov     rcx, [rax+20h]
13330:	mov     rax, [rbp+this]
13334:	mov     rax, [rax+8]
13338:	mov     rsi, rcx; str
1333B:	mov     rdi, rax; window
1333E:	call    window_puts
13343:	add     [rbp+i], 1
13347:	mov     eax, [rbp+i]
1334A:	cmp     eax, [rbp+limit]
1334D:	jl      short loc_132F8
1334F:	mov     rax, [rbp+this]
13353:	mov     edx, [rax+68h]
13356:	mov     rax, [rbp+this]
1335A:	mov     [rax+14h], edx
1335D:	lea     rax, [rbp+status]
13361:	mov     rdi, rax; status
13364:	call    tty_restore
13369:	jmp     short loc_1336C
1336B:	nop
1336C:	mov     rax, [rbp+var_8]
13370:	sub     rax, fs:28h
13379:	jz      short locret_13380
1337B:	call    ___stack_chk_fail
13380:	leave
13381:	retn
13382:	endbr64
13386:	push    rbp
13387:	mov     rbp, rsp
1338A:	sub     rsp, 30h
1338E:	mov     [rbp+this], rdi
13392:	mov     rax, fs:28h
1339B:	mov     [rbp+var_8], rax
1339F:	xor     eax, eax
133A1:	mov     rax, [rbp+this]
133A5:	mov     eax, [rax+64h]
133A8:	cmp     eax, 13h
133AB:	jle     loc_1349B
133B1:	mov     rax, [rbp+this]
133B5:	movzx   eax, byte ptr [rax+6Dh]
133B9:	test    al, al
133BB:	jz      loc_1349E
133C1:	lea     rax, [rbp+status]
133C5:	mov     rdi, rax; status
133C8:	call    tty_save
133CD:	mov     rax, [rbp+this]
133D1:	mov     eax, [rax+64h]
133D4:	sub     eax, 13h
133D7:	cdqe
133D9:	mov     [rbp+len], rax
133DD:	mov     rax, [rbp+this]
133E1:	mov     eax, [rax+64h]
133E4:	movsxd  rdx, eax; n
133E7:	mov     rax, [rbp+this]
133EB:	mov     rax, [rax+20h]
133EF:	mov     esi, 20h ; ' '; c
133F4:	mov     rdi, rax; s
133F7:	call    _memset
133FC:	mov     rax, [rbp+len]
13400:	mov     edx, eax; len
13402:	mov     rax, [rbp+this]
13406:	mov     rcx, [rax+20h]
1340A:	mov     rax, [rbp+this]
1340E:	mov     rax, [rax+18h]
13412:	mov     rsi, rcx; dest
13415:	mov     rdi, rax; name
13418:	call    truncate_long_name
1341D:	mov     rax, [rbp+this]
13421:	mov     rax, [rax+20h]
13425:	mov     rdx, [rbp+len]
13429:	mov     rsi, rdx; length
1342C:	mov     rdi, rax; string
1342F:	call    toprintable
13434:	mov     edx, cs:PanelColors; background
1343A:	mov     ecx, cs:PanelColors+30h
13440:	mov     eax, cs:PanelColors+34h
13446:	mov     esi, ecx; foreground
13448:	mov     edi, eax; brightness
1344A:	call    tty_colors
1344F:	mov     rax, [rbp+this]
13453:	mov     rax, [rax+8]
13457:	mov     edx, 2; x
1345C:	mov     esi, 0; y
13461:	mov     rdi, rax; window
13464:	call    window_goto
13469:	mov     rax, [rbp+len]
1346D:	add     eax, 1
13470:	mov     edx, eax; length
13472:	mov     rax, [rbp+this]
13476:	mov     rcx, [rax+20h]
1347A:	mov     rax, [rbp+this]
1347E:	mov     rax, [rax+8]
13482:	mov     rsi, rcx; str
13485:	mov     rdi, rax; window
13488:	call    window_puts
1348D:	lea     rax, [rbp+status]
13491:	mov     rdi, rax; status
13494:	call    tty_restore
13499:	jmp     short loc_1349F
1349B:	nop
1349C:	jmp     short loc_1349F
1349E:	nop
1349F:	mov     rax, [rbp+var_8]
134A3:	sub     rax, fs:28h
134AC:	jz      short locret_134B3
134AE:	call    ___stack_chk_fail
134B3:	leave
134B4:	retn
134B5:	endbr64
134B9:	push    rbp
134BA:	mov     rbp, rsp
134BD:	sub     rsp, 30h
134C1:	mov     [rbp+buf], rdi
134C5:	mov     [rbp+number], rsi
134C9:	mov     [rbp+inflags], edx
134CC:	mov     eax, [rbp+inflags]
134CF:	or      eax, 0Ch
134D2:	mov     [rbp+flags], eax
134D5:	cmp     [rbp+number], 270Fh
134DD:	jle     short loc_134E6
134DF:	or      [rbp+flags], 90h
134E6:	mov     rax, [rbp+number]
134EA:	mov     edx, [rbp+flags]; opts
134ED:	mov     rsi, [rbp+buf]; buf
134F1:	mov     r8d, 1; to_block_size
134F7:	mov     ecx, 1; from_block_size
134FC:	mov     rdi, rax; n
134FF:	call    human_readable
13504:	leave
13505:	retn
13506:	endbr64
1350A:	push    rbp
1350B:	mov     rbp, rsp
1350E:	push    rbx
1350F:	sub     rsp, 318h
13516:	mov     [rbp+this], rdi
1351D:	mov     rax, fs:28h
13526:	mov     [rbp+var_18], rax
1352A:	xor     eax, eax
1352C:	mov     rax, [rbp+this]
13533:	mov     eax, [rax+64h]
13536:	sub     eax, 4
13539:	mov     [rbp+viewable], eax
1353F:	mov     rax, [rbp+this]
13546:	movzx   eax, byte ptr [rax+6Dh]
1354A:	test    al, al
1354C:	jz      loc_1374B
13552:	lea     rax, [rbp+status]
13559:	mov     rdi, rax; status
1355C:	call    tty_save
13561:	mov     [rbp+fsu.fsu_blocks], 0FFFFFFFFFFFFFFFFh
1356C:	cmp     [rbp+viewable], 5
13573:	jle     short loc_135A5
13575:	mov     rax, [rbp+this]
1357C:	mov     rax, [rax+18h]
13580:	lea     rdx, [rbp+fsu]; fsp
13587:	mov     esi, 0; disk
1358C:	mov     rdi, rax; file
1358F:	call    get_fs_usage
13594:	test    eax, eax
13596:	js      short loc_135A5
13598:	mov     rax, [rbp+fsu.fsu_blocks]
1359F:	cmp     rax, 0FFFFFFFFFFFFFFFFh
135A3:	jnz     short loc_135E8
135A5:	lea     rax, [rbp+buf]
135AC:	mov     edx, 28Bh; n
135B1:	mov     esi, 20h ; ' '; c
135B6:	mov     rdi, rax; s
135B9:	call    _memset
135BE:	lea     rax, [rbp+buf]
135C5:	mov     [rbp+sz], rax
135CC:	mov     edi, 0; status
135D1:	call    tty_brightness
135D6:	mov     eax, cs:PanelColors
135DC:	mov     edi, eax; color
135DE:	call    tty_foreground
135E3:	jmp     loc_1367A
135E8:	call    _geteuid
135ED:	test    eax, eax
135EF:	jnz     short loc_135FA
135F1:	mov     rax, [rbp+fsu.fsu_bfree]
135F8:	jmp     short loc_13601
135FA:	mov     rax, [rbp+fsu.fsu_bavail]
13601:	mov     [rbp+free_blocks], rax
13608:	cmp     [rbp+free_blocks], 0
13610:	jns     short loc_1361D
13612:	mov     [rbp+free_blocks], 0
1361D:	mov     rdx, [rbp+fsu.fsu_blocksize]
13624:	mov     rax, [rbp+free_blocks]
1362B:	imul    rax, rdx
1362F:	mov     [rbp+n], rax
13636:	mov     rcx, [rbp+n]
1363D:	lea     rax, [rbp+buf]
13644:	mov     edx, 0; inflags
13649:	mov     rsi, rcx; number
1364C:	mov     rdi, rax; buf
1364F:	mov     eax, 0
13654:	call    panel_beautify_number
13659:	mov     [rbp+sz], rax
13660:	mov     eax, cs:PanelColors+3Ch
13666:	mov     edi, eax; status
13668:	call    tty_brightness
1366D:	mov     eax, cs:PanelColors+38h
13673:	mov     edi, eax; color
13675:	call    tty_foreground
1367A:	mov     eax, cs:PanelColors
13680:	mov     edi, eax; color
13682:	call    tty_background
13687:	mov     rax, [rbp+this]
1368E:	mov     eax, [rax+64h]
13691:	mov     ebx, eax
13693:	mov     rax, [rbp+sz]
1369A:	mov     rdi, rax; s
1369D:	call    _strlen
136A2:	mov     edx, [rbp+viewable]
136A8:	movsxd  rdx, edx
136AB:	cmp     rax, rdx
136AE:	ja      short loc_136C3
136B0:	mov     rax, [rbp+sz]
136B7:	mov     rdi, rax; s
136BA:	call    _strlen
136BF:	mov     edx, eax
136C1:	jmp     short loc_136C9
136C3:	mov     edx, [rbp+viewable]
136C9:	mov     eax, ebx
136CB:	sub     eax, edx
136CD:	sub     eax, 2
136D0:	mov     edx, eax; x
136D2:	mov     rax, [rbp+this]
136D9:	mov     rax, [rax+8]
136DD:	mov     esi, 0; y
136E2:	mov     rdi, rax; window
136E5:	call    window_goto
136EA:	mov     rax, [rbp+sz]
136F1:	mov     rdi, rax; s
136F4:	call    _strlen
136F9:	mov     edx, [rbp+viewable]
136FF:	movsxd  rdx, edx
13702:	cmp     rax, rdx
13705:	ja      short loc_13718
13707:	mov     rax, [rbp+sz]
1370E:	mov     rdi, rax; s
13711:	call    _strlen
13716:	jmp     short loc_1371E
13718:	mov     eax, [rbp+viewable]
1371E:	mov     rdx, [rbp+this]
13725:	mov     rcx, [rdx+8]
13729:	mov     rsi, [rbp+sz]; str
13730:	mov     edx, eax; length
13732:	mov     rdi, rcx; window
13735:	call    window_puts
1373A:	lea     rax, [rbp+status]
13741:	mov     rdi, rax; status
13744:	call    tty_restore
13749:	jmp     short loc_1374C
1374B:	nop
1374C:	mov     rax, [rbp+var_18]
13750:	sub     rax, fs:28h
13759:	jz      short loc_13760
1375B:	call    ___stack_chk_fail
13760:	mov     rbx, [rbp+var_8]
13764:	leave
13765:	retn
13766:	endbr64
1376A:	push    rbp
1376B:	mov     rbp, rsp
1376E:	sub     rsp, 30h
13772:	mov     [rbp+this], rdi
13776:	mov     [rbp+entry], esi
13779:	mov     [rbp+string], rdx
1377D:	mov     rax, [rbp+string]
13781:	lea     rdx, rights
13788:	mov     rsi, rdx; src
1378B:	mov     rdi, rax; dest
1378E:	call    _strcpy
13793:	mov     rax, [rbp+this]
13797:	mov     rcx, [rax+38h]
1379B:	mov     eax, [rbp+entry]
1379E:	movsxd  rdx, eax
137A1:	mov     rax, rdx
137A4:	shl     rax, 2
137A8:	add     rax, rdx
137AB:	shl     rax, 4
137AF:	add     rax, rcx
137B2:	mov     eax, [rax+10h]
137B5:	mov     [rbp+mode], eax
137B8:	mov     eax, [rbp+mode]
137BB:	and     eax, 0F000h
137C0:	cmp     eax, 8000h
137C5:	jnz     short loc_137D3
137C7:	mov     rax, [rbp+string]
137CB:	mov     byte ptr [rax], 2Dh ; '-'
137CE:	jmp     loc_1386A
137D3:	mov     eax, [rbp+mode]
137D6:	and     eax, 0F000h
137DB:	cmp     eax, 4000h
137E0:	jnz     short loc_137EB
137E2:	mov     rax, [rbp+string]
137E6:	mov     byte ptr [rax], 64h ; 'd'
137E9:	jmp     short loc_1386A
137EB:	mov     eax, [rbp+mode]
137EE:	and     eax, 0F000h
137F3:	cmp     eax, 2000h
137F8:	jnz     short loc_13803
137FA:	mov     rax, [rbp+string]
137FE:	mov     byte ptr [rax], 63h ; 'c'
13801:	jmp     short loc_1386A
13803:	mov     eax, [rbp+mode]
13806:	and     eax, 0F000h
1380B:	cmp     eax, 6000h
13810:	jnz     short loc_1381B
13812:	mov     rax, [rbp+string]
13816:	mov     byte ptr [rax], 62h ; 'b'
13819:	jmp     short loc_1386A
1381B:	mov     eax, [rbp+mode]
1381E:	and     eax, 0F000h
13823:	cmp     eax, 1000h
13828:	jnz     short loc_13833
1382A:	mov     rax, [rbp+string]
1382E:	mov     byte ptr [rax], 70h ; 'p'
13831:	jmp     short loc_1386A
13833:	mov     eax, [rbp+mode]
13836:	and     eax, 0F000h
1383B:	cmp     eax, 0C000h
13840:	jnz     short loc_1384B
13842:	mov     rax, [rbp+string]
13846:	mov     byte ptr [rax], 73h ; 's'
13849:	jmp     short loc_1386A
1384B:	mov     eax, [rbp+mode]
1384E:	and     eax, 0F000h
13853:	cmp     eax, 0A000h
13858:	jnz     short loc_13863
1385A:	mov     rax, [rbp+string]
1385E:	mov     byte ptr [rax], 6Ch ; 'l'
13861:	jmp     short loc_1386A
13863:	mov     rax, [rbp+string]
13867:	mov     byte ptr [rax], 3Fh ; '?'
1386A:	mov     [rbp+i], 0
13871:	jmp     short loc_13899
13873:	mov     eax, [rbp+mode]
13876:	and     eax, 1
13879:	test    eax, eax
1387B:	jnz     short loc_13892
1387D:	mov     eax, 9
13882:	sub     eax, [rbp+i]
13885:	movsxd  rdx, eax
13888:	mov     rax, [rbp+string]
1388C:	add     rax, rdx
1388F:	mov     byte ptr [rax], 2Dh ; '-'
13892:	shr     [rbp+mode], 1
13895:	add     [rbp+i], 1
13899:	cmp     [rbp+i], 8
1389D:	jle     short loc_13873
1389F:	mov     rax, [rbp+this]
138A3:	mov     rcx, [rax+38h]
138A7:	mov     eax, [rbp+entry]
138AA:	movsxd  rdx, eax
138AD:	mov     rax, rdx
138B0:	shl     rax, 2
138B4:	add     rax, rdx
138B7:	shl     rax, 4
138BB:	add     rax, rcx
138BE:	mov     eax, [rax+10h]
138C1:	mov     [rbp+mode], eax
138C4:	mov     eax, [rbp+mode]
138C7:	and     eax, 800h
138CC:	test    eax, eax
138CE:	jz      short loc_138F5
138D0:	mov     rax, [rbp+string]
138D4:	add     rax, 3
138D8:	movzx   eax, byte ptr [rax]
138DB:	cmp     al, 78h ; 'x'
138DD:	jnz     short loc_138E6
138DF:	mov     edx, 73h ; 's'
138E4:	jmp     short loc_138EB
138E6:	mov     edx, 53h ; 'S'
138EB:	mov     rax, [rbp+string]
138EF:	add     rax, 3
138F3:	mov     [rax], dl
138F5:	mov     eax, [rbp+mode]
138F8:	and     eax, 400h
138FD:	test    eax, eax
138FF:	jz      short loc_13926
13901:	mov     rax, [rbp+string]
13905:	add     rax, 6
13909:	movzx   eax, byte ptr [rax]
1390C:	cmp     al, 78h ; 'x'
1390E:	jnz     short loc_13917
13910:	mov     edx, 73h ; 's'
13915:	jmp     short loc_1391C
13917:	mov     edx, 53h ; 'S'
1391C:	mov     rax, [rbp+string]
13920:	add     rax, 6
13924:	mov     [rax], dl
13926:	mov     eax, [rbp+mode]
13929:	and     eax, 200h
1392E:	test    eax, eax
13930:	jz      short loc_13957
13932:	mov     rax, [rbp+string]
13936:	add     rax, 9
1393A:	movzx   eax, byte ptr [rax]
1393D:	cmp     al, 78h ; 'x'
1393F:	jnz     short loc_13948
13941:	mov     edx, 74h ; 't'
13946:	jmp     short loc_1394D
13948:	mov     edx, 54h ; 'T'
1394D:	mov     rax, [rbp+string]
13951:	add     rax, 9
13955:	mov     [rax], dl
13957:	nop
13958:	leave
13959:	retn
1395A:	endbr64
1395E:	push    rbp
1395F:	mov     rbp, rsp
13962:	sub     rsp, 6E0h
13969:	mov     [rbp+this], rdi
13970:	mov     rax, fs:28h
13979:	mov     [rbp+var_8], rax
1397D:	xor     eax, eax
1397F:	mov     [rbp+total_size], 0
1398A:	mov     rax, [rbp+this]
13991:	movzx   eax, byte ptr [rax+6Dh]
13995:	test    al, al
13997:	jz      loc_14092
1399D:	lea     rax, [rbp+status]
139A4:	mov     rdi, rax; status
139A7:	call    tty_save
139AC:	mov     rax, [rbp+this]
139B3:	mov     eax, [rax+60h]
139B6:	cmp     eax, 2
139B9:	jle     loc_13ADB
139BF:	mov     edx, cs:PanelColors; background
139C5:	mov     eax, cs:PanelColors
139CB:	mov     esi, eax; foreground
139CD:	mov     edi, 0; brightness
139D2:	call    tty_colors
139D7:	mov     rax, [rbp+this]
139DE:	mov     eax, [rax+64h]
139E1:	lea     edx, [rax-1]; x
139E4:	mov     rax, [rbp+this]
139EB:	mov     eax, [rax+8Ch]
139F1:	lea     ecx, [rax+1]
139F4:	mov     rax, [rbp+this]
139FB:	mov     rax, [rax+8]
139FF:	mov     esi, ecx; y
13A01:	mov     rdi, rax; window
13A04:	call    window_goto
13A09:	mov     rax, [rbp+this]
13A10:	mov     rax, [rax+8]
13A14:	mov     esi, 20h ; ' '; c
13A19:	mov     rdi, rax; window
13A1C:	call    window_putc
13A21:	mov     rax, [rbp+this]
13A28:	mov     eax, [rax+60h]
13A2B:	lea     edx, [rax-1]
13A2E:	mov     rax, [rbp+this]
13A35:	mov     eax, [rax+68h]
13A38:	cmp     edx, eax
13A3A:	jg      loc_13ADB
13A40:	mov     rax, [rbp+this]
13A47:	mov     edx, [rax+28h]
13A4A:	mov     rax, [rbp+this]
13A51:	mov     eax, [rax+60h]
13A54:	sub     eax, 2
13A57:	imul    eax, edx
13A5A:	mov     rdx, [rbp+this]
13A61:	mov     esi, [rdx+68h]
13A64:	cdq
13A65:	idiv    esi
13A67:	mov     edx, eax
13A69:	mov     rax, [rbp+this]
13A70:	mov     [rax+8Ch], edx
13A76:	mov     edx, cs:PanelColors+0Ch; background
13A7C:	mov     ecx, cs:PanelColors+8
13A82:	mov     eax, cs:PanelColors+10h
13A88:	mov     esi, ecx; foreground
13A8A:	mov     edi, eax; brightness
13A8C:	call    tty_colors
13A91:	mov     rax, [rbp+this]
13A98:	mov     eax, [rax+64h]
13A9B:	lea     edx, [rax-1]; x
13A9E:	mov     rax, [rbp+this]
13AA5:	mov     eax, [rax+8Ch]
13AAB:	lea     ecx, [rax+1]
13AAE:	mov     rax, [rbp+this]
13AB5:	mov     rax, [rax+8]
13AB9:	mov     esi, ecx; y
13ABB:	mov     rdi, rax; window
13ABE:	call    window_goto
13AC3:	mov     rax, [rbp+this]
13ACA:	mov     rax, [rax+8]
13ACE:	mov     esi, 23h ; '#'; c
13AD3:	mov     rdi, rax; window
13AD6:	call    window_putc
13ADB:	mov     rax, [rbp+this]
13AE2:	mov     eax, [rax+64h]
13AE5:	cmp     eax, 27h ; '''
13AE8:	jg      short loc_13B56
13AEA:	mov     rax, [rbp+this]
13AF1:	mov     eax, [rax+64h]
13AF4:	cmp     eax, 0Dh
13AF7:	jg      short loc_13B05
13AF9:	mov     [rbp+str], 0
13B00:	jmp     skip_info_display
13B05:	mov     rax, [rbp+this]
13B0C:	mov     ecx, [rax+28h]
13B0F:	lea     rdx, [rbp+buf]; string
13B16:	mov     rax, [rbp+this]
13B1D:	mov     esi, ecx; entry
13B1F:	mov     rdi, rax; this
13B22:	mov     eax, 0
13B27:	call    panel_mode2string
13B2C:	lea     rdx, [rbp+buf]
13B33:	lea     rax, [rbp+str]
13B3A:	lea     rcx, a10s; '%10s'
13B41:	mov     rsi, rcx; format
13B44:	mov     rdi, rax; s
13B47:	mov     eax, 0
13B4C:	call    _sprintf
13B51:	jmp     skip_info_display
13B56:	mov     rax, [rbp+this]
13B5D:	mov     eax, [rax+70h]
13B60:	test    eax, eax
13B62:	jz      loc_13CF3
13B68:	mov     [rbp+entry], 0
13B72:	jmp     loc_13C08
13B77:	mov     rax, [rbp+this]
13B7E:	mov     rcx, [rax+38h]
13B82:	mov     eax, [rbp+entry]
13B88:	movsxd  rdx, eax
13B8B:	mov     rax, rdx
13B8E:	shl     rax, 2
13B92:	add     rax, rdx
13B95:	shl     rax, 4
13B99:	add     rax, rcx
13B9C:	movzx   eax, byte ptr [rax+49h]
13BA0:	test    al, al
13BA2:	jz      short loc_13C01
13BA4:	mov     rax, [rbp+this]
13BAB:	mov     rcx, [rax+38h]
13BAF:	mov     eax, [rbp+entry]
13BB5:	movsxd  rdx, eax
13BB8:	mov     rax, rdx
13BBB:	shl     rax, 2
13BBF:	add     rax, rdx
13BC2:	shl     rax, 4
13BC6:	add     rax, rcx
13BC9:	movzx   eax, byte ptr [rax+48h]
13BCD:	cmp     al, 1
13BCF:	jnz     short loc_13C01
13BD1:	mov     rax, [rbp+this]
13BD8:	mov     rcx, [rax+38h]
13BDC:	mov     eax, [rbp+entry]
13BE2:	movsxd  rdx, eax
13BE5:	mov     rax, rdx
13BE8:	shl     rax, 2
13BEC:	add     rax, rdx
13BEF:	shl     rax, 4
13BF3:	add     rax, rcx
13BF6:	mov     rax, [rax+8]
13BFA:	add     [rbp+total_size], rax
13C01:	add     [rbp+entry], 1
13C08:	mov     rax, [rbp+this]
13C0F:	mov     eax, [rax+68h]
13C12:	cmp     [rbp+entry], eax
13C18:	jl      loc_13B77
13C1E:	mov     rcx, [rbp+total_size]
13C25:	lea     rax, [rbp+buf]
13C2C:	mov     edx, 190h; inflags
13C31:	mov     rsi, rcx; number
13C34:	mov     rdi, rax; buf
13C37:	mov     eax, 0
13C3C:	call    panel_beautify_number
13C41:	mov     [rbp+sz], rax
13C48:	mov     [rbp+offset], 0
13C52:	jmp     short loc_13C5B
13C54:	add     [rbp+offset], 1
13C5B:	mov     eax, [rbp+offset]
13C61:	movsxd  rdx, eax
13C64:	mov     rax, [rbp+sz]
13C6B:	add     rax, rdx
13C6E:	movzx   eax, byte ptr [rax]
13C71:	cmp     al, 20h ; ' '
13C73:	jz      short loc_13C54
13C75:	mov     rax, [rbp+this]
13C7C:	mov     eax, [rax+70h]
13C7F:	cmp     eax, 1
13C82:	jle     short loc_13C8D
13C84:	lea     rax, aS_7; 's'
13C8B:	jmp     short loc_13C94
13C8D:	lea     rax, unk_28601
13C94:	mov     rdx, [rbp+this]
13C9B:	mov     edx, [rdx+70h]
13C9E:	mov     ecx, [rbp+offset]
13CA4:	movsxd  rsi, ecx
13CA7:	mov     rcx, [rbp+sz]
13CAE:	add     rsi, rcx
13CB1:	lea     rdi, [rbp+str]; s
13CB8:	mov     r8, rax
13CBB:	mov     ecx, edx
13CBD:	mov     rdx, rsi
13CC0:	lea     rax, aSInDFileS; '%s in %d file%s'
13CC7:	mov     rsi, rax; format
13CCA:	mov     eax, 0
13CCF:	call    _sprintf
13CD4:	mov     eax, cs:PanelColors+4Ch
13CDA:	mov     edi, eax; status
13CDC:	call    tty_brightness
13CE1:	mov     eax, cs:PanelColors+48h
13CE7:	mov     edi, eax; color
13CE9:	call    tty_foreground
13CEE:	jmp     loc_13F71
13CF3:	mov     eax, cs:InfoDisplay
13CF9:	test    eax, eax
13CFB:	jnz     short loc_13D09
13CFD:	mov     [rbp+str], 0
13D04:	jmp     skip_info_display
13D09:	mov     rax, [rbp+this]
13D10:	mov     ecx, [rax+28h]
13D13:	lea     rdx, [rbp+buf]; string
13D1A:	mov     rax, [rbp+this]
13D21:	mov     esi, ecx; entry
13D23:	mov     rdi, rax; this
13D26:	mov     eax, 0
13D2B:	call    panel_mode2string
13D30:	mov     rax, [rbp+this]
13D37:	mov     eax, [rax+64h]
13D3A:	sub     eax, 1Ah
13D3D:	cdqe
13D3F:	mov     [rbp+maxname], rax
13D46:	mov     rax, [rbp+this]
13D4D:	mov     rcx, [rax+38h]
13D51:	mov     rax, [rbp+this]
13D58:	mov     eax, [rax+28h]
13D5B:	movsxd  rdx, eax
13D5E:	mov     rax, rdx
13D61:	shl     rax, 2
13D65:	add     rax, rdx
13D68:	shl     rax, 4
13D6C:	add     rax, rcx
13D6F:	mov     rax, [rax]
13D72:	mov     rdi, rax; s
13D75:	call    _strlen
13D7A:	cmp     [rbp+maxname], rax
13D81:	jb      short loc_13DB9
13D83:	mov     rax, [rbp+this]
13D8A:	mov     rcx, [rax+38h]
13D8E:	mov     rax, [rbp+this]
13D95:	mov     eax, [rax+28h]
13D98:	movsxd  rdx, eax
13D9B:	mov     rax, rdx
13D9E:	shl     rax, 2
13DA2:	add     rax, rdx
13DA5:	shl     rax, 4
13DA9:	add     rax, rcx
13DAC:	mov     rax, [rax]
13DAF:	mov     rdi, rax; s
13DB2:	call    _strlen
13DB7:	jmp     short loc_13DC0
13DB9:	mov     rax, [rbp+maxname]
13DC0:	mov     [rbp+len], rax
13DC7:	mov     rax, [rbp+this]
13DCE:	mov     rcx, [rax+38h]
13DD2:	mov     rax, [rbp+this]
13DD9:	mov     eax, [rax+28h]
13DDC:	movsxd  rdx, eax
13DDF:	mov     rax, rdx
13DE2:	shl     rax, 2
13DE6:	add     rax, rdx
13DE9:	shl     rax, 4
13DED:	add     rax, rcx
13DF0:	mov     rcx, [rax]
13DF3:	mov     rdx, [rbp+len]; n
13DFA:	lea     rax, [rbp+str]
13E01:	mov     rsi, rcx; src
13E04:	mov     rdi, rax; dest
13E07:	call    _memcpy
13E0C:	mov     rax, [rbp+maxname]
13E13:	sub     rax, [rbp+len]
13E1A:	lea     rcx, [rbp+str]
13E21:	mov     rdx, [rbp+len]
13E28:	add     rcx, rdx
13E2B:	mov     rdx, rax; n
13E2E:	mov     esi, 20h ; ' '; c
13E33:	mov     rdi, rcx; s
13E36:	call    _memset
13E3B:	mov     rax, [rbp+this]
13E42:	mov     rcx, [rax+38h]
13E46:	mov     rax, [rbp+this]
13E4D:	mov     eax, [rax+28h]
13E50:	movsxd  rdx, eax
13E53:	mov     rax, rdx
13E56:	shl     rax, 2
13E5A:	add     rax, rdx
13E5D:	shl     rax, 4
13E61:	add     rax, rcx
13E64:	movzx   eax, byte ptr [rax+48h]
13E68:	test    al, al
13E6A:	jnz     loc_13EF7
13E70:	mov     rax, [rbp+this]
13E77:	mov     rcx, [rax+38h]
13E7B:	mov     rax, [rbp+this]
13E82:	mov     eax, [rax+28h]
13E85:	movsxd  rdx, eax
13E88:	mov     rax, rdx
13E8B:	shl     rax, 2
13E8F:	add     rax, rdx
13E92:	shl     rax, 4
13E96:	add     rax, rcx
13E99:	mov     rax, [rax]
13E9C:	lea     rdx, asc_285DE; '..'
13EA3:	mov     rsi, rdx; s2
13EA6:	mov     rdi, rax; s1
13EA9:	call    _strcmp
13EAE:	test    eax, eax
13EB0:	jnz     short loc_13EBB
13EB2:	lea     rax, aUpDir; ' UP-DIR'
13EB9:	jmp     short loc_13EC2
13EBB:	lea     rax, aSubDir; 'SUB-DIR'
13EC2:	lea     rcx, [rbp+str]
13EC9:	mov     rdx, [rbp+maxname]
13ED0:	lea     rdi, [rcx+rdx]; s
13ED4:	lea     rdx, [rbp+buf]
13EDB:	mov     rcx, rdx
13EDE:	mov     rdx, rax
13EE1:	lea     rax, a10s10s; ' %10s %10s'
13EE8:	mov     rsi, rax; format
13EEB:	mov     eax, 0
13EF0:	call    _sprintf
13EF5:	jmp     short skip_info_display
13EF7:	mov     rax, [rbp+this]
13EFE:	mov     rcx, [rax+38h]
13F02:	mov     rax, [rbp+this]
13F09:	mov     eax, [rax+28h]
13F0C:	movsxd  rdx, eax
13F0F:	mov     rax, rdx
13F12:	shl     rax, 2
13F16:	add     rax, rdx
13F19:	shl     rax, 4
13F1D:	add     rax, rcx
13F20:	mov     rax, [rax+8]
13F24:	lea     rcx, [rbp+str]
13F2B:	mov     rdx, [rbp+maxname]
13F32:	lea     rdi, [rcx+rdx]; s
13F36:	lea     rdx, [rbp+buf]
13F3D:	mov     rcx, rdx
13F40:	mov     rdx, rax
13F43:	lea     rax, a10ld10s; ' %10ld %10s'
13F4A:	mov     rsi, rax; format
13F4D:	mov     eax, 0
13F52:	call    _sprintf
13F57:	mov     eax, cs:PanelColors+44h
13F5D:	mov     edi, eax; status
13F5F:	call    tty_brightness
13F64:	mov     eax, cs:PanelColors+40h
13F6A:	mov     edi, eax; color
13F6C:	call    tty_foreground
13F71:	lea     rax, [rbp+str]
13F78:	mov     rdi, rax; s
13F7B:	call    _strlen
13F80:	mov     [rbp+len], rax
13F87:	mov     rax, [rbp+this]
13F8E:	mov     rax, [rax+20h]
13F92:	mov     rdx, [rbp+len]; n
13F99:	lea     rcx, [rbp+str]
13FA0:	mov     rsi, rcx; src
13FA3:	mov     rdi, rax; dest
13FA6:	call    _memcpy
13FAB:	mov     rax, [rbp+len]
13FB2:	lea     rdx, [rax+2]
13FB6:	mov     rax, [rbp+this]
13FBD:	mov     eax, [rax+64h]
13FC0:	cdqe
13FC2:	cmp     rdx, rax
13FC5:	jnb     short loc_14002
13FC7:	mov     rax, [rbp+this]
13FCE:	mov     eax, [rax+64h]
13FD1:	sub     eax, 2
13FD4:	cdqe
13FD6:	sub     rax, [rbp+len]
13FDD:	mov     rdx, [rbp+this]
13FE4:	mov     rcx, [rdx+20h]
13FE8:	mov     rdx, [rbp+len]
13FEF:	add     rcx, rdx
13FF2:	mov     rdx, rax; n
13FF5:	mov     esi, 20h ; ' '; c
13FFA:	mov     rdi, rcx; s
13FFD:	call    _memset
14002:	mov     rax, [rbp+this]
14009:	mov     rax, [rax+20h]
1400D:	mov     rdx, [rbp+len]
14014:	mov     rsi, rdx; length
14017:	mov     rdi, rax; string
1401A:	call    toprintable
1401F:	mov     eax, cs:PanelColors
14025:	mov     edi, eax; color
14027:	call    tty_background
1402C:	mov     rax, [rbp+this]
14033:	mov     eax, [rax+60h]
14036:	lea     ecx, [rax-1]
14039:	mov     rax, [rbp+this]
14040:	mov     rax, [rax+8]
14044:	mov     edx, 2; x
14049:	mov     esi, ecx; y
1404B:	mov     rdi, rax; window
1404E:	call    window_goto
14053:	mov     rax, [rbp+this]
1405A:	mov     eax, [rax+64h]
1405D:	lea     edx, [rax-4]; length
14060:	mov     rax, [rbp+this]
14067:	mov     rcx, [rax+20h]
1406B:	mov     rax, [rbp+this]
14072:	mov     rax, [rax+8]
14076:	mov     rsi, rcx; str
14079:	mov     rdi, rax; window
1407C:	call    window_puts
14081:	lea     rax, [rbp+status]
14088:	mov     rdi, rax; status
1408B:	call    tty_restore
14090:	jmp     short loc_14093
14092:	nop
14093:	mov     rax, [rbp+var_8]
14097:	sub     rax, fs:28h
140A0:	jz      short locret_140A7
140A2:	call    ___stack_chk_fail
140A7:	leave
140A8:	retn
140A9:	endbr64
140AD:	push    rbp
140AE:	mov     rbp, rsp
140B1:	sub     rsp, 2E0h
140B8:	mov     [rbp+this], rdi
140BF:	mov     [rbp+entry], esi
140C5:	mov     [rbp+display_mode], edx
140CB:	mov     [rbp+offset], ecx
140D1:	mov     rax, fs:28h
140DA:	mov     [rbp+var_8], rax
140DE:	xor     eax, eax
140E0:	cmp     [rbp+display_mode], 5; switch 6 cases
140E7:	ja      def_14111; jumptable 0000000000014111 default case
140ED:	mov     eax, [rbp+display_mode]
140F3:	lea     rdx, ds:0[rax*4]
140FB:	lea     rax, jpt_14111
14102:	mov     eax, ds:(jpt_14111 - 28E08h)[rdx+rax]
14105:	cdqe
14107:	lea     rdx, jpt_14111
1410E:	add     rax, rdx
14111:	jmp     rax; switch jump
14114:	mov     rax, [rbp+this]; jumptable 0000000000014111 case 0
1411B:	mov     rcx, [rax+38h]
1411F:	mov     eax, [rbp+entry]
14125:	movsxd  rdx, eax
14128:	mov     rax, rdx
1412B:	shl     rax, 2
1412F:	add     rax, rdx
14132:	shl     rax, 4
14136:	add     rax, rcx
14139:	mov     rax, [rax+28h]
1413D:	mov     rdx, [rbp+this]
14144:	mov     rsi, [rdx+20h]
14148:	mov     rdx, [rbp+this]
1414F:	mov     edx, [rdx+64h]
14152:	movsxd  rdx, edx
14155:	mov     ecx, [rbp+offset]
1415B:	movsxd  rcx, ecx
1415E:	sub     rdx, rcx
14161:	sub     rdx, 2
14165:	lea     rcx, [rsi+rdx]
14169:	mov     edx, 7; n
1416E:	mov     rsi, rax; src
14171:	mov     rdi, rcx; dest
14174:	call    _memcpy
14179:	mov     rax, [rbp+this]
14180:	mov     rcx, [rax+38h]
14184:	mov     eax, [rbp+entry]
1418A:	movsxd  rdx, eax
1418D:	mov     rax, rdx
14190:	shl     rax, 2
14194:	add     rax, rdx
14197:	shl     rax, 4
1419B:	add     rax, rcx
1419E:	mov     rax, [rax+30h]
141A2:	mov     rdx, [rbp+this]
141A9:	mov     rsi, [rdx+20h]
141AD:	mov     rdx, [rbp+this]
141B4:	mov     edx, [rdx+64h]
141B7:	movsxd  rdx, edx
141BA:	mov     ecx, [rbp+offset]
141C0:	movsxd  rcx, ecx
141C3:	sub     rdx, rcx
141C6:	add     rdx, 6
141CA:	lea     rcx, [rsi+rdx]
141CE:	mov     edx, 7; n
141D3:	mov     rsi, rax; src
141D6:	mov     rdi, rcx; dest
141D9:	call    _memcpy
141DE:	jmp     loc_143D4
141E3:	mov     rax, [rbp+this]; jumptable 0000000000014111 case 1
141EA:	mov     rcx, [rax+38h]
141EE:	mov     eax, [rbp+entry]
141F4:	movsxd  rdx, eax
141F7:	mov     rax, rdx
141FA:	shl     rax, 2
141FE:	add     rax, rdx
14201:	shl     rax, 4
14205:	add     rax, rcx
14208:	lea     rcx, [rax+38h]
1420C:	mov     rax, [rbp+this]
14213:	mov     rsi, [rax+20h]
14217:	mov     rax, [rbp+this]
1421E:	mov     eax, [rax+64h]
14221:	cdqe
14223:	mov     edx, [rbp+offset]
14229:	movsxd  rdx, edx
1422C:	sub     rax, rdx
1422F:	sub     rax, 2
14233:	add     rax, rsi
14236:	mov     edx, 0Fh; n
1423B:	mov     rsi, rcx; src
1423E:	mov     rdi, rax; dest
14241:	call    _memcpy
14246:	jmp     loc_143D4
1424B:	mov     rax, [rbp+this]; jumptable 0000000000014111 case 2
14252:	mov     rcx, [rax+38h]
14256:	mov     eax, [rbp+entry]
1425C:	movsxd  rdx, eax
1425F:	mov     rax, rdx
14262:	shl     rax, 2
14266:	add     rax, rdx
14269:	shl     rax, 4
1426D:	add     rax, rcx
14270:	mov     rcx, [rax+8]
14274:	lea     rax, [rbp+hbuf]
1427B:	mov     edx, 0; inflags
14280:	mov     rsi, rcx; number
14283:	mov     rdi, rax; buf
14286:	mov     eax, 0
1428B:	call    panel_beautify_number
14290:	mov     [rbp+sz], rax
14297:	mov     rax, [rbp+sz]
1429E:	mov     rdi, rax; s
142A1:	call    _strlen
142A6:	cmp     rax, 0Ah
142AA:	ja      short loc_142BD
142AC:	mov     rax, [rbp+sz]
142B3:	mov     rdi, rax; s
142B6:	call    _strlen
142BB:	jmp     short loc_142C2
142BD:	mov     eax, 0Ah
142C2:	mov     [rbp+szlen], eax
142C8:	mov     rax, [rbp+this]
142CF:	mov     rcx, [rax+20h]
142D3:	mov     rax, [rbp+this]
142DA:	mov     eax, [rax+64h]
142DD:	cdqe
142DF:	mov     edx, [rbp+offset]
142E5:	movsxd  rdx, edx
142E8:	sub     rax, rdx
142EB:	sub     rax, 2
142EF:	add     rax, rcx
142F2:	mov     [rbp+ptr], rax
142F9:	cmp     [rbp+szlen], 9
14300:	jg      short loc_14338
14302:	mov     eax, 0Ah
14307:	sub     eax, [rbp+szlen]
1430D:	movsxd  rdx, eax; n
14310:	mov     rax, [rbp+ptr]
14317:	mov     esi, 20h ; ' '; c
1431C:	mov     rdi, rax; s
1431F:	call    _memset
14324:	mov     eax, 0Ah
14329:	sub     eax, [rbp+szlen]
1432F:	cdqe
14331:	add     [rbp+ptr], rax
14338:	mov     eax, [rbp+szlen]
1433E:	movsxd  rdx, eax; n
14341:	mov     rcx, [rbp+sz]
14348:	mov     rax, [rbp+ptr]
1434F:	mov     rsi, rcx; src
14352:	mov     rdi, rax; dest
14355:	call    _memcpy
1435A:	jmp     short loc_143D4
1435C:	lea     rdx, [rbp+hbuf]; jumptable 0000000000014111 case 3
14363:	mov     ecx, [rbp+entry]
14369:	mov     rax, [rbp+this]
14370:	mov     esi, ecx; entry
14372:	mov     rdi, rax; this
14375:	mov     eax, 0
1437A:	call    panel_mode2string
1437F:	mov     rax, [rbp+this]
14386:	mov     rcx, [rax+20h]
1438A:	mov     rax, [rbp+this]
14391:	mov     eax, [rax+64h]
14394:	cdqe
14396:	mov     edx, [rbp+offset]
1439C:	movsxd  rdx, edx
1439F:	sub     rax, rdx
143A2:	sub     rax, 2
143A6:	add     rcx, rax
143A9:	lea     rax, [rbp+hbuf]
143B0:	mov     edx, 0Ah; n
143B5:	mov     rsi, rax; src
143B8:	mov     rdi, rcx; dest
143BB:	call    _memcpy
143C0:	jmp     short loc_143D4
143C2:	lea     rax, aInvalidMode; jumptable 0000000000014111 default case
143C9:	mov     rdi, rax; postmsg
143CC:	call    fatal
143D1:	jmp     short loc_143D4
143D3:	nop; jumptable 0000000000014111 cases 4,5
143D4:	nop
143D5:	mov     rax, [rbp+var_8]
143D9:	sub     rax, fs:28h
143E2:	jz      short locret_143E9
143E4:	call    ___stack_chk_fail
143E9:	leave
143EA:	retn
143EB:	endbr64
143EF:	push    rbp
143F0:	mov     rbp, rsp
143F3:	mov     [rbp+this], rdi
143F7:	mov     rax, [rbp+this]
143FB:	mov     eax, [rax+64h]
143FE:	cmp     eax, 27h ; '''
14401:	jle     short loc_1441E
14403:	mov     rax, [rbp+this]
14407:	mov     eax, [rax+64h]
1440A:	cmp     eax, 49h ; 'I'
1440D:	jg      short loc_14425
1440F:	mov     rax, [rbp+this]
14413:	mov     eax, [rax+80h]
14419:	cmp     eax, 5
1441C:	jnz     short loc_14425
1441E:	mov     eax, 4
14423:	jmp     short loc_14443
14425:	mov     rax, [rbp+this]
14429:	mov     eax, [rax+80h]
1442F:	cdqe
14431:	lea     rdx, ds:0[rax*4]
14439:	lea     rax, reserved_characters
14440:	mov     eax, [rdx+rax]
14443:	pop     rbp
14444:	retn
14445:	endbr64
14449:	push    rbp
1444A:	mov     rbp, rsp
1444D:	sub     rsp, 40h
14451:	mov     [rbp+this], rdi
14455:	mov     [rbp+entry], esi
14458:	mov     [rbp+c], 0
1445C:	mov     rax, [rbp+this]
14460:	movzx   eax, byte ptr [rax+6Dh]
14464:	test    al, al
14466:	jz      loc_14CA1
1446C:	mov     rax, [rbp+this]
14470:	mov     eax, [rax+64h]
14473:	movsxd  rdx, eax; n
14476:	mov     rax, [rbp+this]
1447A:	mov     rax, [rax+20h]
1447E:	mov     esi, 20h ; ' '; c
14483:	mov     rdi, rax; s
14486:	call    _memset
1448B:	mov     rax, [rbp+this]
1448F:	mov     rdi, rax; this
14492:	mov     eax, 0
14497:	call    panel_get_reserved_characters
1449C:	cdqe
1449E:	mov     [rbp+reserved], rax
144A2:	cmp     [rbp+entry], 0
144A6:	jg      short loc_144D2
144A8:	mov     rax, [rbp+this]
144AC:	mov     rax, [rax+18h]
144B0:	movzx   eax, byte ptr [rax]
144B3:	cmp     al, 2Fh ; '/'
144B5:	jnz     def_1451D; jumptable 000000000001451D default case
144BB:	mov     rax, [rbp+this]
144BF:	mov     rax, [rax+18h]
144C3:	add     rax, 1
144C7:	movzx   eax, byte ptr [rax]
144CA:	test    al, al
144CC:	jnz     def_1451D; jumptable 000000000001451D default case
144D2:	mov     rax, [rbp+this]
144D6:	mov     rcx, [rax+38h]
144DA:	mov     eax, [rbp+entry]
144DD:	movsxd  rdx, eax
144E0:	mov     rax, rdx
144E3:	shl     rax, 2
144E7:	add     rax, rdx
144EA:	shl     rax, 4
144EE:	add     rax, rcx
144F1:	movzx   eax, byte ptr [rax+48h]
144F5:	movsx   eax, al
144F8:	cmp     eax, 4; switch 5 cases
144FB:	ja      short def_1451D; jumptable 000000000001451D default case
144FD:	mov     eax, eax
144FF:	lea     rdx, ds:0[rax*4]
14507:	lea     rax, jpt_1451D
1450E:	mov     eax, ds:(jpt_1451D - 28E20h)[rdx+rax]
14511:	cdqe
14513:	lea     rdx, jpt_1451D
1451A:	add     rax, rdx
1451D:	jmp     rax; switch jump
14520:	mov     rax, [rbp+this]; jumptable 000000000001451D case 1
14524:	mov     rcx, [rax+38h]
14528:	mov     eax, [rbp+entry]
1452B:	movsxd  rdx, eax
1452E:	mov     rax, rdx
14531:	shl     rax, 2
14535:	add     rax, rdx
14538:	shl     rax, 4
1453C:	add     rax, rcx
1453F:	movzx   eax, byte ptr [rax+4Ah]
14543:	test    al, al
14545:	jz      short loc_14565
14547:	mov     [rbp+c], 2Ah ; '*'
1454B:	jmp     short loc_14565
1454D:	mov     [rbp+c], 2Fh ; '/'; jumptable 000000000001451D case 0
14551:	jmp     short def_1451D; jumptable 000000000001451D default case
14553:	mov     [rbp+c], 40h ; '@'; jumptable 000000000001451D case 2
14557:	jmp     short def_1451D; jumptable 000000000001451D default case
14559:	mov     [rbp+c], 7Ch ; '|'; jumptable 000000000001451D case 3
1455D:	jmp     short def_1451D; jumptable 000000000001451D default case
1455F:	mov     [rbp+c], 3Dh ; '='; jumptable 000000000001451D case 4
14563:	jmp     short def_1451D; jumptable 000000000001451D default case
14565:	nop
14566:	cmp     [rbp+c], 0; jumptable 000000000001451D default case
1456A:	jz      short loc_14571
1456C:	add     [rbp+reserved], 1
14571:	mov     rax, [rbp+this]
14575:	mov     rcx, [rax+38h]
14579:	mov     eax, [rbp+entry]
1457C:	movsxd  rdx, eax
1457F:	mov     rax, rdx
14582:	shl     rax, 2
14586:	add     rax, rdx
14589:	shl     rax, 4
1458D:	add     rax, rcx
14590:	mov     rax, [rax]
14593:	mov     rdi, rax; s
14596:	call    _strlen
1459B:	mov     [rbp+entry_length], rax
1459F:	mov     rax, [rbp+this]
145A3:	mov     eax, [rax+64h]
145A6:	cdqe
145A8:	sub     rax, [rbp+reserved]
145AC:	cmp     [rbp+entry_length], rax
145B0:	ja      short loc_145BC
145B2:	mov     [rbp+offset], 0
145BA:	jmp     short loc_1460C
145BC:	mov     rax, [rbp+this]
145C0:	mov     eax, [rax+64h]
145C3:	cdqe
145C5:	sub     rax, [rbp+reserved]
145C9:	mov     rdx, rax
145CC:	mov     rax, [rbp+this]
145D0:	mov     eax, [rax+74h]
145D3:	cdqe
145D5:	add     rax, rdx
145D8:	cmp     [rbp+entry_length], rax
145DC:	jnb     short loc_145FF
145DE:	mov     rax, [rbp+this]
145E2:	mov     eax, [rax+64h]
145E5:	movsxd  rdx, eax
145E8:	mov     rax, [rbp+reserved]
145EC:	sub     rax, rdx
145EF:	mov     rcx, rax
145F2:	mov     rax, [rbp+entry_length]
145F6:	add     rax, rcx
145F9:	mov     [rbp+offset], rax
145FD:	jmp     short loc_1460C
145FF:	mov     rax, [rbp+this]
14603:	mov     eax, [rax+74h]
14606:	cdqe
14608:	mov     [rbp+offset], rax
1460C:	mov     rax, [rbp+entry_length]
14610:	sub     rax, [rbp+offset]
14614:	mov     rdx, rax
14617:	mov     rax, [rbp+this]
1461B:	mov     eax, [rax+64h]
1461E:	cdqe
14620:	sub     rax, [rbp+reserved]
14624:	cmp     rdx, rax
14627:	cmovbe  rax, rdx
1462B:	mov     [rbp+len], rax
1462F:	mov     rax, [rbp+this]
14633:	mov     rcx, [rax+38h]
14637:	mov     eax, [rbp+entry]
1463A:	movsxd  rdx, eax
1463D:	mov     rax, rdx
14640:	shl     rax, 2
14644:	add     rax, rdx
14647:	shl     rax, 4
1464B:	add     rax, rcx
1464E:	mov     rdx, [rax]
14651:	mov     rax, [rbp+offset]
14655:	lea     rsi, [rdx+rax]; src
14659:	mov     rax, [rbp+this]
1465D:	mov     rax, [rax+20h]
14661:	lea     rcx, [rax+1]
14665:	mov     rax, [rbp+len]
14669:	mov     rdx, rax; n
1466C:	mov     rdi, rcx; dest
1466F:	call    _memcpy
14674:	mov     rax, [rbp+this]
14678:	mov     rax, [rax+20h]
1467C:	lea     rdx, [rax+1]
14680:	mov     rax, [rbp+len]
14684:	mov     rsi, rax; length
14687:	mov     rdi, rdx; string
1468A:	call    toprintable
1468F:	cmp     [rbp+c], 0
14693:	jz      short loc_146AE
14695:	mov     rax, [rbp+this]
14699:	mov     rdx, [rax+20h]
1469D:	mov     rax, [rbp+len]
146A1:	add     rax, 1
146A5:	add     rdx, rax
146A8:	movzx   eax, [rbp+c]
146AC:	mov     [rdx], al
146AE:	mov     rax, [rbp+this]
146B2:	mov     eax, [rax+64h]
146B5:	cmp     eax, 27h ; '''
146B8:	jle     loc_147F7
146BE:	mov     rax, [rbp+this]
146C2:	mov     eax, [rax+80h]
146C8:	cmp     eax, 5
146CB:	jz      loc_14758
146D1:	cmp     eax, 5
146D4:	jg      loc_147E2
146DA:	cmp     eax, 4
146DD:	jz      loc_147F3
146E3:	cmp     eax, 4
146E6:	jg      loc_147E2
146EC:	cmp     eax, 1
146EF:	jg      short loc_146FA
146F1:	test    eax, eax
146F3:	jns     short loc_14708
146F5:	jmp     loc_147E2
146FA:	sub     eax, 2
146FD:	cmp     eax, 1
14700:	ja      loc_147E2
14706:	jmp     short loc_14730
14708:	mov     rax, [rbp+this]
1470C:	mov     edx, [rax+80h]; display_mode
14712:	mov     esi, [rbp+entry]; entry
14715:	mov     rax, [rbp+this]
14719:	mov     ecx, 10h; offset
1471E:	mov     rdi, rax; this
14721:	mov     eax, 0
14726:	call    panel_build_entry_field
1472B:	jmp     loc_147F7
14730:	mov     rax, [rbp+this]
14734:	mov     edx, [rax+80h]; display_mode
1473A:	mov     esi, [rbp+entry]; entry
1473D:	mov     rax, [rbp+this]
14741:	mov     ecx, 0Bh; offset
14746:	mov     rdi, rax; this
14749:	mov     eax, 0
1474E:	call    panel_build_entry_field
14753:	jmp     loc_147F7
14758:	mov     rax, [rbp+this]
1475C:	mov     eax, [rax+64h]
1475F:	cmp     eax, 49h ; 'I'
14762:	jle     loc_147F6
14768:	mov     esi, [rbp+entry]; entry
1476B:	mov     rax, [rbp+this]
1476F:	mov     ecx, 36h ; '6'; offset
14774:	mov     edx, 0; display_mode
14779:	mov     rdi, rax; this
1477C:	mov     eax, 0
14781:	call    panel_build_entry_field
14786:	mov     esi, [rbp+entry]; entry
14789:	mov     rax, [rbp+this]
1478D:	mov     ecx, 26h ; '&'; offset
14792:	mov     edx, 1; display_mode
14797:	mov     rdi, rax; this
1479A:	mov     eax, 0
1479F:	call    panel_build_entry_field
147A4:	mov     esi, [rbp+entry]; entry
147A7:	mov     rax, [rbp+this]
147AB:	mov     ecx, 16h; offset
147B0:	mov     edx, 2; display_mode
147B5:	mov     rdi, rax; this
147B8:	mov     eax, 0
147BD:	call    panel_build_entry_field
147C2:	mov     esi, [rbp+entry]; entry
147C5:	mov     rax, [rbp+this]
147C9:	mov     ecx, 0Bh; offset
147CE:	mov     edx, 3; display_mode
147D3:	mov     rdi, rax; this
147D6:	mov     eax, 0
147DB:	call    panel_build_entry_field
147E0:	jmp     short loc_147F7
147E2:	lea     rax, aInvalidMode; 'invalid mode'
147E9:	mov     rdi, rax; postmsg
147EC:	call    fatal
147F1:	jmp     short loc_147F7
147F3:	nop
147F4:	jmp     short loc_147F7
147F6:	nop
147F7:	mov     rax, [rbp+this]
147FB:	mov     rcx, [rax+38h]
147FF:	mov     eax, [rbp+entry]
14802:	movsxd  rdx, eax
14805:	mov     rax, rdx
14808:	shl     rax, 2
1480C:	add     rax, rdx
1480F:	shl     rax, 4
14813:	add     rax, rcx
14816:	movzx   eax, byte ptr [rax+49h]
1481A:	test    al, al
1481C:	jz      short loc_14839
1481E:	mov     rax, [rbp+this]
14822:	mov     rdx, [rax+20h]
14826:	mov     rax, [rbp+this]
1482A:	mov     eax, [rax+64h]
1482D:	cdqe
1482F:	sub     rax, 3
14833:	add     rax, rdx
14836:	mov     byte ptr [rax], 2Ah ; '*'
14839:	mov     rax, [rbp+this]
1483D:	mov     eax, [rax+28h]
14840:	cmp     [rbp+entry], eax
14843:	jnz     short loc_14867
14845:	mov     rax, [rbp+this]
14849:	movzx   eax, byte ptr [rax+6Ch]
1484D:	test    al, al
1484F:	jz      short loc_14858
14851:	mov     edx, 3Eh ; '>'
14856:	jmp     short loc_1485D
14858:	mov     edx, 2Ah ; '*'
1485D:	mov     rax, [rbp+this]
14861:	mov     rax, [rax+20h]
14865:	mov     [rax], dl
14867:	mov     eax, cs:TypeSensitivity
1486D:	test    eax, eax
1486F:	jz      loc_14B6E
14875:	mov     rax, [rbp+this]
14879:	mov     rcx, [rax+38h]
1487D:	mov     eax, [rbp+entry]
14880:	movsxd  rdx, eax
14883:	mov     rax, rdx
14886:	shl     rax, 2
1488A:	add     rax, rdx
1488D:	shl     rax, 4
14891:	add     rax, rcx
14894:	movzx   eax, byte ptr [rax+48h]
14898:	test    al, al
1489A:	jz      loc_14B6E
148A0:	mov     rax, [rbp+this]
148A4:	mov     rcx, [rax+38h]
148A8:	mov     eax, [rbp+entry]
148AB:	movsxd  rdx, eax
148AE:	mov     rax, rdx
148B1:	shl     rax, 2
148B5:	add     rax, rdx
148B8:	shl     rax, 4
148BC:	add     rax, rcx
148BF:	movzx   eax, byte ptr [rax+49h]
148C3:	test    al, al
148C5:	jnz     loc_14B6E
148CB:	mov     rax, [rbp+this]
148CF:	mov     edx, [rax+2Ch]
148D2:	mov     eax, [rbp+entry]
148D5:	sub     eax, edx
148D7:	lea     ecx, [rax+1]
148DA:	mov     rax, [rbp+this]
148DE:	mov     rax, [rax+8]
148E2:	mov     edx, 1; x
148E7:	mov     esi, ecx; y
148E9:	mov     rdi, rax; window
148EC:	call    window_goto
148F1:	mov     rax, [rbp+this]
148F5:	mov     rcx, [rax+38h]
148F9:	mov     eax, [rbp+entry]
148FC:	movsxd  rdx, eax
148FF:	mov     rax, rdx
14902:	shl     rax, 2
14906:	add     rax, rdx
14909:	shl     rax, 4
1490D:	add     rax, rcx
14910:	movzx   eax, byte ptr [rax+49h]
14914:	test    al, al
14916:	jz      short loc_14920
14918:	mov     eax, cs:PanelColors+18h
1491E:	jmp     short loc_14926
14920:	mov     eax, cs:PanelColors+20h
14926:	mov     [rbp+brightness], eax
14929:	mov     rax, [rbp+this]
1492D:	mov     rcx, [rax+38h]
14931:	mov     eax, [rbp+entry]
14934:	movsxd  rdx, eax
14937:	mov     rax, rdx
1493A:	shl     rax, 2
1493E:	add     rax, rdx
14941:	shl     rax, 4
14945:	add     rax, rcx
14948:	movzx   eax, byte ptr [rax+49h]
1494C:	test    al, al
1494E:	jz      short loc_14958
14950:	mov     eax, cs:PanelColors+14h
14956:	jmp     short loc_1495E
14958:	mov     eax, cs:PanelColors+1Ch
1495E:	mov     [rbp+foreground], eax
14961:	mov     rax, [rbp+this]
14965:	mov     eax, [rax+28h]
14968:	cmp     [rbp+entry], eax
1496B:	jnz     short loc_14984
1496D:	mov     rax, [rbp+this]
14971:	movzx   eax, byte ptr [rax+6Ch]
14975:	cmp     al, 1
14977:	jnz     short loc_14984
14979:	mov     eax, cs:PanelColors+2Ch
1497F:	mov     [rbp+background], eax
14982:	jmp     short loc_1498D
14984:	mov     eax, cs:PanelColors+4
1498A:	mov     [rbp+background], eax
1498D:	mov     edx, [rbp+background]; background
14990:	mov     ecx, [rbp+foreground]
14993:	mov     eax, [rbp+brightness]
14996:	mov     esi, ecx; foreground
14998:	mov     edi, eax; brightness
1499A:	call    tty_colors
1499F:	mov     rax, [rbp+this]
149A3:	mov     rax, [rax+20h]
149A7:	movzx   eax, byte ptr [rax]
149AA:	movsx   edx, al
149AD:	mov     rax, [rbp+this]
149B1:	mov     rax, [rax+8]
149B5:	mov     esi, edx; c
149B7:	mov     rdi, rax; window
149BA:	call    window_putc
149BF:	mov     rax, [rbp+this]
149C3:	mov     rcx, [rax+38h]
149C7:	mov     eax, [rbp+entry]
149CA:	movsxd  rdx, eax
149CD:	mov     rax, rdx
149D0:	shl     rax, 2
149D4:	add     rax, rdx
149D7:	shl     rax, 4
149DB:	add     rax, rcx
149DE:	movzx   eax, byte ptr [rax+4Bh]
149E2:	test    al, al
149E4:	jnz     short loc_149FC
149E6:	mov     edx, [rbp+entry]
149E9:	mov     rax, [rbp+this]
149ED:	mov     esi, edx; entry
149EF:	mov     rdi, rax; this
149F2:	mov     eax, 0
149F7:	call    panel_load_fti
149FC:	mov     rax, [rbp+this]
14A00:	mov     rcx, [rax+38h]
14A04:	mov     eax, [rbp+entry]
14A07:	movsxd  rdx, eax
14A0A:	mov     rax, rdx
14A0D:	shl     rax, 2
14A11:	add     rax, rdx
14A14:	shl     rax, 4
14A18:	add     rax, rcx
14A1B:	movzx   eax, byte ptr [rax+4Eh]
14A1F:	cmp     al, 2
14A21:	jz      loc_14AF1
14A27:	mov     rax, [rbp+this]
14A2B:	mov     eax, [rax+28h]
14A2E:	cmp     [rbp+entry], eax
14A31:	jnz     short loc_14A76
14A33:	mov     rax, [rbp+this]
14A37:	movzx   eax, byte ptr [rax+6Ch]
14A3B:	cmp     al, 1
14A3D:	jnz     short loc_14A76
14A3F:	mov     rax, [rbp+this]
14A43:	mov     rcx, [rax+38h]
14A47:	mov     eax, [rbp+entry]
14A4A:	movsxd  rdx, eax
14A4D:	mov     rax, rdx
14A50:	shl     rax, 2
14A54:	add     rax, rdx
14A57:	shl     rax, 4
14A5B:	add     rax, rcx
14A5E:	movzx   eax, byte ptr [rax+4Ch]
14A62:	movsx   ecx, al
14A65:	mov     edx, [rbp+background]; background
14A68:	mov     eax, [rbp+brightness]
14A6B:	mov     esi, ecx; foreground
14A6D:	mov     edi, eax; brightness
14A6F:	call    tty_colors
14A74:	jmp     short loc_14AF1
14A76:	mov     rax, [rbp+this]
14A7A:	mov     rcx, [rax+38h]
14A7E:	mov     eax, [rbp+entry]
14A81:	movsxd  rdx, eax
14A84:	mov     rax, rdx
14A87:	shl     rax, 2
14A8B:	add     rax, rdx
14A8E:	shl     rax, 4
14A92:	add     rax, rcx
14A95:	movzx   eax, byte ptr [rax+4Dh]
14A99:	movsx   edx, al; background
14A9C:	mov     rax, [rbp+this]
14AA0:	mov     rsi, [rax+38h]
14AA4:	mov     eax, [rbp+entry]
14AA7:	movsxd  rcx, eax
14AAA:	mov     rax, rcx
14AAD:	shl     rax, 2
14AB1:	add     rax, rcx
14AB4:	shl     rax, 4
14AB8:	add     rax, rsi
14ABB:	movzx   eax, byte ptr [rax+4Ch]
14ABF:	movsx   ecx, al
14AC2:	mov     rax, [rbp+this]
14AC6:	mov     rdi, [rax+38h]
14ACA:	mov     eax, [rbp+entry]
14ACD:	movsxd  rsi, eax
14AD0:	mov     rax, rsi
14AD3:	shl     rax, 2
14AD7:	add     rax, rsi
14ADA:	shl     rax, 4
14ADE:	add     rax, rdi
14AE1:	movzx   eax, byte ptr [rax+4Eh]
14AE5:	movsx   eax, al
14AE8:	mov     esi, ecx; foreground
14AEA:	mov     edi, eax; brightness
14AEC:	call    tty_colors
14AF1:	mov     rax, [rbp+len]
14AF5:	add     eax, 1
14AF8:	mov     edx, eax; length
14AFA:	mov     rax, [rbp+this]
14AFE:	mov     rax, [rax+20h]
14B02:	lea     rcx, [rax+1]
14B06:	mov     rax, [rbp+this]
14B0A:	mov     rax, [rax+8]
14B0E:	mov     rsi, rcx; str
14B11:	mov     rdi, rax; window
14B14:	call    window_puts
14B19:	mov     rax, [rbp+this]
14B1D:	mov     eax, [rax+64h]
14B20:	mov     edx, eax
14B22:	mov     rax, [rbp+len]
14B26:	mov     ecx, eax
14B28:	mov     eax, edx
14B2A:	sub     eax, ecx
14B2C:	sub     eax, 4
14B2F:	mov     edx, eax; length
14B31:	mov     rax, [rbp+this]
14B35:	mov     rcx, [rax+20h]
14B39:	mov     rax, [rbp+len]
14B3D:	add     rax, 2
14B41:	add     rcx, rax
14B44:	mov     rax, [rbp+this]
14B48:	mov     rax, [rax+8]
14B4C:	mov     rsi, rcx; str
14B4F:	mov     rdi, rax; window
14B52:	call    window_puts
14B57:	mov     edx, [rbp+background]; background
14B5A:	mov     ecx, [rbp+foreground]
14B5D:	mov     eax, [rbp+brightness]
14B60:	mov     esi, ecx; foreground
14B62:	mov     edi, eax; brightness
14B64:	call    tty_colors
14B69:	jmp     locret_14CA2
14B6E:	mov     rax, [rbp+this]
14B72:	mov     eax, [rax+28h]
14B75:	cmp     [rbp+entry], eax
14B78:	jnz     short loc_14BC9
14B7A:	mov     rax, [rbp+this]
14B7E:	movzx   eax, byte ptr [rax+6Ch]
14B82:	cmp     al, 1
14B84:	jnz     short loc_14BC9
14B86:	mov     rax, [rbp+this]
14B8A:	mov     rcx, [rax+38h]
14B8E:	mov     eax, [rbp+entry]
14B91:	movsxd  rdx, eax
14B94:	mov     rax, rdx
14B97:	shl     rax, 2
14B9B:	add     rax, rdx
14B9E:	shl     rax, 4
14BA2:	add     rax, rcx
14BA5:	movzx   eax, byte ptr [rax+49h]
14BA9:	test    al, al
14BAB:	jz      short loc_14BB5
14BAD:	mov     eax, cs:PanelColors+24h
14BB3:	jmp     short loc_14BBB
14BB5:	mov     eax, cs:PanelColors+28h
14BBB:	mov     [rbp+foreground], eax
14BBE:	mov     eax, cs:PanelColors+2Ch
14BC4:	mov     [rbp+background], eax
14BC7:	jmp     short loc_14C0A
14BC9:	mov     rax, [rbp+this]
14BCD:	mov     rcx, [rax+38h]
14BD1:	mov     eax, [rbp+entry]
14BD4:	movsxd  rdx, eax
14BD7:	mov     rax, rdx
14BDA:	shl     rax, 2
14BDE:	add     rax, rdx
14BE1:	shl     rax, 4
14BE5:	add     rax, rcx
14BE8:	movzx   eax, byte ptr [rax+49h]
14BEC:	test    al, al
14BEE:	jz      short loc_14BF8
14BF0:	mov     eax, cs:PanelColors+14h
14BF6:	jmp     short loc_14BFE
14BF8:	mov     eax, cs:PanelColors+1Ch
14BFE:	mov     [rbp+foreground], eax
14C01:	mov     eax, cs:PanelColors+4
14C07:	mov     [rbp+background], eax
14C0A:	mov     rax, [rbp+this]
14C0E:	mov     rcx, [rax+38h]
14C12:	mov     eax, [rbp+entry]
14C15:	movsxd  rdx, eax
14C18:	mov     rax, rdx
14C1B:	shl     rax, 2
14C1F:	add     rax, rdx
14C22:	shl     rax, 4
14C26:	add     rax, rcx
14C29:	movzx   eax, byte ptr [rax+49h]
14C2D:	test    al, al
14C2F:	jz      short loc_14C39
14C31:	mov     eax, cs:PanelColors+18h
14C37:	jmp     short loc_14C3F
14C39:	mov     eax, cs:PanelColors+20h
14C3F:	mov     [rbp+brightness], eax
14C42:	mov     edx, [rbp+background]; background
14C45:	mov     ecx, [rbp+foreground]
14C48:	mov     eax, [rbp+brightness]
14C4B:	mov     esi, ecx; foreground
14C4D:	mov     edi, eax; brightness
14C4F:	call    tty_colors
14C54:	mov     rax, [rbp+this]
14C58:	mov     edx, [rax+2Ch]
14C5B:	mov     eax, [rbp+entry]
14C5E:	sub     eax, edx
14C60:	lea     ecx, [rax+1]
14C63:	mov     rax, [rbp+this]
14C67:	mov     rax, [rax+8]
14C6B:	mov     edx, 1; x
14C70:	mov     esi, ecx; y
14C72:	mov     rdi, rax; window
14C75:	call    window_goto
14C7A:	mov     rax, [rbp+this]
14C7E:	mov     eax, [rax+64h]
14C81:	lea     edx, [rax-2]; length
14C84:	mov     rax, [rbp+this]
14C88:	mov     rcx, [rax+20h]
14C8C:	mov     rax, [rbp+this]
14C90:	mov     rax, [rax+8]
14C94:	mov     rsi, rcx; str
14C97:	mov     rdi, rax; window
14C9A:	call    window_puts
14C9F:	jmp     short locret_14CA2
14CA1:	nop
14CA2:	leave
14CA3:	retn
14CA4:	endbr64
14CA8:	push    rbp
14CA9:	mov     rbp, rsp
14CAC:	sub     rsp, 30h
14CB0:	mov     [rbp+this], rdi
14CB4:	mov     rax, fs:28h
14CBD:	mov     [rbp+var_8], rax
14CC1:	xor     eax, eax
14CC3:	mov     rax, [rbp+this]
14CC7:	mov     eax, [rax+64h]
14CCA:	cdqe
14CCC:	mov     rdi, rax; n
14CCF:	call    xmalloc
14CD4:	mov     [rbp+buf], rax
14CD8:	mov     rax, [rbp+this]
14CDC:	movzx   eax, byte ptr [rax+6Dh]
14CE0:	test    al, al
14CE2:	jz      loc_14E53
14CE8:	lea     rax, [rbp+status]
14CEC:	mov     rdi, rax; status
14CEF:	call    tty_save
14CF4:	mov     edx, cs:PanelColors; background
14CFA:	mov     eax, cs:PanelColors
14D00:	mov     esi, eax; foreground
14D02:	mov     edi, 0; brightness
14D07:	call    tty_colors
14D0C:	mov     [rbp+line], 1
14D13:	jmp     short loc_14D48
14D15:	mov     rax, [rbp+this]
14D19:	mov     rax, [rax+8]
14D1D:	mov     ecx, [rbp+line]
14D20:	mov     edx, 0; x
14D25:	mov     esi, ecx; y
14D27:	mov     rdi, rax; window
14D2A:	call    window_goto
14D2F:	mov     rax, [rbp+this]
14D33:	mov     rax, [rax+8]
14D37:	mov     esi, 20h ; ' '; c
14D3C:	mov     rdi, rax; window
14D3F:	call    window_putc
14D44:	add     [rbp+line], 1
14D48:	mov     rax, [rbp+this]
14D4C:	mov     eax, [rax+60h]
14D4F:	sub     eax, 1
14D52:	cmp     [rbp+line], eax
14D55:	jl      short loc_14D15
14D57:	mov     [rbp+line], 1
14D5E:	jmp     short loc_14D98
14D60:	mov     rax, [rbp+this]
14D64:	mov     eax, [rax+64h]
14D67:	lea     edx, [rax-1]; x
14D6A:	mov     rax, [rbp+this]
14D6E:	mov     rax, [rax+8]
14D72:	mov     ecx, [rbp+line]
14D75:	mov     esi, ecx; y
14D77:	mov     rdi, rax; window
14D7A:	call    window_goto
14D7F:	mov     rax, [rbp+this]
14D83:	mov     rax, [rax+8]
14D87:	mov     esi, 20h ; ' '; c
14D8C:	mov     rdi, rax; window
14D8F:	call    window_putc
14D94:	add     [rbp+line], 1
14D98:	mov     rax, [rbp+this]
14D9C:	mov     eax, [rax+60h]
14D9F:	sub     eax, 1
14DA2:	cmp     [rbp+line], eax
14DA5:	jl      short loc_14D60
14DA7:	mov     rax, [rbp+this]
14DAB:	mov     eax, [rax+64h]
14DAE:	movsxd  rdx, eax; n
14DB1:	mov     rax, [rbp+buf]
14DB5:	mov     esi, 20h ; ' '; c
14DBA:	mov     rdi, rax; s
14DBD:	call    _memset
14DC2:	mov     rax, [rbp+this]
14DC6:	mov     rax, [rax+8]
14DCA:	mov     edx, 0; x
14DCF:	mov     esi, 0; y
14DD4:	mov     rdi, rax; window
14DD7:	call    window_goto
14DDC:	mov     rax, [rbp+this]
14DE0:	mov     edx, [rax+64h]; length
14DE3:	mov     rax, [rbp+this]
14DE7:	mov     rax, [rax+8]
14DEB:	mov     rcx, [rbp+buf]
14DEF:	mov     rsi, rcx; str
14DF2:	mov     rdi, rax; window
14DF5:	call    window_puts
14DFA:	mov     rax, [rbp+this]
14DFE:	mov     eax, [rax+60h]
14E01:	lea     ecx, [rax-1]
14E04:	mov     rax, [rbp+this]
14E08:	mov     rax, [rax+8]
14E0C:	mov     edx, 0; x
14E11:	mov     esi, ecx; y
14E13:	mov     rdi, rax; window
14E16:	call    window_goto
14E1B:	mov     rax, [rbp+this]
14E1F:	mov     edx, [rax+64h]; length
14E22:	mov     rax, [rbp+this]
14E26:	mov     rax, [rax+8]
14E2A:	mov     rcx, [rbp+buf]
14E2E:	mov     rsi, rcx; str
14E31:	mov     rdi, rax; window
14E34:	call    window_puts
14E39:	mov     rax, [rbp+buf]
14E3D:	mov     rdi, rax; pointer
14E40:	call    xfree
14E45:	lea     rax, [rbp+status]
14E49:	mov     rdi, rax; status
14E4C:	call    tty_restore
14E51:	jmp     short loc_14E54
14E53:	nop
14E54:	mov     rax, [rbp+var_8]
14E58:	sub     rax, fs:28h
14E61:	jz      short locret_14E68
14E63:	call    ___stack_chk_fail
14E68:	leave
14E69:	retn
14E6A:	endbr64
14E6E:	push    rbp
14E6F:	mov     rbp, rsp
14E72:	sub     rsp, 10h
14E76:	mov     [rbp+this], rdi
14E7A:	mov     rax, [rbp+this]
14E7E:	mov     rdi, rax; this
14E81:	mov     eax, 0
14E86:	call    panel_update_frame
14E8B:	mov     rax, [rbp+this]
14E8F:	mov     rdi, rax; this
14E92:	mov     eax, 0
14E97:	call    panel_update_path
14E9C:	mov     rax, [rbp+this]
14EA0:	mov     rdi, rax; this
14EA3:	mov     eax, 0
14EA8:	call    panel_update_info
14EAD:	mov     rax, [rbp+this]
14EB1:	mov     rdi, rax; this
14EB4:	mov     eax, 0
14EB9:	call    panel_update_size
14EBE:	mov     rax, [rbp+this]
14EC2:	mov     rdi, rax; this
14EC5:	mov     eax, 0
14ECA:	call    panel_update_entries
14ECF:	nop
14ED0:	leave
14ED1:	retn
14ED2:	endbr64
14ED6:	push    rbp
14ED7:	mov     rbp, rsp
14EDA:	sub     rsp, 10h
14EDE:	mov     [rbp+this], rdi
14EE2:	mov     [rbp+status], esi
14EE5:	mov     eax, [rbp+status]
14EE8:	mov     edx, eax
14EEA:	mov     rax, [rbp+this]
14EEE:	mov     [rax+6Ch], dl
14EF1:	mov     rax, [rbp+this]
14EF5:	mov     edx, [rax+28h]
14EF8:	mov     rax, [rbp+this]
14EFC:	mov     esi, edx; entry
14EFE:	mov     rdi, rax; this
14F01:	call    panel_update_entry
14F06:	mov     rax, [rbp+this]
14F0A:	movzx   eax, byte ptr [rax+6Ch]
14F0E:	test    al, al
14F10:	jz      short loc_14F44
14F12:	mov     rax, [rbp+this]
14F16:	mov     rax, [rax+18h]
14F1A:	mov     rdi, rax; path
14F1D:	call    _chdir
14F22:	cmp     eax, 0FFFFFFFFh
14F25:	jnz     short loc_14F44
14F27:	mov     rax, [rbp+this]
14F2B:	mov     rdi, rax; this
14F2E:	mov     eax, 0
14F33:	call    panel_recover
14F38:	mov     rax, [rbp+this]
14F3C:	mov     rdi, rax; this
14F3F:	call    panel_update
14F44:	nop
14F45:	leave
14F46:	retn
14F47:	endbr64
14F4B:	push    rbp
14F4C:	mov     rbp, rsp
14F4F:	mov     [rbp+this], rdi
14F53:	mov     [rbp+entry], 0
14F5A:	jmp     loc_14FE5
14F5F:	mov     rax, [rbp+this]
14F63:	mov     rcx, [rax+38h]
14F67:	mov     eax, [rbp+entry]
14F6A:	movsxd  rdx, eax
14F6D:	mov     rax, rdx
14F70:	shl     rax, 2
14F74:	add     rax, rdx
14F77:	shl     rax, 4
14F7B:	add     rax, rcx
14F7E:	movzx   eax, byte ptr [rax+49h]
14F82:	test    al, al
14F84:	jnz     short loc_14FE1
14F86:	mov     rax, [rbp+this]
14F8A:	mov     rcx, [rax+38h]
14F8E:	mov     eax, [rbp+entry]
14F91:	movsxd  rdx, eax
14F94:	mov     rax, rdx
14F97:	shl     rax, 2
14F9B:	add     rax, rdx
14F9E:	shl     rax, 4
14FA2:	add     rax, rcx
14FA5:	movzx   eax, byte ptr [rax+48h]
14FA9:	test    al, al
14FAB:	jz      short loc_14FE1
14FAD:	mov     rax, [rbp+this]
14FB1:	mov     rcx, [rax+38h]
14FB5:	mov     eax, [rbp+entry]
14FB8:	movsxd  rdx, eax
14FBB:	mov     rax, rdx
14FBE:	shl     rax, 2
14FC2:	add     rax, rdx
14FC5:	shl     rax, 4
14FC9:	add     rax, rcx
14FCC:	mov     byte ptr [rax+49h], 1
14FD0:	mov     rax, [rbp+this]
14FD4:	mov     eax, [rax+70h]
14FD7:	lea     edx, [rax+1]
14FDA:	mov     rax, [rbp+this]
14FDE:	mov     [rax+70h], edx
14FE1:	add     [rbp+entry], 1
14FE5:	mov     rax, [rbp+this]
14FE9:	mov     eax, [rax+68h]
14FEC:	cmp     [rbp+entry], eax
14FEF:	jl      loc_14F5F
14FF5:	nop
14FF6:	nop
14FF7:	pop     rbp
14FF8:	retn
14FF9:	endbr64
14FFD:	push    rbp
14FFE:	mov     rbp, rsp
15001:	mov     [rbp+this], rdi
15005:	mov     [rbp+entry], 0
1500C:	jmp     short loc_15035
1500E:	mov     rax, [rbp+this]
15012:	mov     rcx, [rax+38h]
15016:	mov     eax, [rbp+entry]
15019:	movsxd  rdx, eax
1501C:	mov     rax, rdx
1501F:	shl     rax, 2
15023:	add     rax, rdx
15026:	shl     rax, 4
1502A:	add     rax, rcx
1502D:	mov     byte ptr [rax+49h], 0
15031:	add     [rbp+entry], 1
15035:	mov     rax, [rbp+this]
15039:	mov     eax, [rax+68h]
1503C:	cmp     [rbp+entry], eax
1503F:	jl      short loc_1500E
15041:	mov     rax, [rbp+this]
15045:	mov     dword ptr [rax+70h], 0
1504C:	nop
1504D:	pop     rbp
1504E:	retn
1504F:	endbr64
15053:	push    rbp
15054:	mov     rbp, rsp
15057:	mov     [rbp+this], rdi
1505B:	mov     rax, [rbp+this]
1505F:	mov     rax, [rax+18h]
15063:	pop     rbp
15064:	retn
15065:	endbr64
15069:	push    rbp
1506A:	mov     rbp, rsp
1506D:	sub     rsp, 10h
15071:	mov     eax, cs:user_heart_attack
15077:	test    eax, eax
15079:	jz      loc_150FF
1507F:	mov     cs:user_heart_attack, 0
15089:	mov     eax, 0
1508E:	call    il_save
15093:	mov     [rbp+saved_il], rax
15097:	mov     edx, 4; flags
1509C:	lea     rax, aYn_0; 'yn'
150A3:	mov     rsi, rax; options
150A6:	lea     rax, aAbortCurrentOp; 'Abort current operation? '
150AD:	mov     rdi, rax; message
150B0:	call    il_read_char
150B5:	movsx   eax, al
150B8:	mov     [rbp+key], eax
150BB:	mov     rax, [rbp+saved_il]
150BF:	mov     rdi, rax; saved_il
150C2:	call    il_restore
150C7:	mov     eax, 0
150CC:	call    il_update
150D1:	mov     eax, 0
150D6:	call    il_update_point
150DB:	mov     eax, 0
150E0:	call    tty_update
150E5:	cmp     [rbp+key], 6Eh ; 'n'
150E9:	jz      short loc_150F8
150EB:	cmp     [rbp+key], 4Eh ; 'N'
150EF:	jz      short loc_150F8
150F1:	mov     eax, 1
150F6:	jmp     short locret_15104
150F8:	mov     eax, 0
150FD:	jmp     short locret_15104
150FF:	mov     eax, 0
15104:	leave
15105:	retn
15106:	endbr64
1510A:	push    rbp
1510B:	mov     rbp, rsp
1510E:	sub     rsp, 140h
15115:	mov     [rbp+file1], rdi
1511C:	mov     [rbp+file2], rsi
15123:	mov     rax, fs:28h
1512C:	mov     [rbp+var_8], rax
15130:	xor     eax, eax
15132:	lea     rdx, [rbp+s1]
15139:	mov     rax, [rbp+file1]
15140:	mov     rsi, rdx; buf
15143:	mov     rdi, rax; filename
15146:	call    xstat
1514B:	test    eax, eax
1514D:	jnz     short loc_15199
1514F:	lea     rdx, [rbp+s2]
15156:	mov     rax, [rbp+file2]
1515D:	mov     rsi, rdx; buf
15160:	mov     rdi, rax; filename
15163:	call    xstat
15168:	test    eax, eax
1516A:	jnz     short loc_15199
1516C:	mov     rdx, [rbp+s1.st_dev]
15173:	mov     rax, [rbp+s2.st_dev]
1517A:	cmp     rdx, rax
1517D:	jnz     short loc_15199
1517F:	mov     rdx, [rbp+s1.st_ino]
15186:	mov     rax, [rbp+s2.st_ino]
1518D:	cmp     rdx, rax
15190:	jnz     short loc_15199
15192:	mov     eax, 1
15197:	jmp     short loc_1519E
15199:	mov     eax, 0
1519E:	mov     rdx, [rbp+var_8]
151A2:	sub     rdx, fs:28h
151AB:	jz      short locret_151B2
151AD:	call    ___stack_chk_fail
151B2:	leave
151B3:	retn
151B4:	endbr64
151B8:	push    rbp
151B9:	mov     rbp, rsp
151BC:	sub     rsp, 20h
151C0:	mov     [rbp+this], rdi
151C4:	mov     [rbp+file], rsi
151C8:	mov     rax, [rbp+this]
151CC:	mov     eax, [rax+70h]
151CF:	test    eax, eax
151D1:	jz      short loc_151FF
151D3:	mov     rax, [rbp+file]
151D7:	mov     ecx, 1Eh; flags
151DC:	lea     rdx, aOsac; 'osac'
151E3:	mov     rsi, rax; string
151E6:	lea     rax, aSFileExistsOve; '%s: File exists. Overwrite/Skip/All/Can'...
151ED:	mov     rdi, rax; format
151F0:	mov     eax, 0
151F5:	call    panel_2s_message
151FA:	mov     [rbp+c], al
151FD:	jmp     short loc_15229
151FF:	mov     rax, [rbp+file]
15203:	mov     ecx, 1Eh; flags
15208:	lea     rdx, aOc; 'oc'
1520F:	mov     rsi, rax; string
15212:	lea     rax, aSFileExistsOve_0; '%s: File exists. Overwrite/Cancel? '
15219:	mov     rdi, rax; format
1521C:	mov     eax, 0
15221:	call    panel_2s_message
15226:	mov     [rbp+c], al
15229:	movsx   eax, [rbp+c]
1522D:	cmp     eax, 73h ; 's'
15230:	jz      short loc_15268
15232:	cmp     eax, 73h ; 's'
15235:	jg      short loc_1527A
15237:	cmp     eax, 61h ; 'a'
1523A:	jz      short loc_15248
1523C:	cmp     eax, 6Fh ; 'o'
1523F:	jnz     short loc_1527A
15241:	mov     eax, 0
15246:	jmp     short locret_15283
15248:	mov     rax, [rbp+this]
1524C:	mov     eax, [rax+70h]
1524F:	test    eax, eax
15251:	jz      short loc_1527D
15253:	mov     rax, [rbp+this]
15257:	mov     dword ptr [rax+90h], 0
15261:	mov     eax, 0
15266:	jmp     short locret_15283
15268:	mov     rax, [rbp+this]
1526C:	mov     eax, [rax+70h]
1526F:	test    eax, eax
15271:	jz      short loc_1527A
15273:	mov     eax, 3
15278:	jmp     short locret_15283
1527A:	nop
1527B:	jmp     short loc_1527E
1527D:	nop
1527E:	mov     eax, 2
15283:	leave
15284:	retn
15285:	endbr64
15289:	push    rbp
1528A:	mov     rbp, rsp
1528D:	sub     rsp, 0B0h
15294:	mov     [rbp+name], rdi
1529B:	mov     rax, fs:28h
152A4:	mov     [rbp+var_8], rax
152A8:	xor     eax, eax
152AA:	lea     rdx, [rbp+statbuf]
152B1:	mov     rax, [rbp+name]
152B8:	mov     rsi, rdx; buf
152BB:	mov     rdi, rax; filename
152BE:	call    xstat
152C3:	test    eax, eax
152C5:	jnz     short loc_152E8
152C7:	mov     eax, [rbp+statbuf.st_mode]
152CD:	and     eax, 0F000h
152D2:	cmp     eax, 8000h
152D7:	jnz     short loc_152E8
152D9:	mov     rax, [rbp+name]
152E0:	mov     rdi, rax; name
152E3:	call    _unlink
152E8:	nop
152E9:	mov     rax, [rbp+var_8]
152ED:	sub     rax, fs:28h
152F6:	jz      short locret_152FD
152F8:	call    ___stack_chk_fail
152FD:	leave
152FE:	retn
152FF:	endbr64
15303:	push    rbp
15304:	mov     rbp, rsp
15307:	mov     [rbp+x], rdi
1530B:	mov     [rbp+total], rsi
1530F:	cmp     [rbp+total], 0
15314:	jnz     short loc_1531D
15316:	mov     eax, 0
1531B:	jmp     short loc_1537B
1531D:	cmp     [rbp+total], 1869Fh
15325:	jle     short loc_15358
15327:	mov     rcx, [rbp+total]
1532B:	mov     rdx, 0A3D70A3D70A3D70Bh
15335:	mov     rax, rcx
15338:	imul    rdx
1533B:	lea     rax, [rdx+rcx]
1533F:	sar     rax, 6
15343:	sar     rcx, 3Fh
15347:	sub     rax, rcx
1534A:	mov     rsi, rax
1534D:	mov     rax, [rbp+x]
15351:	cqo
15353:	idiv    rsi
15356:	jmp     short loc_1537B
15358:	mov     rdx, [rbp+x]
1535C:	mov     rax, rdx
1535F:	shl     rax, 2
15363:	add     rax, rdx
15366:	lea     rdx, ds:0[rax*4]
1536E:	add     rax, rdx
15371:	shl     rax, 2
15375:	cqo
15377:	idiv    [rbp+total]
1537B:	pop     rbp
1537C:	retn
1537D:	endbr64
15381:	push    rbp
15382:	mov     rbp, rsp
15385:	push    rbx
15386:	sub     rsp, 138h
1538D:	mov     [rbp+this], rdi
15394:	mov     [rbp+src], rsi
1539B:	mov     [rbp+dest], rdx
153A2:	mov     [rbp+mode], ecx
153A8:	mov     [rbp+uid], r8d
153AF:	mov     [rbp+gid], r9d
153B6:	mov     rax, fs:28h
153BF:	mov     [rbp+var_18], rax
153C3:	xor     eax, eax
153C5:	mov     eax, [rbp+mode]
153CB:	and     eax, 0F000h
153D0:	cmp     eax, 0A000h
153D5:	jnz     short loc_15401
153D7:	lea     rdx, [rbp+s_tmp]
153DE:	mov     rax, [rbp+src]
153E5:	mov     rsi, rdx; buf
153E8:	mov     rdi, rax; filename
153EB:	call    xstat
153F0:	cmp     eax, 0FFFFFFFFh
153F3:	jz      short loc_15401
153F5:	mov     eax, [rbp+s_tmp.st_mode]
153FB:	mov     [rbp+mode], eax
15401:	mov     eax, [rbp+mode]
15407:	and     eax, 0F000h
1540C:	cmp     eax, 4000h
15411:	jnz     loc_156FF
15417:	lea     rdx, [rbp+s_tmp]
1541E:	mov     rax, [rbp+dest]
15425:	mov     rsi, rdx; buf
15428:	mov     rdi, rax; filename
1542B:	call    xstat
15430:	test    eax, eax
15432:	jnz     loc_15547
15438:	mov     eax, [rbp+s_tmp.st_mode]
1543E:	and     eax, 0F000h
15443:	cmp     eax, 4000h
15448:	jz      short loc_15454
1544A:	mov     eax, 0Bh
1544F:	jmp     loc_15F50
15454:	mov     rax, [rbp+dest]
1545B:	mov     rdi, rax; s
1545E:	call    _strlen
15463:	mov     rbx, rax
15466:	mov     rax, [rbp+src]
1546D:	mov     rdi, rax; s
15470:	call    _strlen
15475:	add     rax, rbx
15478:	add     rax, 2
1547C:	mov     rdi, rax; n
1547F:	call    xmalloc
15484:	mov     [rbp+temp], rax
1548B:	mov     rcx, [rbp+src]
15492:	mov     rdx, [rbp+dest]
15499:	mov     rax, [rbp+temp]
154A0:	lea     rsi, aSS_2; '%s/%s'
154A7:	mov     rdi, rax; s
154AA:	mov     eax, 0
154AF:	call    _sprintf
154B4:	mov     rax, [rbp+this]
154BB:	mov     eax, [rax+90h]
154C1:	test    eax, eax
154C3:	jz      short loc_15538
154C5:	mov     rax, [rbp+temp]
154CC:	mov     esi, 0; type
154D1:	mov     rdi, rax; name
154D4:	call    _access
154D9:	test    eax, eax
154DB:	jnz     short loc_15538
154DD:	mov     eax, 0
154E2:	call    status_default
154E7:	mov     rdx, [rbp+temp]
154EE:	mov     rax, [rbp+this]
154F5:	mov     rsi, rdx; file
154F8:	mov     rdi, rax; this
154FB:	mov     eax, 0
15500:	call    panel_warning
15505:	mov     [rbp+error], eax
1550B:	mov     eax, 0
15510:	call    tty_update
15515:	mov     rax, [rbp+temp]
1551C:	mov     rdi, rax; pointer
1551F:	call    xfree
15524:	cmp     [rbp+error], 0
1552B:	jz      short loc_15547
1552D:	mov     eax, [rbp+error]
15533:	jmp     loc_15F50
15538:	mov     rax, [rbp+temp]
1553F:	mov     rdi, rax; pointer
15542:	call    xfree
15547:	mov     rax, [rbp+src]
1554E:	mov     rdi, rax; s
15551:	call    _strlen
15556:	mov     rbx, rax
15559:	mov     rax, [rbp+dest]
15560:	mov     rdi, rax; s
15563:	call    _strlen
15568:	add     rax, rbx
1556B:	add     rax, 21h ; '!'
1556F:	mov     rdi, rax; n
15572:	call    xmalloc
15577:	mov     [rbp+temp], rax
1557E:	mov     rax, [rbp+dest]
15585:	mov     rdi, rax; name
15588:	call    xbasename
1558D:	mov     [rbp+dest_file], rax
15594:	mov     rax, [rbp+dest_file]
1559B:	movzx   eax, byte ptr [rax]
1559E:	test    al, al
155A0:	jnz     short loc_155AC
155A2:	mov     eax, 6
155A7:	jmp     loc_15F50
155AC:	mov     rax, [rbp+src]
155B3:	mov     rdi, rax; s
155B6:	call    _strlen
155BB:	mov     rbx, rax
155BE:	mov     rax, [rbp+dest]
155C5:	mov     rdi, rax; s
155C8:	call    _strlen
155CD:	add     rax, rbx
155D0:	add     rax, 20h ; ' '
155D4:	mov     rdi, rax; n
155D7:	call    xmalloc
155DC:	mov     [rbp+msg], rax
155E3:	mov     rcx, [rbp+dest]
155EA:	mov     rdx, [rbp+src]
155F1:	mov     rax, [rbp+msg]
155F8:	lea     rsi, aCopyCpRSS; '(COPY) cp -r '%s' '%s''
155FF:	mov     rdi, rax; s
15602:	mov     eax, 0
15607:	call    _sprintf
1560C:	mov     rax, [rbp+msg]
15613:	mov     edx, 1; alignment
15618:	mov     esi, 1; type
1561D:	mov     rdi, rax; message
15620:	call    status
15625:	mov     eax, 0
1562A:	call    tty_update
1562F:	mov     rax, [rbp+msg]
15636:	mov     rdi, rax; pointer
15639:	call    xfree
1563E:	mov     rcx, [rbp+dest]
15645:	mov     rdx, [rbp+src]
1564C:	mov     rax, [rbp+temp]
15653:	lea     rsi, aCpRSS; 'cp -r '%s' '%s''
1565A:	mov     rdi, rax; s
1565D:	mov     eax, 0
15662:	call    _sprintf
15667:	mov     rax, [rbp+temp]
1566E:	mov     esi, 1; hide
15673:	mov     rdi, rax; command
15676:	call    start
1567B:	mov     [rbp+result], eax
15681:	mov     rax, [rbp+temp]
15688:	mov     rdi, rax; pointer
1568B:	call    xfree
15690:	mov     rax, [rbp+this]
15697:	mov     rax, [rax+18h]
1569B:	mov     rdi, rax; string
1569E:	call    tty_update_title
156A3:	mov     eax, [rbp+result]
156A9:	and     eax, 7Fh
156AC:	add     eax, 1
156AF:	sar     al, 1
156B1:	test    al, al
156B3:	jle     short loc_156BF
156B5:	mov     eax, 0Ch
156BA:	jmp     loc_15F50
156BF:	mov     eax, [rbp+result]
156C5:	and     eax, 7Fh
156C8:	test    eax, eax
156CA:	jnz     short loc_156F5
156CC:	mov     eax, [rbp+result]
156D2:	sar     eax, 8
156D5:	movzx   eax, al
156D8:	test    eax, eax
156DA:	jz      short loc_156F5
156DC:	lea     rax, command; 'cp'
156E3:	mov     rdi, rax; command
156E6:	call    display_errors
156EB:	mov     eax, 9
156F0:	jmp     loc_15F50
156F5:	mov     eax, 1
156FA:	jmp     loc_15F50
156FF:	mov     rax, [rbp+dest]
15706:	mov     rdi, rax; s
15709:	call    _strlen
1570E:	mov     [rbp+len], rax
15715:	mov     rax, [rbp+dest]
1571C:	mov     rdi, rax; string
1571F:	call    xstrdup
15724:	mov     [rbp+dest], rax
1572B:	lea     rdx, [rbp+s_tmp]
15732:	mov     rax, [rbp+dest]
15739:	mov     rsi, rdx; buf
1573C:	mov     rdi, rax; filename
1573F:	call    xstat
15744:	test    eax, eax
15746:	jnz     loc_157CE
1574C:	mov     eax, [rbp+s_tmp.st_mode]
15752:	and     eax, 0F000h
15757:	cmp     eax, 4000h
1575C:	jnz     short loc_157CE
1575E:	mov     rax, [rbp+src]
15765:	mov     rdi, rax; s
15768:	call    _strlen
1576D:	mov     rdx, [rbp+len]
15774:	add     rax, rdx
15777:	lea     rdx, [rax+2]
1577B:	mov     rax, [rbp+dest]
15782:	mov     rsi, rdx; n
15785:	mov     rdi, rax; p
15788:	call    xrealloc
1578D:	mov     [rbp+dest], rax
15794:	mov     rax, [rbp+dest]
1579B:	mov     rdi, rax; s
1579E:	call    _strlen
157A3:	mov     rdx, rax
157A6:	mov     rax, [rbp+dest]
157AD:	add     rax, rdx
157B0:	mov     word ptr [rax], 2Fh ; '/'
157B5:	mov     rdx, [rbp+src]
157BC:	mov     rax, [rbp+dest]
157C3:	mov     rsi, rdx; src
157C6:	mov     rdi, rax; dest
157C9:	call    _strcat
157CE:	mov     rax, [rbp+dest]
157D5:	mov     rdi, rax; name
157D8:	call    xbasename
157DD:	mov     [rbp+dest_file], rax
157E4:	mov     rax, [rbp+dest_file]
157EB:	movzx   eax, byte ptr [rax]
157EE:	test    al, al
157F0:	jnz     short loc_1580B
157F2:	mov     rax, [rbp+dest]
157F9:	mov     rdi, rax; pointer
157FC:	call    xfree
15801:	mov     eax, 6
15806:	jmp     loc_15F50
1580B:	mov     rax, [rbp+this]
15812:	mov     eax, [rax+90h]
15818:	test    eax, eax
1581A:	jz      short loc_15880
1581C:	mov     rax, [rbp+dest]
15823:	mov     esi, 0; type
15828:	mov     rdi, rax; name
1582B:	call    _access
15830:	test    eax, eax
15832:	jnz     short loc_15880
15834:	mov     eax, 0
15839:	call    status_default
1583E:	mov     rdx, [rbp+dest_file]
15845:	mov     rax, [rbp+this]
1584C:	mov     rsi, rdx; file
1584F:	mov     rdi, rax; this
15852:	mov     eax, 0
15857:	call    panel_warning
1585C:	mov     [rbp+error], eax
15862:	mov     eax, 0
15867:	call    tty_update
1586C:	cmp     [rbp+error], 0
15873:	jz      short loc_15880
15875:	mov     eax, [rbp+error]
1587B:	jmp     loc_15F50
15880:	mov     rax, [rbp+src]
15887:	mov     rdi, rax; s
1588A:	call    _strlen
1588F:	add     rax, 20h ; ' '
15893:	mov     rdi, rax; n
15896:	call    xmalloc
1589B:	mov     [rbp+msg], rax
158A2:	mov     eax, [rbp+mode]
158A8:	and     eax, 0F000h
158AD:	cmp     eax, 8000h
158B2:	jnz     short loc_158DB
158B4:	mov     rdx, [rbp+src]
158BB:	mov     rax, [rbp+msg]
158C2:	lea     rcx, aCopy0S; '(COPY) [  0%%] %s'
158C9:	mov     rsi, rcx; format
158CC:	mov     rdi, rax; s
158CF:	mov     eax, 0
158D4:	call    _sprintf
158D9:	jmp     short loc_15900
158DB:	mov     rdx, [rbp+src]
158E2:	mov     rax, [rbp+msg]
158E9:	lea     rcx, aCopy0BytesS; '(COPY) [0 bytes] %s'
158F0:	mov     rsi, rcx; format
158F3:	mov     rdi, rax; s
158F6:	mov     eax, 0
158FB:	call    _sprintf
15900:	mov     rax, [rbp+msg]
15907:	mov     edx, 1; alignment
1590C:	mov     esi, 1; type
15911:	mov     rdi, rax; message
15914:	call    status
15919:	mov     eax, 0
1591E:	call    tty_update
15923:	mov     rax, [rbp+msg]
1592A:	mov     rdi, rax; pointer
1592D:	call    xfree
15932:	mov     rax, [rbp+src]
15939:	mov     esi, 0; oflag
1593E:	mov     rdi, rax; file
15941:	mov     eax, 0
15946:	call    _open64
1594B:	mov     [rbp+sfd], eax
15951:	cmp     [rbp+sfd], 0FFFFFFFFh
15958:	jnz     short loc_15964
1595A:	mov     eax, 4
1595F:	jmp     loc_15F50
15964:	mov     rax, [rbp+this]
1596B:	mov     eax, [rax+10h]
1596E:	test    eax, eax
15970:	jz      short loc_15979
15972:	and     [rbp+mode], 0FFFFFFB6h
15979:	mov     edx, [rbp+mode]
1597F:	mov     rax, [rbp+dest]
15986:	mov     esi, edx; mode
15988:	mov     rdi, rax; file
1598B:	call    _creat
15990:	mov     [rbp+dfd], eax
15996:	cmp     [rbp+dfd], 0FFFFFFFFh
1599D:	jnz     short loc_159C5
1599F:	mov     eax, [rbp+sfd]
159A5:	mov     edi, eax; fd
159A7:	call    _close
159AC:	mov     rax, [rbp+dest]
159B3:	mov     rdi, rax; pointer
159B6:	call    xfree
159BB:	mov     eax, 6
159C0:	jmp     loc_15F50
159C5:	mov     eax, [rbp+sfd]
159CB:	mov     edi, eax; fd
159CD:	call    get_file_length
159D2:	mov     [rbp+flen], rax
159D9:	cmp     [rbp+flen], 8000h
159E4:	jg      short loc_15A03
159E6:	mov     eax, [rbp+sfd]
159EC:	mov     edi, eax; fd
159EE:	call    get_file_length
159F3:	mov     [rbp+flen], rax
159FA:	mov     rax, [rbp+flen]
15A01:	jmp     short loc_15A08
15A03:	mov     eax, 8000h
15A08:	mov     [rbp+memsize], rax
15A0F:	mov     eax, [rbp+mode]
15A15:	and     eax, 0F000h
15A1A:	cmp     eax, 6000h
15A1F:	jz      short loc_15A33
15A21:	mov     eax, [rbp+mode]
15A27:	and     eax, 0F000h
15A2C:	cmp     eax, 2000h
15A31:	jnz     short loc_15A4F
15A33:	mov     rax, 7FFFFFFFFFFFFFFFh
15A3D:	mov     [rbp+flen], rax
15A44:	mov     [rbp+memsize], 8000h
15A4F:	cmp     [rbp+flen], 0
15A57:	jnz     short loc_15AB2
15A59:	call    _getuid
15A5E:	test    eax, eax
15A60:	jnz     short loc_15A7F
15A62:	mov     edx, [rbp+gid]; group
15A68:	mov     ecx, [rbp+uid]
15A6E:	mov     rax, [rbp+dest]
15A75:	mov     esi, ecx; owner
15A77:	mov     rdi, rax; file
15A7A:	call    _chown
15A7F:	mov     eax, [rbp+sfd]
15A85:	mov     edi, eax; fd
15A87:	call    _close
15A8C:	mov     eax, [rbp+dfd]
15A92:	mov     edi, eax; fd
15A94:	call    _close
15A99:	mov     rax, [rbp+dest]
15AA0:	mov     rdi, rax; pointer
15AA3:	call    xfree
15AA8:	mov     eax, 1
15AAD:	jmp     loc_15F50
15AB2:	mov     rax, [rbp+memsize]
15AB9:	mov     rdi, rax; n
15ABC:	call    xmalloc
15AC1:	mov     [rbp+buf], rax
15AC8:	mov     [rbp+n], 0
15AD3:	jmp     loc_15ED9
15AD8:	mov     rax, [rbp+flen]
15ADF:	sub     rax, [rbp+n]
15AE6:	mov     rdx, rax
15AE9:	mov     rax, [rbp+memsize]
15AF0:	cmp     rdx, rax
15AF3:	cmovle  rax, rdx
15AF7:	mov     [rbp+bytes_to_transfer], eax
15AFD:	mov     eax, 0
15B02:	call    canceled
15B07:	test    eax, eax
15B09:	jz      short loc_15B61
15B0B:	mov     eax, [rbp+sfd]
15B11:	mov     edi, eax; fd
15B13:	call    _close
15B18:	mov     eax, [rbp+dfd]
15B1E:	mov     edi, eax; fd
15B20:	call    _close
15B25:	mov     rax, [rbp+dest]
15B2C:	mov     rdi, rax; name
15B2F:	mov     eax, 0
15B34:	call    panel_unlink
15B39:	mov     rax, [rbp+buf]
15B40:	mov     rdi, rax; pointer
15B43:	call    xfree
15B48:	mov     rax, [rbp+dest]
15B4F:	mov     rdi, rax; pointer
15B52:	call    xfree
15B57:	mov     eax, 2
15B5C:	jmp     loc_15F50
15B61:	mov     edi, 1; mode
15B66:	call    signals
15B6B:	mov     eax, [rbp+bytes_to_transfer]
15B71:	movsxd  rdx, eax; count
15B74:	mov     rcx, [rbp+buf]
15B7B:	mov     eax, [rbp+sfd]
15B81:	mov     rsi, rcx; buf
15B84:	mov     edi, eax; fd
15B86:	call    xread
15B8B:	mov     [rbp+bytes_transferred], eax
15B91:	mov     edi, 0; mode
15B96:	call    signals
15B9B:	mov     eax, [rbp+bytes_transferred]
15BA1:	cmp     eax, [rbp+bytes_to_transfer]
15BA7:	jz      loc_15C92
15BAD:	cmp     [rbp+bytes_transferred], 0
15BB4:	js      loc_15C3C
15BBA:	cmp     [rbp+bytes_transferred], 0
15BC1:	jz      short loc_15BD4
15BC3:	mov     eax, [rbp+bytes_transferred]
15BC9:	mov     [rbp+bytes_to_transfer], eax
15BCF:	jmp     loc_15C92
15BD4:	call    _getuid
15BD9:	test    eax, eax
15BDB:	jnz     short loc_15BFA
15BDD:	mov     edx, [rbp+gid]; group
15BE3:	mov     ecx, [rbp+uid]
15BE9:	mov     rax, [rbp+dest]
15BF0:	mov     esi, ecx; owner
15BF2:	mov     rdi, rax; file
15BF5:	call    _chown
15BFA:	mov     eax, [rbp+sfd]
15C00:	mov     edi, eax; fd
15C02:	call    _close
15C07:	mov     eax, [rbp+dfd]
15C0D:	mov     edi, eax; fd
15C0F:	call    _close
15C14:	mov     rax, [rbp+buf]
15C1B:	mov     rdi, rax; pointer
15C1E:	call    xfree
15C23:	mov     rax, [rbp+dest]
15C2A:	mov     rdi, rax; pointer
15C2D:	call    xfree
15C32:	mov     eax, 1
15C37:	jmp     loc_15F50
15C3C:	mov     eax, [rbp+sfd]
15C42:	mov     edi, eax; fd
15C44:	call    _close
15C49:	mov     eax, [rbp+dfd]
15C4F:	mov     edi, eax; fd
15C51:	call    _close
15C56:	mov     rax, [rbp+dest]
15C5D:	mov     rdi, rax; name
15C60:	mov     eax, 0
15C65:	call    panel_unlink
15C6A:	mov     rax, [rbp+buf]
15C71:	mov     rdi, rax; pointer
15C74:	call    xfree
15C79:	mov     rax, [rbp+dest]
15C80:	mov     rdi, rax; pointer
15C83:	call    xfree
15C88:	mov     eax, 5
15C8D:	jmp     loc_15F50
15C92:	mov     eax, 0
15C97:	call    canceled
15C9C:	test    eax, eax
15C9E:	jz      short loc_15CF6
15CA0:	mov     eax, [rbp+sfd]
15CA6:	mov     edi, eax; fd
15CA8:	call    _close
15CAD:	mov     eax, [rbp+dfd]
15CB3:	mov     edi, eax; fd
15CB5:	call    _close
15CBA:	mov     rax, [rbp+dest]
15CC1:	mov     rdi, rax; name
15CC4:	mov     eax, 0
15CC9:	call    panel_unlink
15CCE:	mov     rax, [rbp+buf]
15CD5:	mov     rdi, rax; pointer
15CD8:	call    xfree
15CDD:	mov     rax, [rbp+dest]
15CE4:	mov     rdi, rax; pointer
15CE7:	call    xfree
15CEC:	mov     eax, 2
15CF1:	jmp     loc_15F50
15CF6:	mov     eax, [rbp+bytes_to_transfer]
15CFC:	movsxd  rdx, eax; count
15CFF:	mov     rcx, [rbp+buf]
15D06:	mov     eax, [rbp+dfd]
15D0C:	mov     rsi, rcx; buf
15D0F:	mov     edi, eax; fd
15D11:	call    xwrite
15D16:	mov     [rbp+bytes_transferred], eax
15D1C:	mov     eax, [rbp+bytes_transferred]
15D22:	cmp     eax, [rbp+bytes_to_transfer]
15D28:	jz      loc_15DB7
15D2E:	call    ___errno_location
15D33:	mov     eax, [rax]
15D35:	mov     [rbp+safe_errno], eax
15D3B:	mov     eax, [rbp+sfd]
15D41:	mov     edi, eax; fd
15D43:	call    _close
15D48:	mov     eax, [rbp+dfd]
15D4E:	mov     edi, eax; fd
15D50:	call    _close
15D55:	mov     rax, [rbp+dest]
15D5C:	mov     rdi, rax; name
15D5F:	mov     eax, 0
15D64:	call    panel_unlink
15D69:	mov     rax, [rbp+buf]
15D70:	mov     rdi, rax; pointer
15D73:	call    xfree
15D78:	mov     rax, [rbp+dest]
15D7F:	mov     rdi, rax; pointer
15D82:	call    xfree
15D87:	cmp     [rbp+bytes_transferred], 0
15D8E:	jg      short loc_15DAD
15D90:	cmp     [rbp+safe_errno], 1Ch
15D97:	jnz     short loc_15DA3
15D99:	mov     eax, 8
15D9E:	jmp     loc_15F50
15DA3:	mov     eax, 7
15DA8:	jmp     loc_15F50
15DAD:	mov     eax, 8
15DB2:	jmp     loc_15F50
15DB7:	mov     eax, [rbp+bytes_to_transfer]
15DBD:	movsxd  rdx, eax
15DC0:	mov     rax, [rbp+n]
15DC7:	add     rax, rdx
15DCA:	cmp     [rbp+flen], rax
15DD1:	jl      loc_15ECE
15DD7:	mov     rax, [rbp+src]
15DDE:	mov     rdi, rax; s
15DE1:	call    _strlen
15DE6:	add     rax, 20h ; ' '
15DEA:	mov     rdi, rax; n
15DED:	call    xmalloc
15DF2:	mov     [rbp+msg], rax
15DF9:	mov     eax, [rbp+mode]
15DFF:	and     eax, 0F000h
15E04:	cmp     eax, 8000h
15E09:	jnz     short loc_15E60
15E0B:	mov     eax, [rbp+bytes_to_transfer]
15E11:	movsxd  rdx, eax
15E14:	mov     rax, [rbp+n]
15E1B:	add     rdx, rax
15E1E:	mov     rax, [rbp+flen]
15E25:	mov     rsi, rax; total
15E28:	mov     rdi, rdx; x
15E2B:	mov     eax, 0
15E30:	call    panel_percent
15E35:	mov     esi, eax
15E37:	mov     rdx, [rbp+src]
15E3E:	mov     rax, [rbp+msg]
15E45:	mov     rcx, rdx
15E48:	mov     edx, esi
15E4A:	lea     rsi, aCopy3dS; '(COPY) [%3d%%] %s'
15E51:	mov     rdi, rax; s
15E54:	mov     eax, 0
15E59:	call    _sprintf
15E5E:	jmp     short loc_15E9C
15E60:	mov     eax, [rbp+bytes_to_transfer]
15E66:	movsxd  rdx, eax
15E69:	mov     rax, [rbp+n]
15E70:	lea     rsi, [rdx+rax]
15E74:	mov     rdx, [rbp+src]
15E7B:	mov     rax, [rbp+msg]
15E82:	mov     rcx, rdx
15E85:	mov     rdx, rsi
15E88:	lea     rsi, aCopyLdBytesS; '(COPY) [%Ld bytes] %s'
15E8F:	mov     rdi, rax; s
15E92:	mov     eax, 0
15E97:	call    _sprintf
15E9C:	mov     rax, [rbp+msg]
15EA3:	mov     edx, 1; alignment
15EA8:	mov     esi, 1; type
15EAD:	mov     rdi, rax; message
15EB0:	call    status
15EB5:	mov     eax, 0
15EBA:	call    tty_update
15EBF:	mov     rax, [rbp+msg]
15EC6:	mov     rdi, rax; pointer
15EC9:	call    xfree
15ECE:	add     [rbp+n], 8000h
15ED9:	mov     rax, [rbp+n]
15EE0:	cmp     rax, [rbp+flen]
15EE7:	jl      loc_15AD8
15EED:	call    _getuid
15EF2:	test    eax, eax
15EF4:	jnz     short loc_15F13
15EF6:	mov     edx, [rbp+gid]; group
15EFC:	mov     ecx, [rbp+uid]
15F02:	mov     rax, [rbp+dest]
15F09:	mov     esi, ecx; owner
15F0B:	mov     rdi, rax; file
15F0E:	call    _chown
15F13:	mov     eax, [rbp+sfd]
15F19:	mov     edi, eax; fd
15F1B:	call    _close
15F20:	mov     eax, [rbp+dfd]
15F26:	mov     edi, eax; fd
15F28:	call    _close
15F2D:	mov     rax, [rbp+buf]
15F34:	mov     rdi, rax; pointer
15F37:	call    xfree
15F3C:	mov     rax, [rbp+dest]
15F43:	mov     rdi, rax; pointer
15F46:	call    xfree
15F4B:	mov     eax, 1
15F50:	mov     rdx, [rbp+var_18]
15F54:	sub     rdx, fs:28h
15F5D:	jz      short loc_15F64
15F5F:	call    ___stack_chk_fail
15F64:	mov     rbx, [rbp+var_8]
15F68:	leave
15F69:	retn
15F6A:	endbr64
15F6E:	push    rbp
15F6F:	mov     rbp, rsp
15F72:	push    rbx
15F73:	sub     rsp, 198h
15F7A:	mov     [rbp+this], rdi
15F81:	mov     [rbp+from], rsi
15F88:	mov     [rbp+to], rdx
15F8F:	mov     [rbp+mode], ecx
15F95:	mov     rax, fs:28h
15F9E:	mov     [rbp+var_18], rax
15FA2:	xor     eax, eax
15FA4:	mov     eax, [rbp+mode]
15FAA:	and     eax, 0F000h
15FAF:	cmp     eax, 4000h
15FB4:	jnz     loc_162AC
15FBA:	lea     rdx, [rbp+to_statbuf]
15FC1:	mov     rax, [rbp+to]
15FC8:	mov     rsi, rdx; buf
15FCB:	mov     rdi, rax; filename
15FCE:	call    xstat
15FD3:	test    eax, eax
15FD5:	jnz     loc_160EA
15FDB:	mov     eax, [rbp+to_statbuf.st_mode]
15FE1:	and     eax, 0F000h
15FE6:	cmp     eax, 4000h
15FEB:	jz      short loc_15FF7
15FED:	mov     eax, 9
15FF2:	jmp     loc_167C6
15FF7:	mov     rax, [rbp+to]
15FFE:	mov     rdi, rax; s
16001:	call    _strlen
16006:	mov     rbx, rax
16009:	mov     rax, [rbp+from]
16010:	mov     rdi, rax; s
16013:	call    _strlen
16018:	add     rax, rbx
1601B:	add     rax, 2
1601F:	mov     rdi, rax; n
16022:	call    xmalloc
16027:	mov     [rbp+temp], rax
1602E:	mov     rcx, [rbp+from]
16035:	mov     rdx, [rbp+to]
1603C:	mov     rax, [rbp+temp]
16043:	lea     rsi, aSS_2; '%s/%s'
1604A:	mov     rdi, rax; s
1604D:	mov     eax, 0
16052:	call    _sprintf
16057:	mov     rax, [rbp+this]
1605E:	mov     eax, [rax+90h]
16064:	test    eax, eax
16066:	jz      short loc_160DB
16068:	mov     rax, [rbp+temp]
1606F:	mov     esi, 0; type
16074:	mov     rdi, rax; name
16077:	call    _access
1607C:	test    eax, eax
1607E:	jnz     short loc_160DB
16080:	mov     eax, 0
16085:	call    status_default
1608A:	mov     rdx, [rbp+temp]
16091:	mov     rax, [rbp+this]
16098:	mov     rsi, rdx; file
1609B:	mov     rdi, rax; this
1609E:	mov     eax, 0
160A3:	call    panel_warning
160A8:	mov     [rbp+error], eax
160AE:	mov     eax, 0
160B3:	call    tty_update
160B8:	mov     rax, [rbp+temp]
160BF:	mov     rdi, rax; pointer
160C2:	call    xfree
160C7:	cmp     [rbp+error], 0
160CE:	jz      short loc_160EA
160D0:	mov     eax, [rbp+error]
160D6:	jmp     loc_167C6
160DB:	mov     rax, [rbp+temp]
160E2:	mov     rdi, rax; pointer
160E5:	call    xfree
160EA:	mov     rax, [rbp+from]
160F1:	mov     rdi, rax; s
160F4:	call    _strlen
160F9:	mov     rbx, rax
160FC:	mov     rax, [rbp+to]
16103:	mov     rdi, rax; s
16106:	call    _strlen
1610B:	add     rax, rbx
1610E:	add     rax, 21h ; '!'
16112:	mov     rdi, rax; n
16115:	call    xmalloc
1611A:	mov     [rbp+temp], rax
16121:	mov     rax, [rbp+to]
16128:	mov     rdi, rax; name
1612B:	call    xbasename
16130:	mov     [rbp+to_file], rax
16137:	mov     rax, [rbp+to_file]
1613E:	movzx   eax, byte ptr [rax]
16141:	test    al, al
16143:	jnz     short loc_1614F
16145:	mov     eax, 4
1614A:	jmp     loc_167C6
1614F:	mov     rax, [rbp+from]
16156:	mov     rdi, rax; s
16159:	call    _strlen
1615E:	mov     rbx, rax
16161:	mov     rax, [rbp+to]
16168:	mov     rdi, rax; s
1616B:	call    _strlen
16170:	add     rax, rbx
16173:	add     rax, 20h ; ' '
16177:	mov     rdi, rax; n
1617A:	call    xmalloc
1617F:	mov     [rbp+msg], rax
16186:	mov     rcx, [rbp+to]
1618D:	mov     rdx, [rbp+from]
16194:	mov     rax, [rbp+msg]
1619B:	lea     rsi, aMoveMvFSS; '(MOVE) mv -f '%s' '%s''
161A2:	mov     rdi, rax; s
161A5:	mov     eax, 0
161AA:	call    _sprintf
161AF:	mov     rax, [rbp+msg]
161B6:	mov     edx, 1; alignment
161BB:	mov     esi, 1; type
161C0:	mov     rdi, rax; message
161C3:	call    status
161C8:	mov     eax, 0
161CD:	call    tty_update
161D2:	mov     rax, [rbp+msg]
161D9:	mov     rdi, rax; pointer
161DC:	call    xfree
161E1:	mov     rcx, [rbp+to]
161E8:	mov     rdx, [rbp+from]
161EF:	mov     rax, [rbp+temp]
161F6:	lea     rsi, aMvFSS; 'mv -f '%s' '%s''
161FD:	mov     rdi, rax; s
16200:	mov     eax, 0
16205:	call    _sprintf
1620A:	mov     rax, [rbp+temp]
16211:	mov     esi, 1; hide
16216:	mov     rdi, rax; command
16219:	call    start
1621E:	mov     [rbp+result], eax
16224:	mov     rax, [rbp+temp]
1622B:	mov     rdi, rax; pointer
1622E:	call    xfree
16233:	mov     rax, [rbp+this]
1623A:	mov     rax, [rax+18h]
1623E:	mov     rdi, rax; string
16241:	call    tty_update_title
16246:	mov     eax, [rbp+result]
1624C:	and     eax, 7Fh
1624F:	add     eax, 1
16252:	sar     al, 1
16254:	test    al, al
16256:	jle     short loc_16262
16258:	mov     eax, 0Ch
1625D:	jmp     loc_167C6
16262:	mov     eax, [rbp+result]
16268:	and     eax, 7Fh
1626B:	test    eax, eax
1626D:	jnz     short loc_162A2
1626F:	mov     eax, [rbp+result]
16275:	sar     eax, 8
16278:	movzx   eax, al
1627B:	test    eax, eax
1627D:	jz      short loc_16298
1627F:	lea     rax, aMv; 'mv'
16286:	mov     rdi, rax; command
16289:	call    display_errors
1628E:	mov     eax, 8
16293:	jmp     loc_167C6
16298:	mov     eax, 1
1629D:	jmp     loc_167C6
162A2:	mov     eax, 8
162A7:	jmp     loc_167C6
162AC:	mov     rax, [rbp+to]
162B3:	mov     rdi, rax; s
162B6:	call    _strlen
162BB:	mov     [rbp+len], rax
162C2:	mov     rax, [rbp+to]
162C9:	mov     rdi, rax; string
162CC:	call    xstrdup
162D1:	mov     [rbp+to], rax
162D8:	lea     rdx, [rbp+to_statbuf]
162DF:	mov     rax, [rbp+to]
162E6:	mov     rsi, rdx; buf
162E9:	mov     rdi, rax; filename
162EC:	call    xstat
162F1:	test    eax, eax
162F3:	jnz     loc_1637B
162F9:	mov     eax, [rbp+to_statbuf.st_mode]
162FF:	and     eax, 0F000h
16304:	cmp     eax, 4000h
16309:	jnz     short loc_1637B
1630B:	mov     rax, [rbp+from]
16312:	mov     rdi, rax; s
16315:	call    _strlen
1631A:	mov     rdx, [rbp+len]
16321:	add     rax, rdx
16324:	lea     rdx, [rax+2]
16328:	mov     rax, [rbp+to]
1632F:	mov     rsi, rdx; n
16332:	mov     rdi, rax; p
16335:	call    xrealloc
1633A:	mov     [rbp+to], rax
16341:	mov     rax, [rbp+to]
16348:	mov     rdi, rax; s
1634B:	call    _strlen
16350:	mov     rdx, rax
16353:	mov     rax, [rbp+to]
1635A:	add     rax, rdx
1635D:	mov     word ptr [rax], 2Fh ; '/'
16362:	mov     rdx, [rbp+from]
16369:	mov     rax, [rbp+to]
16370:	mov     rsi, rdx; src
16373:	mov     rdi, rax; dest
16376:	call    _strcat
1637B:	mov     rax, [rbp+to]
16382:	mov     rdi, rax; name
16385:	call    xbasename
1638A:	mov     [rbp+to_file], rax
16391:	mov     rax, [rbp+to_file]
16398:	movzx   eax, byte ptr [rax]
1639B:	test    al, al
1639D:	jnz     short loc_163B8
1639F:	mov     rax, [rbp+to]
163A6:	mov     rdi, rax; pointer
163A9:	call    xfree
163AE:	mov     eax, 4
163B3:	jmp     loc_167C6
163B8:	mov     rax, [rbp+to_file]
163BF:	cmp     rax, [rbp+to]
163C6:	jnz     loc_1646B
163CC:	mov     rax, [rbp+to]
163D3:	mov     rdi, rax; s
163D6:	call    _strlen
163DB:	mov     [rbp+len], rax
163E2:	mov     rax, [rbp+len]
163E9:	add     rax, 3
163ED:	mov     rdi, rax; n
163F0:	call    xmalloc
163F5:	mov     [rbp+temp_0], rax
163FC:	mov     rax, [rbp+temp_0]
16403:	mov     byte ptr [rax], 2Eh ; '.'
16406:	mov     rax, [rbp+temp_0]
1640D:	add     rax, 1
16411:	mov     byte ptr [rax], 2Fh ; '/'
16414:	mov     rax, [rbp+len]
1641B:	lea     rdx, [rax+1]; n
1641F:	mov     rax, [rbp+temp_0]
16426:	lea     rcx, [rax+2]
1642A:	mov     rax, [rbp+to]
16431:	mov     rsi, rax; src
16434:	mov     rdi, rcx; dest
16437:	call    _memcpy
1643C:	mov     rax, [rbp+to]
16443:	mov     rdi, rax; pointer
16446:	call    xfree
1644B:	mov     rax, [rbp+temp_0]
16452:	mov     [rbp+to], rax
16459:	mov     rax, [rbp+to]
16460:	add     rax, 2
16464:	mov     [rbp+to_file], rax
1646B:	mov     rax, [rbp+this]
16472:	mov     eax, [rax+90h]
16478:	test    eax, eax
1647A:	jz      short loc_164E0
1647C:	mov     rax, [rbp+to]
16483:	mov     esi, 0; type
16488:	mov     rdi, rax; name
1648B:	call    _access
16490:	test    eax, eax
16492:	jnz     short loc_164E0
16494:	mov     eax, 0
16499:	call    status_default
1649E:	mov     rdx, [rbp+to_file]
164A5:	mov     rax, [rbp+this]
164AC:	mov     rsi, rdx; file
164AF:	mov     rdi, rax; this
164B2:	mov     eax, 0
164B7:	call    panel_warning
164BC:	mov     [rbp+error], eax
164C2:	mov     eax, 0
164C7:	call    tty_update
164CC:	cmp     [rbp+error], 0
164D3:	jz      short loc_164E0
164D5:	mov     eax, [rbp+error]
164DB:	jmp     loc_167C6
164E0:	mov     rax, [rbp+from]
164E7:	mov     rdi, rax; s
164EA:	call    _strlen
164EF:	add     rax, 20h ; ' '
164F3:	mov     rdi, rax; n
164F6:	call    xmalloc
164FB:	mov     [rbp+msg], rax
16502:	mov     rdx, [rbp+from]
16509:	mov     rax, [rbp+msg]
16510:	lea     rcx, aMoveS; '(MOVE) %s'
16517:	mov     rsi, rcx; format
1651A:	mov     rdi, rax; s
1651D:	mov     eax, 0
16522:	call    _sprintf
16527:	mov     rax, [rbp+msg]
1652E:	mov     edx, 1; alignment
16533:	mov     esi, 1; type
16538:	mov     rdi, rax; message
1653B:	call    status
16540:	mov     eax, 0
16545:	call    tty_update
1654A:	mov     rax, [rbp+msg]
16551:	mov     rdi, rax; pointer
16554:	call    xfree
16559:	lea     rdx, [rbp+from_statbuf]
16560:	mov     rax, [rbp+from]
16567:	mov     rsi, rdx; buf
1656A:	mov     rdi, rax; filename
1656D:	call    xstat
16572:	cmp     eax, 0FFFFFFFFh
16575:	jnz     short loc_16581
16577:	mov     eax, 6
1657C:	jmp     loc_167C6
16581:	lea     rdx, [rbp+to_statbuf]
16588:	mov     rax, [rbp+to]
1658F:	mov     rsi, rdx; buf
16592:	mov     rdi, rax; filename
16595:	call    xstat
1659A:	cmp     eax, 0FFFFFFFFh
1659D:	jnz     loc_16631
165A3:	mov     rax, [rbp+to_file]
165AA:	movzx   eax, byte ptr [rax-1]
165AE:	mov     [rbp+c], al
165B4:	mov     rax, [rbp+to_file]
165BB:	sub     rax, 1
165BF:	mov     byte ptr [rax], 0
165C2:	mov     rax, [rbp+to]
165C9:	movzx   eax, byte ptr [rax]
165CC:	test    al, al
165CE:	jz      short loc_165EB
165D0:	lea     rdx, [rbp+to_statbuf]
165D7:	mov     rax, [rbp+to]
165DE:	mov     rsi, rdx; buf
165E1:	mov     rdi, rax; filename
165E4:	call    xstat
165E9:	jmp     short loc_16604
165EB:	lea     rax, [rbp+to_statbuf]
165F2:	mov     rsi, rax; buf
165F5:	lea     rax, filename; '/'
165FC:	mov     rdi, rax; filename
165FF:	call    xstat
16604:	mov     [rbp+error], eax
1660A:	mov     rax, [rbp+to_file]
16611:	lea     rdx, [rax-1]
16615:	movzx   eax, [rbp+c]
1661C:	mov     [rdx], al
1661E:	cmp     [rbp+error], 0FFFFFFFFh
16625:	jnz     short loc_16631
16627:	mov     eax, 7
1662C:	jmp     loc_167C6
16631:	mov     rdx, [rbp+to_statbuf.st_dev]
16638:	mov     rax, [rbp+from_statbuf.st_dev]
1663F:	cmp     rdx, rax
16642:	jnz     short loc_16656
16644:	mov     rax, [rbp+this]
1664B:	mov     eax, [rax+10h]
1664E:	test    eax, eax
16650:	jz      loc_16740
16656:	mov     r8d, [rbp+from_statbuf.st_gid]
1665D:	mov     edi, [rbp+from_statbuf.st_uid]
16663:	mov     ecx, [rbp+from_statbuf.st_mode]; mode
16669:	mov     rdx, [rbp+to]; dest
16670:	mov     rsi, [rbp+from]; src
16677:	mov     rax, [rbp+this]
1667E:	mov     r9d, r8d; gid
16681:	mov     r8d, edi; uid
16684:	mov     rdi, rax; this
16687:	mov     eax, 0
1668C:	call    panel_copy
16691:	mov     [rbp+error], eax
16697:	cmp     [rbp+error], 8
1669E:	jz      short loc_166E5
166A0:	cmp     [rbp+error], 8
166A7:	jg      short loc_166EF
166A9:	cmp     [rbp+error], 3
166B0:	jz      short loc_166DB
166B2:	cmp     [rbp+error], 3
166B9:	jg      short loc_166EF
166BB:	cmp     [rbp+error], 1
166C2:	jz      loc_167A2
166C8:	cmp     [rbp+error], 2
166CF:	jnz     short loc_166EF
166D1:	mov     eax, 2
166D6:	jmp     loc_167C6
166DB:	mov     eax, 3
166E0:	jmp     loc_167C6
166E5:	mov     eax, 0Ah
166EA:	jmp     loc_167C6
166EF:	mov     eax, [rbp+error]
166F5:	sub     eax, 1
166F8:	cdqe
166FA:	lea     rdx, ds:0[rax*8]
16702:	lea     rax, copyerr
16709:	mov     rdx, [rdx+rax]; string2
1670D:	mov     rax, [rbp+from]
16714:	mov     r8d, 0Eh; flags
1671A:	mov     ecx, 0; options
1671F:	mov     rsi, rax; string1
16722:	lea     rax, aSCopyFailedS; '%s: Copy failed, %s.'
16729:	mov     rdi, rax; format
1672C:	mov     eax, 0
16731:	call    panel_3s_message
16736:	mov     eax, 0Bh
1673B:	jmp     loc_167C6
16740:	mov     eax, 0
16745:	call    service_pending_signals
1674A:	mov     eax, [rbp+to_statbuf.st_mode]
16750:	and     eax, 0F000h
16755:	cmp     eax, 8000h
1675A:	jz      short loc_1676E
1675C:	mov     eax, [rbp+to_statbuf.st_mode]
16762:	and     eax, 0F000h
16767:	cmp     eax, 4000h
1676C:	jnz     short loc_167A5
1676E:	mov     rax, [rbp+to]
16775:	mov     rdi, rax; name
16778:	call    _unlink
1677D:	mov     rdx, [rbp+to]
16784:	mov     rax, [rbp+from]
1678B:	mov     rsi, rdx; to
1678E:	mov     rdi, rax; from
16791:	call    _link
16796:	cmp     eax, 0FFFFFFFFh
16799:	jnz     short loc_167A5
1679B:	mov     eax, 4
167A0:	jmp     short loc_167C6
167A2:	nop
167A3:	jmp     short remove_from
167A5:	nop
167A6:	mov     rax, [rbp+from]
167AD:	mov     rdi, rax; name
167B0:	call    _unlink
167B5:	cmp     eax, 0FFFFFFFFh
167B8:	jnz     short loc_167C1
167BA:	mov     eax, 5
167BF:	jmp     short loc_167C6
167C1:	mov     eax, 1
167C6:	mov     rdx, [rbp+var_18]
167CA:	sub     rdx, fs:28h
167D3:	jz      short loc_167DA
167D5:	call    ___stack_chk_fail
167DA:	mov     rbx, [rbp+var_8]
167DE:	leave
167DF:	retn
167E0:	endbr64
167E4:	push    rbp
167E5:	mov     rbp, rsp
167E8:	sub     rsp, 30h
167EC:	mov     [rbp+this], rdi
167F0:	mov     [rbp+str], rsi
167F4:	mov     rax, [rbp+str]
167F8:	mov     rdi, rax; s
167FB:	call    _strlen
16800:	mov     [rbp+len], rax
16804:	mov     rax, [rbp+len]
16808:	add     rax, 1
1680C:	mov     rdi, rax; n
1680F:	call    xmalloc
16814:	mov     [rbp+temp], rax
16818:	mov     rax, [rbp+this]
1681C:	mov     eax, [rax+30h]
1681F:	cdqe
16821:	mov     rdx, [rbp+len]
16825:	cmp     rdx, rax
16828:	cmovbe  rax, rdx
1682C:	mov     [rbp+len], rax
16830:	mov     rdx, [rbp+len]; n
16834:	mov     rcx, [rbp+str]
16838:	mov     rax, [rbp+temp]
1683C:	mov     rsi, rcx; src
1683F:	mov     rdi, rax; dest
16842:	call    _strncpy
16847:	mov     rdx, [rbp+temp]
1684B:	mov     rax, [rbp+len]
1684F:	add     rax, rdx
16852:	mov     byte ptr [rax], 0
16855:	mov     [rbp+entry], 0
1685C:	jmp     short loc_16897
1685E:	mov     rax, [rbp+this]
16862:	mov     rcx, [rax+38h]
16866:	mov     eax, [rbp+entry]
16869:	movsxd  rdx, eax
1686C:	mov     rax, rdx
1686F:	shl     rax, 2
16873:	add     rax, rdx
16876:	shl     rax, 4
1687A:	add     rax, rcx
1687D:	mov     rdx, [rax]
16880:	mov     rax, [rbp+temp]
16884:	mov     rsi, rdx; s2
16887:	mov     rdi, rax; s1
1688A:	call    _strcmp
1688F:	test    eax, eax
16891:	jz      short loc_168A5
16893:	add     [rbp+entry], 1
16897:	mov     rax, [rbp+this]
1689B:	mov     eax, [rax+68h]
1689E:	cmp     [rbp+entry], eax
168A1:	jl      short loc_1685E
168A3:	jmp     short loc_168A6
168A5:	nop
168A6:	mov     rax, [rbp+this]
168AA:	mov     eax, [rax+68h]
168AD:	cmp     [rbp+entry], eax
168B0:	jnz     loc_16AB2
168B6:	mov     [rbp+entry], 0
168BD:	jmp     short loc_168F8
168BF:	mov     rax, [rbp+this]
168C3:	mov     rcx, [rax+38h]
168C7:	mov     eax, [rbp+entry]
168CA:	movsxd  rdx, eax
168CD:	mov     rax, rdx
168D0:	shl     rax, 2
168D4:	add     rax, rdx
168D7:	shl     rax, 4
168DB:	add     rax, rcx
168DE:	mov     rdx, [rax]
168E1:	mov     rax, [rbp+temp]
168E5:	mov     rsi, rdx; s2
168E8:	mov     rdi, rax; s1
168EB:	call    _strcasecmp
168F0:	test    eax, eax
168F2:	jz      short loc_16906
168F4:	add     [rbp+entry], 1
168F8:	mov     rax, [rbp+this]
168FC:	mov     eax, [rax+68h]
168FF:	cmp     [rbp+entry], eax
16902:	jl      short loc_168BF
16904:	jmp     short loc_16907
16906:	nop
16907:	mov     rax, [rbp+this]
1690B:	mov     eax, [rax+68h]
1690E:	cmp     [rbp+entry], eax
16911:	jnz     loc_16AB5
16917:	mov     [rbp+entry], 0
1691E:	jmp     loc_169BF
16923:	mov     rax, [rbp+this]
16927:	mov     rcx, [rax+38h]
1692B:	mov     eax, [rbp+entry]
1692E:	movsxd  rdx, eax
16931:	mov     rax, rdx
16934:	shl     rax, 2
16938:	add     rax, rdx
1693B:	shl     rax, 4
1693F:	add     rax, rcx
16942:	mov     rax, [rax]
16945:	mov     rdi, rax; s
16948:	call    _strlen
1694D:	cmp     [rbp+len], rax
16951:	jbe     short loc_16982
16953:	mov     rax, [rbp+this]
16957:	mov     rcx, [rax+38h]
1695B:	mov     eax, [rbp+entry]
1695E:	movsxd  rdx, eax
16961:	mov     rax, rdx
16964:	shl     rax, 2
16968:	add     rax, rdx
1696B:	shl     rax, 4
1696F:	add     rax, rcx
16972:	mov     rax, [rax]
16975:	mov     rdi, rax; s
16978:	call    _strlen
1697D:	mov     rdx, rax
16980:	jmp     short loc_16986
16982:	mov     rdx, [rbp+len]; n
16986:	mov     rax, [rbp+this]
1698A:	mov     rsi, [rax+38h]
1698E:	mov     eax, [rbp+entry]
16991:	movsxd  rcx, eax
16994:	mov     rax, rcx
16997:	shl     rax, 2
1699B:	add     rax, rcx
1699E:	shl     rax, 4
169A2:	add     rax, rsi
169A5:	mov     rcx, [rax]
169A8:	mov     rax, [rbp+temp]
169AC:	mov     rsi, rcx; s2
169AF:	mov     rdi, rax; s1
169B2:	call    _strncmp
169B7:	test    eax, eax
169B9:	jz      short loc_169D1
169BB:	add     [rbp+entry], 1
169BF:	mov     rax, [rbp+this]
169C3:	mov     eax, [rax+68h]
169C6:	cmp     [rbp+entry], eax
169C9:	jl      loc_16923
169CF:	jmp     short loc_169D2
169D1:	nop
169D2:	mov     rax, [rbp+this]
169D6:	mov     eax, [rax+68h]
169D9:	cmp     [rbp+entry], eax
169DC:	jnz     loc_16AB8
169E2:	mov     [rbp+entry], 0
169E9:	jmp     loc_16A8A
169EE:	mov     rax, [rbp+this]
169F2:	mov     rcx, [rax+38h]
169F6:	mov     eax, [rbp+entry]
169F9:	movsxd  rdx, eax
169FC:	mov     rax, rdx
169FF:	shl     rax, 2
16A03:	add     rax, rdx
16A06:	shl     rax, 4
16A0A:	add     rax, rcx
16A0D:	mov     rax, [rax]
16A10:	mov     rdi, rax; s
16A13:	call    _strlen
16A18:	cmp     [rbp+len], rax
16A1C:	jbe     short loc_16A4D
16A1E:	mov     rax, [rbp+this]
16A22:	mov     rcx, [rax+38h]
16A26:	mov     eax, [rbp+entry]
16A29:	movsxd  rdx, eax
16A2C:	mov     rax, rdx
16A2F:	shl     rax, 2
16A33:	add     rax, rdx
16A36:	shl     rax, 4
16A3A:	add     rax, rcx
16A3D:	mov     rax, [rax]
16A40:	mov     rdi, rax; s
16A43:	call    _strlen
16A48:	mov     rdx, rax
16A4B:	jmp     short loc_16A51
16A4D:	mov     rdx, [rbp+len]; n
16A51:	mov     rax, [rbp+this]
16A55:	mov     rsi, [rax+38h]
16A59:	mov     eax, [rbp+entry]
16A5C:	movsxd  rcx, eax
16A5F:	mov     rax, rcx
16A62:	shl     rax, 2
16A66:	add     rax, rcx
16A69:	shl     rax, 4
16A6D:	add     rax, rsi
16A70:	mov     rcx, [rax]
16A73:	mov     rax, [rbp+temp]
16A77:	mov     rsi, rcx; s2
16A7A:	mov     rdi, rax; s1
16A7D:	call    _strncasecmp
16A82:	test    eax, eax
16A84:	jz      short loc_16A9C
16A86:	add     [rbp+entry], 1
16A8A:	mov     rax, [rbp+this]
16A8E:	mov     eax, [rax+68h]
16A91:	cmp     [rbp+entry], eax
16A94:	jl      loc_169EE
16A9A:	jmp     short loc_16A9D
16A9C:	nop
16A9D:	mov     rax, [rbp+this]
16AA1:	mov     eax, [rax+68h]
16AA4:	cmp     [rbp+entry], eax
16AA7:	jnz     short loc_16ABB
16AA9:	mov     [rbp+entry], 0
16AB0:	jmp     short done
16AB2:	nop
16AB3:	jmp     short done
16AB5:	nop
16AB6:	jmp     short done
16AB8:	nop
16AB9:	jmp     short done
16ABB:	nop
16ABC:	mov     rax, [rbp+temp]
16AC0:	mov     rdi, rax; pointer
16AC3:	call    xfree
16AC8:	mov     eax, [rbp+entry]
16ACB:	leave
16ACC:	retn
16ACD:	endbr64
16AD1:	push    rbp
16AD2:	mov     rbp, rsp
16AD5:	sub     rsp, 40h
16AD9:	mov     [rbp+this], rdi
16ADD:	mov     [rbp+other], rsi
16AE1:	mov     rax, [rbp+this]
16AE5:	mov     rcx, [rax+38h]
16AE9:	mov     rax, [rbp+this]
16AED:	mov     eax, [rax+28h]
16AF0:	movsxd  rdx, eax
16AF3:	mov     rax, rdx
16AF6:	shl     rax, 2
16AFA:	add     rax, rdx
16AFD:	shl     rax, 4
16B01:	add     rax, rcx
16B04:	mov     rax, [rax]
16B07:	mov     [rbp+name], rax
16B0B:	mov     rax, [rbp+this]
16B0F:	mov     rcx, [rax+38h]
16B13:	mov     rax, [rbp+this]
16B17:	mov     eax, [rax+28h]
16B1A:	movsxd  rdx, eax
16B1D:	mov     rax, rdx
16B20:	shl     rax, 2
16B24:	add     rax, rdx
16B27:	shl     rax, 4
16B2B:	add     rax, rcx
16B2E:	movzx   eax, byte ptr [rax+48h]
16B32:	movsx   eax, al
16B35:	test    eax, eax
16B37:	jz      short loc_16B47
16B39:	cmp     eax, 1
16B3C:	jz      loc_16D2F
16B42:	jmp     loc_16E18
16B47:	mov     rax, [rbp+name]
16B4B:	lea     rdx, asc_285DE; '..'
16B52:	mov     rsi, rdx; s2
16B55:	mov     rdi, rax; s1
16B58:	call    _strcmp
16B5D:	test    eax, eax
16B5F:	jnz     short loc_16B83
16B61:	mov     rax, [rbp+this]
16B65:	mov     rax, [rax+18h]
16B69:	lea     rdx, filename; '/'
16B70:	mov     rsi, rdx; s2
16B73:	mov     rdi, rax; s1
16B76:	call    _strcmp
16B7B:	test    eax, eax
16B7D:	jz      loc_16E14
16B83:	mov     rax, [rbp+name]
16B87:	lea     rdx, asc_285DE; '..'
16B8E:	mov     rsi, rdx; s2
16B91:	mov     rdi, rax; s1
16B94:	call    _strcmp
16B99:	test    eax, eax
16B9B:	setz    al
16B9E:	movzx   eax, al
16BA1:	mov     [rbp+back], eax
16BA4:	mov     rax, [rbp+this]
16BA8:	mov     rax, [rax+78h]
16BAC:	add     rax, 1
16BB0:	mov     rdi, rax; n
16BB3:	call    xmalloc
16BB8:	mov     [rbp+old_path], rax
16BBC:	mov     rax, [rbp+this]
16BC0:	mov     rdx, [rax+18h]
16BC4:	mov     rax, [rbp+old_path]
16BC8:	mov     rsi, rdx; src
16BCB:	mov     rdi, rax; dest
16BCE:	call    _strcpy
16BD3:	mov     rcx, [rbp+name]
16BD7:	mov     rax, [rbp+this]
16BDB:	mov     edx, 1; verify
16BE0:	mov     rsi, rcx; directory
16BE3:	mov     rdi, rax; this
16BE6:	mov     eax, 0
16BEB:	call    panel_read_directory
16BF0:	test    eax, eax
16BF2:	jnz     short loc_16C46
16BF4:	cmp     [rbp+back], 0
16BF8:	jz      short loc_16C1C
16BFA:	mov     rax, [rbp+this]
16BFE:	mov     rdi, rax; this
16C01:	mov     eax, 0
16C06:	call    panel_recover
16C0B:	mov     rax, [rbp+this]
16C0F:	mov     rdi, rax; this
16C12:	call    panel_update
16C17:	jmp     loc_16E18
16C1C:	mov     rax, [rbp+name]
16C20:	mov     ecx, 1Ch; flags
16C25:	mov     edx, 0; options
16C2A:	mov     rsi, rax; string
16C2D:	lea     rax, aSPermissionDen_0; '%s/: Permission denied.'
16C34:	mov     rdi, rax; format
16C37:	mov     eax, 0
16C3C:	call    panel_2s_message
16C41:	jmp     loc_16E18
16C46:	cmp     [rbp+back], 0
16C4A:	jz      short loc_16C99
16C4C:	mov     rax, [rbp+old_path]
16C50:	mov     esi, 2Fh ; '/'; c
16C55:	mov     rdi, rax; s
16C58:	call    _strrchr
16C5D:	mov     [rbp+old_entry_name], rax
16C61:	add     [rbp+old_entry_name], 1
16C66:	mov     rdx, [rbp+old_entry_name]
16C6A:	mov     rax, [rbp+this]
16C6E:	mov     rsi, rdx; str
16C71:	mov     rdi, rax; this
16C74:	mov     eax, 0
16C79:	call    panel_find_index
16C7E:	mov     [rbp+index], eax
16C81:	mov     edx, [rbp+index]
16C84:	mov     rax, [rbp+this]
16C88:	mov     esi, edx; entry
16C8A:	mov     rdi, rax; this
16C8D:	mov     eax, 0
16C92:	call    panel_set_current_entry
16C97:	jmp     short loc_16CAF
16C99:	mov     rax, [rbp+this]
16C9D:	mov     esi, 0; entry
16CA2:	mov     rdi, rax; this
16CA5:	mov     eax, 0
16CAA:	call    panel_set_current_entry
16CAF:	mov     rax, [rbp+old_path]
16CB3:	mov     rdi, rax; pointer
16CB6:	call    xfree
16CBB:	mov     rax, [rbp+this]
16CBF:	mov     rdi, rax; this
16CC2:	call    panel_update
16CC7:	mov     rax, [rbp+other]
16CCB:	mov     rdx, [rax+18h]
16CCF:	mov     rax, [rbp+this]
16CD3:	mov     rax, [rax+18h]
16CD7:	mov     rsi, rdx; s2
16CDA:	mov     rdi, rax; s1
16CDD:	call    _strcmp
16CE2:	test    eax, eax
16CE4:	jnz     short loc_16D19
16CE6:	mov     rdx, [rbp+this]; other
16CEA:	mov     rax, [rbp+other]
16CEE:	mov     r8d, 1; repeat_count
16CF4:	mov     rcx, 0FFFFFFFFFFFFFFFFh; aux_info
16CFB:	mov     esi, 22h ; '''; action
16D00:	mov     rdi, rax; this
16D03:	call    panel_action
16D08:	mov     rax, [rbp+other]
16D0C:	mov     rdi, rax; this
16D0F:	call    panel_update
16D14:	jmp     loc_16E18
16D19:	mov     rax, [rbp+other]
16D1D:	mov     rdi, rax; this
16D20:	mov     eax, 0
16D25:	call    panel_update_size
16D2A:	jmp     loc_16E18
16D2F:	mov     rax, [rbp+this]
16D33:	mov     rcx, [rax+38h]
16D37:	mov     rax, [rbp+this]
16D3B:	mov     eax, [rax+28h]
16D3E:	movsxd  rdx, eax
16D41:	mov     rax, rdx
16D44:	shl     rax, 2
16D48:	add     rax, rdx
16D4B:	shl     rax, 4
16D4F:	add     rax, rcx
16D52:	movzx   eax, byte ptr [rax+4Ah]
16D56:	test    al, al
16D58:	jz      loc_16E17
16D5E:	mov     rax, [rbp+name]
16D62:	mov     rdi, rax; s
16D65:	call    _strlen
16D6A:	add     rax, 21h ; '!'
16D6E:	mov     rdi, rax; n
16D71:	call    xmalloc
16D76:	mov     [rbp+cmd], rax
16D7A:	mov     rdx, [rbp+name]
16D7E:	mov     rax, [rbp+cmd]
16D82:	lea     rcx, aS_6; './'%s''
16D89:	mov     rsi, rcx; format
16D8C:	mov     rdi, rax; s
16D8F:	mov     eax, 0
16D94:	call    _sprintf
16D99:	mov     rax, [rbp+cmd]
16D9D:	mov     esi, 0; hide
16DA2:	mov     rdi, rax; command
16DA5:	call    start
16DAA:	mov     cs:wait_msg, 1
16DB4:	mov     rax, [rbp+cmd]
16DB8:	mov     rdi, rax; pointer
16DBB:	call    xfree
16DC0:	mov     eax, 0
16DC5:	call    tty_touch
16DCA:	mov     rax, cs:screen
16DD1:	mov     rdi, rax; buf
16DD4:	call    tty_get_screen
16DD9:	mov     rax, [rbp+this]
16DDD:	mov     rdi, rax; this
16DE0:	call    panel_no_optimizations
16DE5:	mov     rax, [rbp+other]
16DE9:	mov     rdi, rax; this
16DEC:	call    panel_no_optimizations
16DF1:	mov     rax, [rbp+name]
16DF5:	mov     rdi, rax; text
16DF8:	call    il_insert_text
16DFD:	mov     rax, [rbp+this]
16E01:	mov     rax, [rax+18h]
16E05:	mov     rdi, rax; string
16E08:	call    tty_update_title
16E0D:	mov     eax, 1
16E12:	jmp     short locret_16E1D
16E14:	nop
16E15:	jmp     short loc_16E18
16E17:	nop
16E18:	mov     eax, 0
16E1D:	leave
16E1E:	retn
16E1F:	endbr64
16E23:	push    rbp
16E24:	mov     rbp, rsp
16E27:	push    rbx
16E28:	sub     rsp, 78h
16E2C:	mov     [rbp+this], rdi
16E30:	mov     [rbp+other], rsi
16E34:	mov     rax, fs:28h
16E3D:	mov     [rbp+var_18], rax
16E41:	xor     eax, eax
16E43:	mov     [rbp+dir], 0
16E4B:	mov     [rbp+input], 0
16E53:	mov     rax, [rbp+this]
16E57:	mov     dword ptr [rax+90h], 1
16E61:	mov     rax, [rbp+this]
16E65:	mov     eax, [rax+70h]
16E68:	test    eax, eax
16E6A:	jnz     loc_17193
16E70:	mov     rax, [rbp+this]
16E74:	mov     rcx, [rax+38h]
16E78:	mov     rax, [rbp+this]
16E7C:	mov     eax, [rax+28h]
16E7F:	movsxd  rdx, eax
16E82:	mov     rax, rdx
16E85:	shl     rax, 2
16E89:	add     rax, rdx
16E8C:	shl     rax, 4
16E90:	add     rax, rcx
16E93:	mov     rax, [rax]
16E96:	mov     [rbp+name], rax
16E9A:	mov     rax, [rbp+this]
16E9E:	mov     eax, [rax+28h]
16EA1:	test    eax, eax
16EA3:	jnz     short loc_16ECF
16EA5:	mov     rax, [rbp+this]
16EA9:	mov     rax, [rax+18h]
16EAD:	movzx   eax, byte ptr [rax]
16EB0:	cmp     al, 2Fh ; '/'
16EB2:	jnz     loc_174CA
16EB8:	mov     rax, [rbp+this]
16EBC:	mov     rax, [rax+18h]
16EC0:	add     rax, 1
16EC4:	movzx   eax, byte ptr [rax]
16EC7:	test    al, al
16EC9:	jnz     loc_174CA
16ECF:	mov     rax, [rbp+name]
16ED3:	mov     rdi, rax; s
16ED6:	call    _strlen
16EDB:	add     rax, 11h
16EDF:	mov     rdi, rax; n
16EE2:	call    xmalloc
16EE7:	mov     [rbp+msg], rax
16EEB:	mov     rax, [rbp+name]
16EEF:	mov     edx, 0; filled
16EF4:	mov     esi, 0; which
16EF9:	mov     rdi, rax; name
16EFC:	mov     eax, 0
16F01:	call    cutname
16F06:	mov     rdx, rax
16F09:	mov     rax, [rbp+msg]
16F0D:	lea     rcx, aCopySTo; 'Copy %s to: '
16F14:	mov     rsi, rcx; format
16F17:	mov     rdi, rax; s
16F1A:	mov     eax, 0
16F1F:	call    _sprintf
16F24:	mov     rax, [rbp+name]
16F28:	mov     rdi, rax; s
16F2B:	call    _strlen
16F30:	add     rax, 2
16F34:	mov     [rbp+len], rax
16F38:	mov     rax, [rbp+other]
16F3C:	mov     rax, [rax+18h]
16F40:	mov     rdi, rax; s
16F43:	call    _strlen
16F48:	mov     rdx, [rbp+len]
16F4C:	add     rax, rdx
16F4F:	mov     rdi, rax; n
16F52:	call    xmalloc
16F57:	mov     [rbp+file], rax
16F5B:	mov     rax, [rbp+other]
16F5F:	mov     rdx, [rax+18h]
16F63:	mov     rcx, [rbp+name]
16F67:	mov     rax, [rbp+file]
16F6B:	lea     rsi, aSS_2; '%s/%s'
16F72:	mov     rdi, rax; s
16F75:	mov     eax, 0
16F7A:	call    _sprintf
16F7F:	mov     rcx, cs:copy_history; history
16F86:	mov     rdx, [rbp+file]; default_string
16F8A:	lea     rsi, [rbp+input]; dest
16F8E:	mov     rax, [rbp+msg]
16F92:	mov     rdi, rax; static_text
16F95:	call    il_read_line
16F9A:	test    rax, rax
16F9D:	jnz     short loc_16FB0
16F9F:	mov     rax, [rbp+msg]
16FA3:	mov     rdi, rax; pointer
16FA6:	call    xfree
16FAB:	jmp     loc_174CE
16FB0:	mov     rax, [rbp+msg]
16FB4:	mov     rdi, rax; pointer
16FB7:	call    xfree
16FBC:	mov     rax, [rbp+this]
16FC0:	mov     rcx, [rax+38h]
16FC4:	mov     rax, [rbp+this]
16FC8:	mov     eax, [rax+28h]
16FCB:	movsxd  rdx, eax
16FCE:	mov     rax, rdx
16FD1:	shl     rax, 2
16FD5:	add     rax, rdx
16FD8:	shl     rax, 4
16FDC:	add     rax, rcx
16FDF:	mov     eax, [rax+10h]
16FE2:	and     eax, 0F000h
16FE7:	cmp     eax, 4000h
16FEC:	jnz     short loc_16FFF
16FEE:	mov     rax, cs:panel_il_message+18h
16FF5:	mov     rdi, rax; message
16FF8:	call    il_message
16FFD:	jmp     short loc_1700E
16FFF:	mov     rax, cs:panel_il_message+8
17006:	mov     rdi, rax; message
17009:	call    il_message
1700E:	mov     eax, 0
17013:	call    tty_update
17018:	mov     rax, [rbp+input]
1701C:	mov     rdi, rax; string
1701F:	mov     eax, 0
17024:	call    tilde_expand
17029:	mov     [rbp+tmp_input], rax
1702D:	mov     rax, [rbp+input]
17031:	mov     rdi, rax; pointer
17034:	call    xfree
17039:	mov     rax, [rbp+tmp_input]
1703D:	mov     [rbp+input], rax
17041:	mov     rdx, [rbp+input]
17045:	mov     rax, [rbp+name]
17049:	mov     rsi, rdx; file2
1704C:	mov     rdi, rax; file1
1704F:	mov     eax, 0
17054:	call    same_file
17059:	mov     [rbp+error], eax
1705C:	mov     rax, [rbp+file]
17060:	mov     rdi, rax; pointer
17063:	call    xfree
17068:	cmp     [rbp+error], 0
1706C:	jz      short loc_170A9
1706E:	mov     rdx, [rbp+input]; string2
17072:	mov     rax, [rbp+name]
17076:	mov     r8d, 1Eh; flags
1707C:	mov     ecx, 0; options
17081:	mov     rsi, rax; string1
17084:	lea     rax, aSAndSPointToTh; '%s and %s point to the same file.'
1708B:	mov     rdi, rax; format
1708E:	mov     eax, 0
17093:	call    panel_3s_message
17098:	mov     rax, [rbp+input]
1709C:	mov     rdi, rax; pointer
1709F:	call    xfree
170A4:	jmp     loc_174CE
170A9:	call    _getgid
170AE:	mov     ebx, eax
170B0:	call    _getuid
170B5:	mov     edi, eax
170B7:	mov     rax, [rbp+this]
170BB:	mov     rcx, [rax+38h]
170BF:	mov     rax, [rbp+this]
170C3:	mov     eax, [rax+28h]
170C6:	movsxd  rdx, eax
170C9:	mov     rax, rdx
170CC:	shl     rax, 2
170D0:	add     rax, rdx
170D3:	shl     rax, 4
170D7:	add     rax, rcx
170DA:	mov     ecx, [rax+10h]; mode
170DD:	mov     rdx, [rbp+input]; dest
170E1:	mov     rsi, [rbp+name]; src
170E5:	mov     rax, [rbp+this]
170E9:	mov     r9d, ebx; gid
170EC:	mov     r8d, edi; uid
170EF:	mov     rdi, rax; this
170F2:	mov     eax, 0
170F7:	call    panel_copy
170FC:	mov     [rbp+error], eax
170FF:	mov     rax, [rbp+input]
17103:	mov     rdi, rax; pointer
17106:	call    xfree
1710B:	cmp     [rbp+error], 1
1710F:	jz      short loc_17158
17111:	cmp     [rbp+error], 2
17115:	jz      short loc_17158
17117:	mov     eax, [rbp+error]
1711A:	sub     eax, 1
1711D:	cdqe
1711F:	lea     rdx, ds:0[rax*8]
17127:	lea     rax, copyerr
1712E:	mov     rdx, [rdx+rax]; string2
17132:	mov     rax, [rbp+name]
17136:	mov     r8d, 1Eh; flags
1713C:	mov     ecx, 0; options
17141:	mov     rsi, rax; string1
17144:	lea     rax, aSCopyFailedS; '%s: Copy failed, %s.'
1714B:	mov     rdi, rax; format
1714E:	mov     eax, 0
17153:	call    panel_3s_message
17158:	mov     eax, 0
1715D:	call    status_default
17162:	mov     rax, [rbp+this]
17166:	mov     rdi, rax; this
17169:	mov     eax, 0
1716E:	call    panel_update_size
17173:	mov     rax, [rbp+other]
17177:	mov     rdi, rax; this
1717A:	mov     eax, 0
1717F:	call    panel_update_size
17184:	mov     eax, 0
17189:	call    tty_update
1718E:	jmp     loc_17444
17193:	mov     rcx, cs:copy_history; history
1719A:	mov     rax, [rbp+other]
1719E:	mov     rdx, [rax+18h]; default_string
171A2:	lea     rax, [rbp+dir]
171A6:	mov     rsi, rax; dest
171A9:	lea     rax, aCopySelectedFi; 'Copy selected file(s) to: '
171B0:	mov     rdi, rax; static_text
171B3:	call    il_read_line
171B8:	test    rax, rax
171BB:	jz      loc_174CD
171C1:	mov     rdx, [rbp+dir]
171C5:	mov     rax, [rbp+this]
171C9:	mov     rax, [rax+18h]
171CD:	mov     rsi, rdx; file2
171D0:	mov     rdi, rax; file1
171D3:	mov     eax, 0
171D8:	call    same_file
171DD:	test    eax, eax
171DF:	jz      short loc_171FF
171E1:	mov     edx, 0Ch; flags
171E6:	mov     esi, 0; options
171EB:	lea     rax, nice_try; 'Nice try, maybe later... :-)'
171F2:	mov     rdi, rax; message
171F5:	call    il_read_char
171FA:	jmp     loc_174CE
171FF:	mov     rax, [rbp+dir]
17203:	mov     rdi, rax; s
17206:	call    _strlen
1720B:	add     rax, 1
1720F:	mov     [rbp+len], rax
17213:	mov     rax, [rbp+len]
17217:	lea     rdx, [rax+1]
1721B:	mov     rax, [rbp+dir]
1721F:	mov     rsi, rdx; n
17222:	mov     rdi, rax; p
17225:	call    xrealloc
1722A:	mov     [rbp+dir], rax
1722E:	mov     rdx, [rbp+dir]
17232:	mov     rax, [rbp+len]
17236:	sub     rax, 1
1723A:	add     rax, rdx
1723D:	mov     byte ptr [rax], 2Fh ; '/'
17240:	mov     rdx, [rbp+dir]
17244:	mov     rax, [rbp+len]
17248:	add     rax, rdx
1724B:	mov     byte ptr [rax], 0
1724E:	mov     rax, [rbp+this]
17252:	mov     rdi, rax; this
17255:	call    panel_init_iterator
1725A:	jmp     loc_173FC
1725F:	mov     rax, [rbp+this]
17263:	mov     rcx, [rax+38h]
17267:	mov     eax, [rbp+entry]
1726A:	movsxd  rdx, eax
1726D:	mov     rax, rdx
17270:	shl     rax, 2
17274:	add     rax, rdx
17277:	shl     rax, 4
1727B:	add     rax, rcx
1727E:	mov     rax, [rax]
17281:	mov     [rbp+name_0], rax
17285:	mov     rax, [rbp+this]
17289:	mov     rcx, [rax+38h]
1728D:	mov     eax, [rbp+entry]
17290:	movsxd  rdx, eax
17293:	mov     rax, rdx
17296:	shl     rax, 2
1729A:	add     rax, rdx
1729D:	shl     rax, 4
172A1:	add     rax, rcx
172A4:	mov     eax, [rax+10h]
172A7:	mov     [rbp+mode], eax
172AA:	call    _getuid
172AF:	mov     [rbp+uid], eax
172B2:	call    _getgid
172B7:	mov     [rbp+gid], eax
172BA:	mov     rax, [rbp+name_0]
172BE:	mov     rdi, rax; s
172C1:	call    _strlen
172C6:	mov     rdx, [rbp+len]
172CA:	add     rax, rdx
172CD:	lea     rdx, [rax+1]
172D1:	mov     rax, [rbp+dir]
172D5:	mov     rsi, rdx; n
172D8:	mov     rdi, rax; p
172DB:	call    xrealloc
172E0:	mov     [rbp+dir], rax
172E4:	mov     rdx, [rbp+dir]
172E8:	mov     rax, [rbp+len]
172EC:	add     rdx, rax
172EF:	mov     rax, [rbp+name_0]
172F3:	mov     rsi, rax; src
172F6:	mov     rdi, rdx; dest
172F9:	call    _strcpy
172FE:	mov     eax, 0
17303:	call    canceled
17308:	test    eax, eax
1730A:	jnz     loc_17417
17310:	mov     rax, cs:panel_il_message+10h
17317:	mov     rdi, rax; message
1731A:	call    il_message
1731F:	mov     eax, 0
17324:	call    tty_update
17329:	mov     rdx, [rbp+dir]; dest
1732D:	mov     r8d, [rbp+gid]
17331:	mov     edi, [rbp+uid]
17334:	mov     ecx, [rbp+mode]; mode
17337:	mov     rsi, [rbp+name_0]; src
1733B:	mov     rax, [rbp+this]
1733F:	mov     r9d, r8d; gid
17342:	mov     r8d, edi; uid
17345:	mov     rdi, rax; this
17348:	mov     eax, 0
1734D:	call    panel_copy
17352:	mov     [rbp+error], eax
17355:	cmp     [rbp+error], 1
17359:	jz      short loc_173B7
1735B:	cmp     [rbp+error], 2
1735F:	jz      loc_1741A
17365:	cmp     [rbp+error], 3
17369:	jnz     short loc_17370
1736B:	jmp     loc_173FC
17370:	mov     eax, [rbp+error]
17373:	sub     eax, 1
17376:	cdqe
17378:	lea     rdx, ds:0[rax*8]
17380:	lea     rax, copyerr
17387:	mov     rdx, [rdx+rax]; string2
1738B:	mov     rax, [rbp+name_0]
1738F:	mov     r8d, 0Eh; flags
17395:	mov     ecx, 0; options
1739A:	mov     rsi, rax; string1
1739D:	lea     rax, aSCopyFailedS; '%s: Copy failed, %s.'
173A4:	mov     rdi, rax; format
173A7:	mov     eax, 0
173AC:	call    panel_3s_message
173B1:	test    al, al
173B3:	jnz     short loc_173DA
173B5:	jmp     short loc_1741B
173B7:	mov     rax, [rbp+this]
173BB:	mov     rcx, [rax+38h]
173BF:	mov     eax, [rbp+entry]
173C2:	movsxd  rdx, eax
173C5:	mov     rax, rdx
173C8:	shl     rax, 2
173CC:	add     rax, rdx
173CF:	shl     rax, 4
173D3:	add     rax, rcx
173D6:	mov     byte ptr [rax+49h], 0
173DA:	mov     rax, [rbp+this]
173DE:	mov     rdi, rax; this
173E1:	mov     eax, 0
173E6:	call    panel_update_size
173EB:	mov     rax, [rbp+other]
173EF:	mov     rdi, rax; this
173F2:	mov     eax, 0
173F7:	call    panel_update_size
173FC:	mov     rax, [rbp+this]
17400:	mov     rdi, rax; this
17403:	call    panel_get_next
17408:	mov     [rbp+entry], eax
1740B:	cmp     [rbp+entry], 0FFFFFFFFh
1740F:	jnz     loc_1725F
17415:	jmp     short loc_1741B
17417:	nop
17418:	jmp     short loc_1741B
1741A:	nop
1741B:	mov     rax, [rbp+dir]
1741F:	test    rax, rax
17422:	jz      short loc_17430
17424:	mov     rax, [rbp+dir]
17428:	mov     rdi, rax; pointer
1742B:	call    xfree
17430:	mov     eax, 0
17435:	call    status_default
1743A:	mov     eax, 0
1743F:	call    tty_update
17444:	mov     rax, [rbp+other]
17448:	mov     rcx, [rax+18h]
1744C:	mov     rax, [rbp+other]
17450:	mov     edx, 1; verify
17455:	mov     rsi, rcx; directory
17458:	mov     rdi, rax; this
1745B:	mov     eax, 0
17460:	call    panel_read_directory
17465:	test    eax, eax
17467:	jnz     short loc_1747A
17469:	mov     rax, [rbp+other]
1746D:	mov     rdi, rax; this
17470:	mov     eax, 0
17475:	call    panel_recover
1747A:	mov     rax, [rbp+other]
1747E:	mov     rdi, rax; this
17481:	call    panel_update
17486:	mov     rax, [rbp+this]
1748A:	mov     rcx, [rax+18h]
1748E:	mov     rax, [rbp+this]
17492:	mov     edx, 1; verify
17497:	mov     rsi, rcx; directory
1749A:	mov     rdi, rax; this
1749D:	mov     eax, 0
174A2:	call    panel_read_directory
174A7:	test    eax, eax
174A9:	jnz     short loc_174BC
174AB:	mov     rax, [rbp+this]
174AF:	mov     rdi, rax; this
174B2:	mov     eax, 0
174B7:	call    panel_recover
174BC:	mov     rax, [rbp+this]
174C0:	mov     rdi, rax; this
174C3:	call    panel_update
174C8:	jmp     short loc_174CE
174CA:	nop
174CB:	jmp     short loc_174CE
174CD:	nop
174CE:	mov     rax, [rbp+var_18]
174D2:	sub     rax, fs:28h
174DB:	jz      short loc_174E2
174DD:	call    ___stack_chk_fail
174E2:	mov     rbx, [rbp+var_8]
174E6:	leave
174E7:	retn
174E8:	endbr64
174EC:	push    rbp
174ED:	mov     rbp, rsp
174F0:	sub     rsp, 40h
174F4:	mov     [rbp+this], rdi
174F8:	mov     [rbp+other], rsi
174FC:	mov     [rbp+keep_asking], 1
17503:	mov     [rbp+answer], 0
1750A:	mov     rax, [rbp+this]
1750E:	mov     eax, [rax+70h]
17511:	test    eax, eax
17513:	jnz     short loc_1754A
17515:	mov     rax, [rbp+this]
17519:	mov     eax, [rax+28h]
1751C:	test    eax, eax
1751E:	jnz     short loc_1754A
17520:	mov     rax, [rbp+this]
17524:	mov     rax, [rax+18h]
17528:	movzx   eax, byte ptr [rax]
1752B:	cmp     al, 2Fh ; '/'
1752D:	jnz     loc_17A0C
17533:	mov     rax, [rbp+this]
17537:	mov     rax, [rax+18h]
1753B:	add     rax, 1
1753F:	movzx   eax, byte ptr [rax]
17542:	test    al, al
17544:	jnz     loc_17A0C
1754A:	mov     edx, 0; flags
1754F:	lea     rax, aYn_0; 'yn'
17556:	mov     rsi, rax; options
17559:	lea     rax, aDeleteSelected; 'Delete selected entries? '
17560:	mov     rdi, rax; message
17563:	call    il_read_char
17568:	cmp     al, 79h ; 'y'
1756A:	jnz     loc_17A0F
17570:	mov     [rbp+first_entry], 0
17577:	jmp     short loc_175A4
17579:	mov     rax, [rbp+this]
1757D:	mov     rcx, [rax+38h]
17581:	mov     eax, [rbp+first_entry]
17584:	movsxd  rdx, eax
17587:	mov     rax, rdx
1758A:	shl     rax, 2
1758E:	add     rax, rdx
17591:	shl     rax, 4
17595:	add     rax, rcx
17598:	movzx   eax, byte ptr [rax+49h]
1759C:	test    al, al
1759E:	jnz     short loc_175B2
175A0:	add     [rbp+first_entry], 1
175A4:	mov     rax, [rbp+this]
175A8:	mov     eax, [rax+68h]
175AB:	cmp     [rbp+first_entry], eax
175AE:	jl      short loc_17579
175B0:	jmp     short loc_175B3
175B2:	nop
175B3:	mov     rax, [rbp+this]
175B7:	mov     rdi, rax; this
175BA:	call    panel_init_iterator
175BF:	jmp     loc_178ED
175C4:	mov     rax, [rbp+this]
175C8:	mov     rcx, [rax+38h]
175CC:	mov     eax, [rbp+entry]
175CF:	movsxd  rdx, eax
175D2:	mov     rax, rdx
175D5:	shl     rax, 2
175D9:	add     rax, rdx
175DC:	shl     rax, 4
175E0:	add     rax, rcx
175E3:	mov     rax, [rax]
175E6:	mov     [rbp+name], rax
175EA:	mov     [rbp+interrupted], 0
175F1:	mov     eax, 0
175F6:	call    service_pending_signals
175FB:	mov     rax, [rbp+name]
175FF:	mov     rdi, rax; s
17602:	call    _strlen
17607:	add     rax, 20h ; ' '
1760B:	mov     rdi, rax; n
1760E:	call    xmalloc
17613:	mov     [rbp+msg], rax
17617:	mov     rdx, [rbp+name]
1761B:	mov     rax, [rbp+msg]
1761F:	lea     rcx, aDeleteS; '(DELETE) %s'
17626:	mov     rsi, rcx; format
17629:	mov     rdi, rax; s
1762C:	mov     eax, 0
17631:	call    _sprintf
17636:	mov     rax, [rbp+msg]
1763A:	mov     edx, 1; alignment
1763F:	mov     esi, 2; type
17644:	mov     rdi, rax; message
17647:	call    status
1764C:	mov     eax, 0
17651:	call    tty_update
17656:	mov     rax, [rbp+msg]
1765A:	mov     rdi, rax; pointer
1765D:	call    xfree
17662:	mov     eax, 0
17667:	call    canceled
1766C:	test    eax, eax
1766E:	jnz     loc_17908
17674:	cmp     [rbp+keep_asking], 0
17678:	jz      short loc_176A7
1767A:	mov     rax, [rbp+name]
1767E:	mov     ecx, 2; flags
17683:	lea     rdx, aYsac; 'ysac'
1768A:	mov     rsi, rax; string
1768D:	lea     rax, aDeleteSYesSkip; 'Delete %s? (Yes/Skip/All/Cancel) '
17694:	mov     rdi, rax; format
17697:	mov     eax, 0
1769C:	call    panel_2s_message
176A1:	movsx   eax, al
176A4:	mov     [rbp+answer], eax
176A7:	mov     rax, cs:panel_il_message+28h
176AE:	mov     rdi, rax; message
176B1:	call    il_message
176B6:	mov     eax, 0
176BB:	call    tty_update
176C0:	cmp     [rbp+answer], 61h ; 'a'
176C4:	jnz     short loc_176CF
176C6:	mov     [rbp+keep_asking], 0
176CD:	jmp     short loc_176EE
176CF:	cmp     [rbp+answer], 73h ; 's'
176D3:	jnz     short loc_176DA
176D5:	jmp     loc_178ED
176DA:	cmp     [rbp+answer], 63h ; 'c'
176DE:	jz      loc_1790B
176E4:	cmp     [rbp+answer], 79h ; 'y'
176E8:	jnz     loc_1790E
176EE:	mov     rax, [rbp+this]
176F2:	mov     rcx, [rax+38h]
176F6:	mov     eax, [rbp+entry]
176F9:	movsxd  rdx, eax
176FC:	mov     rax, rdx
176FF:	shl     rax, 2
17703:	add     rax, rdx
17706:	shl     rax, 4
1770A:	add     rax, rcx
1770D:	movzx   eax, byte ptr [rax+48h]
17711:	test    al, al
17713:	jnz     loc_1784D
17719:	mov     rax, cs:panel_il_message+20h
17720:	mov     rdi, rax; message
17723:	call    il_message
17728:	mov     eax, 0
1772D:	call    tty_update
17732:	mov     rax, [rbp+name]
17736:	mov     rdi, rax; path
17739:	call    _rmdir
1773E:	test    eax, eax
17740:	setz    al
17743:	movzx   eax, al
17746:	mov     [rbp+result], eax
17749:	cmp     [rbp+result], 0
1774D:	jnz     loc_17864
17753:	mov     rax, [rbp+name]
17757:	mov     ecx, 12h; flags
1775C:	lea     rdx, aYn_0; 'yn'
17763:	mov     rsi, rax; string
17766:	lea     rax, aSDirectoryMigh; '%s/: directory might contain files.  De'...
1776D:	mov     rdi, rax; format
17770:	mov     eax, 0
17775:	call    panel_2s_message
1777A:	cmp     al, 79h ; 'y'
1777C:	jnz     loc_17864
17782:	mov     rax, [rbp+name]
17786:	mov     rdi, rax; s
17789:	call    _strlen
1778E:	add     rax, 21h ; '!'
17792:	mov     rdi, rax; n
17795:	call    xmalloc
1779A:	mov     [rbp+command], rax
1779E:	mov     rdx, [rbp+name]
177A2:	mov     rax, [rbp+command]
177A6:	lea     rcx, aRmRFS; 'rm -r -f '%s''
177AD:	mov     rsi, rcx; format
177B0:	mov     rdi, rax; s
177B3:	mov     eax, 0
177B8:	call    _sprintf
177BD:	mov     rax, [rbp+command]
177C1:	mov     esi, 1; hide
177C6:	mov     rdi, rax; command
177C9:	call    start
177CE:	mov     [rbp+result], eax
177D1:	mov     rax, [rbp+command]
177D5:	mov     rdi, rax; pointer
177D8:	call    xfree
177DD:	mov     rax, [rbp+this]
177E1:	mov     rax, [rax+18h]
177E5:	mov     rdi, rax; string
177E8:	call    tty_update_title
177ED:	mov     eax, [rbp+result]
177F0:	and     eax, 7Fh
177F3:	add     eax, 1
177F6:	sar     al, 1
177F8:	test    al, al
177FA:	jle     short loc_1780C
177FC:	mov     [rbp+result], 0
17803:	mov     [rbp+interrupted], 1
1780A:	jmp     short loc_17864
1780C:	mov     eax, [rbp+result]
1780F:	and     eax, 7Fh
17812:	test    eax, eax
17814:	jnz     short loc_17844
17816:	mov     eax, [rbp+result]
17819:	sar     eax, 8
1781C:	movzx   eax, al
1781F:	test    eax, eax
17821:	jz      short loc_1783B
17823:	lea     rax, aRm; 'rm'
1782A:	mov     rdi, rax; command
1782D:	call    display_errors
17832:	mov     [rbp+result], 0
17839:	jmp     short loc_17864
1783B:	mov     [rbp+result], 1
17842:	jmp     short loc_17864
17844:	mov     [rbp+result], 0
1784B:	jmp     short loc_17864
1784D:	mov     rax, [rbp+name]
17851:	mov     rdi, rax; name
17854:	call    _unlink
17859:	test    eax, eax
1785B:	setz    al
1785E:	movzx   eax, al
17861:	mov     [rbp+result], eax
17864:	cmp     [rbp+interrupted], 0
17868:	jz      short loc_17897
1786A:	mov     rax, [rbp+name]
1786E:	mov     ecx, 0Eh; flags
17873:	lea     rdx, aYn_0; 'yn'
1787A:	mov     rsi, rax; string
1787D:	lea     rax, aSDeletionInter; '%s: Deletion interrupted.  Continue? '
17884:	mov     rdi, rax; format
17887:	mov     eax, 0
1788C:	call    panel_2s_message
17891:	cmp     al, 79h ; 'y'
17893:	jz      short loc_178ED
17895:	jmp     short loc_1790F
17897:	cmp     [rbp+result], 0
1789B:	jnz     short loc_178CA
1789D:	mov     rax, [rbp+name]
178A1:	mov     ecx, 0Eh; flags
178A6:	lea     rdx, aYn_0; 'yn'
178AD:	mov     rsi, rax; string
178B0:	lea     rax, aSDeletionFaile; '%s: Deletion failed.  Continue? '
178B7:	mov     rdi, rax; format
178BA:	mov     eax, 0
178BF:	call    panel_2s_message
178C4:	cmp     al, 79h ; 'y'
178C6:	jz      short loc_178ED
178C8:	jmp     short loc_1790F
178CA:	mov     rax, [rbp+this]
178CE:	mov     rcx, [rax+38h]
178D2:	mov     eax, [rbp+entry]
178D5:	movsxd  rdx, eax
178D8:	mov     rax, rdx
178DB:	shl     rax, 2
178DF:	add     rax, rdx
178E2:	shl     rax, 4
178E6:	add     rax, rcx
178E9:	mov     byte ptr [rax+49h], 0
178ED:	mov     rax, [rbp+this]
178F1:	mov     rdi, rax; this
178F4:	call    panel_get_next
178F9:	mov     [rbp+entry], eax
178FC:	cmp     [rbp+entry], 0FFFFFFFFh
17900:	jnz     loc_175C4
17906:	jmp     short loc_1790F
17908:	nop
17909:	jmp     short loc_1790F
1790B:	nop
1790C:	jmp     short loc_1790F
1790E:	nop
1790F:	mov     rax, [rbp+this]
17913:	mov     eax, [rax+68h]
17916:	cmp     [rbp+first_entry], eax
17919:	jz      short loc_17931
1791B:	mov     edx, [rbp+first_entry]
1791E:	mov     rax, [rbp+this]
17922:	mov     esi, edx; entry
17924:	mov     rdi, rax; this
17927:	mov     eax, 0
1792C:	call    panel_set_current_entry
17931:	mov     rax, [rbp+this]
17935:	mov     rdi, rax; this
17938:	mov     eax, 0
1793D:	call    panel_update_size
17942:	mov     rax, [rbp+other]
17946:	mov     rdi, rax; this
17949:	mov     eax, 0
1794E:	call    panel_update_size
17953:	mov     eax, 0
17958:	call    status_default
1795D:	mov     eax, 0
17962:	call    tty_update
17967:	mov     rax, [rbp+this]
1796B:	mov     rcx, [rax+18h]
1796F:	mov     rax, [rbp+this]
17973:	mov     edx, 1; verify
17978:	mov     rsi, rcx; directory
1797B:	mov     rdi, rax; this
1797E:	mov     eax, 0
17983:	call    panel_read_directory
17988:	test    eax, eax
1798A:	jnz     short loc_1799D
1798C:	mov     rax, [rbp+this]
17990:	mov     rdi, rax; this
17993:	mov     eax, 0
17998:	call    panel_recover
1799D:	mov     rax, [rbp+this]
179A1:	mov     rdi, rax; this
179A4:	call    panel_update
179A9:	mov     rax, [rbp+other]
179AD:	mov     rdx, [rax+18h]
179B1:	mov     rax, [rbp+this]
179B5:	mov     rax, [rax+18h]
179B9:	mov     rsi, rdx; s2
179BC:	mov     rdi, rax; s1
179BF:	call    _strcmp
179C4:	test    eax, eax
179C6:	jnz     short locret_17A10
179C8:	mov     rax, [rbp+other]
179CC:	mov     rcx, [rax+18h]
179D0:	mov     rax, [rbp+other]
179D4:	mov     edx, 1; verify
179D9:	mov     rsi, rcx; directory
179DC:	mov     rdi, rax; this
179DF:	mov     eax, 0
179E4:	call    panel_read_directory
179E9:	test    eax, eax
179EB:	jnz     short loc_179FE
179ED:	mov     rax, [rbp+other]
179F1:	mov     rdi, rax; this
179F4:	mov     eax, 0
179F9:	call    panel_recover
179FE:	mov     rax, [rbp+other]
17A02:	mov     rdi, rax; this
17A05:	call    panel_update
17A0A:	jmp     short locret_17A10
17A0C:	nop
17A0D:	jmp     short locret_17A10
17A0F:	nop
17A10:	leave
17A11:	retn
17A12:	endbr64
17A16:	push    rbp
17A17:	mov     rbp, rsp
17A1A:	sub     rsp, 0B0h
17A21:	mov     [rbp+path], rdi
17A28:	mov     rax, fs:28h
17A31:	mov     [rbp+var_8], rax
17A35:	xor     eax, eax
17A37:	lea     rdx, [rbp+s]
17A3E:	mov     rax, [rbp+path]
17A45:	mov     rsi, rdx; buf
17A48:	mov     rdi, rax; file
17A4B:	call    _stat
17A50:	test    eax, eax
17A52:	jns     short loc_17A5B
17A54:	mov     eax, 0
17A59:	jmp     short loc_17A71
17A5B:	mov     eax, [rbp+s.st_mode]
17A61:	and     eax, 0F000h
17A66:	cmp     eax, 4000h
17A6B:	setz    al
17A6E:	movzx   eax, al
17A71:	mov     rdx, [rbp+var_8]
17A75:	sub     rdx, fs:28h
17A7E:	jz      short locret_17A85
17A80:	call    ___stack_chk_fail
17A85:	leave
17A86:	retn
17A87:	endbr64
17A8B:	push    rbp
17A8C:	mov     rbp, rsp
17A8F:	sub     rsp, 20h
17A93:	mov     [rbp+path], rdi
17A97:	mov     [rbp+mode], esi
17A9A:	mov     rax, [rbp+path]
17A9E:	mov     rdi, rax; string
17AA1:	call    xstrdup
17AA6:	mov     [rbp+copy], rax
17AAA:	mov     rax, [rbp+copy]
17AAE:	mov     [rbp+z], rax
17AB2:	jmp     short loc_17B19
17AB4:	mov     rax, [rbp+z]
17AB8:	movzx   eax, byte ptr [rax]
17ABB:	cmp     al, 2Fh ; '/'
17ABD:	jnz     short loc_17B14
17ABF:	mov     rax, [rbp+z]
17AC3:	cmp     rax, [rbp+copy]
17AC7:	jz      short loc_17B14
17AC9:	mov     rax, [rbp+z]
17ACD:	mov     byte ptr [rax], 0
17AD0:	mov     rax, [rbp+copy]
17AD4:	mov     rdi, rax; path
17AD7:	mov     eax, 0
17ADC:	call    panel_isdir
17AE1:	test    eax, eax
17AE3:	jnz     short loc_17B0D
17AE5:	mov     edx, [rbp+mode]
17AE8:	mov     rax, [rbp+copy]
17AEC:	mov     esi, edx; mode
17AEE:	mov     rdi, rax; path
17AF1:	call    _mkdir
17AF6:	test    eax, eax
17AF8:	jz      short loc_17B0D
17AFA:	mov     rax, [rbp+copy]
17AFE:	mov     rdi, rax; pointer
17B01:	call    xfree
17B06:	mov     eax, 0FFFFFFFFh
17B0B:	jmp     short locret_17B35
17B0D:	mov     rax, [rbp+z]
17B11:	mov     byte ptr [rax], 2Fh ; '/'
17B14:	add     [rbp+z], 1
17B19:	mov     rax, [rbp+z]
17B1D:	movzx   eax, byte ptr [rax]
17B20:	test    al, al
17B22:	jnz     short loc_17AB4
17B24:	mov     rax, [rbp+copy]
17B28:	mov     rdi, rax; pointer
17B2B:	call    xfree
17B30:	mov     eax, 0
17B35:	leave
17B36:	retn
17B37:	endbr64
17B3B:	push    rbp
17B3C:	mov     rbp, rsp
17B3F:	sub     rsp, 40h
17B43:	mov     [rbp+this], rdi
17B47:	mov     [rbp+other], rsi
17B4B:	mov     rax, fs:28h
17B54:	mov     [rbp+var_8], rax
17B58:	xor     eax, eax
17B5A:	mov     [rbp+input], 0
17B62:	mov     rdx, cs:mkdir_history
17B69:	lea     rax, [rbp+input]
17B6D:	mov     rcx, rdx; history
17B70:	mov     edx, 0; default_string
17B75:	mov     rsi, rax; dest
17B78:	lea     rax, aNewDirectoryNa; 'New directory name: '
17B7F:	mov     rdi, rax; static_text
17B82:	call    il_read_line
17B87:	test    rax, rax
17B8A:	jz      loc_17E24
17B90:	mov     rax, [rbp+input]
17B94:	movzx   eax, byte ptr [rax]
17B97:	test    al, al
17B99:	jnz     short loc_17BAC
17B9B:	mov     rax, [rbp+input]
17B9F:	mov     rdi, rax; pointer
17BA2:	call    xfree
17BA7:	jmp     loc_17E25
17BAC:	mov     rax, [rbp+input]
17BB0:	mov     rdi, rax; string
17BB3:	mov     eax, 0
17BB8:	call    tilde_expand
17BBD:	mov     [rbp+tmp_input], rax
17BC1:	mov     rax, [rbp+input]
17BC5:	mov     rdi, rax; pointer
17BC8:	call    xfree
17BCD:	mov     rax, [rbp+tmp_input]
17BD1:	mov     [rbp+input], rax
17BD5:	mov     rax, [rbp+input]
17BD9:	mov     rdi, rax; s
17BDC:	call    _strlen
17BE1:	mov     [rbp+len], rax
17BE5:	mov     rax, [rbp+len]
17BE9:	lea     rdx, [rax+2]
17BED:	mov     rax, [rbp+input]
17BF1:	mov     rsi, rdx; size
17BF4:	mov     rdi, rax; ptr
17BF7:	call    _realloc
17BFC:	mov     [rbp+input], rax
17C00:	mov     rdx, [rbp+input]
17C04:	mov     rax, [rbp+len]
17C08:	add     rax, rdx
17C0B:	mov     byte ptr [rax], 2Fh ; '/'
17C0E:	mov     rdx, [rbp+input]
17C12:	mov     rax, [rbp+len]
17C16:	add     rax, 1
17C1A:	add     rax, rdx
17C1D:	mov     byte ptr [rax], 0
17C20:	mov     rax, [rbp+input]
17C24:	mov     esi, 41FFh; mode
17C29:	mov     rdi, rax; path
17C2C:	mov     eax, 0
17C31:	call    panel_mkdirs
17C36:	cmp     eax, 0FFFFFFFFh
17C39:	jnz     short loc_17C71
17C3B:	mov     rax, [rbp+input]
17C3F:	mov     ecx, 1Ch; flags
17C44:	mov     edx, 0; options
17C49:	mov     rsi, rax; string
17C4C:	lea     rax, aSPermissionDen; '%s: Permission denied.'
17C53:	mov     rdi, rax; format
17C56:	mov     eax, 0
17C5B:	call    panel_2s_message
17C60:	mov     rax, [rbp+input]
17C64:	mov     rdi, rax; pointer
17C67:	call    xfree
17C6C:	jmp     loc_17E25
17C71:	mov     rax, [rbp+this]
17C75:	mov     rcx, [rax+18h]
17C79:	mov     rax, [rbp+this]
17C7D:	mov     edx, 1; verify
17C82:	mov     rsi, rcx; directory
17C85:	mov     rdi, rax; this
17C88:	mov     eax, 0
17C8D:	call    panel_read_directory
17C92:	test    eax, eax
17C94:	jnz     short loc_17CA9
17C96:	mov     rax, [rbp+this]
17C9A:	mov     rdi, rax; this
17C9D:	mov     eax, 0
17CA2:	call    panel_recover
17CA7:	jmp     short loc_17D13
17CA9:	mov     rdx, [rbp+input]
17CAD:	mov     rax, [rbp+this]
17CB1:	mov     rsi, rdx; str
17CB4:	mov     rdi, rax; this
17CB7:	mov     eax, 0
17CBC:	call    panel_find_index
17CC1:	mov     rdx, [rbp+this]
17CC5:	mov     [rdx+28h], eax
17CC8:	mov     rax, [rbp+this]
17CCC:	mov     rdi, rax; this
17CCF:	mov     eax, 0
17CD4:	call    panel_get_centered_fos
17CD9:	mov     rdx, [rbp+this]
17CDD:	mov     [rdx+2Ch], eax
17CE0:	mov     rax, [rbp+this]
17CE4:	mov     rdi, rax; this
17CE7:	mov     eax, 0
17CEC:	call    panel_update_entries
17CF1:	mov     rax, [rbp+this]
17CF5:	mov     rdi, rax; this
17CF8:	mov     eax, 0
17CFD:	call    panel_update_info
17D02:	mov     rax, [rbp+this]
17D06:	mov     rdi, rax; this
17D09:	mov     eax, 0
17D0E:	call    panel_update_size
17D13:	mov     rax, [rbp+other]
17D17:	mov     rdx, [rax+18h]
17D1B:	mov     rax, [rbp+this]
17D1F:	mov     rax, [rax+18h]
17D23:	mov     rsi, rdx; s2
17D26:	mov     rdi, rax; s1
17D29:	call    _strcmp
17D2E:	test    eax, eax
17D30:	jnz     loc_17E05
17D36:	mov     rax, [rbp+other]
17D3A:	mov     rcx, [rax+38h]
17D3E:	mov     rax, [rbp+other]
17D42:	mov     eax, [rax+28h]
17D45:	movsxd  rdx, eax
17D48:	mov     rax, rdx
17D4B:	shl     rax, 2
17D4F:	add     rax, rdx
17D52:	shl     rax, 4
17D56:	add     rax, rcx
17D59:	mov     rax, [rax]
17D5C:	mov     rdi, rax; string
17D5F:	call    xstrdup
17D64:	mov     [rbp+old_entry], rax
17D68:	mov     rax, [rbp+other]
17D6C:	mov     rcx, [rax+18h]
17D70:	mov     rax, [rbp+other]
17D74:	mov     edx, 1; verify
17D79:	mov     rsi, rcx; directory
17D7C:	mov     rdi, rax; this
17D7F:	mov     eax, 0
17D84:	call    panel_read_directory
17D89:	test    eax, eax
17D8B:	jnz     short loc_17DA0
17D8D:	mov     rax, [rbp+other]
17D91:	mov     rdi, rax; this
17D94:	mov     eax, 0
17D99:	call    panel_recover
17D9E:	jmp     short loc_17DF9
17DA0:	mov     rdx, [rbp+old_entry]
17DA4:	mov     rax, [rbp+other]
17DA8:	mov     rsi, rdx; str
17DAB:	mov     rdi, rax; this
17DAE:	mov     eax, 0
17DB3:	call    panel_find_index
17DB8:	mov     rdx, [rbp+other]
17DBC:	mov     [rdx+28h], eax
17DBF:	mov     rax, [rbp+other]
17DC3:	mov     rdi, rax; this
17DC6:	mov     eax, 0
17DCB:	call    panel_get_centered_fos
17DD0:	mov     rdx, [rbp+other]
17DD4:	mov     [rdx+2Ch], eax
17DD7:	mov     rax, [rbp+other]
17DDB:	mov     rdi, rax; this
17DDE:	mov     eax, 0
17DE3:	call    panel_update_entries
17DE8:	mov     rax, [rbp+other]
17DEC:	mov     rdi, rax; this
17DEF:	mov     eax, 0
17DF4:	call    panel_update_info
17DF9:	mov     rax, [rbp+old_entry]
17DFD:	mov     rdi, rax; pointer
17E00:	call    xfree
17E05:	mov     rax, [rbp+other]
17E09:	mov     rdi, rax; this
17E0C:	mov     eax, 0
17E11:	call    panel_update_size
17E16:	mov     rax, [rbp+input]
17E1A:	mov     rdi, rax; pointer
17E1D:	call    xfree
17E22:	jmp     short loc_17E25
17E24:	nop
17E25:	mov     rax, [rbp+var_8]
17E29:	sub     rax, fs:28h
17E32:	jz      short locret_17E39
17E34:	call    ___stack_chk_fail
17E39:	leave
17E3A:	retn
17E3B:	endbr64
17E3F:	push    rbp
17E40:	mov     rbp, rsp
17E43:	sub     rsp, 70h
17E47:	mov     [rbp+this], rdi
17E4B:	mov     [rbp+other], rsi
17E4F:	mov     rax, fs:28h
17E58:	mov     [rbp+var_8], rax
17E5C:	xor     eax, eax
17E5E:	mov     [rbp+dir], 0
17E66:	mov     [rbp+input], 0
17E6E:	mov     rax, [rbp+this]
17E72:	mov     dword ptr [rax+90h], 1
17E7C:	mov     rax, [rbp+this]
17E80:	mov     eax, [rax+70h]
17E83:	test    eax, eax
17E85:	jnz     loc_181BF
17E8B:	mov     rax, [rbp+this]
17E8F:	mov     rcx, [rax+38h]
17E93:	mov     rax, [rbp+this]
17E97:	mov     eax, [rax+28h]
17E9A:	movsxd  rdx, eax
17E9D:	mov     rax, rdx
17EA0:	shl     rax, 2
17EA4:	add     rax, rdx
17EA7:	shl     rax, 4
17EAB:	add     rax, rcx
17EAE:	mov     rax, [rax]
17EB1:	mov     [rbp+name], rax
17EB5:	mov     rax, [rbp+this]
17EB9:	mov     eax, [rax+28h]
17EBC:	test    eax, eax
17EBE:	jnz     short loc_17EEA
17EC0:	mov     rax, [rbp+this]
17EC4:	mov     rax, [rax+18h]
17EC8:	movzx   eax, byte ptr [rax]
17ECB:	cmp     al, 2Fh ; '/'
17ECD:	jnz     loc_1851D
17ED3:	mov     rax, [rbp+this]
17ED7:	mov     rax, [rax+18h]
17EDB:	add     rax, 1
17EDF:	movzx   eax, byte ptr [rax]
17EE2:	test    al, al
17EE4:	jnz     loc_1851D
17EEA:	mov     rax, [rbp+name]
17EEE:	mov     rdi, rax; s
17EF1:	call    _strlen
17EF6:	add     rax, 11h
17EFA:	mov     rdi, rax; n
17EFD:	call    xmalloc
17F02:	mov     [rbp+msg], rax
17F06:	mov     rax, [rbp+name]
17F0A:	mov     edx, 0; filled
17F0F:	mov     esi, 0; which
17F14:	mov     rdi, rax; name
17F17:	mov     eax, 0
17F1C:	call    cutname
17F21:	mov     rdx, rax
17F24:	mov     rax, [rbp+msg]
17F28:	lea     rcx, aMoveSTo; 'Move %s to: '
17F2F:	mov     rsi, rcx; format
17F32:	mov     rdi, rax; s
17F35:	mov     eax, 0
17F3A:	call    _sprintf
17F3F:	mov     rax, [rbp+name]
17F43:	mov     rdi, rax; s
17F46:	call    _strlen
17F4B:	add     rax, 2
17F4F:	mov     [rbp+len], rax
17F53:	mov     rax, [rbp+other]
17F57:	mov     rax, [rax+18h]
17F5B:	mov     rdi, rax; s
17F5E:	call    _strlen
17F63:	mov     rdx, [rbp+len]
17F67:	add     rax, rdx
17F6A:	mov     rdi, rax; n
17F6D:	call    xmalloc
17F72:	mov     [rbp+file], rax
17F76:	mov     rax, [rbp+other]
17F7A:	mov     rdx, [rax+18h]
17F7E:	mov     rcx, [rbp+name]
17F82:	mov     rax, [rbp+file]
17F86:	lea     rsi, aSS_2; '%s/%s'
17F8D:	mov     rdi, rax; s
17F90:	mov     eax, 0
17F95:	call    _sprintf
17F9A:	mov     rcx, cs:move_history; history
17FA1:	mov     rdx, [rbp+file]; default_string
17FA5:	lea     rsi, [rbp+input]; dest
17FA9:	mov     rax, [rbp+msg]
17FAD:	mov     rdi, rax; static_text
17FB0:	call    il_read_line
17FB5:	test    rax, rax
17FB8:	jnz     short loc_17FCB
17FBA:	mov     rax, [rbp+msg]
17FBE:	mov     rdi, rax; pointer
17FC1:	call    xfree
17FC6:	jmp     loc_18521
17FCB:	mov     rax, [rbp+msg]
17FCF:	mov     rdi, rax; pointer
17FD2:	call    xfree
17FD7:	mov     rax, [rbp+this]
17FDB:	mov     rcx, [rax+38h]
17FDF:	mov     rax, [rbp+this]
17FE3:	mov     eax, [rax+28h]
17FE6:	movsxd  rdx, eax
17FE9:	mov     rax, rdx
17FEC:	shl     rax, 2
17FF0:	add     rax, rdx
17FF3:	shl     rax, 4
17FF7:	add     rax, rcx
17FFA:	mov     eax, [rax+10h]
17FFD:	and     eax, 0F000h
18002:	cmp     eax, 4000h
18007:	jnz     short loc_1801A
18009:	mov     rax, cs:panel_il_message+40h
18010:	mov     rdi, rax; message
18013:	call    il_message
18018:	jmp     short loc_18029
1801A:	mov     rax, cs:panel_il_message+30h
18021:	mov     rdi, rax; message
18024:	call    il_message
18029:	mov     eax, 0
1802E:	call    tty_update
18033:	mov     rax, [rbp+input]
18037:	mov     rdi, rax; string
1803A:	mov     eax, 0
1803F:	call    tilde_expand
18044:	mov     [rbp+tmp_input], rax
18048:	mov     rax, [rbp+input]
1804C:	mov     rdi, rax; pointer
1804F:	call    xfree
18054:	mov     rax, [rbp+tmp_input]
18058:	mov     [rbp+input], rax
1805C:	mov     rdx, [rbp+input]
18060:	mov     rax, [rbp+name]
18064:	mov     rsi, rdx; file2
18067:	mov     rdi, rax; file1
1806A:	mov     eax, 0
1806F:	call    same_file
18074:	mov     [rbp+error], eax
18077:	mov     rax, [rbp+file]
1807B:	mov     rdi, rax; pointer
1807E:	call    xfree
18083:	cmp     [rbp+error], 0
18087:	jz      short loc_180C4
18089:	mov     rdx, [rbp+input]; string2
1808D:	mov     rax, [rbp+name]
18091:	mov     r8d, 1Eh; flags
18097:	mov     ecx, 0; options
1809C:	mov     rsi, rax; string1
1809F:	lea     rax, aSAndSPointToTh; '%s and %s point to the same file.'
180A6:	mov     rdi, rax; format
180A9:	mov     eax, 0
180AE:	call    panel_3s_message
180B3:	mov     rax, [rbp+input]
180B7:	mov     rdi, rax; pointer
180BA:	call    xfree
180BF:	jmp     loc_18521
180C4:	mov     rax, [rbp+this]
180C8:	mov     rcx, [rax+38h]
180CC:	mov     rax, [rbp+this]
180D0:	mov     eax, [rax+28h]
180D3:	movsxd  rdx, eax
180D6:	mov     rax, rdx
180D9:	shl     rax, 2
180DD:	add     rax, rdx
180E0:	shl     rax, 4
180E4:	add     rax, rcx
180E7:	mov     ecx, [rax+10h]; mode
180EA:	mov     rdx, [rbp+input]; to
180EE:	mov     rsi, [rbp+name]; from
180F2:	mov     rax, [rbp+this]
180F6:	mov     rdi, rax; this
180F9:	mov     eax, 0
180FE:	call    panel_move
18103:	mov     [rbp+error], eax
18106:	cmp     [rbp+error], 1
1810A:	jz      short loc_18178
1810C:	cmp     [rbp+error], 2
18110:	jnz     short loc_18137
18112:	mov     rax, [rbp+input]
18116:	mov     rdi, rax; pointer
18119:	call    xfree
1811E:	mov     eax, 0
18123:	call    status_default
18128:	mov     eax, 0
1812D:	call    tty_update
18132:	jmp     loc_18521
18137:	mov     eax, [rbp+error]
1813A:	sub     eax, 1
1813D:	cdqe
1813F:	lea     rdx, ds:0[rax*8]
18147:	lea     rax, moveerr
1814E:	mov     rdx, [rdx+rax]; string2
18152:	mov     rax, [rbp+name]
18156:	mov     r8d, 0Eh; flags
1815C:	mov     ecx, 0; options
18161:	mov     rsi, rax; string1
18164:	lea     rax, aSMoveFailedS; '%s: Move failed, %s.'
1816B:	mov     rdi, rax; format
1816E:	mov     eax, 0
18173:	call    panel_3s_message
18178:	mov     rax, [rbp+input]
1817C:	mov     rdi, rax; pointer
1817F:	call    xfree
18184:	mov     eax, 0
18189:	call    status_default
1818E:	mov     rax, [rbp+this]
18192:	mov     rdi, rax; this
18195:	mov     eax, 0
1819A:	call    panel_update_size
1819F:	mov     rax, [rbp+other]
181A3:	mov     rdi, rax; this
181A6:	mov     eax, 0
181AB:	call    panel_update_size
181B0:	mov     eax, 0
181B5:	call    tty_update
181BA:	jmp     loc_18497
181BF:	mov     rcx, cs:move_history; history
181C6:	mov     rax, [rbp+other]
181CA:	mov     rdx, [rax+18h]; default_string
181CE:	lea     rax, [rbp+dir]
181D2:	mov     rsi, rax; dest
181D5:	lea     rax, aMoveSelectedFi; 'Move selected file(s) to: '
181DC:	mov     rdi, rax; static_text
181DF:	call    il_read_line
181E4:	test    rax, rax
181E7:	jz      loc_18520
181ED:	mov     rdx, [rbp+dir]
181F1:	mov     rax, [rbp+this]
181F5:	mov     rax, [rax+18h]
181F9:	mov     rsi, rdx; file2
181FC:	mov     rdi, rax; file1
181FF:	mov     eax, 0
18204:	call    same_file
18209:	test    eax, eax
1820B:	jz      short loc_1822B
1820D:	mov     edx, 0Ch; flags
18212:	mov     esi, 0; options
18217:	lea     rax, nice_try; 'Nice try, maybe later... :-)'
1821E:	mov     rdi, rax; message
18221:	call    il_read_char
18226:	jmp     loc_18521
1822B:	mov     rax, [rbp+dir]
1822F:	mov     rdi, rax; s
18232:	call    _strlen
18237:	add     rax, 1
1823B:	mov     [rbp+len], rax
1823F:	mov     rax, [rbp+len]
18243:	lea     rdx, [rax+1]
18247:	mov     rax, [rbp+dir]
1824B:	mov     rsi, rdx; n
1824E:	mov     rdi, rax; p
18251:	call    xrealloc
18256:	mov     [rbp+dir], rax
1825A:	mov     rdx, [rbp+dir]
1825E:	mov     rax, [rbp+len]
18262:	sub     rax, 1
18266:	add     rax, rdx
18269:	mov     byte ptr [rax], 2Fh ; '/'
1826C:	mov     rdx, [rbp+dir]
18270:	mov     rax, [rbp+len]
18274:	add     rax, rdx
18277:	mov     byte ptr [rax], 0
1827A:	mov     [rbp+first_entry], 0
18281:	jmp     short loc_182AE
18283:	mov     rax, [rbp+this]
18287:	mov     rcx, [rax+38h]
1828B:	mov     eax, [rbp+first_entry]
1828E:	movsxd  rdx, eax
18291:	mov     rax, rdx
18294:	shl     rax, 2
18298:	add     rax, rdx
1829B:	shl     rax, 4
1829F:	add     rax, rcx
182A2:	movzx   eax, byte ptr [rax+49h]
182A6:	test    al, al
182A8:	jnz     short loc_182BC
182AA:	add     [rbp+first_entry], 1
182AE:	mov     rax, [rbp+this]
182B2:	mov     eax, [rax+68h]
182B5:	cmp     [rbp+first_entry], eax
182B8:	jl      short loc_18283
182BA:	jmp     short loc_182BD
182BC:	nop
182BD:	mov     rax, [rbp+this]
182C1:	mov     rdi, rax; this
182C4:	call    panel_init_iterator
182C9:	jmp     loc_1842D
182CE:	mov     rax, [rbp+this]
182D2:	mov     rcx, [rax+38h]
182D6:	mov     eax, [rbp+entry]
182D9:	movsxd  rdx, eax
182DC:	mov     rax, rdx
182DF:	shl     rax, 2
182E3:	add     rax, rdx
182E6:	shl     rax, 4
182EA:	add     rax, rcx
182ED:	mov     rax, [rax]
182F0:	mov     [rbp+name_0], rax
182F4:	mov     eax, 0
182F9:	call    service_pending_signals
182FE:	mov     rax, [rbp+name_0]
18302:	mov     rdi, rax; s
18305:	call    _strlen
1830A:	mov     rdx, [rbp+len]
1830E:	add     rax, rdx
18311:	lea     rdx, [rax+1]
18315:	mov     rax, [rbp+dir]
18319:	mov     rsi, rdx; n
1831C:	mov     rdi, rax; p
1831F:	call    xrealloc
18324:	mov     [rbp+dir], rax
18328:	mov     rdx, [rbp+dir]
1832C:	mov     rax, [rbp+len]
18330:	add     rdx, rax
18333:	mov     rax, [rbp+name_0]
18337:	mov     rsi, rax; src
1833A:	mov     rdi, rdx; dest
1833D:	call    _strcpy
18342:	mov     eax, 0
18347:	call    canceled
1834C:	test    eax, eax
1834E:	jnz     loc_18448
18354:	mov     rax, cs:panel_il_message+38h
1835B:	mov     rdi, rax; message
1835E:	call    il_message
18363:	mov     eax, 0
18368:	call    tty_update
1836D:	mov     rax, [rbp+this]
18371:	mov     rcx, [rax+38h]
18375:	mov     eax, [rbp+entry]
18378:	movsxd  rdx, eax
1837B:	mov     rax, rdx
1837E:	shl     rax, 2
18382:	add     rax, rdx
18385:	shl     rax, 4
18389:	add     rax, rcx
1838C:	mov     ecx, [rax+10h]; mode
1838F:	mov     rdx, [rbp+dir]; to
18393:	mov     rsi, [rbp+name_0]; from
18397:	mov     rax, [rbp+this]
1839B:	mov     rdi, rax; this
1839E:	mov     eax, 0
183A3:	call    panel_move
183A8:	mov     [rbp+error], eax
183AB:	cmp     [rbp+error], 1
183AF:	jz      short loc_1840A
183B1:	cmp     [rbp+error], 2
183B5:	jz      loc_1844B
183BB:	cmp     [rbp+error], 3
183BF:	jnz     short loc_183C3
183C1:	jmp     short loc_1842D
183C3:	mov     eax, [rbp+error]
183C6:	sub     eax, 1
183C9:	cdqe
183CB:	lea     rdx, ds:0[rax*8]
183D3:	lea     rax, moveerr
183DA:	mov     rdx, [rdx+rax]; string2
183DE:	mov     rax, [rbp+name_0]
183E2:	mov     r8d, 0Eh; flags
183E8:	mov     ecx, 0; options
183ED:	mov     rsi, rax; string1
183F0:	lea     rax, aSMoveFailedS; '%s: Move failed, %s.'
183F7:	mov     rdi, rax; format
183FA:	mov     eax, 0
183FF:	call    panel_3s_message
18404:	test    al, al
18406:	jnz     short loc_1842D
18408:	jmp     short loc_1844C
1840A:	mov     rax, [rbp+this]
1840E:	mov     rcx, [rax+38h]
18412:	mov     eax, [rbp+entry]
18415:	movsxd  rdx, eax
18418:	mov     rax, rdx
1841B:	shl     rax, 2
1841F:	add     rax, rdx
18422:	shl     rax, 4
18426:	add     rax, rcx
18429:	mov     byte ptr [rax+49h], 0
1842D:	mov     rax, [rbp+this]
18431:	mov     rdi, rax; this
18434:	call    panel_get_next
18439:	mov     [rbp+entry], eax
1843C:	cmp     [rbp+entry], 0FFFFFFFFh
18440:	jnz     loc_182CE
18446:	jmp     short loc_1844C
18448:	nop
18449:	jmp     short loc_1844C
1844B:	nop
1844C:	mov     rax, [rbp+dir]
18450:	test    rax, rax
18453:	jz      short loc_18461
18455:	mov     rax, [rbp+dir]
18459:	mov     rdi, rax; pointer
1845C:	call    xfree
18461:	mov     rax, [rbp+this]
18465:	mov     eax, [rax+68h]
18468:	cmp     [rbp+first_entry], eax
1846B:	jz      short loc_18483
1846D:	mov     edx, [rbp+first_entry]
18470:	mov     rax, [rbp+this]
18474:	mov     esi, edx; entry
18476:	mov     rdi, rax; this
18479:	mov     eax, 0
1847E:	call    panel_set_current_entry
18483:	mov     eax, 0
18488:	call    status_default
1848D:	mov     eax, 0
18492:	call    tty_update
18497:	mov     rax, [rbp+other]
1849B:	mov     rcx, [rax+18h]
1849F:	mov     rax, [rbp+other]
184A3:	mov     edx, 1; verify
184A8:	mov     rsi, rcx; directory
184AB:	mov     rdi, rax; this
184AE:	mov     eax, 0
184B3:	call    panel_read_directory
184B8:	test    eax, eax
184BA:	jnz     short loc_184CD
184BC:	mov     rax, [rbp+other]
184C0:	mov     rdi, rax; this
184C3:	mov     eax, 0
184C8:	call    panel_recover
184CD:	mov     rax, [rbp+other]
184D1:	mov     rdi, rax; this
184D4:	call    panel_update
184D9:	mov     rax, [rbp+this]
184DD:	mov     rcx, [rax+18h]
184E1:	mov     rax, [rbp+this]
184E5:	mov     edx, 1; verify
184EA:	mov     rsi, rcx; directory
184ED:	mov     rdi, rax; this
184F0:	mov     eax, 0
184F5:	call    panel_read_directory
184FA:	test    eax, eax
184FC:	jnz     short loc_1850F
184FE:	mov     rax, [rbp+this]
18502:	mov     rdi, rax; this
18505:	mov     eax, 0
1850A:	call    panel_recover
1850F:	mov     rax, [rbp+this]
18513:	mov     rdi, rax; this
18516:	call    panel_update
1851B:	jmp     short loc_18521
1851D:	nop
1851E:	jmp     short loc_18521
18520:	nop
18521:	mov     rax, [rbp+var_8]
18525:	sub     rax, fs:28h
1852E:	jz      short locret_18535
18530:	call    ___stack_chk_fail
18535:	leave
18536:	retn
18537:	endbr64
1853B:	push    rbp
1853C:	mov     rbp, rsp
1853F:	push    rbx
18540:	sub     rsp, 28h
18544:	mov     [rbp+this], rdi
18548:	mov     [rbp+other], rsi
1854C:	mov     [rbp+new_dir], rdx
18550:	mov     rax, [rbp+new_dir]
18554:	movzx   eax, byte ptr [rax]
18557:	cmp     al, 2Fh ; '/'
18559:	jnz     short loc_185B2
1855B:	mov     rax, [rbp+new_dir]
1855F:	mov     rdi, rax; s
18562:	call    _strlen
18567:	mov     rdx, [rbp+this]
1856B:	mov     [rdx+78h], rax
1856F:	mov     rax, [rbp+this]
18573:	mov     rax, [rax+78h]
18577:	lea     rdx, [rax+1]
1857B:	mov     rax, [rbp+this]
1857F:	mov     rax, [rax+18h]
18583:	mov     rsi, rdx; n
18586:	mov     rdi, rax; p
18589:	call    xrealloc
1858E:	mov     rdx, [rbp+this]
18592:	mov     [rdx+18h], rax
18596:	mov     rax, [rbp+this]
1859A:	mov     rax, [rax+18h]
1859E:	mov     rdx, [rbp+new_dir]
185A2:	mov     rsi, rdx; src
185A5:	mov     rdi, rax; dest
185A8:	call    _strcpy
185AD:	jmp     loc_1863B
185B2:	mov     rax, [rbp+this]
185B6:	mov     rbx, [rax+78h]
185BA:	mov     rax, [rbp+new_dir]
185BE:	mov     rdi, rax; s
185C1:	call    _strlen
185C6:	add     rax, rbx
185C9:	lea     rdx, [rax+1]
185CD:	mov     rax, [rbp+this]
185D1:	mov     [rax+78h], rdx
185D5:	mov     rax, [rbp+this]
185D9:	mov     rax, [rax+78h]
185DD:	lea     rdx, [rax+1]
185E1:	mov     rax, [rbp+this]
185E5:	mov     rax, [rax+18h]
185E9:	mov     rsi, rdx; n
185EC:	mov     rdi, rax; p
185EF:	call    xrealloc
185F4:	mov     rdx, [rbp+this]
185F8:	mov     [rdx+18h], rax
185FC:	mov     rax, [rbp+this]
18600:	mov     rbx, [rax+18h]
18604:	mov     rdi, rbx; s
18607:	call    _strlen
1860C:	add     rax, rbx
1860F:	mov     word ptr [rax], 2Fh ; '/'
18614:	mov     rax, [rbp+this]
18618:	mov     rax, [rax+18h]
1861C:	mov     rdx, [rbp+new_dir]
18620:	mov     rsi, rdx; src
18623:	mov     rdi, rax; dest
18626:	call    _strcat
1862B:	mov     rax, [rbp+this]
1862F:	mov     rax, [rax+18h]
18633:	mov     rdi, rax; path
18636:	call    minimize_path
1863B:	mov     rax, [rbp+this]
1863F:	mov     esi, 0; entry
18644:	mov     rdi, rax; this
18647:	mov     eax, 0
1864C:	call    panel_set_current_entry
18651:	mov     rax, [rbp+this]
18655:	mov     r8d, 1; repeat_count
1865B:	mov     ecx, 0; aux_info
18660:	mov     edx, 0; other
18665:	mov     esi, 22h ; '''; action
1866A:	mov     rdi, rax; this
1866D:	call    panel_action
18672:	mov     rax, [rbp+this]
18676:	mov     rdi, rax; this
18679:	call    panel_update
1867E:	mov     rax, [rbp+other]
18682:	mov     rdx, [rax+18h]
18686:	mov     rax, [rbp+this]
1868A:	mov     rax, [rax+18h]
1868E:	mov     rsi, rdx; s2
18691:	mov     rdi, rax; s1
18694:	call    _strcmp
18699:	test    eax, eax
1869B:	jnz     short loc_186CC
1869D:	mov     rax, [rbp+other]
186A1:	mov     r8d, 1; repeat_count
186A7:	mov     rcx, 0FFFFFFFFFFFFFFFFh; aux_info
186AE:	mov     edx, 0; other
186B3:	mov     esi, 22h ; '''; action
186B8:	mov     rdi, rax; this
186BB:	call    panel_action
186C0:	mov     rax, [rbp+other]
186C4:	mov     rdi, rax; this
186C7:	call    panel_update
186CC:	nop
186CD:	mov     rbx, [rbp+var_8]
186D1:	leave
186D2:	retn
186D3:	endbr64
186D7:	push    rbp
186D8:	mov     rbp, rsp
186DB:	sub     rsp, 20h
186DF:	mov     [rbp+this], rdi
186E3:	mov     [rbp+aux_info], rsi
186E7:	mov     rax, [rbp+this]
186EB:	mov     rax, [rax+38h]
186EF:	test    rax, rax
186F2:	jz      short loc_1875A
186F4:	mov     rax, [rbp+this]
186F8:	mov     rcx, [rax+38h]
186FC:	mov     rax, [rbp+this]
18700:	mov     eax, [rax+28h]
18703:	movsxd  rdx, eax
18706:	mov     rax, rdx
18709:	shl     rax, 2
1870D:	add     rax, rdx
18710:	shl     rax, 4
18714:	add     rax, rcx
18717:	mov     rax, [rax]
1871A:	test    rax, rax
1871D:	jz      short loc_1875A
1871F:	mov     rax, [rbp+this]
18723:	mov     rcx, [rax+38h]
18727:	mov     rax, [rbp+this]
1872B:	mov     eax, [rax+28h]
1872E:	movsxd  rdx, eax
18731:	mov     rax, rdx
18734:	shl     rax, 2
18738:	add     rax, rdx
1873B:	shl     rax, 4
1873F:	add     rax, rcx
18742:	mov     rax, [rax]
18745:	mov     rdi, rax; string
18748:	call    xstrdup
1874D:	mov     [rbp+old_entry], rax
18751:	mov     [rbp+flag], 1
18758:	jmp     short loc_1876C
1875A:	lea     rax, unk_28601
18761:	mov     [rbp+old_entry], rax
18765:	mov     [rbp+flag], 0
1876C:	cmp     [rbp+aux_info], 0FFFFFFFFFFFFFFFFh
18771:	setz    al
18774:	movzx   eax, al
18777:	mov     [rbp+verify], eax
1877A:	mov     rax, [rbp+this]
1877E:	mov     rcx, [rax+18h]
18782:	mov     edx, [rbp+verify]; verify
18785:	mov     rax, [rbp+this]
18789:	mov     rsi, rcx; directory
1878C:	mov     rdi, rax; this
1878F:	mov     eax, 0
18794:	call    panel_read_directory
18799:	test    eax, eax
1879B:	jz      short loc_187EA
1879D:	cmp     [rbp+verify], 0
187A1:	jz      short loc_187D2
187A3:	mov     rdx, [rbp+old_entry]
187A7:	mov     rax, [rbp+this]
187AB:	mov     rsi, rdx; str
187AE:	mov     rdi, rax; this
187B1:	mov     eax, 0
187B6:	call    panel_find_index
187BB:	mov     edx, eax
187BD:	mov     rax, [rbp+this]
187C1:	mov     esi, edx; entry
187C3:	mov     rdi, rax; this
187C6:	mov     eax, 0
187CB:	call    panel_set_current_entry
187D0:	jmp     short loc_187FB
187D2:	mov     rax, [rbp+this]
187D6:	mov     esi, 0; entry
187DB:	mov     rdi, rax; this
187DE:	mov     eax, 0
187E3:	call    panel_set_current_entry
187E8:	jmp     short loc_187FB
187EA:	mov     rax, [rbp+this]
187EE:	mov     rdi, rax; this
187F1:	mov     eax, 0
187F6:	call    panel_recover
187FB:	cmp     [rbp+flag], 0
187FF:	jz      short loc_1880D
18801:	mov     rax, [rbp+old_entry]
18805:	mov     rdi, rax; pointer
18808:	call    xfree
1880D:	nop
1880E:	leave
1880F:	retn
18810:	endbr64
18814:	push    rbp
18815:	mov     rbp, rsp
18818:	push    rbx
18819:	sub     rsp, 0A8h
18820:	mov     [rbp+this], rdi
18827:	mov     [rbp+this_entry], esi
1882D:	mov     [rbp+this_size], rdx
18834:	mov     [rbp+other], rcx
1883B:	mov     [rbp+other_entry], r8d
18842:	mov     [rbp+other_size], r9
18849:	mov     [rbp+aborted], 0
18850:	mov     rax, [rbp+this]
18857:	mov     rcx, [rax+38h]
1885B:	mov     eax, [rbp+this_entry]
18861:	movsxd  rdx, eax
18864:	mov     rax, rdx
18867:	shl     rax, 2
1886B:	add     rax, rdx
1886E:	shl     rax, 4
18872:	add     rax, rcx
18875:	mov     rax, [rax]
18878:	mov     [rbp+name1], rax
1887C:	mov     rax, [rbp+other]
18883:	mov     rcx, [rax+38h]
18887:	mov     eax, [rbp+other_entry]
1888D:	movsxd  rdx, eax
18890:	mov     rax, rdx
18893:	shl     rax, 2
18897:	add     rax, rdx
1889A:	shl     rax, 4
1889E:	add     rax, rcx
188A1:	mov     rax, [rax]
188A4:	mov     [rbp+name2], rax
188A8:	mov     rax, [rbp+name1]
188AC:	mov     [rbp+file1], rax
188B0:	mov     [rbp+is_special1], 0
188B7:	mov     [rbp+is_special2], 0
188BE:	mov     [rbp+mismatch], 0
188C5:	mov     [rbp+size], 0
188CD:	mov     rax, [rbp+other_size]
188D4:	mov     qword ptr [rax], 0
188DB:	mov     rax, [rbp+other_size]
188E2:	mov     rdx, [rax]
188E5:	mov     rax, [rbp+this_size]
188EC:	mov     [rax], rdx
188EF:	mov     rax, [rbp+this]
188F6:	mov     rcx, [rax+38h]
188FA:	mov     eax, [rbp+this_entry]
18900:	movsxd  rdx, eax
18903:	mov     rax, rdx
18906:	shl     rax, 2
1890A:	add     rax, rdx
1890D:	shl     rax, 4
18911:	add     rax, rcx
18914:	mov     eax, [rax+10h]
18917:	and     eax, 0F000h
1891C:	cmp     eax, 0A000h
18921:	jz      short loc_18992
18923:	mov     rax, [rbp+this]
1892A:	mov     rcx, [rax+38h]
1892E:	mov     eax, [rbp+this_entry]
18934:	movsxd  rdx, eax
18937:	mov     rax, rdx
1893A:	shl     rax, 2
1893E:	add     rax, rdx
18941:	shl     rax, 4
18945:	add     rax, rcx
18948:	mov     eax, [rax+10h]
1894B:	and     eax, 0F000h
18950:	cmp     eax, 4000h
18955:	jz      short loc_18992
18957:	mov     rax, [rbp+this]
1895E:	mov     rcx, [rax+38h]
18962:	mov     eax, [rbp+this_entry]
18968:	movsxd  rdx, eax
1896B:	mov     rax, rdx
1896E:	shl     rax, 2
18972:	add     rax, rdx
18975:	shl     rax, 4
18979:	add     rax, rcx
1897C:	mov     eax, [rax+10h]
1897F:	and     eax, 0F000h
18984:	cmp     eax, 8000h
18989:	jz      short loc_18992
1898B:	mov     [rbp+is_special1], 1
18992:	mov     rax, [rbp+other]
18999:	mov     rcx, [rax+38h]
1899D:	mov     eax, [rbp+this_entry]
189A3:	movsxd  rdx, eax
189A6:	mov     rax, rdx
189A9:	shl     rax, 2
189AD:	add     rax, rdx
189B0:	shl     rax, 4
189B4:	add     rax, rcx
189B7:	mov     eax, [rax+10h]
189BA:	and     eax, 0F000h
189BF:	cmp     eax, 0A000h
189C4:	jz      short loc_18A35
189C6:	mov     rax, [rbp+other]
189CD:	mov     rcx, [rax+38h]
189D1:	mov     eax, [rbp+this_entry]
189D7:	movsxd  rdx, eax
189DA:	mov     rax, rdx
189DD:	shl     rax, 2
189E1:	add     rax, rdx
189E4:	shl     rax, 4
189E8:	add     rax, rcx
189EB:	mov     eax, [rax+10h]
189EE:	and     eax, 0F000h
189F3:	cmp     eax, 4000h
189F8:	jz      short loc_18A35
189FA:	mov     rax, [rbp+other]
18A01:	mov     rcx, [rax+38h]
18A05:	mov     eax, [rbp+this_entry]
18A0B:	movsxd  rdx, eax
18A0E:	mov     rax, rdx
18A11:	shl     rax, 2
18A15:	add     rax, rdx
18A18:	shl     rax, 4
18A1C:	add     rax, rcx
18A1F:	mov     eax, [rax+10h]
18A22:	and     eax, 0F000h
18A27:	cmp     eax, 8000h
18A2C:	jz      short loc_18A35
18A2E:	mov     [rbp+is_special2], 1
18A35:	cmp     [rbp+is_special1], 0
18A39:	jz      short loc_18A4E
18A3B:	cmp     [rbp+is_special2], 0
18A3F:	jz      short loc_18A4E
18A41:	mov     [rbp+size], 0
18A49:	jmp     loc_18B18
18A4E:	cmp     [rbp+is_special1], 0
18A52:	jz      short loc_18A86
18A54:	mov     rax, [rbp+other]
18A5B:	mov     rcx, [rax+38h]
18A5F:	mov     eax, [rbp+other_entry]
18A65:	movsxd  rdx, eax
18A68:	mov     rax, rdx
18A6B:	shl     rax, 2
18A6F:	add     rax, rdx
18A72:	shl     rax, 4
18A76:	add     rax, rcx
18A79:	mov     rax, [rax+8]
18A7D:	mov     [rbp+size], rax
18A81:	jmp     loc_18B18
18A86:	cmp     [rbp+is_special2], 0
18A8A:	jz      short loc_18ABB
18A8C:	mov     rax, [rbp+this]
18A93:	mov     rcx, [rax+38h]
18A97:	mov     eax, [rbp+this_entry]
18A9D:	movsxd  rdx, eax
18AA0:	mov     rax, rdx
18AA3:	shl     rax, 2
18AA7:	add     rax, rdx
18AAA:	shl     rax, 4
18AAE:	add     rax, rcx
18AB1:	mov     rax, [rax+8]
18AB5:	mov     [rbp+size], rax
18AB9:	jmp     short loc_18B18
18ABB:	mov     rax, [rbp+this]
18AC2:	mov     rcx, [rax+38h]
18AC6:	mov     eax, [rbp+this_entry]
18ACC:	movsxd  rdx, eax
18ACF:	mov     rax, rdx
18AD2:	shl     rax, 2
18AD6:	add     rax, rdx
18AD9:	shl     rax, 4
18ADD:	add     rax, rcx
18AE0:	mov     rdx, [rax+8]
18AE4:	mov     rax, [rbp+other]
18AEB:	mov     rsi, [rax+38h]
18AEF:	mov     eax, [rbp+other_entry]
18AF5:	movsxd  rcx, eax
18AF8:	mov     rax, rcx
18AFB:	shl     rax, 2
18AFF:	add     rax, rcx
18B02:	shl     rax, 4
18B06:	add     rax, rsi
18B09:	mov     rax, [rax+8]
18B0D:	cmp     rdx, rax
18B10:	cmovge  rax, rdx
18B14:	mov     [rbp+size], rax
18B18:	cmp     [rbp+size], 0
18B1D:	jnz     short loc_18B35
18B1F:	cmp     [rbp+is_special1], 0
18B23:	jz      short loc_18B2B
18B25:	cmp     [rbp+is_special2], 0
18B29:	jnz     short loc_18B35
18B2B:	mov     eax, 0
18B30:	jmp     loc_1906F
18B35:	mov     rax, [rbp+other]
18B3C:	mov     rax, [rax+18h]
18B40:	mov     rdi, rax; s
18B43:	call    _strlen
18B48:	mov     rbx, rax
18B4B:	mov     rax, [rbp+name2]
18B4F:	mov     rdi, rax; s
18B52:	call    _strlen
18B57:	add     rax, rbx
18B5A:	add     rax, 2
18B5E:	mov     rdi, rax; n
18B61:	call    xmalloc
18B66:	mov     [rbp+file2], rax
18B6A:	mov     rax, [rbp+other]
18B71:	mov     rdx, [rax+18h]
18B75:	mov     rcx, [rbp+name2]
18B79:	mov     rax, [rbp+file2]
18B7D:	lea     rsi, aSS_2; '%s/%s'
18B84:	mov     rdi, rax; s
18B87:	mov     eax, 0
18B8C:	call    _sprintf
18B91:	mov     rax, [rbp+file1]
18B95:	mov     rdi, rax; s
18B98:	call    _strlen
18B9D:	add     rax, 21h ; '!'
18BA1:	mov     rdi, rax; n
18BA4:	call    xmalloc
18BA9:	mov     [rbp+msg], rax
18BAD:	cmp     [rbp+size], 0
18BB2:	jnz     short loc_18BD5
18BB4:	mov     rdx, [rbp+file1]
18BB8:	mov     rax, [rbp+msg]
18BBC:	lea     rcx, aCmpS; '(CMP) %s'
18BC3:	mov     rsi, rcx; format
18BC6:	mov     rdi, rax; s
18BC9:	mov     eax, 0
18BCE:	call    _sprintf
18BD3:	jmp     short loc_18BF4
18BD5:	mov     rdx, [rbp+file1]
18BD9:	mov     rax, [rbp+msg]
18BDD:	lea     rcx, aCmp0S; '(CMP) [  0%%] %s'
18BE4:	mov     rsi, rcx; format
18BE7:	mov     rdi, rax; s
18BEA:	mov     eax, 0
18BEF:	call    _sprintf
18BF4:	mov     rax, [rbp+msg]
18BF8:	mov     edx, 1; alignment
18BFD:	mov     esi, 1; type
18C02:	mov     rdi, rax; message
18C05:	call    status
18C0A:	mov     eax, 0
18C0F:	call    tty_update
18C14:	mov     rax, [rbp+msg]
18C18:	mov     rdi, rax; pointer
18C1B:	call    xfree
18C20:	mov     rax, [rbp+file1]
18C24:	mov     esi, 0; oflag
18C29:	mov     rdi, rax; file
18C2C:	mov     eax, 0
18C31:	call    _open64
18C36:	mov     [rbp+fd1], eax
18C39:	cmp     [rbp+fd1], 0FFFFFFFFh
18C3D:	jnz     short loc_18C4B
18C3F:	mov     rax, 0FFFFFFFFFFFFFFFCh
18C46:	jmp     loc_1906F
18C4B:	mov     rax, [rbp+file2]
18C4F:	mov     esi, 0; oflag
18C54:	mov     rdi, rax; file
18C57:	mov     eax, 0
18C5C:	call    _open64
18C61:	mov     [rbp+fd2], eax
18C64:	cmp     [rbp+fd2], 0FFFFFFFFh
18C68:	jnz     short loc_18C8C
18C6A:	mov     rax, [rbp+file2]
18C6E:	mov     rdi, rax; pointer
18C71:	call    xfree
18C76:	mov     eax, [rbp+fd1]
18C79:	mov     edi, eax; fd
18C7B:	call    _close
18C80:	mov     rax, 0FFFFFFFFFFFFFFFBh
18C87:	jmp     loc_1906F
18C8C:	mov     rax, [rbp+file2]
18C90:	mov     rdi, rax; pointer
18C93:	call    xfree
18C98:	mov     edi, 8000h; n
18C9D:	call    xmalloc
18CA2:	mov     [rbp+buf1], rax
18CA6:	mov     edi, 8000h; n
18CAB:	call    xmalloc
18CB0:	mov     [rbp+buf2], rax
18CB4:	mov     rax, [rbp+file1]
18CB8:	mov     rdi, rax; s
18CBB:	call    _strlen
18CC0:	add     rax, 21h ; '!'
18CC4:	mov     rdi, rax; n
18CC7:	call    xmalloc
18CCC:	mov     [rbp+msg], rax
18CD0:	mov     [rbp+n], 0
18CD8:	mov     eax, 0
18CDD:	call    canceled
18CE2:	test    eax, eax
18CE4:	jz      short loc_18CF2
18CE6:	mov     [rbp+aborted], 1
18CED:	jmp     loc_18EE8
18CF2:	mov     edi, 1; mode
18CF7:	call    signals
18CFC:	mov     rcx, [rbp+buf1]
18D00:	mov     eax, [rbp+fd1]
18D03:	mov     edx, 8000h; nbytes
18D08:	mov     rsi, rcx; buf
18D0B:	mov     edi, eax; fd
18D0D:	call    read
18D12:	mov     [rbp+read1], eax
18D15:	mov     edi, 0; mode
18D1A:	call    signals
18D1F:	cmp     [rbp+read1], 0
18D23:	jns     short loc_18D45
18D25:	mov     eax, [rbp+fd1]
18D28:	mov     edi, eax; fd
18D2A:	call    _close
18D2F:	mov     eax, [rbp+fd2]
18D32:	mov     edi, eax; fd
18D34:	call    _close
18D39:	mov     rax, 0FFFFFFFFFFFFFFFEh
18D40:	jmp     loc_1906F
18D45:	mov     rax, [rbp+this_size]
18D4C:	mov     rdx, [rax]
18D4F:	mov     eax, [rbp+read1]
18D52:	cdqe
18D54:	add     rdx, rax
18D57:	mov     rax, [rbp+this_size]
18D5E:	mov     [rax], rdx
18D61:	mov     edi, 1; mode
18D66:	call    signals
18D6B:	mov     rcx, [rbp+buf2]
18D6F:	mov     eax, [rbp+fd2]
18D72:	mov     edx, 8000h; nbytes
18D77:	mov     rsi, rcx; buf
18D7A:	mov     edi, eax; fd
18D7C:	call    read
18D81:	mov     [rbp+read2], eax
18D84:	mov     edi, 0; mode
18D89:	call    signals
18D8E:	cmp     [rbp+read2], 0
18D92:	jns     short loc_18DB4
18D94:	mov     eax, [rbp+fd1]
18D97:	mov     edi, eax; fd
18D99:	call    _close
18D9E:	mov     eax, [rbp+fd2]
18DA1:	mov     edi, eax; fd
18DA3:	call    _close
18DA8:	mov     rax, 0FFFFFFFFFFFFFFFDh
18DAF:	jmp     loc_1906F
18DB4:	mov     rax, [rbp+other_size]
18DBB:	mov     rdx, [rax]
18DBE:	mov     eax, [rbp+read2]
18DC1:	cdqe
18DC3:	add     rdx, rax
18DC6:	mov     rax, [rbp+other_size]
18DCD:	mov     [rax], rdx
18DD0:	mov     edx, [rbp+read1]
18DD3:	mov     eax, [rbp+read2]
18DD6:	cmp     edx, eax
18DD8:	cmovle  eax, edx
18DDB:	mov     [rbp+bytes_read], eax
18DDE:	cmp     [rbp+bytes_read], 0
18DE2:	jz      loc_18EE7
18DE8:	mov     eax, [rbp+bytes_read]
18DEB:	movsxd  rdx, eax; n
18DEE:	mov     rcx, [rbp+buf2]
18DF2:	mov     rax, [rbp+buf1]
18DF6:	mov     rsi, rcx; s2
18DF9:	mov     rdi, rax; s1
18DFC:	call    _memcmp
18E01:	test    eax, eax
18E03:	jz      short loc_18E56
18E05:	mov     [rbp+i], 0
18E0C:	jmp     short loc_18E36
18E0E:	mov     eax, [rbp+i]
18E11:	movsxd  rdx, eax
18E14:	mov     rax, [rbp+buf1]
18E18:	add     rax, rdx
18E1B:	movzx   edx, byte ptr [rax]
18E1E:	mov     eax, [rbp+i]
18E21:	movsxd  rcx, eax
18E24:	mov     rax, [rbp+buf2]
18E28:	add     rax, rcx
18E2B:	movzx   eax, byte ptr [rax]
18E2E:	cmp     dl, al
18E30:	jnz     short loc_18E40
18E32:	add     [rbp+i], 1
18E36:	mov     eax, [rbp+i]
18E39:	cmp     eax, [rbp+bytes_read]
18E3C:	jl      short loc_18E0E
18E3E:	jmp     short loc_18E41
18E40:	nop
18E41:	mov     eax, [rbp+i]
18E44:	cdqe
18E46:	add     [rbp+n], rax
18E4A:	mov     [rbp+mismatch], 1
18E51:	jmp     loc_18EE8
18E56:	mov     eax, [rbp+bytes_read]
18E59:	cdqe
18E5B:	add     [rbp+n], rax
18E5F:	cmp     [rbp+size], 0
18E64:	jnz     short loc_18E87
18E66:	mov     rdx, [rbp+file1]
18E6A:	mov     rax, [rbp+msg]
18E6E:	lea     rcx, aCmpS; '(CMP) %s'
18E75:	mov     rsi, rcx; format
18E78:	mov     rdi, rax; s
18E7B:	mov     eax, 0
18E80:	call    _sprintf
18E85:	jmp     short loc_18EC2
18E87:	mov     rdx, [rbp+size]
18E8B:	mov     rax, [rbp+n]
18E8F:	mov     rsi, rdx; total
18E92:	mov     rdi, rax; x
18E95:	mov     eax, 0
18E9A:	call    panel_percent
18E9F:	mov     esi, eax
18EA1:	mov     rdx, [rbp+file1]
18EA5:	mov     rax, [rbp+msg]
18EA9:	mov     rcx, rdx
18EAC:	mov     edx, esi
18EAE:	lea     rsi, aCmp3dS; '(CMP) [%3d%%] %s'
18EB5:	mov     rdi, rax; s
18EB8:	mov     eax, 0
18EBD:	call    _sprintf
18EC2:	mov     rax, [rbp+msg]
18EC6:	mov     edx, 1; alignment
18ECB:	mov     esi, 1; type
18ED0:	mov     rdi, rax; message
18ED3:	call    status
18ED8:	mov     eax, 0
18EDD:	call    tty_update
18EE2:	jmp     loc_18CD8
18EE7:	nop
18EE8:	cmp     [rbp+mismatch], 0
18EEC:	jz      loc_19024
18EF2:	cmp     [rbp+is_special1], 0
18EF6:	jz      short loc_18F58
18EF8:	mov     edi, 1; mode
18EFD:	call    signals
18F02:	mov     rcx, [rbp+buf1]
18F06:	mov     eax, [rbp+fd1]
18F09:	mov     edx, 8000h; nbytes
18F0E:	mov     rsi, rcx; buf
18F11:	mov     edi, eax; fd
18F13:	call    read
18F18:	mov     [rbp+read1], eax
18F1B:	cmp     [rbp+read1], 0
18F1F:	jle     short loc_18F4C
18F21:	mov     rax, [rbp+this_size]
18F28:	mov     rdx, [rax]
18F2B:	mov     eax, [rbp+read1]
18F2E:	cdqe
18F30:	add     rdx, rax
18F33:	mov     rax, [rbp+this_size]
18F3A:	mov     [rax], rdx
18F3D:	mov     rax, [rbp+this_size]
18F44:	mov     rax, [rax]
18F47:	test    rax, rax
18F4A:	jnz     short loc_18F02
18F4C:	mov     edi, 0; mode
18F51:	call    signals
18F56:	jmp     short loc_18F8B
18F58:	mov     rax, [rbp+this]
18F5F:	mov     rcx, [rax+38h]
18F63:	mov     eax, [rbp+this_entry]
18F69:	movsxd  rdx, eax
18F6C:	mov     rax, rdx
18F6F:	shl     rax, 2
18F73:	add     rax, rdx
18F76:	shl     rax, 4
18F7A:	add     rax, rcx
18F7D:	mov     rdx, [rax+8]
18F81:	mov     rax, [rbp+this_size]
18F88:	mov     [rax], rdx
18F8B:	cmp     [rbp+is_special2], 0
18F8F:	jz      short loc_18FF1
18F91:	mov     edi, 1; mode
18F96:	call    signals
18F9B:	mov     rcx, [rbp+buf2]
18F9F:	mov     eax, [rbp+fd2]
18FA2:	mov     edx, 8000h; nbytes
18FA7:	mov     rsi, rcx; buf
18FAA:	mov     edi, eax; fd
18FAC:	call    read
18FB1:	mov     [rbp+read2], eax
18FB4:	cmp     [rbp+read2], 0
18FB8:	jle     short loc_18FE5
18FBA:	mov     rax, [rbp+other_size]
18FC1:	mov     rdx, [rax]
18FC4:	mov     eax, [rbp+read2]
18FC7:	cdqe
18FC9:	add     rdx, rax
18FCC:	mov     rax, [rbp+other_size]
18FD3:	mov     [rax], rdx
18FD6:	mov     rax, [rbp+other_size]
18FDD:	mov     rax, [rax]
18FE0:	test    rax, rax
18FE3:	jnz     short loc_18F9B
18FE5:	mov     edi, 0; mode
18FEA:	call    signals
18FEF:	jmp     short loc_19024
18FF1:	mov     rax, [rbp+other]
18FF8:	mov     rcx, [rax+38h]
18FFC:	mov     eax, [rbp+other_entry]
19002:	movsxd  rdx, eax
19005:	mov     rax, rdx
19008:	shl     rax, 2
1900C:	add     rax, rdx
1900F:	shl     rax, 4
19013:	add     rax, rcx
19016:	mov     rdx, [rax+8]
1901A:	mov     rax, [rbp+other_size]
19021:	mov     [rax], rdx
19024:	mov     rax, [rbp+msg]
19028:	mov     rdi, rax; pointer
1902B:	call    xfree
19030:	mov     rax, [rbp+buf1]
19034:	mov     rdi, rax; pointer
19037:	call    xfree
1903C:	mov     rax, [rbp+buf2]
19040:	mov     rdi, rax; pointer
19043:	call    xfree
19048:	mov     eax, [rbp+fd1]
1904B:	mov     edi, eax; fd
1904D:	call    _close
19052:	mov     eax, [rbp+fd2]
19055:	mov     edi, eax; fd
19057:	call    _close
1905C:	cmp     [rbp+aborted], 0
19060:	jnz     short loc_19068
19062:	mov     rax, [rbp+n]
19066:	jmp     short loc_1906F
19068:	mov     rax, 0FFFFFFFFFFFFFFFFh
1906F:	mov     rbx, [rbp+var_8]
19073:	leave
19074:	retn
19075:	endbr64
19079:	push    rbp
1907A:	mov     rbp, rsp
1907D:	sub     rsp, 50h
19081:	mov     [rbp+this], rdi
19085:	mov     [rbp+other], rsi
19089:	mov     rax, fs:28h
19092:	mov     [rbp+var_8], rax
19096:	xor     eax, eax
19098:	mov     [rbp+permission], 1
1909F:	mov     rax, [rbp+this]
190A3:	mov     eax, [rax+28h]
190A6:	mov     [rbp+this_entry], eax
190A9:	mov     rax, [rbp+other]
190AD:	mov     eax, [rax+28h]
190B0:	mov     [rbp+other_entry], eax
190B3:	mov     rax, cs:panel_il_message+50h
190BA:	mov     rdi, rax; message
190BD:	call    il_message
190C2:	mov     eax, 0
190C7:	call    tty_update
190CC:	mov     rax, [rbp+other]
190D0:	mov     rdx, [rax+18h]
190D4:	mov     rax, [rbp+this]
190D8:	mov     rax, [rax+18h]
190DC:	mov     rsi, rdx; s2
190DF:	mov     rdi, rax; s1
190E2:	call    _strcmp
190E7:	test    eax, eax
190E9:	jnz     short loc_1915C
190EB:	mov     rax, [rbp+other]
190EF:	mov     rcx, [rax+38h]
190F3:	mov     eax, [rbp+other_entry]
190F6:	movsxd  rdx, eax
190F9:	mov     rax, rdx
190FC:	shl     rax, 2
19100:	add     rax, rdx
19103:	shl     rax, 4
19107:	add     rax, rcx
1910A:	mov     rdx, [rax]
1910D:	mov     rax, [rbp+this]
19111:	mov     rsi, [rax+38h]
19115:	mov     eax, [rbp+this_entry]
19118:	movsxd  rcx, eax
1911B:	mov     rax, rcx
1911E:	shl     rax, 2
19122:	add     rax, rcx
19125:	shl     rax, 4
19129:	add     rax, rsi
1912C:	mov     rax, [rax]
1912F:	mov     rsi, rdx; s2
19132:	mov     rdi, rax; s1
19135:	call    _strcmp
1913A:	test    eax, eax
1913C:	jnz     short loc_1915C
1913E:	mov     edx, 1Ch; flags
19143:	mov     esi, 0; options
19148:	lea     rax, aThereIsNoPoint; 'There is no point in comparing a file w'...
1914F:	mov     rdi, rax; message
19152:	call    il_read_char
19157:	jmp     loc_195D2
1915C:	mov     rax, [rbp+this]
19160:	mov     rcx, [rax+38h]
19164:	mov     eax, [rbp+this_entry]
19167:	movsxd  rdx, eax
1916A:	mov     rax, rdx
1916D:	shl     rax, 2
19171:	add     rax, rdx
19174:	shl     rax, 4
19178:	add     rax, rcx
1917B:	movzx   eax, byte ptr [rax+48h]
1917F:	cmp     al, 1
19181:	jnz     loc_19595
19187:	mov     rax, [rbp+other]
1918B:	mov     rcx, [rax+38h]
1918F:	mov     eax, [rbp+other_entry]
19192:	movsxd  rdx, eax
19195:	mov     rax, rdx
19198:	shl     rax, 2
1919C:	add     rax, rdx
1919F:	shl     rax, 4
191A3:	add     rax, rcx
191A6:	movzx   eax, byte ptr [rax+48h]
191AA:	cmp     al, 1
191AC:	jnz     loc_19595
191B2:	mov     rax, [rbp+this]
191B6:	mov     rcx, [rax+38h]
191BA:	mov     eax, [rbp+this_entry]
191BD:	movsxd  rdx, eax
191C0:	mov     rax, rdx
191C3:	shl     rax, 2
191C7:	add     rax, rdx
191CA:	shl     rax, 4
191CE:	add     rax, rcx
191D1:	mov     rcx, [rax+8]
191D5:	mov     rax, [rbp+other]
191D9:	mov     rsi, [rax+38h]
191DD:	mov     eax, [rbp+other_entry]
191E0:	movsxd  rdx, eax
191E3:	mov     rax, rdx
191E6:	shl     rax, 2
191EA:	add     rax, rdx
191ED:	shl     rax, 4
191F1:	add     rax, rsi
191F4:	mov     rax, [rax+8]
191F8:	cmp     rcx, rax
191FB:	jz      loc_19342
19201:	mov     rax, [rbp+this]
19205:	mov     rcx, [rax+38h]
19209:	mov     eax, [rbp+this_entry]
1920C:	movsxd  rdx, eax
1920F:	mov     rax, rdx
19212:	shl     rax, 2
19216:	add     rax, rdx
19219:	shl     rax, 4
1921D:	add     rax, rcx
19220:	mov     eax, [rax+10h]
19223:	and     eax, 0F000h
19228:	cmp     eax, 0A000h
1922D:	jz      short loc_1928F
1922F:	mov     rax, [rbp+this]
19233:	mov     rcx, [rax+38h]
19237:	mov     eax, [rbp+this_entry]
1923A:	movsxd  rdx, eax
1923D:	mov     rax, rdx
19240:	shl     rax, 2
19244:	add     rax, rdx
19247:	shl     rax, 4
1924B:	add     rax, rcx
1924E:	mov     eax, [rax+10h]
19251:	and     eax, 0F000h
19256:	cmp     eax, 4000h
1925B:	jz      short loc_1928F
1925D:	mov     rax, [rbp+this]
19261:	mov     rcx, [rax+38h]
19265:	mov     eax, [rbp+this_entry]
19268:	movsxd  rdx, eax
1926B:	mov     rax, rdx
1926E:	shl     rax, 2
19272:	add     rax, rdx
19275:	shl     rax, 4
19279:	add     rax, rcx
1927C:	mov     eax, [rax+10h]
1927F:	and     eax, 0F000h
19284:	cmp     eax, 8000h
19289:	jnz     loc_19342
1928F:	mov     rax, [rbp+other]
19293:	mov     rcx, [rax+38h]
19297:	mov     eax, [rbp+other_entry]
1929A:	movsxd  rdx, eax
1929D:	mov     rax, rdx
192A0:	shl     rax, 2
192A4:	add     rax, rdx
192A7:	shl     rax, 4
192AB:	add     rax, rcx
192AE:	mov     eax, [rax+10h]
192B1:	and     eax, 0F000h
192B6:	cmp     eax, 0A000h
192BB:	jz      short loc_19319
192BD:	mov     rax, [rbp+other]
192C1:	mov     rcx, [rax+38h]
192C5:	mov     eax, [rbp+other_entry]
192C8:	movsxd  rdx, eax
192CB:	mov     rax, rdx
192CE:	shl     rax, 2
192D2:	add     rax, rdx
192D5:	shl     rax, 4
192D9:	add     rax, rcx
192DC:	mov     eax, [rax+10h]
192DF:	and     eax, 0F000h
192E4:	cmp     eax, 4000h
192E9:	jz      short loc_19319
192EB:	mov     rax, [rbp+other]
192EF:	mov     rcx, [rax+38h]
192F3:	mov     eax, [rbp+other_entry]
192F6:	movsxd  rdx, eax
192F9:	mov     rax, rdx
192FC:	shl     rax, 2
19300:	add     rax, rdx
19303:	shl     rax, 4
19307:	add     rax, rcx
1930A:	mov     eax, [rax+10h]
1930D:	and     eax, 0F000h
19312:	cmp     eax, 8000h
19317:	jnz     short loc_19342
19319:	mov     edx, 0Ch; flags
1931E:	lea     rax, aYn_0; 'yn'
19325:	mov     rsi, rax; options
19328:	lea     rax, aFilesHaveDiffe; 'Files have different size.  Continue? '
1932F:	mov     rdi, rax; message
19332:	call    il_read_char
19337:	cmp     al, 79h ; 'y'
19339:	jz      short loc_19342
1933B:	mov     [rbp+permission], 0
19342:	cmp     [rbp+permission], 0
19346:	jz      loc_195BE
1934C:	lea     r8, [rbp+other_size]
19350:	mov     edi, [rbp+other_entry]
19353:	mov     rcx, [rbp+other]; other
19357:	lea     rdx, [rbp+this_size]; this_size
1935B:	mov     esi, [rbp+this_entry]; this_entry
1935E:	mov     rax, [rbp+this]
19362:	mov     r9, r8; other_size
19365:	mov     r8d, edi; other_entry
19368:	mov     rdi, rax; this
1936B:	mov     eax, 0
19370:	call    panel_compare
19375:	mov     [rbp+result], rax
19379:	mov     rax, [rbp+result]
1937D:	add     eax, 5; switch 5 cases
19380:	cmp     eax, 4
19383:	ja      def_193A9; jumptable 00000000000193A9 default case
19389:	mov     eax, eax
1938B:	lea     rdx, ds:0[rax*4]
19393:	lea     rax, jpt_193A9
1939A:	mov     eax, ds:(jpt_193A9 - 28E34h)[rdx+rax]
1939D:	cdqe
1939F:	lea     rdx, jpt_193A9
193A6:	add     rax, rdx
193A9:	jmp     rax; switch jump
193AC:	mov     rax, [rbp+this]; jumptable 00000000000193A9 case -4
193B0:	mov     rcx, [rax+38h]
193B4:	mov     eax, [rbp+this_entry]
193B7:	movsxd  rdx, eax
193BA:	mov     rax, rdx
193BD:	shl     rax, 2
193C1:	add     rax, rdx
193C4:	shl     rax, 4
193C8:	add     rax, rcx
193CB:	mov     rax, [rax]
193CE:	mov     ecx, 1Eh; flags
193D3:	mov     edx, 0; options
193D8:	mov     rsi, rax; string
193DB:	lea     rax, aCannotOpenFile; 'Cannot open file %s. '
193E2:	mov     rdi, rax; format
193E5:	mov     eax, 0
193EA:	call    panel_2s_message
193EF:	jmp     loc_19593
193F4:	mov     rax, [rbp+other]; jumptable 00000000000193A9 case -5
193F8:	mov     rcx, [rax+38h]
193FC:	mov     eax, [rbp+other_entry]
193FF:	movsxd  rdx, eax
19402:	mov     rax, rdx
19405:	shl     rax, 2
19409:	add     rax, rdx
1940C:	shl     rax, 4
19410:	add     rax, rcx
19413:	mov     rax, [rax]
19416:	mov     ecx, 1Eh; flags
1941B:	mov     edx, 0; options
19420:	mov     rsi, rax; string
19423:	lea     rax, aCannotOpenFile; 'Cannot open file %s. '
1942A:	mov     rdi, rax; format
1942D:	mov     eax, 0
19432:	call    panel_2s_message
19437:	jmp     loc_19593
1943C:	mov     rax, [rbp+this]; jumptable 00000000000193A9 case -2
19440:	mov     rcx, [rax+38h]
19444:	mov     eax, [rbp+this_entry]
19447:	movsxd  rdx, eax
1944A:	mov     rax, rdx
1944D:	shl     rax, 2
19451:	add     rax, rdx
19454:	shl     rax, 4
19458:	add     rax, rcx
1945B:	mov     rax, [rax]
1945E:	mov     ecx, 1Eh; flags
19463:	mov     edx, 0; options
19468:	mov     rsi, rax; string
1946B:	lea     rax, aIOErrorReading; 'I/O error reading from file %s. '
19472:	mov     rdi, rax; format
19475:	mov     eax, 0
1947A:	call    panel_2s_message
1947F:	jmp     loc_19593
19484:	mov     rax, [rbp+other]; jumptable 00000000000193A9 case -3
19488:	mov     rcx, [rax+38h]
1948C:	mov     eax, [rbp+other_entry]
1948F:	movsxd  rdx, eax
19492:	mov     rax, rdx
19495:	shl     rax, 2
19499:	add     rax, rdx
1949C:	shl     rax, 4
194A0:	add     rax, rcx
194A3:	mov     rax, [rax]
194A6:	mov     ecx, 1Eh; flags
194AB:	mov     edx, 0; options
194B0:	mov     rsi, rax; string
194B3:	lea     rax, aIOErrorReading; 'I/O error reading from file %s. '
194BA:	mov     rdi, rax; format
194BD:	mov     eax, 0
194C2:	call    panel_2s_message
194C7:	jmp     loc_19593
194CC:	mov     rax, [rbp+this_size]; jumptable 00000000000193A9 default case
194D0:	cmp     [rbp+result], rax
194D4:	jnz     short loc_19501
194D6:	mov     rdx, [rbp+this_size]
194DA:	mov     rax, [rbp+other_size]
194DE:	cmp     rdx, rax
194E1:	jnz     short loc_19501
194E3:	mov     edx, 14h; flags
194E8:	mov     esi, 0; options
194ED:	lea     rax, aCompareOk; 'Compare OK. '
194F4:	mov     rdi, rax; message
194F7:	call    il_read_char
194FC:	jmp     loc_19593
19501:	mov     rdx, [rbp+this_size]
19505:	mov     rax, [rbp+other_size]
19509:	cmp     rdx, rax
1950C:	cmovle  rax, rdx
19510:	cmp     [rbp+result], rax
19514:	jnz     short loc_19531
19516:	mov     edx, 14h; flags
1951B:	mov     esi, 0; options
19520:	lea     rax, aFilesAreDiffer; 'Files are different sizes but are ident'...
19527:	mov     rdi, rax; message
1952A:	call    il_read_char
1952F:	jmp     short loc_19593
19531:	mov     edi, 80h; n
19536:	call    xmalloc
1953B:	mov     [rbp+msg], rax
1953F:	mov     rcx, [rbp+result]
19543:	mov     rdx, [rbp+result]
19547:	mov     rax, [rbp+msg]
1954B:	lea     rsi, aLd0xLx; '%Ld (0x%Lx)'
19552:	mov     rdi, rax; s
19555:	mov     eax, 0
1955A:	call    _sprintf
1955F:	mov     rax, [rbp+msg]
19563:	mov     ecx, 14h; flags
19568:	mov     edx, 0; options
1956D:	mov     rsi, rax; string
19570:	lea     rax, aFilesDifferAtO; 'Files differ at offset %s. '
19577:	mov     rdi, rax; format
1957A:	mov     eax, 0
1957F:	call    panel_2s_message
19584:	mov     rax, [rbp+msg]
19588:	mov     rdi, rax; pointer
1958B:	call    xfree
19590:	jmp     short loc_19593
19592:	nop; jumptable 00000000000193A9 case -1
19593:	jmp     short loc_195BE
19595:	mov     rax, [rbp+this]
19599:	mov     rax, [rax+18h]
1959D:	mov     ecx, 1Eh; flags
195A2:	mov     edx, 0; options
195A7:	mov     rsi, rax; string
195AA:	lea     rax, aOnlyRegularFil; 'Only regular files can be compared. '
195B1:	mov     rdi, rax; format
195B4:	mov     eax, 0
195B9:	call    panel_2s_message
195BE:	mov     eax, 0
195C3:	call    status_default
195C8:	mov     eax, 0
195CD:	call    tty_update
195D2:	mov     rax, [rbp+var_8]
195D6:	sub     rax, fs:28h
195DF:	jz      short locret_195E6
195E1:	call    ___stack_chk_fail
195E6:	leave
195E7:	retn
195E8:	endbr64
195EC:	push    rbp
195ED:	mov     rbp, rsp
195F0:	sub     rsp, 50h
195F4:	mov     [rbp+this], rdi
195F8:	mov     [rbp+other], rsi
195FC:	mov     [rbp+quick], edx
195FF:	mov     rax, fs:28h
19608:	mov     [rbp+var_8], rax
1960C:	xor     eax, eax
1960E:	mov     rax, cs:panel_il_message+48h
19615:	mov     rdi, rax; message
19618:	call    il_message
1961D:	mov     eax, 0
19622:	call    tty_update
19627:	mov     rax, [rbp+other]
1962B:	mov     rdx, [rax+18h]
1962F:	mov     rax, [rbp+this]
19633:	mov     rax, [rax+18h]
19637:	mov     rsi, rdx; s2
1963A:	mov     rdi, rax; s1
1963D:	call    _strcmp
19642:	test    eax, eax
19644:	jnz     short loc_19694
19646:	mov     edx, 1Ch; flags
1964B:	mov     esi, 0; options
19650:	lea     rax, aNoPointInCompa; 'No point in comparing a directory with '...
19657:	mov     rdi, rax; message
1965A:	call    il_read_char
1965F:	mov     rax, [rbp+this]
19663:	mov     rdi, rax; this
19666:	call    panel_unselect_all
1966B:	mov     rax, [rbp+other]
1966F:	mov     rdi, rax; this
19672:	call    panel_unselect_all
19677:	mov     rax, [rbp+this]
1967B:	mov     rdi, rax; this
1967E:	call    panel_update
19683:	mov     rax, [rbp+other]
19687:	mov     rdi, rax; this
1968A:	call    panel_update
1968F:	jmp     loc_19A16
19694:	mov     rax, [rbp+this]
19698:	mov     rdi, rax; this
1969B:	call    panel_select_all
196A0:	mov     rax, [rbp+other]
196A4:	mov     rdi, rax; this
196A7:	call    panel_select_all
196AC:	mov     [rbp+i], 1
196B3:	jmp     loc_199B7
196B8:	mov     rax, [rbp+this]
196BC:	mov     rcx, [rax+38h]
196C0:	mov     eax, [rbp+i]
196C3:	movsxd  rdx, eax
196C6:	mov     rax, rdx
196C9:	shl     rax, 2
196CD:	add     rax, rdx
196D0:	shl     rax, 4
196D4:	add     rax, rcx
196D7:	movzx   eax, byte ptr [rax+48h]
196DB:	cmp     al, 1
196DD:	jnz     loc_199B3
196E3:	mov     [rbp+j], 1
196EA:	jmp     loc_199A3
196EF:	mov     eax, 0
196F4:	call    service_pending_signals
196F9:	mov     rax, [rbp+other]
196FD:	mov     rcx, [rax+38h]
19701:	mov     eax, [rbp+j]
19704:	movsxd  rdx, eax
19707:	mov     rax, rdx
1970A:	shl     rax, 2
1970E:	add     rax, rdx
19711:	shl     rax, 4
19715:	add     rax, rcx
19718:	movzx   eax, byte ptr [rax+48h]
1971C:	cmp     al, 1
1971E:	jnz     loc_1999F
19724:	mov     rax, [rbp+other]
19728:	mov     rcx, [rax+38h]
1972C:	mov     eax, [rbp+j]
1972F:	movsxd  rdx, eax
19732:	mov     rax, rdx
19735:	shl     rax, 2
19739:	add     rax, rdx
1973C:	shl     rax, 4
19740:	add     rax, rcx
19743:	mov     rdx, [rax]
19746:	mov     rax, [rbp+this]
1974A:	mov     rsi, [rax+38h]
1974E:	mov     eax, [rbp+i]
19751:	movsxd  rcx, eax
19754:	mov     rax, rcx
19757:	shl     rax, 2
1975B:	add     rax, rcx
1975E:	shl     rax, 4
19762:	add     rax, rsi
19765:	mov     rax, [rax]
19768:	mov     rsi, rdx; s2
1976B:	mov     rdi, rax; s1
1976E:	call    _strcmp
19773:	test    eax, eax
19775:	jnz     loc_1999F
1977B:	mov     rax, [rbp+this]
1977F:	mov     rcx, [rax+38h]
19783:	mov     eax, [rbp+i]
19786:	movsxd  rdx, eax
19789:	mov     rax, rdx
1978C:	shl     rax, 2
19790:	add     rax, rdx
19793:	shl     rax, 4
19797:	add     rax, rcx
1979A:	mov     rcx, [rax+8]
1979E:	mov     rax, [rbp+other]
197A2:	mov     rsi, [rax+38h]
197A6:	mov     eax, [rbp+j]
197A9:	movsxd  rdx, eax
197AC:	mov     rax, rdx
197AF:	shl     rax, 2
197B3:	add     rax, rdx
197B6:	shl     rax, 4
197BA:	add     rax, rsi
197BD:	mov     rax, [rax+8]
197C1:	cmp     rcx, rax
197C4:	jnz     loc_19873
197CA:	cmp     [rbp+quick], 0
197CE:	jz      short loc_19821
197D0:	mov     rax, [rbp+this]
197D4:	mov     rcx, [rax+38h]
197D8:	mov     eax, [rbp+i]
197DB:	movsxd  rdx, eax
197DE:	mov     rax, rdx
197E1:	shl     rax, 2
197E5:	add     rax, rdx
197E8:	shl     rax, 4
197EC:	add     rax, rcx
197EF:	mov     rcx, [rax+20h]
197F3:	mov     rax, [rbp+other]
197F7:	mov     rsi, [rax+38h]
197FB:	mov     eax, [rbp+j]
197FE:	movsxd  rdx, eax
19801:	mov     rax, rdx
19804:	shl     rax, 2
19808:	add     rax, rdx
1980B:	shl     rax, 4
1980F:	add     rax, rsi
19812:	mov     rax, [rax+20h]
19816:	cmp     rcx, rax
19819:	jz      loc_19931
1981F:	jmp     short hilight_the_newer_one
19821:	lea     r8, [rbp+other_size]
19825:	mov     edi, [rbp+j]
19828:	mov     rcx, [rbp+other]; other
1982C:	lea     rdx, [rbp+this_size]; this_size
19830:	mov     esi, [rbp+i]; this_entry
19833:	mov     rax, [rbp+this]
19837:	mov     r9, r8; other_size
1983A:	mov     r8d, edi; other_entry
1983D:	mov     rdi, rax; this
19840:	mov     eax, 0
19845:	call    panel_compare
1984A:	mov     [rbp+result], rax
1984E:	cmp     [rbp+result], 0FFFFFFFFFFFFFFFFh
19853:	jz      loc_199C9
19859:	mov     rax, [rbp+this_size]
1985D:	cmp     [rbp+result], rax
19861:	jnz     short hilight_the_newer_one
19863:	mov     rax, [rbp+other_size]
19867:	cmp     [rbp+result], rax
1986B:	jz      loc_19934
19871:	jmp     short hilight_the_newer_one
19873:	nop
19874:	mov     rax, [rbp+this]
19878:	mov     rcx, [rax+38h]
1987C:	mov     eax, [rbp+i]
1987F:	movsxd  rdx, eax
19882:	mov     rax, rdx
19885:	shl     rax, 2
19889:	add     rax, rdx
1988C:	shl     rax, 4
19890:	add     rax, rcx
19893:	mov     rcx, [rax+20h]
19897:	mov     rax, [rbp+other]
1989B:	mov     rsi, [rax+38h]
1989F:	mov     eax, [rbp+j]
198A2:	movsxd  rdx, eax
198A5:	mov     rax, rdx
198A8:	shl     rax, 2
198AC:	add     rax, rdx
198AF:	shl     rax, 4
198B3:	add     rax, rsi
198B6:	mov     rax, [rax+20h]
198BA:	cmp     rcx, rax
198BD:	jl      short loc_198F8
198BF:	mov     rax, [rbp+other]
198C3:	mov     rcx, [rax+38h]
198C7:	mov     eax, [rbp+j]
198CA:	movsxd  rdx, eax
198CD:	mov     rax, rdx
198D0:	shl     rax, 2
198D4:	add     rax, rdx
198D7:	shl     rax, 4
198DB:	add     rax, rcx
198DE:	mov     byte ptr [rax+49h], 0
198E2:	mov     rax, [rbp+other]
198E6:	mov     eax, [rax+70h]
198E9:	lea     edx, [rax-1]
198EC:	mov     rax, [rbp+other]
198F0:	mov     [rax+70h], edx
198F3:	jmp     loc_199B3
198F8:	mov     rax, [rbp+this]
198FC:	mov     rcx, [rax+38h]
19900:	mov     eax, [rbp+i]
19903:	movsxd  rdx, eax
19906:	mov     rax, rdx
19909:	shl     rax, 2
1990D:	add     rax, rdx
19910:	shl     rax, 4
19914:	add     rax, rcx
19917:	mov     byte ptr [rax+49h], 0
1991B:	mov     rax, [rbp+this]
1991F:	mov     eax, [rax+70h]
19922:	lea     edx, [rax-1]
19925:	mov     rax, [rbp+this]
19929:	mov     [rax+70h], edx
1992C:	jmp     loc_199B3
19931:	nop
19932:	jmp     short unhilight_both
19934:	nop
19935:	mov     rax, [rbp+this]
19939:	mov     rcx, [rax+38h]
1993D:	mov     eax, [rbp+i]
19940:	movsxd  rdx, eax
19943:	mov     rax, rdx
19946:	shl     rax, 2
1994A:	add     rax, rdx
1994D:	shl     rax, 4
19951:	add     rax, rcx
19954:	mov     byte ptr [rax+49h], 0
19958:	mov     rax, [rbp+this]
1995C:	mov     eax, [rax+70h]
1995F:	lea     edx, [rax-1]
19962:	mov     rax, [rbp+this]
19966:	mov     [rax+70h], edx
19969:	mov     rax, [rbp+other]
1996D:	mov     rcx, [rax+38h]
19971:	mov     eax, [rbp+j]
19974:	movsxd  rdx, eax
19977:	mov     rax, rdx
1997A:	shl     rax, 2
1997E:	add     rax, rdx
19981:	shl     rax, 4
19985:	add     rax, rcx
19988:	mov     byte ptr [rax+49h], 0
1998C:	mov     rax, [rbp+other]
19990:	mov     eax, [rax+70h]
19993:	lea     edx, [rax-1]
19996:	mov     rax, [rbp+other]
1999A:	mov     [rax+70h], edx
1999D:	jmp     short loc_199B3
1999F:	add     [rbp+j], 1
199A3:	mov     rax, [rbp+other]
199A7:	mov     eax, [rax+68h]
199AA:	cmp     [rbp+j], eax
199AD:	jl      loc_196EF
199B3:	add     [rbp+i], 1
199B7:	mov     rax, [rbp+this]
199BB:	mov     eax, [rax+68h]
199BE:	cmp     [rbp+i], eax
199C1:	jl      loc_196B8
199C7:	jmp     short done
199C9:	nop
199CA:	mov     eax, 0
199CF:	call    status_default
199D4:	mov     rax, [rbp+this]
199D8:	mov     rdi, rax; this
199DB:	call    panel_update
199E0:	mov     rax, [rbp+other]
199E4:	mov     rdi, rax; this
199E7:	call    panel_update
199EC:	mov     eax, 0
199F1:	call    tty_update
199F6:	mov     rax, [rbp+this]
199FA:	mov     eax, [rax+70h]
199FD:	test    eax, eax
199FF:	jnz     short loc_19A0C
19A01:	mov     rax, [rbp+other]
19A05:	mov     eax, [rax+70h]
19A08:	test    eax, eax
19A0A:	jz      short loc_19A16
19A0C:	mov     eax, 0
19A11:	call    tty_beep
19A16:	mov     rax, [rbp+var_8]
19A1A:	sub     rax, fs:28h
19A23:	jz      short locret_19A2A
19A25:	call    ___stack_chk_fail
19A2A:	leave
19A2B:	retn
19A2C:	endbr64
19A30:	push    rbp
19A31:	mov     rbp, rsp
19A34:	sub     rsp, 50h
19A38:	mov     [rbp+this], rdi
19A3C:	mov     [rbp+entry], esi
19A3F:	mov     [rbp+upcase], edx
19A42:	mov     [rbp+n], 0
19A49:	mov     [rbp+first_time], 1
19A50:	mov     rax, [rbp+this]
19A54:	mov     rcx, [rax+38h]
19A58:	mov     eax, [rbp+entry]
19A5B:	movsxd  rdx, eax
19A5E:	mov     rax, rdx
19A61:	shl     rax, 2
19A65:	add     rax, rdx
19A68:	shl     rax, 4
19A6C:	add     rax, rcx
19A6F:	mov     rax, [rax]
19A72:	mov     [rbp+name], rax
19A76:	mov     rax, [rbp+name]
19A7A:	mov     rdi, rax; string
19A7D:	call    xstrdup
19A82:	mov     [rbp+new_name], rax
19A86:	mov     rax, [rbp+name]
19A8A:	mov     rdi, rax; s
19A8D:	call    _strlen
19A92:	mov     [rbp+len], eax
19A95:	cmp     [rbp+upcase], 0
19A99:	jz      short loc_19ADD
19A9B:	mov     [rbp+n], 0
19AA2:	jmp     short loc_19AD3
19AA4:	mov     eax, [rbp+n]
19AA7:	movsxd  rdx, eax
19AAA:	mov     rax, [rbp+name]
19AAE:	add     rax, rdx
19AB1:	movzx   eax, byte ptr [rax]
19AB4:	movsx   eax, al
19AB7:	mov     edi, eax; c
19AB9:	call    _toupper
19ABE:	mov     edx, eax
19AC0:	mov     eax, [rbp+n]
19AC3:	movsxd  rcx, eax
19AC6:	mov     rax, [rbp+new_name]
19ACA:	add     rax, rcx
19ACD:	mov     [rax], dl
19ACF:	add     [rbp+n], 1
19AD3:	mov     eax, [rbp+n]
19AD6:	cmp     eax, [rbp+len]
19AD9:	jl      short loc_19AA4
19ADB:	jmp     short loc_19B1D
19ADD:	mov     [rbp+n], 0
19AE4:	jmp     short loc_19B15
19AE6:	mov     eax, [rbp+n]
19AE9:	movsxd  rdx, eax
19AEC:	mov     rax, [rbp+name]
19AF0:	add     rax, rdx
19AF3:	movzx   eax, byte ptr [rax]
19AF6:	movsx   eax, al
19AF9:	mov     edi, eax; c
19AFB:	call    _tolower
19B00:	mov     edx, eax
19B02:	mov     eax, [rbp+n]
19B05:	movsxd  rcx, eax
19B08:	mov     rax, [rbp+new_name]
19B0C:	add     rax, rcx
19B0F:	mov     [rax], dl
19B11:	add     [rbp+n], 1
19B15:	mov     eax, [rbp+n]
19B18:	cmp     eax, [rbp+len]
19B1B:	jl      short loc_19AE6
19B1D:	mov     rdx, [rbp+new_name]
19B21:	mov     rax, [rbp+name]
19B25:	mov     rsi, rdx; s2
19B28:	mov     rdi, rax; s1
19B2B:	call    _strcmp
19B30:	test    eax, eax
19B32:	jz      loc_19DE0
19B38:	mov     eax, [rbp+len]
19B3B:	add     eax, 21h ; '!'
19B3E:	cdqe
19B40:	mov     rdi, rax; n
19B43:	call    xmalloc
19B48:	mov     [rbp+msg], rax
19B4C:	mov     rdx, [rbp+name]
19B50:	mov     rax, [rbp+msg]
19B54:	lea     rcx, aCaseRenamingS; '(CASE) Renaming %s'
19B5B:	mov     rsi, rcx; format
19B5E:	mov     rdi, rax; s
19B61:	mov     eax, 0
19B66:	call    _sprintf
19B6B:	mov     rax, [rbp+msg]
19B6F:	mov     edx, 1; alignment
19B74:	mov     esi, 1; type
19B79:	mov     rdi, rax; message
19B7C:	call    status
19B81:	mov     eax, 0
19B86:	call    tty_update
19B8B:	mov     rax, [rbp+msg]
19B8F:	mov     rdi, rax; pointer
19B92:	call    xfree
19B97:	mov     rax, [rbp+this]
19B9B:	mov     rcx, [rax+38h]
19B9F:	mov     eax, [rbp+entry]
19BA2:	movsxd  rdx, eax
19BA5:	mov     rax, rdx
19BA8:	shl     rax, 2
19BAC:	add     rax, rdx
19BAF:	shl     rax, 4
19BB3:	add     rax, rcx
19BB6:	movzx   eax, byte ptr [rax+48h]
19BBA:	test    al, al
19BBC:	jnz     loc_19CFF
19BC2:	mov     rax, [rbp+new_name]
19BC6:	mov     esi, 0; type
19BCB:	mov     rdi, rax; name
19BCE:	call    _access
19BD3:	test    eax, eax
19BD5:	jnz     loc_19CDA
19BDB:	mov     rax, [rbp+this]
19BDF:	mov     eax, [rax+90h]
19BE5:	cmp     eax, 1
19BE8:	jnz     short loc_19C07
19BEA:	mov     rdx, [rbp+new_name]
19BEE:	mov     rax, [rbp+this]
19BF2:	mov     rsi, rdx; file
19BF5:	mov     rdi, rax; this
19BF8:	mov     eax, 0
19BFD:	call    panel_warning
19C02:	mov     [rbp+error], eax
19C05:	jmp     short loc_19C0E
19C07:	mov     [rbp+error], 0
19C0E:	cmp     [rbp+error], 0
19C12:	jz      short loc_19C1C
19C14:	mov     eax, [rbp+error]
19C17:	jmp     locret_19E23
19C1C:	mov     rax, [rbp+new_name]
19C20:	mov     rdi, rax; s
19C23:	call    _strlen
19C28:	add     rax, 21h ; '!'
19C2C:	mov     rdi, rax; n
19C2F:	call    xmalloc
19C34:	mov     [rbp+command], rax
19C38:	mov     rdx, [rbp+new_name]
19C3C:	mov     rax, [rbp+command]
19C40:	lea     rcx, aRmRFS; 'rm -r -f '%s''
19C47:	mov     rsi, rcx; format
19C4A:	mov     rdi, rax; s
19C4D:	mov     eax, 0
19C52:	call    _sprintf
19C57:	mov     rax, [rbp+command]
19C5B:	mov     esi, 1; hide
19C60:	mov     rdi, rax; command
19C63:	call    start
19C68:	mov     [rbp+result], eax
19C6B:	mov     rax, [rbp+command]
19C6F:	mov     rdi, rax; pointer
19C72:	call    xfree
19C77:	mov     rax, [rbp+this]
19C7B:	mov     rax, [rax+18h]
19C7F:	mov     rdi, rax; string
19C82:	call    tty_update_title
19C87:	mov     eax, [rbp+result]
19C8A:	and     eax, 7Fh
19C8D:	add     eax, 1
19C90:	sar     al, 1
19C92:	test    al, al
19C94:	jle     short loc_19CA0
19C96:	mov     eax, 7
19C9B:	jmp     locret_19E23
19CA0:	mov     eax, [rbp+result]
19CA3:	and     eax, 7Fh
19CA6:	test    eax, eax
19CA8:	jnz     short loc_19CD0
19CAA:	mov     eax, [rbp+result]
19CAD:	sar     eax, 8
19CB0:	movzx   eax, al
19CB3:	test    eax, eax
19CB5:	jz      short loc_19CDA
19CB7:	lea     rax, aRm; 'rm'
19CBE:	mov     rdi, rax; command
19CC1:	call    display_errors
19CC6:	mov     eax, 5
19CCB:	jmp     locret_19E23
19CD0:	mov     eax, 5
19CD5:	jmp     locret_19E23
19CDA:	mov     rdx, [rbp+new_name]
19CDE:	mov     rax, [rbp+name]
19CE2:	mov     rsi, rdx; new
19CE5:	mov     rdi, rax; old
19CE8:	call    _rename
19CED:	test    eax, eax
19CEF:	jz      loc_19DE3
19CF5:	mov     eax, 6
19CFA:	jmp     locret_19E23
19CFF:	nop
19D00:	mov     rdx, [rbp+new_name]
19D04:	mov     rax, [rbp+name]
19D08:	mov     rsi, rdx; to
19D0B:	mov     rdi, rax; from
19D0E:	call    _link
19D13:	test    eax, eax
19D15:	jnz     short loc_19D35
19D17:	mov     rax, [rbp+name]
19D1B:	mov     rdi, rax; name
19D1E:	call    _unlink
19D23:	test    eax, eax
19D25:	jz      loc_19DE6
19D2B:	mov     eax, 4
19D30:	jmp     locret_19E23
19D35:	call    ___errno_location
19D3A:	mov     eax, [rax]
19D3C:	mov     [rbp+safe_errno], eax
19D3F:	mov     eax, 0
19D44:	call    status_default
19D49:	mov     eax, 0
19D4E:	call    tty_update
19D53:	cmp     [rbp+safe_errno], 1
19D57:	jz      short loc_19D5F
19D59:	cmp     [rbp+safe_errno], 0Dh
19D5D:	jnz     short loc_19D69
19D5F:	mov     eax, 6
19D64:	jmp     locret_19E23
19D69:	cmp     [rbp+first_time], 0
19D6D:	jnz     short loc_19D79
19D6F:	mov     eax, 6
19D74:	jmp     locret_19E23
19D79:	mov     rax, [rbp+this]
19D7D:	mov     eax, [rax+90h]
19D83:	cmp     eax, 1
19D86:	jnz     short loc_19DA5
19D88:	mov     rdx, [rbp+new_name]
19D8C:	mov     rax, [rbp+this]
19D90:	mov     rsi, rdx; file
19D93:	mov     rdi, rax; this
19D96:	mov     eax, 0
19D9B:	call    panel_warning
19DA0:	mov     [rbp+error], eax
19DA3:	jmp     short loc_19DAC
19DA5:	mov     [rbp+error], 0
19DAC:	cmp     [rbp+error], 0
19DB0:	jz      short loc_19DB7
19DB2:	mov     eax, [rbp+error]
19DB5:	jmp     short locret_19E23
19DB7:	mov     rax, [rbp+new_name]
19DBB:	mov     rdi, rax; name
19DBE:	call    _unlink
19DC3:	test    eax, eax
19DC5:	jz      short loc_19DCE
19DC7:	mov     eax, 5
19DCC:	jmp     short locret_19E23
19DCE:	cmp     [rbp+first_time], 0
19DD2:	jz      short loc_19DE9
19DD4:	mov     [rbp+first_time], 0
19DDB:	jmp     retry
19DE0:	nop
19DE1:	jmp     short done
19DE3:	nop
19DE4:	jmp     short done
19DE6:	nop
19DE7:	jmp     short done
19DE9:	nop
19DEA:	mov     rax, [rbp+this]
19DEE:	mov     rcx, [rax+38h]
19DF2:	mov     eax, [rbp+entry]
19DF5:	movsxd  rdx, eax
19DF8:	mov     rax, rdx
19DFB:	shl     rax, 2
19DFF:	add     rax, rdx
19E02:	shl     rax, 4
19E06:	add     rax, rcx
19E09:	mov     byte ptr [rax+49h], 0
19E0D:	mov     rax, [rbp+this]
19E11:	mov     eax, [rax+70h]
19E14:	lea     edx, [rax-1]
19E17:	mov     rax, [rbp+this]
19E1B:	mov     [rax+70h], edx
19E1E:	mov     eax, 1
19E23:	leave
19E24:	retn
19E25:	endbr64
19E29:	push    rbp
19E2A:	mov     rbp, rsp
19E2D:	sub     rsp, 30h
19E31:	mov     [rbp+this], rdi
19E35:	mov     [rbp+other], rsi
19E39:	mov     [rbp+upcase], edx
19E3C:	mov     rax, cs:panel_il_message+58h
19E43:	mov     rdi, rax; message
19E46:	call    il_message
19E4B:	mov     eax, 0
19E50:	call    tty_update
19E55:	mov     rax, [rbp+this]
19E59:	mov     dword ptr [rax+90h], 1
19E63:	mov     rax, [rbp+this]
19E67:	mov     rdi, rax; this
19E6A:	call    panel_init_iterator
19E6F:	jmp     loc_19F51
19E74:	mov     eax, 0
19E79:	call    service_pending_signals
19E7E:	mov     edx, [rbp+upcase]; upcase
19E81:	mov     ecx, [rbp+entry]
19E84:	mov     rax, [rbp+this]
19E88:	mov     esi, ecx; entry
19E8A:	mov     rdi, rax; this
19E8D:	mov     eax, 0
19E92:	call    panel_case_rename
19E97:	mov     [rbp+error], eax
19E9A:	cmp     [rbp+error], 1
19E9E:	jz      loc_19F2E
19EA4:	cmp     [rbp+error], 2
19EA8:	jz      loc_19F6C
19EAE:	cmp     [rbp+error], 3
19EB2:	jnz     short loc_19EB9
19EB4:	jmp     loc_19F51
19EB9:	cmp     [rbp+error], 1
19EBD:	jz      loc_19F51
19EC3:	cmp     [rbp+error], 2
19EC7:	jz      loc_19F51
19ECD:	mov     eax, [rbp+error]
19ED0:	sub     eax, 1
19ED3:	cdqe
19ED5:	lea     rdx, ds:0[rax*8]
19EDD:	lea     rax, renerr
19EE4:	mov     rdx, [rdx+rax]; string2
19EE8:	mov     rax, [rbp+this]
19EEC:	mov     rsi, [rax+38h]
19EF0:	mov     eax, [rbp+entry]
19EF3:	movsxd  rcx, eax
19EF6:	mov     rax, rcx
19EF9:	shl     rax, 2
19EFD:	add     rax, rcx
19F00:	shl     rax, 4
19F04:	add     rax, rsi
19F07:	mov     rax, [rax]
19F0A:	mov     r8d, 1Eh; flags
19F10:	mov     ecx, 0; options
19F15:	mov     rsi, rax; string1
19F18:	lea     rax, aSRenameFailedS; '%s: Rename failed, %s.'
19F1F:	mov     rdi, rax; format
19F22:	mov     eax, 0
19F27:	call    panel_3s_message
19F2C:	jmp     short loc_19F51
19F2E:	mov     rax, [rbp+this]
19F32:	mov     rcx, [rax+38h]
19F36:	mov     eax, [rbp+entry]
19F39:	movsxd  rdx, eax
19F3C:	mov     rax, rdx
19F3F:	shl     rax, 2
19F43:	add     rax, rdx
19F46:	shl     rax, 4
19F4A:	add     rax, rcx
19F4D:	mov     byte ptr [rax+49h], 0
19F51:	mov     rax, [rbp+this]
19F55:	mov     rdi, rax; this
19F58:	call    panel_get_next
19F5D:	mov     [rbp+entry], eax
19F60:	cmp     [rbp+entry], 0FFFFFFFFh
19F64:	jnz     loc_19E74
19F6A:	jmp     short loc_19F6D
19F6C:	nop
19F6D:	mov     eax, 0
19F72:	call    status_default
19F77:	mov     eax, 0
19F7C:	call    tty_update
19F81:	mov     rax, [rbp+this]
19F85:	mov     r8d, 1; repeat_count
19F8B:	mov     ecx, 0; aux_info
19F90:	mov     edx, 0; other
19F95:	mov     esi, 22h ; '''; action
19F9A:	mov     rdi, rax; this
19F9D:	call    panel_action
19FA2:	mov     rax, [rbp+this]
19FA6:	mov     rdi, rax; this
19FA9:	call    panel_update
19FAE:	mov     rax, [rbp+other]
19FB2:	mov     rdx, [rax+18h]
19FB6:	mov     rax, [rbp+this]
19FBA:	mov     rax, [rax+18h]
19FBE:	mov     rsi, rdx; s2
19FC1:	mov     rdi, rax; s1
19FC4:	call    _strcmp
19FC9:	test    eax, eax
19FCB:	jnz     short loc_19FFA
19FCD:	mov     rax, [rbp+other]
19FD1:	mov     r8d, 1; repeat_count
19FD7:	mov     ecx, 0; aux_info
19FDC:	mov     edx, 0; other
19FE1:	mov     esi, 22h ; '''; action
19FE6:	mov     rdi, rax; this
19FE9:	call    panel_action
19FEE:	mov     rax, [rbp+other]
19FF2:	mov     rdi, rax; this
19FF5:	call    panel_update
19FFA:	nop
19FFB:	leave
19FFC:	retn
19FFD:	endbr64
1A001:	push    rbp
1A002:	mov     rbp, rsp
1A005:	mov     [rbp+first], rdi
1A009:	mov     [rbp+second], rsi
1A00D:	mov     rax, [rbp+second]
1A011:	mov     rax, [rax]
1A014:	mov     rax, [rax+8]
1A018:	mov     edx, eax
1A01A:	mov     rax, [rbp+first]
1A01E:	mov     rax, [rax]
1A021:	mov     rax, [rax+8]
1A025:	mov     ecx, eax
1A027:	mov     eax, edx
1A029:	sub     eax, ecx
1A02B:	pop     rbp
1A02C:	retn
1A02D:	endbr64
1A031:	push    rbp
1A032:	mov     rbp, rsp
1A035:	sub     rsp, 150h
1A03C:	mov     [rbp+this], rdi
1A043:	mov     [rbp+other], rsi
1A04A:	mov     [rbp+bin_size], rdx
1A051:	mov     rax, fs:28h
1A05A:	mov     [rbp+var_8], rax
1A05E:	xor     eax, eax
1A060:	mov     [rbp+bins], 0
1A06B:	lea     rax, aBinPacking; 'BIN PACKING'
1A072:	mov     [rbp+fn], rax
1A079:	mov     [rbp+max_bins], 0
1A083:	mov     [rbp+used_bins], 0
1A08D:	mov     [rbp+candidates], 0
1A097:	mov     [rbp+big_files], 0
1A0A1:	cmp     [rbp+bin_size], 0
1A0A9:	jnz     short loc_1A123
1A0AB:	mov     [rbp+fsu.fsu_blocks], 0FFFFFFFFFFFFFFFFh
1A0B6:	mov     rax, [rbp+other]
1A0BD:	mov     rax, [rax+18h]
1A0C1:	lea     rdx, [rbp+fsu]; fsp
1A0C8:	mov     esi, 0; disk
1A0CD:	mov     rdi, rax; file
1A0D0:	call    get_fs_usage
1A0D5:	test    eax, eax
1A0D7:	js      short loc_1A123
1A0D9:	mov     rax, [rbp+fsu.fsu_blocks]
1A0E0:	cmp     rax, 0FFFFFFFFFFFFFFFFh
1A0E4:	jz      short loc_1A123
1A0E6:	call    _geteuid
1A0EB:	test    eax, eax
1A0ED:	jnz     short loc_1A0F8
1A0EF:	mov     rax, [rbp+fsu.fsu_bfree]
1A0F6:	jmp     short loc_1A0FF
1A0F8:	mov     rax, [rbp+fsu.fsu_bavail]
1A0FF:	mov     [rbp+free_blocks], rax
1A106:	mov     rdx, [rbp+fsu.fsu_blocksize]
1A10D:	mov     rax, [rbp+free_blocks]
1A114:	imul    rax, rdx
1A118:	shr     rax, 0Ah
1A11C:	mov     [rbp+bin_size], rax
1A123:	mov     rax, [rbp+this]
1A12A:	mov     rdi, rax; this
1A12D:	call    panel_unselect_all
1A132:	mov     rax, [rbp+this]
1A139:	mov     eax, [rax+68h]
1A13C:	cdqe
1A13E:	shl     rax, 3
1A142:	mov     rdi, rax; n
1A145:	call    xmalloc
1A14A:	mov     [rbp+buffer], rax
1A151:	mov     [rbp+entry], 0
1A15B:	jmp     loc_1A292
1A160:	mov     rax, [rbp+this]
1A167:	mov     rcx, [rax+38h]
1A16B:	mov     eax, [rbp+entry]
1A171:	movsxd  rdx, eax
1A174:	mov     rax, rdx
1A177:	shl     rax, 2
1A17B:	add     rax, rdx
1A17E:	shl     rax, 4
1A182:	add     rax, rcx
1A185:	mov     eax, [rax+10h]
1A188:	and     eax, 0F000h
1A18D:	cmp     eax, 8000h
1A192:	jnz     loc_1A28B
1A198:	mov     rax, [rbp+this]
1A19F:	mov     rcx, [rax+38h]
1A1A3:	mov     eax, [rbp+entry]
1A1A9:	movsxd  rdx, eax
1A1AC:	mov     rax, rdx
1A1AF:	shl     rax, 2
1A1B3:	add     rax, rdx
1A1B6:	shl     rax, 4
1A1BA:	add     rax, rcx
1A1BD:	mov     rax, [rax+8]
1A1C1:	mov     [rbp+file_size], rax
1A1C8:	mov     rax, [rbp+file_size]
1A1CF:	and     eax, 3FFh
1A1D4:	test    rax, rax
1A1D7:	jz      short loc_1A203
1A1D9:	mov     rax, [rbp+file_size]
1A1E0:	cqo
1A1E2:	shr     rdx, 36h
1A1E6:	add     rax, rdx
1A1E9:	and     eax, 3FFh
1A1EE:	sub     rax, rdx
1A1F1:	mov     rdx, rax
1A1F4:	mov     eax, 400h
1A1F9:	sub     rax, rdx
1A1FC:	add     [rbp+file_size], rax
1A203:	mov     rax, [rbp+file_size]
1A20A:	lea     rdx, [rax+3FFh]
1A211:	test    rax, rax
1A214:	cmovs   rax, rdx
1A218:	sar     rax, 0Ah
1A21C:	mov     [rbp+file_size], rax
1A223:	mov     rax, [rbp+file_size]
1A22A:	cmp     rax, [rbp+bin_size]
1A231:	jg      short loc_1A284
1A233:	mov     rax, [rbp+this]
1A23A:	mov     rcx, [rax+38h]
1A23E:	mov     eax, [rbp+entry]
1A244:	movsxd  rdx, eax
1A247:	mov     rax, rdx
1A24A:	shl     rax, 2
1A24E:	add     rax, rdx
1A251:	shl     rax, 4
1A255:	mov     rsi, rax
1A258:	mov     eax, [rbp+candidates]
1A25E:	lea     edx, [rax+1]
1A261:	mov     [rbp+candidates], edx
1A267:	cdqe
1A269:	lea     rdx, ds:0[rax*8]
1A271:	mov     rax, [rbp+buffer]
1A278:	add     rax, rdx
1A27B:	lea     rdx, [rcx+rsi]
1A27F:	mov     [rax], rdx
1A282:	jmp     short loc_1A28B
1A284:	add     [rbp+big_files], 1
1A28B:	add     [rbp+entry], 1
1A292:	mov     rax, [rbp+this]
1A299:	mov     eax, [rax+68h]
1A29C:	cmp     [rbp+entry], eax
1A2A2:	jl      loc_1A160
1A2A8:	mov     eax, [rbp+candidates]
1A2AE:	movsxd  rsi, eax; nmemb
1A2B1:	mov     rax, [rbp+buffer]
1A2B8:	lea     rdx, pack_compare_fn
1A2BF:	mov     rcx, rdx; compar
1A2C2:	mov     edx, 8; size
1A2C7:	mov     rdi, rax; base
1A2CA:	call    _qsort
1A2CF:	mov     [rbp+entry], 0
1A2D9:	jmp     loc_1A507
1A2DE:	mov     eax, [rbp+entry]
1A2E4:	cdqe
1A2E6:	lea     rdx, ds:0[rax*8]
1A2EE:	mov     rax, [rbp+buffer]
1A2F5:	add     rax, rdx
1A2F8:	mov     rax, [rax]
1A2FB:	mov     rax, [rax+8]
1A2FF:	mov     [rbp+file_size], rax
1A306:	mov     rax, [rbp+file_size]
1A30D:	and     eax, 3FFh
1A312:	test    rax, rax
1A315:	jz      short loc_1A341
1A317:	mov     rax, [rbp+file_size]
1A31E:	cqo
1A320:	shr     rdx, 36h
1A324:	add     rax, rdx
1A327:	and     eax, 3FFh
1A32C:	sub     rax, rdx
1A32F:	mov     rdx, rax
1A332:	mov     eax, 400h
1A337:	sub     rax, rdx
1A33A:	add     [rbp+file_size], rax
1A341:	mov     rax, [rbp+file_size]
1A348:	lea     rdx, [rax+3FFh]
1A34F:	test    rax, rax
1A352:	cmovs   rax, rdx
1A356:	sar     rax, 0Ah
1A35A:	mov     [rbp+file_size], rax
1A361:	mov     [rbp+current_bin], 0
1A36B:	jmp     loc_1A426
1A370:	mov     eax, [rbp+current_bin]
1A376:	cdqe
1A378:	lea     rdx, ds:0[rax*8]
1A380:	mov     rax, [rbp+bins]
1A387:	add     rax, rdx
1A38A:	mov     rax, [rax]
1A38D:	cmp     [rbp+file_size], rax
1A394:	jg      loc_1A41F
1A39A:	mov     eax, [rbp+current_bin]
1A3A0:	cdqe
1A3A2:	lea     rdx, ds:0[rax*8]
1A3AA:	mov     rax, [rbp+bins]
1A3B1:	add     rax, rdx
1A3B4:	mov     rax, [rax]
1A3B7:	mov     edx, [rbp+current_bin]
1A3BD:	movsxd  rdx, edx
1A3C0:	lea     rcx, ds:0[rdx*8]
1A3C8:	mov     rdx, [rbp+bins]
1A3CF:	add     rdx, rcx
1A3D2:	sub     rax, [rbp+file_size]
1A3D9:	mov     [rdx], rax
1A3DC:	cmp     [rbp+current_bin], 0
1A3E3:	jnz     short loc_1A43A
1A3E5:	mov     eax, [rbp+entry]
1A3EB:	cdqe
1A3ED:	lea     rdx, ds:0[rax*8]
1A3F5:	mov     rax, [rbp+buffer]
1A3FC:	add     rax, rdx
1A3FF:	mov     rax, [rax]
1A402:	mov     byte ptr [rax+49h], 1
1A406:	mov     rax, [rbp+this]
1A40D:	mov     eax, [rax+70h]
1A410:	lea     edx, [rax+1]
1A413:	mov     rax, [rbp+this]
1A41A:	mov     [rax+70h], edx
1A41D:	jmp     short loc_1A43A
1A41F:	add     [rbp+current_bin], 1
1A426:	mov     eax, [rbp+current_bin]
1A42C:	cmp     eax, [rbp+used_bins]
1A432:	jl      loc_1A370
1A438:	jmp     short loc_1A43B
1A43A:	nop
1A43B:	mov     eax, [rbp+current_bin]
1A441:	cmp     eax, [rbp+used_bins]
1A447:	jnz     loc_1A500
1A44D:	mov     eax, [rbp+used_bins]
1A453:	cmp     eax, [rbp+max_bins]
1A459:	jnz     short loc_1A48B
1A45B:	add     [rbp+max_bins], 10h
1A462:	mov     eax, [rbp+max_bins]
1A468:	cdqe
1A46A:	lea     rdx, ds:0[rax*8]
1A472:	mov     rax, [rbp+bins]
1A479:	mov     rsi, rdx; n
1A47C:	mov     rdi, rax; p
1A47F:	call    xrealloc
1A484:	mov     [rbp+bins], rax
1A48B:	mov     eax, [rbp+used_bins]
1A491:	lea     edx, [rax+1]
1A494:	mov     [rbp+used_bins], edx
1A49A:	cdqe
1A49C:	lea     rdx, ds:0[rax*8]
1A4A4:	mov     rax, [rbp+bins]
1A4AB:	add     rdx, rax
1A4AE:	mov     rax, [rbp+bin_size]
1A4B5:	sub     rax, [rbp+file_size]
1A4BC:	mov     [rdx], rax
1A4BF:	cmp     [rbp+current_bin], 0
1A4C6:	jnz     short loc_1A500
1A4C8:	mov     eax, [rbp+entry]
1A4CE:	cdqe
1A4D0:	lea     rdx, ds:0[rax*8]
1A4D8:	mov     rax, [rbp+buffer]
1A4DF:	add     rax, rdx
1A4E2:	mov     rax, [rax]
1A4E5:	mov     byte ptr [rax+49h], 1
1A4E9:	mov     rax, [rbp+this]
1A4F0:	mov     eax, [rax+70h]
1A4F3:	lea     edx, [rax+1]
1A4F6:	mov     rax, [rbp+this]
1A4FD:	mov     [rax+70h], edx
1A500:	add     [rbp+entry], 1
1A507:	mov     eax, [rbp+entry]
1A50D:	cmp     eax, [rbp+candidates]
1A513:	jl      loc_1A2DE
1A519:	mov     rax, [rbp+this]
1A520:	mov     rdi, rax; this
1A523:	call    panel_update
1A528:	cmp     [rbp+bins], 0
1A530:	jz      short loc_1A541
1A532:	mov     rax, [rbp+bins]
1A539:	mov     rdi, rax; pointer
1A53C:	call    xfree
1A541:	mov     rax, [rbp+buffer]
1A548:	mov     rdi, rax; pointer
1A54B:	call    xfree
1A550:	cmp     [rbp+candidates], 0
1A557:	jle     loc_1A5E5
1A55D:	cmp     [rbp+big_files], 0
1A564:	jle     short loc_1A5B2
1A566:	mov     edi, [rbp+used_bins]
1A56C:	mov     ecx, [rbp+candidates]
1A572:	mov     rdx, [rbp+fn]
1A579:	lea     rax, [rbp+msg]
1A580:	sub     rsp, 8
1A584:	mov     esi, [rbp+big_files]
1A58A:	push    rsi
1A58B:	mov     r9d, edi
1A58E:	lea     r8, aYouNeedApproxi; 'You need approximately'
1A595:	lea     rsi, aSDFileSSDBinSD; '%s %d file(s): %s %d bin(s).  %d file(s'...
1A59C:	mov     rdi, rax; s
1A59F:	mov     eax, 0
1A5A4:	call    _sprintf
1A5A9:	add     rsp, 10h
1A5AD:	jmp     loc_1A63E
1A5B2:	mov     esi, [rbp+used_bins]
1A5B8:	mov     ecx, [rbp+candidates]
1A5BE:	mov     rdx, [rbp+fn]
1A5C5:	lea     rax, [rbp+msg]
1A5CC:	mov     r8d, esi
1A5CF:	lea     rsi, aSDFileSYouNeed; '%s %d file(s): You need approximately %'...
1A5D6:	mov     rdi, rax; s
1A5D9:	mov     eax, 0
1A5DE:	call    _sprintf
1A5E3:	jmp     short loc_1A63E
1A5E5:	cmp     [rbp+big_files], 0
1A5EC:	jle     short loc_1A619
1A5EE:	mov     rcx, [rbp+bin_size]
1A5F5:	mov     rdx, [rbp+fn]
1A5FC:	lea     rax, [rbp+msg]
1A603:	lea     rsi, aSNoSuitableFil; '%s: No suitable files found (smaller th'...
1A60A:	mov     rdi, rax; s
1A60D:	mov     eax, 0
1A612:	call    _sprintf
1A617:	jmp     short loc_1A63E
1A619:	mov     rdx, [rbp+fn]
1A620:	lea     rax, [rbp+msg]
1A627:	lea     rcx, aSNoRegularFile; '%s: No regular files found.'
1A62E:	mov     rsi, rcx; format
1A631:	mov     rdi, rax; s
1A634:	mov     eax, 0
1A639:	call    _sprintf
1A63E:	lea     rax, [rbp+msg]
1A645:	mov     edx, 36h ; '6'; flags
1A64A:	mov     esi, 0; options
1A64F:	mov     rdi, rax; message
1A652:	call    il_read_char
1A657:	nop
1A658:	mov     rax, [rbp+var_8]
1A65C:	sub     rax, fs:28h
1A665:	jz      short locret_1A66C
1A667:	call    ___stack_chk_fail
1A66C:	leave
1A66D:	retn
1A66E:	endbr64
1A672:	push    rbp
1A673:	mov     rbp, rsp
1A676:	push    rbx
1A677:	sub     rsp, 38h
1A67B:	mov     [rbp+string], rdi
1A67F:	mov     [rbp+i], 0
1A686:	mov     [rbp+index], 0
1A68D:	mov     [rbp+escaping], 0
1A694:	mov     rax, [rbp+string]
1A698:	mov     rdi, rax; s
1A69B:	call    _strlen
1A6A0:	add     rax, 1
1A6A4:	mov     rdi, rax; n
1A6A7:	call    xmalloc
1A6AC:	mov     [rbp+pattern], rax
1A6B0:	mov     esi, 8; s
1A6B5:	mov     edi, 2; n
1A6BA:	call    xcalloc
1A6BF:	mov     [rbp+patterns], rax
1A6C3:	mov     rax, [rbp+string]
1A6C7:	lea     rdx, [rax+1]
1A6CB:	mov     [rbp+string], rdx
1A6CF:	movzx   eax, byte ptr [rax]
1A6D2:	mov     [rbp+c], al
1A6D5:	movsx   eax, [rbp+c]
1A6D9:	cmp     eax, 5Ch ; ''
1A6DC:	jz      loc_1A7C7
1A6E2:	cmp     eax, 5Ch ; ''
1A6E5:	jg      loc_1A7F5
1A6EB:	cmp     eax, 20h ; ' '
1A6EE:	jz      short loc_1A706
1A6F0:	cmp     eax, 20h ; ' '
1A6F3:	jg      loc_1A7F5
1A6F9:	test    eax, eax
1A6FB:	jz      short loc_1A706
1A6FD:	cmp     eax, 9
1A700:	jnz     loc_1A7F5
1A706:	cmp     [rbp+escaping], 0
1A70A:	jz      short loc_1A730
1A70C:	cmp     [rbp+c], 0
1A710:	jz      short loc_1A730
1A712:	mov     eax, [rbp+i]
1A715:	lea     edx, [rax+1]
1A718:	mov     [rbp+i], edx
1A71B:	movsxd  rdx, eax
1A71E:	mov     rax, [rbp+pattern]
1A722:	add     rdx, rax
1A725:	movzx   eax, [rbp+c]
1A729:	mov     [rdx], al
1A72B:	jmp     loc_1A832
1A730:	cmp     [rbp+i], 0
1A734:	jle     short loc_1A791
1A736:	mov     eax, [rbp+i]
1A739:	lea     edx, [rax+1]
1A73C:	mov     [rbp+i], edx
1A73F:	movsxd  rdx, eax
1A742:	mov     rax, [rbp+pattern]
1A746:	add     rax, rdx
1A749:	mov     byte ptr [rax], 0
1A74C:	mov     eax, [rbp+index]
1A74F:	lea     edx, [rax+1]
1A752:	mov     [rbp+index], edx
1A755:	cdqe
1A757:	lea     rdx, ds:0[rax*8]
1A75F:	mov     rax, [rbp+patterns]
1A763:	lea     rbx, [rdx+rax]
1A767:	mov     rax, [rbp+pattern]
1A76B:	mov     rdi, rax; string
1A76E:	call    xstrdup
1A773:	mov     [rbx], rax
1A776:	mov     eax, [rbp+index]
1A779:	cdqe
1A77B:	lea     rdx, ds:0[rax*8]
1A783:	mov     rax, [rbp+patterns]
1A787:	add     rax, rdx
1A78A:	mov     qword ptr [rax], 0
1A791:	cmp     [rbp+c], 0
1A795:	jz      loc_1A837
1A79B:	mov     eax, [rbp+index]
1A79E:	add     eax, 2
1A7A1:	cdqe
1A7A3:	lea     rdx, ds:0[rax*8]
1A7AB:	mov     rax, [rbp+patterns]
1A7AF:	mov     rsi, rdx; n
1A7B2:	mov     rdi, rax; p
1A7B5:	call    xrealloc
1A7BA:	mov     [rbp+patterns], rax
1A7BE:	mov     [rbp+i], 0
1A7C5:	jmp     short loc_1A832
1A7C7:	cmp     [rbp+escaping], 0
1A7CB:	jz      short loc_1A7E6
1A7CD:	mov     eax, [rbp+i]
1A7D0:	lea     edx, [rax+1]
1A7D3:	mov     [rbp+i], edx
1A7D6:	movsxd  rdx, eax
1A7D9:	mov     rax, [rbp+pattern]
1A7DD:	add     rdx, rax
1A7E0:	movzx   eax, [rbp+c]
1A7E4:	mov     [rdx], al
1A7E6:	cmp     [rbp+escaping], 0
1A7EA:	setz    al
1A7ED:	movzx   eax, al
1A7F0:	mov     [rbp+escaping], eax
1A7F3:	jmp     short loc_1A832
1A7F5:	cmp     [rbp+escaping], 0
1A7F9:	jz      short loc_1A811
1A7FB:	mov     eax, [rbp+i]
1A7FE:	lea     edx, [rax+1]
1A801:	mov     [rbp+i], edx
1A804:	movsxd  rdx, eax
1A807:	mov     rax, [rbp+pattern]
1A80B:	add     rax, rdx
1A80E:	mov     byte ptr [rax], 5Ch ; ''
1A811:	mov     eax, [rbp+i]
1A814:	lea     edx, [rax+1]
1A817:	mov     [rbp+i], edx
1A81A:	movsxd  rdx, eax
1A81D:	mov     rax, [rbp+pattern]
1A821:	add     rdx, rax
1A824:	movzx   eax, [rbp+c]
1A828:	mov     [rdx], al
1A82A:	mov     [rbp+escaping], 0
1A831:	nop
1A832:	jmp     loc_1A6C3
1A837:	nop
1A838:	mov     rax, [rbp+pattern]
1A83C:	mov     rdi, rax; pointer
1A83F:	call    xfree
1A844:	mov     rax, [rbp+patterns]
1A848:	mov     rbx, [rbp+var_8]
1A84C:	leave
1A84D:	retn
1A84E:	endbr64
1A852:	push    rbp
1A853:	mov     rbp, rsp
1A856:	sub     rsp, 20h
1A85A:	mov     [rbp+patterns], rdi
1A85E:	mov     rax, [rbp+patterns]
1A862:	mov     [rbp+safe_patterns], rax
1A866:	jmp     short loc_1A87F
1A868:	mov     rax, [rbp+patterns]
1A86C:	lea     rdx, [rax+8]
1A870:	mov     [rbp+patterns], rdx
1A874:	mov     rax, [rax]
1A877:	mov     rdi, rax; pointer
1A87A:	call    xfree
1A87F:	mov     rax, [rbp+patterns]
1A883:	mov     rax, [rax]
1A886:	test    rax, rax
1A889:	jnz     short loc_1A868
1A88B:	mov     rax, [rbp+safe_patterns]
1A88F:	mov     rdi, rax; pointer
1A892:	call    xfree
1A897:	nop
1A898:	leave
1A899:	retn
1A89A:	endbr64
1A89E:	push    rbp
1A89F:	mov     rbp, rsp
1A8A2:	push    r12
1A8A4:	push    rbx
1A8A5:	sub     rsp, 0B0h
1A8AC:	mov     [rbp+this], rdi
1A8B3:	mov     [rbp+action], esi
1A8B9:	mov     [rbp+other], rdx
1A8C0:	mov     [rbp+aux_info], rcx
1A8C7:	mov     [rbp+repeat_count], r8d
1A8CE:	mov     rax, fs:28h
1A8D7:	mov     [rbp+var_18], rax
1A8DB:	xor     eax, eax
1A8DD:	cmp     [rbp+action], 33h; switch 52 cases
1A8E4:	ja      def_1A90E; jumptable 000000000001A90E default case, case 0
1A8EA:	mov     eax, [rbp+action]
1A8F0:	lea     rdx, ds:0[rax*4]
1A8F8:	lea     rax, jpt_1A90E
1A8FF:	mov     eax, ds:(jpt_1A90E - 28E48h)[rdx+rax]
1A902:	cdqe
1A904:	lea     rdx, jpt_1A90E
1A90B:	add     rax, rdx
1A90E:	jmp     rax; switch jump
1A911:	mov     rdx, [rbp+other]; jumptable 000000000001A90E case 1
1A918:	mov     rax, [rbp+this]
1A91F:	mov     rsi, rdx; other
1A922:	mov     rdi, rax; this
1A925:	mov     eax, 0
1A92A:	call    panel_act_ENTER
1A92F:	jmp     loc_1C343
1A934:	mov     rdx, [rbp+other]; jumptable 000000000001A90E case 2
1A93B:	mov     rax, [rbp+this]
1A942:	mov     rsi, rdx; other
1A945:	mov     rdi, rax; this
1A948:	mov     eax, 0
1A94D:	call    panel_act_COPY
1A952:	jmp     loc_1C33E
1A957:	mov     rdx, [rbp+other]; jumptable 000000000001A90E case 3
1A95E:	mov     rax, [rbp+this]
1A965:	mov     rsi, rdx; other
1A968:	mov     rdi, rax; this
1A96B:	mov     eax, 0
1A970:	call    panel_act_DELETE
1A975:	jmp     loc_1C33E
1A97A:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 4
1A981:	mov     rax, [rax+18h]
1A985:	movzx   eax, byte ptr [rax]
1A988:	cmp     al, 2Fh ; '/'
1A98A:	jnz     short loc_1A9A2
1A98C:	mov     rax, [rbp+this]
1A993:	mov     rax, [rax+18h]
1A997:	add     rax, 1
1A99B:	movzx   eax, byte ptr [rax]
1A99E:	test    al, al
1A9A0:	jz      short loc_1A9B4
1A9A2:	mov     rax, [rbp+this]
1A9A9:	mov     eax, [rax+28h]
1A9AC:	test    eax, eax
1A9AE:	jz      loc_1AA84
1A9B4:	mov     rax, [rbp+this]
1A9BB:	mov     rcx, [rax+38h]
1A9BF:	mov     rax, [rbp+this]
1A9C6:	mov     eax, [rax+28h]
1A9C9:	movsxd  rdx, eax
1A9CC:	mov     rax, rdx
1A9CF:	shl     rax, 2
1A9D3:	add     rax, rdx
1A9D6:	shl     rax, 4
1A9DA:	add     rax, rcx
1A9DD:	movzx   eax, byte ptr [rax+49h]
1A9E1:	test    al, al
1A9E3:	setz    sil
1A9E7:	mov     rax, [rbp+this]
1A9EE:	mov     rcx, [rax+38h]
1A9F2:	mov     rax, [rbp+this]
1A9F9:	mov     eax, [rax+28h]
1A9FC:	movsxd  rdx, eax
1A9FF:	mov     rax, rdx
1AA02:	shl     rax, 2
1AA06:	add     rax, rdx
1AA09:	shl     rax, 4
1AA0D:	add     rax, rcx
1AA10:	mov     edx, esi
1AA12:	mov     [rax+49h], dl
1AA15:	mov     rax, [rbp+this]
1AA1C:	mov     ecx, [rax+70h]
1AA1F:	mov     rax, [rbp+this]
1AA26:	mov     rsi, [rax+38h]
1AA2A:	mov     rax, [rbp+this]
1AA31:	mov     eax, [rax+28h]
1AA34:	movsxd  rdx, eax
1AA37:	mov     rax, rdx
1AA3A:	shl     rax, 2
1AA3E:	add     rax, rdx
1AA41:	shl     rax, 4
1AA45:	add     rax, rsi
1AA48:	movzx   eax, byte ptr [rax+49h]
1AA4C:	test    al, al
1AA4E:	jz      short loc_1AA57
1AA50:	mov     eax, 1
1AA55:	jmp     short loc_1AA5C
1AA57:	mov     eax, 0FFFFFFFFh
1AA5C:	lea     edx, [rax+rcx]
1AA5F:	mov     rax, [rbp+this]
1AA66:	mov     [rax+70h], edx
1AA69:	mov     rax, [rbp+this]
1AA70:	mov     edx, [rax+28h]
1AA73:	mov     rax, [rbp+this]
1AA7A:	mov     esi, edx; entry
1AA7C:	mov     rdi, rax; this
1AA7F:	call    panel_update_entry
1AA84:	mov     ecx, [rbp+repeat_count]
1AA8A:	mov     rdx, [rbp+other]; other
1AA91:	mov     rax, [rbp+this]
1AA98:	mov     r8d, ecx; repeat_count
1AA9B:	mov     ecx, 0; aux_info
1AAA0:	mov     esi, 1Ch; action
1AAA5:	mov     rdi, rax; this
1AAA8:	call    panel_action
1AAAD:	jmp     loc_1C33E
1AAB2:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 5
1AAB9:	mov     rdi, rax; this
1AABC:	call    panel_select_all
1AAC1:	mov     rax, [rbp+this]
1AAC8:	mov     rdi, rax; this
1AACB:	mov     eax, 0
1AAD0:	call    panel_update_entries
1AAD5:	mov     rax, [rbp+this]
1AADC:	mov     rdi, rax; this
1AADF:	mov     eax, 0
1AAE4:	call    panel_update_info
1AAE9:	jmp     loc_1C33E
1AAEE:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 6
1AAF5:	mov     rdi, rax; this
1AAF8:	call    panel_unselect_all
1AAFD:	mov     rax, [rbp+this]
1AB04:	mov     rdi, rax; this
1AB07:	mov     eax, 0
1AB0C:	call    panel_update_entries
1AB11:	mov     rax, [rbp+this]
1AB18:	mov     rdi, rax; this
1AB1B:	mov     eax, 0
1AB20:	call    panel_update_info
1AB25:	jmp     loc_1C33E
1AB2A:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 7
1AB31:	mov     dword ptr [rax+70h], 0
1AB38:	mov     [rbp+entry], 0
1AB42:	jmp     loc_1AC1B
1AB47:	mov     rax, [rbp+this]
1AB4E:	mov     rcx, [rax+38h]
1AB52:	mov     eax, [rbp+entry]
1AB58:	movsxd  rdx, eax
1AB5B:	mov     rax, rdx
1AB5E:	shl     rax, 2
1AB62:	add     rax, rdx
1AB65:	shl     rax, 4
1AB69:	add     rax, rcx
1AB6C:	movzx   eax, byte ptr [rax+48h]
1AB70:	test    al, al
1AB72:	jz      loc_1AC14
1AB78:	mov     rax, [rbp+this]
1AB7F:	mov     rcx, [rax+38h]
1AB83:	mov     eax, [rbp+entry]
1AB89:	movsxd  rdx, eax
1AB8C:	mov     rax, rdx
1AB8F:	shl     rax, 2
1AB93:	add     rax, rdx
1AB96:	shl     rax, 4
1AB9A:	add     rax, rcx
1AB9D:	movzx   eax, byte ptr [rax+49h]
1ABA1:	test    al, al
1ABA3:	setz    sil
1ABA7:	mov     rax, [rbp+this]
1ABAE:	mov     rcx, [rax+38h]
1ABB2:	mov     eax, [rbp+entry]
1ABB8:	movsxd  rdx, eax
1ABBB:	mov     rax, rdx
1ABBE:	shl     rax, 2
1ABC2:	add     rax, rdx
1ABC5:	shl     rax, 4
1ABC9:	add     rax, rcx
1ABCC:	mov     edx, esi
1ABCE:	mov     [rax+49h], dl
1ABD1:	mov     rax, [rbp+this]
1ABD8:	mov     ecx, [rax+70h]
1ABDB:	mov     rax, [rbp+this]
1ABE2:	mov     rsi, [rax+38h]
1ABE6:	mov     eax, [rbp+entry]
1ABEC:	movsxd  rdx, eax
1ABEF:	mov     rax, rdx
1ABF2:	shl     rax, 2
1ABF6:	add     rax, rdx
1ABF9:	shl     rax, 4
1ABFD:	add     rax, rsi
1AC00:	movzx   eax, byte ptr [rax+49h]
1AC04:	movsx   eax, al
1AC07:	lea     edx, [rcx+rax]
1AC0A:	mov     rax, [rbp+this]
1AC11:	mov     [rax+70h], edx
1AC14:	add     [rbp+entry], 1
1AC1B:	mov     rax, [rbp+this]
1AC22:	mov     eax, [rax+68h]
1AC25:	cmp     [rbp+entry], eax
1AC2B:	jl      loc_1AB47
1AC31:	mov     rax, [rbp+this]
1AC38:	mov     rdi, rax; this
1AC3B:	mov     eax, 0
1AC40:	call    panel_update_entries
1AC45:	mov     rax, [rbp+this]
1AC4C:	mov     rdi, rax; this
1AC4F:	mov     eax, 0
1AC54:	call    panel_update_info
1AC59:	jmp     loc_1C33E
1AC5E:	mov     rdx, [rbp+other]; jumptable 000000000001A90E case 25
1AC65:	mov     rax, [rbp+this]
1AC6C:	mov     rsi, rdx; other
1AC6F:	mov     rdi, rax; this
1AC72:	mov     eax, 0
1AC77:	call    panel_act_MKDIR
1AC7C:	jmp     loc_1C33E
1AC81:	mov     rdx, [rbp+other]; jumptable 000000000001A90E case 26
1AC88:	mov     rax, [rbp+this]
1AC8F:	mov     rsi, rdx; other
1AC92:	mov     rdi, rax; this
1AC95:	mov     eax, 0
1AC9A:	call    panel_act_MOVE
1AC9F:	jmp     loc_1C33E
1ACA4:	mov     [rbp+need_update], 0; jumptable 000000000001A90E case 27
1ACAE:	mov     eax, [rbp+need_update]
1ACB4:	mov     [rbp+need_update_all], eax
1ACBA:	jmp     loc_1AD6F
1ACBF:	mov     rax, [rbp+this]
1ACC6:	mov     eax, [rax+28h]
1ACC9:	test    eax, eax
1ACCB:	jz      loc_1AD88
1ACD1:	mov     rax, [rbp+this]
1ACD8:	mov     eax, [rax+28h]
1ACDB:	lea     edx, [rax-1]
1ACDE:	mov     rax, [rbp+this]
1ACE5:	mov     [rax+28h], edx
1ACE8:	mov     rax, [rbp+this]
1ACEF:	mov     eax, [rax+28h]
1ACF2:	lea     edx, [rax+1]
1ACF5:	mov     rax, [rbp+this]
1ACFC:	mov     eax, [rax+2Ch]
1ACFF:	cmp     edx, eax
1AD01:	jnz     short loc_1AD3E
1AD03:	mov     rax, [rbp+this]
1AD0A:	mov     edx, [rax+2Ch]
1AD0D:	mov     rax, [rbp+this]
1AD14:	mov     ecx, [rax+88h]
1AD1A:	mov     eax, edx
1AD1C:	sub     eax, ecx
1AD1E:	mov     edx, 0
1AD23:	test    eax, eax
1AD25:	cmovns  edx, eax
1AD28:	mov     rax, [rbp+this]
1AD2F:	mov     [rax+2Ch], edx
1AD32:	mov     [rbp+need_update_all], 1
1AD3C:	jmp     short loc_1AD6F
1AD3E:	cmp     [rbp+need_update], 0
1AD45:	jnz     short loc_1AD65
1AD47:	mov     rax, [rbp+this]
1AD4E:	mov     eax, [rax+28h]
1AD51:	lea     edx, [rax+1]
1AD54:	mov     rax, [rbp+this]
1AD5B:	mov     esi, edx; entry
1AD5D:	mov     rdi, rax; this
1AD60:	call    panel_update_entry
1AD65:	mov     [rbp+need_update], 1
1AD6F:	mov     eax, [rbp+repeat_count]
1AD75:	lea     edx, [rax-1]
1AD78:	mov     [rbp+repeat_count], edx
1AD7E:	test    eax, eax
1AD80:	jnz     loc_1ACBF
1AD86:	jmp     short loc_1AD89
1AD88:	nop
1AD89:	cmp     [rbp+need_update_all], 0
1AD90:	jz      short loc_1ADA8
1AD92:	mov     rax, [rbp+this]
1AD99:	mov     rdi, rax; this
1AD9C:	mov     eax, 0
1ADA1:	call    panel_update_entries
1ADA6:	jmp     short loc_1ADCC
1ADA8:	cmp     [rbp+need_update], 0
1ADAF:	jz      short loc_1ADCC
1ADB1:	mov     rax, [rbp+this]
1ADB8:	mov     edx, [rax+28h]
1ADBB:	mov     rax, [rbp+this]
1ADC2:	mov     esi, edx; entry
1ADC4:	mov     rdi, rax; this
1ADC7:	call    panel_update_entry
1ADCC:	mov     rax, [rbp+this]
1ADD3:	mov     rdi, rax; this
1ADD6:	mov     eax, 0
1ADDB:	call    panel_update_info
1ADE0:	jmp     loc_1C33E
1ADE5:	mov     [rbp+need_update], 0; jumptable 000000000001A90E case 28
1ADEF:	mov     eax, [rbp+need_update]
1ADF5:	mov     [rbp+need_update_all], eax
1ADFB:	jmp     loc_1AEE3
1AE00:	mov     rax, [rbp+this]
1AE07:	mov     edx, [rax+28h]
1AE0A:	mov     rax, [rbp+this]
1AE11:	mov     eax, [rax+68h]
1AE14:	sub     eax, 1
1AE17:	cmp     edx, eax
1AE19:	jge     loc_1AEFC
1AE1F:	mov     rax, [rbp+this]
1AE26:	mov     eax, [rax+28h]
1AE29:	lea     edx, [rax+1]
1AE2C:	mov     rax, [rbp+this]
1AE33:	mov     [rax+28h], edx
1AE36:	mov     rax, [rbp+this]
1AE3D:	mov     edx, [rax+28h]
1AE40:	mov     rax, [rbp+this]
1AE47:	mov     eax, [rax+2Ch]
1AE4A:	sub     edx, eax
1AE4C:	mov     rax, [rbp+this]
1AE53:	mov     eax, [rax+60h]
1AE56:	sub     eax, 2
1AE59:	cmp     edx, eax
1AE5B:	jl      short loc_1AEB2
1AE5D:	mov     rax, [rbp+this]
1AE64:	mov     edx, [rax+2Ch]
1AE67:	mov     rax, [rbp+this]
1AE6E:	mov     eax, [rax+88h]
1AE74:	add     edx, eax
1AE76:	mov     rax, [rbp+this]
1AE7D:	mov     eax, [rax+68h]
1AE80:	lea     ecx, [rax-1]
1AE83:	mov     rax, [rbp+this]
1AE8A:	mov     eax, [rax+60h]
1AE8D:	lea     esi, [rax-2]
1AE90:	mov     eax, ecx
1AE92:	sub     eax, esi
1AE94:	add     eax, 1
1AE97:	cmp     edx, eax
1AE99:	cmovg   edx, eax
1AE9C:	mov     rax, [rbp+this]
1AEA3:	mov     [rax+2Ch], edx
1AEA6:	mov     [rbp+need_update_all], 1
1AEB0:	jmp     short loc_1AEE3
1AEB2:	cmp     [rbp+need_update], 0
1AEB9:	jnz     short loc_1AED9
1AEBB:	mov     rax, [rbp+this]
1AEC2:	mov     eax, [rax+28h]
1AEC5:	lea     edx, [rax-1]
1AEC8:	mov     rax, [rbp+this]
1AECF:	mov     esi, edx; entry
1AED1:	mov     rdi, rax; this
1AED4:	call    panel_update_entry
1AED9:	mov     [rbp+need_update], 1
1AEE3:	mov     eax, [rbp+repeat_count]
1AEE9:	lea     edx, [rax-1]
1AEEC:	mov     [rbp+repeat_count], edx
1AEF2:	test    eax, eax
1AEF4:	jnz     loc_1AE00
1AEFA:	jmp     short loc_1AEFD
1AEFC:	nop
1AEFD:	cmp     [rbp+need_update_all], 0
1AF04:	jz      short loc_1AF1C
1AF06:	mov     rax, [rbp+this]
1AF0D:	mov     rdi, rax; this
1AF10:	mov     eax, 0
1AF15:	call    panel_update_entries
1AF1A:	jmp     short loc_1AF40
1AF1C:	cmp     [rbp+need_update], 0
1AF23:	jz      short loc_1AF40
1AF25:	mov     rax, [rbp+this]
1AF2C:	mov     edx, [rax+28h]
1AF2F:	mov     rax, [rbp+this]
1AF36:	mov     esi, edx; entry
1AF38:	mov     rdi, rax; this
1AF3B:	call    panel_update_entry
1AF40:	mov     rax, [rbp+this]
1AF47:	mov     rdi, rax; this
1AF4A:	mov     eax, 0
1AF4F:	call    panel_update_info
1AF54:	jmp     loc_1C33E
1AF59:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 29
1AF60:	mov     eax, [rax+28h]
1AF63:	test    eax, eax
1AF65:	jz      loc_1C32E
1AF6B:	mov     rax, [rbp+this]
1AF72:	mov     eax, [rax+28h]
1AF75:	mov     [rbp+old_current_entry], eax
1AF78:	mov     rax, [rbp+this]
1AF7F:	mov     edx, [rax+28h]
1AF82:	mov     rax, [rbp+this]
1AF89:	mov     eax, [rax+60h]
1AF8C:	sub     eax, 2
1AF8F:	cmp     edx, eax
1AF91:	jge     short loc_1AFAE
1AF93:	mov     rax, [rbp+this]
1AF9A:	mov     esi, 0; entry
1AF9F:	mov     rdi, rax; this
1AFA2:	mov     eax, 0
1AFA7:	call    panel_set_current_entry
1AFAC:	jmp     short loc_1AFDD
1AFAE:	mov     rax, [rbp+this]
1AFB5:	mov     edx, [rax+28h]
1AFB8:	mov     rax, [rbp+this]
1AFBF:	mov     eax, [rax+60h]
1AFC2:	sub     eax, 2
1AFC5:	sub     edx, eax
1AFC7:	mov     rax, [rbp+this]
1AFCE:	mov     esi, edx; entry
1AFD0:	mov     rdi, rax; this
1AFD3:	mov     eax, 0
1AFD8:	call    panel_set_current_entry
1AFDD:	mov     rax, [rbp+this]
1AFE4:	mov     eax, [rax+60h]
1AFE7:	lea     edx, [rax-1]
1AFEA:	mov     rax, [rbp+this]
1AFF1:	mov     eax, [rax+68h]
1AFF4:	cmp     edx, eax
1AFF6:	jg      short loc_1B00E
1AFF8:	mov     rax, [rbp+this]
1AFFF:	mov     rdi, rax; this
1B002:	mov     eax, 0
1B007:	call    panel_update_entries
1B00C:	jmp     short loc_1B03D
1B00E:	mov     edx, [rbp+old_current_entry]
1B011:	mov     rax, [rbp+this]
1B018:	mov     esi, edx; entry
1B01A:	mov     rdi, rax; this
1B01D:	call    panel_update_entry
1B022:	mov     rax, [rbp+this]
1B029:	mov     edx, [rax+28h]
1B02C:	mov     rax, [rbp+this]
1B033:	mov     esi, edx; entry
1B035:	mov     rdi, rax; this
1B038:	call    panel_update_entry
1B03D:	mov     rax, [rbp+this]
1B044:	mov     rdi, rax; this
1B047:	mov     eax, 0
1B04C:	call    panel_update_info
1B051:	jmp     loc_1C33E
1B056:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 30
1B05D:	mov     edx, [rax+28h]
1B060:	mov     rax, [rbp+this]
1B067:	mov     eax, [rax+68h]
1B06A:	sub     eax, 1
1B06D:	cmp     edx, eax
1B06F:	jz      loc_1C331
1B075:	mov     rax, [rbp+this]
1B07C:	mov     eax, [rax+28h]
1B07F:	mov     [rbp+old_current_entry], eax
1B082:	mov     rax, [rbp+this]
1B089:	mov     eax, [rax+68h]
1B08C:	lea     edx, [rax-1]
1B08F:	mov     rax, [rbp+this]
1B096:	mov     eax, [rax+2Ch]
1B099:	sub     edx, eax
1B09B:	mov     rax, [rbp+this]
1B0A2:	mov     eax, [rax+60h]
1B0A5:	sub     eax, 2
1B0A8:	cmp     edx, eax
1B0AA:	jge     short loc_1B0D1
1B0AC:	mov     rax, [rbp+this]
1B0B3:	mov     eax, [rax+68h]
1B0B6:	lea     edx, [rax-1]
1B0B9:	mov     rax, [rbp+this]
1B0C0:	mov     esi, edx; entry
1B0C2:	mov     rdi, rax; this
1B0C5:	mov     eax, 0
1B0CA:	call    panel_set_current_entry
1B0CF:	jmp     short loc_1B14F
1B0D1:	mov     rax, [rbp+this]
1B0D8:	mov     eax, [rax+68h]
1B0DB:	lea     edx, [rax-1]
1B0DE:	mov     rax, [rbp+this]
1B0E5:	mov     eax, [rax+28h]
1B0E8:	sub     edx, eax
1B0EA:	mov     rax, [rbp+this]
1B0F1:	mov     eax, [rax+60h]
1B0F4:	sub     eax, 2
1B0F7:	cmp     edx, eax
1B0F9:	jge     short loc_1B120
1B0FB:	mov     rax, [rbp+this]
1B102:	mov     eax, [rax+68h]
1B105:	lea     edx, [rax-1]
1B108:	mov     rax, [rbp+this]
1B10F:	mov     esi, edx; entry
1B111:	mov     rdi, rax; this
1B114:	mov     eax, 0
1B119:	call    panel_set_current_entry
1B11E:	jmp     short loc_1B14F
1B120:	mov     rax, [rbp+this]
1B127:	mov     edx, [rax+28h]
1B12A:	mov     rax, [rbp+this]
1B131:	mov     eax, [rax+60h]
1B134:	add     eax, edx
1B136:	lea     edx, [rax-2]
1B139:	mov     rax, [rbp+this]
1B140:	mov     esi, edx; entry
1B142:	mov     rdi, rax; this
1B145:	mov     eax, 0
1B14A:	call    panel_set_current_entry
1B14F:	mov     rax, [rbp+this]
1B156:	mov     eax, [rax+60h]
1B159:	lea     edx, [rax-1]
1B15C:	mov     rax, [rbp+this]
1B163:	mov     eax, [rax+68h]
1B166:	cmp     edx, eax
1B168:	jg      short loc_1B180
1B16A:	mov     rax, [rbp+this]
1B171:	mov     rdi, rax; this
1B174:	mov     eax, 0
1B179:	call    panel_update_entries
1B17E:	jmp     short loc_1B1AF
1B180:	mov     edx, [rbp+old_current_entry]
1B183:	mov     rax, [rbp+this]
1B18A:	mov     esi, edx; entry
1B18C:	mov     rdi, rax; this
1B18F:	call    panel_update_entry
1B194:	mov     rax, [rbp+this]
1B19B:	mov     edx, [rax+28h]
1B19E:	mov     rax, [rbp+this]
1B1A5:	mov     esi, edx; entry
1B1A7:	mov     rdi, rax; this
1B1AA:	call    panel_update_entry
1B1AF:	mov     rax, [rbp+this]
1B1B6:	mov     rdi, rax; this
1B1B9:	mov     eax, 0
1B1BE:	call    panel_update_info
1B1C3:	jmp     loc_1C33E
1B1C8:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 45
1B1CF:	mov     rax, [rax+18h]
1B1D3:	movzx   eax, byte ptr [rax]
1B1D6:	cmp     al, 2Fh ; '/'
1B1D8:	jnz     short loc_1B1F4
1B1DA:	mov     rax, [rbp+this]
1B1E1:	mov     rax, [rax+18h]
1B1E5:	add     rax, 1
1B1E9:	movzx   eax, byte ptr [rax]
1B1EC:	test    al, al
1B1EE:	jz      loc_1C334
1B1F4:	mov     rax, [rbp+this]
1B1FB:	mov     eax, [rax+28h]
1B1FE:	test    eax, eax
1B200:	jz      short loc_1B21B
1B202:	mov     rax, [rbp+this]
1B209:	mov     esi, 0; entry
1B20E:	mov     rdi, rax; this
1B211:	mov     eax, 0
1B216:	call    panel_set_current_entry
1B21B:	mov     rdx, [rbp+other]
1B222:	mov     rax, [rbp+this]
1B229:	mov     rsi, rdx; other
1B22C:	mov     rdi, rax; this
1B22F:	mov     eax, 0
1B234:	call    panel_act_ENTER
1B239:	jmp     loc_1C343
1B23E:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 31
1B245:	mov     eax, [rax+28h]
1B248:	test    eax, eax
1B24A:	jz      loc_1C337
1B250:	mov     rax, [rbp+this]
1B257:	mov     esi, 0; entry
1B25C:	mov     rdi, rax; this
1B25F:	mov     eax, 0
1B264:	call    panel_set_current_entry
1B269:	mov     rax, [rbp+this]
1B270:	mov     rdi, rax; this
1B273:	mov     eax, 0
1B278:	call    panel_update_entries
1B27D:	mov     rax, [rbp+this]
1B284:	mov     rdi, rax; this
1B287:	mov     eax, 0
1B28C:	call    panel_update_info
1B291:	jmp     loc_1C337
1B296:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 32
1B29D:	mov     edx, [rax+28h]
1B2A0:	mov     rax, [rbp+this]
1B2A7:	mov     eax, [rax+68h]
1B2AA:	sub     eax, 1
1B2AD:	cmp     edx, eax
1B2AF:	jz      loc_1C33A
1B2B5:	mov     rax, [rbp+this]
1B2BC:	mov     eax, [rax+68h]
1B2BF:	lea     edx, [rax-1]
1B2C2:	mov     rax, [rbp+this]
1B2C9:	mov     esi, edx; entry
1B2CB:	mov     rdi, rax; this
1B2CE:	mov     eax, 0
1B2D3:	call    panel_set_current_entry
1B2D8:	mov     rax, [rbp+this]
1B2DF:	mov     rdi, rax; this
1B2E2:	mov     eax, 0
1B2E7:	call    panel_update_entries
1B2EC:	mov     rax, [rbp+this]
1B2F3:	mov     rdi, rax; this
1B2F6:	mov     eax, 0
1B2FB:	call    panel_update_info
1B300:	jmp     loc_1C33A
1B305:	mov     rdx, [rbp+aux_info]; jumptable 000000000001A90E case 33
1B30C:	mov     rcx, [rbp+other]
1B313:	mov     rax, [rbp+this]
1B31A:	mov     rsi, rcx; other
1B31D:	mov     rdi, rax; this
1B320:	mov     eax, 0
1B325:	call    panel_act_CHDIR
1B32A:	jmp     loc_1C33E
1B32F:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 8
1B336:	mov     eax, [rax+80h]
1B33C:	lea     ecx, [rax+1]
1B33F:	movsxd  rax, ecx
1B342:	imul    rax, 2AAAAAABh
1B349:	shr     rax, 20h
1B34D:	mov     esi, ecx
1B34F:	sar     esi, 1Fh
1B352:	mov     edx, eax
1B354:	sub     edx, esi
1B356:	mov     eax, edx
1B358:	add     eax, eax
1B35A:	add     eax, edx
1B35C:	add     eax, eax
1B35E:	sub     ecx, eax
1B360:	mov     edx, ecx
1B362:	mov     rax, [rbp+this]
1B369:	mov     [rax+80h], edx
1B36F:	jmp     short all_display_modes
1B371:	mov     eax, [rbp+action]; jumptable 000000000001A90E cases 9-14
1B377:	lea     edx, [rax-9]
1B37A:	mov     rax, [rbp+this]
1B381:	mov     [rax+80h], edx
1B387:	mov     rax, [rbp+this]
1B38E:	mov     eax, [rax+64h]
1B391:	cmp     eax, 4Fh ; 'O'
1B394:	jg      short loc_1B3B9
1B396:	mov     rax, [rbp+this]
1B39D:	mov     eax, [rax+80h]
1B3A3:	cmp     eax, 5
1B3A6:	jnz     short loc_1B3B9
1B3A8:	mov     rax, [rbp+this]
1B3AF:	mov     dword ptr [rax+80h], 0
1B3B9:	mov     rax, [rbp+this]
1B3C0:	mov     rdi, rax; this
1B3C3:	mov     eax, 0
1B3C8:	call    panel_update_entries
1B3CD:	jmp     loc_1C33E
1B3D2:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 15
1B3D9:	mov     eax, [rax+84h]
1B3DF:	lea     edx, [rax+1]
1B3E2:	movsxd  rax, edx
1B3E5:	imul    rax, 38E38E39h
1B3EC:	shr     rax, 20h
1B3F0:	sar     eax, 1
1B3F2:	mov     ecx, edx
1B3F4:	sar     ecx, 1Fh
1B3F7:	sub     eax, ecx
1B3F9:	mov     ecx, eax
1B3FB:	shl     ecx, 3
1B3FE:	add     ecx, eax
1B400:	mov     eax, edx
1B402:	sub     eax, ecx
1B404:	mov     rdx, [rbp+this]
1B40B:	mov     [rdx+84h], eax
1B411:	jmp     short all_sort_methodes
1B413:	mov     eax, [rbp+action]; jumptable 000000000001A90E cases 16-24
1B419:	lea     edx, [rax-10h]
1B41C:	mov     rax, [rbp+this]
1B423:	mov     [rax+84h], edx
1B429:	mov     rax, [rbp+this]
1B430:	mov     eax, [rax+84h]
1B436:	mov     cs:CurrentSortMethod, eax
1B43C:	mov     rax, [rbp+this]
1B443:	mov     rcx, [rax+38h]
1B447:	mov     rax, [rbp+this]
1B44E:	mov     eax, [rax+28h]
1B451:	movsxd  rdx, eax
1B454:	mov     rax, rdx
1B457:	shl     rax, 2
1B45B:	add     rax, rdx
1B45E:	shl     rax, 4
1B462:	add     rax, rcx
1B465:	mov     rax, [rax]
1B468:	mov     [rbp+previous], rax
1B46C:	mov     rax, [rbp+this]
1B473:	mov     rax, [rax+18h]
1B477:	movzx   eax, byte ptr [rax]
1B47A:	cmp     al, 2Fh ; '/'
1B47C:	jnz     short loc_1B4C5
1B47E:	mov     rax, [rbp+this]
1B485:	mov     rax, [rax+18h]
1B489:	add     rax, 1
1B48D:	movzx   eax, byte ptr [rax]
1B490:	test    al, al
1B492:	jnz     short loc_1B4C5
1B494:	mov     rax, [rbp+this]
1B49B:	mov     eax, [rax+68h]
1B49E:	movsxd  rsi, eax; nmemb
1B4A1:	mov     rax, [rbp+this]
1B4A8:	mov     rax, [rax+38h]
1B4AC:	lea     rdx, sort_compare_fn
1B4B3:	mov     rcx, rdx; compar
1B4B6:	mov     edx, 50h ; 'P'; size
1B4BB:	mov     rdi, rax; base
1B4BE:	call    _qsort
1B4C3:	jmp     short loc_1B4FA
1B4C5:	mov     rax, [rbp+this]
1B4CC:	mov     eax, [rax+68h]
1B4CF:	sub     eax, 1
1B4D2:	cdqe
1B4D4:	mov     rdx, [rbp+this]
1B4DB:	mov     rdx, [rdx+38h]
1B4DF:	lea     rdi, [rdx+50h]; base
1B4E3:	lea     rdx, sort_compare_fn
1B4EA:	mov     rcx, rdx; compar
1B4ED:	mov     edx, 50h ; 'P'; size
1B4F2:	mov     rsi, rax; nmemb
1B4F5:	call    _qsort
1B4FA:	mov     [rbp+entry], 0
1B504:	jmp     short loc_1B53B
1B506:	mov     rax, [rbp+this]
1B50D:	mov     rcx, [rax+38h]
1B511:	mov     eax, [rbp+entry]
1B517:	movsxd  rdx, eax
1B51A:	mov     rax, rdx
1B51D:	shl     rax, 2
1B521:	add     rax, rdx
1B524:	shl     rax, 4
1B528:	add     rax, rcx
1B52B:	mov     rax, [rax]
1B52E:	cmp     [rbp+previous], rax
1B532:	jz      short loc_1B54F
1B534:	add     [rbp+entry], 1
1B53B:	mov     rax, [rbp+this]
1B542:	mov     eax, [rax+68h]
1B545:	cmp     [rbp+entry], eax
1B54B:	jl      short loc_1B506
1B54D:	jmp     short loc_1B550
1B54F:	nop
1B550:	mov     edx, [rbp+entry]
1B556:	mov     rax, [rbp+this]
1B55D:	mov     esi, edx; entry
1B55F:	mov     rdi, rax; this
1B562:	mov     eax, 0
1B567:	call    panel_set_current_entry
1B56C:	mov     rax, [rbp+this]
1B573:	mov     rdi, rax; this
1B576:	mov     eax, 0
1B57B:	call    panel_update_entries
1B580:	jmp     loc_1C33E
1B585:	mov     rax, [rbp+other]; jumptable 000000000001A90E case 35
1B58C:	lea     rdx, [rax+60h]
1B590:	mov     rax, [rbp+this]
1B597:	add     rax, 60h ; '`'
1B59B:	mov     rsi, rdx; b
1B59E:	mov     rdi, rax; a
1B5A1:	mov     eax, 0
1B5A6:	call    xchg
1B5AB:	mov     rax, [rbp+other]
1B5B2:	lea     rdx, [rax+64h]
1B5B6:	mov     rax, [rbp+this]
1B5BD:	add     rax, 64h ; 'd'
1B5C1:	mov     rsi, rdx; b
1B5C4:	mov     rdi, rax; a
1B5C7:	mov     eax, 0
1B5CC:	call    xchg
1B5D1:	mov     rax, [rbp+other]
1B5D8:	lea     rdx, [rax+58h]
1B5DC:	mov     rax, [rbp+this]
1B5E3:	add     rax, 58h ; 'X'
1B5E7:	mov     rsi, rdx; b
1B5EA:	mov     rdi, rax; a
1B5ED:	mov     eax, 0
1B5F2:	call    xchg
1B5F7:	mov     rax, [rbp+other]
1B5FE:	lea     rdx, [rax+5Ch]
1B602:	mov     rax, [rbp+this]
1B609:	add     rax, 5Ch ; ''
1B60D:	mov     rsi, rdx; b
1B610:	mov     rdi, rax; a
1B613:	mov     eax, 0
1B618:	call    xchg
1B61D:	mov     rax, [rbp+this]
1B624:	mov     eax, [rax+64h]
1B627:	movsxd  rdi, eax
1B62A:	mov     rax, [rbp+this]
1B631:	mov     eax, [rax+60h]
1B634:	movsxd  rcx, eax; lines
1B637:	mov     rax, [rbp+this]
1B63E:	mov     eax, [rax+5Ch]
1B641:	movsxd  rdx, eax; y
1B644:	mov     rax, [rbp+this]
1B64B:	mov     eax, [rax+58h]
1B64E:	movsxd  rsi, eax; x
1B651:	mov     rax, [rbp+this]
1B658:	mov     r8, rdi; columns
1B65B:	mov     rdi, rax; this
1B65E:	call    panel_resize
1B663:	mov     rax, [rbp+other]
1B66A:	mov     eax, [rax+64h]
1B66D:	movsxd  rdi, eax
1B670:	mov     rax, [rbp+other]
1B677:	mov     eax, [rax+60h]
1B67A:	movsxd  rcx, eax; lines
1B67D:	mov     rax, [rbp+other]
1B684:	mov     eax, [rax+5Ch]
1B687:	movsxd  rdx, eax; y
1B68A:	mov     rax, [rbp+other]
1B691:	mov     eax, [rax+58h]
1B694:	movsxd  rsi, eax; x
1B697:	mov     rax, [rbp+other]
1B69E:	mov     r8, rdi; columns
1B6A1:	mov     rdi, rax; this
1B6A4:	call    panel_resize
1B6A9:	jmp     loc_1C33E
1B6AE:	mov     rax, [rbp+aux_info]; jumptable 000000000001A90E cases 36,37
1B6B5:	mov     rdi, rax; string
1B6B8:	mov     eax, 0
1B6BD:	call    panel_parse_patterns
1B6C2:	mov     [rbp+safe_patterns], rax
1B6C6:	mov     rax, [rbp+safe_patterns]
1B6CA:	mov     [rbp+patterns], rax
1B6CE:	jmp     loc_1B881
1B6D3:	mov     [rbp+entry], 0
1B6DD:	jmp     loc_1B866
1B6E2:	mov     rax, [rbp+this]
1B6E9:	mov     rcx, [rax+38h]
1B6ED:	mov     eax, [rbp+entry]
1B6F3:	movsxd  rdx, eax
1B6F6:	mov     rax, rdx
1B6F9:	shl     rax, 2
1B6FD:	add     rax, rdx
1B700:	shl     rax, 4
1B704:	add     rax, rcx
1B707:	movzx   eax, byte ptr [rax+48h]
1B70B:	test    al, al
1B70D:	jz      loc_1B85F
1B713:	mov     [rbp+fnm_flags], 1
1B71D:	mov     eax, cs:LeadingDotMatch
1B723:	test    eax, eax
1B725:	jnz     short loc_1B72E
1B727:	or      [rbp+fnm_flags], 4
1B72E:	mov     rax, [rbp+this]
1B735:	mov     rcx, [rax+38h]
1B739:	mov     eax, [rbp+entry]
1B73F:	movsxd  rdx, eax
1B742:	mov     rax, rdx
1B745:	shl     rax, 2
1B749:	add     rax, rdx
1B74C:	shl     rax, 4
1B750:	add     rax, rcx
1B753:	mov     rcx, [rax]
1B756:	mov     rax, [rbp+patterns]
1B75A:	mov     rax, [rax]
1B75D:	mov     edx, [rbp+fnm_flags]; flags
1B763:	mov     rsi, rcx; name
1B766:	mov     rdi, rax; pattern
1B769:	call    _fnmatch
1B76E:	test    eax, eax
1B770:	jnz     loc_1B85F
1B776:	cmp     [rbp+action], 24h ; '$'
1B77D:	jnz     short loc_1B7F2
1B77F:	mov     rax, [rbp+this]
1B786:	mov     rcx, [rax+38h]
1B78A:	mov     eax, [rbp+entry]
1B790:	movsxd  rdx, eax
1B793:	mov     rax, rdx
1B796:	shl     rax, 2
1B79A:	add     rax, rdx
1B79D:	shl     rax, 4
1B7A1:	add     rax, rcx
1B7A4:	movzx   eax, byte ptr [rax+49h]
1B7A8:	test    al, al
1B7AA:	jnz     loc_1B85F
1B7B0:	mov     rax, [rbp+this]
1B7B7:	mov     rcx, [rax+38h]
1B7BB:	mov     eax, [rbp+entry]
1B7C1:	movsxd  rdx, eax
1B7C4:	mov     rax, rdx
1B7C7:	shl     rax, 2
1B7CB:	add     rax, rdx
1B7CE:	shl     rax, 4
1B7D2:	add     rax, rcx
1B7D5:	mov     byte ptr [rax+49h], 1
1B7D9:	mov     rax, [rbp+this]
1B7E0:	mov     eax, [rax+70h]
1B7E3:	lea     edx, [rax+1]
1B7E6:	mov     rax, [rbp+this]
1B7ED:	mov     [rax+70h], edx
1B7F0:	jmp     short loc_1B85F
1B7F2:	mov     rax, [rbp+this]
1B7F9:	mov     rcx, [rax+38h]
1B7FD:	mov     eax, [rbp+entry]
1B803:	movsxd  rdx, eax
1B806:	mov     rax, rdx
1B809:	shl     rax, 2
1B80D:	add     rax, rdx
1B810:	shl     rax, 4
1B814:	add     rax, rcx
1B817:	movzx   eax, byte ptr [rax+49h]
1B81B:	test    al, al
1B81D:	jz      short loc_1B85F
1B81F:	mov     rax, [rbp+this]
1B826:	mov     rcx, [rax+38h]
1B82A:	mov     eax, [rbp+entry]
1B830:	movsxd  rdx, eax
1B833:	mov     rax, rdx
1B836:	shl     rax, 2
1B83A:	add     rax, rdx
1B83D:	shl     rax, 4
1B841:	add     rax, rcx
1B844:	mov     byte ptr [rax+49h], 0
1B848:	mov     rax, [rbp+this]
1B84F:	mov     eax, [rax+70h]
1B852:	lea     edx, [rax-1]
1B855:	mov     rax, [rbp+this]
1B85C:	mov     [rax+70h], edx
1B85F:	add     [rbp+entry], 1
1B866:	mov     rax, [rbp+this]
1B86D:	mov     eax, [rax+68h]
1B870:	cmp     [rbp+entry], eax
1B876:	jl      loc_1B6E2
1B87C:	add     [rbp+patterns], 8
1B881:	mov     rax, [rbp+patterns]
1B885:	mov     rax, [rax]
1B888:	test    rax, rax
1B88B:	jnz     loc_1B6D3
1B891:	mov     rax, [rbp+safe_patterns]
1B895:	mov     rdi, rax; patterns
1B898:	mov     eax, 0
1B89D:	call    panel_deallocate_patterns
1B8A2:	mov     rax, [rbp+this]
1B8A9:	mov     rdi, rax; this
1B8AC:	mov     eax, 0
1B8B1:	call    panel_update_entries
1B8B6:	mov     rax, [rbp+this]
1B8BD:	mov     rdi, rax; this
1B8C0:	mov     eax, 0
1B8C5:	call    panel_update_info
1B8CA:	jmp     loc_1C33E
1B8CF:	mov     rdx, [rbp+aux_info]; jumptable 000000000001A90E case 34
1B8D6:	mov     rax, [rbp+this]
1B8DD:	mov     rsi, rdx; aux_info
1B8E0:	mov     rdi, rax; this
1B8E3:	mov     eax, 0
1B8E8:	call    panel_act_REGET
1B8ED:	jmp     loc_1C33E
1B8F2:	mov     rax, [rbp+aux_info]; jumptable 000000000001A90E case 38
1B8F9:	mov     rdi, rax; nptr
1B8FC:	call    _atoi
1B901:	mov     [rbp+new_scroll_step], eax
1B904:	cmp     [rbp+new_scroll_step], 0
1B908:	jle     loc_1C33D
1B90E:	mov     rax, [rbp+this]
1B915:	mov     eax, [rax+60h]
1B918:	sub     eax, 1
1B91B:	cmp     [rbp+new_scroll_step], eax
1B91E:	jge     loc_1C33D
1B924:	mov     rax, [rbp+other]
1B92B:	mov     edx, [rbp+new_scroll_step]
1B92E:	mov     [rax+88h], edx
1B934:	mov     rax, [rbp+other]
1B93B:	mov     edx, [rax+88h]
1B941:	mov     rax, [rbp+this]
1B948:	mov     [rax+88h], edx
1B94E:	jmp     loc_1C33D
1B953:	mov     edi, 10h; jumptable 000000000001A90E case 39
1B958:	call    xstack_init
1B95D:	mov     rdx, [rbp+this]
1B964:	mov     [rdx+48h], rax
1B968:	mov     rax, [rbp+this]
1B96F:	mov     eax, [rax+28h]
1B972:	mov     [rbp+current_isearch.entry], eax
1B975:	mov     [rbp+current_isearch.length], 0
1B97D:	mov     rax, [rbp+this]
1B984:	mov     rax, [rax+48h]
1B988:	lea     rdx, [rbp+current_isearch]
1B98C:	mov     rsi, rdx; data
1B98F:	mov     rdi, rax; stack
1B992:	call    xstack_push
1B997:	mov     rax, [rbp+this]
1B99E:	mov     qword ptr [rax+40h], 0
1B9A6:	mov     rax, [rbp+this]
1B9AD:	mov     byte ptr [rax+6Eh], 0
1B9B1:	jmp     loc_1C33E
1B9B6:	mov     rax, [rbp+aux_info]; jumptable 000000000001A90E case 40
1B9BD:	mov     [rbp+iai], rax
1B9C1:	mov     rax, [rbp+iai]
1B9C5:	mov     rax, [rax+8]
1B9C9:	mov     rdi, rax; s
1B9CC:	call    _strlen
1B9D1:	mov     [rbp+len], rax
1B9D5:	mov     rax, [rbp+iai]
1B9D9:	mov     eax, [rax]
1B9DB:	cmp     eax, 3
1B9DE:	jz      loc_1BAA1
1B9E4:	cmp     eax, 3
1B9E7:	jg      loc_1BBAA
1B9ED:	cmp     eax, 2
1B9F0:	jz      short loc_1BA11
1B9F2:	cmp     eax, 2
1B9F5:	jg      loc_1BBAA
1B9FB:	test    eax, eax
1B9FD:	jz      loc_1BBAD
1BA03:	cmp     eax, 1
1BA06:	jz      loc_1BC22
1BA0C:	jmp     loc_1BBAA
1BA11:	mov     rax, [rbp+this]
1BA18:	movzx   eax, byte ptr [rax+6Eh]
1BA1C:	test    al, al
1BA1E:	jnz     short loc_1BA4F
1BA20:	mov     rax, [rbp+this]
1BA27:	mov     eax, [rax+28h]
1BA2A:	mov     [rbp+current_isearch.entry], eax
1BA2D:	mov     rax, [rbp+len]
1BA31:	mov     [rbp+current_isearch.length], rax
1BA35:	mov     rax, [rbp+this]
1BA3C:	mov     rax, [rax+48h]
1BA40:	lea     rdx, [rbp+current_isearch]
1BA44:	mov     rsi, rdx; data
1BA47:	mov     rdi, rax; stack
1BA4A:	call    xstack_push
1BA4F:	mov     rax, [rbp+this]
1BA56:	movzx   eax, byte ptr [rax+6Eh]
1BA5A:	test    al, al
1BA5C:	jz      short loc_1BA6D
1BA5E:	mov     rax, [rbp+this]
1BA65:	mov     eax, [rax+68h]
1BA68:	sub     eax, 1
1BA6B:	jmp     short loc_1BA7A
1BA6D:	mov     rax, [rbp+this]
1BA74:	mov     eax, [rax+28h]
1BA77:	sub     eax, 1
1BA7A:	mov     rdx, [rbp+iai]
1BA7E:	mov     rsi, [rdx+8]; string
1BA82:	mov     rdx, [rbp+len]; len
1BA86:	mov     rdi, [rbp+this]; this
1BA8D:	mov     ecx, eax; start_entry
1BA8F:	mov     eax, 0
1BA94:	call    panel_isearch_backward
1BA99:	mov     [rbp+result], eax
1BA9F:	jmp     short isearch_backward_action_increase
1BAA1:	mov     rax, [rbp+this]
1BAA8:	mov     eax, [rax+28h]
1BAAB:	mov     [rbp+current_isearch.entry], eax
1BAAE:	mov     rax, [rbp+len]
1BAB2:	mov     [rbp+current_isearch.length], rax
1BAB6:	mov     rax, [rbp+this]
1BABD:	mov     rax, [rax+48h]
1BAC1:	lea     rdx, [rbp+current_isearch]
1BAC5:	mov     rsi, rdx; data
1BAC8:	mov     rdi, rax; stack
1BACB:	call    xstack_push
1BAD0:	mov     rax, [rbp+this]
1BAD7:	mov     ecx, [rax+28h]; start_entry
1BADA:	mov     rax, [rbp+iai]
1BADE:	mov     rsi, [rax+8]; string
1BAE2:	mov     rdx, [rbp+len]; len
1BAE6:	mov     rax, [rbp+this]
1BAED:	mov     rdi, rax; this
1BAF0:	mov     eax, 0
1BAF5:	call    panel_isearch_backward
1BAFA:	mov     [rbp+result], eax
1BB00:	cmp     [rbp+result], 0FFFFFFFFh
1BB07:	jnz     short loc_1BB18
1BB09:	mov     rax, [rbp+iai]
1BB0D:	mov     dword ptr [rax], 0FFFFFFFFh
1BB13:	jmp     loc_1BBAE
1BB18:	mov     rax, [rbp+this]
1BB1F:	mov     rdx, [rbp+len]
1BB23:	mov     [rax+40h], rdx
1BB27:	mov     rax, [rbp+this]
1BB2E:	movzx   eax, byte ptr [rax+6Eh]
1BB32:	test    al, al
1BB34:	jz      short loc_1BB73
1BB36:	mov     edx, [rbp+result]
1BB3C:	mov     rax, [rbp+this]
1BB43:	mov     esi, edx; entry
1BB45:	mov     rdi, rax; this
1BB48:	mov     eax, 0
1BB4D:	call    panel_set_current_entry
1BB52:	mov     rax, [rbp+this]
1BB59:	mov     rdi, rax; this
1BB5C:	mov     eax, 0
1BB61:	call    panel_update_entries
1BB66:	mov     rax, [rbp+this]
1BB6D:	mov     byte ptr [rax+6Eh], 0
1BB71:	jmp     short loc_1BBAE
1BB73:	mov     rax, [rbp+this]
1BB7A:	mov     eax, [rax+28h]
1BB7D:	sub     eax, [rbp+result]
1BB83:	mov     ecx, eax
1BB85:	mov     rdx, [rbp+other]; other
1BB8C:	mov     rax, [rbp+this]
1BB93:	mov     r8d, ecx; repeat_count
1BB96:	mov     ecx, 0; aux_info
1BB9B:	mov     esi, 1Bh; action
1BBA0:	mov     rdi, rax; this
1BBA3:	call    panel_action
1BBA8:	jmp     short loc_1BBAE
1BBAA:	nop
1BBAB:	jmp     short loc_1BBAE
1BBAD:	nop
1BBAE:	mov     rax, [rbp+this]
1BBB5:	mov     rdx, [rax+40h]
1BBB9:	mov     rax, [rbp+iai]
1BBBD:	mov     [rax+10h], rdx
1BBC1:	jmp     loc_1C33E
1BBC6:	mov     rax, [rbp+aux_info]; jumptable 000000000001A90E case 41
1BBCD:	mov     [rbp+iai], rax
1BBD1:	mov     rax, [rbp+iai]
1BBD5:	mov     rax, [rax+8]
1BBD9:	mov     rdi, rax; s
1BBDC:	call    _strlen
1BBE1:	mov     [rbp+len], rax
1BBE5:	mov     rax, [rbp+iai]
1BBE9:	mov     eax, [rax]
1BBEB:	cmp     eax, 3
1BBEE:	jz      loc_1BDB0
1BBF4:	cmp     eax, 3
1BBF7:	jg      loc_1BEBB
1BBFD:	cmp     eax, 2
1BC00:	jz      loc_1BD27
1BC06:	cmp     eax, 2
1BC09:	jg      loc_1BEBB
1BC0F:	test    eax, eax
1BC11:	jz      loc_1BEBE
1BC17:	cmp     eax, 1
1BC1A:	jnz     loc_1BEBB
1BC20:	jmp     short isearch_action_decrease
1BC22:	nop
1BC23:	mov     rax, [rbp+this]
1BC2A:	mov     rax, [rax+48h]
1BC2E:	lea     rdx, [rbp+current_isearch]
1BC32:	mov     rsi, rdx; data
1BC35:	mov     rdi, rax; stack
1BC38:	call    xstack_pop
1BC3D:	mov     eax, [rbp+current_isearch.entry]
1BC40:	mov     [rbp+prev_entry], eax
1BC43:	mov     rax, [rbp+current_isearch.length]
1BC47:	mov     [rbp+prev_length], rax
1BC4B:	mov     rax, [rbp+this]
1BC52:	mov     rax, [rax+40h]
1BC56:	cmp     [rbp+len], rax
1BC5A:	jnz     loc_1BEC1
1BC60:	mov     rax, [rbp+this]
1BC67:	mov     eax, [rax+28h]
1BC6A:	cmp     [rbp+prev_entry], eax
1BC6D:	jle     short loc_1BCA5
1BC6F:	mov     rax, [rbp+this]
1BC76:	mov     edx, [rax+28h]
1BC79:	mov     eax, [rbp+prev_entry]
1BC7C:	sub     eax, edx
1BC7E:	mov     ecx, eax
1BC80:	mov     rdx, [rbp+other]; other
1BC87:	mov     rax, [rbp+this]
1BC8E:	mov     r8d, ecx; repeat_count
1BC91:	mov     ecx, 0; aux_info
1BC96:	mov     esi, 1Ch; action
1BC9B:	mov     rdi, rax; this
1BC9E:	call    panel_action
1BCA3:	jmp     short loc_1BCE6
1BCA5:	mov     rax, [rbp+this]
1BCAC:	mov     eax, [rax+28h]
1BCAF:	cmp     [rbp+prev_entry], eax
1BCB2:	jge     short loc_1BCE6
1BCB4:	mov     rax, [rbp+this]
1BCBB:	mov     eax, [rax+28h]
1BCBE:	sub     eax, [rbp+prev_entry]
1BCC1:	mov     ecx, eax
1BCC3:	mov     rdx, [rbp+other]; other
1BCCA:	mov     rax, [rbp+this]
1BCD1:	mov     r8d, ecx; repeat_count
1BCD4:	mov     ecx, 0; aux_info
1BCD9:	mov     esi, 1Bh; action
1BCDE:	mov     rdi, rax; this
1BCE1:	call    panel_action
1BCE6:	mov     rax, [rbp+this]
1BCED:	mov     rax, [rax+48h]
1BCF1:	lea     rcx, [rbp+current_isearch]
1BCF5:	mov     edx, 1; offset
1BCFA:	mov     rsi, rcx; data
1BCFD:	mov     rdi, rax; stack
1BD00:	call    xstack_preview
1BD05:	mov     eax, [rbp+current_isearch.entry]
1BD08:	mov     [rbp+prev_entry], eax
1BD0B:	mov     rax, [rbp+current_isearch.length]
1BD0F:	mov     [rbp+prev_length], rax
1BD13:	mov     rax, [rbp+this]
1BD1A:	mov     rdx, [rbp+prev_length]
1BD1E:	mov     [rax+40h], rdx
1BD22:	jmp     loc_1BEC2
1BD27:	mov     rax, [rbp+this]
1BD2E:	movzx   eax, byte ptr [rax+6Eh]
1BD32:	test    al, al
1BD34:	jnz     short loc_1BD65
1BD36:	mov     rax, [rbp+this]
1BD3D:	mov     eax, [rax+28h]
1BD40:	mov     [rbp+current_isearch.entry], eax
1BD43:	mov     rax, [rbp+len]
1BD47:	mov     [rbp+current_isearch.length], rax
1BD4B:	mov     rax, [rbp+this]
1BD52:	mov     rax, [rax+48h]
1BD56:	lea     rdx, [rbp+current_isearch]
1BD5A:	mov     rsi, rdx; data
1BD5D:	mov     rdi, rax; stack
1BD60:	call    xstack_push
1BD65:	mov     rax, [rbp+this]
1BD6C:	movzx   eax, byte ptr [rax+6Eh]
1BD70:	test    al, al
1BD72:	jnz     short loc_1BD83
1BD74:	mov     rax, [rbp+this]
1BD7B:	mov     eax, [rax+28h]
1BD7E:	lea     ecx, [rax+1]
1BD81:	jmp     short loc_1BD88
1BD83:	mov     ecx, 0; start_entry
1BD88:	mov     rax, [rbp+iai]
1BD8C:	mov     rsi, [rax+8]; string
1BD90:	mov     rdx, [rbp+len]; len
1BD94:	mov     rax, [rbp+this]
1BD9B:	mov     rdi, rax; this
1BD9E:	mov     eax, 0
1BDA3:	call    panel_isearch_forward
1BDA8:	mov     [rbp+result], eax
1BDAE:	jmp     short isearch_forward_action_increase
1BDB0:	mov     rax, [rbp+this]
1BDB7:	mov     eax, [rax+28h]
1BDBA:	mov     [rbp+current_isearch.entry], eax
1BDBD:	mov     rax, [rbp+len]
1BDC1:	mov     [rbp+current_isearch.length], rax
1BDC5:	mov     rax, [rbp+this]
1BDCC:	mov     rax, [rax+48h]
1BDD0:	lea     rdx, [rbp+current_isearch]
1BDD4:	mov     rsi, rdx; data
1BDD7:	mov     rdi, rax; stack
1BDDA:	call    xstack_push
1BDDF:	mov     rax, [rbp+this]
1BDE6:	mov     ecx, [rax+28h]; start_entry
1BDE9:	mov     rax, [rbp+iai]
1BDED:	mov     rsi, [rax+8]; string
1BDF1:	mov     rdx, [rbp+len]; len
1BDF5:	mov     rax, [rbp+this]
1BDFC:	mov     rdi, rax; this
1BDFF:	mov     eax, 0
1BE04:	call    panel_isearch_forward
1BE09:	mov     [rbp+result], eax
1BE0F:	cmp     [rbp+result], 0FFFFFFFFh
1BE16:	jnz     short loc_1BE27
1BE18:	mov     rax, [rbp+iai]
1BE1C:	mov     dword ptr [rax], 0FFFFFFFFh
1BE22:	jmp     loc_1BEC2
1BE27:	mov     rax, [rbp+this]
1BE2E:	mov     rdx, [rbp+len]
1BE32:	mov     [rax+40h], rdx
1BE36:	mov     rax, [rbp+this]
1BE3D:	movzx   eax, byte ptr [rax+6Eh]
1BE41:	test    al, al
1BE43:	jz      short loc_1BE82
1BE45:	mov     edx, [rbp+result]
1BE4B:	mov     rax, [rbp+this]
1BE52:	mov     esi, edx; entry
1BE54:	mov     rdi, rax; this
1BE57:	mov     eax, 0
1BE5C:	call    panel_set_current_entry
1BE61:	mov     rax, [rbp+this]
1BE68:	mov     rdi, rax; this
1BE6B:	mov     eax, 0
1BE70:	call    panel_update_entries
1BE75:	mov     rax, [rbp+this]
1BE7C:	mov     byte ptr [rax+6Eh], 0
1BE80:	jmp     short loc_1BEC2
1BE82:	mov     rax, [rbp+this]
1BE89:	mov     edx, [rax+28h]
1BE8C:	mov     eax, [rbp+result]
1BE92:	sub     eax, edx
1BE94:	mov     ecx, eax
1BE96:	mov     rdx, [rbp+other]; other
1BE9D:	mov     rax, [rbp+this]
1BEA4:	mov     r8d, ecx; repeat_count
1BEA7:	mov     ecx, 0; aux_info
1BEAC:	mov     esi, 1Ch; action
1BEB1:	mov     rdi, rax; this
1BEB4:	call    panel_action
1BEB9:	jmp     short loc_1BEC2
1BEBB:	nop
1BEBC:	jmp     short loc_1BEC2
1BEBE:	nop
1BEBF:	jmp     short loc_1BEC2
1BEC1:	nop
1BEC2:	mov     rax, [rbp+this]
1BEC9:	mov     rdx, [rax+40h]
1BECD:	mov     rax, [rbp+iai]
1BED1:	mov     [rax+10h], rdx
1BED5:	jmp     loc_1C33E
1BEDA:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 42
1BEE1:	mov     rax, [rax+48h]
1BEE5:	mov     rdi, rax; stack
1BEE8:	call    xstack_end
1BEED:	mov     rax, [rbp+this]
1BEF4:	mov     qword ptr [rax+48h], 0
1BEFC:	jmp     loc_1C33E
1BF01:	mov     rax, [rbp+aux_info]; jumptable 000000000001A90E case 43
1BF08:	mov     edx, [rax]; quick
1BF0A:	mov     rcx, [rbp+other]
1BF11:	mov     rax, [rbp+this]
1BF18:	mov     rsi, rcx; other
1BF1B:	mov     rdi, rax; this
1BF1E:	mov     eax, 0
1BF23:	call    panel_act_CMPDIR
1BF28:	jmp     loc_1C33E
1BF2D:	mov     rax, [rbp+aux_info]; jumptable 000000000001A90E case 44
1BF34:	mov     edx, [rax]; upcase
1BF36:	mov     rcx, [rbp+other]
1BF3D:	mov     rax, [rbp+this]
1BF44:	mov     rsi, rcx; other
1BF47:	mov     rdi, rax; this
1BF4A:	mov     eax, 0
1BF4F:	call    panel_act_CASE
1BF54:	jmp     loc_1C33E
1BF59:	mov     rdx, [rbp+other]; jumptable 000000000001A90E case 46
1BF60:	mov     rax, [rbp+this]
1BF67:	mov     rsi, rdx; other
1BF6A:	mov     rdi, rax; this
1BF6D:	mov     eax, 0
1BF72:	call    panel_act_COMPARE
1BF77:	jmp     loc_1C33E
1BF7C:	mov     rax, [rbp+aux_info]; jumptable 000000000001A90E case 47
1BF83:	mov     rdi, rax; nptr
1BF86:	call    _atoi
1BF8B:	movsxd  rdx, eax; bin_size
1BF8E:	mov     rcx, [rbp+other]
1BF95:	mov     rax, [rbp+this]
1BF9C:	mov     rsi, rcx; other
1BF9F:	mov     rdi, rax; this
1BFA2:	mov     eax, 0
1BFA7:	call    panel_act_BIN_PACKING
1BFAC:	jmp     loc_1C33E
1BFB1:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 48
1BFB8:	mov     eax, [rax+74h]
1BFBB:	sub     eax, [rbp+repeat_count]
1BFC1:	mov     edx, eax
1BFC3:	mov     rax, [rbp+this]
1BFCA:	mov     [rax+74h], edx
1BFCD:	mov     rax, [rbp+this]
1BFD4:	mov     eax, [rax+74h]
1BFD7:	test    eax, eax
1BFD9:	jns     short loc_1BFE9
1BFDB:	mov     rax, [rbp+this]
1BFE2:	mov     dword ptr [rax+74h], 0
1BFE9:	mov     rax, [rbp+this]
1BFF0:	mov     rdi, rax; this
1BFF3:	call    panel_update
1BFF8:	jmp     loc_1C33E
1BFFD:	mov     rax, [rbp+this]; jumptable 000000000001A90E case 49
1C004:	mov     edx, [rax+74h]
1C007:	mov     eax, [rbp+repeat_count]
1C00D:	add     edx, eax
1C00F:	mov     rax, [rbp+this]
1C016:	mov     [rax+74h], edx
1C019:	mov     rax, [rbp+this]
1C020:	mov     eax, [rax+30h]
1C023:	lea     r12d, [rax+1]
1C027:	mov     rax, [rbp+this]
1C02E:	mov     ebx, [rax+64h]
1C031:	mov     rax, [rbp+this]
1C038:	mov     rdi, rax; this
1C03B:	mov     eax, 0
1C040:	call    panel_get_reserved_characters
1C045:	sub     ebx, eax
1C047:	mov     edx, ebx
1C049:	mov     eax, r12d
1C04C:	sub     eax, edx
1C04E:	mov     [rbp+max_offset], eax
1C054:	cmp     [rbp+max_offset], 0
1C05B:	jns     short loc_1C067
1C05D:	mov     [rbp+max_offset], 0
1C067:	mov     rax, [rbp+this]
1C06E:	mov     eax, [rax+74h]
1C071:	cmp     [rbp+max_offset], eax
1C077:	jg      short loc_1C089
1C079:	mov     rax, [rbp+this]
1C080:	mov     edx, [rbp+max_offset]
1C086:	mov     [rax+74h], edx
1C089:	mov     rax, [rbp+this]
1C090:	mov     rdi, rax; this
1C093:	call    panel_update
1C098:	jmp     loc_1C33E
1C09D:	mov     rax, [rbp+this]; jumptable 000000000001A90E cases 50,51
1C0A4:	mov     rcx, [rax+38h]
1C0A8:	mov     rax, [rbp+this]
1C0AF:	mov     eax, [rax+28h]
1C0B2:	movsxd  rdx, eax
1C0B5:	mov     rax, rdx
1C0B8:	shl     rax, 2
1C0BC:	add     rax, rdx
1C0BF:	shl     rax, 4
1C0C3:	add     rax, rcx
1C0C6:	mov     rax, [rax]
1C0C9:	mov     esi, 2Eh ; '.'; c
1C0CE:	mov     rdi, rax; s
1C0D1:	call    _strrchr
1C0D6:	mov     [rbp+ptr], rax
1C0DA:	mov     rax, [rbp+this]
1C0E1:	mov     rcx, [rax+38h]
1C0E5:	mov     rax, [rbp+this]
1C0EC:	mov     eax, [rax+28h]
1C0EF:	movsxd  rdx, eax
1C0F2:	mov     rax, rdx
1C0F5:	shl     rax, 2
1C0F9:	add     rax, rdx
1C0FC:	shl     rax, 4
1C100:	add     rax, rcx
1C103:	mov     rax, [rax]
1C106:	cmp     [rbp+ptr], rax
1C10A:	jz      loc_1C33E
1C110:	cmp     [rbp+ptr], 0
1C115:	jz      loc_1C33E
1C11B:	mov     rax, [rbp+ptr]
1C11F:	mov     rdi, rax; s
1C122:	call    _strlen
1C127:	add     rax, 2
1C12B:	mov     rdi, rax; size
1C12E:	call    _malloc
1C133:	mov     [rbp+extension], rax
1C137:	mov     rdx, [rbp+ptr]
1C13B:	mov     rax, [rbp+extension]
1C13F:	lea     rcx, aS_10; '*%s'
1C146:	mov     rsi, rcx; format
1C149:	mov     rdi, rax; s
1C14C:	mov     eax, 0
1C151:	call    _sprintf
1C156:	mov     [rbp+entry], 0
1C160:	jmp     loc_1C2DD
1C165:	mov     rax, [rbp+this]
1C16C:	mov     rcx, [rax+38h]
1C170:	mov     eax, [rbp+entry]
1C176:	movsxd  rdx, eax
1C179:	mov     rax, rdx
1C17C:	shl     rax, 2
1C180:	add     rax, rdx
1C183:	shl     rax, 4
1C187:	add     rax, rcx
1C18A:	movzx   eax, byte ptr [rax+48h]
1C18E:	test    al, al
1C190:	jz      loc_1C2D6
1C196:	mov     [rbp+fnm_flags_0], 1
1C19D:	mov     eax, cs:LeadingDotMatch
1C1A3:	test    eax, eax
1C1A5:	jnz     short loc_1C1AB
1C1A7:	or      [rbp+fnm_flags_0], 4
1C1AB:	mov     rax, [rbp+this]
1C1B2:	mov     rcx, [rax+38h]
1C1B6:	mov     eax, [rbp+entry]
1C1BC:	movsxd  rdx, eax
1C1BF:	mov     rax, rdx
1C1C2:	shl     rax, 2
1C1C6:	add     rax, rdx
1C1C9:	shl     rax, 4
1C1CD:	add     rax, rcx
1C1D0:	mov     rcx, [rax]
1C1D3:	mov     edx, [rbp+fnm_flags_0]; flags
1C1D6:	mov     rax, [rbp+extension]
1C1DA:	mov     rsi, rcx; name
1C1DD:	mov     rdi, rax; pattern
1C1E0:	call    _fnmatch
1C1E5:	test    eax, eax
1C1E7:	jnz     loc_1C2D6
1C1ED:	cmp     [rbp+action], 32h ; '2'
1C1F4:	jnz     short loc_1C269
1C1F6:	mov     rax, [rbp+this]
1C1FD:	mov     rcx, [rax+38h]
1C201:	mov     eax, [rbp+entry]
1C207:	movsxd  rdx, eax
1C20A:	mov     rax, rdx
1C20D:	shl     rax, 2
1C211:	add     rax, rdx
1C214:	shl     rax, 4
1C218:	add     rax, rcx
1C21B:	movzx   eax, byte ptr [rax+49h]
1C21F:	test    al, al
1C221:	jnz     loc_1C2D6
1C227:	mov     rax, [rbp+this]
1C22E:	mov     rcx, [rax+38h]
1C232:	mov     eax, [rbp+entry]
1C238:	movsxd  rdx, eax
1C23B:	mov     rax, rdx
1C23E:	shl     rax, 2
1C242:	add     rax, rdx
1C245:	shl     rax, 4
1C249:	add     rax, rcx
1C24C:	mov     byte ptr [rax+49h], 1
1C250:	mov     rax, [rbp+this]
1C257:	mov     eax, [rax+70h]
1C25A:	lea     edx, [rax+1]
1C25D:	mov     rax, [rbp+this]
1C264:	mov     [rax+70h], edx
1C267:	jmp     short loc_1C2D6
1C269:	mov     rax, [rbp+this]
1C270:	mov     rcx, [rax+38h]
1C274:	mov     eax, [rbp+entry]
1C27A:	movsxd  rdx, eax
1C27D:	mov     rax, rdx
1C280:	shl     rax, 2
1C284:	add     rax, rdx
1C287:	shl     rax, 4
1C28B:	add     rax, rcx
1C28E:	movzx   eax, byte ptr [rax+49h]
1C292:	test    al, al
1C294:	jz      short loc_1C2D6
1C296:	mov     rax, [rbp+this]
1C29D:	mov     rcx, [rax+38h]
1C2A1:	mov     eax, [rbp+entry]
1C2A7:	movsxd  rdx, eax
1C2AA:	mov     rax, rdx
1C2AD:	shl     rax, 2
1C2B1:	add     rax, rdx
1C2B4:	shl     rax, 4
1C2B8:	add     rax, rcx
1C2BB:	mov     byte ptr [rax+49h], 0
1C2BF:	mov     rax, [rbp+this]
1C2C6:	mov     eax, [rax+70h]
1C2C9:	lea     edx, [rax-1]
1C2CC:	mov     rax, [rbp+this]
1C2D3:	mov     [rax+70h], edx
1C2D6:	add     [rbp+entry], 1
1C2DD:	mov     rax, [rbp+this]
1C2E4:	mov     eax, [rax+68h]
1C2E7:	cmp     [rbp+entry], eax
1C2ED:	jl      loc_1C165
1C2F3:	mov     rax, [rbp+this]
1C2FA:	mov     rdi, rax; this
1C2FD:	mov     eax, 0
1C302:	call    panel_update_entries
1C307:	mov     rax, [rbp+this]
1C30E:	mov     rdi, rax; this
1C311:	mov     eax, 0
1C316:	call    panel_update_info
1C31B:	jmp     short loc_1C33E
1C31D:	lea     rax, aNoAction; jumptable 000000000001A90E default case, case 0
1C324:	mov     rdi, rax; postmsg
1C327:	call    fatal
1C32C:	jmp     short loc_1C33E
1C32E:	nop
1C32F:	jmp     short loc_1C33E
1C331:	nop
1C332:	jmp     short loc_1C33E
1C334:	nop
1C335:	jmp     short loc_1C33E
1C337:	nop
1C338:	jmp     short loc_1C33E
1C33A:	nop
1C33B:	jmp     short loc_1C33E
1C33D:	nop
1C33E:	mov     eax, 0
1C343:	mov     rdx, [rbp+var_18]
1C347:	sub     rdx, fs:28h
1C350:	jz      short loc_1C357
1C352:	call    ___stack_chk_fail
1C357:	add     rsp, 0B0h
1C35E:	pop     rbx
1C35F:	pop     r12
1C361:	pop     rbp
1C362:	retn
1C363:	endbr64
1C367:	push    rbp
1C368:	mov     rbp, rsp
1C36B:	mov     rax, cs:mail_string
1C372:	mov     rdi, rax; s
1C375:	call    _strlen
1C37A:	mov     edx, eax
1C37C:	mov     eax, cs:login_name_length
1C382:	add     edx, eax
1C384:	mov     eax, cs:tty_device_length_0
1C38A:	add     eax, edx
1C38C:	add     eax, 15h
1C38F:	mov     cs:info_length, eax
1C395:	mov     eax, cs:info_length
1C39B:	pop     rbp
1C39C:	retn
1C39D:	endbr64
1C3A1:	push    rbp
1C3A2:	mov     rbp, rsp
1C3A5:	sub     rsp, 0A0h
1C3AC:	mov     rax, fs:28h
1C3B5:	mov     [rbp+var_8], rax
1C3B9:	xor     eax, eax
1C3BB:	mov     edi, 1Dh; n
1C3C0:	call    xmalloc
1C3C5:	mov     cs:product_name, rax
1C3CC:	mov     rax, cs:product_name
1C3D3:	lea     rdx, a492_0; '4.9.2'
1C3DA:	mov     rcx, rdx
1C3DD:	lea     rdx, aGnuInteractive_1; 'GNU Interactive Tools'
1C3E4:	lea     rsi, aSS_3; ' %s %s'
1C3EB:	mov     rdi, rax; s
1C3EE:	mov     eax, 0
1C3F3:	call    _sprintf
1C3F8:	mov     rax, cs:product_name
1C3FF:	mov     rdi, rax; s
1C402:	call    _strlen
1C407:	mov     cs:product_name_length, eax
1C40D:	mov     rax, cs:login_name
1C414:	mov     rdi, rax; s
1C417:	call    _strlen
1C41C:	mov     cs:login_name_length, eax
1C422:	mov     rax, cs:tty_device
1C429:	mov     rdi, rax; s
1C42C:	call    _strlen
1C431:	mov     cs:tty_device_length_0, eax
1C437:	lea     rax, aMail_0; 'MAIL'
1C43E:	mov     rdi, rax; name
1C441:	call    _getenv
1C446:	mov     cs:mail_file, rax
1C44D:	mov     rax, cs:mail_file
1C454:	test    rax, rax
1C457:	jz      short loc_1C48D
1C459:	mov     rax, cs:mail_file
1C460:	lea     rdx, [rbp+s]
1C467:	mov     rsi, rdx; buf
1C46A:	mov     rdi, rax; filename
1C46D:	call    xstat
1C472:	cmp     eax, 0FFFFFFFFh
1C475:	jz      short loc_1C48D
1C477:	mov     rax, [rbp+s.st_size]
1C47B:	mov     cs:mail_size, rax
1C482:	mov     rax, [rbp+s.st_mtim.tv_sec]
1C486:	mov     cs:mail_mtime, rax
1C48D:	mov     eax, 0
1C492:	call    mail_check
1C497:	mov     eax, 0
1C49C:	call    calc_info_length
1C4A1:	mov     cs:info_length, eax
1C4A7:	mov     eax, 0
1C4AC:	call    window_init
1C4B1:	mov     cs:title_window, rax
1C4B8:	nop
1C4B9:	mov     rax, [rbp+var_8]
1C4BD:	sub     rax, fs:28h
1C4C6:	jz      short locret_1C4CD
1C4C8:	call    ___stack_chk_fail
1C4CD:	leave
1C4CE:	retn
1C4CF:	endbr64
1C4D3:	push    rbp
1C4D4:	mov     rbp, rsp
1C4D7:	mov     rax, cs:title_window
1C4DE:	mov     rdi, rax; window
1C4E1:	call    mprRemoveSignalHandler
1C4E6:	nop
1C4E7:	pop     rbp
1C4E8:	retn
1C4E9:	endbr64
1C4ED:	push    rbp
1C4EE:	mov     rbp, rsp
1C4F1:	sub     rsp, 10h
1C4F5:	mov     [rbp+columns], rdi
1C4F9:	mov     [rbp+line], rsi
1C4FD:	mov     rax, [rbp+columns]
1C501:	mov     ecx, eax
1C503:	mov     rax, [rbp+line]
1C507:	mov     edx, eax; y
1C509:	mov     rax, cs:title_window
1C510:	mov     r8d, ecx; columns
1C513:	mov     ecx, 1; lines
1C518:	mov     esi, 0; x
1C51D:	mov     rdi, rax; window
1C520:	call    window_resize
1C525:	nop
1C526:	leave
1C527:	retn
1C528:	endbr64
1C52C:	push    rbp
1C52D:	mov     rbp, rsp
1C530:	sub     rsp, 50h
1C534:	mov     [rbp+signum], edi
1C537:	mov     rax, fs:28h
1C540:	mov     [rbp+var_8], rax
1C544:	xor     eax, eax
1C546:	mov     eax, 0
1C54B:	call    in_terminal_mode
1C550:	test    eax, eax
1C552:	jnz     loc_1C6D9
1C558:	mov     eax, cs:product_name_length
1C55E:	lea     edx, [rax+2]
1C561:	mov     eax, cs:info_length
1C567:	add     edx, eax
1C569:	mov     rax, cs:title_window
1C570:	mov     eax, [rax+0Ch]
1C573:	cmp     edx, eax
1C575:	jge     loc_1C6DC
1C57B:	cmp     [rbp+signum], 0
1C57F:	jz      short loc_1C599
1C581:	mov     eax, 0
1C586:	call    mail_check
1C58B:	test    eax, eax
1C58D:	jz      short loc_1C599
1C58F:	mov     eax, 0
1C594:	call    title_update
1C599:	mov     eax, 0
1C59E:	call    get_local_time
1C5A3:	mov     [rbp+time], rax
1C5A7:	lea     rax, [rbp+status]
1C5AB:	mov     rdi, rax; status
1C5AE:	call    tty_save
1C5B3:	lea     rdx, [rbp+column]
1C5B7:	lea     rax, [rbp+line]
1C5BB:	mov     rsi, rdx; x
1C5BE:	mov     rdi, rax; y
1C5C1:	call    tty_get_cursor
1C5C6:	mov     edi, 0; status
1C5CB:	call    tty_cursor
1C5D0:	mov     rax, [rbp+time]
1C5D4:	mov     edx, [rax+8]
1C5D7:	movsxd  rax, edx
1C5DA:	imul    rax, 2AAAAAABh
1C5E1:	shr     rax, 20h
1C5E5:	sar     eax, 1
1C5E7:	mov     ecx, edx
1C5E9:	sar     ecx, 1Fh
1C5EC:	sub     eax, ecx
1C5EE:	mov     [rbp+hour], eax
1C5F1:	mov     ecx, [rbp+hour]
1C5F4:	mov     eax, ecx
1C5F6:	add     eax, eax
1C5F8:	add     eax, ecx
1C5FA:	shl     eax, 2
1C5FD:	sub     edx, eax
1C5FF:	mov     [rbp+hour], edx
1C602:	cmp     [rbp+hour], 0
1C606:	jnz     short loc_1C60F
1C608:	mov     [rbp+hour], 0Ch
1C60F:	mov     rax, [rbp+time]
1C613:	mov     eax, [rax+8]
1C616:	cmp     eax, 0Bh
1C619:	jg      short loc_1C622
1C61B:	mov     esi, 61h ; 'a'
1C620:	jmp     short loc_1C627
1C622:	mov     esi, 70h ; 'p'
1C627:	mov     rax, [rbp+time]
1C62B:	mov     ecx, [rax+4]
1C62E:	mov     edx, [rbp+hour]
1C631:	lea     rax, [rbp+buf]
1C635:	mov     r8d, esi
1C638:	lea     rsi, a2d02dC; '%2d:%02d%c'
1C63F:	mov     rdi, rax; s
1C642:	mov     eax, 0
1C647:	call    _sprintf
1C64C:	mov     rax, cs:title_window
1C653:	mov     eax, [rax+0Ch]
1C656:	lea     edx, [rax-7]; x
1C659:	mov     rax, cs:title_window
1C660:	mov     esi, 0; y
1C665:	mov     rdi, rax; window
1C668:	call    window_goto
1C66D:	mov     edx, cs:TitleColors+18h; background
1C673:	mov     ecx, cs:TitleColors+14h
1C679:	mov     eax, cs:TitleColors+1Ch
1C67F:	mov     esi, ecx; foreground
1C681:	mov     edi, eax; brightness
1C683:	call    tty_colors
1C688:	lea     rax, [rbp+buf]
1C68C:	mov     rdi, rax; s
1C68F:	call    _strlen
1C694:	mov     edx, eax; length
1C696:	mov     rax, cs:title_window
1C69D:	lea     rcx, [rbp+buf]
1C6A1:	mov     rsi, rcx; str
1C6A4:	mov     rdi, rax; window
1C6A7:	call    window_puts
1C6AC:	mov     edx, [rbp+column]
1C6AF:	mov     eax, [rbp+line]
1C6B2:	mov     esi, edx; x
1C6B4:	mov     edi, eax; y
1C6B6:	call    tty_goto
1C6BB:	lea     rax, [rbp+status]
1C6BF:	mov     rdi, rax; status
1C6C2:	call    tty_restore
1C6C7:	cmp     [rbp+signum], 0
1C6CB:	jz      short loc_1C6DD
1C6CD:	mov     eax, 0
1C6D2:	call    tty_update
1C6D7:	jmp     short loc_1C6DD
1C6D9:	nop
1C6DA:	jmp     short loc_1C6DD
1C6DC:	nop
1C6DD:	mov     rax, [rbp+var_8]
1C6E1:	sub     rax, fs:28h
1C6EA:	jz      short locret_1C6F1
1C6EC:	call    ___stack_chk_fail
1C6F1:	leave
1C6F2:	retn
1C6F3:	endbr64
1C6F7:	push    rbp
1C6F8:	mov     rbp, rsp
1C6FB:	sub     rsp, 8E0h
1C702:	mov     rax, fs:28h
1C70B:	mov     [rbp+var_8], rax
1C70F:	xor     eax, eax
1C711:	mov     rax, cs:mail_string
1C718:	mov     [rbp+old_mail], rax
1C71F:	lea     rax, mail_have_none
1C726:	mov     cs:mail_string, rax
1C72D:	mov     [rbp+total], 0
1C737:	mov     [rbp+read], 0
1C741:	mov     [rbp+inheaders], 0
1C74B:	mov     [rbp+gotstatus], 0
1C755:	mov     rax, cs:mail_file
1C75C:	test    rax, rax
1C75F:	jnz     short loc_1C76B
1C761:	mov     eax, 0
1C766:	jmp     loc_1C9DE
1C76B:	mov     rax, cs:mail_file
1C772:	lea     rdx, [rbp+s]
1C779:	mov     rsi, rdx; buf
1C77C:	mov     rdi, rax; filename
1C77F:	call    xstat
1C784:	cmp     eax, 0FFFFFFFFh
1C787:	jnz     short loc_1C793
1C789:	mov     eax, 0
1C78E:	jmp     loc_1C9DE
1C793:	mov     rax, [rbp+s.st_atim.tv_sec]
1C79A:	mov     [rbp+utbuf.actime], rax
1C7A1:	mov     rax, [rbp+s.st_mtim.tv_sec]
1C7A8:	mov     [rbp+utbuf.modtime], rax
1C7AF:	mov     rax, cs:mail_file
1C7B6:	lea     rdx, modes; 'r'
1C7BD:	mov     rsi, rdx; modes
1C7C0:	mov     rdi, rax; filename
1C7C3:	call    _fopen
1C7C8:	mov     [rbp+mbox], rax
1C7CF:	cmp     [rbp+mbox], 0
1C7D7:	jnz     loc_1C924
1C7DD:	mov     eax, 0
1C7E2:	jmp     loc_1C9DE
1C7E7:	movzx   eax, [rbp+line]
1C7EE:	movzx   eax, al
1C7F1:	test    eax, eax
1C7F3:	jnz     short loc_1C804
1C7F5:	mov     [rbp+inheaders], 0
1C7FF:	jmp     loc_1C924
1C804:	lea     rax, [rbp+line]
1C80B:	mov     edx, 5; n
1C810:	lea     rcx, aFrom; 'From '
1C817:	mov     rsi, rcx; s2
1C81A:	mov     rdi, rax; s1
1C81D:	call    _strncmp
1C822:	test    eax, eax
1C824:	jnz     short loc_1C846
1C826:	mov     [rbp+inheaders], 1
1C830:	mov     [rbp+gotstatus], 0
1C83A:	add     [rbp+total], 1
1C841:	jmp     loc_1C924
1C846:	cmp     [rbp+inheaders], 0
1C84D:	jz      loc_1C924
1C853:	cmp     [rbp+gotstatus], 0
1C85A:	jnz     loc_1C924
1C860:	lea     rax, [rbp+line]
1C867:	mov     edx, 7; n
1C86C:	lea     rcx, aStatus; 'Status:'
1C873:	mov     rsi, rcx; s2
1C876:	mov     rdi, rax; s1
1C879:	call    _strncmp
1C87E:	test    eax, eax
1C880:	jnz     loc_1C924
1C886:	lea     rax, [rbp+line]
1C88D:	mov     esi, 3Ah ; ':'; c
1C892:	mov     rdi, rax; s
1C895:	call    _strchr
1C89A:	mov     [rbp+status], rax
1C8A1:	add     [rbp+status], 1
1C8A9:	jmp     short loc_1C8B3
1C8AB:	add     [rbp+status], 1
1C8B3:	mov     rax, [rbp+status]
1C8BA:	movzx   eax, byte ptr [rax]
1C8BD:	test    al, al
1C8BF:	jz      short loc_1C8EC
1C8C1:	call    ___ctype_b_loc
1C8C6:	mov     rdx, [rax]
1C8C9:	mov     rax, [rbp+status]
1C8D0:	movzx   eax, byte ptr [rax]
1C8D3:	movsx   rax, al
1C8D7:	add     rax, rax
1C8DA:	add     rax, rdx
1C8DD:	movzx   eax, word ptr [rax]
1C8E0:	movzx   eax, ax
1C8E3:	and     eax, 2000h
1C8E8:	test    eax, eax
1C8EA:	jnz     short loc_1C8AB
1C8EC:	mov     rax, [rbp+status]
1C8F3:	movzx   eax, byte ptr [rax]
1C8F6:	test    al, al
1C8F8:	jz      short loc_1C924
1C8FA:	mov     [rbp+gotstatus], 1
1C904:	mov     rax, [rbp+status]
1C90B:	mov     esi, 52h ; 'R'; c
1C910:	mov     rdi, rax; s
1C913:	call    _strchr
1C918:	test    rax, rax
1C91B:	jz      short loc_1C924
1C91D:	add     [rbp+read], 1
1C924:	mov     rdx, [rbp+mbox]; stream
1C92B:	lea     rax, [rbp+line]
1C932:	mov     esi, 800h; n
1C937:	mov     rdi, rax; s
1C93A:	call    _fgets
1C93F:	test    rax, rax
1C942:	jnz     loc_1C7E7
1C948:	mov     rax, [rbp+mbox]
1C94F:	mov     rdi, rax; stream
1C952:	call    _fclose
1C957:	mov     rax, cs:mail_file
1C95E:	lea     rdx, [rbp+utbuf]
1C965:	mov     rsi, rdx; file_times
1C968:	mov     rdi, rax; file
1C96B:	call    _utime
1C970:	cmp     [rbp+total], 0
1C977:	jz      short loc_1C9A5
1C979:	mov     eax, [rbp+total]
1C97F:	cmp     eax, [rbp+read]
1C985:	jz      short loc_1C997
1C987:	lea     rax, mail_have_new; '(New Mail)'
1C98E:	mov     cs:mail_string, rax
1C995:	jmp     short loc_1C9A5
1C997:	lea     rax, mail_have_mail; '(Mail)'
1C99E:	mov     cs:mail_string, rax
1C9A5:	mov     eax, 0
1C9AA:	call    calc_info_length
1C9AF:	mov     cs:info_length, eax
1C9B5:	mov     rax, cs:mail_string
1C9BC:	mov     rdx, [rbp+old_mail]
1C9C3:	mov     rsi, rdx; s2
1C9C6:	mov     rdi, rax; s1
1C9C9:	call    _strcmp
1C9CE:	test    eax, eax
1C9D0:	jnz     short loc_1C9D9
1C9D2:	mov     eax, 0
1C9D7:	jmp     short loc_1C9DE
1C9D9:	mov     eax, 1
1C9DE:	mov     rdx, [rbp+var_8]
1C9E2:	sub     rdx, fs:28h
1C9EB:	jz      short locret_1C9F2
1C9ED:	call    ___stack_chk_fail
1C9F2:	leave
1C9F3:	retn
1C9F4:	endbr64
1C9F8:	push    rbp
1C9F9:	mov     rbp, rsp
1C9FC:	sub     rsp, 20h
1CA00:	mov     rax, fs:28h
1CA09:	mov     [rbp+var_8], rax
1CA0D:	xor     eax, eax
1CA0F:	lea     rax, [rbp+status]
1CA13:	mov     rdi, rax; status
1CA16:	call    tty_save
1CA1B:	mov     edx, cs:TitleColors+4; background
1CA21:	mov     ecx, cs:TitleColors
1CA27:	mov     eax, cs:TitleColors+8
1CA2D:	mov     esi, ecx; foreground
1CA2F:	mov     edi, eax; brightness
1CA31:	call    tty_colors
1CA36:	mov     rax, cs:title_window
1CA3D:	mov     edx, 0; x
1CA42:	mov     esi, 0; y
1CA47:	mov     rdi, rax; window
1CA4A:	call    window_goto
1CA4F:	mov     edx, cs:product_name_length; length
1CA55:	mov     rcx, cs:product_name
1CA5C:	mov     rax, cs:title_window
1CA63:	mov     rsi, rcx; str
1CA66:	mov     rdi, rax; window
1CA69:	call    window_puts
1CA6E:	mov     rax, cs:title_window
1CA75:	mov     eax, [rax+0Ch]
1CA78:	add     eax, 1
1CA7B:	cdqe
1CA7D:	mov     rdi, rax; n
1CA80:	call    xmalloc
1CA85:	mov     [rbp+buf], rax
1CA89:	mov     eax, 0
1CA8E:	call    mail_check
1CA93:	mov     eax, cs:product_name_length
1CA99:	lea     edx, [rax+2]
1CA9C:	mov     eax, cs:info_length
1CAA2:	add     edx, eax
1CAA4:	mov     rax, cs:title_window
1CAAB:	mov     eax, [rax+0Ch]
1CAAE:	cmp     edx, eax
1CAB0:	jge     loc_1CCA4
1CAB6:	mov     rax, cs:title_window
1CABD:	mov     eax, [rax+0Ch]
1CAC0:	mov     edx, cs:product_name_length
1CAC6:	sub     eax, edx
1CAC8:	mov     edx, cs:info_length
1CACE:	sub     eax, edx
1CAD0:	mov     [rbp+length], eax
1CAD3:	mov     eax, [rbp+length]
1CAD6:	movsxd  rdx, eax; n
1CAD9:	mov     rax, [rbp+buf]
1CADD:	mov     esi, 20h ; ' '; c
1CAE2:	mov     rdi, rax; s
1CAE5:	call    _memset
1CAEA:	mov     rax, cs:title_window
1CAF1:	mov     edx, [rbp+length]; length
1CAF4:	mov     rcx, [rbp+buf]
1CAF8:	mov     rsi, rcx; str
1CAFB:	mov     rdi, rax; window
1CAFE:	call    window_puts
1CB03:	mov     edx, cs:product_name_length
1CB09:	mov     eax, [rbp+length]
1CB0C:	add     edx, eax; x
1CB0E:	mov     rax, cs:title_window
1CB15:	mov     esi, 0; y
1CB1A:	mov     rdi, rax; window
1CB1D:	call    window_goto
1CB22:	mov     rax, cs:title_window
1CB29:	mov     edx, 5; length
1CB2E:	lea     rcx, login_string; 'User:'
1CB35:	mov     rsi, rcx; str
1CB38:	mov     rdi, rax; window
1CB3B:	call    window_puts
1CB40:	mov     rax, cs:title_window
1CB47:	mov     esi, 20h ; ' '; c
1CB4C:	mov     rdi, rax; window
1CB4F:	call    window_putc
1CB54:	mov     eax, cs:TitleColors+0Ch
1CB5A:	mov     edi, eax; color
1CB5C:	call    tty_foreground
1CB61:	mov     edx, cs:login_name_length; length
1CB67:	mov     rcx, cs:login_name
1CB6E:	mov     rax, cs:title_window
1CB75:	mov     rsi, rcx; str
1CB78:	mov     rdi, rax; window
1CB7B:	call    window_puts
1CB80:	mov     rax, cs:title_window
1CB87:	mov     esi, 20h ; ' '; c
1CB8C:	mov     rdi, rax; window
1CB8F:	call    window_putc
1CB94:	mov     rax, cs:mail_string
1CB9B:	mov     rdi, rax; s
1CB9E:	call    _strlen
1CBA3:	mov     edx, eax; length
1CBA5:	mov     rcx, cs:mail_string
1CBAC:	mov     rax, cs:title_window
1CBB3:	mov     rsi, rcx; str
1CBB6:	mov     rdi, rax; window
1CBB9:	call    window_puts
1CBBE:	mov     rax, cs:title_window
1CBC5:	mov     esi, 20h ; ' '; c
1CBCA:	mov     rdi, rax; window
1CBCD:	call    window_putc
1CBD2:	mov     eax, cs:TitleColors
1CBD8:	mov     edi, eax; color
1CBDA:	call    tty_foreground
1CBDF:	mov     rax, cs:title_window
1CBE6:	mov     edx, 4; length
1CBEB:	lea     rcx, ttydev_string; 'tty:'
1CBF2:	mov     rsi, rcx; str
1CBF5:	mov     rdi, rax; window
1CBF8:	call    window_puts
1CBFD:	mov     rax, cs:title_window
1CC04:	mov     esi, 20h ; ' '; c
1CC09:	mov     rdi, rax; window
1CC0C:	call    window_putc
1CC11:	mov     eax, cs:TitleColors+10h
1CC17:	mov     edi, eax; color
1CC19:	call    tty_foreground
1CC1E:	mov     edx, cs:tty_device_length_0; length
1CC24:	mov     rcx, cs:tty_device
1CC2B:	mov     rax, cs:title_window
1CC32:	mov     rsi, rcx; str
1CC35:	mov     rdi, rax; window
1CC38:	call    window_puts
1CC3D:	mov     eax, cs:TitleColors
1CC43:	mov     edi, eax; color
1CC45:	call    tty_foreground
1CC4A:	mov     rax, cs:title_window
1CC51:	mov     esi, 20h ; ' '; c
1CC56:	mov     rdi, rax; window
1CC59:	call    window_putc
1CC5E:	mov     edi, 0; signum
1CC63:	mov     eax, 0
1CC68:	call    clock_refresh
1CC6D:	mov     rax, cs:title_window
1CC74:	mov     eax, [rax+0Ch]
1CC77:	lea     edx, [rax-1]; x
1CC7A:	mov     rax, cs:title_window
1CC81:	mov     esi, 0; y
1CC86:	mov     rdi, rax; window
1CC89:	call    window_goto
1CC8E:	mov     rax, cs:title_window
1CC95:	mov     esi, 20h ; ' '; c
1CC9A:	mov     rdi, rax; window
1CC9D:	call    window_putc
1CCA2:	jmp     short loc_1CCFD
1CCA4:	mov     rax, cs:title_window
1CCAB:	mov     edx, [rax+0Ch]
1CCAE:	mov     eax, cs:product_name_length
1CCB4:	cmp     edx, eax
1CCB6:	jle     short loc_1CCFD
1CCB8:	mov     rax, cs:title_window
1CCBF:	mov     eax, [rax+0Ch]
1CCC2:	mov     edx, cs:product_name_length
1CCC8:	sub     eax, edx
1CCCA:	mov     [rbp+length], eax
1CCCD:	mov     eax, [rbp+length]
1CCD0:	movsxd  rdx, eax; n
1CCD3:	mov     rax, [rbp+buf]
1CCD7:	mov     esi, 20h ; ' '; c
1CCDC:	mov     rdi, rax; s
1CCDF:	call    _memset
1CCE4:	mov     rax, cs:title_window
1CCEB:	mov     edx, [rbp+length]; length
1CCEE:	mov     rcx, [rbp+buf]
1CCF2:	mov     rsi, rcx; str
1CCF5:	mov     rdi, rax; window
1CCF8:	call    window_puts
1CCFD:	mov     rax, [rbp+buf]
1CD01:	mov     rdi, rax; pointer
1CD04:	call    xfree
1CD09:	lea     rax, [rbp+status]
1CD0D:	mov     rdi, rax; status
1CD10:	call    tty_restore
1CD15:	nop
1CD16:	mov     rax, [rbp+var_8]
1CD1A:	sub     rax, fs:28h
1CD23:	jz      short locret_1CD2A
1CD25:	call    ___stack_chk_fail
1CD2A:	leave
1CD2B:	retn
1CD2C:	endbr64
1CD30:	push    rbp
1CD31:	mov     rbp, rsp
1CD34:	sub     rsp, 10h
1CD38:	mov     [rbp+file_name], rdi
1CD3C:	cmp     [rbp+file_name], 0
1CD41:	jnz     short loc_1CD4A
1CD43:	mov     eax, 0
1CD48:	jmp     short locret_1CD89
1CD4A:	mov     rax, [rbp+file_name]
1CD4E:	lea     rdx, aR; 'r'
1CD55:	mov     rsi, rdx; modes
1CD58:	mov     rdi, rax; filename
1CD5B:	call    _fopen
1CD60:	mov     cs:fileptr, rax
1CD67:	mov     rax, cs:fileptr
1CD6E:	test    rax, rax
1CD71:	jnz     short loc_1CD7A
1CD73:	mov     eax, 0
1CD78:	jmp     short locret_1CD89
1CD7A:	mov     cs:sectionptr, 0FFFFFFFFh
1CD84:	mov     eax, 1
1CD89:	leave
1CD8A:	retn
1CD8B:	endbr64
1CD8F:	push    rbp
1CD90:	mov     rbp, rsp
1CD93:	mov     rax, cs:fileptr
1CD9A:	test    rax, rax
1CD9D:	jz      short loc_1CDAE
1CD9F:	mov     rax, cs:fileptr
1CDA6:	mov     rdi, rax; stream
1CDA9:	call    _fclose
1CDAE:	nop
1CDAF:	pop     rbp
1CDB0:	retn
1CDB1:	endbr64
1CDB5:	push    rbp
1CDB6:	mov     rbp, rsp
1CDB9:	sub     rsp, 20h
1CDBD:	mov     rax, cs:fileptr
1CDC4:	mov     rdx, rax; stream
1CDC7:	mov     esi, 400h; n
1CDCC:	lea     rax, line
1CDD3:	mov     rdi, rax; s
1CDD6:	call    _fgets
1CDDB:	test    rax, rax
1CDDE:	jnz     short loc_1CDEA
1CDE0:	mov     eax, 0
1CDE5:	jmp     locret_1CEA3
1CDEA:	lea     rax, line
1CDF1:	mov     rdi, rax; s
1CDF4:	call    _strlen
1CDF9:	mov     [rbp+len], rax
1CDFD:	cmp     [rbp+len], 3FFh
1CE05:	jnz     short loc_1CE4C
1CE07:	mov     rdx, cs:g_program
1CE0E:	mov     rax, cs:stderr@GLIBC_2_2_5
1CE15:	lea     rcx, aSConfiguration; '%s: configuration: line too long. Trunc'...
1CE1C:	mov     rsi, rcx; format
1CE1F:	mov     rdi, rax; stream
1CE22:	mov     eax, 0
1CE27:	call    _fprintf
1CE2C:	mov     rax, cs:fileptr
1CE33:	mov     rdi, rax; stream
1CE36:	call    _fgetc
1CE3B:	mov     [rbp+c], eax
1CE3E:	cmp     [rbp+c], 0Ah
1CE42:	jz      short loc_1CE4C
1CE44:	cmp     [rbp+c], 0FFFFFFFFh
1CE48:	jz      short loc_1CE4C
1CE4A:	jmp     short loc_1CE2C
1CE4C:	mov     esi, 23h ; '#'; c
1CE51:	lea     rax, line
1CE58:	mov     rdi, rax; s
1CE5B:	call    _strchr
1CE60:	mov     [rbp+comment], rax
1CE64:	cmp     [rbp+comment], 0
1CE69:	jz      short loc_1CE74
1CE6B:	mov     rax, [rbp+comment]
1CE6F:	mov     byte ptr [rax], 0
1CE72:	jmp     short loc_1CE9E
1CE74:	mov     rax, [rbp+len]
1CE78:	lea     rdx, [rax-1]
1CE7C:	lea     rax, line
1CE83:	movzx   eax, byte ptr [rdx+rax]
1CE87:	cmp     al, 0Ah
1CE89:	jnz     short loc_1CE9E
1CE8B:	mov     rax, [rbp+len]
1CE8F:	lea     rdx, [rax-1]
1CE93:	lea     rax, line
1CE9A:	mov     byte ptr [rdx+rax], 0
1CE9E:	mov     eax, 1
1CEA3:	leave
1CEA4:	retn
1CEA5:	endbr64
1CEA9:	push    rbp
1CEAA:	mov     rbp, rsp
1CEAD:	sub     rsp, 10h
1CEB1:	mov     [rbp+section_name], rdi
1CEB5:	mov     rax, cs:fileptr
1CEBC:	mov     edx, 0; whence
1CEC1:	mov     esi, 0; off
1CEC6:	mov     rdi, rax; stream
1CEC9:	call    _fseek
1CECE:	jmp     short loc_1CF07
1CED0:	mov     rax, [rbp+section_name]
1CED4:	lea     rdx, line
1CEDB:	mov     rsi, rdx; s2
1CEDE:	mov     rdi, rax; s1
1CEE1:	call    _strcmp
1CEE6:	test    eax, eax
1CEE8:	jnz     short loc_1CF07
1CEEA:	mov     rax, cs:fileptr
1CEF1:	mov     rdi, rax; stream
1CEF4:	call    _ftell
1CEF9:	mov     cs:sectionptr, eax
1CEFF:	mov     eax, cs:sectionptr
1CF05:	jmp     short locret_1CF25
1CF07:	mov     eax, 0
1CF0C:	call    configuration_getline
1CF11:	test    eax, eax
1CF13:	jnz     short loc_1CED0
1CF15:	mov     cs:sectionptr, 0FFFFFFFFh
1CF1F:	mov     eax, cs:sectionptr
1CF25:	leave
1CF26:	retn
1CF27:	endbr64
1CF2B:	push    rbp
1CF2C:	mov     rbp, rsp
1CF2F:	push    rbx
1CF30:	sub     rsp, 458h
1CF37:	mov     [rbp+s1], rdi
1CF3E:	mov     [rbp+dest], rsi
1CF45:	mov     [rbp+fields], edx
1CF4B:	mov     [rbp+seek], ecx
1CF51:	mov     rax, fs:28h
1CF5A:	mov     [rbp+var_18], rax
1CF5E:	xor     eax, eax
1CF60:	cmp     [rbp+seek], 0
1CF67:	jz      short loc_1CF89
1CF69:	mov     eax, cs:sectionptr
1CF6F:	movsxd  rcx, eax
1CF72:	mov     rax, cs:fileptr
1CF79:	mov     edx, 0; whence
1CF7E:	mov     rsi, rcx; off
1CF81:	mov     rdi, rax; stream
1CF84:	call    _fseek
1CF89:	cmp     [rbp+fields], 1
1CF90:	jnz     short loc_1CFA5
1CF92:	mov     rax, [rbp+dest]
1CF99:	mov     qword ptr [rax], 0
1CFA0:	jmp     loc_1D35C
1CFA5:	mov     eax, [rbp+fields]
1CFAB:	cdqe
1CFAD:	lea     rdx, ds:0[rax*8]; n
1CFB5:	mov     rax, [rbp+dest]
1CFBC:	mov     esi, 0; c
1CFC1:	mov     rdi, rax; s
1CFC4:	call    _memset
1CFC9:	jmp     loc_1D35C
1CFCE:	mov     [rbp+buf], 0
1CFD5:	lea     rax, [rbp+buf]
1CFDC:	mov     rdx, rax
1CFDF:	lea     rax, aS_11; '%s'
1CFE6:	mov     rsi, rax
1CFE9:	lea     rax, line
1CFF0:	mov     rdi, rax
1CFF3:	mov     eax, 0
1CFF8:	call    ___isoc99_sscanf
1CFFD:	cmp     [rbp+seek], 0
1D004:	jnz     short loc_1D00D
1D006:	mov     [rbp+buf+20h], 0
1D00D:	call    ___ctype_b_loc
1D012:	mov     rdx, [rax]
1D015:	movzx   eax, [rbp+buf]
1D01C:	movsx   rax, al
1D020:	add     rax, rax
1D023:	add     rax, rdx
1D026:	movzx   eax, word ptr [rax]
1D029:	movzx   eax, ax
1D02C:	and     eax, 4000h
1D031:	test    eax, eax
1D033:	jz      loc_1D38E
1D039:	cmp     [rbp+seek], 0
1D040:	jz      short loc_1D063
1D042:	lea     rdx, [rbp+buf]
1D049:	mov     rax, [rbp+s1]
1D050:	mov     rsi, rdx; s2
1D053:	mov     rdi, rax; s1
1D056:	call    _strcmp
1D05B:	test    eax, eax
1D05D:	jnz     loc_1D35C
1D063:	mov     esi, 3Dh ; '='; c
1D068:	lea     rax, line
1D06F:	mov     rdi, rax; s
1D072:	call    _strchr
1D077:	mov     [rbp+ptr], rax
1D07E:	cmp     [rbp+ptr], 0
1D086:	jz      loc_1D185
1D08C:	add     [rbp+ptr], 1
1D094:	mov     rax, [rbp+ptr]
1D09B:	movzx   eax, byte ptr [rax]
1D09E:	test    al, al
1D0A0:	jz      loc_1D185
1D0A6:	mov     rax, [rbp+dest]
1D0AD:	mov     rdx, [rbp+ptr]
1D0B4:	mov     [rax], rdx
1D0B7:	mov     [rbp+fld], 1
1D0C1:	jmp     short loc_1D136
1D0C3:	mov     rax, [rbp+ptr]
1D0CA:	movzx   eax, byte ptr [rax]
1D0CD:	cmp     al, 3Bh ; ';'
1D0CF:	jnz     short loc_1D12E
1D0D1:	mov     rax, [rbp+ptr]
1D0D8:	mov     byte ptr [rax], 0
1D0DB:	mov     rax, [rbp+ptr]
1D0E2:	add     rax, 1
1D0E6:	movzx   eax, byte ptr [rax]
1D0E9:	test    al, al
1D0EB:	jz      short loc_1D127
1D0ED:	mov     rax, [rbp+ptr]
1D0F4:	add     rax, 1
1D0F8:	movzx   eax, byte ptr [rax]
1D0FB:	cmp     al, 3Bh ; ';'
1D0FD:	jz      short loc_1D127
1D0FF:	mov     eax, [rbp+fld]
1D105:	cdqe
1D107:	lea     rdx, ds:0[rax*8]
1D10F:	mov     rax, [rbp+dest]
1D116:	add     rax, rdx
1D119:	mov     rdx, [rbp+ptr]
1D120:	add     rdx, 1
1D124:	mov     [rax], rdx
1D127:	add     [rbp+fld], 1
1D12E:	add     [rbp+ptr], 1
1D136:	mov     rax, [rbp+ptr]
1D13D:	movzx   eax, byte ptr [rax]
1D140:	test    al, al
1D142:	jz      short loc_1D156
1D144:	mov     eax, [rbp+fld]
1D14A:	cmp     eax, [rbp+fields]
1D150:	jl      loc_1D0C3
1D156:	mov     rax, [rbp+ptr]
1D15D:	mov     esi, 3Bh ; ';'; c
1D162:	mov     rdi, rax; s
1D165:	call    _strchr
1D16A:	mov     [rbp+ptr], rax
1D171:	cmp     [rbp+ptr], 0
1D179:	jz      short loc_1D185
1D17B:	mov     rax, [rbp+ptr]
1D182:	mov     byte ptr [rax], 0
1D185:	mov     [rbp+fld], 0
1D18F:	jmp     loc_1D326
1D194:	mov     eax, [rbp+fld]
1D19A:	cdqe
1D19C:	lea     rdx, ds:0[rax*8]
1D1A4:	mov     rax, [rbp+dest]
1D1AB:	add     rax, rdx
1D1AE:	mov     rax, [rax]
1D1B1:	test    rax, rax
1D1B4:	jz      loc_1D31F
1D1BA:	jmp     short loc_1D1E0
1D1BC:	mov     eax, [rbp+fld]
1D1C2:	cdqe
1D1C4:	lea     rdx, ds:0[rax*8]
1D1CC:	mov     rax, [rbp+dest]
1D1D3:	add     rax, rdx
1D1D6:	mov     rdx, [rax]
1D1D9:	add     rdx, 1
1D1DD:	mov     [rax], rdx
1D1E0:	call    ___ctype_b_loc
1D1E5:	mov     rdx, [rax]
1D1E8:	mov     eax, [rbp+fld]
1D1EE:	cdqe
1D1F0:	lea     rcx, ds:0[rax*8]
1D1F8:	mov     rax, [rbp+dest]
1D1FF:	add     rax, rcx
1D202:	mov     rax, [rax]
1D205:	movzx   eax, byte ptr [rax]
1D208:	movsx   rax, al
1D20C:	add     rax, rax
1D20F:	add     rax, rdx
1D212:	movzx   eax, word ptr [rax]
1D215:	movzx   eax, ax
1D218:	and     eax, 2000h
1D21D:	test    eax, eax
1D21F:	jnz     short loc_1D1BC
1D221:	mov     eax, [rbp+fld]
1D227:	cdqe
1D229:	lea     rdx, ds:0[rax*8]
1D231:	mov     rax, [rbp+dest]
1D238:	add     rax, rdx
1D23B:	mov     rbx, [rax]
1D23E:	mov     eax, [rbp+fld]
1D244:	cdqe
1D246:	lea     rdx, ds:0[rax*8]
1D24E:	mov     rax, [rbp+dest]
1D255:	add     rax, rdx
1D258:	mov     rax, [rax]
1D25B:	mov     rdi, rax; s
1D25E:	call    _strlen
1D263:	sub     rax, 1
1D267:	add     rax, rbx
1D26A:	mov     [rbp+tmp], rax
1D271:	jmp     short loc_1D27B
1D273:	sub     [rbp+tmp], 1
1D27B:	call    ___ctype_b_loc
1D280:	mov     rdx, [rax]
1D283:	mov     rax, [rbp+tmp]
1D28A:	movzx   eax, byte ptr [rax]
1D28D:	movsx   rax, al
1D291:	add     rax, rax
1D294:	add     rax, rdx
1D297:	movzx   eax, word ptr [rax]
1D29A:	movzx   eax, ax
1D29D:	and     eax, 2000h
1D2A2:	test    eax, eax
1D2A4:	jz      short loc_1D2CC
1D2A6:	mov     eax, [rbp+fld]
1D2AC:	cdqe
1D2AE:	lea     rdx, ds:0[rax*8]
1D2B6:	mov     rax, [rbp+dest]
1D2BD:	add     rax, rdx
1D2C0:	mov     rax, [rax]
1D2C3:	cmp     [rbp+tmp], rax
1D2CA:	jnb     short loc_1D273
1D2CC:	mov     rax, [rbp+tmp]
1D2D3:	add     rax, 1
1D2D7:	mov     byte ptr [rax], 0
1D2DA:	mov     eax, [rbp+fld]
1D2E0:	cdqe
1D2E2:	lea     rdx, ds:0[rax*8]
1D2EA:	mov     rax, [rbp+dest]
1D2F1:	add     rax, rdx
1D2F4:	mov     rax, [rax]
1D2F7:	movzx   eax, byte ptr [rax]
1D2FA:	test    al, al
1D2FC:	jnz     short loc_1D31F
1D2FE:	mov     eax, [rbp+fld]
1D304:	cdqe
1D306:	lea     rdx, ds:0[rax*8]
1D30E:	mov     rax, [rbp+dest]
1D315:	add     rax, rdx
1D318:	mov     qword ptr [rax], 0
1D31F:	add     [rbp+fld], 1
1D326:	mov     eax, [rbp+fld]
1D32C:	cmp     eax, [rbp+fields]
1D332:	jl      loc_1D194
1D338:	cmp     [rbp+seek], 0
1D33F:	jnz     short loc_1D391
1D341:	lea     rdx, [rbp+buf]
1D348:	mov     rax, [rbp+s1]
1D34F:	mov     rsi, rdx; src
1D352:	mov     rdi, rax; dest
1D355:	call    _strcpy
1D35A:	jmp     short loc_1D391
1D35C:	mov     eax, 0
1D361:	call    configuration_getline
1D366:	test    eax, eax
1D368:	jz      short loc_1D379
1D36A:	movzx   eax, cs:line
1D371:	test    al, al
1D373:	jnz     loc_1CFCE
1D379:	cmp     [rbp+seek], 0
1D380:	jnz     short loc_1D392
1D382:	mov     rax, [rbp+s1]
1D389:	mov     byte ptr [rax], 0
1D38C:	jmp     short loc_1D392
1D38E:	nop
1D38F:	jmp     short loc_1D392
1D391:	nop
1D392:	mov     rax, [rbp+var_18]
1D396:	sub     rax, fs:28h
1D39F:	jz      short loc_1D3A6
1D3A1:	call    ___stack_chk_fail
1D3A6:	mov     rbx, [rbp+var_8]
1D3AA:	leave
1D3AB:	retn
1D3AC:	endbr64
1D3B0:	push    rbp
1D3B1:	mov     rbp, rsp
1D3B4:	sub     rsp, 10h
1D3B8:	lea     rax, aBin; '/bin'
1D3BF:	mov     [rbp+prefix_relative_bin_dir], rax
1D3C3:	lea     rax, aShareGnuit; '/share/gnuit'
1D3CA:	mov     [rbp+prefix_relative_term_dir], rax
1D3CE:	mov     rax, [rbp+prefix_relative_bin_dir]
1D3D2:	mov     rdi, rax; s
1D3D5:	call    _strlen
1D3DA:	add     rax, 0Bh
1D3DE:	mov     rdi, rax; n
1D3E1:	call    xmalloc
1D3E6:	mov     cs:bindir, rax
1D3ED:	mov     rax, cs:bindir
1D3F4:	mov     rdx, [rbp+prefix_relative_bin_dir]
1D3F8:	mov     rcx, rdx
1D3FB:	lea     rdx, aUsrLocal; '/usr/local'
1D402:	lea     rsi, aSS_6; '%s%s'
1D409:	mov     rdi, rax; s
1D40C:	mov     eax, 0
1D411:	call    _sprintf
1D416:	mov     rax, [rbp+prefix_relative_term_dir]
1D41A:	mov     rdi, rax; s
1D41D:	call    _strlen
1D422:	add     rax, 0Bh
1D426:	mov     rdi, rax; n
1D429:	call    xmalloc
1D42E:	mov     cs:termdir, rax
1D435:	mov     rax, cs:termdir
1D43C:	mov     rdx, [rbp+prefix_relative_term_dir]
1D440:	mov     rcx, rdx
1D443:	lea     rdx, aUsrLocal; '/usr/local'
1D44A:	lea     rsi, aSS_6; '%s%s'
1D451:	mov     rdi, rax; s
1D454:	mov     eax, 0
1D459:	call    _sprintf
1D45E:	nop
1D45F:	leave
1D460:	retn
1D461:	endbr64
1D465:	push    rbp
1D466:	mov     rbp, rsp
1D469:	push    rbx
1D46A:	sub     rsp, 18h
1D46E:	lea     rax, aPath; 'PATH'
1D475:	mov     rdi, rax; name
1D478:	call    _getenv
1D47D:	mov     [rbp+path], rax
1D481:	cmp     [rbp+path], 0
1D486:	jnz     short loc_1D4A3
1D488:	mov     rax, cs:bindir
1D48F:	mov     rsi, rax; value
1D492:	lea     rax, aPath; 'PATH'
1D499:	mov     rdi, rax; variable
1D49C:	call    xsetenv
1D4A1:	jmp     short loc_1D519
1D4A3:	mov     rax, [rbp+path]
1D4A7:	mov     rdi, rax; s
1D4AA:	call    _strlen
1D4AF:	mov     rbx, rax
1D4B2:	mov     rax, cs:bindir
1D4B9:	mov     rdi, rax; s
1D4BC:	call    _strlen
1D4C1:	add     rax, rbx
1D4C4:	add     rax, 2
1D4C8:	mov     rdi, rax; n
1D4CB:	call    xmalloc
1D4D0:	mov     [rbp+new_value], rax
1D4D4:	mov     rcx, cs:bindir
1D4DB:	mov     rdx, [rbp+path]
1D4DF:	mov     rax, [rbp+new_value]
1D4E3:	lea     rsi, aSS_5; '%s:%s'
1D4EA:	mov     rdi, rax; s
1D4ED:	mov     eax, 0
1D4F2:	call    _sprintf
1D4F7:	mov     rax, [rbp+new_value]
1D4FB:	mov     rsi, rax; value
1D4FE:	lea     rax, aPath; 'PATH'
1D505:	mov     rdi, rax; variable
1D508:	call    xsetenv
1D50D:	mov     rax, [rbp+new_value]
1D511:	mov     rdi, rax; pointer
1D514:	call    xfree
1D519:	nop
1D51A:	mov     rbx, [rbp+var_8]
1D51E:	leave
1D51F:	retn
1D520:	endbr64
1D524:	push    rbp
1D525:	mov     rbp, rsp
1D528:	sub     rsp, 20h
1D52C:	mov     [rbp+signame], rdi
1D530:	mov     eax, 0
1D535:	call    get_local_time
1D53A:	mov     [rbp+time], rax
1D53E:	call    _getpid
1D543:	mov     esi, eax
1D545:	mov     r8, cs:g_program
1D54C:	mov     rax, [rbp+time]
1D550:	mov     edi, [rax]
1D552:	mov     rax, [rbp+time]
1D556:	mov     r9d, [rax+4]
1D55A:	mov     rax, [rbp+time]
1D55E:	mov     r10d, [rax+8]
1D562:	mov     rax, [rbp+time]
1D566:	mov     ecx, [rax+0Ch]
1D569:	mov     rax, [rbp+time]
1D56D:	mov     eax, [rax+10h]
1D570:	cdqe
1D572:	lea     rdx, ds:0[rax*8]
1D57A:	lea     rax, month_name
1D581:	mov     rdx, [rdx+rax]
1D585:	mov     rax, cs:stderr@GLIBC_2_2_5
1D58C:	push    [rbp+signame]
1D58F:	push    rsi
1D590:	push    r8
1D592:	push    rdi
1D593:	mov     r8d, r10d
1D596:	lea     rsi, aSD2d02d02dSDEx; '%s %d %2d:%02d:%02d %s[%d]: exiting on '...
1D59D:	mov     rdi, rax; stream
1D5A0:	mov     eax, 0
1D5A5:	call    _fprintf
1D5AA:	add     rsp, 20h
1D5AE:	nop
1D5AF:	leave
1D5B0:	retn
1D5B1:	endbr64
1D5B5:	push    rbp
1D5B6:	mov     rbp, rsp
1D5B9:	sub     rsp, 10h
1D5BD:	mov     [rbp+signum], edi
1D5C0:	mov     eax, 0
1D5C5:	call    clean_up
1D5CA:	cmp     [rbp+signum], 0Fh
1D5CE:	jz      short loc_1D5EC
1D5D0:	cmp     [rbp+signum], 0Fh
1D5D4:	jg      short loc_1D62E
1D5D6:	cmp     [rbp+signum], 2
1D5DA:	jg      short loc_1D5E4
1D5DC:	cmp     [rbp+signum], 0
1D5E0:	jg      short loc_1D5FD
1D5E2:	jmp     short loc_1D62E
1D5E4:	cmp     [rbp+signum], 0Bh
1D5E8:	jz      short loc_1D61D
1D5EA:	jmp     short loc_1D62E
1D5EC:	lea     rax, signame; 'TERM'
1D5F3:	mov     rdi, rax; signame
1D5F6:	call    display_exit_message
1D5FB:	jmp     short loc_1D679
1D5FD:	cmp     [rbp+signum], 1
1D601:	jnz     short loc_1D60C
1D603:	lea     rax, aHup; 'HUP'
1D60A:	jmp     short loc_1D613
1D60C:	lea     rax, aInt; 'INT'
1D613:	mov     rdi, rax; signame
1D616:	call    display_exit_message
1D61B:	jmp     short loc_1D679
1D61D:	lea     rax, aSegv; 'SEGV'
1D624:	mov     rdi, rax; signame
1D627:	call    display_exit_message
1D62C:	jmp     short ask_report
1D62E:	mov     rdx, cs:g_program
1D635:	mov     rax, cs:stderr@GLIBC_2_2_5
1D63C:	mov     ecx, [rbp+signum]
1D63F:	lea     rsi, aSGotAStupidSig; '%s: got a stupid signal (%d). Unless it'...
1D646:	mov     rdi, rax; stream
1D649:	mov     eax, 0
1D64E:	call    _fprintf
1D653:	mov     rdx, cs:g_program
1D65A:	mov     rax, cs:stderr@GLIBC_2_2_5
1D661:	lea     rcx, aSPleaseReportT; '%s: please report to ianb@erislabs.net'...
1D668:	mov     rsi, rcx; format
1D66B:	mov     rdi, rax; stream
1D66E:	mov     eax, 0
1D673:	call    _fprintf
1D678:	nop
1D679:	mov     eax, [rbp+signum]
1D67C:	mov     edi, eax; status
1D67E:	call    _exit
1D683:	endbr64
1D687:	push    rbp
1D688:	mov     rbp, rsp
1D68B:	sub     rsp, 10h
1D68F:	mov     [rbp+configfile], rdi
1D693:	mov     rdx, cs:g_program
1D69A:	mov     rax, cs:stderr@GLIBC_2_2_5
1D6A1:	lea     rcx, aSInstallationP; '%s: installation problem: n'
1D6A8:	mov     rsi, rcx; format
1D6AB:	mov     rdi, rax; stream
1D6AE:	mov     eax, 0
1D6B3:	call    _fprintf
1D6B8:	mov     rdx, cs:g_program
1D6BF:	mov     rax, cs:stderr@GLIBC_2_2_5
1D6C6:	mov     rcx, [rbp+configfile]
1D6CA:	lea     rsi, aSCannotFindCon; '%s: cannot find configuration file '%s''...
1D6D1:	mov     rdi, rax; stream
1D6D4:	mov     eax, 0
1D6D9:	call    _fprintf
1D6DE:	nop
1D6DF:	leave
1D6E0:	retn
1D6E1:	endbr64
1D6E5:	push    rbp
1D6E6:	mov     rbp, rsp
1D6E9:	sub     rsp, 10h
1D6ED:	mov     [rbp+configfile], rdi
1D6F1:	mov     rdx, cs:g_program
1D6F8:	mov     rax, cs:stderr@GLIBC_2_2_5
1D6FF:	mov     rcx, [rbp+configfile]
1D703:	lea     rsi, aSCannotOpenCon; 'n%s: Cannot open configuration file '%'...
1D70A:	mov     rdi, rax; stream
1D70D:	mov     eax, 0
1D712:	call    _fprintf
1D717:	mov     rdx, cs:g_program
1D71E:	mov     rax, cs:stderr@GLIBC_2_2_5
1D725:	lea     rcx, aSSeeTheInfoDoc; '%s: See the info documentation for deta'...
1D72C:	mov     rsi, rcx; format
1D72F:	mov     rdi, rax; stream
1D732:	mov     eax, 0
1D737:	call    _fprintf
1D73C:	mov     rdx, cs:g_program
1D743:	mov     rax, cs:stderr@GLIBC_2_2_5
1D74A:	lea     rcx, aSIfTheTermEnvi; '%s: If the TERM environment variable is'...
1D751:	mov     rsi, rcx; format
1D754:	mov     rdi, rax; stream
1D757:	mov     eax, 0
1D75C:	call    _fprintf
1D761:	mov     rdx, cs:g_program
1D768:	mov     rax, cs:stderr@GLIBC_2_2_5
1D76F:	lea     rcx, aSConfiguration_0; '%s: configuration file name is 'gnuitrc'...
1D776:	mov     rsi, rcx; format
1D779:	mov     rdi, rax; stream
1D77C:	mov     eax, 0
1D781:	call    _fprintf
1D786:	mov     rdx, cs:g_program
1D78D:	mov     rax, cs:stderr@GLIBC_2_2_5
1D794:	lea     rcx, aSYouCanCopyACo; '%s: You can copy a configuration file i'...
1D79B:	mov     rsi, rcx; format
1D79E:	mov     rdi, rax; stream
1D7A1:	mov     eax, 0
1D7A6:	call    _fprintf
1D7AB:	mov     rdx, cs:g_program
1D7B2:	mov     rax, cs:stderr@GLIBC_2_2_5
1D7B9:	lea     rcx, aSAndModifyItIn; '%s: and modify it in order to overwrite'...
1D7C0:	mov     rsi, rcx; format
1D7C3:	mov     rdi, rax; stream
1D7C6:	mov     eax, 0
1D7CB:	call    _fprintf
1D7D0:	mov     rdx, cs:g_program
1D7D7:	mov     rax, cs:stderr@GLIBC_2_2_5
1D7DE:	lea     rcx, aSAddADotAtTheS; '%s: Add a dot at the start of the file,'...
1D7E5:	mov     rsi, rcx; format
1D7E8:	mov     rdi, rax; stream
1D7EB:	mov     eax, 0
1D7F0:	call    _fprintf
1D7F5:	mov     rdx, cs:g_program
1D7FC:	mov     rax, cs:stderr@GLIBC_2_2_5
1D803:	lea     rcx, aSTryModifyingG; '%s: Try modifying 'gnuitrc.generic'...'...
1D80A:	mov     rsi, rcx; format
1D80D:	mov     rdi, rax; stream
1D810:	mov     eax, 0
1D815:	call    _fprintf
1D81A:	nop
1D81B:	leave
1D81C:	retn
1D81D:	endbr64
1D821:	push    rbp
1D822:	mov     rbp, rsp
1D825:	push    rbx
1D826:	sub     rsp, 18h
1D82A:	mov     rax, cs:termdir
1D831:	mov     rdi, rax; s
1D834:	call    _strlen
1D839:	mov     rbx, rax
1D83C:	lea     rax, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
1D843:	mov     rdi, rax; s
1D846:	call    _strlen
1D84B:	add     rax, rbx
1D84E:	add     rax, 9
1D852:	mov     rdi, rax; n
1D855:	call    xmalloc
1D85A:	mov     [rbp+configfile], rax
1D85E:	mov     rdx, cs:termdir
1D865:	mov     rax, [rbp+configfile]
1D869:	mov     rsi, rdx; src
1D86C:	mov     rdi, rax; dest
1D86F:	call    _strcpy
1D874:	mov     rax, [rbp+configfile]
1D878:	lea     rdx, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
1D87F:	mov     rsi, rdx; src
1D882:	mov     rdi, rax; dest
1D885:	call    _strcat
1D88A:	mov     rax, [rbp+configfile]
1D88E:	mov     rdi, rax; s
1D891:	call    _strlen
1D896:	mov     rdx, rax
1D899:	mov     rax, [rbp+configfile]
1D89D:	add     rax, rdx
1D8A0:	mov     dword ptr [rax], 6D6D6F63h
1D8A6:	mov     word ptr [rax+4], 6E6Fh
1D8AC:	mov     byte ptr [rax+6], 0
1D8B0:	mov     rax, [rbp+configfile]
1D8B4:	mov     rdi, rax; file_name
1D8B7:	call    configuration_init
1D8BC:	test    eax, eax
1D8BE:	jnz     short loc_1D8DB
1D8C0:	mov     rax, [rbp+configfile]
1D8C4:	mov     rdi, rax; configfile
1D8C7:	mov     eax, 0
1D8CC:	call    configuration_fatal_error
1D8D1:	mov     edi, 1; status
1D8D6:	call    _exit
1D8DB:	nop
1D8DC:	mov     rbx, [rbp+var_8]
1D8E0:	leave
1D8E1:	retn
1D8E2:	endbr64
1D8E6:	push    rbp
1D8E7:	mov     rbp, rsp
1D8EA:	push    rbx
1D8EB:	sub     rsp, 18h
1D8EF:	mov     rax, cs:g_home
1D8F6:	mov     rdi, rax; s
1D8F9:	call    _strlen
1D8FE:	mov     rbx, rax
1D901:	lea     rax, USER_CONFIGFILE_PREFIX; '/.gnuitrc.'
1D908:	mov     rdi, rax; s
1D90B:	call    _strlen
1D910:	add     rbx, rax
1D913:	mov     rax, cs:tty_type
1D91A:	mov     rdi, rax; s
1D91D:	call    _strlen
1D922:	add     rax, rbx
1D925:	add     rax, 2
1D929:	mov     rdi, rax; n
1D92C:	call    xmalloc
1D931:	mov     [rbp+configfile], rax
1D935:	mov     rdx, cs:g_home
1D93C:	mov     rax, [rbp+configfile]
1D940:	mov     rsi, rdx; src
1D943:	mov     rdi, rax; dest
1D946:	call    _strcpy
1D94B:	mov     rax, [rbp+configfile]
1D94F:	lea     rdx, USER_CONFIGFILE_PREFIX; '/.gnuitrc.'
1D956:	mov     rsi, rdx; src
1D959:	mov     rdi, rax; dest
1D95C:	call    _strcat
1D961:	mov     rdx, cs:tty_type
1D968:	mov     rax, [rbp+configfile]
1D96C:	mov     rsi, rdx; src
1D96F:	mov     rdi, rax; dest
1D972:	call    _strcat
1D977:	mov     rax, [rbp+configfile]
1D97B:	mov     rdi, rax; file_name
1D97E:	call    configuration_init
1D983:	test    eax, eax
1D985:	jnz     loc_1DBAD
1D98B:	mov     rax, [rbp+configfile]
1D98F:	mov     rdi, rax; pointer
1D992:	call    xfree
1D997:	mov     rax, cs:g_home
1D99E:	mov     rdi, rax; s
1D9A1:	call    _strlen
1D9A6:	mov     rbx, rax
1D9A9:	lea     rax, OLD_USER_CONFIGFILE_PREFIX; '/.gitrc.'
1D9B0:	mov     rdi, rax; s
1D9B3:	call    _strlen
1D9B8:	add     rbx, rax
1D9BB:	mov     rax, cs:tty_type
1D9C2:	mov     rdi, rax; s
1D9C5:	call    _strlen
1D9CA:	add     rax, rbx
1D9CD:	add     rax, 2
1D9D1:	mov     rdi, rax; n
1D9D4:	call    xmalloc
1D9D9:	mov     [rbp+configfile], rax
1D9DD:	mov     rdx, cs:g_home
1D9E4:	mov     rax, [rbp+configfile]
1D9E8:	mov     rsi, rdx; src
1D9EB:	mov     rdi, rax; dest
1D9EE:	call    _strcpy
1D9F3:	mov     rax, [rbp+configfile]
1D9F7:	lea     rdx, OLD_USER_CONFIGFILE_PREFIX; '/.gitrc.'
1D9FE:	mov     rsi, rdx; src
1DA01:	mov     rdi, rax; dest
1DA04:	call    _strcat
1DA09:	mov     rdx, cs:tty_type
1DA10:	mov     rax, [rbp+configfile]
1DA14:	mov     rsi, rdx; src
1DA17:	mov     rdi, rax; dest
1DA1A:	call    _strcat
1DA1F:	mov     rax, [rbp+configfile]
1DA23:	mov     rdi, rax; file_name
1DA26:	call    configuration_init
1DA2B:	test    eax, eax
1DA2D:	jnz     loc_1DBAD
1DA33:	mov     rax, [rbp+configfile]
1DA37:	mov     rdi, rax; pointer
1DA3A:	call    xfree
1DA3F:	mov     rax, cs:termdir
1DA46:	mov     rdi, rax; s
1DA49:	call    _strlen
1DA4E:	mov     rbx, rax
1DA51:	lea     rax, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
1DA58:	mov     rdi, rax; s
1DA5B:	call    _strlen
1DA60:	add     rbx, rax
1DA63:	mov     rax, cs:tty_type
1DA6A:	mov     rdi, rax; s
1DA6D:	call    _strlen
1DA72:	add     rax, rbx
1DA75:	add     rax, 2
1DA79:	mov     rdi, rax; n
1DA7C:	call    xmalloc
1DA81:	mov     [rbp+configfile], rax
1DA85:	mov     rdx, cs:termdir
1DA8C:	mov     rax, [rbp+configfile]
1DA90:	mov     rsi, rdx; src
1DA93:	mov     rdi, rax; dest
1DA96:	call    _strcpy
1DA9B:	mov     rax, [rbp+configfile]
1DA9F:	lea     rdx, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
1DAA6:	mov     rsi, rdx; src
1DAA9:	mov     rdi, rax; dest
1DAAC:	call    _strcat
1DAB1:	mov     rdx, cs:tty_type
1DAB8:	mov     rax, [rbp+configfile]
1DABC:	mov     rsi, rdx; src
1DABF:	mov     rdi, rax; dest
1DAC2:	call    _strcat
1DAC7:	mov     rax, [rbp+configfile]
1DACB:	mov     rdi, rax; file_name
1DACE:	call    configuration_init
1DAD3:	test    eax, eax
1DAD5:	jnz     loc_1DBAD
1DADB:	mov     rax, [rbp+configfile]
1DADF:	mov     rdi, rax; configfile
1DAE2:	mov     eax, 0
1DAE7:	call    configuration_warning
1DAEC:	mov     rax, [rbp+configfile]
1DAF0:	mov     rdi, rax; pointer
1DAF3:	call    xfree
1DAF8:	mov     rax, cs:termdir
1DAFF:	mov     rdi, rax; s
1DB02:	call    _strlen
1DB07:	mov     rbx, rax
1DB0A:	lea     rax, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
1DB11:	mov     rdi, rax; s
1DB14:	call    _strlen
1DB19:	add     rax, rbx
1DB1C:	add     rax, 0Ah
1DB20:	mov     rdi, rax; n
1DB23:	call    xmalloc
1DB28:	mov     [rbp+configfile], rax
1DB2C:	mov     rdx, cs:termdir
1DB33:	mov     rax, [rbp+configfile]
1DB37:	mov     rsi, rdx; src
1DB3A:	mov     rdi, rax; dest
1DB3D:	call    _strcpy
1DB42:	mov     rax, [rbp+configfile]
1DB46:	lea     rdx, SYSTEM_CONFIGFILE_PREFIX; '/gnuitrc.'
1DB4D:	mov     rsi, rdx; src
1DB50:	mov     rdi, rax; dest
1DB53:	call    _strcat
1DB58:	mov     rax, [rbp+configfile]
1DB5C:	mov     rdi, rax; s
1DB5F:	call    _strlen
1DB64:	mov     rdx, rax
1DB67:	mov     rax, [rbp+configfile]
1DB6B:	add     rax, rdx
1DB6E:	mov     rcx, 636972656E6567h
1DB78:	mov     [rax], rcx
1DB7B:	mov     rax, [rbp+configfile]
1DB7F:	mov     rdi, rax; file_name
1DB82:	call    configuration_init
1DB87:	test    eax, eax
1DB89:	jnz     short loc_1DBA6
1DB8B:	mov     rax, [rbp+configfile]
1DB8F:	mov     rdi, rax; configfile
1DB92:	mov     eax, 0
1DB97:	call    configuration_fatal_error
1DB9C:	mov     edi, 1; status
1DBA1:	call    _exit
1DBA6:	mov     eax, 0
1DBAB:	jmp     short loc_1DBBE
1DBAD:	mov     rax, [rbp+configfile]
1DBB1:	mov     rdi, rax; pointer
1DBB4:	call    xfree
1DBB9:	mov     eax, 1
1DBBE:	mov     rbx, [rbp+var_8]
1DBC2:	leave
1DBC3:	retn
1DBC4:	endbr64
1DBC8:	push    rbp
1DBC9:	mov     rbp, rsp
1DBCC:	push    rbx
1DBCD:	sub     rsp, 38h
1DBD1:	mov     [rbp+section], rdi
1DBD5:	lea     rax, aGitfm; '[GITFM-'
1DBDC:	mov     [rbp+gitfmprefix], rax
1DBE0:	lea     rax, aGit; '[GIT-'
1DBE7:	mov     [rbp+gitprefix], rax
1DBEB:	mov     rax, [rbp+section]
1DBEF:	mov     rdi, rax; section_name
1DBF2:	call    configuration_section
1DBF7:	cmp     eax, 0FFFFFFFFh
1DBFA:	jnz     loc_1DCF7
1DC00:	mov     rax, [rbp+gitfmprefix]
1DC04:	mov     rdi, rax; s
1DC07:	call    _strlen
1DC0C:	mov     rdx, rax; n
1DC0F:	mov     rcx, [rbp+gitfmprefix]
1DC13:	mov     rax, [rbp+section]
1DC17:	mov     rsi, rcx; s2
1DC1A:	mov     rdi, rax; s1
1DC1D:	call    _strncmp
1DC22:	test    eax, eax
1DC24:	jnz     loc_1DCC7
1DC2A:	mov     rax, [rbp+gitprefix]
1DC2E:	mov     rdi, rax; s
1DC31:	call    _strlen
1DC36:	mov     rbx, rax
1DC39:	mov     rax, [rbp+gitprefix]
1DC3D:	mov     rdi, rax; s
1DC40:	call    _strlen
1DC45:	mov     rdx, [rbp+section]
1DC49:	add     rax, rdx
1DC4C:	mov     rdi, rax; s
1DC4F:	call    _strlen
1DC54:	add     rax, rbx
1DC57:	add     rax, 1
1DC5B:	mov     rdi, rax; n
1DC5E:	call    xmalloc
1DC63:	mov     [rbp+newsection], rax
1DC67:	mov     rdx, [rbp+gitprefix]
1DC6B:	mov     rax, [rbp+newsection]
1DC6F:	mov     rsi, rdx; src
1DC72:	mov     rdi, rax; dest
1DC75:	call    _strcpy
1DC7A:	mov     rax, [rbp+gitfmprefix]
1DC7E:	mov     rdi, rax; s
1DC81:	call    _strlen
1DC86:	mov     rdx, [rbp+section]
1DC8A:	add     rdx, rax
1DC8D:	mov     rax, [rbp+newsection]
1DC91:	mov     rsi, rdx; src
1DC94:	mov     rdi, rax; dest
1DC97:	call    _strcat
1DC9C:	mov     rax, [rbp+newsection]
1DCA0:	mov     rdi, rax; section_name
1DCA3:	call    configuration_section
1DCA8:	cmp     eax, 0FFFFFFFFh
1DCAB:	jz      short loc_1DCBB
1DCAD:	mov     rax, [rbp+newsection]
1DCB1:	mov     rdi, rax; pointer
1DCB4:	call    xfree
1DCB9:	jmp     short loc_1DCF7
1DCBB:	mov     rax, [rbp+newsection]
1DCBF:	mov     rdi, rax; pointer
1DCC2:	call    xfree
1DCC7:	mov     rdx, cs:g_program
1DCCE:	mov     rax, cs:stderr@GLIBC_2_2_5
1DCD5:	mov     rcx, [rbp+section]
1DCD9:	lea     rsi, aSCanTFindSecti; '%s: can't find section %s in the config'...
1DCE0:	mov     rdi, rax; stream
1DCE3:	mov     eax, 0
1DCE8:	call    _fprintf
1DCED:	mov     edi, 1; status
1DCF2:	call    _exit
1DCF7:	mov     rbx, [rbp+var_8]
1DCFB:	leave
1DCFC:	retn
1DCFD:	endbr64
1DD01:	push    rbp
1DD02:	mov     rbp, rsp
1DD05:	sub     rsp, 20h
1DD09:	mov     [rbp+var_name], rdi
1DD0D:	mov     [rbp+default_value], esi
1DD10:	mov     rax, fs:28h
1DD19:	mov     [rbp+var_8], rax
1DD1D:	xor     eax, eax
1DD1F:	lea     rsi, [rbp+data]; dest
1DD23:	mov     rax, [rbp+var_name]
1DD27:	mov     ecx, 1; seek
1DD2C:	mov     edx, 1; fields
1DD31:	mov     rdi, rax; var_name
1DD34:	call    configuration_getvarinfo
1DD39:	mov     rax, [rbp+data]
1DD3D:	test    rax, rax
1DD40:	jz      short loc_1DD50
1DD42:	mov     rax, [rbp+data]
1DD46:	mov     rdi, rax; nptr
1DD49:	call    _atoi
1DD4E:	jmp     short loc_1DD53
1DD50:	mov     eax, [rbp+default_value]
1DD53:	mov     rdx, [rbp+var_8]
1DD57:	sub     rdx, fs:28h
1DD60:	jz      short locret_1DD67
1DD62:	call    ___stack_chk_fail
1DD67:	leave
1DD68:	retn
1DD69:	endbr64
1DD6D:	push    rbp
1DD6E:	mov     rbp, rsp
1DD71:	sub     rsp, 40h
1DD75:	mov     [rbp+var_name], rdi
1DD79:	mov     [rbp+options], rsi
1DD7D:	mov     [rbp+options_no], edx
1DD80:	mov     [rbp+default_value], ecx
1DD83:	mov     rax, fs:28h
1DD8C:	mov     [rbp+var_8], rax
1DD90:	xor     eax, eax
1DD92:	lea     rsi, [rbp+data]; dest
1DD96:	mov     rax, [rbp+var_name]
1DD9A:	mov     ecx, 1; seek
1DD9F:	mov     edx, 1; fields
1DDA4:	mov     rdi, rax; var_name
1DDA7:	call    configuration_getvarinfo
1DDAC:	mov     rax, [rbp+data]
1DDB0:	test    rax, rax
1DDB3:	jz      short loc_1DE33
1DDB5:	mov     [rbp+i], 0
1DDBC:	jmp     short loc_1DDEC
1DDBE:	mov     eax, [rbp+i]
1DDC1:	cdqe
1DDC3:	lea     rdx, ds:0[rax*8]
1DDCB:	mov     rax, [rbp+options]
1DDCF:	add     rax, rdx
1DDD2:	mov     rdx, [rax]
1DDD5:	mov     rax, [rbp+data]
1DDD9:	mov     rsi, rdx; s2
1DDDC:	mov     rdi, rax; s1
1DDDF:	call    _strcmp
1DDE4:	test    eax, eax
1DDE6:	jz      short loc_1DDF6
1DDE8:	add     [rbp+i], 1
1DDEC:	mov     eax, [rbp+i]
1DDEF:	cmp     eax, [rbp+options_no]
1DDF2:	jl      short loc_1DDBE
1DDF4:	jmp     short loc_1DDF7
1DDF6:	nop
1DDF7:	mov     eax, [rbp+i]
1DDFA:	cmp     eax, [rbp+options_no]
1DDFD:	jnz     short loc_1DE2E
1DDFF:	mov     rsi, [rbp+data]
1DE03:	mov     rdx, cs:g_program
1DE0A:	mov     rax, cs:stderr@GLIBC_2_2_5
1DE11:	mov     rcx, [rbp+var_name]
1DE15:	mov     r8, rsi
1DE18:	lea     rsi, aSInvalidSS; '%s: invalid %s (%s).n'
1DE1F:	mov     rdi, rax; stream
1DE22:	mov     eax, 0
1DE27:	call    _fprintf
1DE2C:	jmp     short loc_1DE33
1DE2E:	mov     eax, [rbp+i]
1DE31:	jmp     short loc_1DE36
1DE33:	mov     eax, [rbp+default_value]
1DE36:	mov     rdx, [rbp+var_8]
1DE3A:	sub     rdx, fs:28h
1DE43:	jz      short locret_1DE4A
1DE45:	call    ___stack_chk_fail
1DE4A:	leave
1DE4B:	retn
1DE4C:	endbr64
1DE50:	push    rbp
1DE51:	mov     rbp, rsp
1DE54:	sub     rsp, 20h
1DE58:	mov     [rbp+var_name], rdi
1DE5C:	mov     [rbp+default_value], esi
1DE5F:	mov     rax, fs:28h
1DE68:	mov     [rbp+var_8], rax
1DE6C:	xor     eax, eax
1DE6E:	lea     rsi, [rbp+data]; dest
1DE72:	mov     rax, [rbp+var_name]
1DE76:	mov     ecx, 1; seek
1DE7B:	mov     edx, 1; fields
1DE80:	mov     rdi, rax; var_name
1DE83:	call    configuration_getvarinfo
1DE88:	mov     rax, [rbp+data]
1DE8C:	test    rax, rax
1DE8F:	jz      short loc_1DF05
1DE91:	mov     rax, [rbp+data]
1DE95:	lea     rdx, aOn; 'ON'
1DE9C:	mov     rsi, rdx; s2
1DE9F:	mov     rdi, rax; s1
1DEA2:	call    _strcmp
1DEA7:	test    eax, eax
1DEA9:	jnz     short loc_1DEB2
1DEAB:	mov     eax, 1
1DEB0:	jmp     short loc_1DF08
1DEB2:	mov     rax, [rbp+data]
1DEB6:	lea     rdx, aOff; 'OFF'
1DEBD:	mov     rsi, rdx; s2
1DEC0:	mov     rdi, rax; s1
1DEC3:	call    _strcmp
1DEC8:	test    eax, eax
1DECA:	jnz     short loc_1DED3
1DECC:	mov     eax, 0
1DED1:	jmp     short loc_1DF08
1DED3:	mov     rsi, [rbp+data]
1DED7:	mov     rdx, cs:g_program
1DEDE:	mov     rax, cs:stderr@GLIBC_2_2_5
1DEE5:	mov     rcx, [rbp+var_name]
1DEE9:	mov     r8, rsi
1DEEC:	lea     rsi, aSInvalidSS; '%s: invalid %s (%s).n'
1DEF3:	mov     rdi, rax; stream
1DEF6:	mov     eax, 0
1DEFB:	call    _fprintf
1DF00:	mov     eax, [rbp+default_value]
1DF03:	jmp     short loc_1DF08
1DF05:	mov     eax, [rbp+default_value]
1DF08:	mov     rdx, [rbp+var_8]
1DF0C:	sub     rdx, fs:28h
1DF15:	jz      short locret_1DF1C
1DF17:	call    ___stack_chk_fail
1DF1C:	leave
1DF1D:	retn
1DF1E:	endbr64
1DF22:	push    rbp
1DF23:	mov     rbp, rsp
1DF26:	sub     rsp, 20h
1DF2A:	mov     [rbp+var_name], rdi
1DF2E:	mov     [rbp+default_value], rsi
1DF32:	mov     rax, fs:28h
1DF3B:	mov     [rbp+var_8], rax
1DF3F:	xor     eax, eax
1DF41:	lea     rsi, [rbp+data]; dest
1DF45:	mov     rax, [rbp+var_name]
1DF49:	mov     ecx, 1; seek
1DF4E:	mov     edx, 1; fields
1DF53:	mov     rdi, rax; var_name
1DF56:	call    configuration_getvarinfo
1DF5B:	mov     rax, [rbp+data]
1DF5F:	test    rax, rax
1DF62:	jz      short loc_1DF72
1DF64:	mov     rax, [rbp+data]
1DF68:	mov     rdi, rax; string
1DF6B:	call    xstrdup
1DF70:	jmp     short loc_1DF76
1DF72:	mov     rax, [rbp+default_value]
1DF76:	mov     rdx, [rbp+var_8]
1DF7A:	sub     rdx, fs:28h
1DF83:	jz      short locret_1DF8A
1DF85:	call    ___stack_chk_fail
1DF8A:	leave
1DF8B:	retn
1DF8C:	endbr64
1DF90:	push    rbp
1DF91:	mov     rbp, rsp
1DF94:	sub     rsp, 40h
1DF98:	mov     [rbp+charset], rdi
1DF9C:	mov     [rbp+colorset_name], rsi
1DFA0:	mov     [rbp+fields_no], edx
1DFA3:	mov     rax, fs:28h
1DFAC:	mov     [rbp+var_8], rax
1DFB0:	xor     eax, eax
1DFB2:	mov     [rbp+i], 0
1DFB9:	jmp     loc_1E068
1DFBE:	mov     eax, [rbp+i]
1DFC1:	cdqe
1DFC3:	lea     rdx, ds:0[rax*8]
1DFCB:	mov     rax, [rbp+colorset_name]
1DFCF:	add     rax, rdx
1DFD2:	mov     rax, [rax]
1DFD5:	lea     rsi, [rbp+data]; dest
1DFD9:	mov     ecx, 1; seek
1DFDE:	mov     edx, 1; fields
1DFE3:	mov     rdi, rax; var_name
1DFE6:	call    configuration_getvarinfo
1DFEB:	mov     rax, [rbp+data]
1DFEF:	test    rax, rax
1DFF2:	jz      short loc_1E064
1DFF4:	mov     rax, [rbp+data]
1DFF8:	mov     rdi, rax; colorname
1DFFB:	call    tty_get_color_index
1E000:	mov     [rbp+index], eax
1E003:	cmp     [rbp+index], 0FFFFFFFFh
1E007:	jnz     short loc_1E04B
1E009:	mov     rsi, [rbp+data]
1E00D:	mov     eax, [rbp+i]
1E010:	cdqe
1E012:	lea     rdx, ds:0[rax*8]
1E01A:	mov     rax, [rbp+colorset_name]
1E01E:	add     rax, rdx
1E021:	mov     rcx, [rax]
1E024:	mov     rdx, cs:g_program
1E02B:	mov     rax, cs:stderr@GLIBC_2_2_5
1E032:	mov     r8, rsi
1E035:	lea     rsi, aSInvalidSS; '%s: invalid %s (%s).n'
1E03C:	mov     rdi, rax; stream
1E03F:	mov     eax, 0
1E044:	call    _fprintf
1E049:	jmp     short loc_1E064
1E04B:	mov     eax, [rbp+i]
1E04E:	cdqe
1E050:	lea     rdx, ds:0[rax*4]
1E058:	mov     rax, [rbp+charset]
1E05C:	add     rdx, rax
1E05F:	mov     eax, [rbp+index]
1E062:	mov     [rdx], eax
1E064:	add     [rbp+i], 1
1E068:	mov     eax, [rbp+i]
1E06B:	cmp     eax, [rbp+fields_no]
1E06E:	jl      loc_1DFBE
1E074:	nop
1E075:	mov     rax, [rbp+var_8]
1E079:	sub     rax, fs:28h
1E082:	jz      short locret_1E089
1E084:	call    ___stack_chk_fail
1E089:	leave
1E08A:	retn
1E08B:	endbr64
1E08F:	push    rbp
1E090:	mov     rbp, rsp
1E093:	sub     rsp, 20h
1E097:	mov     [rbp+path], rdi
1E09B:	mov     rax, [rbp+path]
1E09F:	mov     [rbp+cpath], rax
1E0A3:	mov     rax, [rbp+path]
1E0A7:	mov     [rbp+opath], rax
1E0AB:	mov     rax, [rbp+opath]
1E0AF:	movzx   eax, byte ptr [rax]
1E0B2:	cmp     al, 2Fh ; '/'
1E0B4:	jnz     short loc_1E0D8
1E0B6:	mov     rdx, [rbp+opath]
1E0BA:	lea     rax, [rdx+1]
1E0BE:	mov     [rbp+opath], rax
1E0C2:	mov     rax, [rbp+cpath]
1E0C6:	lea     rcx, [rax+1]
1E0CA:	mov     [rbp+cpath], rcx
1E0CE:	movzx   edx, byte ptr [rdx]
1E0D1:	mov     [rax], dl
1E0D3:	jmp     loc_1E1DB
1E0D8:	lea     rax, aRelativePathEn; 'relative path encountered'
1E0DF:	mov     rdi, rax; postmsg
1E0E2:	call    fatal
1E0E7:	jmp     loc_1E1DB
1E0EC:	add     [rbp+opath], 1
1E0F1:	mov     rax, [rbp+opath]
1E0F5:	movzx   eax, byte ptr [rax]
1E0F8:	cmp     al, 2Fh ; '/'
1E0FA:	jz      short loc_1E0EC
1E0FC:	mov     rax, [rbp+opath]
1E100:	movzx   eax, byte ptr [rax]
1E103:	cmp     al, 2Eh ; '.'
1E105:	jnz     short loc_1E125
1E107:	mov     rax, [rbp+opath]
1E10B:	add     rax, 1
1E10F:	movzx   eax, byte ptr [rax]
1E112:	cmp     al, 2Fh ; '/'
1E114:	jz      short loc_1E0EC
1E116:	mov     rax, [rbp+opath]
1E11A:	add     rax, 1
1E11E:	movzx   eax, byte ptr [rax]
1E121:	test    al, al
1E123:	jz      short loc_1E0EC
1E125:	mov     rax, [rbp+opath]
1E129:	movzx   eax, byte ptr [rax]
1E12C:	cmp     al, 2Eh ; '.'
1E12E:	jnz     short loc_1E1AB
1E130:	mov     rax, [rbp+opath]
1E134:	add     rax, 1
1E138:	movzx   eax, byte ptr [rax]
1E13B:	cmp     al, 2Eh ; '.'
1E13D:	jnz     short loc_1E1AB
1E13F:	mov     rax, [rbp+opath]
1E143:	add     rax, 2
1E147:	movzx   eax, byte ptr [rax]
1E14A:	cmp     al, 2Fh ; '/'
1E14C:	jz      short loc_1E15D
1E14E:	mov     rax, [rbp+opath]
1E152:	add     rax, 2
1E156:	movzx   eax, byte ptr [rax]
1E159:	test    al, al
1E15B:	jnz     short loc_1E1AB
1E15D:	mov     rax, [rbp+cpath]
1E161:	sub     rax, 1
1E165:	cmp     [rbp+path], rax
1E169:	jz      short loc_1E187
1E16B:	sub     [rbp+cpath], 2
1E170:	jmp     short loc_1E177
1E172:	sub     [rbp+cpath], 1
1E177:	mov     rax, [rbp+cpath]
1E17B:	movzx   eax, byte ptr [rax]
1E17E:	cmp     al, 2Fh ; '/'
1E180:	jnz     short loc_1E172
1E182:	add     [rbp+cpath], 1
1E187:	add     [rbp+opath], 2
1E18C:	jmp     short loc_1E1DB
1E18E:	mov     rdx, [rbp+opath]
1E192:	lea     rax, [rdx+1]
1E196:	mov     [rbp+opath], rax
1E19A:	mov     rax, [rbp+cpath]
1E19E:	lea     rcx, [rax+1]
1E1A2:	mov     [rbp+cpath], rcx
1E1A6:	movzx   edx, byte ptr [rdx]
1E1A9:	mov     [rax], dl
1E1AB:	mov     rax, [rbp+opath]
1E1AF:	movzx   eax, byte ptr [rax]
1E1B2:	test    al, al
1E1B4:	jz      short loc_1E1C1
1E1B6:	mov     rax, [rbp+opath]
1E1BA:	movzx   eax, byte ptr [rax]
1E1BD:	cmp     al, 2Fh ; '/'
1E1BF:	jnz     short loc_1E18E
1E1C1:	mov     rax, [rbp+opath]
1E1C5:	movzx   eax, byte ptr [rax]
1E1C8:	test    al, al
1E1CA:	jz      short loc_1E1DB
1E1CC:	mov     rax, [rbp+cpath]
1E1D0:	lea     rdx, [rax+1]
1E1D4:	mov     [rbp+cpath], rdx
1E1D8:	mov     byte ptr [rax], 2Fh ; '/'
1E1DB:	mov     rax, [rbp+opath]
1E1DF:	movzx   eax, byte ptr [rax]
1E1E2:	test    al, al
1E1E4:	jnz     loc_1E0F1
1E1EA:	mov     rax, [rbp+cpath]
1E1EE:	sub     rax, 1
1E1F2:	movzx   eax, byte ptr [rax]
1E1F5:	cmp     al, 2Fh ; '/'
1E1F7:	jnz     short loc_1E20C
1E1F9:	mov     rax, [rbp+cpath]
1E1FD:	sub     rax, [rbp+path]
1E201:	cmp     rax, 1
1E205:	jle     short loc_1E20C
1E207:	sub     [rbp+cpath], 1
1E20C:	mov     rax, [rbp+cpath]
1E210:	mov     byte ptr [rax], 0
1E213:	mov     rax, [rbp+path]
1E217:	leave
1E218:	retn
1E219:	endbr64
1E21D:	push    rbp
1E21E:	mov     rbp, rsp
1E221:	sub     rsp, 10h
1E225:	call    _geteuid
1E22A:	mov     [rbp+euid], eax
1E22D:	mov     eax, [rbp+euid]
1E230:	mov     edi, eax; uid
1E232:	call    _getpwuid
1E237:	mov     [rbp+pwd], rax
1E23B:	cmp     [rbp+pwd], 0
1E240:	jnz     short loc_1E2BF
1E242:	mov     rdx, cs:g_program
1E249:	mov     rax, cs:stderr@GLIBC_2_2_5
1E250:	mov     ecx, [rbp+euid]
1E253:	lea     rsi, aSOoopsICanTGet; '%s: OOOPS, I can't get your user name ('...
1E25A:	mov     rdi, rax; stream
1E25D:	mov     eax, 0
1E262:	call    _fprintf
1E267:	mov     rdx, cs:g_program
1E26E:	mov     rax, cs:stderr@GLIBC_2_2_5
1E275:	lea     rcx, aSystemCracker; 'SYSTEM CRACKER! :-)n'
1E27C:	lea     rsi, aSYourAccountNo; '%s: Your account no longer exists or yo'...
1E283:	mov     rdi, rax; stream
1E286:	mov     eax, 0
1E28B:	call    _fprintf
1E290:	mov     rdx, cs:g_program
1E297:	mov     rax, cs:stderr@GLIBC_2_2_5
1E29E:	lea     rcx, aSCorrectThePro; '%s: Correct the problem and try again.'...
1E2A5:	mov     rsi, rcx; format
1E2A8:	mov     rdi, rax; stream
1E2AB:	mov     eax, 0
1E2B0:	call    _fprintf
1E2B5:	mov     edi, 1; status
1E2BA:	call    _exit
1E2BF:	mov     rax, [rbp+pwd]
1E2C3:	mov     rax, [rax]
1E2C6:	mov     rdi, rax; string
1E2C9:	call    xstrdup
1E2CE:	mov     cs:login_name, rax
1E2D5:	nop
1E2D6:	leave
1E2D7:	retn
1E2D8:	endbr64
1E2DC:	push    rbp
1E2DD:	mov     rbp, rsp
1E2E0:	sub     rsp, 30h
1E2E4:	mov     [rbp+name], rdi
1E2E8:	mov     [rbp+dest], rsi
1E2EC:	mov     [rbp+len], edx
1E2EF:	cmp     [rbp+len], 3
1E2F3:	jz      short loc_1E33C
1E2F5:	cmp     [rbp+len], 3
1E2F9:	jg      short loc_1E362
1E2FB:	cmp     [rbp+len], 2
1E2FF:	jz      short loc_1E323
1E301:	cmp     [rbp+len], 2
1E305:	jg      short loc_1E362
1E307:	cmp     [rbp+len], 0
1E30B:	jz      loc_1E3ED
1E311:	cmp     [rbp+len], 1
1E315:	jnz     short loc_1E362
1E317:	mov     rax, [rbp+dest]
1E31B:	mov     byte ptr [rax], 20h ; ' '
1E31E:	jmp     loc_1E3EE
1E323:	mov     rax, [rbp+dest]
1E327:	add     rax, 1
1E32B:	mov     byte ptr [rax], 20h ; ' '
1E32E:	movzx   edx, byte ptr [rax]
1E331:	mov     rax, [rbp+dest]
1E335:	mov     [rax], dl
1E337:	jmp     loc_1E3EE
1E33C:	mov     rax, [rbp+dest]
1E340:	lea     rdx, [rax+2]
1E344:	mov     byte ptr [rdx], 20h ; ' '
1E347:	mov     rax, [rbp+dest]
1E34B:	add     rax, 1
1E34F:	movzx   edx, byte ptr [rdx]
1E352:	mov     [rax], dl
1E354:	movzx   edx, byte ptr [rax]
1E357:	mov     rax, [rbp+dest]
1E35B:	mov     [rax], dl
1E35D:	jmp     loc_1E3EE
1E362:	mov     rax, [rbp+name]
1E366:	mov     rdi, rax; s
1E369:	call    _strlen
1E36E:	mov     [rbp+name_len], eax
1E371:	mov     eax, [rbp+name_len]
1E374:	cmp     eax, [rbp+len]
1E377:	jle     short loc_1E3D2
1E379:	mov     rax, [rbp+dest]
1E37D:	lea     rdx, [rax+2]
1E381:	mov     byte ptr [rdx], 2Eh ; '.'
1E384:	mov     rax, [rbp+dest]
1E388:	add     rax, 1
1E38C:	movzx   edx, byte ptr [rdx]
1E38F:	mov     [rax], dl
1E391:	movzx   edx, byte ptr [rax]
1E394:	mov     rax, [rbp+dest]
1E398:	mov     [rax], dl
1E39A:	mov     eax, [rbp+len]
1E39D:	sub     eax, 3
1E3A0:	cdqe
1E3A2:	mov     edx, [rbp+name_len]
1E3A5:	movsxd  rdx, edx
1E3A8:	mov     ecx, [rbp+len]
1E3AB:	movsxd  rcx, ecx
1E3AE:	sub     rdx, rcx
1E3B1:	lea     rcx, [rdx+3]
1E3B5:	mov     rdx, [rbp+name]
1E3B9:	lea     rsi, [rcx+rdx]; src
1E3BD:	mov     rdx, [rbp+dest]
1E3C1:	lea     rcx, [rdx+3]
1E3C5:	mov     rdx, rax; n
1E3C8:	mov     rdi, rcx; dest
1E3CB:	call    _memcpy
1E3D0:	jmp     short loc_1E3EE
1E3D2:	mov     eax, [rbp+name_len]
1E3D5:	movsxd  rdx, eax; n
1E3D8:	mov     rcx, [rbp+name]
1E3DC:	mov     rax, [rbp+dest]
1E3E0:	mov     rsi, rcx; src
1E3E3:	mov     rdi, rax; dest
1E3E6:	call    _memcpy
1E3EB:	jmp     short loc_1E3EE
1E3ED:	nop
1E3EE:	nop
1E3EF:	leave
1E3F0:	retn
1E3F1:	endbr64
1E3F5:	push    rbp
1E3F6:	mov     rbp, rsp
1E3F9:	push    rbx
1E3FA:	sub     rsp, 28h
1E3FE:	mov     [rbp+path], rdi
1E402:	mov     [rbp+temppath], rsi
1E406:	mov     [rbp+len], edx
1E409:	mov     eax, [rbp+len]
1E40C:	lea     edx, [rax-1]; len
1E40F:	mov     rcx, [rbp+temppath]
1E413:	mov     rax, [rbp+path]
1E417:	mov     rsi, rcx; dest
1E41A:	mov     rdi, rax; name
1E41D:	call    truncate_long_name
1E422:	mov     eax, [rbp+len]
1E425:	lea     ebx, [rax-1]
1E428:	mov     rax, [rbp+path]
1E42C:	mov     rdi, rax; s
1E42F:	call    _strlen
1E434:	cmp     ebx, eax
1E436:	jg      short loc_1E442
1E438:	mov     eax, [rbp+len]
1E43B:	sub     eax, 1
1E43E:	cdqe
1E440:	jmp     short loc_1E450
1E442:	mov     rax, [rbp+path]
1E446:	mov     rdi, rax; s
1E449:	call    _strlen
1E44E:	cdqe
1E450:	mov     rdx, [rbp+temppath]
1E454:	add     rax, rdx
1E457:	mov     byte ptr [rax], 0
1E45A:	mov     rax, [rbp+temppath]
1E45E:	mov     rbx, [rbp+var_8]
1E462:	leave
1E463:	retn
1E464:	endbr64
1E468:	push    rbp
1E469:	mov     rbp, rsp
1E46C:	sub     rsp, 20h
1E470:	mov     [rbp+fd], edi
1E473:	mov     eax, [rbp+fd]
1E476:	mov     edx, 1; whence
1E47B:	mov     esi, 0; offset
1E480:	mov     edi, eax; fd
1E482:	call    _lseek64
1E487:	mov     [rbp+current], rax
1E48B:	mov     eax, [rbp+fd]
1E48E:	mov     edx, 2; whence
1E493:	mov     esi, 0; offset
1E498:	mov     edi, eax; fd
1E49A:	call    _lseek64
1E49F:	mov     [rbp+length], rax
1E4A3:	mov     rcx, [rbp+current]
1E4A7:	mov     eax, [rbp+fd]
1E4AA:	mov     edx, 0; whence
1E4AF:	mov     rsi, rcx; offset
1E4B2:	mov     edi, eax; fd
1E4B4:	call    _lseek64
1E4B9:	mov     rax, [rbp+length]
1E4BD:	leave
1E4BE:	retn
1E4BF:	endbr64
1E4C3:	push    rbp
1E4C4:	mov     rbp, rsp
1E4C7:	sub     rsp, 10h
1E4CB:	mov     rax, fs:28h
1E4D4:	mov     [rbp+var_8], rax
1E4D8:	xor     eax, eax
1E4DA:	mov     edi, 0; timer
1E4DF:	call    _time
1E4E4:	mov     [rbp+__time], rax
1E4E8:	lea     rax, [rbp+__time]
1E4EC:	mov     rdi, rax; timer
1E4EF:	call    _localtime
1E4F4:	mov     rdx, [rbp+var_8]
1E4F8:	sub     rdx, fs:28h
1E501:	jz      short locret_1E508
1E503:	call    ___stack_chk_fail
1E508:	leave
1E509:	retn
1E50A:	endbr64
1E50E:	push    rbp
1E50F:	mov     rbp, rsp
1E512:	push    rbx
1E513:	sub     rsp, 28h
1E517:	mov     [rbp+variable], rdi
1E51B:	mov     [rbp+value], rsi
1E51F:	mov     rax, [rbp+variable]
1E523:	mov     rdi, rax; s
1E526:	call    _strlen
1E52B:	mov     rbx, rax
1E52E:	mov     rax, [rbp+value]
1E532:	mov     rdi, rax; s
1E535:	call    _strlen
1E53A:	add     rax, rbx
1E53D:	add     rax, 2
1E541:	mov     rdi, rax; n
1E544:	call    xmalloc
1E549:	mov     [rbp+environment_string], rax
1E54D:	mov     rcx, [rbp+value]
1E551:	mov     rdx, [rbp+variable]
1E555:	mov     rax, [rbp+environment_string]
1E559:	lea     rsi, aSS_4; '%s=%s'
1E560:	mov     rdi, rax; s
1E563:	mov     eax, 0
1E568:	call    _sprintf
1E56D:	mov     rax, [rbp+environment_string]
1E571:	mov     rdi, rax; string
1E574:	call    _putenv
1E579:	mov     [rbp+result], eax
1E57C:	cmp     [rbp+result], 0FFFFFFFFh
1E580:	jnz     short loc_1E5A8
1E582:	mov     rdx, cs:g_program
1E589:	mov     rax, cs:stderr@GLIBC_2_2_5
1E590:	mov     rcx, [rbp+variable]
1E594:	lea     rsi, aSWarningCannot; '%s: warning: cannot add '%s' to environ'...
1E59B:	mov     rdi, rax; stream
1E59E:	mov     eax, 0
1E5A3:	call    _fprintf
1E5A8:	mov     eax, [rbp+result]
1E5AB:	mov     rbx, [rbp+var_8]
1E5AF:	leave
1E5B0:	retn
1E5B1:	endbr64
1E5B5:	push    rbp
1E5B6:	mov     rbp, rsp
1E5B9:	sub     rsp, 20h
1E5BD:	mov     [rbp+string], rdi
1E5C1:	mov     [rbp+length], rsi
1E5C5:	mov     [rbp+i], 0
1E5CD:	jmp     short loc_1E611
1E5CF:	call    ___ctype_b_loc
1E5D4:	mov     rdx, [rax]
1E5D7:	mov     rcx, [rbp+string]
1E5DB:	mov     rax, [rbp+i]
1E5DF:	add     rax, rcx
1E5E2:	movzx   eax, byte ptr [rax]
1E5E5:	movsx   rax, al
1E5E9:	add     rax, rax
1E5EC:	add     rax, rdx
1E5EF:	movzx   eax, word ptr [rax]
1E5F2:	movzx   eax, ax
1E5F5:	and     eax, 4000h
1E5FA:	test    eax, eax
1E5FC:	jnz     short loc_1E60C
1E5FE:	mov     rdx, [rbp+string]
1E602:	mov     rax, [rbp+i]
1E606:	add     rax, rdx
1E609:	mov     byte ptr [rax], 3Fh ; '?'
1E60C:	add     [rbp+i], 1
1E611:	mov     rax, [rbp+i]
1E615:	cmp     rax, [rbp+length]
1E619:	jb      short loc_1E5CF
1E61B:	nop
1E61C:	nop
1E61D:	leave
1E61E:	retn
1E61F:	endbr64
1E623:	push    rbp
1E624:	mov     rbp, rsp
1E627:	sub     rsp, 20h
1E62B:	mov     [rbp+string], rdi
1E62F:	mov     [rbp+length], rsi
1E633:	mov     [rbp+i], 0
1E63B:	jmp     loc_1E795
1E640:	call    ___ctype_b_loc
1E645:	mov     rdx, [rax]
1E648:	mov     rcx, [rbp+string]
1E64C:	mov     rax, [rbp+i]
1E650:	add     rax, rcx
1E653:	movzx   eax, byte ptr [rax]
1E656:	movsx   rax, al
1E65A:	add     rax, rax
1E65D:	add     rax, rdx
1E660:	movzx   eax, word ptr [rax]
1E663:	movzx   eax, ax
1E666:	and     eax, 8
1E669:	test    eax, eax
1E66B:	jnz     loc_1E790
1E671:	mov     rdx, [rbp+string]
1E675:	mov     rax, [rbp+i]
1E679:	add     rax, rdx
1E67C:	movzx   eax, byte ptr [rax]
1E67F:	cmp     al, 2Eh ; '.'
1E681:	jz      loc_1E790
1E687:	mov     rdx, [rbp+string]
1E68B:	mov     rax, [rbp+i]
1E68F:	add     rax, rdx
1E692:	movzx   eax, byte ptr [rax]
1E695:	cmp     al, 2Dh ; '-'
1E697:	jz      loc_1E790
1E69D:	mov     rdx, [rbp+string]
1E6A1:	mov     rax, [rbp+i]
1E6A5:	add     rax, rdx
1E6A8:	movzx   eax, byte ptr [rax]
1E6AB:	cmp     al, 2Bh ; '+'
1E6AD:	jz      loc_1E790
1E6B3:	mov     rdx, [rbp+string]
1E6B7:	mov     rax, [rbp+i]
1E6BB:	add     rax, rdx
1E6BE:	movzx   eax, byte ptr [rax]
1E6C1:	cmp     al, 3Dh ; '='
1E6C3:	jz      loc_1E790
1E6C9:	mov     rdx, [rbp+string]
1E6CD:	mov     rax, [rbp+i]
1E6D1:	add     rax, rdx
1E6D4:	movzx   eax, byte ptr [rax]
1E6D7:	cmp     al, 7Eh ; '~'
1E6D9:	jz      loc_1E790
1E6DF:	mov     rdx, [rbp+string]
1E6E3:	mov     rax, [rbp+i]
1E6E7:	add     rax, rdx
1E6EA:	movzx   eax, byte ptr [rax]
1E6ED:	cmp     al, 5Eh ; '^'
1E6EF:	jz      loc_1E790
1E6F5:	mov     rdx, [rbp+string]
1E6F9:	mov     rax, [rbp+i]
1E6FD:	add     rax, rdx
1E700:	movzx   eax, byte ptr [rax]
1E703:	cmp     al, 25h ; '%'
1E705:	jz      loc_1E790
1E70B:	mov     rdx, [rbp+string]
1E70F:	mov     rax, [rbp+i]
1E713:	add     rax, rdx
1E716:	movzx   eax, byte ptr [rax]
1E719:	cmp     al, 40h ; '@'
1E71B:	jz      short loc_1E790
1E71D:	mov     rdx, [rbp+string]
1E721:	mov     rax, [rbp+i]
1E725:	add     rax, rdx
1E728:	movzx   eax, byte ptr [rax]
1E72B:	cmp     al, 2Fh ; '/'
1E72D:	jz      short loc_1E790
1E72F:	mov     rdx, [rbp+string]
1E733:	mov     rax, [rbp+i]
1E737:	add     rax, rdx
1E73A:	movzx   eax, byte ptr [rax]
1E73D:	cmp     al, 3Ah ; ':'
1E73F:	jz      short loc_1E790
1E741:	mov     rdx, [rbp+string]
1E745:	mov     rax, [rbp+i]
1E749:	add     rax, rdx
1E74C:	movzx   eax, byte ptr [rax]
1E74F:	cmp     al, 7Bh ; '{'
1E751:	jz      short loc_1E790
1E753:	mov     rdx, [rbp+string]
1E757:	mov     rax, [rbp+i]
1E75B:	add     rax, rdx
1E75E:	movzx   eax, byte ptr [rax]
1E761:	cmp     al, 7Dh ; '}'
1E763:	jz      short loc_1E790
1E765:	mov     rdx, [rbp+string]
1E769:	mov     rax, [rbp+i]
1E76D:	add     rax, rdx
1E770:	movzx   eax, byte ptr [rax]
1E773:	cmp     al, 2Ch ; ','
1E775:	jz      short loc_1E790
1E777:	mov     rdx, [rbp+string]
1E77B:	mov     rax, [rbp+i]
1E77F:	add     rax, rdx
1E782:	movzx   eax, byte ptr [rax]
1E785:	cmp     al, 5Fh ; '_'
1E787:	jz      short loc_1E790
1E789:	mov     eax, 1
1E78E:	jmp     short locret_1E7A8
1E790:	add     [rbp+i], 1
1E795:	mov     rax, [rbp+i]
1E799:	cmp     rax, [rbp+length]
1E79D:	jb      loc_1E640
1E7A3:	mov     eax, 0
1E7A8:	leave
1E7A9:	retn
1E7AA:	endbr64
1E7AE:	push    rbp
1E7AF:	mov     rbp, rsp
1E7B2:	sub     rsp, 20h
1E7B6:	mov     [rbp+cmd], rdi
1E7BA:	mov     rax, [rbp+cmd]
1E7BE:	mov     rdi, rax; s
1E7C1:	call    _strlen
1E7C6:	sub     eax, 1
1E7C9:	mov     [rbp+i], eax
1E7CC:	jmp     short loc_1E81C
1E7CE:	mov     eax, [rbp+i]
1E7D1:	movsxd  rdx, eax
1E7D4:	mov     rax, [rbp+cmd]
1E7D8:	add     rax, rdx
1E7DB:	movzx   eax, byte ptr [rax]
1E7DE:	cmp     al, 26h ; '&'
1E7E0:	jnz     short loc_1E7E9
1E7E2:	mov     eax, 1
1E7E7:	jmp     short locret_1E827
1E7E9:	mov     eax, [rbp+i]
1E7EC:	movsxd  rdx, eax
1E7EF:	mov     rax, [rbp+cmd]
1E7F3:	add     rax, rdx
1E7F6:	movzx   eax, byte ptr [rax]
1E7F9:	cmp     al, 20h ; ' '
1E7FB:	jz      short loc_1E818
1E7FD:	mov     eax, [rbp+i]
1E800:	movsxd  rdx, eax
1E803:	mov     rax, [rbp+cmd]
1E807:	add     rax, rdx
1E80A:	movzx   eax, byte ptr [rax]
1E80D:	cmp     al, 9
1E80F:	jz      short loc_1E818
1E811:	mov     eax, 0
1E816:	jmp     short locret_1E827
1E818:	sub     [rbp+i], 1
1E81C:	cmp     [rbp+i], 0
1E820:	jns     short loc_1E7CE
1E822:	mov     eax, 0
1E827:	leave
1E828:	retn
1E829:	endbr64
1E82D:	push    rbp
1E82E:	mov     rbp, rsp
1E831:	mov     [rbp+cmd], rdi
1E835:	jmp     short loc_1E859
1E837:	mov     rax, [rbp+cmd]
1E83B:	movzx   eax, byte ptr [rax]
1E83E:	cmp     al, 20h ; ' '
1E840:	jz      short loc_1E854
1E842:	mov     rax, [rbp+cmd]
1E846:	movzx   eax, byte ptr [rax]
1E849:	cmp     al, 3Bh ; ';'
1E84B:	jz      short loc_1E854
1E84D:	mov     eax, 0
1E852:	jmp     short loc_1E869
1E854:	add     [rbp+cmd], 1
1E859:	mov     rax, [rbp+cmd]
1E85D:	movzx   eax, byte ptr [rax]
1E860:	test    al, al
1E862:	jnz     short loc_1E837
1E864:	mov     eax, 1
1E869:	pop     rbp
1E86A:	retn
1E86B:	endbr64
1E86F:	push    rbp
1E870:	mov     rbp, rsp
1E873:	sub     rsp, 0B0h
1E87A:	mov     rax, fs:28h
1E883:	mov     [rbp+var_8], rax
1E887:	xor     eax, eax
1E889:	mov     [rbp+previous], 0
1E894:	mov     [rbp+fti_head1], 0
1E89F:	lea     rsi, [rbp+contents]; dest
1E8A3:	lea     rax, [rbp+pattern]
1E8A7:	mov     ecx, 0; seek
1E8AC:	mov     edx, 3; fields
1E8B1:	mov     rdi, rax; var_name
1E8B4:	call    configuration_getvarinfo
1E8B9:	movzx   eax, [rbp+pattern]
1E8BD:	test    al, al
1E8BF:	jz      loc_1E9ED
1E8C5:	mov     rax, [rbp+contents]
1E8C9:	test    rax, rax
1E8CC:	jz      short loc_1E8E2
1E8CE:	mov     rax, [rbp+contents]
1E8D2:	mov     rdi, rax; colorname
1E8D5:	call    tty_get_color_index
1E8DA:	mov     [rbp+foreground], eax
1E8E0:	jmp     short loc_1E8EC
1E8E2:	mov     [rbp+foreground], 0FFFFFFFFh
1E8EC:	mov     rax, [rbp+contents+8]
1E8F0:	test    rax, rax
1E8F3:	jz      short loc_1E909
1E8F5:	mov     rax, [rbp+contents+8]
1E8F9:	mov     rdi, rax; colorname
1E8FC:	call    tty_get_color_index
1E901:	mov     [rbp+background], eax
1E907:	jmp     short loc_1E913
1E909:	mov     [rbp+background], 0FFFFFFFFh
1E913:	mov     rax, [rbp+contents+10h]
1E917:	test    rax, rax
1E91A:	jz      short loc_1E930
1E91C:	mov     rax, [rbp+contents+10h]
1E920:	mov     rdi, rax; colorname
1E923:	call    tty_get_color_index
1E928:	mov     [rbp+brightness], eax
1E92E:	jmp     short loc_1E93A
1E930:	mov     [rbp+brightness], 0FFFFFFFFh
1E93A:	mov     edi, 20h ; ' '; n
1E93F:	call    xmalloc
1E944:	mov     [rbp+fti], rax
1E94B:	cmp     [rbp+fti_head1], 0
1E953:	jnz     short loc_1E973
1E955:	mov     rax, [rbp+fti]
1E95C:	mov     [rbp+previous], rax
1E963:	mov     rax, [rbp+previous]
1E96A:	mov     [rbp+fti_head1], rax
1E971:	jmp     short loc_1E985
1E973:	mov     rax, [rbp+previous]
1E97A:	mov     rdx, [rbp+fti]
1E981:	mov     [rax+18h], rdx
1E985:	lea     rax, [rbp+pattern]
1E989:	mov     rdi, rax; string
1E98C:	call    xstrdup
1E991:	mov     rdx, [rbp+fti]
1E998:	mov     [rdx], rax
1E99B:	mov     rax, [rbp+fti]
1E9A2:	mov     edx, [rbp+foreground]
1E9A8:	mov     [rax+8], edx
1E9AB:	mov     rax, [rbp+fti]
1E9B2:	mov     edx, [rbp+background]
1E9B8:	mov     [rax+0Ch], edx
1E9BB:	mov     rax, [rbp+fti]
1E9C2:	mov     edx, [rbp+brightness]
1E9C8:	mov     [rax+10h], edx
1E9CB:	mov     rax, [rbp+fti]
1E9D2:	mov     qword ptr [rax+18h], 0
1E9DA:	mov     rax, [rbp+fti]
1E9E1:	mov     [rbp+previous], rax
1E9E8:	jmp     loc_1E89F
1E9ED:	nop
1E9EE:	cmp     [rbp+fti_head1], 0
1E9F6:	jz      short loc_1EA34
1E9F8:	mov     rax, cs:fti_head
1E9FF:	test    rax, rax
1EA02:	jz      short loc_1EA26
1EA04:	mov     rdx, cs:fti_head
1EA0B:	mov     rax, [rbp+previous]
1EA12:	mov     [rax+18h], rdx
1EA16:	mov     rax, [rbp+fti_head1]
1EA1D:	mov     cs:fti_head, rax
1EA24:	jmp     short loc_1EA34
1EA26:	mov     rax, [rbp+fti_head1]
1EA2D:	mov     cs:fti_head, rax
1EA34:	nop
1EA35:	mov     rax, [rbp+var_8]
1EA39:	sub     rax, fs:28h
1EA42:	jz      short locret_1EA49
1EA44:	call    ___stack_chk_fail
1EA49:	leave
1EA4A:	retn
1EA4B:	endbr64
1EA4F:	push    rbp
1EA50:	mov     rbp, rsp
1EA53:	mov     eax, cs:suspend_requested
1EA59:	test    eax, eax
1EA5B:	jz      short loc_1EA98
1EA5D:	mov     eax, 0
1EA62:	call    hide
1EA67:	call    _getpid
1EA6C:	mov     esi, 13h; sig
1EA71:	mov     edi, eax; pid
1EA73:	call    _kill
1EA78:	mov     cs:suspend_requested, 0
1EA82:	mov     cs:refresh_requested, 0
1EA8C:	mov     cs:alarm_requested, 0
1EA96:	jmp     short loc_1EAEB
1EA98:	mov     eax, cs:refresh_requested
1EA9E:	test    eax, eax
1EAA0:	jz      short loc_1EAD6
1EAA2:	mov     eax, 0
1EAA7:	call    tty_defaults
1EAAC:	mov     eax, 0
1EAB1:	call    tty_io_clear
1EAB6:	mov     edi, 1Ch; signum
1EABB:	call    refresh
1EAC0:	mov     cs:refresh_requested, 0
1EACA:	mov     cs:alarm_requested, 0
1EAD4:	jmp     short loc_1EAEB
1EAD6:	mov     eax, cs:alarm_requested
1EADC:	test    eax, eax
1EADE:	jz      short loc_1EAEB
1EAE0:	mov     cs:alarm_requested, 0
1EAEA:	nop
1EAEB:	pop     rbp
1EAEC:	retn
1EAED:	endbr64
1EAF1:	push    rbp
1EAF2:	mov     rbp, rsp
1EAF5:	sub     rsp, 10h
1EAF9:	mov     [rbp+mode], edi
1EAFC:	mov     eax, [rbp+mode]
1EAFF:	mov     cs:signals_allowed, eax
1EB05:	mov     eax, cs:signals_allowed
1EB0B:	test    eax, eax
1EB0D:	jz      short loc_1EB19
1EB0F:	mov     eax, 0
1EB14:	call    service_pending_signals
1EB19:	nop
1EB1A:	leave
1EB1B:	retn
1EB1C:	endbr64
1EB20:	push    rbp
1EB21:	mov     rbp, rsp
1EB24:	sub     rsp, 10h
1EB28:	mov     [rbp+signum], edi
1EB2B:	mov     eax, cs:signals_allowed
1EB31:	test    eax, eax
1EB33:	jz      short loc_1EB75
1EB35:	mov     eax, 0
1EB3A:	call    tty_get_mode
1EB3F:	cmp     eax, 1
1EB42:	setz    al
1EB45:	movzx   eax, al
1EB48:	mov     cs:refresh_at_SIGCONT, eax
1EB4E:	mov     eax, 0
1EB53:	call    hide
1EB58:	call    _getpid
1EB5D:	mov     esi, 13h; sig
1EB62:	mov     edi, eax; pid
1EB64:	call    _kill
1EB69:	mov     cs:suspend_requested, 0
1EB73:	jmp     short loc_1EB7F
1EB75:	mov     cs:suspend_requested, 1
1EB7F:	mov     eax, [rbp+signum]
1EB82:	mov     edi, eax; signum
1EB84:	call    install_handler
1EB89:	nop
1EB8A:	leave
1EB8B:	retn
1EB8C:	endbr64
1EB90:	push    rbp
1EB91:	mov     rbp, rsp
1EB94:	sub     rsp, 10h
1EB98:	mov     [rbp+signum], edi
1EB9B:	mov     eax, cs:signals_allowed
1EBA1:	test    eax, eax
1EBA3:	jz      short loc_1EBCF
1EBA5:	mov     eax, 0
1EBAA:	call    tty_defaults
1EBAF:	mov     eax, 0
1EBB4:	call    tty_io_clear
1EBB9:	mov     eax, [rbp+signum]
1EBBC:	mov     edi, eax; signum
1EBBE:	call    refresh
1EBC3:	mov     cs:refresh_requested, 0
1EBCD:	jmp     short loc_1EBD9
1EBCF:	mov     cs:refresh_requested, 1
1EBD9:	mov     eax, [rbp+signum]
1EBDC:	mov     edi, eax; signum
1EBDE:	call    install_handler
1EBE3:	nop
1EBE4:	leave
1EBE5:	retn
1EBE6:	endbr64
1EBEA:	push    rbp
1EBEB:	mov     rbp, rsp
1EBEE:	sub     rsp, 10h
1EBF2:	mov     [rbp+signum], edi
1EBF5:	mov     eax, cs:refresh_at_SIGCONT
1EBFB:	test    eax, eax
1EBFD:	jz      short loc_1EC13
1EBFF:	mov     eax, [rbp+signum]
1EC02:	mov     edi, eax; signum
1EC04:	call    refresh
1EC09:	mov     cs:refresh_requested, 0
1EC13:	mov     eax, [rbp+signum]
1EC16:	mov     edi, eax; signum
1EC18:	call    install_handler
1EC1D:	nop
1EC1E:	leave
1EC1F:	retn
1EC20:	endbr64
1EC24:	push    rbp
1EC25:	mov     rbp, rsp
1EC28:	sub     rsp, 10h
1EC2C:	mov     [rbp+signum], edi
1EC2F:	mov     eax, cs:signals_allowed
1EC35:	test    eax, eax
1EC37:	jz      short loc_1EC69
1EC39:	mov     eax, 0
1EC3E:	call    get_local_time
1EC43:	mov     eax, [rax]
1EC45:	test    eax, eax
1EC47:	jnz     short loc_1EC53
1EC49:	mov     eax, [rbp+signum]
1EC4C:	mov     edi, eax; signum
1EC4E:	call    clock_refresh
1EC53:	mov     eax, 0
1EC58:	call    tty_key_print_async
1EC5D:	mov     cs:alarm_requested, 0
1EC67:	jmp     short loc_1EC73
1EC69:	mov     cs:alarm_requested, 1
1EC73:	mov     eax, [rbp+signum]
1EC76:	mov     edi, eax; signum
1EC78:	call    install_handler
1EC7D:	mov     eax, 0
1EC82:	call    get_local_time
1EC87:	mov     edx, [rax]
1EC89:	mov     eax, 3Ch ; '<'
1EC8E:	sub     eax, edx
1EC90:	mov     edi, eax; seconds
1EC92:	call    _alarm
1EC97:	nop
1EC98:	leave
1EC99:	retn
1EC9A:	endbr64
1EC9E:	push    rbp
1EC9F:	mov     rbp, rsp
1ECA2:	sub     rsp, 10h
1ECA6:	mov     [rbp+signum], edi
1ECA9:	mov     eax, [rbp+signum]
1ECAC:	lea     rdx, panic
1ECB3:	mov     rsi, rdx; handler
1ECB6:	mov     edi, eax; sig
1ECB8:	call    _signal
1ECBD:	mov     cs:user_heart_attack, 1
1ECC7:	nop
1ECC8:	leave
1ECC9:	retn
1ECCA:	endbr64
1ECCE:	push    rbp
1ECCF:	mov     rbp, rsp
1ECD2:	sub     rsp, 10h
1ECD6:	mov     [rbp+signum], edi
1ECD9:	cmp     [rbp+signum], 1Ch
1ECDD:	jz      short loc_1ED2B
1ECDF:	cmp     [rbp+signum], 1Ch
1ECE3:	jg      short loc_1ED56
1ECE5:	cmp     [rbp+signum], 14h
1ECE9:	jz      short loc_1ECFF
1ECEB:	cmp     [rbp+signum], 14h
1ECEF:	jg      short loc_1ED56
1ECF1:	cmp     [rbp+signum], 0Eh
1ECF5:	jz      short loc_1ED41
1ECF7:	cmp     [rbp+signum], 12h
1ECFB:	jz      short loc_1ED15
1ECFD:	jmp     short loc_1ED56
1ECFF:	lea     rax, suspend
1ED06:	mov     rsi, rax; handler
1ED09:	mov     edi, 14h; sig
1ED0E:	call    _signal
1ED13:	jmp     short loc_1ED56
1ED15:	lea     rax, resume
1ED1C:	mov     rsi, rax; handler
1ED1F:	mov     edi, 12h; sig
1ED24:	call    _signal
1ED29:	jmp     short loc_1ED56
1ED2B:	lea     rax, window_change
1ED32:	mov     rsi, rax; handler
1ED35:	mov     edi, 1Ch; sig
1ED3A:	call    _signal
1ED3F:	jmp     short loc_1ED56
1ED41:	lea     rax, time_change
1ED48:	mov     rsi, rax; handler
1ED4B:	mov     edi, 0Eh; sig
1ED50:	call    _signal
1ED55:	nop
1ED56:	nop
1ED57:	leave
1ED58:	retn
1ED59:	endbr64
1ED5D:	push    rbp
1ED5E:	mov     rbp, rsp
1ED61:	sub     rsp, 10h
1ED65:	mov     [rbp+status], edi
1ED68:	cmp     [rbp+status], 1
1ED6C:	jnz     short loc_1EDA2
1ED6E:	mov     eax, cs:job_control
1ED74:	test    eax, eax
1ED76:	jz      short loc_1ED8C
1ED78:	mov     edi, 14h; signum
1ED7D:	call    install_handler
1ED82:	mov     edi, 12h; signum
1ED87:	call    install_handler
1ED8C:	mov     edi, 1Ch; signum
1ED91:	call    install_handler
1ED96:	mov     edi, 0Eh; signum
1ED9B:	call    install_handler
1EDA0:	jmp     short loc_1EDE8
1EDA2:	mov     eax, cs:job_control
1EDA8:	test    eax, eax
1EDAA:	jz      short loc_1EDCA
1EDAC:	mov     esi, (offset dword_0+1); handler
1EDB1:	mov     edi, 14h; sig
1EDB6:	call    _signal
1EDBB:	mov     esi, (offset dword_0+1); handler
1EDC0:	mov     edi, 12h; sig
1EDC5:	call    _signal
1EDCA:	mov     esi, (offset dword_0+1); handler
1EDCF:	mov     edi, 1Ch; sig
1EDD4:	call    _signal
1EDD9:	mov     esi, (offset dword_0+1); handler
1EDDE:	mov     edi, 0Eh; sig
1EDE3:	call    _signal
1EDE8:	nop
1EDE9:	leave
1EDEA:	retn
1EDEB:	endbr64
1EDEF:	push    rbp
1EDF0:	mov     rbp, rsp
1EDF3:	mov     esi, (offset dword_0+1); handler
1EDF8:	mov     edi, 14h; sig
1EDFD:	call    _signal
1EE02:	cmp     rax, 1
1EE06:	setnz   al
1EE09:	movzx   eax, al
1EE0C:	mov     cs:job_control, eax
1EE12:	mov     esi, (offset dword_0+1); handler
1EE17:	mov     edi, 12h; sig
1EE1C:	call    _signal
1EE21:	mov     esi, (offset dword_0+1); handler
1EE26:	mov     edi, 1Ch; sig
1EE2B:	call    _signal
1EE30:	lea     rax, fatal_signal
1EE37:	mov     rsi, rax; handler
1EE3A:	mov     edi, 0Bh; sig
1EE3F:	call    _signal
1EE44:	lea     rax, fatal_signal
1EE4B:	mov     rsi, rax; handler
1EE4E:	mov     edi, 1; sig
1EE53:	call    _signal
1EE58:	lea     rax, fatal_signal
1EE5F:	mov     rsi, rax; handler
1EE62:	mov     edi, 0Fh; sig
1EE67:	call    _signal
1EE6C:	mov     esi, (offset dword_0+1); handler
1EE71:	mov     edi, 3; sig
1EE76:	call    _signal
1EE7B:	lea     rax, panic
1EE82:	mov     rsi, rax; handler
1EE85:	mov     edi, 2; sig
1EE8A:	call    _signal
1EE8F:	nop
1EE90:	pop     rbp
1EE91:	retn
1EE92:	endbr64
1EE96:	push    rbp
1EE97:	mov     rbp, rsp
1EE9A:	lea     rax, aVirtualMemoryE; 'virtual memory exhausted'
1EEA1:	mov     rdi, rax; postmsg
1EEA4:	call    fatal
1EEAE:	endbr64
1EEB2:	push    rbp
1EEB3:	mov     rbp, rsp
1EEB6:	sub     rsp, 10h
1EEBA:	mov     [rbp+pointer], rdi
1EEBE:	cmp     [rbp+pointer], 0
1EEC3:	jz      short loc_1EED3
1EEC5:	mov     rax, [rbp+pointer]
1EEC9:	mov     rdi, rax; ptr
1EECC:	call    _free
1EED1:	jmp     short loc_1EEE2
1EED3:	lea     rax, aXfreeTryingToF; 'xfree: trying to free NULL'
1EEDA:	mov     rdi, rax; postmsg
1EEDD:	call    fatal
1EEE2:	nop
1EEE3:	leave
1EEE4:	retn
1EEE5:	endbr64
1EEE9:	push    rbp
1EEEA:	mov     rbp, rsp
1EEED:	sub     rsp, 30h
1EEF1:	mov     [rbp+fd], edi
1EEF4:	mov     [rbp+buf], rsi
1EEF8:	mov     [rbp+count], rdx
1EEFC:	call    ___errno_location
1EF01:	mov     eax, [rax]
1EF03:	mov     [rbp+old_errno], eax
1EF06:	cmp     [rbp+count], 0
1EF0B:	jnz     short loc_1EF13
1EF0D:	mov     rax, [rbp+count]
1EF11:	jmp     short locret_1EF4A
1EF13:	call    ___errno_location
1EF18:	mov     edx, [rbp+old_errno]
1EF1B:	mov     [rax], edx
1EF1D:	mov     rdx, [rbp+count]; nbytes
1EF21:	mov     rcx, [rbp+buf]
1EF25:	mov     eax, [rbp+fd]
1EF28:	mov     rsi, rcx; buf
1EF2B:	mov     edi, eax; fd
1EF2D:	call    read
1EF32:	mov     [rbp+chars], eax
1EF35:	cmp     [rbp+chars], 0
1EF39:	jns     short loc_1EF47
1EF3B:	call    ___errno_location
1EF40:	mov     eax, [rax]
1EF42:	cmp     eax, 4
1EF45:	jz      short loc_1EF13
1EF47:	mov     eax, [rbp+chars]
1EF4A:	leave
1EF4B:	retn
1EF4C:	endbr64
1EF50:	push    rbp
1EF51:	mov     rbp, rsp
1EF54:	sub     rsp, 30h
1EF58:	mov     [rbp+fd], edi
1EF5B:	mov     [rbp+buf], rsi
1EF5F:	mov     [rbp+count], rdx
1EF63:	call    ___errno_location
1EF68:	mov     eax, [rax]
1EF6A:	mov     [rbp+old_errno], eax
1EF6D:	cmp     [rbp+count], 0
1EF72:	jnz     short loc_1EF7A
1EF74:	mov     rax, [rbp+count]
1EF78:	jmp     short locret_1EFB1
1EF7A:	call    ___errno_location
1EF7F:	mov     edx, [rbp+old_errno]
1EF82:	mov     [rax], edx
1EF84:	mov     rdx, [rbp+count]; n
1EF88:	mov     rcx, [rbp+buf]
1EF8C:	mov     eax, [rbp+fd]
1EF8F:	mov     rsi, rcx; buf
1EF92:	mov     edi, eax; fd
1EF94:	call    write
1EF99:	mov     [rbp+chars], eax
1EF9C:	cmp     [rbp+chars], 0
1EFA0:	jns     short loc_1EFAE
1EFA2:	call    ___errno_location
1EFA7:	mov     eax, [rax]
1EFA9:	cmp     eax, 4
1EFAC:	jz      short loc_1EF7A
1EFAE:	mov     eax, [rbp+chars]
1EFB1:	leave
1EFB2:	retn
1EFB3:	endbr64
1EFB7:	push    rbp
1EFB8:	mov     rbp, rsp
1EFBB:	sub     rsp, 30h
1EFBF:	mov     [rbp+path], rdi
1EFC3:	mov     [rbp+buf], rsi
1EFC7:	mov     [rbp+size], rdx
1EFCB:	call    ___errno_location
1EFD0:	mov     eax, [rax]
1EFD2:	mov     [rbp+old_errno], eax
1EFD5:	cmp     [rbp+size], 0
1EFDA:	jnz     short loc_1EFE2
1EFDC:	mov     rax, [rbp+size]
1EFE0:	jmp     short locret_1F01B
1EFE2:	call    ___errno_location
1EFE7:	mov     edx, [rbp+old_errno]
1EFEA:	mov     [rax], edx
1EFEC:	mov     rdx, [rbp+size]; len
1EFF0:	mov     rcx, [rbp+buf]
1EFF4:	mov     rax, [rbp+path]
1EFF8:	mov     rsi, rcx; buf
1EFFB:	mov     rdi, rax; path
1EFFE:	call    _readlink
1F003:	mov     [rbp+chars], eax
1F006:	cmp     [rbp+chars], 0
1F00A:	jns     short loc_1F018
1F00C:	call    ___errno_location
1F011:	mov     eax, [rax]
1F013:	cmp     eax, 4
1F016:	jz      short loc_1EFE2
1F018:	mov     eax, [rbp+chars]
1F01B:	leave
1F01C:	retn
1F01D:	endbr64
1F021:	push    rbp
1F022:	mov     rbp, rsp
1F025:	sub     rsp, 20h
1F029:	mov     [rbp+filename], rdi
1F02D:	mov     [rbp+size], 64h ; 'd'
1F034:	mov     eax, [rbp+size]
1F037:	cdqe
1F039:	mov     rdi, rax; n
1F03C:	call    xmalloc
1F041:	mov     [rbp+buffer], rax
1F045:	mov     eax, [rbp+size]
1F048:	movsxd  rdx, eax; size
1F04B:	mov     rcx, [rbp+buffer]
1F04F:	mov     rax, [rbp+filename]
1F053:	mov     rsi, rcx; buf
1F056:	mov     rdi, rax; path
1F059:	mov     eax, 0
1F05E:	call    __xreadlink
1F063:	mov     [rbp+nchars], eax
1F066:	mov     eax, [rbp+nchars]
1F069:	cmp     eax, [rbp+size]
1F06C:	jge     short loc_1F07F
1F06E:	mov     rax, [rbp+buffer]
1F072:	mov     rdi, rax; pointer
1F075:	call    xfree
1F07A:	mov     eax, [rbp+nchars]
1F07D:	jmp     short locret_1F090
1F07F:	mov     rax, [rbp+buffer]
1F083:	mov     rdi, rax; pointer
1F086:	call    xfree
1F08B:	shl     [rbp+size], 1
1F08E:	jmp     short loc_1F034
1F090:	leave
1F091:	retn
1F092:	endbr64
1F096:	push    rbp
1F097:	mov     rbp, rsp
1F09A:	sub     rsp, 20h
1F09E:	mov     [rbp+filedes], edi
1F0A1:	mov     [rbp+buf], rsi
1F0A5:	call    ___errno_location
1F0AA:	mov     eax, [rax]
1F0AC:	mov     [rbp+old_errno], eax
1F0AF:	call    ___errno_location
1F0B4:	mov     edx, [rbp+old_errno]
1F0B7:	mov     [rax], edx
1F0B9:	mov     rdx, [rbp+buf]
1F0BD:	mov     eax, [rbp+filedes]
1F0C0:	mov     rsi, rdx; buf
1F0C3:	mov     edi, eax; fd
1F0C5:	call    _fstat
1F0CA:	mov     [rbp+result], eax
1F0CD:	cmp     [rbp+result], 0
1F0D1:	jns     short loc_1F0DF
1F0D3:	call    ___errno_location
1F0D8:	mov     eax, [rax]
1F0DA:	cmp     eax, 4
1F0DD:	jz      short loc_1F0AF
1F0DF:	mov     eax, [rbp+result]
1F0E2:	leave
1F0E3:	retn
1F0E4:	endbr64
1F0E8:	push    rbp
1F0E9:	mov     rbp, rsp
1F0EC:	sub     rsp, 20h
1F0F0:	mov     [rbp+filename], rdi
1F0F4:	mov     [rbp+buf], rsi
1F0F8:	call    ___errno_location
1F0FD:	mov     eax, [rax]
1F0FF:	mov     [rbp+old_errno], eax
1F102:	call    ___errno_location
1F107:	mov     edx, [rbp+old_errno]
1F10A:	mov     [rax], edx
1F10C:	mov     rdx, [rbp+buf]
1F110:	mov     rax, [rbp+filename]
1F114:	mov     rsi, rdx; buf
1F117:	mov     rdi, rax; file
1F11A:	call    _stat
1F11F:	mov     [rbp+result], eax
1F122:	cmp     [rbp+result], 0
1F126:	jns     short loc_1F134
1F128:	call    ___errno_location
1F12D:	mov     eax, [rax]
1F12F:	cmp     eax, 4
1F132:	jz      short loc_1F102
1F134:	mov     eax, [rbp+result]
1F137:	leave
1F138:	retn
1F139:	endbr64
1F13D:	push    rbp
1F13E:	mov     rbp, rsp
1F141:	sub     rsp, 20h
1F145:	mov     [rbp+filename], rdi
1F149:	mov     [rbp+buf], rsi
1F14D:	call    ___errno_location
1F152:	mov     eax, [rax]
1F154:	mov     [rbp+old_errno], eax
1F157:	call    ___errno_location
1F15C:	mov     edx, [rbp+old_errno]
1F15F:	mov     [rax], edx
1F161:	mov     rdx, [rbp+buf]
1F165:	mov     rax, [rbp+filename]
1F169:	mov     rsi, rdx; buf
1F16C:	mov     rdi, rax; file
1F16F:	call    _lstat
1F174:	mov     [rbp+result], eax
1F177:	cmp     [rbp+result], 0
1F17B:	jns     short loc_1F189
1F17D:	call    ___errno_location
1F182:	mov     eax, [rax]
1F184:	cmp     eax, 4
1F187:	jz      short loc_1F157
1F189:	mov     eax, [rbp+result]
1F18C:	leave
1F18D:	retn
1F18E:	endbr64
1F192:	push    rbp
1F193:	mov     rbp, rsp
1F196:	sub     rsp, 20h
1F19A:	call    ___errno_location
1F19F:	mov     dword ptr [rax], 0
1F1A5:	mov     [rbp+size], 40h ; '@'
1F1AD:	mov     rax, [rbp+size]
1F1B1:	mov     rdi, rax; n
1F1B4:	call    xmalloc
1F1B9:	mov     [rbp+cwd], rax
1F1BD:	jmp     short loc_1F1E6
1F1BF:	add     [rbp+size], 40h ; '@'
1F1C4:	mov     rdx, [rbp+size]
1F1C8:	mov     rax, [rbp+cwd]
1F1CC:	mov     rsi, rdx; n
1F1CF:	mov     rdi, rax; p
1F1D2:	call    xrealloc
1F1D7:	mov     [rbp+cwd], rax
1F1DB:	call    ___errno_location
1F1E0:	mov     dword ptr [rax], 0
1F1E6:	mov     rdx, [rbp+size]
1F1EA:	mov     rax, [rbp+cwd]
1F1EE:	mov     rsi, rdx; size
1F1F1:	mov     rdi, rax; buf
1F1F4:	call    _getcwd
1F1F9:	mov     [rbp+result], rax
1F1FD:	cmp     [rbp+result], 0
1F202:	jnz     short loc_1F210
1F204:	call    ___errno_location
1F209:	mov     eax, [rax]
1F20B:	cmp     eax, 22h ; '''
1F20E:	jz      short loc_1F1BF
1F210:	cmp     [rbp+result], 0
1F215:	jnz     short loc_1F22A
1F217:	mov     rax, [rbp+cwd]
1F21B:	mov     rdi, rax; pointer
1F21E:	call    xfree
1F223:	mov     eax, 0
1F228:	jmp     short locret_1F22E
1F22A:	mov     rax, [rbp+cwd]
1F22E:	leave
1F22F:	retn
1F230:	endbr64
1F234:	push    rbp
1F235:	mov     rbp, rsp
1F238:	sub     rsp, 20h
1F23C:	mov     [rbp+name], rdi
1F240:	mov     rax, [rbp+name]
1F244:	mov     esi, 2Fh ; '/'; c
1F249:	mov     rdi, rax; s
1F24C:	call    _strrchr
1F251:	mov     [rbp+ptr], rax
1F255:	cmp     [rbp+ptr], 0
1F25A:	jnz     short loc_1F26D
1F25C:	lea     rax, string; '.'
1F263:	mov     rdi, rax; string
1F266:	call    xstrdup
1F26B:	jmp     short locret_1F296
1F26D:	mov     rax, [rbp+name]
1F271:	mov     rdi, rax; string
1F274:	call    xstrdup
1F279:	mov     [rbp+ptr2], rax
1F27D:	mov     rax, [rbp+ptr]
1F281:	sub     rax, [rbp+name]
1F285:	mov     rdx, rax
1F288:	mov     rax, [rbp+ptr2]
1F28C:	add     rax, rdx
1F28F:	mov     byte ptr [rax], 30h ; '0'
1F292:	mov     rax, [rbp+ptr2]
1F296:	leave
1F297:	retn
1F298:	endbr64
1F29C:	push    rbp
1F29D:	mov     rbp, rsp
1F2A0:	sub     rsp, 20h
1F2A4:	mov     [rbp+name], rdi
1F2A8:	mov     rax, [rbp+name]
1F2AC:	mov     rdi, rax; s
1F2AF:	call    _strlen
1F2B4:	mov     [rbp+len], rax
1F2B8:	mov     rax, [rbp+len]
1F2BC:	lea     rdx, [rax-1]
1F2C0:	mov     rax, [rbp+name]
1F2C4:	add     rax, rdx
1F2C7:	movzx   eax, byte ptr [rax]
1F2CA:	cmp     al, 2Fh ; '/'
1F2CC:	jnz     short loc_1F2E0
1F2CE:	mov     rax, [rbp+len]
1F2D2:	lea     rdx, [rax-1]
1F2D6:	mov     rax, [rbp+name]
1F2DA:	add     rax, rdx
1F2DD:	mov     byte ptr [rax], 0
1F2E0:	mov     rax, [rbp+name]
1F2E4:	mov     esi, 2Fh ; '/'; c
1F2E9:	mov     rdi, rax; s
1F2EC:	call    _strrchr
1F2F1:	mov     [rbp+base], rax
1F2F5:	cmp     [rbp+base], 0
1F2FA:	jz      short loc_1F306
1F2FC:	mov     rax, [rbp+base]
1F300:	add     rax, 1
1F304:	jmp     short locret_1F30A
1F306:	mov     rax, [rbp+name]
1F30A:	leave
1F30B:	retn
1F30C:	endbr64
1F310:	push    rbp
1F311:	mov     rbp, rsp
1F314:	sub     rsp, 20h
1F318:	mov     [rbp+esize], edi
1F31B:	mov     esi, 10h; s
1F320:	mov     edi, 1; n
1F325:	call    xcalloc
1F32A:	mov     [rbp+s], rax
1F32E:	mov     rax, [rbp+s]
1F332:	mov     edx, [rbp+esize]
1F335:	mov     [rax+8], edx
1F338:	mov     rax, [rbp+s]
1F33C:	leave
1F33D:	retn
1F33E:	endbr64
1F342:	push    rbp
1F343:	mov     rbp, rsp
1F346:	sub     rsp, 10h
1F34A:	mov     [rbp+stack], rdi
1F34E:	cmp     [rbp+stack], 0
1F353:	jz      short loc_1F37E
1F355:	mov     rax, [rbp+stack]
1F359:	mov     rax, [rax]
1F35C:	test    rax, rax
1F35F:	jz      short loc_1F370
1F361:	mov     rax, [rbp+stack]
1F365:	mov     rax, [rax]
1F368:	mov     rdi, rax; pointer
1F36B:	call    xfree
1F370:	mov     rax, [rbp+stack]
1F374:	mov     rdi, rax; pointer
1F377:	call    xfree
1F37C:	jmp     short locret_1F37F
1F37E:	nop
1F37F:	leave
1F380:	retn
1F381:	endbr64
1F385:	push    rbp
1F386:	mov     rbp, rsp
1F389:	sub     rsp, 10h
1F38D:	mov     [rbp+stack], rdi
1F391:	mov     [rbp+data], rsi
1F395:	mov     rax, [rbp+stack]
1F399:	mov     eax, [rax+0Ch]
1F39C:	lea     edx, [rax+1]
1F39F:	mov     rax, [rbp+stack]
1F3A3:	mov     [rax+0Ch], edx
1F3A6:	mov     rax, [rbp+stack]
1F3AA:	mov     edx, [rax+0Ch]
1F3AD:	mov     rax, [rbp+stack]
1F3B1:	mov     eax, [rax+8]
1F3B4:	imul    eax, edx
1F3B7:	movsxd  rdx, eax
1F3BA:	mov     rax, [rbp+stack]
1F3BE:	mov     rax, [rax]
1F3C1:	mov     rsi, rdx; n
1F3C4:	mov     rdi, rax; p
1F3C7:	call    xrealloc
1F3CC:	mov     rdx, [rbp+stack]
1F3D0:	mov     [rdx], rax
1F3D3:	mov     rax, [rbp+stack]
1F3D7:	mov     eax, [rax+8]
1F3DA:	movsxd  rdx, eax; n
1F3DD:	mov     rax, [rbp+stack]
1F3E1:	mov     rsi, [rax]
1F3E4:	mov     rax, [rbp+stack]
1F3E8:	mov     eax, [rax+0Ch]
1F3EB:	lea     ecx, [rax-1]
1F3EE:	mov     rax, [rbp+stack]
1F3F2:	mov     eax, [rax+8]
1F3F5:	imul    eax, ecx
1F3F8:	cdqe
1F3FA:	lea     rcx, [rsi+rax]
1F3FE:	mov     rax, [rbp+data]
1F402:	mov     rsi, rax; src
1F405:	mov     rdi, rcx; dest
1F408:	call    _memcpy
1F40D:	nop
1F40E:	leave
1F40F:	retn
1F410:	endbr64
1F414:	push    rbp
1F415:	mov     rbp, rsp
1F418:	sub     rsp, 10h
1F41C:	mov     [rbp+stack], rdi
1F420:	mov     [rbp+data], rsi
1F424:	mov     rax, [rbp+stack]
1F428:	mov     eax, [rax+0Ch]
1F42B:	test    eax, eax
1F42D:	jnz     short loc_1F436
1F42F:	mov     eax, 0
1F434:	jmp     short locret_1F4AF
1F436:	mov     rax, [rbp+stack]
1F43A:	mov     eax, [rax+8]
1F43D:	movsxd  rdx, eax; n
1F440:	mov     rax, [rbp+stack]
1F444:	mov     rsi, [rax]
1F447:	mov     rax, [rbp+stack]
1F44B:	mov     eax, [rax+0Ch]
1F44E:	lea     ecx, [rax-1]
1F451:	mov     rax, [rbp+stack]
1F455:	mov     [rax+0Ch], ecx
1F458:	mov     rax, [rbp+stack]
1F45C:	mov     ecx, [rax+0Ch]
1F45F:	mov     rax, [rbp+stack]
1F463:	mov     eax, [rax+8]
1F466:	imul    eax, ecx
1F469:	cdqe
1F46B:	lea     rcx, [rsi+rax]
1F46F:	mov     rax, [rbp+data]
1F473:	mov     rsi, rcx; src
1F476:	mov     rdi, rax; dest
1F479:	call    _memcpy
1F47E:	mov     rax, [rbp+stack]
1F482:	mov     edx, [rax+0Ch]
1F485:	mov     rax, [rbp+stack]
1F489:	mov     eax, [rax+8]
1F48C:	imul    eax, edx
1F48F:	movsxd  rdx, eax
1F492:	mov     rax, [rbp+stack]
1F496:	mov     rax, [rax]
1F499:	mov     rsi, rdx; n
1F49C:	mov     rdi, rax; p
1F49F:	call    xrealloc
1F4A4:	mov     rdx, [rbp+stack]
1F4A8:	mov     [rdx], rax
1F4AB:	mov     rax, [rbp+data]
1F4AF:	leave
1F4B0:	retn
1F4B1:	endbr64
1F4B5:	push    rbp
1F4B6:	mov     rbp, rsp
1F4B9:	sub     rsp, 20h
1F4BD:	mov     [rbp+stack], rdi
1F4C1:	mov     [rbp+data], rsi
1F4C5:	mov     [rbp+offset], edx
1F4C8:	mov     rax, [rbp+stack]
1F4CC:	mov     eax, [rax+0Ch]
1F4CF:	test    eax, eax
1F4D1:	jz      short loc_1F4DF
1F4D3:	mov     rax, [rbp+stack]
1F4D7:	mov     eax, [rax+0Ch]
1F4DA:	cmp     [rbp+offset], eax
1F4DD:	jle     short loc_1F4E6
1F4DF:	mov     eax, 0
1F4E4:	jmp     short locret_1F526
1F4E6:	mov     rax, [rbp+stack]
1F4EA:	mov     eax, [rax+8]
1F4ED:	movsxd  rdx, eax; n
1F4F0:	mov     rax, [rbp+stack]
1F4F4:	mov     rsi, [rax]
1F4F7:	mov     rax, [rbp+stack]
1F4FB:	mov     eax, [rax+0Ch]
1F4FE:	sub     eax, [rbp+offset]
1F501:	mov     ecx, eax
1F503:	mov     rax, [rbp+stack]
1F507:	mov     eax, [rax+8]
1F50A:	imul    eax, ecx
1F50D:	cdqe
1F50F:	lea     rcx, [rsi+rax]
1F513:	mov     rax, [rbp+data]
1F517:	mov     rsi, rcx; src
1F51A:	mov     rdi, rax; dest
1F51D:	call    _memcpy
1F522:	mov     rax, [rbp+data]
1F526:	leave
1F527:	retn
1F528:	endbr64
1F52C:	push    rbp
1F52D:	mov     rbp, rsp
1F530:	sub     rsp, 10h
1F534:	mov     [rbp+stack], rdi
1F538:	mov     [rbp+point], esi
1F53B:	mov     rax, [rbp+stack]
1F53F:	mov     edx, [rbp+point]
1F542:	mov     [rax+0Ch], edx
1F545:	mov     rax, [rbp+stack]
1F549:	mov     edx, [rax+0Ch]
1F54C:	mov     rax, [rbp+stack]
1F550:	mov     eax, [rax+8]
1F553:	imul    eax, edx
1F556:	movsxd  rdx, eax
1F559:	mov     rax, [rbp+stack]
1F55D:	mov     rax, [rax]
1F560:	mov     rsi, rdx; n
1F563:	mov     rdi, rax; p
1F566:	call    xrealloc
1F56B:	mov     rdx, [rbp+stack]
1F56F:	mov     [rdx], rax
1F572:	nop
1F573:	leave
1F574:	retn
1F575:	endbr64
1F579:	push    rbp
1F57A:	mov     rbp, rsp
1F57D:	mov     [rbp+stack], rdi
1F581:	mov     rax, [rbp+stack]
1F585:	mov     eax, [rax+0Ch]
1F588:	pop     rbp
1F589:	retn
1F58A:	endbr64
1F58E:	push    rbp
1F58F:	mov     rbp, rsp
1F592:	sub     rsp, 30h
1F596:	mov     [rbp+command], rdi
1F59A:	mov     [rbp+hide], esi
1F59D:	mov     rax, fs:28h
1F5A6:	mov     [rbp+var_8], rax
1F5AA:	xor     eax, eax
1F5AC:	cmp     [rbp+command], 0
1F5B1:	jnz     short loc_1F5BD
1F5B3:	mov     eax, 1
1F5B8:	jmp     loc_1F6DA
1F5BD:	call    _fork
1F5C2:	mov     [rbp+pid], eax
1F5C5:	cmp     [rbp+pid], 0
1F5C9:	jns     short loc_1F5D7
1F5CB:	mov     [rbp+status], 0FFFFFFFFh
1F5D2:	jmp     loc_1F6D7
1F5D7:	cmp     [rbp+pid], 0
1F5DB:	jnz     loc_1F6C5
1F5E1:	mov     esi, 0; handler
1F5E6:	mov     edi, 2; sig
1F5EB:	call    _signal
1F5F0:	mov     esi, 0; handler
1F5F5:	mov     edi, 3; sig
1F5FA:	call    _signal
1F5FF:	cmp     [rbp+hide], 0
1F603:	jz      short loc_1F67C
1F605:	mov     edi, 1; fd
1F60A:	call    _close
1F60F:	mov     edi, 2; fd
1F614:	call    _close
1F619:	mov     rax, cs:stdout_log_name
1F620:	lea     rdx, aW; 'w'
1F627:	mov     rsi, rdx; modes
1F62A:	mov     rdi, rax; filename
1F62D:	call    _fopen
1F632:	mov     [rbp+stdout_log], rax
1F636:	mov     rax, cs:stderr_log_name
1F63D:	lea     rdx, aW; 'w'
1F644:	mov     rsi, rdx; modes
1F647:	mov     rdi, rax; filename
1F64A:	call    _fopen
1F64F:	mov     [rbp+stderr_log], rax
1F653:	mov     rax, [rbp+command]
1F657:	mov     edx, 4; n
1F65C:	lea     rcx, aRpm; 'rpm '
1F663:	mov     rsi, rcx; s2
1F666:	mov     rdi, rax; s1
1F669:	call    _strncmp
1F66E:	test    eax, eax
1F670:	jz      short loc_1F67C
1F672:	mov     edi, 0; fd
1F677:	call    _close
1F67C:	mov     rdx, cs:environ@GLIBC_2_2_5
1F683:	mov     rax, [rbp+command]
1F687:	mov     r9, rdx
1F68A:	mov     r8d, 0
1F690:	mov     rcx, rax
1F693:	lea     rax, aC; '-c'
1F69A:	mov     rdx, rax
1F69D:	lea     rax, arg; 'sh'
1F6A4:	mov     rsi, rax; arg
1F6A7:	lea     rax, path; '/bin/sh'
1F6AE:	mov     rdi, rax; path
1F6B1:	mov     eax, 0
1F6B6:	call    _execle
1F6BB:	mov     edi, 7Fh; status
1F6C0:	call    __exit
1F6C5:	nop
1F6C6:	lea     rax, [rbp+status]
1F6CA:	mov     rdi, rax; stat_loc
1F6CD:	call    _wait
1F6D2:	cmp     [rbp+pid], eax
1F6D5:	jnz     short loc_1F6C6
1F6D7:	mov     eax, [rbp+status]
1F6DA:	mov     rdx, [rbp+var_8]
1F6DE:	sub     rdx, fs:28h
1F6E7:	jz      short locret_1F6EE
1F6E9:	call    ___stack_chk_fail
1F6EE:	leave
1F6EF:	retn
1F6F0:	endbr64
1F6F4:	push    rbp
1F6F5:	mov     rbp, rsp
1F6F8:	sub     rsp, 20h
1F6FC:	mov     [rbp+command], rdi
1F700:	mov     [rbp+hide], esi
1F703:	cmp     [rbp+hide], 0
1F707:	jz      short loc_1F73B
1F709:	mov     edi, 1; mode
1F70E:	call    signals
1F713:	mov     edx, [rbp+hide]
1F716:	mov     rax, [rbp+command]
1F71A:	mov     esi, edx; hide
1F71C:	mov     rdi, rax; command
1F71F:	mov     eax, 0
1F724:	call    my_system
1F729:	mov     [rbp+child_exit_code], eax
1F72C:	mov     edi, 0; mode
1F731:	call    signals
1F736:	jmp     loc_1F7C2
1F73B:	mov     edi, 0; mode
1F740:	call    tty_set_mode
1F745:	mov     eax, 0
1F74A:	call    tty_defaults
1F74F:	mov     rax, cs:screen
1F756:	mov     rdi, rax; buf
1F759:	call    tty_put_screen
1F75E:	mov     edi, 0; status
1F763:	call    signal_handlers
1F768:	mov     edx, [rbp+hide]
1F76B:	mov     rax, [rbp+command]
1F76F:	mov     esi, edx; hide
1F771:	mov     rdi, rax; command
1F774:	mov     eax, 0
1F779:	call    my_system
1F77E:	mov     [rbp+child_exit_code], eax
1F781:	mov     edi, 1; status
1F786:	call    signal_handlers
1F78B:	mov     edx, 2; count
1F790:	lea     rax, buf; 'nn'
1F797:	mov     rsi, rax; buf
1F79A:	mov     edi, 1; fd
1F79F:	call    xwrite
1F7A4:	mov     edi, 1; mode
1F7A9:	call    tty_set_mode
1F7AE:	mov     eax, 0
1F7B3:	call    tty_defaults
1F7B8:	mov     edi, 0; resize_required
1F7BD:	call    resize
1F7C2:	mov     eax, [rbp+child_exit_code]
1F7C5:	leave
1F7C6:	retn
1F7C7:	endbr64
1F7CB:	push    rbp
1F7CC:	mov     rbp, rsp
1F7CF:	mov     rax, cs:stdout_log_name
1F7D6:	test    rax, rax
1F7D9:	jz      short loc_1F7EA
1F7DB:	mov     rax, cs:stdout_log_name
1F7E2:	mov     rdi, rax; name
1F7E5:	call    _unlink
1F7EA:	mov     rax, cs:stderr_log_name
1F7F1:	test    rax, rax
1F7F4:	jz      short loc_1F805
1F7F6:	mov     rax, cs:stderr_log_name
1F7FD:	mov     rdi, rax; name
1F800:	call    _unlink
1F805:	nop
1F806:	pop     rbp
1F807:	retn
1F808:	endbr64
1F80C:	push    rbp
1F80D:	mov     rbp, rsp
1F810:	push    rbx
1F811:	sub     rsp, 48h
1F815:	mov     [rbp+command], rdi
1F819:	mov     rax, cs:stderr_log_name
1F820:	lea     rdx, aR_1; 'r'
1F827:	mov     rsi, rdx; modes
1F82A:	mov     rdi, rax; filename
1F82D:	call    _fopen
1F832:	mov     [rbp+stderr_log], rax
1F836:	cmp     [rbp+stderr_log], 0
1F83B:	jnz     loc_1F8C4
1F841:	mov     rax, [rbp+command]
1F845:	mov     rdi, rax; s
1F848:	call    _strlen
1F84D:	mov     rbx, rax
1F850:	mov     rax, cs:stderr_log_name
1F857:	mov     rdi, rax; s
1F85A:	call    _strlen
1F85F:	add     rax, rbx
1F862:	add     rax, 20h ; ' '
1F866:	mov     [rbp+buf_len], rax
1F86A:	mov     rax, [rbp+buf_len]
1F86E:	mov     rdi, rax; n
1F871:	call    xmalloc
1F876:	mov     [rbp+buf], rax
1F87A:	mov     rcx, cs:stderr_log_name
1F881:	mov     rdx, [rbp+command]
1F885:	mov     rax, [rbp+buf]
1F889:	lea     rsi, aSCannotOpenLog; '%s: cannot open log file %s'
1F890:	mov     rdi, rax; s
1F893:	mov     eax, 0
1F898:	call    _sprintf
1F89D:	mov     rax, [rbp+buf]
1F8A1:	mov     edx, 1Eh; flags
1F8A6:	mov     esi, 0; options
1F8AB:	mov     rdi, rax; message
1F8AE:	call    il_read_char
1F8B3:	mov     rax, [rbp+buf]
1F8B7:	mov     rdi, rax; pointer
1F8BA:	call    xfree
1F8BF:	jmp     loc_1F95C
1F8C4:	mov     edi, 801h; n
1F8C9:	call    xmalloc
1F8CE:	mov     [rbp+buf_0], rax
1F8D2:	jmp     short loc_1F927
1F8D4:	mov     rax, [rbp+buf_0]
1F8D8:	mov     rdi, rax; s
1F8DB:	call    _strlen
1F8E0:	mov     [rbp+len], eax
1F8E3:	mov     eax, [rbp+len]
1F8E6:	cdqe
1F8E8:	lea     rdx, [rax-1]
1F8EC:	mov     rax, [rbp+buf_0]
1F8F0:	add     rax, rdx
1F8F3:	movzx   eax, byte ptr [rax]
1F8F6:	cmp     al, 0Ah
1F8F8:	jnz     short loc_1F90D
1F8FA:	mov     eax, [rbp+len]
1F8FD:	cdqe
1F8FF:	lea     rdx, [rax-1]
1F903:	mov     rax, [rbp+buf_0]
1F907:	add     rax, rdx
1F90A:	mov     byte ptr [rax], 0
1F90D:	mov     rax, [rbp+buf_0]
1F911:	mov     edx, 0Ah; flags
1F916:	mov     esi, 0; options
1F91B:	mov     rdi, rax; message
1F91E:	call    il_read_char
1F923:	test    al, al
1F925:	jz      short loc_1F943
1F927:	mov     rdx, [rbp+stderr_log]; stream
1F92B:	mov     rax, [rbp+buf_0]
1F92F:	mov     esi, 801h; n
1F934:	mov     rdi, rax; s
1F937:	call    _fgets
1F93C:	test    rax, rax
1F93F:	jnz     short loc_1F8D4
1F941:	jmp     short loc_1F944
1F943:	nop
1F944:	mov     rax, [rbp+buf_0]
1F948:	mov     rdi, rax; pointer
1F94B:	call    xfree
1F950:	mov     rax, [rbp+stderr_log]
1F954:	mov     rdi, rax; stream
1F957:	call    _fclose
1F95C:	nop
1F95D:	mov     rbx, [rbp+var_8]
1F961:	leave
1F962:	retn
1F963:	endbr64
1F967:	push    rbp
1F968:	mov     rbp, rsp
1F96B:	push    string_len
1F96D:	push    prefixes
1F96F:	push    i
1F971:	push    j
1F972:	sub     rsp, 10h
1F976:	mov     [rbp+string], rdi
1F97A:	mov     [rbp+len], rsi
1F97E:	mov     prefixes, cs:tilde_additional_prefixes
1F985:	mov     rax, [rbp+string]
1F989:	mov     rdi, rax; s
1F98C:	call    _strlen
1F991:	mov     r14d, eax
1F994:	mov     rax, [rbp+len]
1F998:	mov     dword ptr [rax], 0
1F99E:	mov     rax, [rbp+string]
1F9A2:	movzx   eax, byte ptr [rax]
1F9A5:	test    al, al
1F9A7:	jz      short loc_1F9B4
1F9A9:	mov     rax, [rbp+string]
1F9AD:	movzx   eax, byte ptr [rax]
1F9B0:	cmp     al, 7Eh ; '~'
1F9B2:	jnz     short loc_1F9BE
1F9B4:	mov     eax, 0
1F9B9:	jmp     loc_1FA67
1F9BE:	test    prefixes, prefixes
1F9C1:	jz      loc_1FA64
1F9C7:	mov     r12d, 0
1F9CD:	jmp     loc_1FA5B
1F9D2:	mov     ebx, 0
1F9D7:	jmp     short loc_1FA45
1F9D9:	movsxd  rax, ebx
1F9DC:	shl     rax, 3
1F9E0:	add     rax, prefixes
1F9E3:	mov     rax, [rax]
1F9E6:	mov     rdi, rax; s
1F9E9:	call    _strlen
1F9EE:	mov     rdx, rax; n
1F9F1:	movsxd  rax, ebx
1F9F4:	shl     rax, 3
1F9F8:	add     rax, prefixes
1F9FB:	mov     rax, [rax]
1F9FE:	movsxd  rsi, r12d
1FA01:	mov     rcx, [rbp+string]
1FA05:	add     rcx, rsi
1FA08:	mov     rsi, rax; s2
1FA0B:	mov     rdi, rcx; s1
1FA0E:	call    _strncmp
1FA13:	test    eax, eax
1FA15:	jnz     short loc_1FA42
1FA17:	movsxd  rax, ebx
1FA1A:	shl     rax, 3
1FA1E:	add     rax, prefixes
1FA21:	mov     rax, [rax]
1FA24:	mov     rdi, rax; s
1FA27:	call    _strlen
1FA2C:	sub     eax, 1
1FA2F:	mov     edx, eax
1FA31:	mov     rax, [rbp+len]
1FA35:	mov     [rax], edx
1FA37:	mov     rax, [rbp+len]
1FA3B:	mov     eax, [rax]
1FA3D:	add     eax, r12d
1FA40:	jmp     short loc_1FA67
1FA42:	add     ebx, 1
1FA45:	movsxd  rax, ebx
1FA48:	shl     rax, 3
1FA4C:	add     rax, prefixes
1FA4F:	mov     rax, [rax]
1FA52:	test    rax, rax
1FA55:	jnz     short loc_1F9D9
1FA57:	add     r12d, 1
1FA5B:	cmp     r12d, r14d
1FA5E:	jl      loc_1F9D2
1FA64:	mov     eax, r14d
1FA67:	add     rsp, 10h
1FA6B:	pop     j
1FA6C:	pop     i
1FA6E:	pop     prefixes
1FA70:	pop     string_len
1FA72:	pop     rbp
1FA73:	retn
1FA74:	endbr64
1FA78:	push    rbp
1FA79:	mov     rbp, rsp
1FA7C:	push    string_len
1FA7E:	push    suffixes
1FA80:	push    j
1FA82:	push    i
1FA83:	sub     rsp, 10h
1FA87:	mov     [rbp+string], rdi
1FA8B:	mov     suffixes, cs:tilde_additional_suffixes
1FA92:	mov     rax, [rbp+string]
1FA96:	mov     rdi, rax; s
1FA99:	call    _strlen
1FA9E:	mov     r14d, eax
1FAA1:	mov     ebx, 0
1FAA6:	jmp     loc_1FB39
1FAAB:	movsxd  rdx, ebx
1FAAE:	mov     rax, [rbp+string]
1FAB2:	add     rax, rdx
1FAB5:	movzx   eax, byte ptr [rax]
1FAB8:	cmp     al, 2Fh ; '/'
1FABA:	jz      loc_1FB42
1FAC0:	movsxd  rdx, ebx
1FAC3:	mov     rax, [rbp+string]
1FAC7:	add     rax, rdx
1FACA:	movzx   eax, byte ptr [rax]
1FACD:	test    al, al
1FACF:	jz      short loc_1FB42
1FAD1:	mov     r12d, 0
1FAD7:	jmp     short loc_1FB1F
1FAD9:	movsxd  rax, r12d
1FADC:	shl     rax, 3
1FAE0:	add     rax, suffixes
1FAE3:	mov     rax, [rax]
1FAE6:	mov     rdi, rax; s
1FAE9:	call    _strlen
1FAEE:	mov     rdx, rax; n
1FAF1:	movsxd  rax, r12d
1FAF4:	shl     rax, 3
1FAF8:	add     rax, suffixes
1FAFB:	mov     rax, [rax]
1FAFE:	movsxd  rsi, ebx
1FB01:	mov     rcx, [rbp+string]
1FB05:	add     rcx, rsi
1FB08:	mov     rsi, rax; s2
1FB0B:	mov     rdi, rcx; s1
1FB0E:	call    _strncmp
1FB13:	test    eax, eax
1FB15:	jnz     short loc_1FB1B
1FB17:	mov     eax, ebx
1FB19:	jmp     short loc_1FB44
1FB1B:	add     r12d, 1
1FB1F:	test    suffixes, suffixes
1FB22:	jz      short loc_1FB36
1FB24:	movsxd  rax, r12d
1FB27:	shl     rax, 3
1FB2B:	add     rax, suffixes
1FB2E:	mov     rax, [rax]
1FB31:	test    rax, rax
1FB34:	jnz     short loc_1FAD9
1FB36:	add     ebx, 1
1FB39:	cmp     ebx, r14d
1FB3C:	jl      loc_1FAAB
1FB42:	mov     eax, ebx
1FB44:	add     rsp, 10h
1FB48:	pop     i
1FB49:	pop     j
1FB4B:	pop     suffixes
1FB4D:	pop     string_len
1FB4F:	pop     rbp
1FB50:	retn
1FB51:	endbr64
1FB55:	push    rbp
1FB56:	mov     rbp, rsp
1FB59:	push    r12
1FB5B:	push    rbx
1FB5C:	sub     rsp, 40h
1FB60:	mov     [rbp+string], rdi
1FB64:	mov     rax, fs:28h
1FB6D:	mov     [rbp+var_18], rax
1FB71:	xor     eax, eax
1FB73:	mov     [rbp+result_index], 0
1FB7A:	mov     eax, [rbp+result_index]
1FB7D:	mov     [rbp+result_size], eax
1FB80:	mov     [rbp+result], 0
1FB88:	lea     rdx, [rbp+len]
1FB8C:	mov     rax, [rbp+string]
1FB90:	mov     rsi, rdx; len
1FB93:	mov     rdi, rax; string
1FB96:	mov     eax, 0
1FB9B:	call    tilde_find_prefix
1FBA0:	mov     ebx, eax
1FBA2:	mov     eax, [rbp+result_index]
1FBA5:	add     eax, ebx
1FBA7:	cmp     [rbp+result_size], eax
1FBAA:	jg      short loc_1FBCE
1FBAC:	lea     eax, [rbx+14h]
1FBAF:	add     [rbp+result_size], eax
1FBB2:	mov     eax, [rbp+result_size]
1FBB5:	add     eax, 1
1FBB8:	movsxd  rdx, eax
1FBBB:	mov     rax, [rbp+result]
1FBBF:	mov     rsi, rdx; n
1FBC2:	mov     rdi, rax; p
1FBC5:	call    xrealloc
1FBCA:	mov     [rbp+result], rax
1FBCE:	movsxd  rdx, ebx; n
1FBD1:	mov     eax, [rbp+result_index]
1FBD4:	movsxd  rcx, eax
1FBD7:	mov     rax, [rbp+result]
1FBDB:	add     rcx, rax
1FBDE:	mov     rax, [rbp+string]
1FBE2:	mov     rsi, rax; src
1FBE5:	mov     rdi, rcx; dest
1FBE8:	call    _strncpy
1FBED:	add     [rbp+result_index], ebx
1FBF0:	movsxd  rax, ebx
1FBF3:	add     [rbp+string], rax
1FBF7:	mov     rax, [rbp+string]
1FBFB:	mov     rdi, rax; string
1FBFE:	mov     eax, 0
1FC03:	call    tilde_find_suffix
1FC08:	mov     r12d, eax
1FC0B:	test    ebx, ebx
1FC0D:	jnz     short loc_1FC40
1FC0F:	test    r12d, r12d
1FC12:	jnz     short loc_1FC40
1FC14:	mov     eax, [rbp+result_index]
1FC17:	movsxd  rdx, eax
1FC1A:	mov     rax, [rbp+result]
1FC1E:	add     rax, rdx
1FC21:	mov     byte ptr [rax], 0
1FC24:	mov     rax, [rbp+result]
1FC28:	mov     rdx, [rbp+var_18]
1FC2C:	sub     rdx, fs:28h
1FC35:	jz      loc_1FD17
1FC3B:	jmp     loc_1FD12
1FC40:	lea     eax, [r12+1]
1FC45:	cdqe
1FC47:	mov     rdi, rax; n
1FC4A:	call    xmalloc
1FC4F:	mov     [rbp+tilde_word], rax
1FC53:	movsxd  rdx, r12d; n
1FC56:	mov     rcx, [rbp+string]
1FC5A:	mov     rax, [rbp+tilde_word]
1FC5E:	mov     rsi, rcx; src
1FC61:	mov     rdi, rax; dest
1FC64:	call    _strncpy
1FC69:	movsxd  rdx, r12d
1FC6C:	mov     rax, [rbp+tilde_word]
1FC70:	add     rax, rdx
1FC73:	mov     byte ptr [rax], 0
1FC76:	movsxd  rax, r12d
1FC79:	add     [rbp+string], rax
1FC7D:	mov     rax, [rbp+tilde_word]
1FC81:	mov     rdi, rax; filename
1FC84:	mov     eax, 0
1FC89:	call    tilde_expand_word
1FC8E:	mov     [rbp+expansion], rax
1FC92:	mov     rax, [rbp+tilde_word]
1FC96:	mov     rdi, rax; pointer
1FC99:	call    xfree
1FC9E:	mov     rax, [rbp+expansion]
1FCA2:	mov     rdi, rax; s
1FCA5:	call    _strlen
1FCAA:	mov     [rbp+len], eax
1FCAD:	mov     edx, [rbp+len]
1FCB0:	mov     eax, [rbp+result_index]
1FCB3:	add     eax, edx
1FCB5:	cmp     [rbp+result_size], eax
1FCB8:	jg      short loc_1FCDF
1FCBA:	mov     eax, [rbp+len]
1FCBD:	add     eax, 14h
1FCC0:	add     [rbp+result_size], eax
1FCC3:	mov     eax, [rbp+result_size]
1FCC6:	add     eax, 1
1FCC9:	movsxd  rdx, eax
1FCCC:	mov     rax, [rbp+result]
1FCD0:	mov     rsi, rdx; n
1FCD3:	mov     rdi, rax; p
1FCD6:	call    xrealloc
1FCDB:	mov     [rbp+result], rax
1FCDF:	mov     eax, [rbp+result_index]
1FCE2:	movsxd  rdx, eax
1FCE5:	mov     rax, [rbp+result]
1FCE9:	add     rdx, rax
1FCEC:	mov     rax, [rbp+expansion]
1FCF0:	mov     rsi, rax; src
1FCF3:	mov     rdi, rdx; dest
1FCF6:	call    _strcpy
1FCFB:	mov     eax, [rbp+len]
1FCFE:	add     [rbp+result_index], eax
1FD01:	mov     rax, [rbp+expansion]
1FD05:	mov     rdi, rax; pointer
1FD08:	call    xfree
1FD0D:	jmp     loc_1FB88
1FD12:	call    ___stack_chk_fail
1FD17:	add     rsp, 40h
1FD1B:	pop     rbx
1FD1C:	pop     r12
1FD1E:	pop     rbp
1FD1F:	retn
1FD20:	endbr64
1FD24:	push    rbp
1FD25:	mov     rbp, rsp
1FD28:	push    rbx
1FD29:	sub     rsp, 68h
1FD2D:	mov     [rbp+filename], rdi
1FD31:	cmp     [rbp+filename], 0
1FD36:	jnz     short loc_1FD42
1FD38:	mov     eax, 0
1FD3D:	jmp     loc_2008E
1FD42:	mov     rax, [rbp+filename]
1FD46:	mov     rdi, rax; s
1FD49:	call    _strlen
1FD4E:	add     rax, 1
1FD52:	mov     rdi, rax; n
1FD55:	call    xmalloc
1FD5A:	mov     rdx, rax
1FD5D:	mov     rax, [rbp+filename]
1FD61:	mov     rsi, rax; src
1FD64:	mov     rdi, rdx; dest
1FD67:	call    _strcpy
1FD6C:	mov     [rbp+dirname], rax
1FD70:	mov     rax, [rbp+dirname]
1FD74:	movzx   eax, byte ptr [rax]
1FD77:	cmp     al, 7Eh ; '~'
1FD79:	jz      short loc_1FD84
1FD7B:	mov     rax, [rbp+dirname]
1FD7F:	jmp     loc_2008E
1FD84:	mov     rax, [rbp+dirname]
1FD88:	add     rax, 1
1FD8C:	movzx   eax, byte ptr [rax]
1FD8F:	test    al, al
1FD91:	jz      short loc_1FDA6
1FD93:	mov     rax, [rbp+dirname]
1FD97:	add     rax, 1
1FD9B:	movzx   eax, byte ptr [rax]
1FD9E:	cmp     al, 2Fh ; '/'
1FDA0:	jnz     loc_1FE7E
1FDA6:	lea     rax, aHome_0; 'HOME'
1FDAD:	mov     rdi, rax; name
1FDB0:	call    _getenv
1FDB5:	mov     [rbp+temp_home], rax
1FDB9:	cmp     [rbp+temp_home], 0
1FDBE:	jnz     short loc_1FDE3
1FDC0:	call    _getuid
1FDC5:	mov     edi, eax; uid
1FDC7:	call    _getpwuid
1FDCC:	mov     [rbp+entry], rax
1FDD0:	cmp     [rbp+entry], 0
1FDD5:	jz      short loc_1FDE3
1FDD7:	mov     rax, [rbp+entry]
1FDDB:	mov     rax, [rax+20h]
1FDDF:	mov     [rbp+temp_home], rax
1FDE3:	cmp     [rbp+temp_home], 0
1FDE8:	jz      short loc_1FDF8
1FDEA:	mov     rax, [rbp+temp_home]
1FDEE:	mov     rdi, rax; s
1FDF1:	call    _strlen
1FDF6:	jmp     short loc_1FDFD
1FDF8:	mov     eax, 0
1FDFD:	mov     [rbp+home_len], eax
1FE00:	mov     rax, [rbp+dirname]
1FE04:	add     rax, 1
1FE08:	mov     rdi, rax; s
1FE0B:	call    _strlen
1FE10:	mov     rdx, rax
1FE13:	mov     eax, [rbp+home_len]
1FE16:	cdqe
1FE18:	add     rax, rdx
1FE1B:	add     rax, 1
1FE1F:	mov     rdi, rax; n
1FE22:	call    xmalloc
1FE27:	mov     [rbp+temp_name], rax
1FE2B:	cmp     [rbp+temp_home], 0
1FE30:	jz      short loc_1FE45
1FE32:	mov     rdx, [rbp+temp_home]
1FE36:	mov     rax, [rbp+temp_name]
1FE3A:	mov     rsi, rdx; src
1FE3D:	mov     rdi, rax; dest
1FE40:	call    _strcpy
1FE45:	mov     rax, [rbp+dirname]
1FE49:	lea     rdx, [rax+1]
1FE4D:	mov     eax, [rbp+home_len]
1FE50:	movsxd  rcx, eax
1FE53:	mov     rax, [rbp+temp_name]
1FE57:	add     rax, rcx
1FE5A:	mov     rsi, rdx; src
1FE5D:	mov     rdi, rax; dest
1FE60:	call    _strcpy
1FE65:	mov     rax, [rbp+dirname]
1FE69:	mov     rdi, rax; pointer
1FE6C:	call    xfree
1FE71:	mov     rax, [rbp+temp_name]
1FE75:	mov     [rbp+dirname], rax
1FE79:	jmp     loc_2008A
1FE7E:	mov     rax, [rbp+dirname]
1FE82:	mov     rdi, rax; s
1FE85:	call    _strlen
1FE8A:	mov     rdi, rax; n
1FE8D:	call    xmalloc
1FE92:	mov     [rbp+username], rax
1FE96:	mov     [rbp+i], 1
1FE9D:	jmp     short loc_1FEC6
1FE9F:	mov     eax, [rbp+i]
1FEA2:	movsxd  rdx, eax
1FEA5:	mov     rax, [rbp+dirname]
1FEA9:	add     rax, rdx
1FEAC:	mov     edx, [rbp+i]
1FEAF:	movsxd  rdx, edx
1FEB2:	lea     rcx, [rdx-1]
1FEB6:	mov     rdx, [rbp+username]
1FEBA:	add     rdx, rcx
1FEBD:	movzx   eax, byte ptr [rax]
1FEC0:	mov     [rdx], al
1FEC2:	add     [rbp+i], 1
1FEC6:	mov     eax, [rbp+i]
1FEC9:	movsxd  rdx, eax
1FECC:	mov     rax, [rbp+dirname]
1FED0:	add     rax, rdx
1FED3:	movzx   eax, byte ptr [rax]
1FED6:	test    al, al
1FED8:	jz      short loc_1FEEE
1FEDA:	mov     eax, [rbp+i]
1FEDD:	movsxd  rdx, eax
1FEE0:	mov     rax, [rbp+dirname]
1FEE4:	add     rax, rdx
1FEE7:	movzx   eax, byte ptr [rax]
1FEEA:	cmp     al, 2Fh ; '/'
1FEEC:	jnz     short loc_1FE9F
1FEEE:	mov     eax, [rbp+i]
1FEF1:	cdqe
1FEF3:	lea     rdx, [rax-1]
1FEF7:	mov     rax, [rbp+username]
1FEFB:	add     rax, rdx
1FEFE:	mov     byte ptr [rax], 0
1FF01:	mov     rax, [rbp+username]
1FF05:	mov     rdi, rax; name
1FF08:	call    _getpwnam
1FF0D:	mov     [rbp+user_entry], rax
1FF11:	cmp     [rbp+user_entry], 0
1FF16:	jnz     loc_1FFE9
1FF1C:	mov     rax, cs:tilde_expansion_failure_hook
1FF23:	test    rax, rax
1FF26:	jz      loc_20079
1FF2C:	mov     rdx, cs:tilde_expansion_failure_hook
1FF33:	mov     rax, [rbp+username]
1FF37:	mov     rdi, rax
1FF3A:	mov     eax, 0
1FF3F:	call    rdx ; tilde_expansion_failure_hook
1FF41:	mov     [rbp+expansion], rax
1FF45:	cmp     [rbp+expansion], 0
1FF4A:	jz      loc_20079
1FF50:	mov     rax, [rbp+expansion]
1FF54:	mov     rdi, rax; s
1FF57:	call    _strlen
1FF5C:	mov     [rbp+len], eax
1FF5F:	mov     eax, [rbp+len]
1FF62:	add     eax, 1
1FF65:	movsxd  rbx, eax
1FF68:	mov     eax, [rbp+i]
1FF6B:	movsxd  rdx, eax
1FF6E:	mov     rax, [rbp+dirname]
1FF72:	add     rax, rdx
1FF75:	mov     rdi, rax; s
1FF78:	call    _strlen
1FF7D:	add     rax, rbx
1FF80:	mov     rdi, rax; n
1FF83:	call    xmalloc
1FF88:	mov     [rbp+temp_name], rax
1FF8C:	mov     rdx, [rbp+expansion]
1FF90:	mov     rax, [rbp+temp_name]
1FF94:	mov     rsi, rdx; src
1FF97:	mov     rdi, rax; dest
1FF9A:	call    _strcpy
1FF9F:	mov     eax, [rbp+i]
1FFA2:	movsxd  rdx, eax
1FFA5:	mov     rax, [rbp+dirname]
1FFA9:	add     rdx, rax
1FFAC:	mov     eax, [rbp+len]
1FFAF:	movsxd  rcx, eax
1FFB2:	mov     rax, [rbp+temp_name]
1FFB6:	add     rax, rcx
1FFB9:	mov     rsi, rdx; src
1FFBC:	mov     rdi, rax; dest
1FFBF:	call    _strcpy
1FFC4:	mov     rax, [rbp+expansion]
1FFC8:	mov     rdi, rax; pointer
1FFCB:	call    xfree
1FFD0:	mov     rax, [rbp+dirname]
1FFD4:	mov     rdi, rax; pointer
1FFD7:	call    xfree
1FFDC:	mov     rax, [rbp+temp_name]
1FFE0:	mov     [rbp+dirname], rax
1FFE4:	jmp     loc_20079
1FFE9:	mov     rax, [rbp+user_entry]
1FFED:	mov     rax, [rax+20h]
1FFF1:	mov     rdi, rax; s
1FFF4:	call    _strlen
1FFF9:	mov     [rbp+len], eax
1FFFC:	mov     eax, [rbp+len]
1FFFF:	add     eax, 1
20002:	movsxd  rbx, eax
20005:	mov     eax, [rbp+i]
20008:	movsxd  rdx, eax
2000B:	mov     rax, [rbp+dirname]
2000F:	add     rax, rdx
20012:	mov     rdi, rax; s
20015:	call    _strlen
2001A:	add     rax, rbx
2001D:	mov     rdi, rax; n
20020:	call    xmalloc
20025:	mov     [rbp+temp_name], rax
20029:	mov     rax, [rbp+user_entry]
2002D:	mov     rdx, [rax+20h]
20031:	mov     rax, [rbp+temp_name]
20035:	mov     rsi, rdx; src
20038:	mov     rdi, rax; dest
2003B:	call    _strcpy
20040:	mov     eax, [rbp+i]
20043:	movsxd  rdx, eax
20046:	mov     rax, [rbp+dirname]
2004A:	add     rdx, rax
2004D:	mov     eax, [rbp+len]
20050:	movsxd  rcx, eax
20053:	mov     rax, [rbp+temp_name]
20057:	add     rax, rcx
2005A:	mov     rsi, rdx; src
2005D:	mov     rdi, rax; dest
20060:	call    _strcpy
20065:	mov     rax, [rbp+dirname]
20069:	mov     rdi, rax; pointer
2006C:	call    xfree
20071:	mov     rax, [rbp+temp_name]
20075:	mov     [rbp+dirname], rax
20079:	call    _endpwent
2007E:	mov     rax, [rbp+username]
20082:	mov     rdi, rax; pointer
20085:	call    xfree
2008A:	mov     rax, [rbp+dirname]
2008E:	mov     rbx, [rbp+var_8]
20092:	leave
20093:	retn
20094:	endbr64
20098:	push    rbp
20099:	mov     rbp, rsp
2009C:	sub     rsp, 10h
200A0:	mov     edi, 18h; n
200A5:	call    xmalloc
200AA:	mov     [rbp+state], rax
200AE:	mov     rdx, cs:the_history
200B5:	mov     rax, [rbp+state]
200B9:	mov     [rax], rdx
200BC:	mov     edx, cs:history_offset
200C2:	mov     rax, [rbp+state]
200C6:	mov     [rax+8], edx
200C9:	mov     edx, cs:history_length
200CF:	mov     rax, [rbp+state]
200D3:	mov     [rax+0Ch], edx
200D6:	mov     edx, cs:history_size
200DC:	mov     rax, [rbp+state]
200E0:	mov     [rax+10h], edx
200E3:	mov     rax, [rbp+state]
200E7:	leave
200E8:	retn
200E9:	endbr64
200ED:	push    rbp
200EE:	mov     rbp, rsp
200F1:	mov     [rbp+state], rdi
200F5:	mov     rax, [rbp+state]
200F9:	mov     rax, [rax]
200FC:	mov     cs:the_history, rax
20103:	mov     rax, [rbp+state]
20107:	mov     eax, [rax+8]
2010A:	mov     cs:history_offset, eax
20110:	mov     rax, [rbp+state]
20114:	mov     eax, [rax+0Ch]
20117:	mov     cs:history_length, eax
2011D:	mov     rax, [rbp+state]
20121:	mov     eax, [rax+10h]
20124:	mov     cs:history_size, eax
2012A:	nop
2012B:	pop     rbp
2012C:	retn
2012D:	endbr64
20131:	push    rbp
20132:	mov     rbp, rsp
20135:	mov     eax, cs:history_length
2013B:	mov     cs:history_offset, eax
20141:	nop
20142:	pop     rbp
20143:	retn
20144:	endbr64
20148:	push    rbp
20149:	mov     rbp, rsp
2014C:	push    result
2014E:	push    i
2014F:	mov     r12d, 0
20155:	mov     ebx, 0
2015A:	jmp     short loc_20188
2015C:	mov     rdx, cs:the_history
20163:	movsxd  rax, ebx
20166:	shl     rax, 3
2016A:	add     rax, rdx
2016D:	mov     rax, [rax]
20170:	mov     rax, [rax]
20173:	mov     rdi, rax; s
20176:	call    _strlen
2017B:	mov     edx, eax
2017D:	mov     eax, r12d
20180:	add     eax, edx
20182:	mov     r12d, eax
20185:	add     ebx, 1
20188:	mov     rax, cs:the_history
2018F:	test    rax, rax
20192:	jz      short loc_201AD
20194:	mov     rdx, cs:the_history
2019B:	movsxd  rax, ebx
2019E:	shl     rax, 3
201A2:	add     rax, rdx
201A5:	mov     rax, [rax]
201A8:	test    rax, rax
201AB:	jnz     short loc_2015C
201AD:	mov     eax, r12d
201B0:	pop     i
201B1:	pop     result
201B3:	pop     rbp
201B4:	retn
201B5:	endbr64
201B9:	push    rbp
201BA:	mov     rbp, rsp
201BD:	push    rbx
201BE:	sub     rsp, 28h
201C2:	mov     [rbp+string], rdi
201C6:	mov     eax, cs:history_stifled
201CC:	test    eax, eax
201CE:	jz      loc_20280
201D4:	mov     edx, cs:history_length
201DA:	mov     eax, cs:max_input_history
201E0:	cmp     edx, eax
201E2:	jnz     loc_20280
201E8:	mov     eax, cs:history_length
201EE:	test    eax, eax
201F0:	jz      loc_203A0
201F6:	mov     rax, cs:the_history
201FD:	mov     rax, [rax]
20200:	test    rax, rax
20203:	jz      short loc_2022C
20205:	mov     rax, cs:the_history
2020C:	mov     rax, [rax]
2020F:	mov     rax, [rax]
20212:	mov     rdi, rax; pointer
20215:	call    xfree
2021A:	mov     rax, cs:the_history
20221:	mov     rax, [rax]
20224:	mov     rdi, rax; pointer
20227:	call    xfree
2022C:	mov     ebx, 0
20231:	jmp     short loc_20262
20233:	mov     rdx, cs:the_history
2023A:	movsxd  rax, ebx
2023D:	add     rax, 1
20241:	shl     rax, 3
20245:	add     rax, rdx
20248:	mov     rcx, cs:the_history
2024F:	movsxd  rdx, ebx
20252:	shl     rdx, 3
20256:	add     rdx, rcx
20259:	mov     rax, [rax]
2025C:	mov     [rdx], rax
2025F:	add     ebx, 1
20262:	mov     eax, cs:history_length
20268:	cmp     ebx, eax
2026A:	jl      short loc_20233
2026C:	mov     eax, cs:history_base
20272:	add     eax, 1
20275:	mov     cs:history_base, eax
2027B:	jmp     loc_20315
20280:	mov     eax, cs:history_size
20286:	test    eax, eax
20288:	jnz     short loc_202BB
2028A:	mov     cs:history_size, 32h ; '2'
20294:	mov     eax, cs:history_size
2029A:	cdqe
2029C:	shl     rax, 3
202A0:	mov     rdi, rax; n
202A3:	call    xmalloc
202A8:	mov     cs:the_history, rax
202AF:	mov     cs:history_length, 1
202B9:	jmp     short loc_20315
202BB:	mov     eax, cs:history_size
202C1:	lea     edx, [rax-1]
202C4:	mov     eax, cs:history_length
202CA:	cmp     edx, eax
202CC:	jnz     short loc_20306
202CE:	mov     eax, cs:history_size
202D4:	add     eax, 32h ; '2'
202D7:	mov     cs:history_size, eax
202DD:	mov     eax, cs:history_size
202E3:	cdqe
202E5:	lea     rdx, ds:0[rax*8]
202ED:	mov     rax, cs:the_history
202F4:	mov     rsi, rdx; n
202F7:	mov     rdi, rax; p
202FA:	call    xrealloc
202FF:	mov     cs:the_history, rax
20306:	mov     eax, cs:history_length
2030C:	add     eax, 1
2030F:	mov     cs:history_length, eax
20315:	mov     edi, 10h; n
2031A:	call    xmalloc
2031F:	mov     [rbp+temp], rax
20323:	mov     rax, [rbp+string]
20327:	mov     rdi, rax; s
2032A:	call    _strlen
2032F:	add     rax, 1
20333:	mov     rdi, rax; n
20336:	call    xmalloc
2033B:	mov     rdx, rax
2033E:	mov     rax, [rbp+string]
20342:	mov     rsi, rax; src
20345:	mov     rdi, rdx; dest
20348:	call    _strcpy
2034D:	mov     rdx, [rbp+temp]
20351:	mov     [rdx], rax
20354:	mov     rax, [rbp+temp]
20358:	mov     qword ptr [rax+8], 0
20360:	mov     rdx, cs:the_history
20367:	mov     eax, cs:history_length
2036D:	cdqe
2036F:	shl     rax, 3
20373:	add     rax, rdx
20376:	mov     qword ptr [rax], 0
2037D:	mov     rdx, cs:the_history
20384:	mov     eax, cs:history_length
2038A:	cdqe
2038C:	shl     rax, 3
20390:	sub     rax, 8
20394:	add     rdx, rax
20397:	mov     rax, [rbp+temp]
2039B:	mov     [rdx], rax
2039E:	jmp     short loc_203A1
203A0:	nop
203A1:	mov     rbx, [rbp+var_8]
203A5:	leave
203A6:	retn
203A7:	endbr64
203AB:	push    rbp
203AC:	mov     rbp, rsp
203AF:	sub     rsp, 30h
203B3:	mov     [rbp+which], edi
203B6:	mov     [rbp+line], rsi
203BA:	mov     [rbp+data], rdx
203BE:	mov     edi, 10h; n
203C3:	call    xmalloc
203C8:	mov     [rbp+temp], rax
203CC:	mov     eax, cs:history_length
203D2:	cmp     [rbp+which], eax
203D5:	jl      short loc_203DE
203D7:	mov     eax, 0
203DC:	jmp     short locret_20453
203DE:	mov     rdx, cs:the_history
203E5:	mov     eax, [rbp+which]
203E8:	cdqe
203EA:	shl     rax, 3
203EE:	add     rax, rdx
203F1:	mov     rax, [rax]
203F4:	mov     [rbp+old_value], rax
203F8:	mov     rax, [rbp+line]
203FC:	mov     rdi, rax; s
203FF:	call    _strlen
20404:	add     rax, 1
20408:	mov     rdi, rax; n
2040B:	call    xmalloc
20410:	mov     rdx, rax
20413:	mov     rax, [rbp+line]
20417:	mov     rsi, rax; src
2041A:	mov     rdi, rdx; dest
2041D:	call    _strcpy
20422:	mov     rdx, [rbp+temp]
20426:	mov     [rdx], rax
20429:	mov     rax, [rbp+temp]
2042D:	mov     rdx, [rbp+data]
20431:	mov     [rax+8], rdx
20435:	mov     rdx, cs:the_history
2043C:	mov     eax, [rbp+which]
2043F:	cdqe
20441:	shl     rax, 3
20445:	add     rdx, rax
20448:	mov     rax, [rbp+temp]
2044C:	mov     [rdx], rax
2044F:	mov     rax, [rbp+old_value]
20453:	leave
20454:	retn
20455:	endbr64
20459:	push    rbp
2045A:	mov     rbp, rsp
2045D:	mov     eax, cs:history_offset
20463:	pop     rbp
20464:	retn
20465:	endbr64
20469:	push    rbp
2046A:	mov     rbp, rsp
2046D:	push    r15
2046F:	push    line
20471:	push    reverse
20473:	push    line_index
20475:	push    i
20476:	sub     rsp, 28h
2047A:	mov     [rbp+string], rdi
2047E:	mov     [rbp+direction], esi
20481:	mov     [rbp+anchored], edx
20484:	mov     ebx, cs:history_offset
2048A:	mov     eax, [rbp+direction]
2048D:	shr     eax, 1Fh
20490:	movzx   r13d, al
20494:	mov     eax, cs:history_length
2049A:	test    eax, eax
2049C:	jz      short loc_204AD
2049E:	mov     eax, cs:history_length
204A4:	cmp     ebx, eax
204A6:	jnz     short loc_204B7
204A8:	test    r13d, r13d
204AB:	jnz     short loc_204B7
204AD:	mov     eax, 0FFFFFFFFh
204B2:	jmp     loc_2064E
204B7:	test    r13d, r13d
204BA:	jz      short loc_204C9
204BC:	mov     eax, cs:history_length
204C2:	cmp     ebx, eax
204C4:	jnz     short loc_204C9
204C6:	sub     ebx, 1
204C9:	mov     rax, [rbp+string]
204CD:	mov     rdi, rax; s
204D0:	call    _strlen
204D5:	mov     [rbp+string_len], eax
204D8:	test    r13d, r13d
204DB:	jz      short loc_204E1
204DD:	test    ebx, ebx
204DF:	js      short loc_204F0
204E1:	test    r13d, r13d
204E4:	jnz     short loc_204FA
204E6:	mov     eax, cs:history_length
204EC:	cmp     ebx, eax
204EE:	jnz     short loc_204FA
204F0:	mov     eax, 0FFFFFFFFh
204F5:	jmp     loc_2064E
204FA:	mov     rdx, cs:the_history
20501:	movsxd  rax, ebx
20504:	shl     rax, 3
20508:	add     rax, rdx
2050B:	mov     rax, [rax]
2050E:	mov     line, [rax]
20511:	mov     rdi, line; s
20514:	call    _strlen
20519:	mov     r12d, eax
2051C:	cmp     [rbp+string_len], r12d
20520:	jle     short loc_20537
20522:	test    r13d, r13d
20525:	jz      short loc_2052F
20527:	sub     ebx, 1
2052A:	jmp     loc_20649
2052F:	add     ebx, 1
20532:	jmp     loc_20649
20537:	cmp     [rbp+anchored], 1
2053B:	jnz     short loc_2058A
2053D:	mov     rax, [rbp+string]
20541:	movzx   edx, byte ptr [rax]
20544:	movzx   eax, byte ptr [line]
20548:	cmp     dl, al
2054A:	jnz     short loc_20575
2054C:	mov     eax, [rbp+string_len]
2054F:	movsxd  rdx, eax; n
20552:	mov     rax, [rbp+string]
20556:	mov     rsi, line; s2
20559:	mov     rdi, rax; s1
2055C:	call    _strncmp
20561:	test    eax, eax
20563:	jnz     short loc_20575
20565:	mov     cs:history_offset, ebx
2056B:	mov     eax, 0
20570:	jmp     loc_2064E
20575:	test    r13d, r13d
20578:	jz      short loc_20582
2057A:	sub     ebx, 1
2057D:	jmp     loc_20649
20582:	add     ebx, 1
20585:	jmp     loc_20649
2058A:	test    r13d, r13d
2058D:	jz      short loc_205DF
2058F:	sub     r12d, [rbp+string_len]
20593:	jmp     short loc_205D8
20595:	mov     rax, [rbp+string]
20599:	movzx   edx, byte ptr [rax]
2059C:	movsxd  rax, r12d
2059F:	add     rax, line
205A2:	movzx   eax, byte ptr [rax]
205A5:	cmp     dl, al
205A7:	jnz     short loc_205D4
205A9:	mov     eax, [rbp+string_len]
205AC:	movsxd  rdx, eax; n
205AF:	movsxd  rax, r12d
205B2:	lea     rcx, [line+rax]
205B6:	mov     rax, [rbp+string]
205BA:	mov     rsi, rcx; s2
205BD:	mov     rdi, rax; s1
205C0:	call    _strncmp
205C5:	test    eax, eax
205C7:	jnz     short loc_205D4
205C9:	mov     cs:history_offset, ebx
205CF:	mov     eax, r12d
205D2:	jmp     short loc_2064E
205D4:	sub     r12d, 1
205D8:	test    r12d, r12d
205DB:	jns     short loc_20595
205DD:	jmp     short loc_20639
205DF:	mov     eax, r12d
205E2:	sub     eax, [rbp+string_len]
205E5:	lea     r15d, [rax+1]
205E9:	mov     r12d, 0
205EF:	jmp     short loc_20634
205F1:	mov     rax, [rbp+string]
205F5:	movzx   edx, byte ptr [rax]
205F8:	movsxd  rax, r12d
205FB:	add     rax, line
205FE:	movzx   eax, byte ptr [rax]
20601:	cmp     dl, al
20603:	jnz     short loc_20630
20605:	mov     eax, [rbp+string_len]
20608:	movsxd  rdx, eax; n
2060B:	movsxd  rax, r12d
2060E:	lea     rcx, [line+rax]
20612:	mov     rax, [rbp+string]
20616:	mov     rsi, rcx; s2
20619:	mov     rdi, rax; s1
2061C:	call    _strncmp
20621:	test    eax, eax
20623:	jnz     short loc_20630
20625:	mov     cs:history_offset, ebx
2062B:	mov     eax, r12d
2062E:	jmp     short loc_2064E
20630:	add     r12d, 1
20634:	cmp     r12d, r15d
20637:	jl      short loc_205F1
20639:	test    r13d, r13d
2063C:	jz      short loc_20646
2063E:	sub     ebx, 1
20641:	jmp     loc_204D8
20646:	add     ebx, 1
20649:	jmp     loc_204D8
2064E:	add     rsp, 28h
20652:	pop     i
20653:	pop     line_index
20655:	pop     reverse
20657:	pop     line
20659:	pop     r15
2065B:	pop     rbp
2065C:	retn
2065D:	endbr64
20661:	push    rbp
20662:	mov     rbp, rsp
20665:	sub     rsp, 10h
20669:	mov     [rbp+string], rdi
2066D:	mov     [rbp+direction], esi
20670:	mov     ecx, [rbp+direction]
20673:	mov     rax, [rbp+string]
20677:	mov     edx, 0; anchored
2067C:	mov     esi, ecx; direction
2067E:	mov     rdi, rax; string
20681:	mov     eax, 0
20686:	call    history_search_internal
2068B:	leave
2068C:	retn
2068D:	endbr64
20691:	push    rbp
20692:	mov     rbp, rsp
20695:	sub     rsp, 10h
20699:	mov     [rbp+string], rdi
2069D:	mov     [rbp+direction], esi
206A0:	mov     ecx, [rbp+direction]
206A3:	mov     rax, [rbp+string]
206A7:	mov     edx, 1; anchored
206AC:	mov     esi, ecx; direction
206AE:	mov     rdi, rax; string
206B1:	mov     eax, 0
206B6:	call    history_search_internal
206BB:	leave
206BC:	retn
206BD:	endbr64
206C1:	push    rbp
206C2:	mov     rbp, rsp
206C5:	push    rbx
206C6:	mov     [rbp+which], edi
206C9:	mov     eax, cs:history_length
206CF:	cmp     [rbp+which], eax
206D2:	jge     short loc_206DE
206D4:	mov     eax, cs:history_length
206DA:	test    eax, eax
206DC:	jnz     short loc_206E8
206DE:	mov     [rbp+return_value], 0
206E6:	jmp     short loc_2074F
206E8:	mov     rdx, cs:the_history
206EF:	mov     eax, [rbp+which]
206F2:	cdqe
206F4:	shl     rax, 3
206F8:	add     rax, rdx
206FB:	mov     rax, [rax]
206FE:	mov     [rbp+return_value], rax
20702:	mov     ebx, [rbp+which]
20705:	jmp     short loc_20736
20707:	mov     rdx, cs:the_history
2070E:	movsxd  rax, ebx
20711:	add     rax, 1
20715:	shl     rax, 3
20719:	add     rax, rdx
2071C:	mov     rcx, cs:the_history
20723:	movsxd  rdx, ebx
20726:	shl     rdx, 3
2072A:	add     rdx, rcx
2072D:	mov     rax, [rax]
20730:	mov     [rdx], rax
20733:	add     ebx, 1
20736:	mov     eax, cs:history_length
2073C:	cmp     ebx, eax
2073E:	jl      short loc_20707
20740:	mov     eax, cs:history_length
20746:	sub     eax, 1
20749:	mov     cs:history_length, eax
2074F:	mov     rax, [rbp+return_value]
20753:	mov     rbx, [rbp+var_8]
20757:	leave
20758:	retn
20759:	endbr64
2075D:	push    rbp
2075E:	mov     rbp, rsp
20761:	push    r12
20763:	push    rbx
20764:	sub     rsp, 10h
20768:	mov     [rbp+max], edi
2076B:	cmp     [rbp+max], 0
2076F:	jns     short loc_20778
20771:	mov     [rbp+max], 0
20778:	mov     eax, cs:history_length
2077E:	cmp     [rbp+max], eax
20781:	jge     loc_20846
20787:	mov     ebx, 0
2078C:	jmp     short loc_207CC
2078E:	mov     rdx, cs:the_history
20795:	movsxd  rax, ebx
20798:	shl     rax, 3
2079C:	add     rax, rdx
2079F:	mov     rax, [rax]
207A2:	mov     rax, [rax]
207A5:	mov     rdi, rax; pointer
207A8:	call    xfree
207AD:	mov     rdx, cs:the_history
207B4:	movsxd  rax, ebx
207B7:	shl     rax, 3
207BB:	add     rax, rdx
207BE:	mov     rax, [rax]
207C1:	mov     rdi, rax; pointer
207C4:	call    xfree
207C9:	add     ebx, 1
207CC:	mov     eax, cs:history_length
207D2:	sub     eax, [rbp+max]
207D5:	cmp     ebx, eax
207D7:	jl      short loc_2078E
207D9:	mov     cs:history_base, ebx
207DF:	mov     r12d, 0
207E5:	mov     eax, cs:history_length
207EB:	sub     eax, [rbp+max]
207EE:	mov     ebx, eax
207F0:	jmp     short loc_20821
207F2:	mov     rdx, cs:the_history
207F9:	movsxd  rax, ebx
207FC:	shl     rax, 3
20800:	add     rax, rdx
20803:	mov     rcx, cs:the_history
2080A:	movsxd  rdx, r12d
2080D:	shl     rdx, 3
20811:	add     rdx, rcx
20814:	mov     rax, [rax]
20817:	mov     [rdx], rax
2081A:	add     ebx, 1
2081D:	add     r12d, 1
20821:	cmp     r12d, [rbp+max]
20825:	jl      short loc_207F2
20827:	mov     rdx, cs:the_history
2082E:	movsxd  rax, r12d
20831:	shl     rax, 3
20835:	add     rax, rdx
20838:	mov     qword ptr [rax], 0
2083F:	mov     cs:history_length, r12d
20846:	mov     cs:history_stifled, 1
20850:	mov     eax, [rbp+max]
20853:	mov     cs:max_input_history, eax
20859:	nop
2085A:	add     rsp, 10h
2085E:	pop     rbx
2085F:	pop     r12
20861:	pop     rbp
20862:	retn
20863:	endbr64
20867:	push    rbp
20868:	mov     rbp, rsp
2086B:	mov     eax, cs:max_input_history
20871:	mov     [rbp+result], eax
20874:	mov     eax, cs:history_stifled
2087A:	test    eax, eax
2087C:	jz      short loc_2088B
2087E:	neg     [rbp+result]
20881:	mov     cs:history_stifled, 0
2088B:	mov     eax, [rbp+result]
2088E:	pop     rbp
2088F:	retn
20890:	endbr64
20894:	push    rbp
20895:	mov     rbp, rsp
20898:	sub     rsp, 30h
2089C:	mov     [rbp+filename], rdi
208A0:	cmp     [rbp+filename], 0
208A5:	jz      short loc_208D3
208A7:	mov     rax, [rbp+filename]
208AB:	mov     rdi, rax; s
208AE:	call    _strlen
208B3:	add     rax, 1
208B7:	mov     rdi, rax; n
208BA:	call    xmalloc
208BF:	mov     rdx, rax
208C2:	mov     rax, [rbp+filename]
208C6:	mov     rsi, rax; src
208C9:	mov     rdi, rdx; dest
208CC:	call    _strcpy
208D1:	jmp     short loc_208D8
208D3:	mov     eax, 0
208D8:	mov     [rbp+return_val], rax
208DC:	cmp     [rbp+return_val], 0
208E1:	jnz     loc_20973
208E7:	lea     rax, aHome_1; 'HOME'
208EE:	mov     rdi, rax; name
208F1:	call    _getenv
208F6:	mov     [rbp+home], rax
208FA:	cmp     [rbp+home], 0
208FF:	jnz     short loc_2090C
20901:	lea     rax, asc_2953B; '.'
20908:	mov     [rbp+home], rax
2090C:	mov     rax, [rbp+home]
20910:	mov     rdi, rax; s
20913:	call    _strlen
20918:	mov     [rbp+home_len], eax
2091B:	mov     eax, [rbp+home_len]
2091E:	add     eax, 0Ah
20921:	cdqe
20923:	mov     rdi, rax; n
20926:	call    xmalloc
2092B:	mov     [rbp+return_val], rax
2092F:	mov     rdx, [rbp+home]
20933:	mov     rax, [rbp+return_val]
20937:	mov     rsi, rdx; src
2093A:	mov     rdi, rax; dest
2093D:	call    _strcpy
20942:	mov     eax, [rbp+home_len]
20945:	movsxd  rdx, eax
20948:	mov     rax, [rbp+return_val]
2094C:	add     rax, rdx
2094F:	mov     byte ptr [rax], 2Fh ; '/'
20952:	mov     eax, [rbp+home_len]
20955:	cdqe
20957:	lea     rdx, [rax+1]
2095B:	mov     rax, [rbp+return_val]
2095F:	add     rax, rdx
20962:	mov     rcx, 79726F747369682Eh
2096C:	mov     [rax], rcx
2096F:	mov     byte ptr [rax+8], 0
20973:	mov     rax, [rbp+return_val]
20977:	leave
20978:	retn
20979:	endbr64
2097D:	push    rbp
2097E:	mov     rbp, rsp
20981:	sub     rsp, 10h
20985:	mov     [rbp+filename], rdi
20989:	mov     rax, [rbp+filename]
2098D:	mov     edx, 0FFFFFFFFh; to
20992:	mov     esi, 0; from
20997:	mov     rdi, rax; filename
2099A:	mov     eax, 0
2099F:	call    read_history_range
209A4:	leave
209A5:	retn
209A6:	endbr64
209AA:	push    rbp
209AB:	mov     rbp, rsp
209AE:	push    line_start
209B0:	push    line_end
209B1:	sub     rsp, 0D0h
209B8:	mov     [rbp+filename], rdi
209BF:	mov     [rbp+from], esi
209C5:	mov     [rbp+to], edx
209CB:	mov     rax, fs:28h
209D4:	mov     [rbp+var_18], rax
209D8:	xor     eax, eax
209DA:	mov     [rbp+buffer], 0
209E5:	mov     rax, [rbp+filename]
209EC:	mov     rdi, rax; filename
209EF:	mov     eax, 0
209F4:	call    history_filename
209F9:	mov     [rbp+input], rax
20A00:	mov     rax, [rbp+input]
20A07:	mov     edx, 1B6h
20A0C:	mov     esi, 0; oflag
20A11:	mov     rdi, rax; file
20A14:	mov     eax, 0
20A19:	call    _open
20A1E:	mov     [rbp+file], eax
20A24:	cmp     [rbp+file], 0
20A2B:	js      short loc_20A8A
20A2D:	lea     rdx, [rbp+finfo]
20A34:	mov     eax, [rbp+file]
20A3A:	mov     rsi, rdx; buf
20A3D:	mov     edi, eax; filedes
20A3F:	call    xfstat
20A44:	cmp     eax, 0FFFFFFFFh
20A47:	jz      short loc_20A8A
20A49:	mov     rax, [rbp+finfo.st_size]
20A4D:	add     eax, 1
20A50:	cdqe
20A52:	mov     rdi, rax; n
20A55:	call    xmalloc
20A5A:	mov     [rbp+buffer], rax
20A61:	mov     rax, [rbp+finfo.st_size]
20A65:	mov     rdx, rax; nbytes
20A68:	mov     rcx, [rbp+buffer]
20A6F:	mov     eax, [rbp+file]
20A75:	mov     rsi, rcx; buf
20A78:	mov     edi, eax; fd
20A7A:	call    read
20A7F:	mov     rdx, [rbp+finfo.st_size]
20A83:	cmp     rax, rdx
20A86:	jz      short loc_20ADF
20A88:	jmp     short error_and_exit
20A8A:	nop
20A8B:	cmp     [rbp+file], 0
20A92:	js      short loc_20AA1
20A94:	mov     eax, [rbp+file]
20A9A:	mov     edi, eax; fd
20A9C:	call    _close
20AA1:	cmp     [rbp+input], 0
20AA9:	jz      short loc_20ABA
20AAB:	mov     rax, [rbp+input]
20AB2:	mov     rdi, rax; pointer
20AB5:	call    xfree
20ABA:	cmp     [rbp+buffer], 0
20AC2:	jz      short loc_20AD3
20AC4:	mov     rax, [rbp+buffer]
20ACB:	mov     rdi, rax; pointer
20ACE:	call    xfree
20AD3:	call    ___errno_location
20AD8:	mov     eax, [rax]
20ADA:	jmp     loc_20C2A
20ADF:	mov     eax, [rbp+file]
20AE5:	mov     edi, eax; fd
20AE7:	call    _close
20AEC:	cmp     [rbp+to], 0
20AF3:	jns     short loc_20AFF
20AF5:	mov     rax, [rbp+finfo.st_size]
20AF9:	mov     [rbp+to], eax
20AFF:	mov     [rbp+current_line], 0
20B09:	mov     ebx, [rbp+current_line]
20B0F:	mov     r12d, ebx
20B12:	jmp     short loc_20B57
20B14:	mov     ebx, r12d
20B17:	jmp     short loc_20B4B
20B19:	movsxd  rdx, ebx
20B1C:	mov     rax, [rbp+buffer]
20B23:	add     rax, rdx
20B26:	movzx   eax, byte ptr [rax]
20B29:	cmp     al, 0Ah
20B2B:	jnz     short loc_20B48
20B2D:	add     [rbp+current_line], 1
20B34:	lea     r12d, [line_end+1]
20B38:	mov     eax, [rbp+current_line]
20B3E:	cmp     eax, [rbp+from]
20B44:	jnz     short loc_20B48
20B46:	jmp     short loc_20B57
20B48:	add     ebx, 1
20B4B:	movsxd  rdx, ebx
20B4E:	mov     rax, [rbp+finfo.st_size]
20B52:	cmp     rdx, rax
20B55:	jl      short loc_20B19
20B57:	movsxd  rdx, r12d
20B5A:	mov     rax, [rbp+finfo.st_size]
20B5E:	cmp     rdx, rax
20B61:	jge     short loc_20B71
20B63:	mov     eax, [rbp+current_line]
20B69:	cmp     eax, [rbp+from]
20B6F:	jl      short loc_20B14
20B71:	mov     ebx, r12d
20B74:	jmp     short loc_20BE4
20B76:	movsxd  rdx, ebx
20B79:	mov     rax, [rbp+buffer]
20B80:	add     rax, rdx
20B83:	movzx   eax, byte ptr [rax]
20B86:	cmp     al, 0Ah
20B88:	jnz     short loc_20BE1
20B8A:	movsxd  rdx, ebx
20B8D:	mov     rax, [rbp+buffer]
20B94:	add     rax, rdx
20B97:	mov     byte ptr [rax], 0
20B9A:	movsxd  rdx, r12d
20B9D:	mov     rax, [rbp+buffer]
20BA4:	add     rax, rdx
20BA7:	movzx   eax, byte ptr [rax]
20BAA:	test    al, al
20BAC:	jz      short loc_20BC8
20BAE:	movsxd  rdx, r12d
20BB1:	mov     rax, [rbp+buffer]
20BB8:	add     rax, rdx
20BBB:	mov     rdi, rax; string
20BBE:	mov     eax, 0
20BC3:	call    add_history
20BC8:	add     [rbp+current_line], 1
20BCF:	mov     eax, [rbp+current_line]
20BD5:	cmp     eax, [rbp+to]
20BDB:	jge     short loc_20BF2
20BDD:	lea     r12d, [line_end+1]
20BE1:	add     ebx, 1
20BE4:	movsxd  rdx, ebx
20BE7:	mov     rax, [rbp+finfo.st_size]
20BEB:	cmp     rdx, rax
20BEE:	jl      short loc_20B76
20BF0:	jmp     short loc_20BF3
20BF2:	nop
20BF3:	cmp     [rbp+input], 0
20BFB:	jz      short loc_20C0C
20BFD:	mov     rax, [rbp+input]
20C04:	mov     rdi, rax; pointer
20C07:	call    xfree
20C0C:	cmp     [rbp+buffer], 0
20C14:	jz      short loc_20C25
20C16:	mov     rax, [rbp+buffer]
20C1D:	mov     rdi, rax; pointer
20C20:	call    xfree
20C25:	mov     eax, 0
20C2A:	mov     rdx, [rbp+var_18]
20C2E:	sub     rdx, fs:28h
20C37:	jz      short loc_20C3E
20C39:	call    ___stack_chk_fail
20C3E:	add     rsp, 0D0h
20C45:	pop     line_end
20C46:	pop     line_start
20C48:	pop     rbp
20C49:	retn
20C4A:	endbr64
20C4E:	push    rbp
20C4F:	mov     rbp, rsp
20C52:	push    lines
20C54:	push    i
20C55:	sub     rsp, 0D0h
20C5C:	mov     [rbp+fname], rdi
20C63:	mov     r12d, esi
20C66:	mov     rax, fs:28h
20C6F:	mov     [rbp+var_18], rax
20C73:	xor     eax, eax
20C75:	mov     [rbp+buffer], 0
20C80:	mov     rax, [rbp+fname]
20C87:	mov     rdi, rax; filename
20C8A:	mov     eax, 0
20C8F:	call    history_filename
20C94:	mov     [rbp+filename], rax
20C9B:	mov     rax, [rbp+filename]
20CA2:	mov     edx, 1B6h
20CA7:	mov     esi, 0; oflag
20CAC:	mov     rdi, rax; file
20CAF:	mov     eax, 0
20CB4:	call    _open
20CB9:	mov     [rbp+file], eax
20CBF:	cmp     [rbp+file], 0FFFFFFFFh
20CC6:	jz      loc_20DFD
20CCC:	lea     rdx, [rbp+finfo]
20CD3:	mov     eax, [rbp+file]
20CD9:	mov     rsi, rdx; buf
20CDC:	mov     edi, eax; filedes
20CDE:	call    xfstat
20CE3:	cmp     eax, 0FFFFFFFFh
20CE6:	jz      loc_20DFD
20CEC:	mov     rax, [rbp+finfo.st_size]
20CF0:	add     eax, 1
20CF3:	cdqe
20CF5:	mov     rdi, rax; n
20CF8:	call    xmalloc
20CFD:	mov     [rbp+buffer], rax
20D04:	mov     rax, [rbp+finfo.st_size]
20D08:	mov     rdx, rax; nbytes
20D0B:	mov     rcx, [rbp+buffer]
20D12:	mov     eax, [rbp+file]
20D18:	mov     rsi, rcx; buf
20D1B:	mov     edi, eax; fd
20D1D:	call    read
20D22:	mov     [rbp+chars_read], eax
20D28:	mov     eax, [rbp+file]
20D2E:	mov     edi, eax; fd
20D30:	call    _close
20D35:	cmp     [rbp+chars_read], 0
20D3C:	jle     loc_20E00
20D42:	mov     eax, [rbp+chars_read]
20D48:	lea     ebx, [rax-1]
20D4B:	jmp     short loc_20D68
20D4D:	movsxd  rdx, ebx
20D50:	mov     rax, [rbp+buffer]
20D57:	add     rax, rdx
20D5A:	movzx   eax, byte ptr [rax]
20D5D:	cmp     al, 0Ah
20D5F:	jnz     short loc_20D65
20D61:	sub     r12d, 1
20D65:	sub     ebx, 1
20D68:	test    r12d, r12d
20D6B:	jz      short loc_20D8F
20D6D:	test    ebx, ebx
20D6F:	jnz     short loc_20D4D
20D71:	jmp     short loc_20D8F
20D73:	movsxd  rdx, ebx
20D76:	mov     rax, [rbp+buffer]
20D7D:	add     rax, rdx
20D80:	movzx   eax, byte ptr [rax]
20D83:	cmp     al, 0Ah
20D85:	jnz     short loc_20D8C
20D87:	add     ebx, 1
20D8A:	jmp     short loc_20D93
20D8C:	sub     ebx, 1
20D8F:	test    ebx, ebx
20D91:	jnz     short loc_20D73
20D93:	test    ebx, ebx
20D95:	jz      short loc_20E03
20D97:	mov     rax, [rbp+filename]
20D9E:	mov     edx, 1B6h
20DA3:	mov     esi, 201h; oflag
20DA8:	mov     rdi, rax; file
20DAB:	mov     eax, 0
20DB0:	call    _open
20DB5:	mov     [rbp+file], eax
20DBB:	cmp     [rbp+file], 0FFFFFFFFh
20DC2:	jz      short loc_20E03
20DC4:	mov     rax, [rbp+finfo.st_size]
20DC8:	movsxd  rdx, ebx
20DCB:	sub     rax, rdx
20DCE:	mov     rdx, rax; n
20DD1:	movsxd  rcx, ebx
20DD4:	mov     rax, [rbp+buffer]
20DDB:	add     rcx, rax
20DDE:	mov     eax, [rbp+file]
20DE4:	mov     rsi, rcx; buf
20DE7:	mov     edi, eax; fd
20DE9:	call    write
20DEE:	mov     eax, [rbp+file]
20DF4:	mov     edi, eax; fd
20DF6:	call    _close
20DFB:	jmp     short truncate_exit
20DFD:	nop
20DFE:	jmp     short truncate_exit
20E00:	nop
20E01:	jmp     short truncate_exit
20E03:	nop
20E04:	cmp     [rbp+buffer], 0
20E0C:	jz      short loc_20E1D
20E0E:	mov     rax, [rbp+buffer]
20E15:	mov     rdi, rax; pointer
20E18:	call    xfree
20E1D:	mov     rax, [rbp+filename]
20E24:	mov     rdi, rax; pointer
20E27:	call    xfree
20E2C:	mov     eax, 0
20E31:	mov     rdx, [rbp+var_18]
20E35:	sub     rdx, fs:28h
20E3E:	jz      short loc_20E45
20E40:	call    ___stack_chk_fail
20E45:	add     rsp, 0D0h
20E4C:	pop     i
20E4D:	pop     lines
20E4F:	pop     rbp
20E50:	retn
20E51:	endbr64
20E55:	push    rbp
20E56:	mov     rbp, rsp
20E59:	push    r12
20E5B:	push    i
20E5C:	sub     rsp, 30h
20E60:	mov     [rbp+filename], rdi
20E64:	mov     [rbp+nelements], esi
20E67:	mov     [rbp+overwrite], edx
20E6A:	mov     rax, [rbp+filename]
20E6E:	mov     rdi, rax; filename
20E71:	mov     eax, 0
20E76:	call    history_filename
20E7B:	mov     [rbp+output], rax
20E7F:	cmp     [rbp+overwrite], 0
20E83:	jz      short loc_20E8C
20E85:	mov     eax, 241h
20E8A:	jmp     short loc_20E91
20E8C:	mov     eax, 401h
20E91:	mov     [rbp+mode], eax
20E94:	mov     ecx, [rbp+mode]
20E97:	mov     rax, [rbp+output]
20E9B:	mov     edx, 1B6h
20EA0:	mov     esi, ecx; oflag
20EA2:	mov     rdi, rax; file
20EA5:	mov     eax, 0
20EAA:	call    _open
20EAF:	mov     [rbp+file], eax
20EB2:	cmp     [rbp+file], 0FFFFFFFFh
20EB6:	jnz     short loc_20ED7
20EB8:	cmp     [rbp+output], 0
20EBD:	jz      short loc_20ECB
20EBF:	mov     rax, [rbp+output]
20EC3:	mov     rdi, rax; pointer
20EC6:	call    xfree
20ECB:	call    ___errno_location
20ED0:	mov     eax, [rax]
20ED2:	jmp     loc_21017
20ED7:	mov     eax, cs:history_length
20EDD:	cmp     [rbp+nelements], eax
20EE0:	jle     short loc_20EEB
20EE2:	mov     eax, cs:history_length
20EE8:	mov     [rbp+nelements], eax
20EEB:	mov     r12d, 0
20EF1:	mov     [rbp+buffer_size], 0
20EF8:	mov     eax, cs:history_length
20EFE:	sub     eax, [rbp+nelements]
20F01:	mov     ebx, eax
20F03:	jmp     short loc_20F34
20F05:	mov     rdx, cs:the_history
20F0C:	movsxd  rax, ebx
20F0F:	shl     rax, 3
20F13:	add     rax, rdx
20F16:	mov     rax, [rax]
20F19:	mov     rax, [rax]
20F1C:	mov     rdi, rax; s
20F1F:	call    _strlen
20F24:	mov     edx, eax
20F26:	mov     eax, [rbp+buffer_size]
20F29:	add     eax, edx
20F2B:	add     eax, 1
20F2E:	mov     [rbp+buffer_size], eax
20F31:	add     ebx, 1
20F34:	mov     eax, cs:history_length
20F3A:	cmp     ebx, eax
20F3C:	jl      short loc_20F05
20F3E:	mov     eax, [rbp+buffer_size]
20F41:	cdqe
20F43:	mov     rdi, rax; n
20F46:	call    xmalloc
20F4B:	mov     [rbp+buffer], rax
20F4F:	mov     eax, cs:history_length
20F55:	sub     eax, [rbp+nelements]
20F58:	mov     ebx, eax
20F5A:	jmp     short loc_20FC8
20F5C:	mov     rdx, cs:the_history
20F63:	movsxd  rax, ebx
20F66:	shl     rax, 3
20F6A:	add     rax, rdx
20F6D:	mov     rax, [rax]
20F70:	mov     rax, [rax]
20F73:	movsxd  rcx, r12d
20F76:	mov     rdx, [rbp+buffer]
20F7A:	add     rdx, rcx
20F7D:	mov     rsi, rax; src
20F80:	mov     rdi, rdx; dest
20F83:	call    _strcpy
20F88:	mov     rdx, cs:the_history
20F8F:	movsxd  rax, ebx
20F92:	shl     rax, 3
20F96:	add     rax, rdx
20F99:	mov     rax, [rax]
20F9C:	mov     rax, [rax]
20F9F:	mov     rdi, rax; s
20FA2:	call    _strlen
20FA7:	mov     edx, eax
20FA9:	mov     eax, r12d
20FAC:	add     eax, edx
20FAE:	mov     r12d, eax
20FB1:	mov     eax, r12d
20FB4:	lea     r12d, [rax+1]
20FB8:	movsxd  rdx, eax
20FBB:	mov     rax, [rbp+buffer]
20FBF:	add     rax, rdx
20FC2:	mov     byte ptr [rax], 0Ah
20FC5:	add     ebx, 1
20FC8:	mov     eax, cs:history_length
20FCE:	cmp     ebx, eax
20FD0:	jl      short loc_20F5C
20FD2:	mov     eax, [rbp+buffer_size]
20FD5:	movsxd  rdx, eax; n
20FD8:	mov     rcx, [rbp+buffer]
20FDC:	mov     eax, [rbp+file]
20FDF:	mov     rsi, rcx; buf
20FE2:	mov     edi, eax; fd
20FE4:	call    write
20FE9:	mov     rax, [rbp+buffer]
20FED:	mov     rdi, rax; pointer
20FF0:	call    xfree
20FF5:	mov     eax, [rbp+file]
20FF8:	mov     edi, eax; fd
20FFA:	call    _close
20FFF:	cmp     [rbp+output], 0
21004:	jz      short loc_21012
21006:	mov     rax, [rbp+output]
2100A:	mov     rdi, rax; pointer
2100D:	call    xfree
21012:	mov     eax, 0
21017:	add     rsp, 30h
2101B:	pop     i
2101C:	pop     r12
2101E:	pop     rbp
2101F:	retn
21020:	endbr64
21024:	push    rbp
21025:	mov     rbp, rsp
21028:	sub     rsp, 10h
2102C:	mov     [rbp+nelements], edi
2102F:	mov     [rbp+filename], rsi
21033:	mov     ecx, [rbp+nelements]
21036:	mov     rax, [rbp+filename]
2103A:	mov     edx, 0; overwrite
2103F:	mov     esi, ecx; nelements
21041:	mov     rdi, rax; filename
21044:	mov     eax, 0
21049:	call    history_do_write
2104E:	leave
2104F:	retn
21050:	endbr64
21054:	push    rbp
21055:	mov     rbp, rsp
21058:	sub     rsp, 10h
2105C:	mov     [rbp+filename], rdi
21060:	mov     ecx, cs:history_length
21066:	mov     rax, [rbp+filename]
2106A:	mov     edx, 1; overwrite
2106F:	mov     esi, ecx; nelements
21071:	mov     rdi, rax; filename
21074:	mov     eax, 0
21079:	call    history_do_write
2107E:	leave
2107F:	retn
21080:	endbr64
21084:	push    rbp
21085:	mov     rbp, rsp
21088:	mov     edx, cs:history_offset
2108E:	mov     eax, cs:history_length
21094:	cmp     edx, eax
21096:	jz      short loc_210A4
21098:	mov     rax, cs:the_history
2109F:	test    rax, rax
210A2:	jnz     short loc_210AB
210A4:	mov     eax, 0
210A9:	jmp     short loc_210C4
210AB:	mov     rdx, cs:the_history
210B2:	mov     eax, cs:history_offset
210B8:	cdqe
210BA:	shl     rax, 3
210BE:	add     rax, rdx
210C1:	mov     rax, [rax]
210C4:	pop     rbp
210C5:	retn
210C6:	endbr64
210CA:	push    rbp
210CB:	mov     rbp, rsp
210CE:	mov     eax, cs:history_offset
210D4:	test    eax, eax
210D6:	jnz     short loc_210DF
210D8:	mov     eax, 0
210DD:	jmp     short loc_21107
210DF:	mov     rdx, cs:the_history
210E6:	mov     eax, cs:history_offset
210EC:	sub     eax, 1
210EF:	mov     cs:history_offset, eax
210F5:	mov     eax, cs:history_offset
210FB:	cdqe
210FD:	shl     rax, 3
21101:	add     rax, rdx
21104:	mov     rax, [rax]
21107:	pop     rbp
21108:	retn
21109:	endbr64
2110D:	push    rbp
2110E:	mov     rbp, rsp
21111:	mov     edx, cs:history_offset
21117:	mov     eax, cs:history_length
2111D:	cmp     edx, eax
2111F:	jnz     short loc_21128
21121:	mov     eax, 0
21126:	jmp     short loc_21150
21128:	mov     rdx, cs:the_history
2112F:	mov     eax, cs:history_offset
21135:	add     eax, 1
21138:	mov     cs:history_offset, eax
2113E:	mov     eax, cs:history_offset
21144:	cdqe
21146:	shl     rax, 3
2114A:	add     rax, rdx
2114D:	mov     rax, [rax]
21150:	pop     rbp
21151:	retn
21152:	endbr64
21156:	push    rbp
21157:	mov     rbp, rsp
2115A:	mov     rax, cs:the_history
21161:	pop     rbp
21162:	retn
21163:	endbr64
21167:	push    rbp
21168:	mov     rbp, rsp
2116B:	mov     [rbp+offset], edi
2116E:	mov     edx, cs:history_base
21174:	mov     eax, [rbp+offset]
21177:	sub     eax, edx
21179:	mov     [rbp+local_index], eax
2117C:	mov     eax, cs:history_length
21182:	cmp     [rbp+local_index], eax
21185:	jge     short loc_21199
21187:	cmp     [rbp+local_index], 0
2118B:	js      short loc_21199
2118D:	mov     rax, cs:the_history
21194:	test    rax, rax
21197:	jnz     short loc_211A0
21199:	mov     eax, 0
2119E:	jmp     short loc_211B6
211A0:	mov     rdx, cs:the_history
211A7:	mov     eax, [rbp+local_index]
211AA:	cdqe
211AC:	shl     rax, 3
211B0:	add     rax, rdx
211B3:	mov     rax, [rax]
211B6:	pop     rbp
211B7:	retn
211B8:	endbr64
211BC:	push    rbp
211BD:	mov     rbp, rsp
211C0:	sub     rsp, 20h
211C4:	mov     [rbp+string], rdi
211C8:	mov     [rbp+dir], esi
211CB:	mov     [rbp+pos], edx
211CE:	mov     eax, 0
211D3:	call    where_history
211D8:	mov     [rbp+old], eax
211DB:	mov     eax, [rbp+pos]
211DE:	mov     edi, eax; pos
211E0:	mov     eax, 0
211E5:	call    history_set_pos
211EA:	mov     edx, [rbp+dir]
211ED:	mov     rax, [rbp+string]
211F1:	mov     esi, edx; direction
211F3:	mov     rdi, rax; string
211F6:	mov     eax, 0
211FB:	call    history_search
21200:	cmp     eax, 0FFFFFFFFh
21203:	jnz     short loc_2121B
21205:	mov     eax, [rbp+old]
21208:	mov     edi, eax; pos
2120A:	mov     eax, 0
2120F:	call    history_set_pos
21214:	mov     eax, 0FFFFFFFFh
21219:	jmp     short locret_2123A
2121B:	mov     eax, 0
21220:	call    where_history
21225:	mov     [rbp+ret], eax
21228:	mov     eax, [rbp+old]
2122B:	mov     edi, eax; pos
2122D:	mov     eax, 0
21232:	call    history_set_pos
21237:	mov     eax, [rbp+ret]
2123A:	leave
2123B:	retn
2123C:	endbr64
21240:	push    rbp
21241:	mov     rbp, rsp
21244:	mov     [rbp+pos], edi
21247:	mov     eax, cs:history_length
2124D:	cmp     [rbp+pos], eax
21250:	jg      short loc_21264
21252:	cmp     [rbp+pos], 0
21256:	js      short loc_21264
21258:	mov     rax, cs:the_history
2125F:	test    rax, rax
21262:	jnz     short loc_2126B
21264:	mov     eax, 0
21269:	jmp     short loc_21279
2126B:	mov     eax, [rbp+pos]
2126E:	mov     cs:history_offset, eax
21274:	mov     eax, 1
21279:	pop     rbp
2127A:	retn
2127B:	endbr64
2127F:	push    rbp
21280:	mov     rbp, rsp
21283:	push    c
21285:	push    i
21286:	sub     rsp, 50h
2128A:	mov     [rbp+string], rdi
2128E:	mov     [rbp+caller_index], rsi
21292:	mov     [rbp+delimiting_quote], edx
21295:	mov     rax, [rbp+caller_index]
21299:	mov     ebx, [rax]
2129B:	mov     [rbp+sign], 1
212A2:	mov     [rbp+substring_okay], 0
212A9:	movsxd  rdx, ebx
212AC:	mov     rax, [rbp+string]
212B0:	add     rax, rdx
212B3:	movzx   edx, byte ptr [rax]
212B6:	movzx   eax, byte ptr cs:history_expansion_char; '!'
212BD:	cmp     dl, al
212BF:	jz      short loc_212CB
212C1:	mov     eax, 0
212C6:	jmp     loc_21605
212CB:	add     ebx, 1
212CE:	movsxd  rdx, ebx
212D1:	mov     rax, [rbp+string]
212D5:	add     rax, rdx
212D8:	movzx   edx, byte ptr [rax]
212DB:	movzx   eax, byte ptr cs:history_expansion_char; '!'
212E2:	cmp     dl, al
212E4:	jnz     short loc_21333
212E6:	add     ebx, 1
212E9:	mov     eax, cs:history_length
212EF:	lea     edx, [rax-1]
212F2:	mov     eax, cs:history_base
212F8:	add     eax, edx
212FA:	mov     [rbp+which], eax
212FD:	mov     rax, [rbp+caller_index]
21301:	mov     [rax], ebx
21303:	mov     eax, [rbp+which]
21306:	mov     edi, eax; offset
21308:	mov     eax, 0
2130D:	call    history_get
21312:	mov     [rbp+entry], rax
21316:	cmp     [rbp+entry], 0
2131B:	jz      short loc_21329
2131D:	mov     rax, [rbp+entry]
21321:	mov     rax, [rax]
21324:	jmp     loc_21605
21329:	mov     eax, 0
2132E:	jmp     loc_21605
21333:	movsxd  rdx, ebx
21336:	mov     rax, [rbp+string]
2133A:	add     rax, rdx
2133D:	movzx   eax, byte ptr [rax]
21340:	cmp     al, 2Dh ; '-'
21342:	jnz     short loc_2134E
21344:	mov     [rbp+sign], 0FFFFFFFFh
2134B:	add     ebx, 1
2134E:	movsxd  rdx, ebx
21351:	mov     rax, [rbp+string]
21355:	add     rax, rdx
21358:	movzx   eax, byte ptr [rax]
2135B:	cmp     al, 2Fh ; '/'
2135D:	jle     loc_2141C
21363:	movsxd  rdx, ebx
21366:	mov     rax, [rbp+string]
2136A:	add     rax, rdx
2136D:	movzx   eax, byte ptr [rax]
21370:	cmp     al, 39h ; '9'
21372:	jg      loc_2141C
21378:	mov     [rbp+which], 0
2137F:	jmp     short loc_213AA
21381:	mov     edx, [rbp+which]
21384:	mov     eax, edx
21386:	shl     eax, 2
21389:	add     eax, edx
2138B:	add     eax, eax
2138D:	mov     ecx, eax
2138F:	movsxd  rdx, ebx
21392:	mov     rax, [rbp+string]
21396:	add     rax, rdx
21399:	movzx   eax, byte ptr [rax]
2139C:	movsx   eax, al
2139F:	sub     eax, 30h ; '0'
213A2:	add     eax, ecx
213A4:	mov     [rbp+which], eax
213A7:	add     ebx, 1
213AA:	movsxd  rdx, ebx
213AD:	mov     rax, [rbp+string]
213B1:	add     rax, rdx
213B4:	movzx   eax, byte ptr [rax]
213B7:	cmp     al, 2Fh ; '/'
213B9:	jle     short loc_213CC
213BB:	movsxd  rdx, ebx
213BE:	mov     rax, [rbp+string]
213C2:	add     rax, rdx
213C5:	movzx   eax, byte ptr [rax]
213C8:	cmp     al, 39h ; '9'
213CA:	jle     short loc_21381
213CC:	mov     rax, [rbp+caller_index]
213D0:	mov     [rax], ebx
213D2:	cmp     [rbp+sign], 0
213D6:	jns     short loc_213EC
213D8:	mov     edx, cs:history_length
213DE:	mov     eax, cs:history_base
213E4:	add     eax, edx
213E6:	sub     eax, [rbp+which]
213E9:	mov     [rbp+which], eax
213EC:	mov     eax, [rbp+which]
213EF:	mov     edi, eax; offset
213F1:	mov     eax, 0
213F6:	call    history_get
213FB:	mov     [rbp+entry], rax
213FF:	cmp     [rbp+entry], 0
21404:	jz      short loc_21412
21406:	mov     rax, [rbp+entry]
2140A:	mov     rax, [rax]
2140D:	jmp     loc_21605
21412:	mov     eax, 0
21417:	jmp     loc_21605
2141C:	movsxd  rdx, ebx
2141F:	mov     rax, [rbp+string]
21423:	add     rax, rdx
21426:	movzx   eax, byte ptr [rax]
21429:	cmp     al, 3Fh ; '?'
2142B:	jnz     short loc_21434
2142D:	add     [rbp+substring_okay], 1
21431:	add     ebx, 1
21434:	mov     [rbp+local_index], ebx
21437:	jmp     short loc_21491
21439:	cmp     [rbp+substring_okay], 0
2143D:	jnz     short loc_21466
2143F:	cmp     r12b, 20h ; ' '
21443:	jz      short loc_214A4
21445:	cmp     r12b, 9
21449:	jz      short loc_214A4
2144B:	cmp     r12b, 3Ah ; ':'
2144F:	jz      short loc_214A4
21451:	movsxd  rdx, ebx
21454:	mov     rax, [rbp+string]
21458:	add     rax, rdx
2145B:	movzx   eax, byte ptr [rax]
2145E:	movsx   eax, al
21461:	cmp     [rbp+delimiting_quote], eax
21464:	jz      short loc_214A4
21466:	movsxd  rdx, ebx
21469:	mov     rax, [rbp+string]
2146D:	add     rax, rdx
21470:	movzx   eax, byte ptr [rax]
21473:	cmp     al, 0Ah
21475:	jz      short loc_214A4
21477:	cmp     [rbp+substring_okay], 0
2147B:	jz      short loc_2148E
2147D:	movsxd  rdx, ebx
21480:	mov     rax, [rbp+string]
21484:	add     rax, rdx
21487:	movzx   eax, byte ptr [rax]
2148A:	cmp     al, 3Fh ; '?'
2148C:	jz      short loc_214A4
2148E:	add     ebx, 1
21491:	movsxd  rdx, ebx
21494:	mov     rax, [rbp+string]
21498:	add     rax, rdx
2149B:	movzx   r12d, byte ptr [rax]
2149F:	test    r12b, r12b
214A2:	jnz     short loc_21439
214A4:	mov     eax, ebx
214A6:	sub     eax, [rbp+local_index]
214A9:	add     eax, 1
214AC:	cdqe
214AE:	mov     rdi, rax; n
214B1:	call    xmalloc
214B6:	mov     [rbp+temp], rax
214BA:	mov     eax, ebx
214BC:	sub     eax, [rbp+local_index]
214BF:	movsxd  rdx, eax; n
214C2:	mov     eax, [rbp+local_index]
214C5:	movsxd  rcx, eax
214C8:	mov     rax, [rbp+string]
214CC:	add     rcx, rax
214CF:	mov     rax, [rbp+temp]
214D3:	mov     rsi, rcx; src
214D6:	mov     rdi, rax; dest
214D9:	call    _strncpy
214DE:	mov     eax, ebx
214E0:	sub     eax, [rbp+local_index]
214E3:	movsxd  rdx, eax
214E6:	mov     rax, [rbp+temp]
214EA:	add     rax, rdx
214ED:	mov     byte ptr [rax], 0
214F0:	cmp     [rbp+substring_okay], 0
214F4:	jz      short loc_2150A
214F6:	movsxd  rdx, ebx
214F9:	mov     rax, [rbp+string]
214FD:	add     rax, rdx
21500:	movzx   eax, byte ptr [rax]
21503:	cmp     al, 3Fh ; '?'
21505:	jnz     short loc_2150A
21507:	add     ebx, 1
2150A:	mov     rax, [rbp+caller_index]
2150E:	mov     [rax], ebx
21510:	cmp     [rbp+substring_okay], 0
21514:	setz    al
21517:	movzx   eax, al
2151A:	mov     [rbp+search_mode], eax
2151D:	mov     edx, [rbp+search_mode]; anchored
21520:	mov     rax, [rbp+temp]
21524:	mov     esi, 0FFFFFFFFh; direction
21529:	mov     rdi, rax; string
2152C:	mov     eax, 0
21531:	call    history_search_internal
21536:	mov     [rbp+local_index], eax
21539:	cmp     [rbp+local_index], 0
2153D:	jns     short loc_21561
2153F:	mov     eax, cs:history_length
21545:	mov     cs:history_offset, eax
2154B:	mov     rax, [rbp+temp]
2154F:	mov     rdi, rax; pointer
21552:	call    xfree
21557:	mov     eax, 0
2155C:	jmp     loc_21605
21561:	cmp     [rbp+local_index], 0
21565:	jz      short loc_2156D
21567:	cmp     [rbp+substring_okay], 0
2156B:	jz      short loc_215CA
2156D:	mov     eax, 0
21572:	call    current_history
21577:	mov     [rbp+entry], rax
2157B:	mov     eax, cs:history_length
21581:	mov     cs:history_offset, eax
21587:	cmp     [rbp+substring_okay], 0
2158B:	jz      short loc_215B5
2158D:	mov     rax, cs:search_string
21594:	test    rax, rax
21597:	jz      short loc_215A8
21599:	mov     rax, cs:search_string
215A0:	mov     rdi, rax; pointer
215A3:	call    xfree
215A8:	mov     rax, [rbp+temp]
215AC:	mov     cs:search_string, rax
215B3:	jmp     short loc_215C1
215B5:	mov     rax, [rbp+temp]
215B9:	mov     rdi, rax; pointer
215BC:	call    xfree
215C1:	mov     rax, [rbp+entry]
215C5:	mov     rax, [rax]
215C8:	jmp     short loc_21605
215CA:	mov     eax, cs:history_offset
215D0:	test    eax, eax
215D2:	jz      short loc_215E8
215D4:	mov     eax, cs:history_offset
215DA:	sub     eax, 1
215DD:	mov     cs:history_offset, eax
215E3:	jmp     loc_2151D
215E8:	mov     eax, cs:history_length
215EE:	mov     cs:history_offset, eax
215F4:	mov     rax, [rbp+temp]
215F8:	mov     rdi, rax; pointer
215FB:	call    xfree
21600:	mov     eax, 0
21605:	add     rsp, 50h
21609:	pop     i
2160A:	pop     c
2160C:	pop     rbp
2160D:	retn
2160E:	endbr64
21612:	push    rbp
21613:	mov     rbp, rsp
21616:	sub     rsp, 40h
2161A:	mov     [rbp+s], rdi
2161E:	mov     [rbp+start], esi
21621:	mov     [rbp+current], edx
21624:	mov     [rbp+errtype], ecx
21627:	mov     eax, [rbp+current]
2162A:	sub     eax, [rbp+start]
2162D:	mov     [rbp+ll], eax
21630:	cmp     [rbp+errtype], 3
21634:	jz      short loc_21692
21636:	cmp     [rbp+errtype], 3
2163A:	jg      short loc_216A6
2163C:	cmp     [rbp+errtype], 2
21640:	jz      short loc_2167E
21642:	cmp     [rbp+errtype], 2
21646:	jg      short loc_216A6
21648:	cmp     [rbp+errtype], 0
2164C:	jz      short loc_21656
2164E:	cmp     [rbp+errtype], 1
21652:	jz      short loc_2166A
21654:	jmp     short loc_216A6
21656:	lea     rax, aEventNotFound; 'event not found'
2165D:	mov     [rbp+emsg], rax
21661:	mov     [rbp+elen], 0Fh
21668:	jmp     short loc_216B9
2166A:	lea     rax, aBadWordSpecifi; 'bad word specifier'
21671:	mov     [rbp+emsg], rax
21675:	mov     [rbp+elen], 12h
2167C:	jmp     short loc_216B9
2167E:	lea     rax, aSubstitutionFa; 'substitution failed'
21685:	mov     [rbp+emsg], rax
21689:	mov     [rbp+elen], 13h
21690:	jmp     short loc_216B9
21692:	lea     rax, aUnrecognizedHi; 'unrecognized history modifier'
21699:	mov     [rbp+emsg], rax
2169D:	mov     [rbp+elen], 1Dh
216A4:	jmp     short loc_216B9
216A6:	lea     rax, aUnknownExpansi; 'unknown expansion error'
216AD:	mov     [rbp+emsg], rax
216B1:	mov     [rbp+elen], 17h
216B8:	nop
216B9:	mov     edx, [rbp+ll]
216BC:	mov     eax, [rbp+elen]
216BF:	add     eax, edx
216C1:	add     eax, 3
216C4:	cdqe
216C6:	mov     rdi, rax; n
216C9:	call    xmalloc
216CE:	mov     [rbp+temp], rax
216D2:	mov     eax, [rbp+ll]
216D5:	movsxd  rdx, eax; n
216D8:	mov     eax, [rbp+start]
216DB:	movsxd  rcx, eax
216DE:	mov     rax, [rbp+s]
216E2:	add     rcx, rax
216E5:	mov     rax, [rbp+temp]
216E9:	mov     rsi, rcx; src
216EC:	mov     rdi, rax; dest
216EF:	call    _strncpy
216F4:	mov     eax, [rbp+ll]
216F7:	movsxd  rdx, eax
216FA:	mov     rax, [rbp+temp]
216FE:	add     rax, rdx
21701:	mov     byte ptr [rax], 3Ah ; ':'
21704:	mov     eax, [rbp+ll]
21707:	cdqe
21709:	lea     rdx, [rax+1]
2170D:	mov     rax, [rbp+temp]
21711:	add     rax, rdx
21714:	mov     byte ptr [rax], 20h ; ' '
21717:	mov     eax, [rbp+ll]
2171A:	cdqe
2171C:	lea     rdx, [rax+2]
21720:	mov     rax, [rbp+temp]
21724:	add     rdx, rax
21727:	mov     rax, [rbp+emsg]
2172B:	mov     rsi, rax; src
2172E:	mov     rdi, rdx; dest
21731:	call    _strcpy
21736:	mov     rax, [rbp+temp]
2173A:	leave
2173B:	retn
2173C:	endbr64
21740:	push    rbp
21741:	mov     rbp, rsp
21744:	push    j
21746:	push    k
21748:	push    si_0
21749:	sub     rsp, 38h
2174D:	mov     [rbp+str], rdi
21751:	mov     [rbp+iptr], rsi
21755:	mov     [rbp+delimiter], edx
21758:	mov     [rbp+is_rhs], ecx
2175B:	mov     [rbp+lenptr], r8
2175F:	mov     [rbp+s], 0
21767:	mov     rax, [rbp+iptr]
2176B:	mov     r12d, [rax]
2176E:	mov     ebx, r12d
21771:	jmp     short loc_217A3
21773:	movsxd  rdx, ebx
21776:	mov     rax, [rbp+str]
2177A:	add     rax, rdx
2177D:	movzx   eax, byte ptr [rax]
21780:	cmp     al, 5Ch ; ''
21782:	jnz     short loc_217A0
21784:	movsxd  rax, ebx
21787:	lea     rdx, [rax+1]
2178B:	mov     rax, [rbp+str]
2178F:	add     rax, rdx
21792:	movzx   eax, byte ptr [rax]
21795:	movsx   eax, al
21798:	cmp     [rbp+delimiter], eax
2179B:	jnz     short loc_217A0
2179D:	add     ebx, 1
217A0:	add     ebx, 1
217A3:	movsxd  rdx, ebx
217A6:	mov     rax, [rbp+str]
217AA:	add     rax, rdx
217AD:	movzx   eax, byte ptr [rax]
217B0:	test    al, al
217B2:	jz      short loc_217C9
217B4:	movsxd  rdx, ebx
217B7:	mov     rax, [rbp+str]
217BB:	add     rax, rdx
217BE:	movzx   eax, byte ptr [rax]
217C1:	movsx   eax, al
217C4:	cmp     [rbp+delimiter], eax
217C7:	jnz     short loc_21773
217C9:	cmp     ebx, r12d
217CC:	jg      short loc_217D8
217CE:	cmp     [rbp+is_rhs], 0
217D2:	jz      loc_21865
217D8:	mov     eax, ebx
217DA:	sub     eax, r12d
217DD:	add     eax, 1
217E0:	cdqe
217E2:	mov     rdi, rax; n
217E5:	call    xmalloc
217EA:	mov     [rbp+s], rax
217EE:	mov     r13d, 0
217F4:	jmp     short loc_21845
217F6:	movsxd  rdx, r12d
217F9:	mov     rax, [rbp+str]
217FD:	add     rax, rdx
21800:	movzx   eax, byte ptr [rax]
21803:	cmp     al, 5Ch ; ''
21805:	jnz     short loc_21824
21807:	movsxd  rax, r12d
2180A:	lea     rdx, [rax+1]
2180E:	mov     rax, [rbp+str]
21812:	add     rax, rdx
21815:	movzx   eax, byte ptr [rax]
21818:	movsx   eax, al
2181B:	cmp     [rbp+delimiter], eax
2181E:	jnz     short loc_21824
21820:	add     r12d, 1
21824:	movsxd  rdx, r12d
21827:	mov     rax, [rbp+str]
2182B:	add     rax, rdx
2182E:	movsxd  rcx, r13d
21831:	mov     rdx, [rbp+s]
21835:	add     rdx, rcx
21838:	movzx   eax, byte ptr [rax]
2183B:	mov     [rdx], al
2183D:	add     r13d, 1
21841:	add     r12d, 1
21845:	cmp     r12d, ebx
21848:	jl      short loc_217F6
2184A:	movsxd  rdx, r13d
2184D:	mov     rax, [rbp+s]
21851:	add     rax, rdx
21854:	mov     byte ptr [rax], 0
21857:	cmp     [rbp+lenptr], 0
2185C:	jz      short loc_21865
2185E:	mov     rax, [rbp+lenptr]
21862:	mov     [rax], r13d
21865:	mov     r12d, ebx
21868:	movsxd  rdx, r12d
2186B:	mov     rax, [rbp+str]
2186F:	add     rax, rdx
21872:	movzx   eax, byte ptr [rax]
21875:	test    al, al
21877:	jz      short loc_2187D
21879:	add     r12d, 1
2187D:	mov     rax, [rbp+iptr]
21881:	mov     [rax], r12d
21884:	mov     rax, [rbp+s]
21888:	add     rsp, 38h
2188C:	pop     si_0
2188D:	pop     k
2188F:	pop     j
21891:	pop     rbp
21892:	retn
21893:	endbr64
21897:	push    rbp
21898:	mov     rbp, rsp
2189B:	sub     rsp, 20h
2189F:	mov     edx, cs:subst_rhs_len
218A5:	mov     eax, cs:subst_lhs_len
218AB:	add     eax, edx
218AD:	mov     [rbp+new_size], eax
218B0:	mov     eax, [rbp+new_size]
218B3:	cdqe
218B5:	mov     rdi, rax; n
218B8:	call    xmalloc
218BD:	mov     [rbp+new], rax
218C1:	mov     [rbp+j], 0
218C8:	mov     eax, [rbp+j]
218CB:	mov     [rbp+i], eax
218CE:	jmp     loc_219D4
218D3:	mov     rdx, cs:subst_rhs
218DA:	mov     eax, [rbp+i]
218DD:	cdqe
218DF:	add     rax, rdx
218E2:	movzx   eax, byte ptr [rax]
218E5:	cmp     al, 26h ; '&'
218E7:	jnz     short loc_21950
218E9:	mov     edx, cs:subst_lhs_len
218EF:	mov     eax, [rbp+j]
218F2:	add     eax, edx
218F4:	cmp     [rbp+new_size], eax
218F7:	jg      short loc_21923
218F9:	mov     eax, [rbp+new_size]
218FC:	lea     edx, [rax+rax]
218FF:	mov     eax, cs:subst_lhs_len
21905:	add     eax, edx
21907:	mov     [rbp+new_size], eax
2190A:	mov     eax, [rbp+new_size]
2190D:	movsxd  rdx, eax
21910:	mov     rax, [rbp+new]
21914:	mov     rsi, rdx; n
21917:	mov     rdi, rax; p
2191A:	call    xrealloc
2191F:	mov     [rbp+new], rax
21923:	mov     rax, cs:subst_lhs
2192A:	mov     edx, [rbp+j]
2192D:	movsxd  rcx, edx
21930:	mov     rdx, [rbp+new]
21934:	add     rdx, rcx
21937:	mov     rsi, rax; src
2193A:	mov     rdi, rdx; dest
2193D:	call    _strcpy
21942:	mov     eax, cs:subst_lhs_len
21948:	add     [rbp+j], eax
2194B:	jmp     loc_219D0
21950:	mov     rdx, cs:subst_rhs
21957:	mov     eax, [rbp+i]
2195A:	cdqe
2195C:	add     rax, rdx
2195F:	movzx   eax, byte ptr [rax]
21962:	cmp     al, 5Ch ; ''
21964:	jnz     short loc_21984
21966:	mov     rdx, cs:subst_rhs
2196D:	mov     eax, [rbp+i]
21970:	cdqe
21972:	add     rax, 1
21976:	add     rax, rdx
21979:	movzx   eax, byte ptr [rax]
2197C:	cmp     al, 26h ; '&'
2197E:	jnz     short loc_21984
21980:	add     [rbp+i], 1
21984:	mov     eax, [rbp+j]
21987:	cmp     eax, [rbp+new_size]
2198A:	jl      short loc_219A8
2198C:	shl     [rbp+new_size], 1
2198F:	mov     eax, [rbp+new_size]
21992:	movsxd  rdx, eax
21995:	mov     rax, [rbp+new]
21999:	mov     rsi, rdx; n
2199C:	mov     rdi, rax; p
2199F:	call    xrealloc
219A4:	mov     [rbp+new], rax
219A8:	mov     rdx, cs:subst_rhs
219AF:	mov     eax, [rbp+i]
219B2:	cdqe
219B4:	lea     rcx, [rdx+rax]
219B8:	mov     eax, [rbp+j]
219BB:	lea     edx, [rax+1]
219BE:	mov     [rbp+j], edx
219C1:	movsxd  rdx, eax
219C4:	mov     rax, [rbp+new]
219C8:	add     rdx, rax
219CB:	movzx   eax, byte ptr [rcx]
219CE:	mov     [rdx], al
219D0:	add     [rbp+i], 1
219D4:	mov     eax, cs:subst_rhs_len
219DA:	cmp     [rbp+i], eax
219DD:	jl      loc_218D3
219E3:	mov     eax, [rbp+j]
219E6:	movsxd  rdx, eax
219E9:	mov     rax, [rbp+new]
219ED:	add     rax, rdx
219F0:	mov     byte ptr [rax], 0
219F3:	mov     rax, cs:subst_rhs
219FA:	mov     rdi, rax; pointer
219FD:	call    xfree
21A02:	mov     rax, [rbp+new]
21A06:	mov     cs:subst_rhs, rax
21A0D:	mov     eax, [rbp+j]
21A10:	mov     cs:subst_rhs_len, eax
21A16:	nop
21A17:	leave
21A18:	retn
21A19:	endbr64
21A1D:	push    rbp
21A1E:	mov     rbp, rsp
21A21:	push    rbx
21A22:	sub     rsp, 0C8h
21A29:	mov     [rbp+string], rdi
21A30:	mov     [rbp+start], esi
21A36:	mov     [rbp+end_index_ptr], rdx
21A3D:	mov     [rbp+ret_string], rcx
21A44:	mov     [rbp+current_line], r8
21A4B:	mov     rax, fs:28h
21A54:	mov     [rbp+var_18], rax
21A58:	xor     eax, eax
21A5A:	mov     [rbp+result_len], 80h
21A61:	mov     edi, 80h; n
21A66:	call    xmalloc
21A6B:	mov     [rbp+result], rax
21A6F:	mov     eax, [rbp+start]
21A75:	mov     [rbp+i], eax
21A7B:	mov     eax, [rbp+i]
21A81:	cdqe
21A83:	lea     rdx, [rax+1]
21A87:	mov     rax, [rbp+string]
21A8E:	add     rax, rdx
21A91:	movzx   eax, byte ptr [rax]
21A94:	test    al, al
21A96:	jz      loc_21B25
21A9C:	mov     eax, [rbp+i]
21AA2:	cdqe
21AA4:	lea     rdx, [rax+1]
21AA8:	mov     rax, [rbp+string]
21AAF:	add     rax, rdx
21AB2:	movzx   eax, byte ptr [rax]
21AB5:	movsx   eax, al
21AB8:	mov     esi, eax; c
21ABA:	lea     rax, asc_295AA; ':$*%^'
21AC1:	mov     rdi, rax; s
21AC4:	call    _strchr
21AC9:	test    rax, rax
21ACC:	jz      short loc_21B25
21ACE:	mov     [rbp+fake_i], 0
21AD8:	mov     eax, [rbp+i]
21ADE:	add     eax, 1
21AE1:	mov     [rbp+i], eax
21AE7:	movzx   eax, byte ptr cs:history_expansion_char; '!'
21AEE:	mov     [rbp+fake_s+1], al
21AF1:	movzx   eax, [rbp+fake_s+1]
21AF5:	mov     [rbp+fake_s], al
21AF8:	mov     [rbp+fake_s+2], 0
21AFC:	lea     rcx, [rbp+fake_i]
21B03:	lea     rax, [rbp+fake_s]
21B07:	mov     edx, 0; delimiting_quote
21B0C:	mov     rsi, rcx; caller_index
21B0F:	mov     rdi, rax; string
21B12:	mov     eax, 0
21B17:	call    get_history_event
21B1C:	mov     [rbp+event], rax
21B20:	jmp     loc_21BF9
21B25:	mov     eax, [rbp+i]
21B2B:	cdqe
21B2D:	lea     rdx, [rax+1]
21B31:	mov     rax, [rbp+string]
21B38:	add     rax, rdx
21B3B:	movzx   eax, byte ptr [rax]
21B3E:	cmp     al, 23h ; '#'
21B40:	jnz     short loc_21B61
21B42:	mov     eax, [rbp+i]
21B48:	add     eax, 2
21B4B:	mov     [rbp+i], eax
21B51:	mov     rax, [rbp+current_line]
21B58:	mov     [rbp+event], rax
21B5C:	jmp     loc_21BF9
21B61:	mov     [rbp+quoted_search_delimiter], 0
21B6B:	mov     eax, [rbp+i]
21B71:	test    eax, eax
21B73:	jz      short loc_21BD1
21B75:	mov     eax, [rbp+i]
21B7B:	cdqe
21B7D:	lea     rdx, [rax-1]
21B81:	mov     rax, [rbp+string]
21B88:	add     rax, rdx
21B8B:	movzx   eax, byte ptr [rax]
21B8E:	cmp     al, 27h ; '''
21B90:	jz      short loc_21BAF
21B92:	mov     eax, [rbp+i]
21B98:	cdqe
21B9A:	lea     rdx, [rax-1]
21B9E:	mov     rax, [rbp+string]
21BA5:	add     rax, rdx
21BA8:	movzx   eax, byte ptr [rax]
21BAB:	cmp     al, 22h ; '''
21BAD:	jnz     short loc_21BD1
21BAF:	mov     eax, [rbp+i]
21BB5:	cdqe
21BB7:	lea     rdx, [rax-1]
21BBB:	mov     rax, [rbp+string]
21BC2:	add     rax, rdx
21BC5:	movzx   eax, byte ptr [rax]
21BC8:	movsx   eax, al
21BCB:	mov     [rbp+quoted_search_delimiter], eax
21BD1:	mov     edx, [rbp+quoted_search_delimiter]; delimiting_quote
21BD7:	lea     rcx, [rbp+i]
21BDE:	mov     rax, [rbp+string]
21BE5:	mov     rsi, rcx; caller_index
21BE8:	mov     rdi, rax; string
21BEB:	mov     eax, 0
21BF0:	call    get_history_event
21BF5:	mov     [rbp+event], rax
21BF9:	cmp     [rbp+event], 0
21BFE:	jnz     short loc_21C45
21C00:	mov     edx, [rbp+i]; current
21C06:	mov     esi, [rbp+start]; start
21C0C:	mov     rax, [rbp+string]
21C13:	mov     ecx, 0; errtype
21C18:	mov     rdi, rax; s
21C1B:	mov     eax, 0
21C20:	call    hist_error
21C25:	mov     rdx, [rbp+ret_string]
21C2C:	mov     [rdx], rax
21C2F:	mov     rax, [rbp+result]
21C33:	mov     rdi, rax; pointer
21C36:	call    xfree
21C3B:	mov     eax, 0FFFFFFFFh
21C40:	jmp     loc_224DD
21C45:	mov     eax, [rbp+i]
21C4B:	mov     [rbp+starting_index], eax
21C4E:	lea     rdx, [rbp+i]; caller_index
21C55:	mov     rcx, [rbp+event]
21C59:	mov     rax, [rbp+string]
21C60:	mov     rsi, rcx; from
21C63:	mov     rdi, rax; spec
21C66:	mov     eax, 0
21C6B:	call    get_history_word_specifier
21C70:	mov     [rbp+word_spec], rax
21C74:	lea     rax, error_pointer
21C7B:	cmp     [rbp+word_spec], rax
21C7F:	jnz     short loc_21CC3
21C81:	mov     edx, [rbp+i]; current
21C87:	mov     esi, [rbp+starting_index]; start
21C8A:	mov     rax, [rbp+string]
21C91:	mov     ecx, 1; errtype
21C96:	mov     rdi, rax; s
21C99:	mov     eax, 0
21C9E:	call    hist_error
21CA3:	mov     rdx, [rbp+ret_string]
21CAA:	mov     [rdx], rax
21CAD:	mov     rax, [rbp+result]
21CB1:	mov     rdi, rax; pointer
21CB4:	call    xfree
21CB9:	mov     eax, 0FFFFFFFFh
21CBE:	jmp     loc_224DD
21CC3:	cmp     [rbp+word_spec], 0
21CC8:	jnz     short loc_21CFA
21CCA:	mov     rax, [rbp+event]
21CCE:	mov     rdi, rax; s
21CD1:	call    _strlen
21CD6:	add     rax, 1
21CDA:	mov     rdi, rax; n
21CDD:	call    xmalloc
21CE2:	mov     rdx, rax
21CE5:	mov     rax, [rbp+event]
21CE9:	mov     rsi, rax; src
21CEC:	mov     rdi, rdx; dest
21CEF:	call    _strcpy
21CF4:	mov     [rbp+temp], rax
21CF8:	jmp     short loc_21D34
21CFA:	mov     rax, [rbp+word_spec]
21CFE:	mov     rdi, rax; s
21D01:	call    _strlen
21D06:	add     rax, 1
21D0A:	mov     rdi, rax; n
21D0D:	call    xmalloc
21D12:	mov     rdx, rax
21D15:	mov     rax, [rbp+word_spec]
21D19:	mov     rsi, rax; src
21D1C:	mov     rdi, rdx; dest
21D1F:	call    _strcpy
21D24:	mov     [rbp+temp], rax
21D28:	mov     rax, [rbp+word_spec]
21D2C:	mov     rdi, rax; pointer
21D2F:	call    xfree
21D34:	mov     [rbp+print_only], 0
21D3E:	mov     eax, [rbp+print_only]
21D44:	mov     [rbp+substitute_globally], eax
21D4A:	mov     eax, [rbp+substitute_globally]
21D50:	mov     [rbp+want_quotes], eax
21D53:	mov     eax, [rbp+i]
21D59:	mov     [rbp+starting_index], eax
21D5C:	jmp     loc_2243B
21D61:	mov     eax, [rbp+i]
21D67:	cdqe
21D69:	lea     rdx, [rax+1]
21D6D:	mov     rax, [rbp+string]
21D74:	add     rax, rdx
21D77:	movzx   eax, byte ptr [rax]
21D7A:	mov     [rbp+c], al
21D80:	cmp     [rbp+c], 67h ; 'g'
21D87:	jnz     short loc_21DC1
21D89:	mov     [rbp+substitute_globally], 1
21D93:	mov     eax, [rbp+i]
21D99:	add     eax, 1
21D9C:	mov     [rbp+i], eax
21DA2:	mov     eax, [rbp+i]
21DA8:	cdqe
21DAA:	lea     rdx, [rax+1]
21DAE:	mov     rax, [rbp+string]
21DB5:	add     rax, rdx
21DB8:	movzx   eax, byte ptr [rax]
21DBB:	mov     [rbp+c], al
21DC1:	movsx   eax, [rbp+c]
21DC8:	cmp     eax, 26h ; '&'
21DCB:	jz      loc_21F99; jumptable 0000000000021E08 case 115
21DD1:	cmp     eax, 26h ; '&'
21DD4:	jl      short def_21E08; jumptable 0000000000021E08 default case, cases 102,103,105-111,113
21DD6:	cmp     eax, 74h ; 't'
21DD9:	jg      short def_21E08; jumptable 0000000000021E08 default case, cases 102,103,105-111,113
21DDB:	cmp     eax, 65h ; 'e'
21DDE:	jl      short def_21E08; jumptable 0000000000021E08 default case, cases 102,103,105-111,113
21DE0:	sub     eax, 65h ; 'e'; switch 16 cases
21DE3:	cmp     eax, 0Fh
21DE6:	ja      short def_21E08; jumptable 0000000000021E08 default case, cases 102,103,105-111,113
21DE8:	mov     eax, eax
21DEA:	lea     rdx, ds:0[rax*4]
21DF2:	lea     rax, jpt_21E08
21DF9:	mov     eax, ds:(jpt_21E08 - 295D0h)[rdx+rax]
21DFC:	cdqe
21DFE:	lea     rdx, jpt_21E08
21E05:	add     rax, rdx
21E08:	jmp     rax; switch jump
21E0B:	mov     eax, [rbp+i]; jumptable 0000000000021E08 default case, cases 102,103,105-111,113
21E11:	lea     edx, [rax+2]; current
21E14:	mov     eax, [rbp+i]
21E1A:	lea     esi, [rax+1]; start
21E1D:	mov     rax, [rbp+string]
21E24:	mov     ecx, 3; errtype
21E29:	mov     rdi, rax; s
21E2C:	mov     eax, 0
21E31:	call    hist_error
21E36:	mov     rdx, [rbp+ret_string]
21E3D:	mov     [rdx], rax
21E40:	mov     rax, [rbp+result]
21E44:	mov     rdi, rax; pointer
21E47:	call    xfree
21E4C:	mov     rax, [rbp+temp]
21E50:	mov     rdi, rax; pointer
21E53:	call    xfree
21E58:	mov     eax, 0FFFFFFFFh
21E5D:	jmp     loc_224DD
21E62:	add     [rbp+print_only], 1; jumptable 0000000000021E08 case 112
21E69:	jmp     loc_2242C
21E6E:	mov     rax, [rbp+temp]; jumptable 0000000000021E08 case 116
21E72:	mov     esi, 2Fh ; '/'; c
21E77:	mov     rdi, rax; s
21E7A:	call    _strrchr
21E7F:	mov     [rbp+tstr], rax
21E83:	cmp     [rbp+tstr], 0
21E88:	jz      loc_2241F
21E8E:	add     [rbp+tstr], 1
21E93:	mov     rax, [rbp+tstr]
21E97:	mov     rdi, rax; s
21E9A:	call    _strlen
21E9F:	add     rax, 1
21EA3:	mov     rdi, rax; n
21EA6:	call    xmalloc
21EAB:	mov     rdx, rax
21EAE:	mov     rax, [rbp+tstr]
21EB2:	mov     rsi, rax; src
21EB5:	mov     rdi, rdx; dest
21EB8:	call    _strcpy
21EBD:	mov     [rbp+t], rax
21EC1:	mov     rax, [rbp+temp]
21EC5:	mov     rdi, rax; pointer
21EC8:	call    xfree
21ECD:	mov     rax, [rbp+t]
21ED1:	mov     [rbp+temp], rax
21ED5:	jmp     loc_2241F
21EDA:	mov     rax, [rbp+temp]; jumptable 0000000000021E08 case 104
21EDE:	mov     esi, 2Fh ; '/'; c
21EE3:	mov     rdi, rax; s
21EE6:	call    _strrchr
21EEB:	mov     [rbp+tstr], rax
21EEF:	cmp     [rbp+tstr], 0
21EF4:	jz      loc_22422
21EFA:	mov     rax, [rbp+tstr]
21EFE:	mov     byte ptr [rax], 0
21F01:	jmp     loc_22422
21F06:	mov     rax, [rbp+temp]; jumptable 0000000000021E08 case 114
21F0A:	mov     esi, 2Eh ; '.'; c
21F0F:	mov     rdi, rax; s
21F12:	call    _strrchr
21F17:	mov     [rbp+tstr], rax
21F1B:	cmp     [rbp+tstr], 0
21F20:	jz      loc_22425
21F26:	mov     rax, [rbp+tstr]
21F2A:	mov     byte ptr [rax], 0
21F2D:	jmp     loc_22425
21F32:	mov     rax, [rbp+temp]; jumptable 0000000000021E08 case 101
21F36:	mov     esi, 2Eh ; '.'; c
21F3B:	mov     rdi, rax; s
21F3E:	call    _strrchr
21F43:	mov     [rbp+tstr], rax
21F47:	cmp     [rbp+tstr], 0
21F4C:	jz      loc_22428
21F52:	mov     rax, [rbp+tstr]
21F56:	mov     rdi, rax; s
21F59:	call    _strlen
21F5E:	add     rax, 1
21F62:	mov     rdi, rax; n
21F65:	call    xmalloc
21F6A:	mov     rdx, rax
21F6D:	mov     rax, [rbp+tstr]
21F71:	mov     rsi, rax; src
21F74:	mov     rdi, rdx; dest
21F77:	call    _strcpy
21F7C:	mov     [rbp+t], rax
21F80:	mov     rax, [rbp+temp]
21F84:	mov     rdi, rax; pointer
21F87:	call    xfree
21F8C:	mov     rax, [rbp+t]
21F90:	mov     [rbp+temp], rax
21F94:	jmp     loc_22428
21F99:	cmp     [rbp+c], 73h ; 's'; jumptable 0000000000021E08 case 115
21FA0:	jnz     loc_221A3
21FA6:	mov     eax, [rbp+i]
21FAC:	lea     ebx, [rax+2]
21FAF:	mov     rax, [rbp+string]
21FB6:	mov     rdi, rax; s
21FB9:	call    _strlen
21FBE:	cmp     ebx, eax
21FC0:	jge     loc_2242B
21FC6:	mov     eax, [rbp+i]
21FCC:	cdqe
21FCE:	lea     rdx, [rax+2]
21FD2:	mov     rax, [rbp+string]
21FD9:	add     rax, rdx
21FDC:	movzx   eax, byte ptr [rax]
21FDF:	movsx   eax, al
21FE2:	mov     [rbp+delimiter], eax
21FE5:	mov     eax, [rbp+i]
21FEB:	add     eax, 3
21FEE:	mov     [rbp+i], eax
21FF4:	mov     edx, [rbp+delimiter]; delimiter
21FF7:	lea     rsi, [rbp+i]; iptr
21FFE:	mov     rax, [rbp+string]
22005:	lea     r8, subst_lhs_len; lenptr
2200C:	mov     ecx, 0; is_rhs
22011:	mov     rdi, rax; str
22014:	mov     eax, 0
22019:	call    get_subst_pattern
2201E:	mov     [rbp+t_0], rax
22022:	cmp     [rbp+t_0], 0
22027:	jz      short loc_22054
22029:	mov     rax, cs:subst_lhs
22030:	test    rax, rax
22033:	jz      short loc_22044
22035:	mov     rax, cs:subst_lhs
2203C:	mov     rdi, rax; pointer
2203F:	call    xfree
22044:	mov     rax, [rbp+t_0]
22048:	mov     cs:subst_lhs, rax
2204F:	jmp     loc_220DA
22054:	mov     rax, cs:subst_lhs
2205B:	test    rax, rax
2205E:	jnz     short loc_220DA
22060:	mov     rax, cs:search_string
22067:	test    rax, rax
2206A:	jz      short loc_220C5
2206C:	mov     rax, cs:search_string
22073:	movzx   eax, byte ptr [rax]
22076:	test    al, al
22078:	jz      short loc_220C5
2207A:	mov     rbx, cs:search_string
22081:	mov     rax, cs:search_string
22088:	mov     rdi, rax; s
2208B:	call    _strlen
22090:	add     rax, 1
22094:	mov     rdi, rax; n
22097:	call    xmalloc
2209C:	mov     rsi, rbx; src
2209F:	mov     rdi, rax; dest
220A2:	call    _strcpy
220A7:	mov     cs:subst_lhs, rax
220AE:	mov     rax, cs:subst_lhs
220B5:	mov     rdi, rax; s
220B8:	call    _strlen
220BD:	mov     cs:subst_lhs_len, eax
220C3:	jmp     short loc_220DA
220C5:	mov     cs:subst_lhs, 0
220D0:	mov     cs:subst_lhs_len, 0
220DA:	mov     eax, cs:subst_lhs_len
220E0:	test    eax, eax
220E2:	jnz     short loc_22132
220E4:	mov     edx, [rbp+i]; current
220EA:	mov     esi, [rbp+starting_index]; start
220ED:	mov     rax, [rbp+string]
220F4:	mov     ecx, 2; errtype
220F9:	mov     rdi, rax; s
220FC:	mov     eax, 0
22101:	call    hist_error
22106:	mov     rdx, [rbp+ret_string]
2210D:	mov     [rdx], rax
22110:	mov     rax, [rbp+result]
22114:	mov     rdi, rax; pointer
22117:	call    xfree
2211C:	mov     rax, [rbp+temp]
22120:	mov     rdi, rax; pointer
22123:	call    xfree
22128:	mov     eax, 0FFFFFFFFh
2212D:	jmp     loc_224DD
22132:	mov     rax, cs:subst_rhs
22139:	test    rax, rax
2213C:	jz      short loc_2214D
2213E:	mov     rax, cs:subst_rhs
22145:	mov     rdi, rax; pointer
22148:	call    xfree
2214D:	mov     edx, [rbp+delimiter]; delimiter
22150:	lea     rsi, [rbp+i]; iptr
22157:	mov     rax, [rbp+string]
2215E:	lea     r8, subst_rhs_len; lenptr
22165:	mov     ecx, 1; is_rhs
2216A:	mov     rdi, rax; str
2216D:	mov     eax, 0
22172:	call    get_subst_pattern
22177:	mov     cs:subst_rhs, rax
2217E:	mov     rax, cs:subst_rhs
22185:	mov     esi, 26h ; '&'; c
2218A:	mov     rdi, rax; s
2218D:	call    _strchr
22192:	test    rax, rax
22195:	jz      short loc_221B2
22197:	mov     eax, 0
2219C:	call    postproc_subst_rhs
221A1:	jmp     short loc_221B2
221A3:	mov     eax, [rbp+i]
221A9:	add     eax, 2
221AC:	mov     [rbp+i], eax
221B2:	mov     rax, [rbp+temp]
221B6:	mov     rdi, rax; s
221B9:	call    _strlen
221BE:	mov     [rbp+l_temp], eax
221C1:	mov     eax, cs:subst_lhs_len
221C7:	cmp     [rbp+l_temp], eax
221CA:	jge     short loc_2221A
221CC:	mov     edx, [rbp+i]; current
221D2:	mov     esi, [rbp+starting_index]; start
221D5:	mov     rax, [rbp+string]
221DC:	mov     ecx, 2; errtype
221E1:	mov     rdi, rax; s
221E4:	mov     eax, 0
221E9:	call    hist_error
221EE:	mov     rdx, [rbp+ret_string]
221F5:	mov     [rdx], rax
221F8:	mov     rax, [rbp+result]
221FC:	mov     rdi, rax; pointer
221FF:	call    xfree
22204:	mov     rax, [rbp+temp]
22208:	mov     rdi, rax; pointer
2220B:	call    xfree
22210:	mov     eax, 0FFFFFFFFh
22215:	jmp     loc_224DD
2221A:	mov     [rbp+si_0], 0
22221:	mov     [rbp+failed], 1
2222B:	jmp     loc_2239A
22230:	mov     eax, [rbp+si_0]
22233:	movsxd  rdx, eax
22236:	mov     rax, [rbp+temp]
2223A:	add     rax, rdx
2223D:	movzx   edx, byte ptr [rax]
22240:	mov     rax, cs:subst_lhs
22247:	movzx   eax, byte ptr [rax]
2224A:	cmp     dl, al
2224C:	jnz     loc_22396
22252:	mov     eax, cs:subst_lhs_len
22258:	movsxd  rdx, eax; n
2225B:	mov     rax, cs:subst_lhs
22262:	mov     ecx, [rbp+si_0]
22265:	movsxd  rsi, ecx
22268:	mov     rcx, [rbp+temp]
2226C:	add     rcx, rsi
2226F:	mov     rsi, rax; s2
22272:	mov     rdi, rcx; s1
22275:	call    _strncmp
2227A:	test    eax, eax
2227C:	jnz     loc_22396
22282:	mov     eax, cs:subst_rhs_len
22288:	mov     edx, cs:subst_lhs_len
2228E:	sub     eax, edx
22290:	mov     ecx, eax
22292:	mov     eax, [rbp+l_temp]
22295:	add     eax, ecx
22297:	mov     [rbp+len], eax
2229A:	mov     eax, [rbp+len]
2229D:	add     eax, 1
222A0:	cdqe
222A2:	mov     rdi, rax; n
222A5:	call    xmalloc
222AA:	mov     [rbp+new_event], rax
222AE:	mov     eax, [rbp+si_0]
222B1:	movsxd  rdx, eax; n
222B4:	mov     rcx, [rbp+temp]
222B8:	mov     rax, [rbp+new_event]
222BC:	mov     rsi, rcx; src
222BF:	mov     rdi, rax; dest
222C2:	call    _strncpy
222C7:	mov     eax, cs:subst_rhs_len
222CD:	movsxd  rdx, eax; n
222D0:	mov     rax, cs:subst_rhs
222D7:	mov     ecx, [rbp+si_0]
222DA:	movsxd  rsi, ecx
222DD:	mov     rcx, [rbp+new_event]
222E1:	add     rcx, rsi
222E4:	mov     rsi, rax; src
222E7:	mov     rdi, rcx; dest
222EA:	call    _strncpy
222EF:	mov     edx, cs:subst_lhs_len
222F5:	mov     eax, [rbp+si_0]
222F8:	add     edx, eax
222FA:	mov     eax, [rbp+l_temp]
222FD:	sub     eax, edx
222FF:	cdqe
22301:	mov     edx, [rbp+si_0]
22304:	movsxd  rcx, edx
22307:	mov     edx, cs:subst_lhs_len
2230D:	movsxd  rdx, edx
22310:	add     rcx, rdx
22313:	mov     rdx, [rbp+temp]
22317:	lea     rsi, [rcx+rdx]; src
2231B:	mov     edx, [rbp+si_0]
2231E:	movsxd  rcx, edx
22321:	mov     edx, cs:subst_rhs_len
22327:	movsxd  rdx, edx
2232A:	add     rcx, rdx
2232D:	mov     rdx, [rbp+new_event]
22331:	add     rcx, rdx
22334:	mov     rdx, rax; n
22337:	mov     rdi, rcx; dest
2233A:	call    _strncpy
2233F:	mov     eax, [rbp+len]
22342:	movsxd  rdx, eax
22345:	mov     rax, [rbp+new_event]
22349:	add     rax, rdx
2234C:	mov     byte ptr [rax], 0
2234F:	mov     rax, [rbp+temp]
22353:	mov     rdi, rax; pointer
22356:	call    xfree
2235B:	mov     rax, [rbp+new_event]
2235F:	mov     [rbp+temp], rax
22363:	mov     [rbp+failed], 0
2236D:	cmp     [rbp+substitute_globally], 0
22374:	jz      short loc_223B0
22376:	mov     eax, cs:subst_rhs_len
2237C:	add     [rbp+si_0], eax
2237F:	mov     rax, [rbp+temp]
22383:	mov     rdi, rax; s
22386:	call    _strlen
2238B:	mov     [rbp+l_temp], eax
2238E:	add     [rbp+substitute_globally], 1
22395:	nop
22396:	add     [rbp+si_0], 1
2239A:	mov     edx, cs:subst_lhs_len
223A0:	mov     eax, [rbp+si_0]
223A3:	add     eax, edx
223A5:	cmp     [rbp+l_temp], eax
223A8:	jge     loc_22230
223AE:	jmp     short loc_223B1
223B0:	nop
223B1:	cmp     [rbp+substitute_globally], 1
223B8:	jle     short loc_223C6
223BA:	mov     [rbp+substitute_globally], 0
223C4:	jmp     short loc_2243B
223C6:	cmp     [rbp+failed], 0
223CD:	jnz     short loc_223D1
223CF:	jmp     short loc_2243B
223D1:	mov     edx, [rbp+i]; current
223D7:	mov     esi, [rbp+starting_index]; start
223DA:	mov     rax, [rbp+string]
223E1:	mov     ecx, 2; errtype
223E6:	mov     rdi, rax; s
223E9:	mov     eax, 0
223EE:	call    hist_error
223F3:	mov     rdx, [rbp+ret_string]
223FA:	mov     [rdx], rax
223FD:	mov     rax, [rbp+result]
22401:	mov     rdi, rax; pointer
22404:	call    xfree
22409:	mov     rax, [rbp+temp]
2240D:	mov     rdi, rax; pointer
22410:	call    xfree
22415:	mov     eax, 0FFFFFFFFh
2241A:	jmp     loc_224DD
2241F:	nop
22420:	jmp     short loc_2242C
22422:	nop
22423:	jmp     short loc_2242C
22425:	nop
22426:	jmp     short loc_2242C
22428:	nop
22429:	jmp     short loc_2242C
2242B:	nop
2242C:	mov     eax, [rbp+i]
22432:	add     eax, 2
22435:	mov     [rbp+i], eax
2243B:	mov     eax, [rbp+i]
22441:	movsxd  rdx, eax
22444:	mov     rax, [rbp+string]
2244B:	add     rax, rdx
2244E:	movzx   eax, byte ptr [rax]
22451:	cmp     al, 3Ah ; ':'
22453:	jz      loc_21D61
22459:	mov     eax, [rbp+i]
2245F:	sub     eax, 1
22462:	mov     [rbp+i], eax
22468:	mov     rax, [rbp+temp]
2246C:	mov     rdi, rax; s
2246F:	call    _strlen
22474:	mov     [rbp+n], eax
22477:	mov     eax, [rbp+n]
2247A:	cmp     eax, [rbp+result_len]
2247D:	jle     short loc_2249B
2247F:	mov     eax, [rbp+n]
22482:	add     eax, 1
22485:	movsxd  rdx, eax
22488:	mov     rax, [rbp+result]
2248C:	mov     rsi, rdx; n
2248F:	mov     rdi, rax; p
22492:	call    xrealloc
22497:	mov     [rbp+result], rax
2249B:	mov     rdx, [rbp+temp]
2249F:	mov     rax, [rbp+result]
224A3:	mov     rsi, rdx; src
224A6:	mov     rdi, rax; dest
224A9:	call    _strcpy
224AE:	mov     rax, [rbp+temp]
224B2:	mov     rdi, rax; pointer
224B5:	call    xfree
224BA:	mov     edx, [rbp+i]
224C0:	mov     rax, [rbp+end_index_ptr]
224C7:	mov     [rax], edx
224C9:	mov     rax, [rbp+ret_string]
224D0:	mov     rdx, [rbp+result]
224D4:	mov     [rax], rdx
224D7:	mov     eax, [rbp+print_only]
224DD:	mov     rdx, [rbp+var_18]
224E1:	sub     rdx, fs:28h
224EA:	jz      short loc_224F1
224EC:	call    ___stack_chk_fail
224F1:	mov     rbx, [rbp+var_8]
224F5:	leave
224F6:	retn
224F7:	endbr64
224FB:	push    rbp
224FC:	mov     rbp, rsp
224FF:	push    j
22500:	sub     rsp, 68h
22504:	mov     [rbp+hstring], rdi
22508:	mov     [rbp+output], rsi
2250C:	mov     rax, fs:28h
22515:	mov     [rbp+var_18], rax
22519:	xor     eax, eax
2251B:	movzx   eax, byte ptr cs:history_expansion_char; '!'
22522:	test    al, al
22524:	jnz     short loc_22561
22526:	mov     rax, [rbp+hstring]
2252A:	mov     rdi, rax; s
2252D:	call    _strlen
22532:	add     rax, 1
22536:	mov     rdi, rax; n
22539:	call    xmalloc
2253E:	mov     rdx, rax
22541:	mov     rax, [rbp+hstring]
22545:	mov     rsi, rax; src
22548:	mov     rdi, rdx; dest
2254B:	call    _strcpy
22550:	mov     rdx, [rbp+output]
22554:	mov     [rdx], rax
22557:	mov     eax, 0
2255C:	jmp     loc_22A19
22561:	mov     [rbp+result_len], 100h
22568:	mov     edi, 100h; n
2256D:	call    xmalloc
22572:	mov     [rbp+result], rax
22576:	mov     rax, [rbp+result]
2257A:	mov     byte ptr [rax], 0
2257D:	mov     [rbp+modified], 0
22584:	mov     eax, [rbp+modified]
22587:	mov     [rbp+only_printing], eax
2258A:	mov     rax, [rbp+hstring]
2258E:	mov     rdi, rax; s
22591:	call    _strlen
22596:	mov     [rbp+l], eax
22599:	mov     rax, [rbp+hstring]
2259D:	movzx   edx, byte ptr [rax]
225A0:	movzx   eax, byte ptr cs:history_subst_char; '^'
225A7:	cmp     dl, al
225A9:	jnz     short loc_2260F
225AB:	mov     eax, [rbp+l]
225AE:	add     eax, 5
225B1:	cdqe
225B3:	mov     rdi, rax; n
225B6:	call    xmalloc
225BB:	mov     [rbp+string], rax
225BF:	mov     rax, [rbp+string]
225C3:	add     rax, 1
225C7:	movzx   edx, byte ptr cs:history_expansion_char; '!'
225CE:	mov     [rax], dl
225D0:	movzx   edx, byte ptr [rax]
225D3:	mov     rax, [rbp+string]
225D7:	mov     [rax], dl
225D9:	mov     rax, [rbp+string]
225DD:	add     rax, 2
225E1:	mov     byte ptr [rax], 3Ah ; ':'
225E4:	mov     rax, [rbp+string]
225E8:	add     rax, 3
225EC:	mov     byte ptr [rax], 73h ; 's'
225EF:	mov     rax, [rbp+string]
225F3:	lea     rdx, [rax+4]
225F7:	mov     rax, [rbp+hstring]
225FB:	mov     rsi, rax; src
225FE:	mov     rdi, rdx; dest
22601:	call    _strcpy
22606:	add     [rbp+l], 4
2260A:	jmp     loc_226F4
2260F:	mov     rax, [rbp+hstring]
22613:	mov     [rbp+string], rax
22617:	mov     [rbp+i], 0
2261E:	jmp     short loc_2267E
22620:	mov     eax, [rbp+i]
22623:	cdqe
22625:	lea     rdx, [rax+1]
22629:	mov     rax, [rbp+string]
2262D:	add     rax, rdx
22630:	movzx   eax, byte ptr [rax]
22633:	movsx   eax, al
22636:	mov     [rbp+cc], eax
22639:	mov     eax, [rbp+i]
2263C:	movsxd  rdx, eax
2263F:	mov     rax, [rbp+string]
22643:	add     rax, rdx
22646:	movzx   edx, byte ptr [rax]
22649:	movzx   eax, byte ptr cs:history_expansion_char; '!'
22650:	cmp     dl, al
22652:	jnz     short loc_2267A
22654:	cmp     [rbp+cc], 0
22658:	jz      short loc_22679
2265A:	cmp     [rbp+cc], 0
2265E:	jz      short loc_22692
22660:	mov     rax, cs:history_no_expand_chars
22667:	mov     edx, [rbp+cc]
2266A:	mov     esi, edx; c
2266C:	mov     rdi, rax; s
2266F:	call    _strchr
22674:	test    rax, rax
22677:	jz      short loc_22692
22679:	nop
2267A:	add     [rbp+i], 1
2267E:	mov     eax, [rbp+i]
22681:	movsxd  rdx, eax
22684:	mov     rax, [rbp+string]
22688:	add     rax, rdx
2268B:	movzx   eax, byte ptr [rax]
2268E:	test    al, al
22690:	jnz     short loc_22620
22692:	mov     eax, [rbp+i]
22695:	movsxd  rdx, eax
22698:	mov     rax, [rbp+string]
2269C:	add     rax, rdx
2269F:	movzx   edx, byte ptr [rax]
226A2:	movzx   eax, byte ptr cs:history_expansion_char; '!'
226A9:	cmp     dl, al
226AB:	jz      short loc_226F4
226AD:	mov     rax, [rbp+result]
226B1:	mov     rdi, rax; pointer
226B4:	call    xfree
226B9:	mov     rax, [rbp+string]
226BD:	mov     rdi, rax; s
226C0:	call    _strlen
226C5:	add     rax, 1
226C9:	mov     rdi, rax; n
226CC:	call    xmalloc
226D1:	mov     rdx, rax
226D4:	mov     rax, [rbp+string]
226D8:	mov     rsi, rax; src
226DB:	mov     rdi, rdx; dest
226DE:	call    _strcpy
226E3:	mov     rdx, [rbp+output]
226E7:	mov     [rdx], rax
226EA:	mov     eax, 0
226EF:	jmp     loc_22A19
226F4:	mov     ebx, 0
226F9:	mov     [rbp+i], ebx
226FC:	mov     eax, [rbp+i]
226FF:	mov     [rbp+passc], eax
22702:	jmp     loc_229C4
22707:	mov     eax, [rbp+i]
2270A:	movsxd  rdx, eax
2270D:	mov     rax, [rbp+string]
22711:	add     rax, rdx
22714:	movzx   eax, byte ptr [rax]
22717:	movsx   eax, al
2271A:	mov     [rbp+tchar], eax
2271D:	cmp     [rbp+passc], 0
22721:	jz      short loc_22772
22723:	mov     [rbp+passc], 0
2272A:	cmp     ebx, [rbp+result_len]
2272D:	jl      short loc_2274C
2272F:	add     [rbp+result_len], 40h ; '@'
22733:	mov     eax, [rbp+result_len]
22736:	movsxd  rdx, eax
22739:	mov     rax, [rbp+result]
2273D:	mov     rsi, rdx; n
22740:	mov     rdi, rax; p
22743:	call    xrealloc
22748:	mov     [rbp+result], rax
2274C:	mov     eax, ebx
2274E:	lea     ebx, [rax+1]
22751:	movsxd  rdx, eax
22754:	mov     rax, [rbp+result]
22758:	add     rax, rdx
2275B:	mov     edx, [rbp+tchar]
2275E:	mov     [rax], dl
22760:	movsxd  rdx, ebx
22763:	mov     rax, [rbp+result]
22767:	add     rax, rdx
2276A:	mov     byte ptr [rax], 0
2276D:	jmp     loc_229C0
22772:	movzx   eax, byte ptr cs:history_expansion_char; '!'
22779:	movsx   eax, al
2277C:	cmp     [rbp+tchar], eax
2277F:	jnz     short loc_22788
22781:	mov     [rbp+tchar], 0FFFFFFFDh
22788:	cmp     [rbp+tchar], 0FFFFFFFDh
2278C:	jz      loc_22839
22792:	cmp     [rbp+tchar], 5Ch ; ''
22796:	jz      short loc_227ED
22798:	cmp     ebx, [rbp+result_len]
2279B:	jl      short loc_227BA
2279D:	add     [rbp+result_len], 40h ; '@'
227A1:	mov     eax, [rbp+result_len]
227A4:	movsxd  rdx, eax
227A7:	mov     rax, [rbp+result]
227AB:	mov     rsi, rdx; n
227AE:	mov     rdi, rax; p
227B1:	call    xrealloc
227B6:	mov     [rbp+result], rax
227BA:	mov     eax, [rbp+i]
227BD:	movsxd  rdx, eax
227C0:	mov     rax, [rbp+string]
227C4:	add     rax, rdx
227C7:	mov     edx, ebx
227C9:	lea     ebx, [rdx+1]
227CC:	movsxd  rcx, edx
227CF:	mov     rdx, [rbp+result]
227D3:	add     rdx, rcx
227D6:	movzx   eax, byte ptr [rax]
227D9:	mov     [rdx], al
227DB:	movsxd  rdx, ebx
227DE:	mov     rax, [rbp+result]
227E2:	add     rax, rdx
227E5:	mov     byte ptr [rax], 0
227E8:	jmp     loc_229C0
227ED:	add     [rbp+passc], 1
227F1:	cmp     ebx, [rbp+result_len]
227F4:	jl      short loc_22813
227F6:	add     [rbp+result_len], 40h ; '@'
227FA:	mov     eax, [rbp+result_len]
227FD:	movsxd  rdx, eax
22800:	mov     rax, [rbp+result]
22804:	mov     rsi, rdx; n
22807:	mov     rdi, rax; p
2280A:	call    xrealloc
2280F:	mov     [rbp+result], rax
22813:	mov     eax, ebx
22815:	lea     ebx, [rax+1]
22818:	movsxd  rdx, eax
2281B:	mov     rax, [rbp+result]
2281F:	add     rax, rdx
22822:	mov     edx, [rbp+tchar]
22825:	mov     [rax], dl
22827:	movsxd  rdx, ebx
2282A:	mov     rax, [rbp+result]
2282E:	add     rax, rdx
22831:	mov     byte ptr [rax], 0
22834:	jmp     loc_229C0
22839:	mov     eax, [rbp+i]
2283C:	cdqe
2283E:	lea     rdx, [rax+1]
22842:	mov     rax, [rbp+string]
22846:	add     rax, rdx
22849:	movzx   eax, byte ptr [rax]
2284C:	movsx   eax, al
2284F:	mov     [rbp+cc], eax
22852:	cmp     [rbp+cc], 0
22856:	jz      short loc_228C6
22858:	mov     rax, cs:history_no_expand_chars
2285F:	mov     edx, [rbp+cc]
22862:	mov     esi, edx; c
22864:	mov     rdi, rax; s
22867:	call    _strchr
2286C:	test    rax, rax
2286F:	jz      short loc_228C6
22871:	cmp     ebx, [rbp+result_len]
22874:	jl      short loc_22893
22876:	add     [rbp+result_len], 40h ; '@'
2287A:	mov     eax, [rbp+result_len]
2287D:	movsxd  rdx, eax
22880:	mov     rax, [rbp+result]
22884:	mov     rsi, rdx; n
22887:	mov     rdi, rax; p
2288A:	call    xrealloc
2288F:	mov     [rbp+result], rax
22893:	mov     eax, [rbp+i]
22896:	movsxd  rdx, eax
22899:	mov     rax, [rbp+string]
2289D:	add     rax, rdx
228A0:	mov     edx, ebx
228A2:	lea     ebx, [rdx+1]
228A5:	movsxd  rcx, edx
228A8:	mov     rdx, [rbp+result]
228AC:	add     rdx, rcx
228AF:	movzx   eax, byte ptr [rax]
228B2:	mov     [rdx], al
228B4:	movsxd  rdx, ebx
228B7:	mov     rax, [rbp+result]
228BB:	add     rax, rdx
228BE:	mov     byte ptr [rax], 0
228C1:	jmp     loc_229C0
228C6:	mov     rdi, [rbp+result]
228CA:	lea     rcx, [rbp+temp]; ret_string
228CE:	lea     rdx, [rbp+eindex]; end_index_ptr
228D2:	mov     esi, [rbp+i]; start
228D5:	mov     rax, [rbp+string]
228D9:	mov     r8, rdi; current_line
228DC:	mov     rdi, rax; string
228DF:	mov     eax, 0
228E4:	call    history_expand_internal
228E9:	mov     [rbp+r], eax
228EC:	cmp     [rbp+r], 0
228F0:	jns     short loc_22929
228F2:	mov     rdx, [rbp+temp]
228F6:	mov     rax, [rbp+output]
228FA:	mov     [rax], rdx
228FD:	mov     rax, [rbp+result]
22901:	mov     rdi, rax; pointer
22904:	call    xfree
22909:	mov     rax, [rbp+string]
2290D:	cmp     rax, [rbp+hstring]
22911:	jz      short loc_2291F
22913:	mov     rax, [rbp+string]
22917:	mov     rdi, rax; pointer
2291A:	call    xfree
2291F:	mov     eax, 0FFFFFFFFh
22924:	jmp     loc_22A19
22929:	mov     rax, [rbp+temp]
2292D:	test    rax, rax
22930:	jz      short loc_229AC
22932:	add     [rbp+modified], 1
22936:	mov     rax, [rbp+temp]
2293A:	movzx   eax, byte ptr [rax]
2293D:	test    al, al
2293F:	jz      short loc_229A0
22941:	mov     rax, [rbp+temp]
22945:	mov     rdi, rax; s
22948:	call    _strlen
2294D:	mov     [rbp+sl], eax
22950:	mov     eax, [rbp+sl]
22953:	add     eax, ebx
22955:	mov     ebx, eax
22957:	jmp     short loc_22976
22959:	sub     [rbp+result_len], 0FFFFFF80h
2295D:	mov     eax, [rbp+result_len]
22960:	movsxd  rdx, eax
22963:	mov     rax, [rbp+result]
22967:	mov     rsi, rdx; n
2296A:	mov     rdi, rax; p
2296D:	call    xrealloc
22972:	mov     [rbp+result], rax
22976:	cmp     ebx, [rbp+result_len]
22979:	jge     short loc_22959
2297B:	mov     rax, [rbp+temp]
2297F:	movsxd  rdx, ebx
22982:	mov     ecx, [rbp+sl]
22985:	movsxd  rcx, ecx
22988:	mov     rsi, rdx
2298B:	sub     rsi, rcx
2298E:	mov     rdx, [rbp+result]
22992:	add     rdx, rsi
22995:	mov     rsi, rax; src
22998:	mov     rdi, rdx; dest
2299B:	call    _strcpy
229A0:	mov     rax, [rbp+temp]
229A4:	mov     rdi, rax; pointer
229A7:	call    xfree
229AC:	cmp     [rbp+r], 1
229B0:	setz    al
229B3:	movzx   eax, al
229B6:	mov     [rbp+only_printing], eax
229B9:	mov     eax, [rbp+eindex]
229BC:	mov     [rbp+i], eax
229BF:	nop
229C0:	add     [rbp+i], 1
229C4:	mov     eax, [rbp+i]
229C7:	cmp     eax, [rbp+l]
229CA:	jl      loc_22707
229D0:	mov     rax, [rbp+output]
229D4:	mov     rdx, [rbp+result]
229D8:	mov     [rax], rdx
229DB:	mov     rax, [rbp+string]
229DF:	cmp     rax, [rbp+hstring]
229E3:	jz      short loc_229F1
229E5:	mov     rax, [rbp+string]
229E9:	mov     rdi, rax; pointer
229EC:	call    xfree
229F1:	cmp     [rbp+only_printing], 0
229F5:	jz      short loc_22A0F
229F7:	mov     rax, [rbp+result]
229FB:	mov     rdi, rax; string
229FE:	mov     eax, 0
22A03:	call    add_history
22A08:	mov     eax, 2
22A0D:	jmp     short loc_22A19
22A0F:	cmp     [rbp+modified], 0
22A13:	setnz   al
22A16:	movzx   eax, al
22A19:	mov     rdx, [rbp+var_18]
22A1D:	sub     rdx, fs:28h
22A26:	jz      short loc_22A2D
22A28:	call    ___stack_chk_fail
22A2D:	mov     j, [rbp+var_8]
22A31:	leave
22A32:	retn
22A33:	endbr64
22A37:	push    rbp
22A38:	mov     rbp, rsp
22A3B:	push    i
22A3C:	sub     rsp, 48h
22A40:	mov     [rbp+spec], rdi
22A44:	mov     [rbp+from], rsi
22A48:	mov     [rbp+caller_index], rdx
22A4C:	mov     rax, [rbp+caller_index]
22A50:	mov     ebx, [rax]
22A52:	mov     [rbp+expecting_word_spec], 0
22A59:	mov     [rbp+last], 0
22A60:	mov     eax, [rbp+last]
22A63:	mov     [rbp+first], eax
22A66:	mov     [rbp+result], 0
22A6E:	movsxd  rdx, ebx
22A71:	mov     rax, [rbp+spec]
22A75:	add     rax, rdx
22A78:	movzx   eax, byte ptr [rax]
22A7B:	cmp     al, 3Ah ; ':'
22A7D:	jnz     short loc_22A86
22A7F:	add     ebx, 1
22A82:	add     [rbp+expecting_word_spec], 1
22A86:	movsxd  rdx, ebx
22A89:	mov     rax, [rbp+spec]
22A8D:	add     rax, rdx
22A90:	movzx   eax, byte ptr [rax]
22A93:	cmp     al, 25h ; '%'
22A95:	jnz     short loc_22AF0
22A97:	lea     edx, [i+1]
22A9A:	mov     rax, [rbp+caller_index]
22A9E:	mov     [rax], edx
22AA0:	mov     rax, cs:search_string
22AA7:	test    rax, rax
22AAA:	jz      short loc_22ADE
22AAC:	mov     i, cs:search_string
22AB3:	mov     rax, cs:search_string
22ABA:	mov     rdi, rax; s
22ABD:	call    _strlen
22AC2:	add     rax, 1
22AC6:	mov     rdi, rax; n
22AC9:	call    xmalloc
22ACE:	mov     rsi, i; src
22AD1:	mov     rdi, rax; dest
22AD4:	call    _strcpy
22AD9:	jmp     loc_22DBC
22ADE:	mov     edi, 1; n
22AE3:	call    xmalloc
22AE8:	mov     byte ptr [rax], 0
22AEB:	jmp     loc_22DBC
22AF0:	movsxd  rdx, ebx
22AF3:	mov     rax, [rbp+spec]
22AF7:	add     rax, rdx
22AFA:	movzx   eax, byte ptr [rax]
22AFD:	cmp     al, 2Ah ; '*'
22AFF:	jnz     short loc_22B4B
22B01:	lea     edx, [i+1]
22B04:	mov     rax, [rbp+caller_index]
22B08:	mov     [rax], edx
22B0A:	mov     rax, [rbp+from]
22B0E:	mov     rdx, rax; string
22B11:	mov     esi, 24h ; '$'; last
22B16:	mov     edi, 1; first
22B1B:	mov     eax, 0
22B20:	call    history_arg_extract
22B25:	mov     [rbp+result], rax
22B29:	cmp     [rbp+result], 0
22B2E:	jnz     short loc_22B42
22B30:	mov     edi, 1; n
22B35:	call    xmalloc
22B3A:	mov     byte ptr [rax], 0
22B3D:	jmp     loc_22DBC
22B42:	mov     rax, [rbp+result]
22B46:	jmp     loc_22DBC
22B4B:	movsxd  rdx, ebx
22B4E:	mov     rax, [rbp+spec]
22B52:	add     rax, rdx
22B55:	movzx   eax, byte ptr [rax]
22B58:	cmp     al, 24h ; '$'
22B5A:	jnz     short loc_22B85
22B5C:	lea     edx, [i+1]
22B5F:	mov     rax, [rbp+caller_index]
22B63:	mov     [rax], edx
22B65:	mov     rax, [rbp+from]
22B69:	mov     rdx, rax; string
22B6C:	mov     esi, 24h ; '$'; last
22B71:	mov     edi, 24h ; '$'; first
22B76:	mov     eax, 0
22B7B:	call    history_arg_extract
22B80:	jmp     loc_22DBC
22B85:	movsxd  rdx, ebx
22B88:	mov     rax, [rbp+spec]
22B8C:	add     rax, rdx
22B8F:	movzx   eax, byte ptr [rax]
22B92:	cmp     al, 2Dh ; '-'
22B94:	jnz     short loc_22BA2
22B96:	mov     [rbp+first], 0
22B9D:	jmp     loc_22C48
22BA2:	movsxd  rdx, ebx
22BA5:	mov     rax, [rbp+spec]
22BA9:	add     rax, rdx
22BAC:	movzx   eax, byte ptr [rax]
22BAF:	cmp     al, 5Eh ; '^'
22BB1:	jnz     short loc_22BBF
22BB3:	mov     [rbp+first], 1
22BBA:	jmp     loc_22C48
22BBF:	movsxd  rdx, ebx
22BC2:	mov     rax, [rbp+spec]
22BC6:	add     rax, rdx
22BC9:	movzx   eax, byte ptr [rax]
22BCC:	cmp     al, 2Fh ; '/'
22BCE:	jle     short loc_22C3D
22BD0:	movsxd  rdx, ebx
22BD3:	mov     rax, [rbp+spec]
22BD7:	add     rax, rdx
22BDA:	movzx   eax, byte ptr [rax]
22BDD:	cmp     al, 39h ; '9'
22BDF:	jg      short loc_22C3D
22BE1:	cmp     [rbp+expecting_word_spec], 0
22BE5:	jz      short loc_22C3D
22BE7:	mov     [rbp+first], 0
22BEE:	jmp     short loc_22C19
22BF0:	mov     edx, [rbp+first]
22BF3:	mov     eax, edx
22BF5:	shl     eax, 2
22BF8:	add     eax, edx
22BFA:	add     eax, eax
22BFC:	mov     ecx, eax
22BFE:	movsxd  rdx, ebx
22C01:	mov     rax, [rbp+spec]
22C05:	add     rax, rdx
22C08:	movzx   eax, byte ptr [rax]
22C0B:	movsx   eax, al
22C0E:	sub     eax, 30h ; '0'
22C11:	add     eax, ecx
22C13:	mov     [rbp+first], eax
22C16:	add     ebx, 1
22C19:	movsxd  rdx, ebx
22C1C:	mov     rax, [rbp+spec]
22C20:	add     rax, rdx
22C23:	movzx   eax, byte ptr [rax]
22C26:	cmp     al, 2Fh ; '/'
22C28:	jle     short loc_22C47
22C2A:	movsxd  rdx, ebx
22C2D:	mov     rax, [rbp+spec]
22C31:	add     rax, rdx
22C34:	movzx   eax, byte ptr [rax]
22C37:	cmp     al, 39h ; '9'
22C39:	jle     short loc_22BF0
22C3B:	jmp     short loc_22C47
22C3D:	mov     eax, 0
22C42:	jmp     loc_22DBC
22C47:	nop
22C48:	movsxd  rdx, ebx
22C4B:	mov     rax, [rbp+spec]
22C4F:	add     rax, rdx
22C52:	movzx   eax, byte ptr [rax]
22C55:	cmp     al, 5Eh ; '^'
22C57:	jz      short loc_22C6A
22C59:	movsxd  rdx, ebx
22C5C:	mov     rax, [rbp+spec]
22C60:	add     rax, rdx
22C63:	movzx   eax, byte ptr [rax]
22C66:	cmp     al, 2Ah ; '*'
22C68:	jnz     short loc_22C92
22C6A:	movsxd  rdx, ebx
22C6D:	mov     rax, [rbp+spec]
22C71:	add     rax, rdx
22C74:	movzx   eax, byte ptr [rax]
22C77:	cmp     al, 5Eh ; '^'
22C79:	jnz     short loc_22C82
22C7B:	mov     eax, 1
22C80:	jmp     short loc_22C87
22C82:	mov     eax, 24h ; '$'
22C87:	mov     [rbp+last], eax
22C8A:	add     ebx, 1
22C8D:	jmp     loc_22D72
22C92:	movsxd  rdx, ebx
22C95:	mov     rax, [rbp+spec]
22C99:	add     rax, rdx
22C9C:	movzx   eax, byte ptr [rax]
22C9F:	cmp     al, 2Dh ; '-'
22CA1:	jz      short loc_22CAE
22CA3:	mov     eax, [rbp+first]
22CA6:	mov     [rbp+last], eax
22CA9:	jmp     loc_22D72
22CAE:	add     ebx, 1
22CB1:	movsxd  rdx, ebx
22CB4:	mov     rax, [rbp+spec]
22CB8:	add     rax, rdx
22CBB:	movzx   eax, byte ptr [rax]
22CBE:	cmp     al, 2Fh ; '/'
22CC0:	jle     short loc_22D29
22CC2:	movsxd  rdx, ebx
22CC5:	mov     rax, [rbp+spec]
22CC9:	add     rax, rdx
22CCC:	movzx   eax, byte ptr [rax]
22CCF:	cmp     al, 39h ; '9'
22CD1:	jg      short loc_22D29
22CD3:	mov     [rbp+last], 0
22CDA:	jmp     short loc_22D05
22CDC:	mov     edx, [rbp+last]
22CDF:	mov     eax, edx
22CE1:	shl     eax, 2
22CE4:	add     eax, edx
22CE6:	add     eax, eax
22CE8:	mov     ecx, eax
22CEA:	movsxd  rdx, ebx
22CED:	mov     rax, [rbp+spec]
22CF1:	add     rax, rdx
22CF4:	movzx   eax, byte ptr [rax]
22CF7:	movsx   eax, al
22CFA:	sub     eax, 30h ; '0'
22CFD:	add     eax, ecx
22CFF:	mov     [rbp+last], eax
22D02:	add     ebx, 1
22D05:	movsxd  rdx, ebx
22D08:	mov     rax, [rbp+spec]
22D0C:	add     rax, rdx
22D0F:	movzx   eax, byte ptr [rax]
22D12:	cmp     al, 2Fh ; '/'
22D14:	jle     short loc_22D71
22D16:	movsxd  rdx, ebx
22D19:	mov     rax, [rbp+spec]
22D1D:	add     rax, rdx
22D20:	movzx   eax, byte ptr [rax]
22D23:	cmp     al, 39h ; '9'
22D25:	jle     short loc_22CDC
22D27:	jmp     short loc_22D71
22D29:	movsxd  rdx, ebx
22D2C:	mov     rax, [rbp+spec]
22D30:	add     rax, rdx
22D33:	movzx   eax, byte ptr [rax]
22D36:	cmp     al, 24h ; '$'
22D38:	jnz     short loc_22D46
22D3A:	add     ebx, 1
22D3D:	mov     [rbp+last], 24h ; '$'
22D44:	jmp     short loc_22D72
22D46:	movsxd  rdx, ebx
22D49:	mov     rax, [rbp+spec]
22D4D:	add     rax, rdx
22D50:	movzx   eax, byte ptr [rax]
22D53:	test    al, al
22D55:	jz      short loc_22D68
22D57:	movsxd  rdx, ebx
22D5A:	mov     rax, [rbp+spec]
22D5E:	add     rax, rdx
22D61:	movzx   eax, byte ptr [rax]
22D64:	cmp     al, 3Ah ; ':'
22D66:	jnz     short loc_22D72
22D68:	mov     [rbp+last], 0FFFFFFFFh
22D6F:	jmp     short loc_22D72
22D71:	nop
22D72:	mov     rax, [rbp+caller_index]
22D76:	mov     [rax], ebx
22D78:	mov     eax, [rbp+last]
22D7B:	cmp     eax, [rbp+first]
22D7E:	jge     short loc_22D8C
22D80:	cmp     [rbp+last], 24h ; '$'
22D84:	jz      short loc_22D8C
22D86:	cmp     [rbp+last], 0
22D8A:	jns     short loc_22DA8
22D8C:	mov     rdx, [rbp+from]; string
22D90:	mov     ecx, [rbp+last]
22D93:	mov     eax, [rbp+first]
22D96:	mov     esi, ecx; last
22D98:	mov     edi, eax; first
22D9A:	mov     eax, 0
22D9F:	call    history_arg_extract
22DA4:	mov     [rbp+result], rax
22DA8:	cmp     [rbp+result], 0
22DAD:	jz      short loc_22DB5
22DAF:	mov     rax, [rbp+result]
22DB3:	jmp     short loc_22DBC
22DB5:	lea     rax, error_pointer
22DBC:	mov     i, [rbp+var_8]
22DC0:	leave
22DC1:	retn
22DC2:	endbr64
22DC6:	push    rbp
22DC7:	mov     rbp, rsp
22DCA:	push    len
22DCC:	push    i
22DCD:	sub     rsp, 30h
22DD1:	mov     [rbp+first], edi
22DD4:	mov     [rbp+last], esi
22DD7:	mov     [rbp+string], rdx
22DDB:	mov     [rbp+result], 0
22DE3:	mov     [rbp+size], 0
22DEA:	mov     [rbp+offset], 0
22DF1:	mov     rax, [rbp+string]
22DF5:	mov     rdi, rax; string
22DF8:	mov     eax, 0
22DFD:	call    history_tokenize
22E02:	mov     [rbp+list], rax
22E06:	cmp     [rbp+list], 0
22E0B:	jnz     short loc_22E17
22E0D:	mov     eax, 0
22E12:	jmp     loc_22FCA
22E17:	mov     r12d, 0
22E1D:	jmp     short loc_22E23
22E1F:	add     r12d, 1
22E23:	movsxd  rax, r12d
22E26:	lea     rdx, ds:0[rax*8]
22E2E:	mov     rax, [rbp+list]
22E32:	add     rax, rdx
22E35:	mov     rax, [rax]
22E38:	test    rax, rax
22E3B:	jnz     short loc_22E1F
22E3D:	cmp     [rbp+last], 0
22E41:	jns     short loc_22E4F
22E43:	mov     eax, [rbp+last]
22E46:	add     eax, r12d
22E49:	sub     eax, 1
22E4C:	mov     [rbp+last], eax
22E4F:	cmp     [rbp+first], 0
22E53:	jns     short loc_22E61
22E55:	mov     eax, [rbp+first]
22E58:	add     eax, r12d
22E5B:	sub     eax, 1
22E5E:	mov     [rbp+first], eax
22E61:	cmp     [rbp+last], 24h ; '$'
22E65:	jnz     short loc_22E6F
22E67:	lea     eax, [len-1]
22E6C:	mov     [rbp+last], eax
22E6F:	cmp     [rbp+first], 24h ; '$'
22E73:	jnz     short loc_22E7D
22E75:	lea     eax, [len-1]
22E7A:	mov     [rbp+first], eax
22E7D:	add     [rbp+last], 1
22E81:	cmp     [rbp+first], r12d
22E85:	jg      short loc_22E99
22E87:	cmp     [rbp+last], r12d
22E8B:	jg      short loc_22E99
22E8D:	cmp     [rbp+first], 0
22E91:	js      short loc_22E99
22E93:	cmp     [rbp+last], 0
22E97:	jns     short loc_22EA6
22E99:	mov     [rbp+result], 0
22EA1:	jmp     loc_22F8E
22EA6:	mov     [rbp+size], 0
22EAD:	mov     ebx, [rbp+first]
22EB0:	jmp     short loc_22EDF
22EB2:	movsxd  rax, ebx
22EB5:	lea     rdx, ds:0[rax*8]
22EBD:	mov     rax, [rbp+list]
22EC1:	add     rax, rdx
22EC4:	mov     rax, [rax]
22EC7:	mov     rdi, rax; s
22ECA:	call    _strlen
22ECF:	mov     edx, eax
22ED1:	mov     eax, [rbp+size]
22ED4:	add     eax, edx
22ED6:	add     eax, 1
22ED9:	mov     [rbp+size], eax
22EDC:	add     ebx, 1
22EDF:	cmp     ebx, [rbp+last]
22EE2:	jl      short loc_22EB2
22EE4:	mov     eax, [rbp+size]
22EE7:	add     eax, 1
22EEA:	cdqe
22EEC:	mov     rdi, rax; n
22EEF:	call    xmalloc
22EF4:	mov     [rbp+result], rax
22EF8:	mov     ebx, [rbp+first]
22EFB:	jmp     loc_22F85
22F00:	movsxd  rax, ebx
22F03:	lea     rdx, ds:0[rax*8]
22F0B:	mov     rax, [rbp+list]
22F0F:	add     rax, rdx
22F12:	mov     rax, [rax]
22F15:	mov     edx, [rbp+offset]
22F18:	movsxd  rcx, edx
22F1B:	mov     rdx, [rbp+result]
22F1F:	add     rdx, rcx
22F22:	mov     rsi, rax; src
22F25:	mov     rdi, rdx; dest
22F28:	call    _strcpy
22F2D:	movsxd  rax, ebx
22F30:	lea     rdx, ds:0[rax*8]
22F38:	mov     rax, [rbp+list]
22F3C:	add     rax, rdx
22F3F:	mov     rax, [rax]
22F42:	mov     rdi, rax; s
22F45:	call    _strlen
22F4A:	mov     edx, eax
22F4C:	mov     eax, [rbp+offset]
22F4F:	add     eax, edx
22F51:	mov     [rbp+offset], eax
22F54:	lea     eax, [i+1]
22F57:	cmp     [rbp+last], eax
22F5A:	jle     short loc_22F82
22F5C:	mov     eax, [rbp+offset]
22F5F:	lea     edx, [rax+1]
22F62:	mov     [rbp+offset], edx
22F65:	movsxd  rdx, eax
22F68:	mov     rax, [rbp+result]
22F6C:	add     rax, rdx
22F6F:	mov     byte ptr [rax], 20h ; ' '
22F72:	mov     eax, [rbp+offset]
22F75:	movsxd  rdx, eax
22F78:	mov     rax, [rbp+result]
22F7C:	add     rax, rdx
22F7F:	mov     byte ptr [rax], 0
22F82:	add     ebx, 1
22F85:	cmp     ebx, [rbp+last]
22F88:	jl      loc_22F00
22F8E:	mov     ebx, 0
22F93:	jmp     short loc_22FB5
22F95:	movsxd  rax, ebx
22F98:	lea     rdx, ds:0[rax*8]
22FA0:	mov     rax, [rbp+list]
22FA4:	add     rax, rdx
22FA7:	mov     rax, [rax]
22FAA:	mov     rdi, rax; pointer
22FAD:	call    xfree
22FB2:	add     ebx, 1
22FB5:	cmp     ebx, r12d
22FB8:	jl      short loc_22F95
22FBA:	mov     rax, [rbp+list]
22FBE:	mov     rdi, rax; pointer
22FC1:	call    xfree
22FC6:	mov     rax, [rbp+result]
22FCA:	add     rsp, 30h
22FCE:	pop     i
22FCF:	pop     len
22FD1:	pop     rbp
22FD2:	retn
22FD3:	endbr64
22FD7:	push    rbp
22FD8:	mov     rbp, rsp
22FDB:	push    start
22FDD:	push    r14
22FDF:	push    size
22FE1:	push    result_index
22FE3:	push    i
22FE4:	sub     rsp, 38h
22FE8:	mov     [rbp+string], rdi
22FEC:	mov     [rbp+result], 0
22FF4:	mov     r13d, 0
22FFA:	mov     r12d, r13d
22FFD:	mov     ebx, r12d
23000:	jmp     loc_23442
23005:	mov     [rbp+delimiter], 0
2300C:	jmp     short loc_23011
2300E:	add     ebx, 1
23011:	movsxd  rdx, ebx
23014:	mov     rax, [rbp+string]
23018:	add     rax, rdx
2301B:	movzx   eax, byte ptr [rax]
2301E:	test    al, al
23020:	jz      short loc_23044
23022:	movsxd  rdx, ebx
23025:	mov     rax, [rbp+string]
23029:	add     rax, rdx
2302C:	movzx   eax, byte ptr [rax]
2302F:	cmp     al, 20h ; ' '
23031:	jz      short loc_2300E
23033:	movsxd  rdx, ebx
23036:	mov     rax, [rbp+string]
2303A:	add     rax, rdx
2303D:	movzx   eax, byte ptr [rax]
23040:	cmp     al, 9
23042:	jz      short loc_2300E
23044:	movsxd  rdx, ebx
23047:	mov     rax, [rbp+string]
2304B:	add     rax, rdx
2304E:	movzx   eax, byte ptr [rax]
23051:	test    al, al
23053:	jz      short loc_2306D
23055:	movsxd  rdx, ebx
23058:	mov     rax, [rbp+string]
2305C:	add     rax, rdx
2305F:	movzx   edx, byte ptr [rax]
23062:	movzx   eax, cs:history_comment_char
23069:	cmp     dl, al
2306B:	jnz     short loc_23076
2306D:	mov     rax, [rbp+result]
23071:	jmp     loc_2345B
23076:	mov     r15d, ebx
23079:	movsxd  rdx, ebx
2307C:	mov     rax, [rbp+string]
23080:	add     rax, rdx
23083:	movzx   eax, byte ptr [rax]
23086:	test    al, al
23088:	jz      short loc_230B8
2308A:	movsxd  rdx, ebx
2308D:	mov     rax, [rbp+string]
23091:	add     rax, rdx
23094:	movzx   eax, byte ptr [rax]
23097:	movsx   eax, al
2309A:	mov     esi, eax; c
2309C:	lea     rax, asc_295B0; '()n'
230A3:	mov     rdi, rax; s
230A6:	call    _strchr
230AB:	test    rax, rax
230AE:	jz      short loc_230B8
230B0:	add     ebx, 1
230B3:	jmp     got_token
230B8:	movsxd  rdx, ebx
230BB:	mov     rax, [rbp+string]
230BF:	add     rax, rdx
230C2:	movzx   eax, byte ptr [rax]
230C5:	test    al, al
230C7:	jz      loc_231C6
230CD:	movsxd  rdx, ebx
230D0:	mov     rax, [rbp+string]
230D4:	add     rax, rdx
230D7:	movzx   eax, byte ptr [rax]
230DA:	movsx   eax, al
230DD:	mov     esi, eax; c
230DF:	lea     rax, asc_295B4; '<>;&|$'
230E6:	mov     rdi, rax; s
230E9:	call    _strchr
230EE:	test    rax, rax
230F1:	jz      loc_231C6
230F7:	movsxd  rax, ebx
230FA:	lea     rdx, [rax+1]
230FE:	mov     rax, [rbp+string]
23102:	add     rax, rdx
23105:	movzx   eax, byte ptr [rax]
23108:	movsx   eax, al
2310B:	mov     [rbp+peek], eax
2310E:	movsxd  rdx, ebx
23111:	mov     rax, [rbp+string]
23115:	add     rax, rdx
23118:	movzx   eax, byte ptr [rax]
2311B:	movsx   eax, al
2311E:	cmp     [rbp+peek], eax
23121:	jnz     short loc_2314F
23123:	cmp     [rbp+peek], 24h ; '$'
23127:	jz      short loc_2314F
23129:	cmp     [rbp+peek], 3Ch ; '<'
2312D:	jnz     short loc_23147
2312F:	movsxd  rax, ebx
23132:	lea     rdx, [rax+2]
23136:	mov     rax, [rbp+string]
2313A:	add     rax, rdx
2313D:	movzx   eax, byte ptr [rax]
23140:	cmp     al, 2Dh ; '-'
23142:	jnz     short loc_23147
23144:	add     ebx, 1
23147:	add     ebx, 2
2314A:	jmp     got_token
2314F:	cmp     [rbp+peek], 26h ; '&'
23153:	jnz     short loc_23177
23155:	movsxd  rdx, ebx
23158:	mov     rax, [rbp+string]
2315C:	add     rax, rdx
2315F:	movzx   eax, byte ptr [rax]
23162:	cmp     al, 3Eh ; '>'
23164:	jz      short loc_231A5
23166:	movsxd  rdx, ebx
23169:	mov     rax, [rbp+string]
2316D:	add     rax, rdx
23170:	movzx   eax, byte ptr [rax]
23173:	cmp     al, 3Ch ; '<'
23175:	jz      short loc_231A5
23177:	cmp     [rbp+peek], 3Eh ; '>'
2317B:	jnz     short loc_2318E
2317D:	movsxd  rdx, ebx
23180:	mov     rax, [rbp+string]
23184:	add     rax, rdx
23187:	movzx   eax, byte ptr [rax]
2318A:	cmp     al, 26h ; '&'
2318C:	jz      short loc_231A5
2318E:	cmp     [rbp+peek], 28h ; '('
23192:	jnz     short loc_231AD
23194:	movsxd  rdx, ebx
23197:	mov     rax, [rbp+string]
2319B:	add     rax, rdx
2319E:	movzx   eax, byte ptr [rax]
231A1:	cmp     al, 24h ; '$'
231A3:	jnz     short loc_231AD
231A5:	add     ebx, 2
231A8:	jmp     got_token
231AD:	movsxd  rdx, ebx
231B0:	mov     rax, [rbp+string]
231B4:	add     rax, rdx
231B7:	movzx   eax, byte ptr [rax]
231BA:	cmp     al, 24h ; '$'
231BC:	jz      short loc_231C6
231BE:	add     ebx, 1
231C1:	jmp     got_token
231C6:	movsxd  rdx, ebx
231C9:	mov     rax, [rbp+string]
231CD:	add     rax, rdx
231D0:	movzx   eax, byte ptr [rax]
231D3:	test    al, al
231D5:	jz      loc_23363
231DB:	movsxd  rdx, ebx
231DE:	mov     rax, [rbp+string]
231E2:	add     rax, rdx
231E5:	movzx   eax, byte ptr [rax]
231E8:	movsx   eax, al
231EB:	mov     esi, eax; c
231ED:	lea     rax, asc_295BB; '''`'
231F4:	mov     rdi, rax; s
231F7:	call    _strchr
231FC:	test    rax, rax
231FF:	jz      loc_23363
23205:	mov     eax, ebx
23207:	lea     ebx, [rax+1]
2320A:	movsxd  rdx, eax
2320D:	mov     rax, [rbp+string]
23211:	add     rax, rdx
23214:	movzx   eax, byte ptr [rax]
23217:	movsx   eax, al
2321A:	mov     [rbp+delimiter], eax
2321D:	jmp     loc_23363
23222:	movsxd  rdx, ebx
23225:	mov     rax, [rbp+string]
23229:	add     rax, rdx
2322C:	movzx   eax, byte ptr [rax]
2322F:	cmp     al, 5Ch ; ''
23231:	jnz     short loc_23250
23233:	movsxd  rax, ebx
23236:	lea     rdx, [rax+1]
2323A:	mov     rax, [rbp+string]
2323E:	add     rax, rdx
23241:	movzx   eax, byte ptr [rax]
23244:	cmp     al, 0Ah
23246:	jnz     short loc_23250
23248:	add     ebx, 1
2324B:	jmp     loc_23360
23250:	movsxd  rdx, ebx
23253:	mov     rax, [rbp+string]
23257:	add     rax, rdx
2325A:	movzx   eax, byte ptr [rax]
2325D:	cmp     al, 5Ch ; ''
2325F:	jnz     short loc_232AC
23261:	cmp     [rbp+delimiter], 27h ; '''
23265:	jz      short loc_232AC
23267:	cmp     [rbp+delimiter], 22h ; '''
2326B:	jnz     short loc_232A4
2326D:	movsxd  rdx, ebx
23270:	mov     rax, [rbp+string]
23274:	add     rax, rdx
23277:	movzx   eax, byte ptr [rax]
2327A:	test    al, al
2327C:	jz      short loc_232AC
2327E:	movsxd  rdx, ebx
23281:	mov     rax, [rbp+string]
23285:	add     rax, rdx
23288:	movzx   eax, byte ptr [rax]
2328B:	movsx   eax, al
2328E:	mov     esi, eax; c
23290:	lea     rax, asc_295BF; '`'$'
23297:	mov     rdi, rax; s
2329A:	call    _strchr
2329F:	test    rax, rax
232A2:	jz      short loc_232AC
232A4:	add     ebx, 1
232A7:	jmp     loc_23360
232AC:	cmp     [rbp+delimiter], 0
232B0:	jz      short loc_232D3
232B2:	movsxd  rdx, ebx
232B5:	mov     rax, [rbp+string]
232B9:	add     rax, rdx
232BC:	movzx   eax, byte ptr [rax]
232BF:	movsx   eax, al
232C2:	cmp     [rbp+delimiter], eax
232C5:	jnz     short loc_232D3
232C7:	mov     [rbp+delimiter], 0
232CE:	jmp     loc_23360
232D3:	cmp     [rbp+delimiter], 0
232D7:	jnz     short loc_23310
232D9:	movsxd  rdx, ebx
232DC:	mov     rax, [rbp+string]
232E0:	add     rax, rdx
232E3:	movzx   eax, byte ptr [rax]
232E6:	test    al, al
232E8:	jz      short loc_23310
232EA:	movsxd  rdx, ebx
232ED:	mov     rax, [rbp+string]
232F1:	add     rax, rdx
232F4:	movzx   eax, byte ptr [rax]
232F7:	movsx   eax, al
232FA:	mov     esi, eax; c
232FC:	lea     rax, asc_295C4; ' tn;&()|<>'
23303:	mov     rdi, rax; s
23306:	call    _strchr
2330B:	test    rax, rax
2330E:	jnz     short loc_2337A
23310:	cmp     [rbp+delimiter], 0
23314:	jnz     short loc_23360
23316:	movsxd  rdx, ebx
23319:	mov     rax, [rbp+string]
2331D:	add     rax, rdx
23320:	movzx   eax, byte ptr [rax]
23323:	test    al, al
23325:	jz      short loc_23360
23327:	movsxd  rdx, ebx
2332A:	mov     rax, [rbp+string]
2332E:	add     rax, rdx
23331:	movzx   eax, byte ptr [rax]
23334:	movsx   eax, al
23337:	mov     esi, eax; c
23339:	lea     rax, asc_295BB; '''`'
23340:	mov     rdi, rax; s
23343:	call    _strchr
23348:	test    rax, rax
2334B:	jz      short loc_23360
2334D:	movsxd  rdx, ebx
23350:	mov     rax, [rbp+string]
23354:	add     rax, rdx
23357:	movzx   eax, byte ptr [rax]
2335A:	movsx   eax, al
2335D:	mov     [rbp+delimiter], eax
23360:	add     ebx, 1
23363:	movsxd  rdx, ebx
23366:	mov     rax, [rbp+string]
2336A:	add     rax, rdx
2336D:	movzx   eax, byte ptr [rax]
23370:	test    al, al
23372:	jnz     loc_23222
23378:	jmp     short got_token
2337A:	nop
2337B:	mov     eax, ebx
2337D:	sub     eax, r15d
23380:	mov     [rbp+len], eax
23383:	lea     eax, [result_index+2]
23388:	cmp     r13d, eax
2338B:	jg      short loc_233AF
2338D:	add     r13d, 0Ah
23391:	movsxd  rax, r13d
23394:	lea     rdx, ds:0[rax*8]
2339C:	mov     rax, [rbp+result]
233A0:	mov     rsi, rdx; n
233A3:	mov     rdi, rax; p
233A6:	call    xrealloc
233AB:	mov     [rbp+result], rax
233AF:	mov     eax, [rbp+len]
233B2:	add     eax, 1
233B5:	cdqe
233B7:	movsxd  rdx, r12d
233BA:	lea     rcx, ds:0[rdx*8]
233C2:	mov     rdx, [rbp+result]
233C6:	lea     r14, [rcx+rdx]
233CA:	mov     rdi, rax; n
233CD:	call    xmalloc
233D2:	mov     [r14], rax
233D5:	mov     eax, [rbp+len]
233D8:	movsxd  rdx, eax; n
233DB:	movsxd  rcx, r15d
233DE:	mov     rax, [rbp+string]
233E2:	add     rcx, rax
233E5:	movsxd  rax, r12d
233E8:	lea     rsi, ds:0[rax*8]
233F0:	mov     rax, [rbp+result]
233F4:	add     rax, rsi
233F7:	mov     rax, [rax]
233FA:	mov     rsi, rcx; src
233FD:	mov     rdi, rax; dest
23400:	call    _strncpy
23405:	movsxd  rax, r12d
23408:	lea     rdx, ds:0[rax*8]
23410:	mov     rax, [rbp+result]
23414:	add     rax, rdx
23417:	mov     rdx, [rax]
2341A:	mov     eax, [rbp+len]
2341D:	cdqe
2341F:	add     rax, rdx
23422:	mov     byte ptr [rax], 0
23425:	add     r12d, 1
23429:	movsxd  rax, r12d
2342C:	lea     rdx, ds:0[rax*8]
23434:	mov     rax, [rbp+result]
23438:	add     rax, rdx
2343B:	mov     qword ptr [rax], 0
23442:	movsxd  rdx, ebx
23445:	mov     rax, [rbp+string]
23449:	add     rax, rdx
2344C:	movzx   eax, byte ptr [rax]
2344F:	test    al, al
23451:	jnz     loc_23005
23457:	mov     rax, [rbp+result]
2345B:	add     rsp, 38h
2345F:	pop     i
23460:	pop     result_index
23462:	pop     size
23464:	pop     r14
23466:	pop     start
23468:	pop     rbp
23469:	retn
23470:	endbr64
23474:	push    rbx
23475:	mov     rbx, fsp
23478:	add     rsp, 0FFFFFFFFFFFFFF80h
2347C:	mov     rax, fs:28h
23485:	mov     [rsp+88h+var_10], rax
2348A:	xor     eax, eax
2348C:	mov     disk, rsp; buf
2348F:	call    _statvfs
23494:	test    eax, eax
23496:	js      short loc_234F4
23498:	mov     rax, [rsp+88h+fsd.f_frsize]
2349D:	test    rax, rax
234A0:	cmovz   rax, [rsp+88h+fsd.f_bsize]
234A5:	mov     [fsp], rax
234A8:	mov     rax, [rsp+88h+fsd.f_blocks]
234AD:	mov     [fsp+8], rax
234B1:	mov     rax, [rsp+88h+fsd.f_bfree]
234B6:	mov     [fsp+10h], rax
234BA:	mov     rax, [rsp+88h+fsd.f_bavail]
234BF:	mov     [fsp+18h], rax
234C3:	shr     rax, 3Fh
234C7:	mov     [fsp+20h], al
234CA:	mov     rax, [rsp+88h+fsd.f_files]
234CF:	mov     [fsp+28h], rax
234D3:	mov     rax, [rsp+88h+fsd.f_ffree]
234D8:	mov     [fsp+30h], rax
234DC:	xor     eax, eax
234DE:	mov     rdx, [rsp+88h+var_10]
234E3:	sub     rdx, fs:28h
234EC:	jnz     short loc_234FB
234EE:	sub     rsp, 0FFFFFFFFFFFFFF80h
234F2:	pop     fsp
234F3:	retn
234F4:	mov     eax, 0FFFFFFFFh
234F9:	jmp     short loc_234DE
234FB:	call    ___stack_chk_fail
23500:	endbr64
23504:	push    r15
23506:	push    r14
23508:	push    r13
2350A:	mov     r13, to_block_size_0
2350D:	push    r12
2350F:	mov     r12, from_block_size
23512:	push    rbp
23513:	push    rbx
23514:	mov     rbx, n_0
23517:	sub     rsp, 98h
2351E:	mov     [rsp+0C8h+buf], buf_0
23522:	mov     [rsp+0C8h+to_block_size], to_block_size_0
23527:	mov     [rsp+0C8h+opts], edx
2352B:	mov     rax, fs:28h
23534:	mov     [rsp+0C8h+var_40], rax
2353C:	mov     eax, edx
2353E:	and     edx, 20h
23541:	mov     [rsp+0C8h+var_98], edx
23545:	and     eax, 3
23548:	cmp     edx, 1
2354B:	mov     dword ptr [rsp+0C8h+inexact_style], eax
2354F:	sbb     eax, eax
23551:	and     eax, 0FFFFFFE8h
23554:	add     eax, 400h
23559:	mov     [rsp+0C8h+base], eax
2355D:	call    _localeconv
23562:	mov     r15, [rax]
23565:	mov     r14, rax
23568:	mov     rdi, r15; s
2356B:	call    _strlen
23570:	mov     rcx, [l+10h]
23574:	mov     l, [l+8]
23578:	mov     rbp, rax
2357B:	sub     pointlen, 1
2357F:	cmp     rax, 10h
23583:	mov     eax, 1
23588:	mov     rdi, r14; s
2358B:	mov     [rsp+0C8h+grouping], rcx
23590:	cmovnb  pointlen, rax
23594:	lea     rax, unk_29610
2359B:	cmovnb  r15, rax
2359F:	call    _strlen
235A4:	cmp     rax, 10h
235A8:	lea     rax, asc_298AE+1; ''
235AF:	cmova   r14, rax
235B3:	mov     rax, [rsp+0C8h+buf]
235B7:	add     rax, 288h
235BD:	mov     [rsp+0C8h+psuffix], rax
235C2:	cmp     to_block_size_0, from_block_size
235C5:	ja      loc_23720
235CB:	mov     psuffix_0, from_block_size
235CE:	xor     edx, edx
235D0:	div     to_block_size_0
235D3:	test    rdx, rdx
235D6:	jnz     short loc_235E4
235D8:	mul     n_0
235DB:	mov     rcx, rax
235DE:	jno     loc_23B78
235E4:	mov     qword ptr [rsp+0C8h+damt.value], from_block_size
235E9:	fild    qword ptr [rsp+0C8h+damt.value]
235ED:	test    from_block_size, from_block_size
235F0:	js      loc_23908
235F6:	mov     rax, [rsp+0C8h+to_block_size]
235FB:	mov     qword ptr [rsp+0C8h+damt.value], rax
23600:	fild    qword ptr [rsp+0C8h+damt.value]
23604:	test    rax, rax
23607:	js      loc_238E8
2360D:	mov     qword ptr [rsp+0C8h+damt.value], n_0
23612:	fdivp   st(1), st
23614:	fild    qword ptr [rsp+0C8h+damt.value]
23618:	test    n_0, n_0
2361B:	js      loc_238D0
23621:	fmulp   st(1), st
23623:	test    byte ptr [rsp+0C8h+opts], 10h
23628:	jz      loc_23918
2362E:	fild    [rsp+0C8h+base]
23632:	xor     ebx, ebx
23634:	fld     st
23636:	jmp     short loc_23644
23640:	fstp    st(1)
23642:	fxch    st(2)
23644:	fld     st
23646:	add     ebx, 1
23649:	fmul    st, st(2)
2364B:	fxch    st(3)
2364D:	fcomi   st, st(3)
2364F:	jb      short loc_23660
23651:	cmp     ebx, 8
23654:	jnz     short loc_23640
23656:	fstp    st(2)
23658:	fstp    st(2)
2365A:	jmp     short loc_23664
23660:	fstp    st(2)
23662:	fstp    st(2)
23664:	lea     decimal_point, [rbp+1]
23668:	fdivrp  st(1), st
2366A:	cmp     [rsp+0C8h+var_98], 1
2366F:	adc     rbp, 2
23673:	cmp     dword ptr [rsp+0C8h+inexact_style], 1
23678:	jz      loc_23C50
2367E:	fld     cs:tbyte_29690
23684:	fcomip  st, st(1)
23686:	jbe     loc_23AF0
2368C:	fld     cs:flt_29680
23692:	fxch    st(1)
23694:	fcomi   st, st(1)
23696:	jnb     loc_23DE0
2369C:	fstp    st(1)
2369E:	fnstcw  [rsp+0C8h+var_7A]
236A2:	movzx   eax, [rsp+0C8h+var_7A]
236A7:	or      ah, 0Ch
236AA:	mov     [rsp+0C8h+var_7C], ax
236AF:	fld     st
236B1:	fldcw   [rsp+0C8h+var_7C]
236B5:	fistp   qword ptr [rsp+0C8h+damt.value]
236B9:	fldcw   [rsp+0C8h+var_7A]
236BD:	mov     rax, qword ptr [rsp+0C8h+damt.value]
236C2:	mov     qword ptr [rsp+0C8h+damt.value], rax
236C7:	fild    qword ptr [rsp+0C8h+damt.value]
236CB:	test    rax, rax
236CE:	jns     short loc_236D6
236D0:	fadd    cs:flt_2967C
236D6:	mov     ecx, dword ptr [rsp+0C8h+inexact_style]
236DA:	test    ecx, ecx
236DC:	jnz     loc_23AF8
236E2:	fxch    st(1)
236E4:	fucomi  st, st(1)
236E6:	jp      short loc_236F2
236E8:	jz      loc_23B00
236EE:	fstp    st(1)
236F0:	jmp     short loc_236F8
236F2:	fstp    st(1)
236F4:	nop     dword ptr [rax+00h]
236F8:	add     rax, 1
236FC:	mov     qword ptr [rsp+0C8h+damt.value], rax
23701:	fild    qword ptr [rsp+0C8h+damt.value]
23705:	jns     loc_23AFC
2370B:	fadd    cs:flt_2967C
23711:	fxch    st(1)
23713:	jmp     loc_23B00
23720:	test    from_block_size, from_block_size
23723:	jz      loc_235E4
23729:	mov     psuffix_0, [rsp+0C8h+to_block_size]
2372E:	xor     edx, edx
23730:	div     from_block_size
23733:	mov     r8, rax
23736:	test    rdx, rdx
23739:	jnz     loc_235E4
2373F:	mov     divisor, n_0
23742:	xor     edx, edx
23744:	div     divisor
23747:	mov     rcx, rax
2374A:	lea     rax, [rdx+rdx*4]
2374E:	xor     edx, edx
23750:	add     rax, rax
23753:	div     divisor
23756:	add     rdx, rdx
23759:	mov     edi, eax
2375B:	cmp     divisor, r2
2375E:	jbe     loc_23DC8
23764:	xor     esi, esi
23766:	test    r2, r2
23769:	setnz   sil
2376D:	mov     r10d, [rsp+0C8h+opts]
23772:	and     r10d, 10h
23776:	jz      loc_23B8B
2377C:	mov     r8d, [rsp+0C8h+base]
23781:	xor     ebx, ebx
23783:	mov     r11, r8
23786:	cmp     r8, amt
23789:	jbe     loc_23AAF
2378F:	cmp     dword ptr [rsp+0C8h+inexact_style], 1
23794:	mov     r8, [rsp+0C8h+psuffix]
23799:	jz      loc_23DA0
2379F:	mov     r11d, dword ptr [rsp+0C8h+inexact_style]
237A4:	test    r11d, r11d
237A7:	jnz     short loc_237C8
237A9:	add     esi, edi
237AB:	test    esi, esi
237AD:	jle     short loc_237C8
237AF:	add     amt, 1
237B3:	test    r10d, r10d
237B6:	jz      short loc_237C8
237B8:	mov     eax, [rsp+0C8h+base]
237BC:	cmp     rax, amt
237BF:	jz      loc_23EA2
237C5:	nop     dword ptr [rax]
237C8:	mov     rsi, 0CCCCCCCCCCCCCCCDh
237D2:	mov     rbp, integerlim_0
237D5:	nop     dword ptr [rax]
237D8:	mov     rax, amt
237DB:	sub     p_0, 1
237DF:	mul     rsi
237E2:	mov     rax, amt
237E5:	shr     rdx, 3
237E9:	lea     rdi, [rdx+rdx*4]
237ED:	add     rdi, rdi
237F0:	sub     rax, rdi
237F3:	add     eax, 30h ; '0'
237F6:	mov     [p_0+0], al
237F9:	mov     rax, amt
237FC:	mov     amt, rdx
237FF:	cmp     rax, 9
23803:	ja      short loc_237D8
23805:	test    byte ptr [rsp+0C8h+opts], 4
2380A:	jz      loc_23A0C
23810:	mov     rdi, thousands_sep; s
23813:	mov     r12, integerlim_0
23816:	mov     [rsp+0C8h+integerlim], integerlim_0
2381B:	mov     r13, 0FFFFFFFFFFFFFFFFh
23822:	call    _strlen
23827:	sub     integerlim_0, p_0
2382A:	mov     rsi, p_0
2382D:	mov     ecx, 29h ; ')'
23832:	mov     r15, rax
23835:	lea     rax, [rsp+0C8h+var_78]
2383A:	mov     rdx, r12
2383D:	mov     rdi, rax
23840:	mov     [rsp+0C8h+inexact_style], rax
23845:	call    ___memcpy_chk
2384A:	mov     dword ptr [rsp+0C8h+damt.value], ebx
2384E:	mov     p_0, [rsp+0C8h+integerlim]
23853:	mov     exponent_0, r12
23856:	mov     r12, [rsp+0C8h+grouping]
2385B:	jmp     short loc_2389B
23860:	cmp     r13, rbx
23863:	mov     rax, [rsp+0C8h+inexact_style]
23868:	cmova   r13, rbx
2386C:	sub     rbx, r13
2386F:	lea     rsi, [rax+rbx]; src
23873:	sub     rbp, r13
23876:	mov     rdx, r13; n
23879:	mov     rdi, rbp; dest
2387C:	call    _memcpy
23881:	test    rbx, rbx
23884:	jz      loc_23A80
2388A:	sub     rbp, r15
2388D:	mov     rdx, r15; n
23890:	mov     rsi, thousands_sep; src
23893:	mov     rdi, rbp; dest
23896:	call    _memcpy
2389B:	movzx   eax, byte ptr [r12]
238A0:	test    al, al
238A2:	jz      short loc_23860
238A4:	cmp     al, 7Eh ; '~'
238A6:	ja      loc_23A68
238AC:	cmp     rax, rbx
238AF:	cmova   rax, rbx
238B3:	sub     rbx, rax
238B6:	mov     r13, rax
238B9:	mov     rax, [rsp+0C8h+inexact_style]
238BE:	lea     rsi, [rax+rbx]
238C2:	add     r12, 1
238C6:	jmp     short loc_23873
238D0:	fadd    cs:flt_2967C
238D6:	fmulp   st(1), st
238D8:	test    byte ptr [rsp+0C8h+opts], 10h
238DD:	jnz     loc_2362E
238E3:	jmp     short loc_23918
238E8:	fadd    cs:flt_2967C
238EE:	mov     qword ptr [rsp+0C8h+damt.value], n_0
238F3:	fdivp   st(1), st
238F5:	fild    qword ptr [rsp+0C8h+damt.value]
238F9:	test    n_0, n_0
238FC:	jns     loc_23621
23902:	jmp     short loc_238D0
23908:	fadd    cs:flt_2967C
2390E:	jmp     loc_235F6
23918:	cmp     dword ptr [rsp+0C8h+inexact_style], 1
2391D:	jz      loc_239AA
23923:	fld     cs:tbyte_29690
23929:	fcomip  st, st(1)
2392B:	jbe     short loc_239AA
2392D:	fld     cs:flt_29680
23933:	fxch    st(1)
23935:	fcomi   st, st(1)
23937:	jnb     loc_23E40
2393D:	fstp    st(1)
2393F:	fnstcw  [rsp+0C8h+var_7A]
23943:	movzx   eax, [rsp+0C8h+var_7A]
23948:	or      ah, 0Ch
2394B:	mov     [rsp+0C8h+var_7C], ax
23950:	fld     st
23952:	fldcw   [rsp+0C8h+var_7C]
23956:	fistp   qword ptr [rsp+0C8h+damt.value]
2395A:	fldcw   [rsp+0C8h+var_7A]
2395E:	mov     rax, qword ptr [rsp+0C8h+damt.value]
23963:	mov     qword ptr [rsp+0C8h+damt.value], rax
23968:	fild    qword ptr [rsp+0C8h+damt.value]
2396C:	test    rax, rax
2396F:	jns     short loc_23977
23971:	fadd    cs:flt_2967C
23977:	mov     r8d, dword ptr [rsp+0C8h+inexact_style]
2397C:	test    r8d, r8d
2397F:	jnz     short loc_239A8
23981:	fxch    st(1)
23983:	fucomip st, st(1)
23985:	jp      short loc_2398D
23987:	jz      short loc_239AA
23989:	fstp    st
2398B:	jmp     short loc_2398F
2398D:	fstp    st
2398F:	add     rax, 1
23993:	mov     [rsp+0C8h+inexact_style], rax
23998:	fild    [rsp+0C8h+inexact_style]
2399C:	js      loc_23EC7
239A2:	jmp     short loc_239AA
239A8:	fstp    st(1)
239AA:	sub     rsp, 10h
239AE:	mov     rdx, 0FFFFFFFFFFFFFFFFh
239B5:	mov     esi, 1
239BA:	xor     eax, eax
239BC:	mov     n_0, [rsp+0D8h+buf]
239C1:	lea     rcx, a0lf; '%.0Lf'
239C8:	fstp    [rsp+0D8h+var_D8]
239CB:	mov     rdi, rbx
239CE:	call    ___sprintf_chk
239D3:	mov     rdi, rbx; s
239D6:	mov     ebx, 0FFFFFFFFh
239DB:	call    _strlen
239E0:	pop     rsi
239E1:	pop     rdi
239E2:	mov     rdx, rax; n
239E5:	mov     from_block_size, buflen
239E8:	mov     rbp, [rsp+0C8h+psuffix]
239ED:	mov     rsi, [rsp+0C8h+buf]; src
239F1:	sub     rbp, buflen
239F4:	mov     rdi, p_0; dest
239F7:	call    _memmove
239FC:	lea     r8, [p_0+r12+0]
23A01:	test    byte ptr [rsp+0C8h+opts], 4
23A06:	jnz     loc_23810
23A0C:	test    byte ptr [rsp+0C8h+opts], 80h
23A11:	jz      short loc_23A2F
23A13:	cmp     ebx, 0FFFFFFFFh
23A16:	jz      loc_23B98
23A1C:	mov     eax, [rsp+0C8h+opts]
23A20:	and     eax, 100h
23A25:	mov     esi, eax
23A27:	or      esi, ebx
23A29:	jnz     loc_23CE8
23A2F:	mov     rax, [rsp+0C8h+psuffix]
23A34:	mov     byte ptr [rax], 0
23A37:	mov     rax, [rsp+0C8h+var_40]
23A3F:	sub     rax, fs:28h
23A48:	jnz     loc_240CB
23A4E:	add     rsp, 98h
23A55:	mov     rax, p_0
23A58:	pop     rbx
23A59:	pop     p_0
23A5A:	pop     r12
23A5C:	pop     r13
23A5E:	pop     thousands_sep
23A60:	pop     r15
23A62:	retn
23A68:	mov     r13, rbx
23A6B:	mov     rsi, [rsp+0C8h+inexact_style]
23A70:	xor     ebx, ebx
23A72:	jmp     loc_238C2
23A80:	mov     ebx, dword ptr [rsp+0C8h+damt.value]
23A84:	jmp     short loc_23A0C
23A90:	test    esi, esi
23A92:	setnz   sil
23A96:	movzx   esi, sil
23A9A:	add     ebx, 1
23A9D:	cmp     r8, r9
23AA0:	ja      loc_23EF8
23AA6:	cmp     ebx, 8
23AA9:	jz      loc_2378F
23AAF:	mov     rax, amt
23AB2:	xor     edx, edx
23AB4:	mov     ecx, esi
23AB6:	div     r8
23AB9:	sar     ecx, 1
23ABB:	mov     r9, rax
23ABE:	lea     eax, [rdx+rdx*4]
23AC1:	xor     edx, edx
23AC3:	lea     eax, [tenths+rax*2]
23AC6:	div     r11d
23AC9:	lea     edx, [rcx+rdx*2]
23ACC:	mov     edi, eax
23ACE:	mov     rcx, r9
23AD1:	add     esi, edx
23AD3:	cmp     r11d, edx
23AD6:	ja      short loc_23A90
23AD8:	cmp     r11d, esi
23ADB:	setb    sil
23ADF:	movzx   esi, sil
23AE3:	add     esi, 2
23AE6:	jmp     short loc_23A9A
23AF0:	fld     st
23AF2:	jmp     short loc_23B00
23AF8:	fxch    st(1)
23AFA:	jmp     short loc_23B00
23AFC:	fxch    st(1)
23AFE:	xchg    ax, ax
23B00:	fstp    [rsp+0C8h+damt.value]
23B04:	sub     rsp, 10h
23B08:	mov     esi, 1
23B0D:	xor     eax, eax
23B0F:	mov     from_block_size, [rsp+0D8h+buf]
23B14:	lea     rcx, a1lf; '%.1Lf'
23B1B:	mov     rdx, 0FFFFFFFFFFFFFFFFh
23B22:	mov     rdi, r12
23B25:	fstp    [rsp+0D8h+var_D8]
23B28:	call    ___sprintf_chk
23B2D:	mov     rdi, r12; s
23B30:	call    _strlen
23B35:	mov     rdx, rax
23B38:	pop     buflen
23B39:	pop     rcx
23B3A:	fld     [rsp+0C8h+damt.value]
23B3E:	cmp     buflen, rbp
23B41:	ja      loc_23D00
23B47:	test    byte ptr [rsp+0C8h+opts], 8
23B4C:	jz      short loc_23B68
23B4E:	mov     rax, [rsp+0C8h+buf]
23B52:	cmp     byte ptr [rax+rdx-1], 30h ; '0'
23B57:	jz      loc_23E20
23B5D:	fstp    st
23B5F:	jmp     short loc_23B6A
23B68:	fstp    st
23B6A:	mov     r12, rdx
23B6D:	sub     r12, r15
23B70:	jmp     loc_239E8
23B78:	mov     r10d, [rsp+0C8h+opts]
23B7D:	xor     esi, esi
23B7F:	xor     edi, edi
23B81:	and     r10d, 10h
23B85:	jnz     loc_2377C
23B8B:	mov     ebx, 0FFFFFFFFh
23B90:	jmp     loc_2378F
23B98:	mov     rcx, [rsp+0C8h+to_block_size]
23B9D:	cmp     rcx, 1
23BA1:	jbe     loc_23FAA
23BA7:	mov     edx, [rsp+0C8h+base]
23BAB:	mov     ebx, 1
23BB0:	mov     eax, 1
23BB5:	nop     dword ptr [power]
23BB8:	imul    power, rdx
23BBC:	cmp     rcx, power
23BBF:	jbe     short loc_23BC9
23BC1:	add     ebx, 1
23BC4:	cmp     ebx, 8
23BC7:	jnz     short loc_23BB8
23BC9:	mov     esi, [rsp+0C8h+opts]
23BCD:	mov     eax, esi
23BCF:	and     eax, 100h
23BD4:	and     esi, 40h
23BD7:	jz      short loc_23BF8
23BD9:	mov     rsi, [rsp+0C8h+buf]
23BDD:	lea     rdi, [rsi+289h]
23BE4:	mov     byte ptr [rsi+288h], 20h ; ' '
23BEB:	mov     [rsp+0C8h+psuffix], rdi
23BF0:	test    ebx, ebx
23BF2:	jz      loc_240E5
23BF8:	mov     rsi, [rsp+0C8h+psuffix]
23BFD:	mov     r9d, [rsp+0C8h+var_98]
23C02:	lea     rdx, [rsi+1]
23C06:	test    r9d, r9d
23C09:	jnz     short loc_23C14
23C0B:	cmp     ebx, 1
23C0E:	jz      loc_23EE0
23C14:	movsxd  exponent_0, ebx
23C17:	lea     rcx, power_letter
23C1E:	movzx   ecx, byte ptr [rcx+exponent_0]
23C22:	mov     [rsi], cl
23C24:	test    eax, eax
23C26:	jz      loc_23EEB
23C2C:	mov     r8d, [rsp+0C8h+var_98]
23C31:	test    r8d, r8d
23C34:	jnz     loc_23E10
23C3A:	lea     rax, [psuffix_0+1]
23C3E:	mov     byte ptr [psuffix_0], 42h ; 'B'
23C41:	mov     [rsp+0C8h+psuffix], rax
23C46:	jmp     loc_23A2F
23C50:	sub     rsp, 10h
23C54:	mov     rdx, 0FFFFFFFFFFFFFFFFh
23C5B:	mov     esi, 1
23C60:	xor     eax, eax
23C62:	fld     st
23C64:	fstp    [rsp+0D8h+var_D8]
23C67:	mov     from_block_size, [rsp+0D8h+buf]
23C6C:	lea     rcx, a1lf; '%.1Lf'
23C73:	mov     rdi, r12
23C76:	fstp    [rsp+0D8h+damt.value]
23C7A:	call    ___sprintf_chk
23C7F:	mov     rdi, r12; s
23C82:	call    _strlen
23C87:	pop     rsi
23C88:	pop     rdi
23C89:	fld     [rsp+0C8h+damt.value]
23C8D:	cmp     rax, rbp
23C90:	mov     rdx, rax
23C93:	jbe     loc_23B47
23C99:	fld     cs:flt_29684
23C9F:	fmul    st(1), st
23CA1:	fdivp   st(1), st
23CA3:	sub     rsp, 10h
23CA7:	mov     rdx, 0FFFFFFFFFFFFFFFFh
23CAE:	xor     eax, eax
23CB0:	mov     r15, [rsp+0D8h+buf]
23CB5:	lea     rcx, a0lf; '%.0Lf'
23CBC:	mov     esi, 1
23CC1:	mov     rdi, r15
23CC4:	fstp    [rsp+0D8h+var_D8]
23CC7:	call    ___sprintf_chk
23CCC:	mov     rdi, r15; s
23CCF:	call    _strlen
23CD4:	pop     to_block_size_0
23CD6:	pop     r15
23CD8:	mov     rdx, rax
23CDB:	mov     r12, buflen
23CDE:	jmp     loc_239E8
23CE8:	test    byte ptr [rsp+0C8h+opts], 40h
23CED:	jz      loc_23BF0
23CF3:	jmp     loc_23BD9
23D00:	fld     cs:flt_29684
23D06:	fmul    st(1), st
23D08:	fld     cs:tbyte_29690
23D0E:	fcomip  st, st(2)
23D10:	jbe     short loc_23CA1
23D12:	fld     cs:flt_29680
23D18:	fxch    st(2)
23D1A:	fcomi   st, st(2)
23D1C:	jnb     loc_23E70
23D22:	fstp    st(2)
23D24:	fxch    st(1)
23D26:	fnstcw  [rsp+0C8h+var_7A]
23D2A:	movzx   eax, [rsp+0C8h+var_7A]
23D2F:	or      ah, 0Ch
23D32:	mov     [rsp+0C8h+var_7C], ax
23D37:	fld     st
23D39:	fldcw   [rsp+0C8h+var_7C]
23D3D:	fistp   qword ptr [rsp+0C8h+damt.value]
23D41:	fldcw   [rsp+0C8h+var_7A]
23D45:	mov     rax, qword ptr [rsp+0C8h+damt.value]
23D4A:	mov     qword ptr [rsp+0C8h+damt.value], rax
23D4F:	fild    qword ptr [rsp+0C8h+damt.value]
23D53:	test    rax, rax
23D56:	jns     short loc_23D5E
23D58:	fadd    cs:flt_2967C
23D5E:	mov     edx, dword ptr [rsp+0C8h+inexact_style]
23D62:	test    edx, edx
23D64:	jnz     short loc_23D90
23D66:	fucomi  st, st(1)
23D68:	fstp    st(1)
23D6A:	jp      short loc_23D72
23D6C:	jz      short loc_23D92
23D6E:	fstp    st
23D70:	jmp     short loc_23D74
23D72:	fstp    st
23D74:	add     rax, 1
23D78:	mov     [rsp+0C8h+inexact_style], rax
23D7D:	fild    [rsp+0C8h+inexact_style]
23D81:	js      loc_23ED2
23D87:	jmp     short loc_23D92
23D90:	fstp    st(1)
23D92:	fxch    st(1)
23D94:	jmp     loc_23CA1
23DA0:	mov     rax, amt
23DA3:	movsxd  rounding, esi
23DA6:	and     eax, 1
23DA9:	add     rax, rounding
23DAC:	setnz   al
23DAF:	movzx   eax, al
23DB2:	add     eax, edi
23DB4:	cmp     eax, 5
23DB7:	jg      loc_237AF
23DBD:	jmp     loc_237C8
23DC8:	mov     esi, 2
23DCD:	mov     eax, 3
23DD2:	cmovb   esi, eax
23DD5:	jmp     use_integer_arithmetic
23DE0:	fnstcw  [rsp+0C8h+var_7A]
23DE4:	fsubr   st(1), st
23DE6:	fxch    st(1)
23DE8:	movzx   eax, [rsp+0C8h+var_7A]
23DED:	or      ah, 0Ch
23DF0:	mov     [rsp+0C8h+var_7C], ax
23DF5:	fldcw   [rsp+0C8h+var_7C]
23DF9:	fistp   qword ptr [rsp+0C8h+damt.value]
23DFD:	fldcw   [rsp+0C8h+var_7A]
23E01:	mov     rax, qword ptr [rsp+0C8h+damt.value]
23E06:	btc     rax, 3Fh ; '?'
23E0B:	jmp     loc_236C2
23E10:	mov     byte ptr [rsi+1], 69h ; 'i'
23E14:	lea     psuffix_0, [rsi+2]
23E18:	jmp     loc_23C3A
23E20:	fld     cs:flt_29684
23E26:	cmp     dword ptr [rsp+0C8h+inexact_style], 1
23E2B:	fmul    st(1), st
23E2D:	jnz     loc_23D08
23E33:	jmp     loc_23CA1
23E40:	fnstcw  [rsp+0C8h+var_7A]
23E44:	fsubr   st(1), st
23E46:	fxch    st(1)
23E48:	movzx   eax, [rsp+0C8h+var_7A]
23E4D:	or      ah, 0Ch
23E50:	mov     [rsp+0C8h+var_7C], ax
23E55:	fldcw   [rsp+0C8h+var_7C]
23E59:	fistp   qword ptr [rsp+0C8h+damt.value]
23E5D:	fldcw   [rsp+0C8h+var_7A]
23E61:	mov     rax, qword ptr [rsp+0C8h+damt.value]
23E66:	btc     rax, 3Fh ; '?'
23E6B:	jmp     loc_23963
23E70:	fnstcw  [rsp+0C8h+var_7A]
23E74:	fsubr   st(2), st
23E76:	fxch    st(2)
23E78:	movzx   eax, [rsp+0C8h+var_7A]
23E7D:	or      ah, 0Ch
23E80:	mov     [rsp+0C8h+var_7C], ax
23E85:	fldcw   [rsp+0C8h+var_7C]
23E89:	fistp   qword ptr [rsp+0C8h+damt.value]
23E8D:	fldcw   [rsp+0C8h+var_7A]
23E91:	fxch    st(1)
23E93:	mov     rax, qword ptr [rsp+0C8h+damt.value]
23E98:	btc     rax, 3Fh ; '?'
23E9D:	jmp     loc_23D4A
23EA2:	cmp     ebx, 8
23EA5:	jz      loc_237C8
23EAB:	add     ebx, 1
23EAE:	test    byte ptr [rsp+0C8h+opts], 8
23EB3:	jz      loc_24019
23EB9:	mov     byte ptr [integerlim_0-1], 31h ; '1'
23EBE:	lea     rbp, [integerlim_0-1]
23EC2:	jmp     do_grouping
23EC7:	fadd    cs:flt_2967C
23ECD:	jmp     loc_239AA
23ED2:	fadd    cs:flt_2967C
23ED8:	fxch    st(1)
23EDA:	jmp     loc_23CA1
23EE0:	mov     byte ptr [rsi], 6Bh ; 'k'
23EE3:	test    eax, eax
23EE5:	jnz     loc_23C3A
23EEB:	mov     [rsp+0C8h+psuffix], psuffix_0
23EF0:	jmp     loc_23A2F
23EF8:	cmp     r9, 9
23EFC:	ja      loc_2378F
23F02:	cmp     dword ptr [rsp+0C8h+inexact_style], 1
23F07:	jz      short loc_23F80
23F09:	mov     r12d, dword ptr [rsp+0C8h+inexact_style]
23F0E:	test    r12d, r12d
23F11:	jnz     short loc_23F8C
23F13:	test    esi, esi
23F15:	jz      short loc_23F8C
23F17:	lea     edx, [tenths+1]
23F1A:	cmp     eax, 9
23F1D:	jz      loc_24004
23F23:	lea     eax, [tenths+30h]
23F26:	mov     rdi, [rsp+0C8h+buf]
23F2A:	lea     r8, [rdi+287h]
23F31:	mov     [rdi+287h], al
23F37:	mov     eax, ebp
23F39:	sub     p_0, rbp
23F3C:	cmp     ebp, 8
23F3F:	jnb     short loc_23FB1
23F41:	test    bpl, 4
23F45:	jnz     loc_240B6
23F4B:	test    eax, eax
23F4D:	jz      short loc_23F5A
23F4F:	movzx   edx, byte ptr [decimal_point]
23F53:	mov     [p_0], dl
23F56:	test    al, 2
23F58:	jnz     short loc_23F6E
23F5A:	xor     esi, esi
23F5C:	xor     edi, edi
23F5E:	cmp     dword ptr [rsp+0C8h+inexact_style], 1
23F63:	jnz     loc_2379F
23F69:	jmp     loc_237C8
23F6E:	movzx   edx, word ptr [decimal_point+rax-2]
23F74:	mov     [p_0+rax-2], dx
23F7A:	jmp     short loc_23F5A
23F80:	mov     edx, eax
23F82:	and     edx, 1
23F85:	add     edx, esi
23F87:	cmp     edx, 2
23F8A:	jg      short loc_23F17
23F8C:	test    eax, eax
23F8E:	jnz     loc_240F7
23F94:	mov     r8, [rsp+0C8h+psuffix]
23F99:	test    byte ptr [rsp+0C8h+opts], 8
23F9E:	jnz     short loc_23F5C
23FA0:	mov     eax, 30h ; '0'
23FA5:	jmp     loc_23F26
23FAA:	xor     ebx, ebx
23FAC:	jmp     loc_23A1C
23FB1:	mov     rax, [decimal_point]
23FB4:	lea     rsi, [p_0+8]
23FB8:	mov     rdi, decimal_point
23FBB:	and     rsi, 0FFFFFFFFFFFFFFF8h
23FBF:	mov     [p_0], rax
23FC2:	mov     eax, ebp
23FC4:	mov     rdx, [decimal_point+rax-8]
23FC9:	mov     [p_0+rax-8], rdx
23FCE:	mov     rax, p_0
23FD1:	sub     rax, rsi
23FD4:	sub     rdi, rax
23FD7:	add     eax, ebp
23FD9:	and     eax, 0FFFFFFF8h
23FDC:	cmp     eax, 8
23FDF:	jb      loc_23F5A
23FE5:	and     eax, 0FFFFFFF8h
23FE8:	mov     r9d, eax
23FEB:	xor     eax, eax
23FED:	mov     edx, eax
23FEF:	add     eax, 8
23FF2:	mov     r11, [rdi+rdx]
23FF6:	mov     [rsi+rdx], r11
23FFA:	cmp     eax, r9d
23FFD:	jb      short loc_23FED
23FFF:	jmp     loc_23F5A
24004:	lea     rcx, [r9+1]
24008:	cmp     r9, 9
2400C:	jz      loc_240AC
24012:	xor     esi, esi
24014:	jmp     loc_23F94
24019:	mov     rax, rbp
2401C:	mov     byte ptr [r8-1], 30h ; '0'
24021:	not     rax
24024:	add     r8, rax
24027:	mov     eax, ebp
24029:	cmp     ebp, 8
2402C:	jnb     short loc_24060
2402E:	and     ebp, 4
24031:	jnz     loc_240D0
24037:	test    eax, eax
24039:	jz      loc_23EB9
2403F:	movzx   edx, byte ptr [decimal_point]
24043:	mov     [p_0], dl
24046:	test    al, 2
24048:	jz      loc_23EB9
2404E:	movzx   edx, word ptr [decimal_point+rax-2]
24054:	mov     [p_0+rax-2], dx
2405A:	jmp     loc_23EB9
24060:	mov     rax, [decimal_point]
24063:	lea     amt, [p_0+8]
24067:	and     rcx, 0FFFFFFFFFFFFFFF8h
2406B:	mov     [p_0], rax
2406E:	mov     eax, ebp
24070:	mov     rdx, [decimal_point+rax-8]
24075:	mov     [p_0+rax-8], rdx
2407A:	mov     rax, p_0
2407D:	sub     rax, rcx
24080:	sub     decimal_point, rax
24083:	add     eax, ebp
24085:	and     eax, 0FFFFFFF8h
24088:	cmp     eax, 8
2408B:	jb      loc_23EB9
24091:	and     eax, 0FFFFFFF8h
24094:	xor     edx, edx
24096:	mov     esi, edx
24098:	add     edx, 8
2409B:	mov     rdi, [r15+rsi]
2409F:	mov     [rcx+rsi], rdi
240A3:	cmp     edx, eax
240A5:	jb      short loc_24096
240A7:	jmp     loc_23EB9
240AC:	mov     r8, [rsp+0C8h+psuffix]
240B1:	jmp     loc_23F5A
240B6:	mov     edx, [decimal_point]
240B9:	mov     [p_0], edx
240BC:	mov     edx, [decimal_point+rax-4]
240C1:	mov     [p_0+rax-4], edx
240C6:	jmp     loc_23F5A
240CB:	call    ___stack_chk_fail
240D0:	mov     edx, [decimal_point]
240D3:	mov     [p_0], edx
240D6:	mov     edx, [decimal_point+rax-4]
240DB:	mov     [p_0+rax-4], edx
240E0:	jmp     loc_23EB9
240E5:	mov     rdx, [rsp+0C8h+psuffix]
240EA:	test    eax, eax
240EC:	jnz     loc_23C3A
240F2:	jmp     loc_23A2F
240F7:	add     eax, 30h ; '0'
240FA:	jmp     loc_23F26
24100:	endbr64
24104:	push    r14
24106:	push    r13
24108:	mov     r13, opts
2410B:	push    r12
2410D:	push    rbp
2410E:	mov     rbp, block_size
24111:	push    rbx
24112:	mov     rbx, spec
24115:	sub     rsp, 10h
24119:	mov     rax, fs:28h
24122:	mov     [rsp+38h+var_30], rax
24127:	xor     eax, eax
24129:	test    spec, spec
2412C:	jz      loc_24250
24132:	xor     r12d, r12d
24135:	cmp     byte ptr [rbx], 27h ; '''
24138:	jnz     short loc_24144
2413A:	add     rbx, 1
2413E:	mov     r12d, 4
24144:	lea     r14, block_size_opts
2414B:	mov     ecx, 4; valsize
24150:	lea     rsi, block_size_args; arglist
24157:	mov     rdi, rbx; arg
2415A:	mov     rdx, r14; vallist
2415D:	call    argmatch
24162:	test    eax, eax
24164:	js      short loc_241A0
24166:	cdqe
24168:	mov     qword ptr [block_size+0], 1
24170:	or      r12d, [r14+rax*4]
24174:	xor     eax, eax
24176:	mov     [opts+0], r12d
2417A:	mov     rdx, [rsp+38h+var_30]
2417F:	sub     rdx, fs:28h
24188:	jnz     loc_242DD
2418E:	add     rsp, 10h
24192:	pop     rbx
24193:	pop     block_size
24194:	pop     r12
24196:	pop     opts
24198:	pop     r14
2419A:	retn
241A0:	xor     edx, edx; strtol_base
241A2:	mov     rsi, rsp; ptr
241A5:	lea     r8, valid_suffixes; 'eEgGkKmMpPtTyYzZ0'
241AC:	mov     rcx, block_size; val
241AF:	mov     rdi, rbx; s
241B2:	call    xstrtoumax
241B7:	test    eax, eax
241B9:	jnz     short loc_24208
241BB:	movzx   ecx, byte ptr [rbx]
241BE:	lea     edx, [rcx-30h]
241C1:	mov     rcx, [rsp+38h+var_38]
241C5:	cmp     dl, 9
241C8:	ja      short loc_241E0
241CA:	jmp     short loc_241F7
241D0:	movzx   edi, byte ptr [rbx+1]
241D4:	add     rbx, 1
241D8:	lea     edx, [rdi-30h]
241DB:	cmp     dl, 9
241DE:	jbe     short loc_241F7
241E0:	cmp     rcx, rbx
241E3:	jnz     short loc_241D0
241E5:	cmp     byte ptr [rcx-1], 42h ; 'B'
241E9:	jz      loc_242B0
241EF:	or      r12b, 80h
241F3:	or      r12d, 20h
241F7:	mov     rdx, [block_size+0]
241FB:	mov     [opts+0], r12d
241FF:	jmp     short loc_24214
24208:	mov     dword ptr [opts+0], 0
24210:	mov     rdx, [block_size+0]
24214:	test    rdx, rdx
24217:	jnz     loc_2417A
2421D:	lea     rdi, aPosixlyCorrect; 'POSIXLY_CORRECT'
24224:	call    _getenv
24229:	cmp     rax, 1
2422D:	sbb     rax, rax
24230:	and     eax, 200h
24235:	add     rax, 200h
2423B:	mov     [block_size+0], rax
2423F:	mov     eax, 4
24244:	jmp     loc_2417A
24250:	lea     rdi, aBlockSize; 'BLOCK_SIZE'
24257:	call    _getenv
2425C:	mov     spec, rax
2425F:	test    rax, rax
24262:	jnz     loc_24132
24268:	lea     rdi, aBlocksize; 'BLOCKSIZE'
2426F:	call    _getenv
24274:	mov     rbx, rax
24277:	test    rax, rax
2427A:	jnz     loc_24132
24280:	lea     rdi, aPosixlyCorrect; 'POSIXLY_CORRECT'
24287:	call    _getenv
2428C:	test    rax, rax
2428F:	jz      short loc_242C6
24291:	mov     qword ptr [block_size+0], 200h
24299:	xor     eax, eax
2429B:	mov     dword ptr [opts+0], 0
242A3:	jmp     loc_2417A
242B0:	or      r12d, 180h
242B7:	cmp     byte ptr [rcx-2], 69h ; 'i'
242BB:	jnz     loc_241F7
242C1:	jmp     loc_241F3
242C6:	mov     qword ptr [block_size+0], 400h
242CE:	xor     eax, eax
242D0:	mov     dword ptr [opts+0], 0
242D8:	jmp     loc_2417A
242DD:	call    ___stack_chk_fail
242F0:	endbr64
242F4:	push    r12
242F6:	push    rbp
242F7:	mov     ebp, edi
242F9:	push    rbx
242FA:	mov     rbx, cs:user_alist
24301:	test    tail, tail
24304:	jnz     short loc_24319
24306:	jmp     short loc_24330
24310:	mov     tail, [tail+8]
24314:	test    tail, tail
24317:	jz      short loc_24330
24319:	cmp     [tail], ebp
2431B:	jnz     short loc_24310
2431D:	xor     eax, eax
2431F:	cmp     byte ptr [match+10h], 0
24323:	jz      short loc_24329
24325:	lea     rax, [match+10h]
24329:	pop     match
2432A:	pop     uid
2432B:	pop     r12
2432D:	retn
24330:	mov     edi, ebp; uid
24332:	lea     r12, asc_298AE+1; ''
24339:	call    _getpwuid
2433E:	mov     edi, 11h
24343:	test    pwent, pwent
24346:	jz      short loc_24357
24348:	mov     r12, [pwent]
2434B:	mov     rdi, r12; s
2434E:	call    _strlen
24353:	lea     rdi, [rax+11h]; n
24357:	call    xmalloc
2435C:	mov     rsi, name; src
2435F:	mov     [rax], ebp
24361:	lea     rdi, [rax+10h]; dest
24365:	mov     tail, rax
24368:	call    _strcpy
2436D:	mov     rax, cs:user_alist
24374:	mov     cs:user_alist, match
2437B:	mov     [match+8], rax
2437F:	jmp     short loc_2431D
24390:	endbr64
24394:	push    r12
24396:	push    rbp
24397:	mov     rbp, user
2439A:	push    rbx
2439B:	mov     rbx, cs:user_alist
243A2:	test    tail, tail
243A5:	jz      short loc_243E0
243A7:	movzx   r12d, byte ptr [user]
243AB:	jmp     short loc_243B9
243B0:	mov     tail, [tail+8]
243B4:	test    tail, tail
243B7:	jz      short loc_243E0
243B9:	cmp     [tail+10h], r12b
243BD:	jnz     short loc_243B0
243BF:	lea     rdi, [tail+10h]; s1
243C3:	mov     rsi, user; s2
243C6:	call    _strcmp
243CB:	test    eax, eax
243CD:	jnz     short loc_243B0
243CF:	mov     r12, tail
243D2:	pop     tail
243D3:	pop     user
243D4:	mov     rax, tail
243D7:	pop     tail
243D9:	retn
243E0:	mov     tail, cs:nouser_alist
243E7:	test    tail, tail
243EA:	jz      short loc_24428
243EC:	movzx   r12d, byte ptr [user+0]
243F1:	jmp     short loc_24401
243F8:	mov     tail, [tail+8]
243FC:	test    tail, tail
243FF:	jz      short loc_24428
24401:	cmp     [tail+10h], r12b
24405:	jnz     short loc_243F8
24407:	lea     rdi, [tail+10h]; s1
2440B:	mov     rsi, user; s2
2440E:	call    _strcmp
24413:	test    eax, eax
24415:	jnz     short loc_243F8
24417:	xor     r12d, r12d
2441A:	pop     tail
2441B:	pop     user
2441C:	mov     rax, r12
2441F:	pop     r12
24421:	retn
24428:	mov     rdi, user; name
2442B:	call    _getpwnam
24430:	mov     rdi, user; s
24433:	mov     r12, rax
24436:	call    _strlen
2443B:	lea     rdi, [rax+11h]; n
2443F:	call    xmalloc
24444:	mov     rsi, user; src
24447:	lea     rdi, [rax+10h]; dest
2444B:	mov     tail, rax
2444E:	call    _strcpy
24453:	test    pwent, pwent
24456:	jz      short loc_24480
24458:	mov     eax, [pwent+10h]
2445D:	mov     [tail], eax
2445F:	mov     rax, cs:user_alist
24466:	mov     cs:user_alist, tail
2446D:	mov     [tail+8], rax
24471:	jmp     loc_243CF
24480:	mov     rax, cs:nouser_alist
24487:	mov     cs:nouser_alist, tail
2448E:	mov     [tail+8], rax
24492:	mov     rax, pwent
24495:	pop     tail
24496:	pop     user
24497:	pop     pwent
24499:	retn
244A0:	endbr64
244A4:	push    r12
244A6:	push    rbp
244A7:	mov     ebp, edi
244A9:	push    rbx
244AA:	mov     rbx, cs:group_alist
244B1:	test    tail, tail
244B4:	jnz     short loc_244C9
244B6:	jmp     short loc_244E0
244C0:	mov     tail, [tail+8]
244C4:	test    tail, tail
244C7:	jz      short loc_244E0
244C9:	cmp     [tail], ebp
244CB:	jnz     short loc_244C0
244CD:	xor     eax, eax
244CF:	cmp     byte ptr [match+10h], 0
244D3:	jz      short loc_244D9
244D5:	lea     rax, [match+10h]
244D9:	pop     match
244DA:	pop     gid
244DB:	pop     r12
244DD:	retn
244E0:	mov     edi, ebp; gid
244E2:	lea     r12, asc_298AE+1; ''
244E9:	call    _getgrgid
244EE:	mov     edi, 11h
244F3:	test    grent, grent
244F6:	jz      short loc_24507
244F8:	mov     r12, [grent]
244FB:	mov     rdi, r12; s
244FE:	call    _strlen
24503:	lea     rdi, [rax+11h]; n
24507:	call    xmalloc
2450C:	mov     rsi, name; src
2450F:	mov     [rax], ebp
24511:	lea     rdi, [rax+10h]; dest
24515:	mov     tail, rax
24518:	call    _strcpy
2451D:	mov     rax, cs:group_alist
24524:	mov     cs:group_alist, match
2452B:	mov     [match+8], rax
2452F:	jmp     short loc_244CD
24540:	endbr64
24544:	push    r12
24546:	push    rbp
24547:	mov     rbp, group
2454A:	push    rbx
2454B:	mov     rbx, cs:group_alist
24552:	test    tail, tail
24555:	jz      short loc_24590
24557:	movzx   r12d, byte ptr [group]
2455B:	jmp     short loc_24569
24560:	mov     tail, [tail+8]
24564:	test    tail, tail
24567:	jz      short loc_24590
24569:	cmp     [tail+10h], r12b
2456D:	jnz     short loc_24560
2456F:	lea     rdi, [tail+10h]; s1
24573:	mov     rsi, group; s2
24576:	call    _strcmp
2457B:	test    eax, eax
2457D:	jnz     short loc_24560
2457F:	mov     r12, tail
24582:	pop     tail
24583:	pop     group
24584:	mov     rax, tail
24587:	pop     tail
24589:	retn
24590:	mov     tail, cs:nogroup_alist
24597:	test    tail, tail
2459A:	jz      short loc_245D8
2459C:	movzx   r12d, byte ptr [group+0]
245A1:	jmp     short loc_245B1
245A8:	mov     tail, [tail+8]
245AC:	test    tail, tail
245AF:	jz      short loc_245D8
245B1:	cmp     [tail+10h], r12b
245B5:	jnz     short loc_245A8
245B7:	lea     rdi, [tail+10h]; s1
245BB:	mov     rsi, group; s2
245BE:	call    _strcmp
245C3:	test    eax, eax
245C5:	jnz     short loc_245A8
245C7:	xor     r12d, r12d
245CA:	pop     tail
245CB:	pop     group
245CC:	mov     rax, r12
245CF:	pop     r12
245D1:	retn
245D8:	mov     rdi, group; name
245DB:	call    _getgrnam
245E0:	mov     rdi, group; s
245E3:	mov     r12, rax
245E6:	call    _strlen
245EB:	lea     rdi, [rax+11h]; n
245EF:	call    xmalloc
245F4:	mov     rsi, group; src
245F7:	lea     rdi, [rax+10h]; dest
245FB:	mov     tail, rax
245FE:	call    _strcpy
24603:	test    grent, grent
24606:	jz      short loc_24630
24608:	mov     eax, [grent+10h]
2460D:	mov     [tail], eax
2460F:	mov     rax, cs:group_alist
24616:	mov     cs:group_alist, tail
2461D:	mov     [tail+8], rax
24621:	jmp     loc_2457F
24630:	mov     rax, cs:nogroup_alist
24637:	mov     cs:nogroup_alist, tail
2463E:	mov     [tail+8], rax
24642:	mov     rax, grent
24645:	pop     tail
24646:	pop     group
24647:	pop     grent
24649:	retn
24650:	endbr64
24654:	push    rbx
24655:	mov     rbx, n
24658:	call    _malloc
2465D:	test    p, p
24660:	jnz     short loc_24667
24662:	test    n, n
24665:	jnz     short loc_24669
24667:	pop     n
24668:	retn
24669:	call    xalloc_die
24670:	endbr64
24674:	push    rbx
24675:	mov     rbx, n
24678:	call    _realloc
2467D:	test    p, p
24680:	jnz     short loc_24687
24682:	test    n, n
24685:	jnz     short loc_24689
24687:	pop     n
24688:	retn
24689:	call    xalloc_die
24690:	endbr64
24694:	push    rbx
24695:	mov     rax, pn
24698:	mov     pn, [pn]
2469B:	test    p, p
2469E:	jz      short loc_246D0
246A0:	mov     rdx, 0AAAAAAAAAAAAAAA9h
246AA:	cmp     rsi, rdx
246AD:	ja      short loc_246E1
246AF:	lea     rdx, [rsi+1]
246B3:	shr     rdx, 1
246B6:	add     rsi, rdx; size
246B9:	setnz   bl
246BC:	mov     [pn], rsi
246BF:	call    _realloc
246C4:	test    rax, rax
246C7:	jnz     short loc_246CD
246C9:	test    bl, bl
246CB:	jnz     short loc_246E1
246CD:	pop     rbx
246CE:	retn
246D0:	mov     ebx, 1
246D5:	test    rsi, rsi
246D8:	jnz     short loc_246BC
246DA:	mov     esi, 40h ; '@'
246DF:	jmp     short loc_246BC
246E1:	call    xalloc_die
246F0:	endbr64
246F4:	push    rbx
246F5:	mov     esi, 1; size
246FA:	mov     rbx, s
246FD:	call    _calloc
24702:	test    rax, rax
24705:	jnz     short loc_2470C
24707:	test    s, s
2470A:	jnz     short loc_2470E
2470C:	pop     s
2470D:	retn
2470E:	call    xalloc_die
24720:	endbr64
24724:	sub     rsp, 8
24728:	call    _calloc
2472D:	test    p, p
24730:	jz      short loc_24737
24732:	add     rsp, 8
24736:	retn
24737:	call    xalloc_die
24740:	endbr64
24744:	push    r12
24746:	mov     r12, s
24749:	push    rbp
2474A:	mov     rbp, p
2474D:	mov     p, s; size
24750:	sub     rsp, 8
24754:	call    _malloc
24759:	mov     rdi, rax; dest
2475C:	test    rax, rax
2475F:	jnz     short loc_24766
24761:	test    s, s
24764:	jnz     short loc_24778
24766:	add     rsp, 8
2476A:	mov     rdx, s; n
2476D:	mov     rsi, p; src
24770:	pop     p
24771:	pop     s
24773:	jmp     _memcpy
24778:	call    xalloc_die
24780:	endbr64
24784:	push    r12
24786:	push    rbp
24787:	mov     rbp, string
2478A:	sub     rsp, 8
2478E:	call    _strlen
24793:	lea     r12, [rax+1]
24797:	mov     rdi, r12; size
2479A:	call    _malloc
2479F:	test    rax, rax
247A2:	jz      short loc_247B9
247A4:	add     rsp, 8
247A8:	mov     rdx, r12; n
247AB:	mov     rsi, string; src
247AE:	mov     rdi, rax; dest
247B1:	pop     string
247B2:	pop     r12
247B4:	jmp     _memcpy
247B9:	call    xalloc_die
247C0:	endbr64
247C4:	push    r15
247C6:	mov     r15, ptr
247C9:	push    r14
247CB:	mov     r14, val
247CE:	push    r13
247D0:	mov     r13d, edx
247D3:	push    r12
247D5:	mov     r12, valid_suffixes
247D8:	push    rbp
247D9:	mov     rbp, s
247DC:	push    rbx
247DD:	sub     rsp, 28h
247E1:	movzx   ebx, byte ptr [s]
247E4:	mov     rax, fs:28h
247ED:	mov     [rsp+58h+var_40], rax
247F2:	xor     eax, eax
247F4:	lea     rax, [rsp+58h+t_ptr]
247F9:	test    ptr, ptr
247FC:	cmovz   r15, rax
24800:	call    ___ctype_b_loc
24805:	mov     rcx, [rax]
24808:	mov     rax, q
2480B:	jmp     short loc_24818
24810:	movzx   ebx, byte ptr [q+1]
24814:	add     q, 1
24818:	movzx   edx, bl
2481B:	test    byte ptr [rcx+rdx*2+1], 20h
24820:	jnz     short loc_24810
24822:	cmp     bl, 2Dh ; '-'
24825:	jz      loc_248AA
2482B:	call    ___errno_location
24830:	mov     edx, r13d; base
24833:	mov     rsi, p; endptr
24836:	mov     rdi, s; nptr
24839:	mov     dword ptr [rax], 0
2483F:	mov     [rsp+58h+var_50], rax
24844:	call    _strtoumax
24849:	mov     strtol_base, [p]
2484C:	mov     rcx, [rsp+58h+var_50]
24851:	mov     ch_0, rax
24854:	cmp     r13, s
24857:	jz      short loc_248B8
24859:	mov     eax, [rcx]
2485B:	test    eax, eax
2485D:	jnz     short loc_248A0
2485F:	xor     ebp, ebp
24861:	test    valid_suffixes, valid_suffixes
24864:	jz      short loc_24873
24866:	movzx   edx, byte ptr [r13+0]
2486B:	test    dl, dl
2486D:	jnz     loc_24938
24873:	mov     [val], tmp
24876:	mov     rax, [rsp+58h+var_40]
2487B:	sub     rax, fs:28h
24884:	jnz     loc_24BD9
2488A:	add     rsp, 28h
2488E:	mov     eax, ebp
24890:	pop     rbx
24891:	pop     rbp
24892:	pop     valid_suffixes
24894:	pop     r13
24896:	pop     val
24898:	pop     p
2489A:	retn
248A0:	mov     ebp, 1
248A5:	cmp     eax, 22h ; '''
248A8:	jz      short loc_24861
248AA:	mov     ebp, 4
248AF:	jmp     short loc_24876
248B8:	test    valid_suffixes, valid_suffixes
248BB:	jz      short loc_248AA
248BD:	movzx   edx, byte ptr [s+0]
248C1:	test    dl, dl
248C3:	jz      short loc_248AA
248C5:	movsx   esi, dl; c
248C8:	mov     rdi, valid_suffixes; s
248CB:	mov     byte ptr [rsp+58h+var_50], dl
248CF:	xor     ebp, ebp
248D1:	call    _strchr
248D6:	mov     ebx, 1
248DB:	movzx   edx, byte ptr [rsp+58h+var_50]
248E0:	test    rax, rax
248E3:	jz      short loc_248AA
248E5:	mov     esi, 30h ; '0'; c
248EA:	mov     rdi, valid_suffixes; s
248ED:	mov     byte ptr [rsp+58h+var_50], dl
248F1:	call    _strchr
248F6:	movzx   edx, byte ptr [rsp+58h+var_50]
248FB:	test    rax, rax
248FE:	jz      short loc_2495C
24900:	movzx   eax, byte ptr [r13+1]
24905:	cmp     al, 44h ; 'D'
24907:	jz      short loc_24982
24909:	cmp     al, 69h ; 'i'
2490B:	jz      loc_24BC0
24911:	cmp     al, 42h ; 'B'
24913:	jz      short loc_24982
24915:	sub     edx, 42h ; 'B'; switch 54 cases
24918:	cmp     dl, 35h
2491B:	ja      short def_2492E; jumptable 000000000002492E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
2491D:	lea     rcx, jpt_2492E
24924:	movzx   edx, dl
24927:	movsxd  rax, ds:(jpt_2492E - 296A0h)[rcx+rdx*4]
2492B:	add     rax, rcx
2492E:	jmp     rax; switch jump
24938:	movsx   esi, dl; c
2493B:	mov     rdi, valid_suffixes; s
2493E:	mov     byte ptr [rsp+58h+var_50], dl
24942:	call    _strchr
24947:	movzx   edx, byte ptr [rsp+58h+var_50]
2494C:	test    rax, rax
2494F:	jnz     short loc_248E5
24951:	mov     [val], tmp; jumptable 000000000002492E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
24954:	or      ebp, 2
24957:	jmp     loc_24876
2495C:	mov     esi, 1
24961:	mov     ecx, 400h
24966:	sub     edx, 42h ; 'B'; switch 54 cases
24969:	cmp     dl, 35h
2496C:	ja      short def_2492E; jumptable 000000000002492E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
2496E:	lea     rdi, jpt_2497F
24975:	movzx   edx, dl
24978:	movsxd  rax, ds:(jpt_2497F - 29778h)[rdi+rdx*4]
2497C:	add     rax, rdi
2497F:	jmp     rax; switch jump
24982:	mov     esi, 2
24987:	mov     ecx, 3E8h
2498C:	jmp     short loc_24966
2498E:	movsxd  suffixes, esi; jumptable 000000000002497F cases 84,116
24991:	mov     edi, 4
24996:	xor     r8d, r8d
24999:	nop     dword ptr [rax+00000000h]
249A0:	mov     rax, tmp
249A3:	mul     rcx
249A6:	mov     tmp, rax
249A9:	jo      loc_24BEE
249AF:	sub     edi, 1
249B2:	jnz     short loc_249A0
249B4:	or      ebp, r8d
249B7:	add     rsi, r13
249BA:	mov     eax, ebp
249BC:	or      eax, 2
249BF:	mov     [p], rsi
249C2:	cmp     byte ptr [rsi], 0
249C5:	cmovnz  ebp, eax
249C8:	jmp     loc_24873
249CD:	movsxd  suffixes, esi; jumptable 000000000002497F cases 77,109
249D0:	mov     rax, tmp
249D3:	mul     rcx
249D6:	jo      short loc_249F3
249D8:	mul     rcx
249DB:	jo      short loc_249F3
249DD:	mov     rbx, rax
249E0:	jmp     short loc_249B7
249E2:	movsxd  rdx, ecx; jumptable 000000000002497F cases 75,107
249E5:	movsxd  suffixes, esi
249E8:	mov     rax, tmp
249EB:	mul     rdx
249EE:	mov     tmp, rax
249F1:	jno     short loc_249B7
249F3:	mov     ebp, 1
249F8:	or      rbx, 0FFFFFFFFFFFFFFFFh
249FC:	jmp     short loc_249B7
24A00:	movsxd  suffixes, esi; jumptable 000000000002497F cases 71,103
24A03:	mov     rax, tmp
24A06:	mul     rcx
24A09:	jo      loc_24BDE
24A0F:	mul     rcx
24A12:	jo      loc_24BDE
24A18:	mul     rcx
24A1B:	jo      loc_24BDE
24A21:	mov     rbx, rax
24A24:	xor     eax, eax
24A26:	or      ebp, eax
24A28:	jmp     short loc_249B7
24A2A:	movsxd  suffixes, esi; jumptable 000000000002497F case 80
24A2D:	mov     edi, 5
24A32:	xor     r8d, r8d
24A35:	nop     dword ptr [rax]
24A38:	mov     rax, tmp
24A3B:	mul     rcx
24A3E:	mov     tmp, rax
24A41:	jo      loc_24BFD
24A47:	sub     edi, 1
24A4A:	jnz     short loc_24A38
24A4C:	jmp     loc_249B4
24A51:	movsxd  suffixes, esi; jumptable 000000000002497F case 69
24A54:	mov     edi, 6
24A59:	xor     r8d, r8d
24A5C:	nop     dword ptr [rax+00h]
24A60:	mov     rax, tmp
24A63:	mul     rcx
24A66:	mov     tmp, rax
24A69:	jo      loc_24C0C
24A6F:	sub     edi, 1
24A72:	jnz     short loc_24A60
24A74:	jmp     loc_249B4
24A79:	movsxd  suffixes, esi; jumptable 000000000002497F case 66
24A7C:	mov     rax, tmp
24A7F:	shr     rax, 36h
24A83:	jnz     loc_249F3
24A89:	shl     tmp, 0Ah
24A8D:	jmp     loc_249B7
24A92:	movsxd  suffixes, esi; jumptable 000000000002497F case 89
24A95:	mov     edi, 8
24A9A:	xor     r8d, r8d
24A9D:	nop     dword ptr [rax]
24AA0:	mov     rax, tmp
24AA3:	mul     rcx
24AA6:	mov     tmp, rax
24AA9:	jo      loc_24C1B
24AAF:	sub     edi, 1
24AB2:	jnz     short loc_24AA0
24AB4:	jmp     loc_249B4
24AB9:	movsxd  suffixes, esi; jumptable 000000000002497F case 119
24ABC:	test    tmp, tmp
24ABF:	js      loc_249F3
24AC5:	add     tmp, tmp
24AC8:	jmp     loc_249B7
24ACD:	movsxd  suffixes, esi; jumptable 000000000002497F case 98
24AD0:	mov     rax, tmp
24AD3:	shr     rax, 37h
24AD7:	jnz     loc_249F3
24ADD:	shl     tmp, 9
24AE1:	jmp     loc_249B7
24AE6:	movsxd  suffixes, esi; jumptable 000000000002497F case 90
24AE9:	mov     edi, 7
24AEE:	xor     r8d, r8d
24AF1:	nop     dword ptr [rax+00000000h]
24AF8:	mov     rax, tmp
24AFB:	mul     rcx
24AFE:	mov     tmp, rax
24B01:	jo      loc_24C2A
24B07:	sub     edi, 1
24B0A:	jnz     short loc_24AF8
24B0C:	jmp     loc_249B4
24B11:	movsxd  suffixes, esi; jumptable 000000000002497F case 99
24B14:	jmp     loc_249B7
24B19:	mov     esi, 1; jumptable 000000000002492E cases 84,116
24B1E:	mov     ecx, 400h
24B23:	jmp     loc_24991
24B28:	mov     esi, 1; jumptable 000000000002492E cases 77,109
24B2D:	mov     ecx, 400h
24B32:	jmp     loc_249D0
24B37:	mov     esi, 1; jumptable 000000000002492E cases 75,107
24B3C:	mov     edx, 400h
24B41:	jmp     loc_249E8
24B46:	mov     esi, 1; jumptable 000000000002492E cases 71,103
24B4B:	mov     ecx, 400h
24B50:	jmp     loc_24A03
24B55:	mov     esi, 1; jumptable 000000000002492E case 89
24B5A:	mov     ecx, 400h
24B5F:	jmp     loc_24A95
24B64:	mov     esi, 1; jumptable 000000000002492E case 80
24B69:	mov     ecx, 400h
24B6E:	jmp     loc_24A2D
24B73:	mov     esi, 1; jumptable 000000000002492E case 69
24B78:	mov     ecx, 400h
24B7D:	jmp     loc_24A54
24B82:	mov     esi, 1; jumptable 000000000002492E case 66
24B87:	jmp     loc_24A7C
24B8C:	mov     esi, 1; jumptable 000000000002492E case 119
24B91:	jmp     loc_24ABC
24B96:	mov     esi, 1; jumptable 000000000002492E case 99
24B9B:	jmp     loc_249B7
24BA0:	mov     esi, 1; jumptable 000000000002492E case 98
24BA5:	jmp     loc_24AD0
24BAA:	mov     esi, 1; jumptable 000000000002492E case 90
24BAF:	mov     ecx, 400h
24BB4:	jmp     loc_24AE9
24BC0:	xor     esi, esi
24BC2:	cmp     byte ptr [r13+2], 42h ; 'B'
24BC7:	mov     ecx, 400h
24BCC:	setz    sil
24BD0:	lea     esi, [rsi+rsi+1]
24BD4:	jmp     loc_24966
24BD9:	call    ___stack_chk_fail
24BDE:	mov     eax, 1
24BE3:	or      rbx, 0FFFFFFFFFFFFFFFFh
24BE7:	or      ebp, eax
24BE9:	jmp     loc_249B7
24BEE:	mov     r8d, 1
24BF4:	or      rbx, 0FFFFFFFFFFFFFFFFh
24BF8:	jmp     loc_249AF
24BFD:	mov     r8d, 1
24C03:	or      rbx, 0FFFFFFFFFFFFFFFFh
24C07:	jmp     loc_24A47
24C0C:	mov     r8d, 1
24C12:	or      rbx, 0FFFFFFFFFFFFFFFFh
24C16:	jmp     loc_24A6F
24C1B:	mov     r8d, 1
24C21:	or      rbx, 0FFFFFFFFFFFFFFFFh
24C25:	jmp     loc_24AAF
24C2A:	mov     r8d, 1
24C30:	or      rbx, 0FFFFFFFFFFFFFFFFh
24C34:	jmp     loc_24B07
24C40:	endbr64
24C44:	push    rax
24C45:	pop     rax
24C46:	sub     rsp, 8
24C4A:	mov     edi, cs:exit_failure; status
24C50:	call    _exit
24C60:	endbr64
24C64:	push    r15
24C66:	push    r14
24C68:	mov     r14, arg
24C6B:	push    r13
24C6D:	mov     r13, valsize
24C70:	push    r12
24C72:	push    rbp
24C73:	mov     rbp, vallist_0
24C76:	push    rbx
24C77:	mov     rbx, arglist_0
24C7A:	sub     rsp, 28h
24C7E:	mov     [rsp+58h+arglist], arglist_0
24C83:	mov     [rsp+58h+vallist], vallist_0
24C88:	call    _strlen
24C8D:	mov     r15, [arglist_0]
24C90:	test    r15, r15
24C93:	jz      loc_24D66
24C99:	mov     [rsp+58h+ambiguous], 0
24C9E:	mov     r12, arglen
24CA1:	xor     ebx, ebx
24CA3:	mov     [rsp+58h+matchind], 0FFFFFFFFFFFFFFFFh
24CAB:	jmp     short loc_24CF8
24CB0:	mov     rax, [rsp+58h+vallist]
24CB5:	test    rax, rax
24CB8:	jz      short loc_24D28
24CBA:	mov     rdi, [rsp+58h+matchind]
24CBE:	mov     rdx, valsize; n
24CC1:	mov     rsi, rbp; s2
24CC4:	imul    rdi, valsize
24CC8:	add     rdi, rax; s1
24CCB:	call    _memcmp
24CD0:	mov     ecx, 1
24CD5:	test    eax, eax
24CD7:	movzx   eax, [rsp+58h+ambiguous]
24CDC:	cmovnz  eax, ecx
24CDF:	mov     [rsp+58h+ambiguous], al
24CE3:	mov     rax, [rsp+58h+arglist]
24CE8:	add     i, 1
24CEC:	add     rbp, valsize
24CEF:	mov     r15, [rax+i*8]
24CF3:	test    r15, r15
24CF6:	jz      short loc_24D30
24CF8:	mov     rdx, arglen; n
24CFB:	mov     rsi, arg; s2
24CFE:	mov     rdi, r15; s1
24D01:	call    _strncmp
24D06:	test    eax, eax
24D08:	jnz     short loc_24CE3
24D0A:	mov     rdi, r15; s
24D0D:	call    _strlen
24D12:	cmp     rax, arglen
24D15:	jz      short loc_24D60
24D17:	cmp     [rsp+58h+matchind], 0FFFFFFFFFFFFFFFFh
24D1C:	jnz     short loc_24CB0
24D1E:	mov     [rsp+58h+matchind], i
24D22:	jmp     short loc_24CE3
24D28:	mov     [rsp+58h+ambiguous], 1
24D2D:	jmp     short loc_24CE3
24D30:	cmp     [rsp+58h+ambiguous], 0
24D35:	mov     rax, 0FFFFFFFFFFFFFFFEh
24D3C:	cmovz   rax, [rsp+58h+matchind]
24D41:	mov     [rsp+58h+matchind], rax
24D45:	mov     rax, [rsp+58h+matchind]
24D49:	add     rsp, 28h
24D4D:	pop     rbx
24D4E:	pop     rbp
24D4F:	pop     r12
24D51:	pop     valsize
24D53:	pop     arg
24D55:	pop     r15
24D57:	retn
24D60:	mov     [rsp+58h+matchind], i
24D64:	jmp     short loc_24D45
24D66:	mov     [rsp+58h+matchind], 0FFFFFFFFFFFFFFFFh
24D6E:	jmp     short loc_24D45
24D70:	endbr64
24D74:	push    r13
24D76:	cmp     problem, 0FFFFFFFFFFFFFFFFh
24D7A:	mov     r13, value
24D7D:	lea     rax, aAmbiguousArgum; 'ambiguous argument %s for %s'
24D84:	push    r12
24D86:	mov     value, context; name
24D89:	lea     r12, aInvalidArgumen; 'invalid argument %s for %s'
24D90:	mov     edi, 1; n
24D95:	push    rbx
24D96:	cmovnz  r12, rax
24D9A:	call    quote_n
24D9F:	mov     rdx, value; arg
24DA2:	mov     esi, 5; s
24DA7:	xor     edi, edi; n
24DA9:	mov     rbx, rax
24DAC:	call    quotearg_n_style
24DB1:	mov     r8, rbx
24DB4:	mov     rdx, format; format
24DB7:	pop     rbx
24DB8:	mov     rcx, rax
24DBB:	pop     format
24DBD:	xor     esi, esi; errnum
24DBF:	xor     edi, edi; status
24DC1:	xor     eax, eax
24DC3:	pop     value
24DC5:	jmp     _error
24DD0:	endbr64
24DD4:	push    r15
24DD6:	push    r14
24DD8:	lea     r14, aS_8; 'n  - `%s''
24DDF:	push    r13
24DE1:	xor     r13d, r13d
24DE4:	push    r12
24DE6:	mov     r12, valsize
24DE9:	mov     edx, 14h; n
24DEE:	push    rbp
24DEF:	mov     rbp, vallist
24DF2:	mov     esi, 1; size
24DF7:	push    rbx
24DF8:	mov     rbx, arglist_0
24DFB:	sub     rsp, 18h
24DFF:	mov     rcx, cs:stderr@GLIBC_2_2_5; s
24E06:	mov     [rsp+48h+arglist], arglist_0
24E0B:	lea     arglist_0, aValidArguments; 'Valid arguments are:'
24E12:	call    _fwrite
24E17:	mov     r15, [arglist_0]
24E1A:	xor     ebx, ebx
24E1C:	test    r15, r15
24E1F:	jnz     short loc_24E55
24E21:	jmp     short loc_24EA0
24E28:	mov     rcx, r15
24E2B:	mov     rdx, r14
24E2E:	mov     esi, 1
24E33:	mov     rdi, r8
24E36:	xor     eax, eax
24E38:	mov     r13, rbp
24E3B:	call    ___fprintf_chk
24E40:	mov     rax, [rsp+48h+arglist]
24E45:	add     rbx, 1
24E49:	add     rbp, valsize
24E4C:	mov     r15, [rax+i*8]
24E50:	test    r15, r15
24E53:	jz      short loc_24EA0
24E55:	mov     r8, cs:stderr@GLIBC_2_2_5
24E5C:	test    i, i
24E5F:	jz      short loc_24E28
24E61:	mov     rdx, valsize; n
24E64:	mov     rsi, rbp; s2
24E67:	mov     rdi, last_val; s1
24E6A:	mov     [rsp+48h+var_48], r8
24E6E:	call    _memcmp
24E73:	mov     r8, [rsp+48h+var_48]
24E77:	test    eax, eax
24E79:	jnz     short loc_24E28
24E7B:	mov     rcx, r15
24E7E:	lea     rdx, aS_9; ', `%s''
24E85:	mov     rdi, r8
24E88:	xor     eax, eax
24E8A:	mov     esi, 1
24E8F:	call    ___fprintf_chk
24E94:	jmp     short loc_24E40
24EA0:	mov     rsi, cs:stderr@GLIBC_2_2_5; stream
24EA7:	add     rsp, 18h
24EAB:	mov     edi, 0Ah; c
24EB0:	pop     rbx
24EB1:	pop     rbp
24EB2:	pop     valsize
24EB4:	pop     r13
24EB6:	pop     r14
24EB8:	pop     r15
24EBA:	jmp     _putc
24EC0:	endbr64
24EC4:	push    r15
24EC6:	mov     r15, arg
24EC9:	push    r14
24ECB:	mov     r14, valsize
24ECE:	push    r13
24ED0:	mov     r13, context
24ED3:	mov     context, r15; arg
24ED6:	push    r12
24ED8:	mov     r12, vallist
24EDB:	mov     vallist, valsize; valsize
24EDE:	push    rbp
24EDF:	mov     rbp, arglist
24EE2:	mov     arglist, vallist; vallist
24EE5:	push    rbx
24EE6:	mov     arg, arglist; arglist
24EE9:	mov     rbx, exit_fn
24EEC:	sub     rsp, 18h
24EF0:	call    argmatch
24EF5:	test    res, res
24EF8:	js      short loc_24F10
24EFA:	add     rsp, 18h
24EFE:	pop     exit_fn
24EFF:	pop     arglist
24F00:	pop     vallist
24F02:	pop     r13
24F04:	pop     valsize
24F06:	pop     arg
24F08:	retn
24F10:	cmp     res, 0FFFFFFFFFFFFFFFFh
24F14:	lea     r9, aInvalidArgumen; 'invalid argument %s for %s'
24F1B:	mov     rsi, context; name
24F1E:	mov     edi, 1; n
24F23:	lea     res, aAmbiguousArgum; 'ambiguous argument %s for %s'
24F2A:	cmovnz  r9, rax
24F2E:	mov     [rsp+48h+format], r9
24F33:	call    quote_n
24F38:	mov     rdx, arg; arg
24F3B:	mov     esi, 5; s
24F40:	xor     edi, edi; n
24F42:	mov     context, rax
24F45:	call    quotearg_n_style
24F4A:	mov     rdx, [rsp+48h+format]; format
24F4F:	mov     r8, r13
24F52:	xor     esi, esi; errnum
24F54:	mov     rcx, rax
24F57:	xor     edi, edi; status
24F59:	xor     eax, eax
24F5B:	call    _error
24F60:	mov     rdx, valsize; valsize
24F63:	mov     rsi, vallist; vallist
24F66:	mov     rdi, arglist; arglist
24F69:	call    argmatch_valid
24F6E:	call    exit_fn
24F70:	mov     rax, 0FFFFFFFFFFFFFFFFh
24F77:	jmp     short loc_24EFA
24F80:	endbr64
24F84:	push    r14
24F86:	push    r13
24F88:	push    r12
24F8A:	push    rbp
24F8B:	push    rbx
24F8C:	mov     r14, [arglist]
24F8F:	test    r14, r14
24F92:	jz      short loc_24FC9
24F94:	mov     r12, value
24F97:	mov     r13, valsize
24F9A:	lea     rbx, [arglist+8]
24F9E:	mov     rbp, vallist
24FA1:	jmp     short loc_24FB7
24FA8:	mov     r14, [rbx]
24FAB:	add     rbp, valsize
24FAE:	add     rbx, 8
24FB2:	test    r14, r14
24FB5:	jz      short loc_24FC9
24FB7:	mov     rdx, valsize; n
24FBA:	mov     rsi, rbp; s2
24FBD:	mov     rdi, value; s1
24FC0:	call    _memcmp
24FC5:	test    eax, eax
24FC7:	jnz     short loc_24FA8
24FC9:	pop     rbx
24FCA:	mov     rax, r14
24FCD:	pop     rbp
24FCE:	pop     r12
24FD0:	pop     r13
24FD2:	pop     r14
24FD4:	retn
24FE0:	endbr64
24FE4:	mov     rdx, name; arg
24FE7:	mov     esi, 5; s
24FEC:	jmp     quotearg_n_style
25000:	endbr64
25004:	mov     rdx, name; arg
25007:	mov     esi, 5; s
2500C:	xor     edi, edi; n
2500E:	jmp     quotearg_n_style
25020:	push    r15
25022:	push    r14
25024:	push    r13
25026:	mov     r13, argsize
25029:	push    r12
2502B:	push    rbp
2502C:	push    rbx
2502D:	mov     ebx, r8d
25030:	sub     rsp, 88h
25037:	mov     [rsp+0B8h+buffer], buffer_0
2503C:	mov     [rsp+0B8h+bytes], buffersize_0
25041:	mov     [rsp+0B8h+arg], arg_0
25046:	mov     dword ptr [rsp+0B8h+var_A8], r8d
2504B:	mov     [rsp+0B8h+o], o_0
25050:	mov     rax, fs:28h
25059:	mov     [rsp+0B8h+var_40], rax
2505E:	xor     eax, eax
25060:	call    ___ctype_get_mb_cur_max
25065:	cmp     ebx, 4
25068:	mov     r11, [rsp+0B8h+arg]
2506D:	mov     r10, [rsp+0B8h+bytes]
25072:	mov     [rsp+0B8h+var_90], rax
25077:	jnz     loc_25812
2507D:	mov     [rsp+0B8h+arg], 0
25086:	mov     r8d, 1
2508C:	xor     r9d, r9d
2508F:	nop
25090:	mov     rbx, quote_string_len
25093:	xor     r12d, r12d
25096:	nop     word ptr [rax+rax+00000000h]
250A0:	cmp     argsize, r12
250A3:	setnz   al
250A6:	cmp     argsize, 0FFFFFFFFFFFFFFFFh
250AA:	jnz     short loc_250B4
250AC:	cmp     byte ptr [r11+r12], 0
250B1:	setnz   al
250B4:	test    al, al
250B6:	jz      loc_2578E
250BC:	lea     rsi, [r11+r12]
250C0:	movzx   edx, byte ptr [rsi]
250C3:	test    r9, r9
250C6:	jz      loc_25490
250CC:	test    r8b, r8b
250CF:	jz      loc_25490
250D5:	lea     r14, [r12+1]
250DA:	mov     r15, r14
250DD:	cmp     r14, argsize
250E0:	ja      short loc_25100
250E2:	mov     rax, [rsp+0B8h+arg]
250E7:	cmp     [rax], dl
250E9:	jnz     short loc_25100
250EB:	cmp     len, r10
250EE:	jnb     short loc_250FC
250F0:	mov     rax, [rsp+0B8h+buffer]
250F5:	mov     byte ptr [rax+len], 5Ch ; ''
250F9:	movzx   edx, byte ptr [rsi]
250FC:	add     rbx, 1
25100:	mov     ebp, edx
25102:	cmp     dl, 3Fh ; '?'
25105:	jg      loc_25438
2510B:	test    dl, dl
2510D:	js      def_2512D; jumptable 000000000002512D default case, cases 1-6,14-31
25113:	cmp     dl, 3Fh; switch 64 cases
25116:	ja      def_2512D; jumptable 000000000002512D default case, cases 1-6,14-31
2511C:	lea     rcx, jpt_2512D
25123:	movzx   eax, dl
25126:	movsxd  rax, ds:(jpt_2512D - 298E0h)[rcx+rax*4]
2512A:	add     rax, rcx
2512D:	jmp     rax; switch jump
25130:	mov     eax, dword ptr [rsp+0B8h+var_A8]; jumptable 000000000002512D case 39
25134:	cmp     eax, 1
25137:	jz      loc_25360
2513D:	cmp     eax, 2
25140:	jnz     short loc_2517A
25142:	cmp     r10, len
25145:	jbe     short loc_25150
25147:	mov     rax, [rsp+0B8h+buffer]
2514C:	mov     byte ptr [rax+len], 27h ; '''
25150:	lea     rax, [len+1]
25154:	cmp     r10, len
25157:	jbe     short loc_25163
25159:	mov     len, [rsp+0B8h+buffer]
2515E:	mov     byte ptr [rax+rbx+1], 5Ch ; ''
25163:	lea     rax, [rbx+2]
25167:	cmp     r10, len
2516A:	jbe     short loc_25176
2516C:	mov     len, [rsp+0B8h+buffer]
25171:	mov     byte ptr [rax+rbx+2], 27h ; '''
25176:	add     rbx, 3
2517A:	lea     r15, [r12+1]
2517F:	mov     ebp, 27h ; '''
25184:	test    r8b, r8b; jumptable 000000000002512D cases 37,43-58
25187:	jz      loc_259AF
2518D:	nop     dword ptr [rax]
25190:	mov     edx, ebp
25192:	mov     eax, 1
25197:	mov     ecx, ebp
25199:	mov     r12, r15
2519C:	shr     dl, 5
2519F:	shl     eax, cl
251A1:	movzx   edx, dl
251A4:	mov     rsi, [rsp+0B8h+o]
251A9:	and     eax, [rsi+rdx*4+4]
251AD:	jz      short store_c
251AF:	cmp     len, r10
251B2:	jnb     short loc_251BD
251B4:	mov     rax, [rsp+0B8h+buffer]
251B9:	mov     byte ptr [rax+len], 5Ch ; ''
251BD:	add     rbx, 1
251C1:	cmp     len, r10
251C4:	jnb     short loc_251CF
251C6:	mov     rax, [rsp+0B8h+buffer]
251CB:	mov     [rax+len], bpl
251CF:	add     rbx, 1
251D3:	jmp     loc_250A0
251D8:	cmp     dl, 7Bh ; '{'
251DB:	jz      loc_2570C
251E1:	cmp     dl, 7Ch ; '|'
251E4:	jnz     def_254B5; jumptable 00000000000254B5 default case, cases 1-6,14-31
251EA:	cmp     dword ptr [rsp+0B8h+var_A8], 1; jumptable 000000000002512D cases 32-34,36,38,40-42,59-62
251EF:	jz      loc_25360
251F5:	lea     r15, [r12+1]; jumptable 00000000000254B5 cases 37,43-58
251FA:	jmp     short loc_25184; jumptable 000000000002512D cases 37,43-58
25200:	cmp     dl, 7Dh ; '}'
25203:	jz      loc_2570C
25209:	jle     loc_25707
2520F:	cmp     dl, 7Eh ; '~'
25212:	jz      loc_25345
25218:	nop     dword ptr [rax+rax+00000000h]
25220:	cmp     [rsp+0B8h+var_90], 1; jumptable 000000000002512D default case, cases 1-6,14-31
25226:	mov     byte ptr [rsp+0B8h+bytes], dl
2522A:	jnz     loc_254F8
25230:	mov     [rsp+0B8h+var_68], r11
25235:	mov     [rsp+0B8h+var_70], r10
2523A:	mov     byte ptr [rsp+0B8h+s], r8b
2523F:	mov     [rsp+0B8h+p], r9
25244:	call    ___ctype_b_loc
25249:	movzx   edx, byte ptr [rsp+0B8h+bytes]
2524E:	movzx   r8d, byte ptr [rsp+0B8h+s]
25254:	mov     ecx, 1
25259:	mov     rax, [rax]
2525C:	mov     r9, [rsp+0B8h+p]
25261:	mov     r10, [rsp+0B8h+var_70]
25266:	mov     r11, [rsp+0B8h+var_68]
2526B:	movzx   eax, word ptr [rax+rdx*2]
2526F:	shr     ax, 0Eh
25273:	xor     eax, 1
25276:	and     eax, r8d
25279:	test    al, al
2527B:	jz      loc_25184; jumptable 000000000002512D cases 37,43-58
25281:	mov     eax, r8d
25284:	mov     rsi, [rsp+0B8h+buffer]
25289:	add     rcx, r12
2528C:	jmp     short loc_252A6
25290:	cmp     len, r10
25293:	jnb     short loc_25299
25295:	mov     [rsi+len], bpl
25299:	movzx   ebp, byte ptr [r11+r14]
2529E:	add     rbx, 1
252A2:	add     r14, 1
252A6:	test    al, al
252A8:	jz      short loc_252EA
252AA:	cmp     len, r10
252AD:	jnb     short loc_252B3
252AF:	mov     byte ptr [rsi+len], 5Ch ; ''
252B3:	lea     rdx, [len+1]
252B7:	cmp     r10, len
252BA:	jbe     short loc_252C8
252BC:	mov     edx, ebp
252BE:	shr     dl, 6
252C1:	add     edx, 30h ; '0'
252C4:	mov     [rsi+rbx+1], dl
252C8:	lea     rdx, [rbx+2]
252CC:	cmp     r10, len
252CF:	jbe     short loc_252E0
252D1:	mov     edx, ebp
252D3:	shr     dl, 3
252D6:	and     edx, 7
252D9:	add     edx, 30h ; '0'
252DC:	mov     [rsi+rbx+2], dl
252E0:	and     ebp, 7
252E3:	add     rbx, 3
252E7:	add     ebp, 30h ; '0'
252EA:	mov     r12, i
252ED:	cmp     i, ilim
252F0:	jb      short loc_25290
252F2:	jmp     store_c
25300:	mov     eax, dword ptr [rsp+0B8h+var_A8]; jumptable 000000000002512D case 63
25304:	cmp     eax, 1
25307:	jz      short loc_25360
25309:	cmp     eax, 3
2530C:	jz      loc_25740
25312:	lea     r15, [r12+1]
25317:	mov     ebp, 3Fh ; '?'
2531C:	jmp     loc_25184; jumptable 000000000002512D cases 37,43-58
25321:	mov     ebp, 72h ; 'r'; jumptable 000000000002512D case 13
25326:	cmp     dword ptr [rsp+0B8h+var_A8], 1
2532B:	jz      short loc_25360
2532D:	mov     r12, i
25330:	jmp     store_escape
25335:	mov     ebp, 62h ; 'b'; jumptable 000000000002512D case 8
2533A:	jmp     short loc_2532D
25340:	mov     ebp, 23h ; '#'; jumptable 000000000002512D case 35
25345:	test    r12, r12
25348:	jnz     loc_251F5; jumptable 00000000000254B5 cases 37,43-58
2534E:	cmp     dword ptr [rsp+0B8h+var_A8], 1
25353:	jnz     loc_251F5; jumptable 00000000000254B5 cases 37,43-58
25359:	nop     dword ptr [rax+00000000h]
25360:	mov     [rsp+0B8h+arg], r11
25365:	mov     [rsp+0B8h+var_A8], r10
2536A:	call    ___ctype_get_mb_cur_max
2536F:	mov     r10, [rsp+0B8h+var_A8]
25374:	mov     r11, [rsp+0B8h+arg]
25379:	mov     [rsp+0B8h+var_90], rax
2537E:	lea     rax, aS_9+5; '''
25385:	mov     dword ptr [rsp+0B8h+var_A8], 2
2538D:	mov     r9d, 1
25393:	xor     r8d, r8d
25396:	mov     [rsp+0B8h+arg], rax
2539B:	test    r10, r10
2539E:	jz      loc_25090
253A4:	mov     rax, [rsp+0B8h+buffer]
253A9:	mov     byte ptr [rax], 27h ; '''
253AC:	jmp     loc_25090
253B1:	mov     ebp, 74h ; 't'; jumptable 000000000002512D case 9
253B6:	jmp     loc_25326
253BB:	mov     ebp, 66h ; 'f'; jumptable 000000000002512D case 12
253C0:	jmp     loc_2532D
253C5:	mov     r12, i; jumptable 000000000002512D case 11
253C8:	mov     ebp, 76h ; 'v'
253CD:	jmp     store_escape
253D2:	mov     r12, i; jumptable 000000000002512D case 0
253D5:	cmp     r10, len
253D8:	jbe     short loc_253E3
253DA:	mov     rax, [rsp+0B8h+buffer]
253DF:	mov     byte ptr [rax+len], 5Ch ; ''
253E3:	lea     rax, [len+1]
253E7:	cmp     r10, len
253EA:	jbe     short loc_253F6
253EC:	mov     len, [rsp+0B8h+buffer]
253F1:	mov     byte ptr [rax+rbx+1], 30h ; '0'
253F6:	lea     rax, [rbx+2]
253FA:	cmp     r10, len
253FD:	jbe     short loc_25409
253FF:	mov     len, [rsp+0B8h+buffer]
25404:	mov     byte ptr [rax+rbx+2], 30h ; '0'
25409:	add     rbx, 3
2540D:	mov     eax, 10000h
25412:	mov     edx, 1
25417:	mov     ebp, 30h ; '0'
2541C:	jmp     loc_251A4
25421:	mov     ebp, 61h ; 'a'; jumptable 000000000002512D case 7
25426:	jmp     loc_2532D
2542B:	mov     ebp, 6Eh ; 'n'; jumptable 000000000002512D case 10
25430:	jmp     loc_25326
25438:	cmp     dl, 7Ah ; 'z'
2543B:	jg      loc_25200
25441:	cmp     dl, 40h ; '@'
25444:	jz      def_2512D; jumptable 000000000002512D default case, cases 1-6,14-31
2544A:	lea     ecx, [rbp-41h]
2544D:	mov     eax, 1
25452:	mov     rdi, 3FFFFFF53FFFFFFh
2545C:	shl     rax, cl
2545F:	test    rax, rdi
25462:	jnz     loc_25190
25468:	test    eax, 0A4000000h
2546D:	jnz     loc_251EA; jumptable 000000000002512D cases 32-34,36,38,40-42,59-62
25473:	cmp     bpl, 5Ch ; ''
25477:	jnz     def_2512D; jumptable 000000000002512D default case, cases 1-6,14-31
2547D:	cmp     dword ptr [rsp+0B8h+var_A8], 1
25482:	jz      loc_25360
25488:	jmp     loc_2532D
25490:	mov     ebp, edx
25492:	cmp     dl, 3Fh ; '?'
25495:	jg      loc_256B8
2549B:	test    dl, dl
2549D:	js      short def_254B5; jumptable 00000000000254B5 default case, cases 1-6,14-31
2549F:	cmp     dl, 3Fh; switch 64 cases
254A2:	ja      short def_254B5; jumptable 00000000000254B5 default case, cases 1-6,14-31
254A4:	lea     rdi, jpt_254B5
254AB:	movzx   eax, dl
254AE:	movsxd  rax, ds:(jpt_254B5 - 299E0h)[rdi+rax*4]
254B2:	add     rax, rdi
254B5:	jmp     rax; switch jump
254C0:	cmp     dl, 7Dh ; '}'
254C3:	jz      loc_2570C
254C9:	jle     loc_251D8
254CF:	cmp     dl, 7Eh ; '~'
254D2:	jz      loc_25345
254D8:	nop     dword ptr [rax+rax+00000000h]
254E0:	lea     r14, [r12+1]; jumptable 00000000000254B5 default case, cases 1-6,14-31
254E5:	cmp     [rsp+0B8h+var_90], 1
254EB:	mov     byte ptr [rsp+0B8h+bytes], dl
254EF:	mov     r15, r14
254F2:	jz      loc_25230
254F8:	mov     qword ptr [rsp+0B8h+mbstate.__count], 0
25501:	lea     rcx, [rsp+0B8h+mbstate]
25506:	cmp     argsize, 0FFFFFFFFFFFFFFFFh
2550A:	jnz     short loc_25554
2550C:	mov     rdi, r11; s
2550F:	mov     [rsp+0B8h+var_60], r10
25514:	mov     byte ptr [rsp+0B8h+var_68], r8b
25519:	mov     [rsp+0B8h+var_70], r9
2551E:	mov     [rsp+0B8h+s], rsi
25523:	mov     [rsp+0B8h+p], rcx
25528:	mov     [rsp+0B8h+bytes], r11
2552D:	call    _strlen
25532:	mov     r10, [rsp+0B8h+var_60]
25537:	movzx   r8d, byte ptr [rsp+0B8h+var_68]
2553D:	mov     r9, [rsp+0B8h+var_70]
25542:	mov     rsi, [rsp+0B8h+s]; s
25547:	mov     argsize, rax
2554A:	mov     rcx, [rsp+0B8h+p]; p
2554F:	mov     r11, [rsp+0B8h+bytes]
25554:	mov     rdx, r13
25557:	lea     rdi, [rsp+0B8h+w]; pwc
2555C:	mov     [rsp+0B8h+var_70], r11
25561:	sub     rdx, r12; n
25564:	mov     [rsp+0B8h+s], r10
25569:	mov     byte ptr [rsp+0B8h+p], r8b
2556E:	mov     [rsp+0B8h+bytes], r9
25573:	mov     [rsp+0B8h+var_60], rdx
25578:	mov     [rsp+0B8h+var_68], rsi
2557D:	call    _mbrtowc
25582:	mov     r9, [rsp+0B8h+bytes]
25587:	movzx   r8d, byte ptr [rsp+0B8h+p]
2558D:	test    rax, rax
25590:	mov     r10, [rsp+0B8h+s]
25595:	mov     r11, [rsp+0B8h+var_70]
2559A:	mov     rcx, rax
2559D:	jz      loc_25184; jumptable 000000000002512D cases 37,43-58
255A3:	cmp     bytes_0, 0FFFFFFFFFFFFFFFFh
255A7:	jz      loc_25808
255AD:	cmp     bytes_0, 0FFFFFFFFFFFFFFFEh
255B1:	mov     rsi, [rsp+0B8h+var_68]
255B6:	mov     rdx, [rsp+0B8h+var_60]
255BB:	jz      loc_2591B
255C1:	cmp     dword ptr [rsp+0B8h+var_A8], 1
255C6:	jz      loc_2593F
255CC:	mov     edi, [rsp+0B8h+w]; wc
255D0:	mov     [rsp+0B8h+var_68], r11
255D5:	mov     [rsp+0B8h+var_70], r10
255DA:	mov     byte ptr [rsp+0B8h+s], r8b
255DF:	mov     [rsp+0B8h+p], r9
255E4:	mov     [rsp+0B8h+bytes], bytes_0
255E9:	call    _iswprint
255EE:	movzx   r8d, byte ptr [rsp+0B8h+s]
255F4:	mov     rcx, [rsp+0B8h+bytes]
255F9:	test    eax, eax
255FB:	mov     r9, [rsp+0B8h+p]
25600:	mov     r10, [rsp+0B8h+var_70]
25605:	setz    al
25608:	mov     r11, [rsp+0B8h+var_68]
2560D:	and     eax, r8d
25610:	cmp     m_0, 1
25614:	ja      loc_25284
2561A:	jmp     loc_25279
2561F:	mov     ebp, 0Ch; jumptable 00000000000254B5 case 12
25624:	mov     eax, 66h ; 'f'
25629:	nop     dword ptr [rax+00000000h]
25630:	add     r12, 1
25634:	test    r8b, r8b
25637:	jz      store_c
2563D:	mov     ebp, eax
2563F:	jmp     store_escape
25648:	mov     ebp, 0Bh; jumptable 00000000000254B5 case 11
2564D:	mov     eax, 76h ; 'v'
25652:	jmp     short c_escape
25654:	mov     ebp, 9; jumptable 00000000000254B5 case 9
25659:	mov     eax, 74h ; 't'
2565E:	cmp     dword ptr [rsp+0B8h+var_A8], 1
25663:	jnz     short c_escape
25665:	jmp     loc_25360
25670:	add     r12, 1; jumptable 00000000000254B5 case 0
25674:	test    r8b, r8b
25677:	jnz     loc_253D5
2567D:	xor     ebp, ebp
2567F:	jmp     store_c
25684:	mov     ebp, 8; jumptable 00000000000254B5 case 8
25689:	mov     eax, 62h ; 'b'
2568E:	jmp     short c_escape
25690:	mov     ebp, 0Ah; jumptable 00000000000254B5 case 10
25695:	mov     eax, 6Eh ; 'n'
2569A:	jmp     short c_and_shell_escape
2569C:	mov     ebp, 7; jumptable 00000000000254B5 case 7
256A1:	mov     eax, 61h ; 'a'
256A6:	jmp     short c_escape
256A8:	mov     ebp, 0Dh; jumptable 00000000000254B5 case 13
256AD:	mov     eax, 72h ; 'r'
256B2:	jmp     short c_and_shell_escape
256B8:	cmp     dl, 7Ah ; 'z'
256BB:	jg      loc_254C0
256C1:	cmp     dl, 40h ; '@'
256C4:	jz      def_254B5; jumptable 00000000000254B5 default case, cases 1-6,14-31
256CA:	lea     ecx, [rbp-41h]
256CD:	mov     eax, 1
256D2:	mov     rdi, 3FFFFFF53FFFFFFh
256DC:	shl     rax, cl
256DF:	test    rax, rdi
256E2:	jnz     loc_251F5; jumptable 00000000000254B5 cases 37,43-58
256E8:	test    eax, 0A4000000h
256ED:	jnz     loc_251EA; jumptable 000000000002512D cases 32-34,36,38,40-42,59-62
256F3:	cmp     bpl, 5Ch ; ''
256F7:	jnz     def_254B5; jumptable 00000000000254B5 default case, cases 1-6,14-31
256FD:	mov     eax, 5Ch ; ''
25702:	jmp     c_and_shell_escape
25707:	cmp     dl, 7Bh ; '{'
2570A:	jnz     short loc_25730
2570C:	cmp     argsize, 1
25710:	setnz   al
25713:	cmp     argsize, 0FFFFFFFFFFFFFFFFh
25717:	jnz     short loc_25721
25719:	cmp     byte ptr [r11+1], 0
2571E:	setnz   al
25721:	test    al, al
25723:	jnz     loc_251F5; jumptable 00000000000254B5 cases 37,43-58
25729:	jmp     loc_25345
25730:	cmp     dl, 7Ch ; '|'
25733:	jz      loc_251EA; jumptable 000000000002512D cases 32-34,36,38,40-42,59-62
25739:	jmp     def_2512D; jumptable 000000000002512D default case, cases 1-6,14-31
25740:	lea     rax, [r12+2]
25745:	lea     r15, [r12+1]
2574A:	mov     ebp, 3Fh ; '?'
2574F:	cmp     rax, argsize
25752:	jnb     loc_25184; jumptable 000000000002512D cases 37,43-58
25758:	cmp     byte ptr [r11+r12+1], 3Fh ; '?'
2575E:	jnz     loc_25184; jumptable 000000000002512D cases 37,43-58
25764:	movzx   ebp, byte ptr [r11+r12+2]
2576A:	cmp     bpl, 3Eh ; '>'
2576E:	ja      short loc_25784
25770:	mov     rax, 7000A38200000000h
2577A:	bt      rax, rbp
2577E:	jb      loc_258D9
25784:	mov     ebp, 3Fh ; '?'
25789:	jmp     loc_25184; jumptable 000000000002512D cases 37,43-58
2578E:	test    r12, r12
25791:	jnz     short loc_2579E
25793:	cmp     dword ptr [rsp+0B8h+var_A8], 1
25798:	jz      loc_25360
2579E:	mov     rsi, [rsp+0B8h+arg]
257A3:	mov     rax, len
257A6:	test    rsi, rsi
257A9:	jz      short loc_257D4
257AB:	movzx   edx, byte ptr [rsi]
257AE:	test    dl, dl
257B0:	jz      short loc_257D4
257B2:	sub     rsi, rbx
257B5:	mov     rcx, rsi
257B8:	mov     rsi, [rsp+0B8h+buffer]
257BD:	nop     dword ptr [len]
257C0:	cmp     r10, len
257C3:	jbe     short loc_257C8
257C5:	mov     [rsi+len], dl
257C8:	add     len, 1
257CC:	movzx   edx, byte ptr [rcx+len]
257D0:	test    dl, dl
257D2:	jnz     short loc_257C0
257D4:	cmp     len, r10
257D7:	jnb     short loc_257E2
257D9:	mov     rsi, [rsp+0B8h+buffer]
257DE:	mov     byte ptr [rsi+len], 0
257E2:	mov     rdx, [rsp+0B8h+var_40]
257E7:	sub     rdx, fs:28h
257F0:	jnz     loc_259AA
257F6:	add     rsp, 88h
257FD:	pop     rbx
257FE:	pop     rbp
257FF:	pop     r12
25801:	pop     argsize
25803:	pop     r14
25805:	pop     r15
25807:	retn
25808:	mov     eax, r8d
2580B:	xor     ecx, ecx
2580D:	jmp     loc_25279
25812:	mov     eax, dword ptr [rsp+0B8h+var_A8]
25816:	jbe     short loc_2586A
25818:	sub     eax, 5
2581B:	cmp     eax, 1
2581E:	ja      loc_258A8
25824:	cmp     dword ptr [rsp+0B8h+var_A8], 6
25829:	mov     edx, 60h ; '`'
2582E:	mov     eax, 22h ; '''
25833:	cmovnz  eax, edx
25836:	lea     rcx, asc_298AE; '''
2583D:	lea     rdx, aS_9+5; '''
25844:	cmovz   rdx, rcx
25848:	mov     [rsp+0B8h+arg], rdx
2584D:	test    r10, r10
25850:	jz      short loc_25859
25852:	mov     rsi, [rsp+0B8h+buffer]
25857:	mov     [rsi], al
25859:	mov     r8d, 1
2585F:	mov     r9d, 1
25865:	jmp     loc_25090
2586A:	cmp     eax, 2
2586D:	jz      loc_2537E
25873:	cmp     eax, 3
25876:	jnz     short loc_258A8
25878:	test    r10, r10
2587B:	jz      short loc_258BC
2587D:	mov     rax, [rsp+0B8h+buffer]
25882:	mov     r8d, 1
25888:	mov     r9d, 1
2588E:	mov     byte ptr [rax], 22h ; '''
25891:	lea     rax, asc_298AE; '''
25898:	mov     [rsp+0B8h+arg], rax
2589D:	jmp     loc_25090
258A8:	mov     [rsp+0B8h+arg], 0
258B1:	xor     r8d, r8d
258B4:	xor     r9d, r9d
258B7:	jmp     loc_25090
258BC:	lea     rax, asc_298AE; '''
258C3:	mov     r8d, 1
258C9:	mov     r9d, 1
258CF:	mov     [rsp+0B8h+arg], rax
258D4:	jmp     loc_25090
258D9:	cmp     r10, len
258DC:	jbe     short loc_258E7
258DE:	mov     rax, [rsp+0B8h+buffer]
258E3:	mov     byte ptr [rax+len], 3Fh ; '?'
258E7:	lea     rax, [len+1]
258EB:	cmp     r10, len
258EE:	jbe     short loc_258FA
258F0:	mov     len, [rsp+0B8h+buffer]
258F5:	mov     byte ptr [rax+rbx+1], 5Ch ; ''
258FA:	lea     rax, [rbx+2]
258FE:	cmp     r10, len
25901:	jbe     short loc_2590D
25903:	mov     len, [rsp+0B8h+buffer]
25908:	mov     byte ptr [rax+rbx+2], 3Fh ; '?'
2590D:	add     rbx, 3
25911:	lea     r15, [r12+3]
25916:	jmp     loc_25184; jumptable 000000000002512D cases 37,43-58
2591B:	xor     ecx, ecx
2591D:	cmp     argsize, r12
25920:	ja      short loc_25931
25922:	jmp     short loc_259A2
25928:	add     m_0, 1
2592C:	cmp     rdx, m_0
2592F:	jz      short loc_25937
25931:	cmp     byte ptr [rsi+m_0], 0
25935:	jnz     short loc_25928
25937:	mov     eax, r8d
2593A:	jmp     loc_25610
2593F:	cmp     bytes_0, 1
25943:	jz      loc_255CC
25949:	lea     rdx, [r11+r14]
2594D:	add     rsi, bytes_0
25950:	jmp     short loc_25965
25958:	add     rdx, 1
2595C:	cmp     rsi, rdx
2595F:	jz      loc_255CC
25965:	movzx   eax, byte ptr [rdx]
25968:	sub     eax, 5Bh ; '['
2596B:	cmp     al, 21h ; '!'
2596D:	ja      short loc_25958
2596F:	mov     rdi, 20000002Bh
25979:	bt      rdi, rax
2597D:	jnb     short loc_25958
2597F:	mov     [rsp+0B8h+arg], r10
25984:	mov     [rsp+0B8h+var_A8], r11
25989:	call    ___ctype_get_mb_cur_max
2598E:	mov     r11, [rsp+0B8h+var_A8]
25993:	mov     r10, [rsp+0B8h+arg]
25998:	mov     [rsp+0B8h+var_90], rax
2599D:	jmp     loc_2537E
259A2:	mov     eax, r8d
259A5:	jmp     loc_25279
259AA:	call    ___stack_chk_fail
259AF:	mov     r12, r15
259B2:	jmp     store_c
259C0:	push    r15
259C2:	mov     r15d, edi
259C5:	push    r14
259C7:	push    r13
259C9:	mov     r13, rdx
259CC:	push    r12
259CE:	mov     r12, rsi
259D1:	push    rbp
259D2:	mov     rbp, rcx
259D5:	push    rbx
259D6:	sub     rsp, 28h
259DA:	call    ___errno_location
259DF:	mov     r14, cs:slotvec_0
259E6:	mov     rbx, rax
259E9:	mov     eax, [rax]
259EB:	mov     [rsp+58h+var_4C], eax
259EF:	test    r15d, r15d
259F2:	js      quotearg_n_options_cold
259F8:	cmp     cs:nslots, r15d
259FF:	mov     r10d, [rsp+58h+var_4C]
25A04:	ja      short loc_25A69
25A06:	lea     edx, [r15+1]
25A0A:	lea     rax, slotvec0
25A11:	mov     rsi, rdx
25A14:	mov     dword ptr [rsp+58h+buffersize], edx
25A18:	shl     rsi, 4; n
25A1C:	cmp     r14, rax
25A1F:	jz      loc_25B20
25A25:	mov     rdi, r14; p
25A28:	mov     [rsp+58h+var_40], rdx
25A2D:	call    xrealloc
25A32:	mov     rdx, [rsp+58h+var_40]
25A37:	mov     cs:slotvec_0, rax
25A3E:	mov     r14, rax
25A41:	mov     edi, cs:nslots
25A47:	xor     esi, esi; c
25A49:	sub     rdx, rdi
25A4C:	shl     rdi, 4
25A50:	shl     rdx, 4; n
25A54:	add     rdi, r14; s
25A57:	call    _memset
25A5C:	mov     eax, dword ptr [rsp+58h+buffersize]
25A60:	mov     r10d, [rbx]
25A63:	mov     cs:nslots, eax
25A69:	movsxd  r8, r15d
25A6C:	mov     r9, rbp; o
25A6F:	mov     rcx, r13; argsize
25A72:	mov     rdx, r12; arg
25A75:	shl     r8, 4
25A79:	mov     dword ptr [rsp+58h+var_40], r10d
25A7E:	lea     r15, [r14+r8]
25A82:	mov     r8d, [rbp+0]; quoting_style
25A86:	mov     r14, [r15+8]
25A8A:	mov     rsi, [r15]; buffersize
25A8D:	mov     rdi, r14; buffer
25A90:	mov     [rsp+58h+buffersize], rsi
25A95:	call    quotearg_buffer_restyled
25A9A:	mov     r10d, dword ptr [rsp+58h+var_40]
25A9F:	mov     rsi, [rsp+58h+buffersize]
25AA4:	mov     [rbx], r10d
25AA7:	cmp     rax, rsi
25AAA:	jb      short loc_25AFF
25AAC:	lea     rsi, [rax+1]
25AB0:	lea     rax, slot0
25AB7:	mov     [r15], rsi
25ABA:	cmp     r14, rax
25ABD:	jz      short loc_25AD1
25ABF:	mov     rdi, r14; ptr
25AC2:	mov     [rsp+58h+buffersize], rsi
25AC7:	call    _free
25ACC:	mov     rsi, [rsp+58h+buffersize]
25AD1:	mov     rdi, rsi; n
25AD4:	mov     [rsp+58h+buffersize], rsi
25AD9:	call    xmalloc
25ADE:	mov     r8d, [rbp+0]; quoting_style
25AE2:	mov     r9, rbp; o
25AE5:	mov     rcx, r13; argsize
25AE8:	mov     [r15+8], rax
25AEC:	mov     rsi, [rsp+58h+buffersize]; buffersize
25AF1:	mov     rdx, r12; arg
25AF4:	mov     rdi, rax; buffer
25AF7:	mov     r14, rax
25AFA:	call    quotearg_buffer_restyled
25AFF:	mov     eax, [rsp+58h+var_4C]
25B03:	mov     [rbx], eax
25B05:	add     rsp, 28h
25B09:	mov     rax, r14
25B0C:	pop     rbx
25B0D:	pop     rbp
25B0E:	pop     r12
25B10:	pop     r13
25B12:	pop     r14
25B14:	pop     r15
25B16:	retn
25B20:	xor     edi, edi; p
25B22:	mov     [rsp+58h+var_40], rdx
25B27:	call    xrealloc
25B2C:	movdqa  xmm0, xmmword ptr cs:slotvec0.size
25B34:	mov     rdx, [rsp+58h+var_40]
25B39:	mov     cs:slotvec_0, rax
25B40:	mov     r14, rax
25B43:	movups  xmmword ptr [rax], xmm0
25B46:	jmp     loc_25A41
25B50:	endbr64
25B54:	push    r12
25B56:	push    rbp
25B57:	mov     rbp, o
25B5A:	push    rbx
25B5B:	call    ___errno_location
25B60:	test    o, o
25B63:	mov     esi, 24h ; '$'; s
25B68:	mov     r12d, [rax]
25B6B:	mov     rbx, rax
25B6E:	lea     rax, default_quoting_options
25B75:	cmovz   o, rax
25B79:	mov     rdi, rbp; p
25B7C:	call    xmemdup
25B81:	mov     [rbx], r12d
25B84:	pop     rbx
25B85:	pop     rbp
25B86:	pop     e
25B88:	retn
25B90:	endbr64
25B94:	test    o, o
25B97:	lea     rax, default_quoting_options
25B9E:	cmovz   o, rax
25BA2:	mov     eax, [rdi]
25BA4:	retn
25BB0:	endbr64
25BB4:	test    o, o
25BB7:	lea     rax, default_quoting_options
25BBE:	cmovz   o, rax
25BC2:	mov     [rdi], esi
25BC4:	retn
25BD0:	endbr64
25BD4:	test    o, o
25BD7:	lea     rax, default_quoting_options
25BDE:	mov     ecx, esi
25BE0:	cmovz   o, rax
25BE4:	mov     eax, esi
25BE6:	and     ecx, 1Fh
25BE9:	shr     al, 5
25BEC:	movzx   eax, al
25BEF:	lea     uc, [rdi+rax*4+4]
25BF4:	mov     edi, [p]
25BF6:	mov     eax, edi
25BF8:	shr     eax, cl
25BFA:	xor     edx, eax
25BFC:	and     eax, 1
25BFF:	and     edx, 1
25C02:	shl     edx, cl
25C04:	xor     edx, edi
25C06:	mov     [p], edx
25C08:	retn
25C10:	endbr64
25C14:	push    r15
25C16:	lea     rax, default_quoting_options
25C1D:	push    r14
25C1F:	mov     r14, arg
25C22:	push    r13
25C24:	mov     r13, buffersize
25C27:	push    r12
25C29:	mov     r12, buffer
25C2C:	push    rbp
25C2D:	push    rbx
25C2E:	mov     rbx, o
25C31:	sub     rsp, 18h
25C35:	test    o, o
25C38:	cmovz   rbx, rax
25C3C:	mov     [rsp+48h+argsize], argsize_0
25C41:	call    ___errno_location
25C46:	mov     rcx, [rsp+48h+argsize]; argsize
25C4B:	mov     rdx, arg; arg
25C4E:	mov     rsi, buffersize; buffersize
25C51:	mov     r15d, [rax]
25C54:	mov     r8d, [p]; quoting_style
25C57:	mov     rbp, rax
25C5A:	mov     r9, p; o
25C5D:	mov     rdi, buffer; buffer
25C60:	call    quotearg_buffer_restyled
25C65:	mov     [rbp+0], r15d
25C69:	add     rsp, 18h
25C6D:	pop     p
25C6E:	pop     rbp
25C6F:	pop     buffer
25C71:	pop     buffersize
25C73:	pop     arg
25C75:	pop     e
25C77:	retn
25C80:	endbr64
25C84:	push    r15
25C86:	mov     r15, arg
25C89:	push    r14
25C8B:	mov     r14, argsize
25C8E:	push    r13
25C90:	push    r12
25C92:	push    rbp
25C93:	push    rbx
25C94:	mov     rbx, o
25C97:	sub     rsp, 18h
25C9B:	call    ___errno_location
25CA0:	test    o, o
25CA3:	mov     rcx, argsize; argsize
25CA6:	mov     rdx, arg; arg
25CA9:	mov     r12d, [rax]
25CAC:	mov     rbp, rax
25CAF:	lea     rax, default_quoting_options
25CB6:	cmovz   o, rax
25CBA:	xor     esi, esi; buffersize
25CBC:	xor     edi, edi; buffer
25CBE:	mov     r8d, [rbx]; quoting_style
25CC1:	mov     r9, rbx; o
25CC4:	call    quotearg_buffer_restyled
25CC9:	mov     [rbp+0], r12d
25CCD:	lea     r13, [rax+1]
25CD1:	mov     [rsp+48h+e], r12d
25CD6:	mov     rdi, bufsize; n
25CD9:	call    xmalloc
25CDE:	mov     r8d, [rbx]; quoting_style
25CE1:	mov     r9, rbx; o
25CE4:	mov     rcx, argsize; argsize
25CE7:	mov     rdx, arg; arg
25CEA:	mov     rsi, bufsize; buffersize
25CED:	mov     rdi, rax; buffer
25CF0:	mov     e_0, rax
25CF3:	call    quotearg_buffer_restyled
25CF8:	mov     eax, [rsp+48h+e]
25CFC:	mov     [rbp+0], eax
25CFF:	add     rsp, 18h
25D03:	mov     rax, buf
25D06:	pop     rbx
25D07:	pop     rbp
25D08:	pop     buf
25D0A:	pop     bufsize
25D0C:	pop     argsize
25D0E:	pop     arg
25D10:	retn
25D20:	endbr64
25D24:	mov     eax, cs:nslots
25D2A:	push    r12
25D2C:	mov     r12, cs:slotvec_0
25D33:	push    rbp
25D34:	push    rbx
25D35:	cmp     eax, 1
25D38:	jbe     short loc_25D61
25D3A:	sub     eax, 2
25D3D:	lea     rbx, [sv+18h]
25D42:	shl     rax, 4
25D46:	lea     rbp, [sv+rax+28h]
25D4B:	nop     dword ptr [rax+rax+00h]
25D50:	mov     rdi, [rbx]; ptr
25D53:	add     rbx, 10h
25D57:	call    _free
25D5C:	cmp     rbx, rbp
25D5F:	jnz     short loc_25D50
25D61:	mov     rdi, [sv+8]; ptr
25D66:	lea     rbx, slot0
25D6D:	cmp     rdi, rbx
25D70:	jz      short loc_25D89
25D72:	call    _free
25D77:	mov     cs:slotvec0.val, rbx
25D7E:	mov     cs:slotvec0.size, 100h
25D89:	lea     rbx, slotvec0
25D90:	cmp     sv, rbx
25D93:	jz      short loc_25DA4
25D95:	mov     rdi, sv; ptr
25D98:	call    _free
25D9D:	mov     cs:slotvec_0, rbx
25DA4:	mov     cs:nslots, 1
25DAE:	pop     rbx
25DAF:	pop     rbp
25DB0:	pop     sv
25DB2:	retn
25DC0:	endbr64
25DC4:	lea     rcx, default_quoting_options
25DCB:	mov     rdx, 0FFFFFFFFFFFFFFFFh
25DD2:	jmp     quotearg_n_options
25DE0:	endbr64
25DE4:	mov     rsi, arg
25DE7:	lea     rcx, default_quoting_options
25DEE:	mov     rdx, 0FFFFFFFFFFFFFFFFh
25DF5:	xor     edi, edi
25DF7:	jmp     quotearg_n_options
25E00:	endbr64
25E04:	sub     rsp, 68h
25E08:	mov     r8d, esi
25E0B:	pxor    xmm0, xmm0
25E0F:	mov     s, arg
25E12:	mov     rax, fs:28h
25E1B:	mov     [rsp+68h+var_10], rax
25E20:	xor     eax, eax
25E22:	movups  [rsp+68h+var_38+4], xmm0
25E27:	mov     arg, 0FFFFFFFFFFFFFFFFh
25E2E:	mov     rcx, rsp
25E31:	movups  [rsp+68h+var_24], xmm0
25E36:	movdqa  xmm2, xmmword ptr [rsp+40h]
25E3C:	mov     eax, dword ptr [rsp+68h+var_24+0Ch]
25E40:	mov     dword ptr [rsp+68h+var_38], r8d
25E45:	movdqa  xmm1, [rsp+68h+var_38]
25E4B:	mov     [rsp+68h+o.quote_these_too+1Ch], eax
25E4F:	movaps  xmmword ptr [rsp+68h+o.style], xmm1
25E53:	movaps  xmmword ptr [rsp+68h+o.quote_these_too+0Ch], xmm2
25E58:	call    quotearg_n_options
25E5D:	mov     rdx, [rsp+68h+var_10]
25E62:	sub     rdx, fs:28h
25E6B:	jnz     short loc_25E72
25E6D:	add     rsp, 68h
25E71:	retn
25E72:	call    ___stack_chk_fail
25E80:	endbr64
25E84:	sub     rsp, 68h
25E88:	mov     r8d, esi
25E8B:	pxor    xmm0, xmm0
25E8F:	mov     s, arg
25E92:	mov     rax, fs:28h
25E9B:	mov     [rsp+68h+var_10], rax
25EA0:	xor     eax, eax
25EA2:	movups  [rsp+68h+var_38+4], xmm0
25EA7:	mov     arg, argsize
25EAA:	mov     argsize, rsp
25EAD:	movups  [rsp+68h+var_24], xmm0
25EB2:	movdqa  xmm2, xmmword ptr [rsp+40h]
25EB8:	mov     eax, dword ptr [rsp+68h+var_24+0Ch]
25EBC:	mov     dword ptr [rsp+68h+var_38], r8d
25EC1:	movdqa  xmm1, [rsp+68h+var_38]
25EC7:	mov     [rsp+68h+o.quote_these_too+1Ch], eax
25ECB:	movaps  xmmword ptr [rsp+68h+o.style], xmm1
25ECF:	movaps  xmmword ptr [rsp+68h+o.quote_these_too+0Ch], xmm2
25ED4:	call    quotearg_n_options
25ED9:	mov     rdx, [rsp+68h+var_10]
25EDE:	sub     rdx, fs:28h
25EE7:	jnz     short loc_25EEE
25EE9:	add     rsp, 68h
25EED:	retn
25EEE:	call    ___stack_chk_fail
25F00:	endbr64
25F04:	sub     rsp, 68h
25F08:	pxor    xmm0, xmm0
25F0C:	mov     rdx, 0FFFFFFFFFFFFFFFFh
25F13:	mov     rax, fs:28h
25F1C:	mov     [rsp+68h+var_10], rax
25F21:	xor     eax, eax
25F23:	mov     dword ptr [rsp+68h+s], edi
25F27:	mov     rcx, rsp
25F2A:	xor     edi, edi
25F2C:	movups  [rsp+68h+s+4], xmm0
25F31:	movdqa  xmm1, [rsp+68h+s]
25F37:	movups  [rsp+68h+var_24], xmm0
25F3C:	movdqa  xmm2, xmmword ptr [rsp+40h]
25F42:	mov     eax, dword ptr [rsp+68h+var_24+0Ch]
25F46:	movaps  [rsp+68h+var_68], xmm1
25F4A:	mov     [rsp+68h+var_48], eax
25F4E:	movaps  [rsp+68h+var_58], xmm2
25F53:	call    quotearg_n_options
25F58:	mov     rdx, [rsp+68h+var_10]
25F5D:	sub     rdx, fs:28h
25F66:	jnz     short loc_25F6D
25F68:	add     rsp, 68h
25F6C:	retn
25F6D:	call    ___stack_chk_fail
25F80:	endbr64
25F84:	sub     rsp, 38h
25F88:	movdqa  xmm0, xmmword ptr cs:default_quoting_options.style
25F90:	movdqa  xmm1, xmmword ptr cs:default_quoting_options.quote_these_too+0Ch
25F98:	mov     ecx, esi
25F9A:	mov     rax, fs:28h
25FA3:	mov     [rsp+38h+var_10], rax
25FA8:	xor     eax, eax
25FAA:	mov     eax, cs:default_quoting_options.quote_these_too+1Ch
25FB0:	and     ecx, 1Fh
25FB3:	mov     r9, rsp
25FB6:	movaps  xmmword ptr [rsp+38h+options.style], xmm0
25FBA:	mov     [rsp+38h+options.quote_these_too+1Ch], eax
25FBE:	mov     eax, esi
25FC0:	shr     al, 5
25FC3:	movaps  xmmword ptr [rsp+38h+options.quote_these_too+0Ch], xmm1
25FC8:	movzx   eax, al
25FCB:	lea     rdx, [rsp+rax*4+38h+options.quote_these_too]
25FD0:	mov     esi, [rdx]
25FD2:	mov     eax, esi
25FD4:	shr     eax, cl
25FD6:	not     eax
25FD8:	and     eax, 1
25FDB:	shl     eax, cl
25FDD:	mov     rcx, r9
25FE0:	xor     eax, esi
25FE2:	mov     rsi, arg
25FE5:	xor     edi, edi
25FE7:	mov     [rdx], eax
25FE9:	mov     rdx, 0FFFFFFFFFFFFFFFFh
25FF0:	call    quotearg_n_options
25FF5:	mov     rdx, [rsp+38h+var_10]
25FFA:	sub     rdx, fs:28h
26003:	jnz     short loc_2600A
26005:	add     rsp, 38h
26009:	retn
2600A:	call    ___stack_chk_fail
26010:	endbr64
26014:	mov     esi, 3Ah ; ':'; ch_0
26019:	jmp     quotearg_char
26020:	endbr64; _fini
26024:	sub     rsp, 8
26028:	add     rsp, 8
2602C:	retn
31C90:	extrn getenv:near
31C98:	extrn utime:near
31CA0:	extrn free:near
31CA8:	extrn putchar:near
31CB0:	extrn tputs:near
31CB8:	extrn strcasecmp:near
31CC0:	extrn localtime:near
31CC8:	extrn __libc_start_main:near
31CD0:	extrn abort:near
31CD8:	extrn __errno_location:near
31CE0:	extrn unlink:near
31CE8:	extrn strncpy:near
31CF0:	extrn strncmp:near
31CF8:	extrn _exit:near
31D00:	extrn strcpy:near
31D08:	extrn mkdir:near
31D10:	extrn toupper:near
31D18:	extrn puts:near
31D20:	extrn qsort:near
31D28:	extrn isatty:near
31D30:	extrn localeconv:near
31D38:	extrn readlink:near
31D40:	extrn getpid:near
31D48:	extrn fclose:near
31D50:	extrn opendir:near
31D58:	extrn tgoto:near
31D60:	extrn getpwuid:near
31D68:	extrn rmdir:near
31D70:	extrn __ctype_get_mb_cur_max:near
31D78:	extrn strlen:near
31D80:	extrn chdir:near
31D88:	extrn __stack_chk_fail:near
31D90:	extrn getuid:near
31D98:	extrn mbrtowc:near
31DA0:	extrn strchr:near
31DA8:	extrn printf:near
31DB0:	extrn getgrgid:near
31DB8:	extrn strrchr:near
31DC0:	extrn uname:near
31DC8:	extrn fnmatch:near
31DD0:	extrn memset:near
31DD8:	extrn geteuid:near
31DE0:	extrn ioctl:near
31DE8:	extrn getcwd:near
31DF0:	extrn fgetc:near
31DF8:	extrn alarm:near
31E00:	extrn close:near
31E08:	extrn closedir:near
31E10:	extrn lstat:near
31E18:	extrn srand:near
31E20:	extrn memcmp:near
31E28:	extrn fgets:near
31E30:	extrn calloc:near
31E38:	extrn putenv:near
31E40:	extrn strcmp:near
31E48:	extrn putc:near
31E50:	extrn signal:near
31E58:	extrn getpwnam:near
31E60:	extrn __memcpy_chk:near
31E68:	extrn fprintf:near
31E70:	extrn ftell:near
31E78:	extrn stat_0:near
31E80:	extrn memcpy:near
31E88:	extrn getgrnam:near
31E90:	extrn kill:near
31E98:	extrn time:near
31EA0:	extrn getgid:near
31EA8:	extrn statfs_0:near
31EB0:	extrn readdir:near
31EB8:	extrn tolower:near
31EC0:	extrn malloc:near
31EC8:	extrn strncasecmp:near
31ED0:	extrn fflush:near
31ED8:	extrn tgetnum:near
31EE0:	extrn __isoc99_sscanf:near
31EE8:	extrn endpwent:near
31EF0:	extrn fseek:near
31EF8:	extrn tgetflag:near
31F00:	extrn tgetstr:near
31F08:	extrn statvfs_0:near
31F10:	extrn chown:near
31F18:	extrn ttyname:near
31F20:	extrn realloc:near
31F28:	extrn setlocale:near
31F30:	extrn cfgetospeed:near
31F38:	extrn open64:near
31F40:	extrn memmove:near
31F48:	extrn error:near
31F50:	extrn tcgetattr:near
31F58:	extrn tcsetattr:near
31F60:	extrn open:near
31F68:	extrn access:near
31F70:	extrn fopen:near
31F78:	extrn tcflow:near
31F80:	extrn rename:near
31F88:	extrn strtoumax:near
31F90:	extrn getopt:near
31F98:	extrn atoi:near
31FA0:	extrn strcat:near
31FA8:	extrn creat:near
31FB0:	extrn sprintf:near
31FB8:	extrn link:near
31FC0:	extrn exit:near
31FC8:	extrn execle:near
31FD0:	extrn fwrite:near
31FD8:	extrn lseek64:near
31FE0:	extrn __fprintf_chk:near
31FE8:	extrn strdup:near
31FF0:	extrn iswprint:near
31FF8:	extrn tgetent:near
32000:	extrn sleep:near
32008:	extrn fstat:near
32010:	extrn wait:near
32018:	extrn fork:near
32020:	extrn rand:near
32028:	extrn __ctype_b_loc:near
32030:	extrn __sprintf_chk:near
32038:	extrn __imp_read:near
32040:	extrn __imp___cxa_finalize:near ; weak
32048:	extrn __imp_write:near
32058:	extrn __gmon_start__:near ; weak
