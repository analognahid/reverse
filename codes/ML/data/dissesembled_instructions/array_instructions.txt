endbr64 ;xor ebp, ebp;mov r9, rdx;pop rsi;mov rdx, rsp;and rsp, 0xfffffffffffffff0;push rax;push rsp;xor r8d, r8d;xor ecx, ecx;lea rdi, [rip + 0xca];call qword ptr [rip + 0x2f13];
endbr64 ;push rbp;mov rbp, rsp;sub rsp, 0x30;mov rax, qword ptr fs:[0x28];mov qword ptr [rbp - 8], rax;xor eax, eax;lea rax, [rip + 0xe59];mov rdi, rax;mov eax, 0;call 0x1080;mov dword ptr [rbp - 0x2c], 0;jmp 0x11f8;mov eax, dword ptr [rbp - 0x2c];cdqe ;mov edx, dword ptr [rbp - 0x2c];mov dword ptr [rbp + rax*4 - 0x20], edx;lea rdx, [rbp - 0x20];mov eax, dword ptr [rbp - 0x2c];cdqe ;shl rax, 2;add rax, rdx;mov rsi, rax;lea rax, [rip + 0xe30];mov rdi, rax;mov eax, 0;call 0x1090;add dword ptr [rbp - 0x2c], 1;cmp dword ptr [rbp - 0x2c], 4;jle 0x11c1;lea rax, [rip + 0xe15];mov rdi, rax;mov eax, 0;call 0x1080;mov dword ptr [rbp - 0x28], 0;jmp 0x1299;mov eax, dword ptr [rbp - 0x28];cdqe ;mov edx, dword ptr [rbp - 0x28];mov dword ptr [rbp + rax*4 - 0x20], edx;mov dword ptr [rbp - 0x24], 0;jmp 0x128f;mov eax, dword ptr [rbp - 0x28];imul eax, dword ptr [rbp - 0x24];mov ecx, eax;mov eax, dword ptr [rbp - 0x28];imul eax, dword ptr [rbp - 0x24];movsxd rdx, eax;imul rdx, rdx, 0x66666667;shr rdx, 0x20;sar edx, 1;mov esi, eax;sar esi, 0x1f;sub edx, esi;mov esi, edx;shl esi, 2;add esi, edx;sub eax, esi;mov edx, eax;movsxd rax, ecx;imul rax, rax, 0x66666667;shr rax, 0x20;sar eax, 1;mov esi, ecx;sar esi, 0x1f;sub eax, esi;mov esi, eax;shl esi, 2;add esi, eax;mov eax, ecx;sub eax, esi;movsxd rdx, edx;mov dword ptr [rbp + rdx*4 - 0x20], eax;add dword ptr [rbp - 0x24], 1;cmp dword ptr [rbp - 0x24], 4;jle 0x1230;add dword ptr [rbp - 0x28], 1;cmp dword ptr [rbp - 0x28], 4;jle 0x121b;mov eax, 0;mov rdx, qword ptr [rbp - 8];sub rdx, qword ptr fs:[0x28];je 0x12bc;call 0x1070;leave ;
add byte ptr [rax], al;endbr64 ;sub rsp, 8;add rsp, 8;ret ;