
####################################################################################################
/home/nahid/reverse/binaries/gnuit/lib/quotearg.c
####################################################################################################

0x4ee0:	call 0x4810                          #    |a|bort ();

####################################################################################################
 /home/nahid/reverse/binaries/gnuit/src/git.c
####################################################################################################

0x4fd9:	endbr64                              #|{|
0x4fdd:	push rbp                             
0x4fde:	mov rbp, rsp                         
0x4fe1:	mov eax, dword ptr [rip + 0x2b9f5]   #    if (tty_lines |>|= 7)
MEMORY OFFSET:     0x2b9f5     178677  >>178685

0x4fe7:	cmp eax, 6                           #    if |(|tty_lines >= 7)
0x4fea:	jle 0x501a                           
0x4fec:	mov eax, dword ptr [rip + 0x2a036]   #	if (|t|wo_panel_mode)
MEMORY OFFSET:     0x2a036     172086  >>172094

0x4ff2:	test eax, eax                        #	if |(|two_panel_mode)
0x4ff4:	je 0x5008                            
0x4ff6:	mov eax, dword ptr [rip + 0x2b9e4]   #	    if (tty_columns |>|= 6 * 2)
MEMORY OFFSET:     0x2b9e4     178660  >>178668

0x4ffc:	cmp eax, 0xb                         #	    if |(|tty_columns >= 6 * 2)
0x4fff:	jle 0x501a                           
0x5001:	mov eax, 1                           #		return |O|N;
0x5006:	jmp 0x501f                           
0x5008:	mov eax, dword ptr [rip + 0x2b9d2]   #	    if (tty_columns |>|= 6)
MEMORY OFFSET:     0x2b9d2     178642  >>178650

0x500e:	cmp eax, 5                           #	    if |(|tty_columns >= 6)
0x5011:	jle 0x501a                           
0x5013:	mov eax, 1                           #		return |O|N;
0x5018:	jmp 0x501f                           
0x501a:	mov eax, 0                           #    return |O|FF;
0x501f:	pop rbp                              #|}|
0x5020:	ret                                  
0x5021:	endbr64                              #|{|
0x5025:	push rbp                             
0x5026:	mov rbp, rsp                         
0x5029:	mov eax, dword ptr [rip + 0x2b8b1]   #    return (current_mode |=|= GIT_TERMINAL_MODE);
MEMORY OFFSET:     0x2b8b1     178353  >>178361

0x502f:	cmp eax, 1                           
0x5032:	sete al                              
0x5035:	movzx eax, al                        
0x5038:	pop rbp                              #|}|
0x5039:	ret                                  
0x503a:	endbr64                              #|{|
0x503e:	push rbp                             
0x503f:	mov rbp, rsp                         
0x5042:	push rbx                             
0x5043:	sub rsp, 0x38                        
0x5047:	mov dword ptr [rbp - 0x34], edi      
MEMORY OFFSET:     -0x34     -52  >>-44

0x504a:	mov dword ptr [rbp - 0x28], 0        #    int |d|isplay_title = OFF;
MEMORY OFFSET:     -0x28     -40  >>-32

0x5051:	mov dword ptr [rbp - 0x24], 0        #    int |d|isplay_status = OFF;
MEMORY OFFSET:     -0x24     -36  >>-28

0x5058:	mov eax, dword ptr [rip + 0x2b97e]   #    int |o|ld_tty_lines = tty_lines;
MEMORY OFFSET:     0x2b97e     178558  >>178566

0x505e:	mov dword ptr [rbp - 0x20], eax      
MEMORY OFFSET:     -0x20     -32  >>-24

0x5061:	mov eax, dword ptr [rip + 0x2b979]   #    int |o|ld_tty_columns = tty_columns;
MEMORY OFFSET:     0x2b979     178553  >>178561

0x5067:	mov dword ptr [rbp - 0x1c], eax      
MEMORY OFFSET:     -0x1c     -28  >>-20

0x506a:	mov eax, 0                           #    |t|ty_resize();
0x506f:	call 0xc866                          
0x5074:	cmp dword ptr [rbp - 0x34], 0        #    if |(|!resize_required)
MEMORY OFFSET:     -0x34     -52  >>-44

0x5078:	jne 0x5094                           
0x507a:	mov eax, dword ptr [rip + 0x2b95c]   #	if (tty_lines |=|= old_tty_lines && tty_columns == old_tty_columns)
MEMORY OFFSET:     0x2b95c     178524  >>178532

0x5080:	cmp dword ptr [rbp - 0x20], eax      #	if |(|tty_lines == old_tty_lines && tty_columns == old_tty_columns)
MEMORY OFFSET:     -0x20     -32  >>-24

0x5083:	jne 0x5094                           
0x5085:	mov eax, dword ptr [rip + 0x2b955]   #	if (tty_lines == old_tty_lines && tty_columns |=|= old_tty_columns)
MEMORY OFFSET:     0x2b955     178517  >>178525

0x508b:	cmp dword ptr [rbp - 0x1c], eax      #	if (tty_lines == old_tty_lines |&|& tty_columns == old_tty_columns)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x508e:	je 0x5360                            
0x5094:	mov eax, dword ptr [rip + 0x2b9a6]   #    if (|L|inuxConsole)
MEMORY OFFSET:     0x2b9a6     178598  >>178606

0x509a:	test eax, eax                        #    if |(|LinuxConsole)
0x509c:	je 0x50ce                            
0x509e:	mov edx, dword ptr [rip + 0x2b93c]   #	screen = xrealloc(screen, 4 + tty_columns |*| tty_lines * 2);
MEMORY OFFSET:     0x2b93c     178492  >>178500

0x50a4:	mov eax, dword ptr [rip + 0x2b932]   
MEMORY OFFSET:     0x2b932     178482  >>178490

0x50aa:	imul eax, edx                        
0x50ad:	add eax, 2                           #	screen = xrealloc(screen, 4 |+| tty_columns * tty_lines * 2);
0x50b0:	add eax, eax                         
0x50b2:	movsxd rdx, eax                      #	screen = |x|realloc(screen, 4 + tty_columns * tty_lines * 2);
0x50b5:	mov rax, qword ptr [rip + 0x2b83c]   
MEMORY OFFSET:     0x2b83c     178236  >>178244

0x50bc:	mov rsi, rdx                         
0x50bf:	mov rdi, rax                         
0x50c2:	call 0x24670                         
0x50c7:	mov qword ptr [rip + 0x2b82a], rax   #	screen |=| xrealloc(screen, 4 + tty_columns * tty_lines * 2);
MEMORY OFFSET:     0x2b82a     178218  >>178226

0x50ce:	mov eax, dword ptr [rip + 0x2b908]   #    if (tty_lines |>|= 2)
MEMORY OFFSET:     0x2b908     178440  >>178448

0x50d4:	cmp eax, 1                           #    if |(|tty_lines >= 2)
0x50d7:	jle 0x50e0                           
0x50d9:	mov dword ptr [rbp - 0x24], 1        #	display_status |=| ON;
MEMORY OFFSET:     -0x24     -36  >>-28

0x50e0:	mov eax, dword ptr [rip + 0x2b8f6]   #    if (tty_lines |>|= 3)
MEMORY OFFSET:     0x2b8f6     178422  >>178430

0x50e6:	cmp eax, 2                           #    if |(|tty_lines >= 3)
0x50e9:	jle 0x50f2                           
0x50eb:	mov dword ptr [rbp - 0x28], 1        #	display_title |=| ON;
MEMORY OFFSET:     -0x28     -40  >>-32

0x50f2:	mov eax, 0                           #    if (|p|anels_can_be_displayed())
0x50f7:	call 0x4fd9                          
0x50fc:	test eax, eax                        #    if |(|panels_can_be_displayed())
0x50fe:	je 0x529e                            
0x5104:	mov eax, dword ptr [rip + 0x29f1e]   #	if (|t|wo_panel_mode)
MEMORY OFFSET:     0x29f1e     171806  >>171814

0x510a:	test eax, eax                        #	if |(|two_panel_mode)
0x510c:	je 0x5234                            
0x5112:	mov eax, dword ptr [rip + 0x2b8c8]   #	    int right_panel_columns = (tty_columns |>|> 1);
MEMORY OFFSET:     0x2b8c8     178376  >>178384

0x5118:	sar eax, 1                           #	    int |r|ight_panel_columns = (tty_columns >> 1);
0x511a:	mov dword ptr [rbp - 0x18], eax      
MEMORY OFFSET:     -0x18     -24  >>-16

0x511d:	mov eax, dword ptr [rip + 0x2b8bd]   #	    int left_panel_columns = right_panel_columns + (tty_columns |&| 1);
MEMORY OFFSET:     0x2b8bd     178365  >>178373

0x5123:	and eax, 1                           
0x5126:	mov edx, eax                         
0x5128:	mov eax, dword ptr [rbp - 0x18]      #	    int |l|eft_panel_columns = right_panel_columns + (tty_columns & 1);
MEMORY OFFSET:     -0x18     -24  >>-16

0x512b:	add eax, edx                         
0x512d:	mov dword ptr [rbp - 0x14], eax      
MEMORY OFFSET:     -0x14     -20  >>-12

0x5130:	mov rax, qword ptr [rip + 0x2b7d9]   #	    if (|w|indow_x(panel_window(src_panel)) <=
MEMORY OFFSET:     0x2b7d9     178137  >>178145

0x5137:	mov rdi, rax                         
0x513a:	call 0x10ced                         
0x513f:	mov rdi, rax                         
0x5142:	call 0xdc6b                          
0x5147:	mov ebx, eax                         
0x5149:	mov rax, qword ptr [rip + 0x2b7c8]   #		|w|indow_x(panel_window(dst_panel)))
MEMORY OFFSET:     0x2b7c8     178120  >>178128

0x5150:	mov rdi, rax                         
0x5153:	call 0x10ced                         
0x5158:	mov rdi, rax                         
0x515b:	call 0xdc6b                          
0x5160:	cmp ebx, eax                         #	    if |(|window_x(panel_window(src_panel)) <=
0x5162:	jg 0x51cc                            
0x5164:	mov eax, dword ptr [rbp - 0x14]      #		|p|anel_resize(src_panel, 0, 1,
MEMORY OFFSET:     -0x14     -20  >>-12

0x5167:	movsxd rcx, eax                      
0x516a:	mov eax, dword ptr [rip + 0x2b86c]   #			     tty_lines |-| 3, left_panel_columns);
MEMORY OFFSET:     0x2b86c     178284  >>178292

0x5170:	sub eax, 3                           
0x5173:	movsxd rdx, eax                      #		|p|anel_resize(src_panel, 0, 1,
0x5176:	mov rax, qword ptr [rip + 0x2b793]   
MEMORY OFFSET:     0x2b793     178067  >>178075

0x517d:	mov r8, rcx                          
0x5180:	mov rcx, rdx                         
0x5183:	mov edx, 1                           
0x5188:	mov esi, 0                           
0x518d:	mov rdi, rax                         
0x5190:	call 0x11348                         
0x5195:	mov eax, dword ptr [rbp - 0x18]      #		|p|anel_resize(dst_panel, left_panel_columns, 1,
MEMORY OFFSET:     -0x18     -24  >>-16

0x5198:	movsxd rcx, eax                      
0x519b:	mov eax, dword ptr [rip + 0x2b83b]   #			     tty_lines |-| 3, right_panel_columns);
MEMORY OFFSET:     0x2b83b     178235  >>178243

0x51a1:	sub eax, 3                           
0x51a4:	movsxd rdx, eax                      #		|p|anel_resize(dst_panel, left_panel_columns, 1,
0x51a7:	mov eax, dword ptr [rbp - 0x14]      
MEMORY OFFSET:     -0x14     -20  >>-12

0x51aa:	movsxd rsi, eax                      
0x51ad:	mov rax, qword ptr [rip + 0x2b764]   
MEMORY OFFSET:     0x2b764     178020  >>178028

0x51b4:	mov r8, rcx                          
0x51b7:	mov rcx, rdx                         
0x51ba:	mov edx, 1                           
0x51bf:	mov rdi, rax                         
0x51c2:	call 0x11348                         
0x51c7:	jmp 0x52e6                           
0x51cc:	mov eax, dword ptr [rbp - 0x18]      #		|p|anel_resize(src_panel, left_panel_columns, 1,
MEMORY OFFSET:     -0x18     -24  >>-16

0x51cf:	movsxd rcx, eax                      
0x51d2:	mov eax, dword ptr [rip + 0x2b804]   #			     tty_lines |-| 3, right_panel_columns);
MEMORY OFFSET:     0x2b804     178180  >>178188

0x51d8:	sub eax, 3                           
0x51db:	movsxd rdx, eax                      #		|p|anel_resize(src_panel, left_panel_columns, 1,
0x51de:	mov eax, dword ptr [rbp - 0x14]      
MEMORY OFFSET:     -0x14     -20  >>-12

0x51e1:	movsxd rsi, eax                      
0x51e4:	mov rax, qword ptr [rip + 0x2b725]   
MEMORY OFFSET:     0x2b725     177957  >>177965

0x51eb:	mov r8, rcx                          
0x51ee:	mov rcx, rdx                         
0x51f1:	mov edx, 1                           
0x51f6:	mov rdi, rax                         
0x51f9:	call 0x11348                         
0x51fe:	mov eax, dword ptr [rbp - 0x14]      #		|p|anel_resize(dst_panel, 0, 1,
MEMORY OFFSET:     -0x14     -20  >>-12

0x5201:	movsxd rcx, eax                      
0x5204:	mov eax, dword ptr [rip + 0x2b7d2]   #			     tty_lines |-| 3, left_panel_columns);
MEMORY OFFSET:     0x2b7d2     178130  >>178138

0x520a:	sub eax, 3                           
0x520d:	movsxd rdx, eax                      #		|p|anel_resize(dst_panel, 0, 1,
0x5210:	mov rax, qword ptr [rip + 0x2b701]   
MEMORY OFFSET:     0x2b701     177921  >>177929

0x5217:	mov r8, rcx                          
0x521a:	mov rcx, rdx                         
0x521d:	mov edx, 1                           
0x5222:	mov esi, 0                           
0x5227:	mov rdi, rax                         
0x522a:	call 0x11348                         
0x522f:	jmp 0x52e6                           
0x5234:	mov eax, dword ptr [rip + 0x2b7a6]   #	    |p|anel_resize(src_panel, 0, 1, tty_lines - 3, tty_columns);
MEMORY OFFSET:     0x2b7a6     178086  >>178094

0x523a:	movsxd rcx, eax                      
0x523d:	mov eax, dword ptr [rip + 0x2b799]   #	    panel_resize(src_panel, 0, 1, tty_lines |-| 3, tty_columns);
MEMORY OFFSET:     0x2b799     178073  >>178081

0x5243:	sub eax, 3                           
0x5246:	movsxd rdx, eax                      #	    |p|anel_resize(src_panel, 0, 1, tty_lines - 3, tty_columns);
0x5249:	mov rax, qword ptr [rip + 0x2b6c0]   
MEMORY OFFSET:     0x2b6c0     177856  >>177864

0x5250:	mov r8, rcx                          
0x5253:	mov rcx, rdx                         
0x5256:	mov edx, 1                           
0x525b:	mov esi, 0                           
0x5260:	mov rdi, rax                         
0x5263:	call 0x11348                         
0x5268:	mov eax, dword ptr [rip + 0x2b772]   #	    |p|anel_resize(dst_panel, 0, 1, tty_lines - 3, tty_columns);
MEMORY OFFSET:     0x2b772     178034  >>178042

0x526e:	movsxd rcx, eax                      
0x5271:	mov eax, dword ptr [rip + 0x2b765]   #	    panel_resize(dst_panel, 0, 1, tty_lines |-| 3, tty_columns);
MEMORY OFFSET:     0x2b765     178021  >>178029

0x5277:	sub eax, 3                           
0x527a:	movsxd rdx, eax                      #	    |p|anel_resize(dst_panel, 0, 1, tty_lines - 3, tty_columns);
0x527d:	mov rax, qword ptr [rip + 0x2b694]   
MEMORY OFFSET:     0x2b694     177812  >>177820

0x5284:	mov r8, rcx                          
0x5287:	mov rcx, rdx                         
0x528a:	mov edx, 1                           
0x528f:	mov esi, 0                           
0x5294:	mov rdi, rax                         
0x5297:	call 0x11348                         
0x529c:	jmp 0x52e6                           
0x529e:	mov rax, qword ptr [rip + 0x2b66b]   #	|p|anel_resize(src_panel, 0x10000, 0x10000, 2, 80);
MEMORY OFFSET:     0x2b66b     177771  >>177779

0x52a5:	mov r8d, 0x50                        
0x52ab:	mov ecx, 2                           
0x52b0:	mov edx, 0x10000                     
0x52b5:	mov esi, 0x10000                     
0x52ba:	mov rdi, rax                         
0x52bd:	call 0x11348                         
0x52c2:	mov rax, qword ptr [rip + 0x2b64f]   #	|p|anel_resize(dst_panel, 0x10000, 0x10000, 2, 80);
MEMORY OFFSET:     0x2b64f     177743  >>177751

0x52c9:	mov r8d, 0x50                        
0x52cf:	mov ecx, 2                           
0x52d4:	mov edx, 0x10000                     
0x52d9:	mov esi, 0x10000                     
0x52de:	mov rdi, rax                         
0x52e1:	call 0x11348                         
0x52e6:	cmp dword ptr [rbp - 0x28], 0        #    |t|itle_resize(display_title ? tty_columns : 0, 0);
MEMORY OFFSET:     -0x28     -40  >>-32

0x52ea:	je 0x52f6                            
0x52ec:	mov eax, dword ptr [rip + 0x2b6ee]   #    title_resize(display_title ? tty_columns |:| 0, 0);
MEMORY OFFSET:     0x2b6ee     177902  >>177910

0x52f2:	cdqe                                 #    |t|itle_resize(display_title ? tty_columns : 0, 0);
0x52f4:	jmp 0x52fb                           
0x52f6:	mov eax, 0                           #    |t|itle_resize(display_title ? tty_columns : 0, 0);
0x52fb:	mov esi, 0                           #    |t|itle_resize(display_title ? tty_columns : 0, 0);
0x5300:	mov rdi, rax                         
0x5303:	call 0x1c4e9                         
0x5308:	mov eax, dword ptr [rip + 0x2b6ce]   #    status_resize(display_status ? tty_columns : 0, tty_lines |-| 1);
MEMORY OFFSET:     0x2b6ce     177870  >>177878

0x530e:	sub eax, 1                           
0x5311:	movsxd rdx, eax                      #    |s|tatus_resize(display_status ? tty_columns : 0, tty_lines - 1);
0x5314:	cmp dword ptr [rbp - 0x24], 0        
MEMORY OFFSET:     -0x24     -36  >>-28

0x5318:	je 0x5324                            
0x531a:	mov eax, dword ptr [rip + 0x2b6c0]   #    status_resize(display_status ? tty_columns |:| 0, tty_lines - 1);
MEMORY OFFSET:     0x2b6c0     177856  >>177864

0x5320:	cdqe                                 #    |s|tatus_resize(display_status ? tty_columns : 0, tty_lines - 1);
0x5322:	jmp 0x5329                           
0x5324:	mov eax, 0                           #    |s|tatus_resize(display_status ? tty_columns : 0, tty_lines - 1);
0x5329:	mov rsi, rdx                         #    |s|tatus_resize(display_status ? tty_columns : 0, tty_lines - 1);
0x532c:	mov rdi, rax                         
0x532f:	call 0x10167                         
0x5334:	mov eax, dword ptr [rip + 0x2b6a2]   #    il_resize(tty_columns, (tty_lines |=|= 1) ? 0 : (tty_lines - 2));
MEMORY OFFSET:     0x2b6a2     177826  >>177834

0x533a:	cmp eax, 1                           #    |i|l_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines - 2));
0x533d:	je 0x534a                            
0x533f:	mov eax, dword ptr [rip + 0x2b697]   #    il_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines |-| 2));
MEMORY OFFSET:     0x2b697     177815  >>177823

0x5345:	lea edx, [rax - 2]                   #    |i|l_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines - 2));
MEMORY OFFSET:     -0x2     -2  >>6

0x5348:	jmp 0x534f                           
0x534a:	mov edx, 0                           #    |i|l_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines - 2));
0x534f:	mov eax, dword ptr [rip + 0x2b68b]   #    |i|l_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines - 2));
MEMORY OFFSET:     0x2b68b     177803  >>177811

0x5355:	mov esi, edx                         
0x5357:	mov edi, eax                         
0x5359:	call 0xe1a9                          
0x535e:	jmp 0x5361                           
0x5360:	nop                                  #	    |r|eturn;
0x5361:	mov rbx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x5365:	leave                                
0x5366:	ret                                  
0x5367:	endbr64                              #|{|
0x536b:	push rbp                             
0x536c:	mov rbp, rsp                         
0x536f:	sub rsp, 0x10                        
0x5373:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0x5376:	mov edi, 0                           #    |r|esize(0);
0x537b:	mov eax, 0                           
0x5380:	call 0x503a                          
0x5385:	cmp dword ptr [rbp - 4], 0x12        #    if |(|signum == SIGCONT)
MEMORY OFFSET:     -0x4     -4  >>4

0x5389:	jne 0x539f                           
0x538b:	mov edi, 1                           #	|t|ty_set_mode(TTY_NONCANONIC);
0x5390:	call 0xadac                          
0x5395:	mov eax, 0                           #	|t|ty_defaults();
0x539a:	call 0xc083                          
0x539f:	mov eax, dword ptr [rip + 0x2b543]   #    if (|w|ait_msg)
MEMORY OFFSET:     0x2b543     177475  >>177483

0x53a5:	test eax, eax                        #    if |(|wait_msg)
0x53a7:	jne 0x549f                           
0x53ad:	mov rax, qword ptr [rip + 0x2b55c]   #    |p|anel_no_optimizations(src_panel);
MEMORY OFFSET:     0x2b55c     177500  >>177508

0x53b4:	mov rdi, rax                         
0x53b7:	call 0x110b0                         
0x53bc:	mov rax, qword ptr [rip + 0x2b555]   #    |p|anel_no_optimizations(dst_panel);
MEMORY OFFSET:     0x2b555     177493  >>177501

0x53c3:	mov rdi, rax                         
0x53c6:	call 0x110b0                         
0x53cb:	mov rax, qword ptr [rip + 0x2b53e]   #    |p|anel_center_current_entry(src_panel);
MEMORY OFFSET:     0x2b53e     177470  >>177478

0x53d2:	mov rdi, rax                         
0x53d5:	call 0x112ef                         
0x53da:	mov rax, qword ptr [rip + 0x2b537]   #    |p|anel_center_current_entry(dst_panel);
MEMORY OFFSET:     0x2b537     177463  >>177471

0x53e1:	mov rdi, rax                         
0x53e4:	call 0x112ef                         
0x53e9:	mov eax, dword ptr [rip + 0x2b4f1]   #    if (current_mode |=|= GIT_SCREEN_MODE)
MEMORY OFFSET:     0x2b4f1     177393  >>177401

0x53ef:	test eax, eax                        #    if |(|current_mode == GIT_SCREEN_MODE)
0x53f1:	jne 0x5449                           
0x53f3:	mov eax, 0                           #	if (!|p|anels_can_be_displayed())
0x53f8:	call 0x4fd9                          
0x53fd:	test eax, eax                        #	if |(|!panels_can_be_displayed())
0x53ff:	jne 0x5415                           
0x5401:	mov eax, 0                           #	    |t|ty_defaults();
0x5406:	call 0xc083                          
0x540b:	mov eax, 0                           #	    |t|ty_clear();
0x5410:	call 0xb8a5                          
0x5415:	mov eax, 0                           #	|t|itle_update();
0x541a:	call 0x1c9f4                         
0x541f:	mov rax, qword ptr [rip + 0x2b4ea]   #	|p|anel_update(src_panel);
MEMORY OFFSET:     0x2b4ea     177386  >>177394

0x5426:	mov rdi, rax                         
0x5429:	call 0x14e6a                         
0x542e:	mov eax, dword ptr [rip + 0x29bf4]   #	if (|t|wo_panel_mode)
MEMORY OFFSET:     0x29bf4     170996  >>171004

0x5434:	test eax, eax                        #	if |(|two_panel_mode)
0x5436:	je 0x5458                            
0x5438:	mov rax, qword ptr [rip + 0x2b4d9]   #	    |p|anel_update(dst_panel);
MEMORY OFFSET:     0x2b4d9     177369  >>177377

0x543f:	mov rdi, rax                         
0x5442:	call 0x14e6a                         
0x5447:	jmp 0x5458                           
0x5449:	mov rax, qword ptr [rip + 0x2b4a8]   #	|t|ty_put_screen(screen);
MEMORY OFFSET:     0x2b4a8     177320  >>177328

0x5450:	mov rdi, rax                         
0x5453:	call 0xce57                          
0x5458:	mov eax, 0                           #    |s|tatus_update();
0x545d:	call 0x106d4                         
0x5462:	mov eax, 0                           #    |i|l_update();
0x5467:	call 0xf8eb                          
0x546c:	mov eax, 0                           #    |i|l_update_point();
0x5471:	call 0xf768                          
0x5476:	mov eax, 0                           #    |t|ty_update();
0x547b:	call 0xb4b7                          
0x5480:	cmp dword ptr [rbp - 4], 0x12        #    if |(|signum == SIGCONT)
MEMORY OFFSET:     -0x4     -4  >>4

0x5484:	jne 0x54a0                           
0x5486:	mov rax, qword ptr [rip + 0x2b483]   #	|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x2b483     177283  >>177291

0x548d:	mov rdi, rax                         
0x5490:	call 0x1504f                         
0x5495:	mov rdi, rax                         
0x5498:	call 0xd875                          
0x549d:	jmp 0x54a0                           
0x549f:	nop                                  #	|r|eturn;
0x54a0:	leave                                #|}|
0x54a1:	ret                                  
0x54a2:	endbr64                              #|{|
0x54a6:	push rbp                             
0x54a7:	mov rbp, rsp                         
0x54aa:	sub rsp, 0x30                        
0x54ae:	mov qword ptr [rbp - 0x28], rdi      
MEMORY OFFSET:     -0x28     -40  >>-32

0x54b2:	mov eax, 0                           #    char *prev = |t|ty_get_previous_key_seq();
0x54b7:	call 0xc855                          
0x54bc:	mov qword ptr [rbp - 0x20], rax      
MEMORY OFFSET:     -0x20     -32  >>-24

0x54c0:	mov rax, qword ptr [rbp - 0x20]      #    size_t length = |s|trlen(prev);
MEMORY OFFSET:     -0x20     -32  >>-24

0x54c4:	mov rdi, rax                         
0x54c7:	call 0x4960                          
0x54cc:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0x54d0:	cmp qword ptr [rbp - 0x18], 0        #    if |(|length && (prev[length - 1] != key_INTERRUPT))
MEMORY OFFSET:     -0x18     -24  >>-16

0x54d5:	je 0x5582                            
0x54db:	mov rax, qword ptr [rbp - 0x18]      #    if (length && (prev|[|length - 1] != key_INTERRUPT))
MEMORY OFFSET:     -0x18     -24  >>-16

0x54df:	lea rdx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0x54e3:	mov rax, qword ptr [rbp - 0x20]      
MEMORY OFFSET:     -0x20     -32  >>-24

0x54e7:	add rax, rdx                         
0x54ea:	movzx eax, byte ptr [rax]            
0x54ed:	cmp al, 7                            #    if (length |&|& (prev[length - 1] != key_INTERRUPT))
0x54ef:	je 0x5582                            
0x54f5:	mov rax, qword ptr [rbp - 0x20]      #	char *str = (char *)|t|ty_key_machine2human(prev);
MEMORY OFFSET:     -0x20     -32  >>-24

0x54f9:	mov rdi, rax                         
0x54fc:	call 0xb2c6                          
0x5501:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0x5505:	mov rax, qword ptr [rbp - 0x10]      #	char *buf = xmalloc(128 + |s|trlen(str));
MEMORY OFFSET:     -0x10     -16  >>-8

0x5509:	mov rdi, rax                         
0x550c:	call 0x4960                          
0x5511:	sub rax, -0x80                       #	char *buf = |x|malloc(128 + strlen(str));
0x5515:	mov rdi, rax                         
0x5518:	call 0x24650                         
0x551d:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x5521:	mov rdx, qword ptr [rbp - 0x10]      #	|s|printf(buf, "%s: not defined.", str);
MEMORY OFFSET:     -0x10     -16  >>-8

0x5525:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0x5529:	lea rcx, [rip + 0x21c34]             
MEMORY OFFSET:     0x21c34     138292  >>138300

0x5530:	mov rsi, rcx                         
0x5533:	mov rdi, rax                         
0x5536:	mov eax, 0                           
0x553b:	call 0x4dd0                          
0x5540:	mov rax, qword ptr [rbp - 8]         #	|s|tatus(buf, STATUS_ERROR, STATUS_LEFT);
MEMORY OFFSET:     -0x8     -8  >>0

0x5544:	mov edx, 1                           
0x5549:	mov esi, 2                           
0x554e:	mov rdi, rax                         
0x5551:	call 0x107d0                         
0x5556:	mov rax, qword ptr [rbp - 8]         #	|x|free(buf);
MEMORY OFFSET:     -0x8     -8  >>0

0x555a:	mov rdi, rax                         
0x555d:	call 0x1eeae                         
0x5562:	mov eax, 0                           #	|t|ty_beep();
0x5567:	call 0xbfbf                          
0x556c:	mov eax, 0                           #	|t|ty_update();
0x5571:	call 0xb4b7                          
0x5576:	mov edi, 1                           #	|s|leep(1);
0x557b:	call 0x4e70                          
0x5580:	jmp 0x558c                           #    |{|
0x5582:	mov eax, 0                           #	|t|ty_beep();
0x5587:	call 0xbfbf                          
0x558c:	cmp qword ptr [rbp - 0x28], 0        #    if |(|status_message)
MEMORY OFFSET:     -0x28     -40  >>-32

0x5591:	je 0x55ab                            
0x5593:	mov rax, qword ptr [rbp - 0x28]      #	|s|tatus(status_message, STATUS_OK, STATUS_CENTERED);
MEMORY OFFSET:     -0x28     -40  >>-32

0x5597:	mov edx, 0                           
0x559c:	mov esi, 0                           
0x55a1:	mov rdi, rax                         
0x55a4:	call 0x107d0                         
0x55a9:	jmp 0x55b5                           
0x55ab:	mov eax, 0                           #	|s|tatus_default();
0x55b0:	call 0x10857                         
0x55b5:	mov eax, 0                           #    |i|l_update_point();
0x55ba:	call 0xf768                          
0x55bf:	mov eax, 0                           #    |t|ty_update();
0x55c4:	call 0xb4b7                          
0x55c9:	nop                                  #|}|
0x55ca:	leave                                
0x55cb:	ret                                  
0x55cc:	endbr64                              #|{|
0x55d0:	push rbp                             
0x55d1:	mov rbp, rsp                         
0x55d4:	sub rsp, 0x20                        
0x55d8:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0x55dc:	mov qword ptr [rbp - 0x20], rsi      
MEMORY OFFSET:     -0x20     -32  >>-24

0x55e0:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0x55e9:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x55ed:	xor eax, eax                         
0x55ef:	lea rcx, [rbp - 0x10]                #    if (|x|stack_preview(history, &history_text, 1) &&
MEMORY OFFSET:     -0x10     -16  >>-8

0x55f3:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0x55f7:	mov edx, 1                           
0x55fc:	mov rsi, rcx                         
0x55ff:	mov rdi, rax                         
0x5602:	call 0x1f4b1                         
0x5607:	test rax, rax                        #    if |(|xstack_preview(history, &history_text, 1) &&
0x560a:	je 0x5623                            
0x560c:	mov rax, qword ptr [rbp - 0x10]      #	|s|trcmp(history_text, text) == 0)
MEMORY OFFSET:     -0x10     -16  >>-8

0x5610:	mov rdx, qword ptr [rbp - 0x20]      
MEMORY OFFSET:     -0x20     -32  >>-24

0x5614:	mov rsi, rdx                         
0x5617:	mov rdi, rax                         
0x561a:	call 0x4af0                          
0x561f:	test eax, eax                        #    if (xstack_preview(history, &history_text, 1) |&|&
0x5621:	je 0x5648                            
0x5623:	mov rax, qword ptr [rbp - 0x20]      #    history_text = |x|strdup(text);
MEMORY OFFSET:     -0x20     -32  >>-24

0x5627:	mov rdi, rax                         
0x562a:	call 0x24780                         
0x562f:	mov qword ptr [rbp - 0x10], rax      #    history_text |=| xstrdup(text);
MEMORY OFFSET:     -0x10     -16  >>-8

0x5633:	lea rdx, [rbp - 0x10]                #    |x|stack_push(history, &history_text);
MEMORY OFFSET:     -0x10     -16  >>-8

0x5637:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0x563b:	mov rsi, rdx                         
0x563e:	mov rdi, rax                         
0x5641:	call 0x1f381                         
0x5646:	jmp 0x5649                           
0x5648:	nop                                  #	|r|eturn;
0x5649:	mov rax, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x564d:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0x5656:	je 0x565d                            
0x5658:	call 0x4980                          
0x565d:	leave                                
0x565e:	ret                                  
0x565f:	endbr64                              #|{|
0x5663:	push rbp                             
0x5664:	mov rbp, rsp                         
0x5667:	sub rsp, 0x20                        
0x566b:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0x566f:	mov dword ptr [rbp - 0x1c], esi      
MEMORY OFFSET:     -0x1c     -28  >>-20

0x5672:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0x567b:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x567f:	xor eax, eax                         
0x5681:	mov edx, dword ptr [rbp - 0x1c]      #    return |x|stack_preview(history, &history_text, offset) ?
MEMORY OFFSET:     -0x1c     -28  >>-20

0x5684:	lea rcx, [rbp - 0x10]                
MEMORY OFFSET:     -0x10     -16  >>-8

0x5688:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0x568c:	mov rsi, rcx                         
0x568f:	mov rdi, rax                         
0x5692:	call 0x1f4b1                         
0x5697:	test rax, rax                        #	   history_text |:| NULL;
0x569a:	je 0x56a2                            
0x569c:	mov rax, qword ptr [rbp - 0x10]      #	   history_text |:| NULL;
MEMORY OFFSET:     -0x10     -16  >>-8

0x56a0:	jmp 0x56a7                           
0x56a2:	mov eax, 0                           #	   history_text |:| NULL;
0x56a7:	mov rdx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x56ab:	sub rdx, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0x56b4:	je 0x56bb                            
0x56b6:	call 0x4980                          
0x56bb:	leave                                
0x56bc:	ret                                  
0x56bd:	endbr64                              #|{|
0x56c1:	push rbp                             
0x56c2:	mov rbp, rsp                         
0x56c5:	sub rsp, 0x10                        
0x56c9:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0x56cc:	mov dword ptr [rbp - 8], esi         
MEMORY OFFSET:     -0x8     -8  >>0

0x56cf:	mov eax, dword ptr [rbp - 8]         #    if ((flags |&| IL_MOVE) == 0)
MEMORY OFFSET:     -0x8     -8  >>0

0x56d2:	and eax, 2                           
0x56d5:	test eax, eax                        #    if |(|(flags & IL_MOVE) == 0)
0x56d7:	jne 0x56e3                           
0x56d9:	mov eax, 0                           #	return |0|;
0x56de:	jmp 0x5994                           
0x56e3:	mov eax, dword ptr [rbp - 4]         #    |s|witch (key)
MEMORY OFFSET:     -0x4     -4  >>4

0x56e6:	add eax, 0x42                        
0x56e9:	cmp eax, 0x17                        
0x56ec:	ja 0x5928                            
0x56f2:	mov eax, eax                         
0x56f4:	lea rdx, [rax*4]                     
0x56fc:	lea rax, [rip + 0x21ffd]             
MEMORY OFFSET:     0x21ffd     139261  >>139269

0x5703:	mov eax, dword ptr [rdx + rax]       
0x5706:	cdqe                                 
0x5708:	lea rdx, [rip + 0x21ff1]             
MEMORY OFFSET:     0x21ff1     139249  >>139257

0x570f:	add rax, rdx                         
0x5712:	jmp rax                              
0x5715:	mov eax, 0                           #	    |i|l_backward_char();
0x571a:	call 0xe4db                          
0x571f:	jmp 0x598f                           #	    |b|reak;
0x5724:	mov eax, 0                           #	    |i|l_forward_char();
0x5729:	call 0xe522                          
0x572e:	jmp 0x598f                           #	    |b|reak;
0x5733:	mov eax, 0                           #	    |i|l_backward_word();
0x5738:	call 0xe569                          
0x573d:	jmp 0x598f                           #	    |b|reak;
0x5742:	mov eax, 0                           #	    |i|l_forward_word();
0x5747:	call 0xe655                          
0x574c:	jmp 0x598f                           #	    |b|reak;
0x5751:	mov eax, 0                           #	    |i|l_beginning_of_line();
0x5756:	call 0xe739                          
0x575b:	jmp 0x598f                           #	    |b|reak;
0x5760:	mov eax, 0                           #	    |i|l_end_of_line();
0x5765:	call 0xe768                          
0x576a:	jmp 0x598f                           #	    |b|reak;
0x576f:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x5772:	and eax, 1                           
0x5775:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5777:	je 0x5967                            
0x577d:	mov eax, 0                           #		|i|l_delete_char();
0x5782:	call 0xe901                          
0x5787:	jmp 0x5967                           #	    |b|reak;
0x578c:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x578f:	and eax, 1                           
0x5792:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5794:	je 0x596a                            
0x579a:	mov eax, 0                           #		|i|l_backward_delete_char();
0x579f:	call 0xea22                          
0x57a4:	jmp 0x596a                           #	    |b|reak;
0x57a9:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x57ac:	and eax, 1                           
0x57af:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x57b1:	je 0x596d                            
0x57b7:	mov eax, 0                           #		|i|l_kill_word();
0x57bc:	call 0xeb56                          
0x57c1:	jmp 0x596d                           #	    |b|reak;
0x57c6:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x57c9:	and eax, 1                           
0x57cc:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x57ce:	je 0x5970                            
0x57d4:	mov eax, 0                           #		|i|l_backward_kill_word();
0x57d9:	call 0xec1c                          
0x57de:	jmp 0x5970                           #	    |b|reak;
0x57e3:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x57e6:	and eax, 1                           
0x57e9:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x57eb:	je 0x5973                            
0x57f1:	mov edi, 1                           #		|i|l_kill_line(IL_STORE);
0x57f6:	call 0xed98                          
0x57fb:	jmp 0x5973                           #	    |b|reak;
0x5800:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x5803:	and eax, 1                           
0x5806:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5808:	je 0x5976                            
0x580e:	mov eax, 0                           #		|i|l_kill_to_beginning_of_line();
0x5813:	call 0xedfe                          
0x5818:	jmp 0x5976                           #	    |b|reak;
0x581d:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x5820:	and eax, 1                           
0x5823:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5825:	je 0x5979                            
0x582b:	mov eax, 0                           #		|i|l_kill_to_end_of_line();
0x5830:	call 0xeea7                          
0x5835:	jmp 0x5979                           #	    |b|reak;
0x583a:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x583d:	and eax, 1                           
0x5840:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5842:	je 0x597c                            
0x5848:	mov eax, 0                           #		|i|l_just_one_space();
0x584d:	call 0xef17                          
0x5852:	jmp 0x597c                           #	    |b|reak;
0x5857:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x585a:	and eax, 1                           
0x585d:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x585f:	je 0x597f                            
0x5865:	mov eax, 0                           #		|i|l_delete_horizontal_space();
0x586a:	call 0xef64                          
0x586f:	jmp 0x597f                           #	    |b|reak;
0x5874:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x5877:	and eax, 1                           
0x587a:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x587c:	je 0x5982                            
0x5882:	mov eax, 0                           #		|i|l_downcase_word();
0x5887:	call 0xf009                          
0x588c:	jmp 0x5982                           #	    |b|reak;
0x5891:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x5894:	and eax, 1                           
0x5897:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5899:	je 0x5985                            
0x589f:	mov eax, 0                           #		|i|l_upcase_word();
0x58a4:	call 0xf0af                          
0x58a9:	jmp 0x5985                           #	    |b|reak;
0x58ae:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x58b1:	and eax, 1                           
0x58b4:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x58b6:	je 0x5988                            
0x58bc:	mov eax, 0                           #		|i|l_capitalize_word();
0x58c1:	call 0xf155                          
0x58c6:	jmp 0x5988                           #	    |b|reak;
0x58cb:	mov eax, 0                           #	    |i|l_set_mark();
0x58d0:	call 0xe3ee                          
0x58d5:	jmp 0x598f                           #	    |b|reak;
0x58da:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x58dd:	and eax, 1                           
0x58e0:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x58e2:	je 0x598b                            
0x58e8:	mov eax, 0                           #		|i|l_kill_region();
0x58ed:	call 0xe40f                          
0x58f2:	jmp 0x598b                           #	    |b|reak;
0x58f7:	mov eax, 0                           #	    |i|l_kill_ring_save();
0x58fc:	call 0xe437                          
0x5901:	jmp 0x598f                           #	    |b|reak;
0x5906:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
MEMORY OFFSET:     -0x8     -8  >>0

0x5909:	and eax, 1                           
0x590c:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x590e:	je 0x598e                            
0x5910:	mov eax, 0                           #		|i|l_yank();
0x5915:	call 0xe45f                          
0x591a:	jmp 0x598e                           #	    |b|reak;
0x591c:	mov eax, 0                           #	    |i|l_exchange_point_and_mark();
0x5921:	call 0xe49b                          
0x5926:	jmp 0x598f                           #	    |b|reak;
0x5928:	mov eax, dword ptr [rbp - 8]         #	    if ((flags |&| IL_EDIT) && isprint(key))
MEMORY OFFSET:     -0x8     -8  >>0

0x592b:	and eax, 1                           
0x592e:	test eax, eax                        #	    if |(|(flags & IL_EDIT) && isprint(key))
0x5930:	je 0x5960                            
0x5932:	call 0x4ec0                          #	    if ((flags & IL_EDIT) && |i|sprint(key))
0x5937:	mov rdx, qword ptr [rax]             
0x593a:	mov eax, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0x593d:	cdqe                                 
0x593f:	add rax, rax                         
0x5942:	add rax, rdx                         
0x5945:	movzx eax, word ptr [rax]            
0x5948:	movzx eax, ax                        
0x594b:	and eax, 0x4000                      
0x5950:	test eax, eax                        #	    if ((flags & IL_EDIT) |&|& isprint(key))
0x5952:	je 0x5960                            
0x5954:	mov eax, dword ptr [rbp - 4]         #		|i|l_insert_char(key);
MEMORY OFFSET:     -0x4     -4  >>4

0x5957:	mov edi, eax                         
0x5959:	call 0xe797                          
0x595e:	jmp 0x598f                           #	    |b|reak;
0x5960:	mov eax, 0                           #		return |0|;
0x5965:	jmp 0x5994                           
0x5967:	nop                                  #	    |b|reak;
0x5968:	jmp 0x598f                           
0x596a:	nop                                  #	    |b|reak;
0x596b:	jmp 0x598f                           
0x596d:	nop                                  #	    |b|reak;
0x596e:	jmp 0x598f                           
0x5970:	nop                                  #	    |b|reak;
0x5971:	jmp 0x598f                           
0x5973:	nop                                  #	    |b|reak;
0x5974:	jmp 0x598f                           
0x5976:	nop                                  #	    |b|reak;
0x5977:	jmp 0x598f                           
0x5979:	nop                                  #	    |b|reak;
0x597a:	jmp 0x598f                           
0x597c:	nop                                  #	    |b|reak;
0x597d:	jmp 0x598f                           
0x597f:	nop                                  #	    |b|reak;
0x5980:	jmp 0x598f                           
0x5982:	nop                                  #	    |b|reak;
0x5983:	jmp 0x598f                           
0x5985:	nop                                  #	    |b|reak;
0x5986:	jmp 0x598f                           
0x5988:	nop                                  #	    |b|reak;
0x5989:	jmp 0x598f                           
0x598b:	nop                                  #	    |b|reak;
0x598c:	jmp 0x598f                           
0x598e:	nop                                  #	    |b|reak;
0x598f:	mov eax, 1                           #    return |1|;
0x5994:	leave                                #|}|
0x5995:	ret                                  
0x5996:	endbr64                              #|{|
0x599a:	push rbp                             
0x599b:	mov rbp, rsp                         
0x599e:	sub rsp, 0x30                        
0x59a2:	mov qword ptr [rbp - 0x28], rdi      
MEMORY OFFSET:     -0x28     -40  >>-32

0x59a6:	cmp qword ptr [rbp - 0x28], 0        #    if |(|text == NULL)
MEMORY OFFSET:     -0x28     -40  >>-32

0x59ab:	jne 0x59b7                           
0x59ad:	mov eax, 0                           #	return |N|ULL;
0x59b2:	jmp 0x5ae7                           
0x59b7:	mov rax, qword ptr [rbp - 0x28]      #    fixed_text = xmalloc(fixed_text_length = (|s|trlen(text) + 1));
MEMORY OFFSET:     -0x28     -40  >>-32

0x59bb:	mov rdi, rax                         
0x59be:	call 0x4960                          
0x59c3:	add rax, 1                           #    fixed_text = |x|malloc(fixed_text_length = (strlen(text) + 1));
0x59c7:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x59cb:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0x59cf:	mov rdi, rax                         
0x59d2:	call 0x24650                         
0x59d7:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0x59db:	mov dword ptr [rbp - 0x18], 0        #    for (i |=| 0, j = 0; text[i]; i++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x59e2:	mov dword ptr [rbp - 0x14], 0        #    for (i = 0, j |=| 0; text[i]; i++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x59e9:	jmp 0x5abb                           #    |f|or (i = 0, j = 0; text[i]; i++)
0x59ee:	mov eax, dword ptr [rbp - 0x18]      #	if (text|[|i] == '\t')
MEMORY OFFSET:     -0x18     -24  >>-16

0x59f1:	movsxd rdx, eax                      
0x59f4:	mov rax, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0x59f8:	add rax, rdx                         
0x59fb:	movzx eax, byte ptr [rax]            
0x59fe:	cmp al, 9                            #	if |(|text[i] == '\t')
0x5a00:	jne 0x5a48                           
0x5a02:	add qword ptr [rbp - 8], 8           #	    fixed_text = |x|realloc(fixed_text, fixed_text_length += 8);
MEMORY OFFSET:     -0x8     -8  >>0

0x5a07:	mov rdx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0x5a0b:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0x5a0f:	mov rsi, rdx                         
0x5a12:	mov rdi, rax                         
0x5a15:	call 0x24670                         
0x5a1a:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0x5a1e:	mov eax, dword ptr [rbp - 0x14]      #	    |m|emcpy(&fixed_text[j], "        ", 8);
MEMORY OFFSET:     -0x14     -20  >>-12

0x5a21:	movsxd rdx, eax                      
0x5a24:	mov rax, qword ptr [rbp - 0x10]      #	    memcpy(|&|fixed_text[j], "        ", 8);
MEMORY OFFSET:     -0x10     -16  >>-8

0x5a28:	add rax, rdx                         
0x5a2b:	mov edx, 8                           #	    |m|emcpy(&fixed_text[j], "        ", 8);
0x5a30:	lea rcx, [rip + 0x2173e]             
MEMORY OFFSET:     0x2173e     137022  >>137030

0x5a37:	mov rsi, rcx                         
0x5a3a:	mov rdi, rax                         
0x5a3d:	call 0x4b70                          
0x5a42:	add dword ptr [rbp - 0x14], 8        #	    j |+|= 8;
MEMORY OFFSET:     -0x14     -20  >>-12

0x5a46:	jmp 0x5ab7                           
0x5a48:	call 0x4ec0                          #	    if (|i|sprint((int)text[i]))
0x5a4d:	mov rdx, qword ptr [rax]             
0x5a50:	mov eax, dword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5a53:	movsxd rcx, eax                      
0x5a56:	mov rax, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0x5a5a:	add rax, rcx                         
0x5a5d:	movzx eax, byte ptr [rax]            
0x5a60:	movsx rax, al                        
0x5a64:	add rax, rax                         
0x5a67:	add rax, rdx                         
0x5a6a:	movzx eax, word ptr [rax]            
0x5a6d:	movzx eax, ax                        
0x5a70:	and eax, 0x4000                      
0x5a75:	test eax, eax                        #	    if |(|isprint((int)text[i]))
0x5a77:	je 0x5aa1                            
0x5a79:	mov eax, dword ptr [rbp - 0x18]      #		fixed_text[j++] = text|[|i];
MEMORY OFFSET:     -0x18     -24  >>-16

0x5a7c:	movsxd rdx, eax                      
0x5a7f:	mov rax, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0x5a83:	lea rcx, [rdx + rax]                 
0x5a87:	mov eax, dword ptr [rbp - 0x14]      #		fixed_text[j|+|+] = text[i];
MEMORY OFFSET:     -0x14     -20  >>-12

0x5a8a:	lea edx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5a8d:	mov dword ptr [rbp - 0x14], edx      
MEMORY OFFSET:     -0x14     -20  >>-12

0x5a90:	movsxd rdx, eax                      
0x5a93:	mov rax, qword ptr [rbp - 0x10]      #		fixed_text|[|j++] = text[i];
MEMORY OFFSET:     -0x10     -16  >>-8

0x5a97:	add rdx, rax                         
0x5a9a:	movzx eax, byte ptr [rcx]            #		fixed_text[j++] = text|[|i];
0x5a9d:	mov byte ptr [rdx], al               #		fixed_text[j++] |=| text[i];
0x5a9f:	jmp 0x5ab7                           
0x5aa1:	mov eax, dword ptr [rbp - 0x14]      #		fixed_text[j|+|+] = '?';
MEMORY OFFSET:     -0x14     -20  >>-12

0x5aa4:	lea edx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5aa7:	mov dword ptr [rbp - 0x14], edx      
MEMORY OFFSET:     -0x14     -20  >>-12

0x5aaa:	movsxd rdx, eax                      
0x5aad:	mov rax, qword ptr [rbp - 0x10]      #		fixed_text|[|j++] = '?';
MEMORY OFFSET:     -0x10     -16  >>-8

0x5ab1:	add rax, rdx                         
0x5ab4:	mov byte ptr [rax], 0x3f             #		fixed_text[j++] |=| '?';
0x5ab7:	add dword ptr [rbp - 0x18], 1        #    for (i = 0, j = 0; text[i]; i|+|+)
MEMORY OFFSET:     -0x18     -24  >>-16

0x5abb:	mov eax, dword ptr [rbp - 0x18]      #    for (i = 0, j = 0; text|[|i]; i++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x5abe:	movsxd rdx, eax                      
0x5ac1:	mov rax, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0x5ac5:	add rax, rdx                         
0x5ac8:	movzx eax, byte ptr [rax]            
0x5acb:	test al, al                          #    for (i = 0, j = 0; |t|ext[i]; i++)
0x5acd:	jne 0x59ee                           
0x5ad3:	mov eax, dword ptr [rbp - 0x14]      #    fixed_text|[|j] = 0;
MEMORY OFFSET:     -0x14     -20  >>-12

0x5ad6:	movsxd rdx, eax                      
0x5ad9:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0x5add:	add rax, rdx                         
0x5ae0:	mov byte ptr [rax], 0                #    fixed_text[j] |=| 0;
0x5ae3:	mov rax, qword ptr [rbp - 0x10]      #    return |f|ixed_text;
MEMORY OFFSET:     -0x10     -16  >>-8

0x5ae7:	leave                                #|}|
0x5ae8:	ret                                  
0x5ae9:	endbr64                              #|{|
0x5aed:	push rbp                             
0x5aee:	mov rbp, rsp                         
0x5af1:	sub rsp, 0x30                        
0x5af5:	mov qword ptr [rbp - 0x28], rdi      
MEMORY OFFSET:     -0x28     -40  >>-32

0x5af9:	mov qword ptr [rbp - 0x18], 0        #    size_t |l|en = 0;
MEMORY OFFSET:     -0x18     -24  >>-16

0x5b01:	mov rax, qword ptr [rbp - 0x28]      #    char *|o|ptions_ptr = options;
MEMORY OFFSET:     -0x28     -40  >>-32

0x5b05:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0x5b09:	mov rax, qword ptr [rbp - 0x28]      #    char *help = xmalloc(1 + |s|trlen(options) * 3 + 8);
MEMORY OFFSET:     -0x28     -40  >>-32

0x5b0d:	mov rdi, rax                         
0x5b10:	call 0x4960                          
0x5b15:	mov rdx, rax                         
0x5b18:	mov rax, rdx                         #    char *help = xmalloc(1 + strlen(options) |*| 3 + 8);
0x5b1b:	add rax, rax                         
0x5b1e:	add rax, rdx                         
0x5b21:	add rax, 9                           #    char *help = |x|malloc(1 + strlen(options) * 3 + 8);
0x5b25:	mov rdi, rax                         
0x5b28:	call 0x24650                         
0x5b2d:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x5b31:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = '(';
MEMORY OFFSET:     -0x18     -24  >>-16

0x5b35:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5b39:	mov qword ptr [rbp - 0x18], rdx      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5b3d:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = '(';
MEMORY OFFSET:     -0x8     -8  >>0

0x5b41:	add rax, rdx                         
0x5b44:	mov byte ptr [rax], 0x28             #    help[len++] |=| '(';
0x5b47:	jmp 0x5b96                           #    |f|or (; *(options_ptr + 1); options_ptr++)
0x5b49:	mov rax, qword ptr [rbp - 0x18]      #	help[len|+|+] = *options_ptr;
MEMORY OFFSET:     -0x18     -24  >>-16

0x5b4d:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5b51:	mov qword ptr [rbp - 0x18], rdx      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5b55:	mov rdx, qword ptr [rbp - 8]         #	help|[|len++] = *options_ptr;
MEMORY OFFSET:     -0x8     -8  >>0

0x5b59:	add rdx, rax                         
0x5b5c:	mov rax, qword ptr [rbp - 0x10]      #	help[len++] = |*|options_ptr;
MEMORY OFFSET:     -0x10     -16  >>-8

0x5b60:	movzx eax, byte ptr [rax]            
0x5b63:	mov byte ptr [rdx], al               #	help[len++] |=| *options_ptr;
0x5b65:	mov rax, qword ptr [rbp - 0x18]      #	help[len|+|+] = ',';
MEMORY OFFSET:     -0x18     -24  >>-16

0x5b69:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5b6d:	mov qword ptr [rbp - 0x18], rdx      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5b71:	mov rdx, qword ptr [rbp - 8]         #	help|[|len++] = ',';
MEMORY OFFSET:     -0x8     -8  >>0

0x5b75:	add rax, rdx                         
0x5b78:	mov byte ptr [rax], 0x2c             #	help[len++] |=| ',';
0x5b7b:	mov rax, qword ptr [rbp - 0x18]      #	help[len|+|+] = ' ';
MEMORY OFFSET:     -0x18     -24  >>-16

0x5b7f:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5b83:	mov qword ptr [rbp - 0x18], rdx      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5b87:	mov rdx, qword ptr [rbp - 8]         #	help|[|len++] = ' ';
MEMORY OFFSET:     -0x8     -8  >>0

0x5b8b:	add rax, rdx                         
0x5b8e:	mov byte ptr [rax], 0x20             #	help[len++] |=| ' ';
0x5b91:	add qword ptr [rbp - 0x10], 1        #    for (; *(options_ptr + 1); options_ptr|+|+)
MEMORY OFFSET:     -0x10     -16  >>-8

0x5b96:	mov rax, qword ptr [rbp - 0x10]      #    for (; *(options_ptr |+| 1); options_ptr++)
MEMORY OFFSET:     -0x10     -16  >>-8

0x5b9a:	add rax, 1                           
0x5b9e:	movzx eax, byte ptr [rax]            #    for (; |*|(options_ptr + 1); options_ptr++)
0x5ba1:	test al, al                          
0x5ba3:	jne 0x5b49                           
0x5ba5:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = *options_ptr;
MEMORY OFFSET:     -0x18     -24  >>-16

0x5ba9:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5bad:	mov qword ptr [rbp - 0x18], rdx      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5bb1:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = *options_ptr;
MEMORY OFFSET:     -0x8     -8  >>0

0x5bb5:	add rdx, rax                         
0x5bb8:	mov rax, qword ptr [rbp - 0x10]      #    help[len++] = |*|options_ptr;
MEMORY OFFSET:     -0x10     -16  >>-8

0x5bbc:	movzx eax, byte ptr [rax]            
0x5bbf:	mov byte ptr [rdx], al               #    help[len++] |=| *options_ptr;
0x5bc1:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = ')';
MEMORY OFFSET:     -0x18     -24  >>-16

0x5bc5:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5bc9:	mov qword ptr [rbp - 0x18], rdx      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5bcd:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = ')';
MEMORY OFFSET:     -0x8     -8  >>0

0x5bd1:	add rax, rdx                         
0x5bd4:	mov byte ptr [rax], 0x29             #    help[len++] |=| ')';
0x5bd7:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = ' ';
MEMORY OFFSET:     -0x18     -24  >>-16

0x5bdb:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5bdf:	mov qword ptr [rbp - 0x18], rdx      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5be3:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = ' ';
MEMORY OFFSET:     -0x8     -8  >>0

0x5be7:	add rax, rdx                         
0x5bea:	mov byte ptr [rax], 0x20             #    help[len++] |=| ' ';
0x5bed:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = '\0';
MEMORY OFFSET:     -0x18     -24  >>-16

0x5bf1:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x5bf5:	mov qword ptr [rbp - 0x18], rdx      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5bf9:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = '\0';
MEMORY OFFSET:     -0x8     -8  >>0

0x5bfd:	add rax, rdx                         
0x5c00:	mov byte ptr [rax], 0                #    help[len++] |=| '\0';
0x5c03:	mov rax, qword ptr [rbp - 8]         #    return |h|elp;
MEMORY OFFSET:     -0x8     -8  >>0

0x5c07:	leave                                #|}|
0x5c08:	ret                                  
0x5c09:	endbr64                              #|{|
0x5c0d:	push rbp                             
0x5c0e:	mov rbp, rsp                         
0x5c11:	sub rsp, 0x60                        
0x5c15:	mov qword ptr [rbp - 0x48], rdi      
MEMORY OFFSET:     -0x48     -72  >>-64

0x5c19:	mov qword ptr [rbp - 0x50], rsi      
MEMORY OFFSET:     -0x50     -80  >>-72

0x5c1d:	mov dword ptr [rbp - 0x54], edx      
MEMORY OFFSET:     -0x54     -84  >>-76

0x5c20:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0x5c29:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x5c2d:	xor eax, eax                         
0x5c2f:	mov qword ptr [rbp - 0x30], 0        #    input_line_t *|s|aved_il = NULL;
MEMORY OFFSET:     -0x30     -48  >>-40

0x5c37:	mov eax, dword ptr [rbp - 0x54]      #    if (flags |&| IL_SAVE)
MEMORY OFFSET:     -0x54     -84  >>-76

0x5c3a:	and eax, 0x10                        
0x5c3d:	test eax, eax                        #    if |(|flags & IL_SAVE)
0x5c3f:	je 0x5c4f                            
0x5c41:	mov eax, 0                           #	saved_il = |i|l_save();
0x5c46:	call 0xe205                          
0x5c4b:	mov qword ptr [rbp - 0x30], rax      
MEMORY OFFSET:     -0x30     -48  >>-40

0x5c4f:	mov eax, 0                           #    |i|l_reset_line();
0x5c54:	call 0xece2                          
0x5c59:	cmp qword ptr [rbp - 0x48], 0        #    if |(|message)
MEMORY OFFSET:     -0x48     -72  >>-64

0x5c5e:	je 0x5cf2                            
0x5c64:	mov rax, qword ptr [rbp - 0x48]      #	char *text = |i|l_fix_text(message);
MEMORY OFFSET:     -0x48     -72  >>-64

0x5c68:	mov rdi, rax                         
0x5c6b:	call 0x5996                          
0x5c70:	mov qword ptr [rbp - 0x28], rax      
MEMORY OFFSET:     -0x28     -40  >>-32

0x5c74:	mov eax, dword ptr [rbp - 0x54]      #	if (flags |&| IL_ERROR)
MEMORY OFFSET:     -0x54     -84  >>-76

0x5c77:	and eax, 8                           
0x5c7a:	test eax, eax                        #	if |(|flags & IL_ERROR)
0x5c7c:	je 0x5c97                            
0x5c7e:	lea rax, [rip + 0x214f9]             #	    |i|l_insert_text("*** ");
MEMORY OFFSET:     0x214f9     136441  >>136449

0x5c85:	mov rdi, rax                         
0x5c88:	call 0xf433                          
0x5c8d:	mov edi, 1                           #	    |i|l_set_error_flag(1);
0x5c92:	call 0xfd0b                          
0x5c97:	mov rax, qword ptr [rbp - 0x28]      #	|i|l_insert_text(text);
MEMORY OFFSET:     -0x28     -40  >>-32

0x5c9b:	mov rdi, rax                         
0x5c9e:	call 0xf433                          
0x5ca3:	mov eax, dword ptr [rbp - 0x54]      #	if (flags |&| IL_HOME)
MEMORY OFFSET:     -0x54     -84  >>-76

0x5ca6:	and eax, 0x20                        
0x5ca9:	test eax, eax                        #	if |(|flags & IL_HOME)
0x5cab:	je 0x5cb7                            
0x5cad:	mov eax, 0                           #	    |i|l_beginning_of_line();
0x5cb2:	call 0xe739                          
0x5cb7:	mov rax, qword ptr [rbp - 0x28]      #	|x|free(text);
MEMORY OFFSET:     -0x28     -40  >>-32

0x5cbb:	mov rdi, rax                         
0x5cbe:	call 0x1eeae                         
0x5cc3:	cmp qword ptr [rbp - 0x50], 0        #	if |(|options)
MEMORY OFFSET:     -0x50     -80  >>-72

0x5cc8:	je 0x5cf2                            
0x5cca:	mov rax, qword ptr [rbp - 0x50]      #	    help = |i|l_build_help_from_string(options);
MEMORY OFFSET:     -0x50     -80  >>-72

0x5cce:	mov rdi, rax                         
0x5cd1:	call 0x5ae9                          
0x5cd6:	mov qword ptr [rbp - 0x20], rax      
MEMORY OFFSET:     -0x20     -32  >>-24

0x5cda:	mov rax, qword ptr [rbp - 0x20]      #	    |i|l_insert_text(help);
MEMORY OFFSET:     -0x20     -32  >>-24

0x5cde:	mov rdi, rax                         
0x5ce1:	call 0xf433                          
0x5ce6:	mov rax, qword ptr [rbp - 0x20]      #	    |x|free(help);
MEMORY OFFSET:     -0x20     -32  >>-24

0x5cea:	mov rdi, rax                         
0x5ced:	call 0x1eeae                         
0x5cf2:	mov eax, 0                           #    |i|l_update();
0x5cf7:	call 0xf8eb                          
0x5cfc:	mov eax, 0                           #    |i|l_update_point();
0x5d01:	call 0xf768                          
0x5d06:	mov eax, 0                           #    |t|ty_update();
0x5d0b:	call 0xb4b7                          
0x5d10:	mov eax, dword ptr [rbp - 0x54]      #    if (flags |&| IL_BEEP)
MEMORY OFFSET:     -0x54     -84  >>-76

0x5d13:	and eax, 4                           
0x5d16:	test eax, eax                        #    if |(|flags & IL_BEEP)
0x5d18:	je 0x5d44                            
0x5d1a:	mov eax, 0                           #	|t|ty_beep();
0x5d1f:	call 0xbfbf                          
0x5d24:	jmp 0x5d44                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x5d26:	mov eax, 0                           #	    |t|ty_beep();
0x5d2b:	call 0xbfbf                          
0x5d30:	mov eax, 0                           #	    |s|tatus_update();
0x5d35:	call 0x106d4                         
0x5d3a:	mov eax, 0                           #	    |i|l_update_point();
0x5d3f:	call 0xf768                          
0x5d44:	lea rax, [rbp - 0x38]                #	while ((ks = |t|ty_get_key(&repeat_count)) == NULL)
MEMORY OFFSET:     -0x38     -56  >>-48

0x5d48:	mov rdi, rax                         
0x5d4b:	call 0xc5ba                          
0x5d50:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0x5d54:	cmp qword ptr [rbp - 0x18], 0        #	while ((ks = tty_get_key(&repeat_count)) |=|= NULL)
MEMORY OFFSET:     -0x18     -24  >>-16

0x5d59:	je 0x5d26                            
0x5d5b:	mov rax, qword ptr [rbp - 0x18]      #	key = ks|-|>key_seq[0];
MEMORY OFFSET:     -0x18     -24  >>-16

0x5d5f:	mov rax, qword ptr [rax]             
0x5d62:	movzx eax, byte ptr [rax]            #	key = ks->key_seq|[|0];
0x5d65:	movzx eax, al                        #	key |=| ks->key_seq[0];
0x5d68:	mov dword ptr [rbp - 0x34], eax      
MEMORY OFFSET:     -0x34     -52  >>-44

0x5d6b:	mov rax, qword ptr [rbp - 0x18]      #	command |=| (command_t *)ks->aux_data;
MEMORY OFFSET:     -0x18     -24  >>-16

0x5d6f:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x5d73:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0x5d77:	cmp qword ptr [rbp - 0x10], 0        #	if |(|command && command->builtin)
MEMORY OFFSET:     -0x10     -16  >>-8

0x5d7c:	je 0x5dc3                            
0x5d7e:	mov rax, qword ptr [rbp - 0x10]      #	if (command && command|-|>builtin)
MEMORY OFFSET:     -0x10     -16  >>-8

0x5d82:	movzx eax, byte ptr [rax + 0x1b]     
MEMORY OFFSET:     0x1b     27  >>35

0x5d86:	test al, al                          #	if (command |&|& command->builtin)
0x5d88:	je 0x5dc3                            
0x5d8a:	mov rax, qword ptr [rbp - 0x10]      #	    key = - 1 - (command|-|>name - builtin[0]) / MAX_BUILTIN_NAME;
MEMORY OFFSET:     -0x10     -16  >>-8

0x5d8e:	mov rax, qword ptr [rax]             
0x5d91:	lea rdx, [rip + 0x29308]             #	    key = - 1 - (command->name |-| builtin[0]) / MAX_BUILTIN_NAME;
MEMORY OFFSET:     0x29308     168712  >>168720

0x5d98:	sub rax, rdx                         
0x5d9b:	mov rcx, rax                         
0x5d9e:	movabs rdx, 0xea0ea0ea0ea0ea1        #	    key = - 1 - (command->name - builtin[0]) |/| MAX_BUILTIN_NAME;
0x5da8:	mov rax, rcx                         
0x5dab:	imul rdx                             
0x5dae:	mov rax, rdx                         
0x5db1:	sar rax, 1                           
0x5db4:	sar rcx, 0x3f                        
0x5db8:	mov rdx, rcx                         
0x5dbb:	sub rax, rdx                         
0x5dbe:	not eax                              #	    key |=| - 1 - (command->name - builtin[0]) / MAX_BUILTIN_NAME;
0x5dc0:	mov dword ptr [rbp - 0x34], eax      
MEMORY OFFSET:     -0x34     -52  >>-44

0x5dc3:	cmp dword ptr [rbp - 0x34], 7        #	|s|witch (key)
MEMORY OFFSET:     -0x34     -52  >>-44

0x5dc7:	je 0x5e89                            
0x5dcd:	cmp dword ptr [rbp - 0x34], 7        
MEMORY OFFSET:     -0x34     -52  >>-44

0x5dd1:	jg 0x5e1d                            
0x5dd3:	cmp dword ptr [rbp - 0x34], -0x3d    
MEMORY OFFSET:     -0x34     -52  >>-44

0x5dd7:	je 0x5df0                            
0x5dd9:	cmp dword ptr [rbp - 0x34], -8       
MEMORY OFFSET:     -0x34     -52  >>-44

0x5ddd:	jne 0x5e1d                           
0x5ddf:	mov edi, 0                           #		|r|efresh(0);
0x5de4:	mov eax, 0                           
0x5de9:	call 0x5367                          
0x5dee:	jmp 0x5e66                           #		|b|reak;
0x5df0:	cmp qword ptr [rbp - 0x50], 0        #		if |(|options != NULL)
MEMORY OFFSET:     -0x50     -80  >>-72

0x5df5:	je 0x5e89                            
0x5dfb:	mov rax, qword ptr [rbp - 0x50]      #		    key = |*|options;
MEMORY OFFSET:     -0x50     -80  >>-72

0x5dff:	movzx eax, byte ptr [rax]            
0x5e02:	movsx eax, al                        #		    key |=| *options;
0x5e05:	mov dword ptr [rbp - 0x34], eax      
MEMORY OFFSET:     -0x34     -52  >>-44

0x5e08:	jmp 0x5e89                           #		|g|oto done;
0x5e0a:	mov edx, dword ptr [rbp - 0x54]      #		    if (|i|l_dispatch_commands(key, flags) == 0)
MEMORY OFFSET:     -0x54     -84  >>-76

0x5e0d:	mov eax, dword ptr [rbp - 0x34]      
MEMORY OFFSET:     -0x34     -52  >>-44

0x5e10:	mov esi, edx                         
0x5e12:	mov edi, eax                         
0x5e14:	call 0x56bd                          
0x5e19:	test eax, eax                        #		    if |(|il_dispatch_commands(key, flags) == 0)
0x5e1b:	je 0x5e36                            
0x5e1d:	mov eax, dword ptr [rbp - 0x38]      #		while (repeat_count|-|-)
MEMORY OFFSET:     -0x38     -56  >>-48

0x5e20:	lea edx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0x5e23:	mov dword ptr [rbp - 0x38], edx      
MEMORY OFFSET:     -0x38     -56  >>-48

0x5e26:	test eax, eax                        #		while (|r|epeat_count--)
0x5e28:	jne 0x5e0a                           
0x5e2a:	mov eax, 0                           #		|i|l_update();
0x5e2f:	call 0xf8eb                          
0x5e34:	jmp 0x5e66                           #		|b|reak;
0x5e36:	nop                                  #			|g|oto il_error;
0x5e37:	cmp qword ptr [rbp - 0x50], 0        #		if |(|options == NULL)
MEMORY OFFSET:     -0x50     -80  >>-72

0x5e3c:	je 0x5e8c                            
0x5e3e:	cmp qword ptr [rbp - 0x50], 0        #		if |(|options && strchr(options, key))
MEMORY OFFSET:     -0x50     -80  >>-72

0x5e43:	je 0x5e5b                            
0x5e45:	mov edx, dword ptr [rbp - 0x34]      #		if (options && |s|trchr(options, key))
MEMORY OFFSET:     -0x34     -52  >>-44

0x5e48:	mov rax, qword ptr [rbp - 0x50]      
MEMORY OFFSET:     -0x50     -80  >>-72

0x5e4c:	mov esi, edx                         
0x5e4e:	mov rdi, rax                         
0x5e51:	call 0x49b0                          
0x5e56:	test rax, rax                        #		if (options |&|& strchr(options, key))
0x5e59:	jne 0x5e8f                           
0x5e5b:	mov eax, 0                           #		|t|ty_beep();
0x5e60:	call 0xbfbf                          
0x5e65:	nop                                  #		|b|reak;
0x5e66:	mov eax, 0                           #	|s|tatus_update();
0x5e6b:	call 0x106d4                         
0x5e70:	mov eax, 0                           #	|i|l_update_point();
0x5e75:	call 0xf768                          
0x5e7a:	mov eax, 0                           #	|t|ty_update();
0x5e7f:	call 0xb4b7                          
0x5e84:	jmp 0x5d44                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x5e89:	nop                                  #		|g|oto done;
0x5e8a:	jmp 0x5e90                           
0x5e8c:	nop                                  #		    |g|oto done;
0x5e8d:	jmp 0x5e90                           
0x5e8f:	nop                                  #			|g|oto done;
0x5e90:	mov edi, 0                           #    |i|l_set_error_flag(0);
0x5e95:	call 0xfd0b                          
0x5e9a:	mov eax, dword ptr [rbp - 0x54]      #    if ((flags |&| IL_SAVE) && saved_il)
MEMORY OFFSET:     -0x54     -84  >>-76

0x5e9d:	and eax, 0x10                        
0x5ea0:	test eax, eax                        #    if |(|(flags & IL_SAVE) && saved_il)
0x5ea2:	je 0x5ed5                            
0x5ea4:	cmp qword ptr [rbp - 0x30], 0        #    if ((flags & IL_SAVE) |&|& saved_il)
MEMORY OFFSET:     -0x30     -48  >>-40

0x5ea9:	je 0x5ed5                            
0x5eab:	mov rax, qword ptr [rbp - 0x30]      #	|i|l_restore(saved_il);
MEMORY OFFSET:     -0x30     -48  >>-40

0x5eaf:	mov rdi, rax                         
0x5eb2:	call 0xe319                          
0x5eb7:	mov eax, 0                           #	|i|l_update();
0x5ebc:	call 0xf8eb                          
0x5ec1:	mov eax, 0                           #	|i|l_update_point();
0x5ec6:	call 0xf768                          
0x5ecb:	mov eax, 0                           #	|t|ty_update();
0x5ed0:	call 0xb4b7                          
0x5ed5:	cmp dword ptr [rbp - 0x34], 7        #    return (key == key_INTERRUPT) ? 0 |:| key;
MEMORY OFFSET:     -0x34     -52  >>-44

0x5ed9:	je 0x5ee0                            
0x5edb:	mov eax, dword ptr [rbp - 0x34]      #    return (key == key_INTERRUPT) ? 0 |:| key;
MEMORY OFFSET:     -0x34     -52  >>-44

0x5ede:	jmp 0x5ee5                           
0x5ee0:	mov eax, 0                           #    return (key == key_INTERRUPT) ? 0 |:| key;
0x5ee5:	mov rdx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x5ee9:	sub rdx, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0x5ef2:	je 0x5ef9                            
0x5ef4:	call 0x4980                          
0x5ef9:	leave                                
0x5efa:	ret                                  
0x5efb:	endbr64                              #|{|
0x5eff:	push rbp                             
0x5f00:	mov rbp, rsp                         
0x5f03:	sub rsp, 0x50                        
0x5f07:	mov qword ptr [rbp - 0x38], rdi      
MEMORY OFFSET:     -0x38     -56  >>-48

0x5f0b:	mov qword ptr [rbp - 0x40], rsi      
MEMORY OFFSET:     -0x40     -64  >>-56

0x5f0f:	mov qword ptr [rbp - 0x48], rdx      
MEMORY OFFSET:     -0x48     -72  >>-64

0x5f13:	mov qword ptr [rbp - 0x50], rcx      
MEMORY OFFSET:     -0x50     -80  >>-72

0x5f17:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0x5f20:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x5f24:	xor eax, eax                         
0x5f26:	mov dword ptr [rbp - 0x28], 0        #    int |k|ey = 0, repeat_count, offset = 0;
MEMORY OFFSET:     -0x28     -40  >>-32

0x5f2d:	mov dword ptr [rbp - 0x24], 0        #    int key = 0, repeat_count, |o|ffset = 0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x5f34:	mov eax, 0                           #    |i|l_reset_line();
0x5f39:	call 0xece2                          
0x5f3e:	cmp qword ptr [rbp - 0x38], 0        #    if |(|static_text)
MEMORY OFFSET:     -0x38     -56  >>-48

0x5f43:	je 0x5f51                            
0x5f45:	mov rax, qword ptr [rbp - 0x38]      #	|i|l_set_static_text(static_text);
MEMORY OFFSET:     -0x38     -56  >>-48

0x5f49:	mov rdi, rax                         
0x5f4c:	call 0xf285                          
0x5f51:	cmp qword ptr [rbp - 0x48], 0        #    if |(|default_string)
MEMORY OFFSET:     -0x48     -72  >>-64

0x5f56:	je 0x5f64                            
0x5f58:	mov rax, qword ptr [rbp - 0x48]      #	|i|l_insert_text(default_string);
MEMORY OFFSET:     -0x48     -72  >>-64

0x5f5c:	mov rdi, rax                         
0x5f5f:	call 0xf433                          
0x5f64:	cmp qword ptr [rbp - 0x50], 0        #    if |(|history && default_string)
MEMORY OFFSET:     -0x50     -80  >>-72

0x5f69:	je 0x5f91                            
0x5f6b:	cmp qword ptr [rbp - 0x48], 0        #    if (history |&|& default_string)
MEMORY OFFSET:     -0x48     -72  >>-64

0x5f70:	je 0x5f91                            
0x5f72:	mov rdx, qword ptr [rbp - 0x48]      #	|i|l_history_add_entry(history, default_string);
MEMORY OFFSET:     -0x48     -72  >>-64

0x5f76:	mov rax, qword ptr [rbp - 0x50]      
MEMORY OFFSET:     -0x50     -80  >>-72

0x5f7a:	mov rsi, rdx                         
0x5f7d:	mov rdi, rax                         
0x5f80:	mov eax, 0                           
0x5f85:	call 0x55cc                          
0x5f8a:	mov dword ptr [rbp - 0x24], 1        #	offset |=| 1;
MEMORY OFFSET:     -0x24     -36  >>-28

0x5f91:	mov eax, 0                           #    |i|l_update();
0x5f96:	call 0xf8eb                          
0x5f9b:	mov eax, 0                           #    |i|l_update_point();
0x5fa0:	call 0xf768                          
0x5fa5:	mov eax, 0                           #    |t|ty_update();
0x5faa:	call 0xb4b7                          
0x5faf:	jmp 0x5fcf                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x5fb1:	mov eax, 0                           #	    |t|ty_beep();
0x5fb6:	call 0xbfbf                          
0x5fbb:	mov eax, 0                           #	    |s|tatus_update();
0x5fc0:	call 0x106d4                         
0x5fc5:	mov eax, 0                           #	    |i|l_update_point();
0x5fca:	call 0xf768                          
0x5fcf:	lea rax, [rbp - 0x2c]                #	while ((ks = |t|ty_get_key(&repeat_count)) == NULL)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x5fd3:	mov rdi, rax                         
0x5fd6:	call 0xc5ba                          
0x5fdb:	mov qword ptr [rbp - 0x20], rax      
MEMORY OFFSET:     -0x20     -32  >>-24

0x5fdf:	cmp qword ptr [rbp - 0x20], 0        #	while ((ks = tty_get_key(&repeat_count)) |=|= NULL)
MEMORY OFFSET:     -0x20     -32  >>-24

0x5fe4:	je 0x5fb1                            
0x5fe6:	mov rax, qword ptr [rbp - 0x20]      #	key = ks|-|>key_seq[0];
MEMORY OFFSET:     -0x20     -32  >>-24

0x5fea:	mov rax, qword ptr [rax]             
0x5fed:	movzx eax, byte ptr [rax]            #	key = ks->key_seq|[|0];
0x5ff0:	movzx eax, al                        #	key |=| ks->key_seq[0];
0x5ff3:	mov dword ptr [rbp - 0x28], eax      
MEMORY OFFSET:     -0x28     -40  >>-32

0x5ff6:	mov rax, qword ptr [rbp - 0x20]      #	command |=| (command_t *)ks->aux_data;
MEMORY OFFSET:     -0x20     -32  >>-24

0x5ffa:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x5ffe:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0x6002:	cmp qword ptr [rbp - 0x18], 0        #	if |(|command && command->builtin)
MEMORY OFFSET:     -0x18     -24  >>-16

0x6007:	je 0x604e                            
0x6009:	mov rax, qword ptr [rbp - 0x18]      #	if (command && command|-|>builtin)
MEMORY OFFSET:     -0x18     -24  >>-16

0x600d:	movzx eax, byte ptr [rax + 0x1b]     
MEMORY OFFSET:     0x1b     27  >>35

0x6011:	test al, al                          #	if (command |&|& command->builtin)
0x6013:	je 0x604e                            
0x6015:	mov rax, qword ptr [rbp - 0x18]      #	    key = - 1 - (command|-|>name - builtin[0]) / MAX_BUILTIN_NAME;
MEMORY OFFSET:     -0x18     -24  >>-16

0x6019:	mov rax, qword ptr [rax]             
0x601c:	lea rdx, [rip + 0x2907d]             #	    key = - 1 - (command->name |-| builtin[0]) / MAX_BUILTIN_NAME;
MEMORY OFFSET:     0x2907d     168061  >>168069

0x6023:	sub rax, rdx                         
0x6026:	mov rcx, rax                         
0x6029:	movabs rdx, 0xea0ea0ea0ea0ea1        #	    key = - 1 - (command->name - builtin[0]) |/| MAX_BUILTIN_NAME;
0x6033:	mov rax, rcx                         
0x6036:	imul rdx                             
0x6039:	mov rax, rdx                         
0x603c:	sar rax, 1                           
0x603f:	sar rcx, 0x3f                        
0x6043:	mov rdx, rcx                         
0x6046:	sub rax, rdx                         
0x6049:	not eax                              #	    key |=| - 1 - (command->name - builtin[0]) / MAX_BUILTIN_NAME;
0x604b:	mov dword ptr [rbp - 0x28], eax      
MEMORY OFFSET:     -0x28     -40  >>-32

0x604e:	cmp dword ptr [rbp - 0x28], -0x3d    #	|s|witch (key)
MEMORY OFFSET:     -0x28     -40  >>-32

0x6052:	je 0x61af                            
0x6058:	cmp dword ptr [rbp - 0x28], -0x3d    
MEMORY OFFSET:     -0x28     -40  >>-32

0x605c:	jl 0x61da                            
0x6062:	cmp dword ptr [rbp - 0x28], 7        
MEMORY OFFSET:     -0x28     -40  >>-32

0x6066:	jg 0x61da                            
0x606c:	cmp dword ptr [rbp - 0x28], -0x22    
MEMORY OFFSET:     -0x28     -40  >>-32

0x6070:	jl 0x61da                            
0x6076:	mov eax, dword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0x6079:	add eax, 0x22                        
0x607c:	cmp eax, 0x29                        
0x607f:	ja 0x61da                            
0x6085:	mov eax, eax                         
0x6087:	lea rdx, [rax*4]                     
0x608f:	lea rax, [rip + 0x216ca]             
MEMORY OFFSET:     0x216ca     136906  >>136914

0x6096:	mov eax, dword ptr [rdx + rax]       
0x6099:	cdqe                                 
0x609b:	lea rdx, [rip + 0x216be]             
MEMORY OFFSET:     0x216be     136894  >>136902

0x60a2:	add rax, rdx                         
0x60a5:	jmp rax                              
0x60a8:	cmp qword ptr [rbp - 0x50], 0        #		if |(|history == NULL)
MEMORY OFFSET:     -0x50     -80  >>-72

0x60ad:	je 0x61f3                            
0x60b3:	add dword ptr [rbp - 0x24], 1        #		history_text |=| il_history_view_entry(history, ++offset);
MEMORY OFFSET:     -0x24     -36  >>-28

0x60b7:	mov edx, dword ptr [rbp - 0x24]      #		history_text = |i|l_history_view_entry(history, ++offset);
MEMORY OFFSET:     -0x24     -36  >>-28

0x60ba:	mov rax, qword ptr [rbp - 0x50]      
MEMORY OFFSET:     -0x50     -80  >>-72

0x60be:	mov esi, edx                         
0x60c0:	mov rdi, rax                         
0x60c3:	mov eax, 0                           
0x60c8:	call 0x565f                          
0x60cd:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0x60d1:	cmp qword ptr [rbp - 0x10], 0        #		if |(|history_text == NULL)
MEMORY OFFSET:     -0x10     -16  >>-8

0x60d6:	jne 0x60eb                           
0x60d8:	sub dword ptr [rbp - 0x24], 1        #		    offset|-|-;
MEMORY OFFSET:     -0x24     -36  >>-28

0x60dc:	mov eax, 0                           #		    |t|ty_beep();
0x60e1:	call 0xbfbf                          
0x60e6:	jmp 0x61f7                           #		|b|reak;
0x60eb:	mov edi, 0                           #		    |i|l_kill_line(IL_DONT_STORE);
0x60f0:	call 0xed98                          
0x60f5:	mov rax, qword ptr [rbp - 0x10]      #		    |i|l_insert_text(history_text);
MEMORY OFFSET:     -0x10     -16  >>-8

0x60f9:	mov rdi, rax                         
0x60fc:	call 0xf433                          
0x6101:	mov eax, 0                           #		    |i|l_update();
0x6106:	call 0xf8eb                          
0x610b:	mov eax, 0                           #		    |i|l_update_point();
0x6110:	call 0xf768                          
0x6115:	jmp 0x61f7                           #		|b|reak;
0x611a:	cmp qword ptr [rbp - 0x50], 0        #		if |(|history == NULL)
MEMORY OFFSET:     -0x50     -80  >>-72

0x611f:	je 0x61f6                            
0x6125:	cmp dword ptr [rbp - 0x24], 0        #		if |(|offset == 0)
MEMORY OFFSET:     -0x24     -36  >>-28

0x6129:	jne 0x614e                           
0x612b:	mov edi, 0                           #		    |i|l_kill_line(IL_DONT_STORE);
0x6130:	call 0xed98                          
0x6135:	mov eax, 0                           #		    |i|l_update();
0x613a:	call 0xf8eb                          
0x613f:	mov eax, 0                           #		    |i|l_update_point();
0x6144:	call 0xf768                          
0x6149:	jmp 0x61f7                           #		    |b|reak;
0x614e:	mov edi, 0                           #		|i|l_kill_line(IL_DONT_STORE);
0x6153:	call 0xed98                          
0x6158:	sub dword ptr [rbp - 0x24], 1        #		offset|-|-;
MEMORY OFFSET:     -0x24     -36  >>-28

0x615c:	cmp dword ptr [rbp - 0x24], 0        #		if |(|offset > 0)
MEMORY OFFSET:     -0x24     -36  >>-28

0x6160:	jle 0x6188                           
0x6162:	mov edx, dword ptr [rbp - 0x24]      #		    history_text = |i|l_history_view_entry(history, offset);
MEMORY OFFSET:     -0x24     -36  >>-28

0x6165:	mov rax, qword ptr [rbp - 0x50]      
MEMORY OFFSET:     -0x50     -80  >>-72

0x6169:	mov esi, edx                         
0x616b:	mov rdi, rax                         
0x616e:	mov eax, 0                           
0x6173:	call 0x565f                          
0x6178:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0x617c:	mov rax, qword ptr [rbp - 0x10]      #		    |i|l_insert_text(history_text);
MEMORY OFFSET:     -0x10     -16  >>-8

0x6180:	mov rdi, rax                         
0x6183:	call 0xf433                          
0x6188:	mov eax, 0                           #		|i|l_update();
0x618d:	call 0xf8eb                          
0x6192:	mov eax, 0                           #		|i|l_update_point();
0x6197:	call 0xf768                          
0x619c:	jmp 0x61f7                           #		|b|reak;
0x619e:	mov edi, 0                           #		|r|efresh(0);
0x61a3:	mov eax, 0                           
0x61a8:	call 0x5367                          
0x61ad:	jmp 0x61f7                           #		|b|reak;
0x61af:	mov rax, qword ptr [rbp - 0x40]      #		|i|l_get_contents(dest);
MEMORY OFFSET:     -0x40     -64  >>-56

0x61b3:	mov rdi, rax                         
0x61b6:	call 0xfc3f                          
0x61bb:	jmp 0x621a                           #		|g|oto done;
0x61bd:	mov eax, dword ptr [rbp - 0x28]      #		    if (|i|l_dispatch_commands(key, IL_MOVE | IL_EDIT) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x61c0:	mov esi, 3                           
0x61c5:	mov edi, eax                         
0x61c7:	call 0x56bd                          
0x61cc:	test eax, eax                        #		    if |(|il_dispatch_commands(key, IL_MOVE | IL_EDIT) == 0)
0x61ce:	jne 0x61da                           
0x61d0:	mov eax, 0                           #			|t|ty_beep();
0x61d5:	call 0xbfbf                          
0x61da:	mov eax, dword ptr [rbp - 0x2c]      #		while (repeat_count|-|-)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x61dd:	lea edx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0x61e0:	mov dword ptr [rbp - 0x2c], edx      
MEMORY OFFSET:     -0x2c     -44  >>-36

0x61e3:	test eax, eax                        #		while (|r|epeat_count--)
0x61e5:	jne 0x61bd                           
0x61e7:	mov eax, 0                           #		|i|l_update();
0x61ec:	call 0xf8eb                          
0x61f1:	jmp 0x61f7                           #		|b|reak;
0x61f3:	nop                                  #		    |b|reak;
0x61f4:	jmp 0x61f7                           
0x61f6:	nop                                  #		    |b|reak;
0x61f7:	mov eax, 0                           #	|s|tatus_update();
0x61fc:	call 0x106d4                         
0x6201:	mov eax, 0                           #	|i|l_update_point();
0x6206:	call 0xf768                          
0x620b:	mov eax, 0                           #	|t|ty_update();
0x6210:	call 0xb4b7                          
0x6215:	jmp 0x5fcf                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x621a:	nop                                  #		|g|oto done;
0x621b:	cmp dword ptr [rbp - 0x28], -0x3d    #    if |(|key == BUILTIN_action)
MEMORY OFFSET:     -0x28     -40  >>-32

0x621f:	jne 0x624c                           
0x6221:	cmp qword ptr [rbp - 0x50], 0        #	if |(|history)
MEMORY OFFSET:     -0x50     -80  >>-72

0x6226:	je 0x6243                            
0x6228:	mov rax, qword ptr [rbp - 0x40]      #	    |i|l_history_add_entry(history, *dest);
MEMORY OFFSET:     -0x40     -64  >>-56

0x622c:	mov rdx, qword ptr [rax]             
0x622f:	mov rax, qword ptr [rbp - 0x50]      
MEMORY OFFSET:     -0x50     -80  >>-72

0x6233:	mov rsi, rdx                         
0x6236:	mov rdi, rax                         
0x6239:	mov eax, 0                           
0x623e:	call 0x55cc                          
0x6243:	mov rax, qword ptr [rbp - 0x40]      #	return |*|dest;
MEMORY OFFSET:     -0x40     -64  >>-56

0x6247:	mov rax, qword ptr [rax]             
0x624a:	jmp 0x6251                           
0x624c:	mov eax, 0                           #	return |N|ULL;
0x6251:	mov rdx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x6255:	sub rdx, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0x625e:	je 0x6265                            
0x6260:	call 0x4980                          #|}|
0x6265:	leave                                
0x6266:	ret                                  
0x6267:	endbr64                              #|{|
0x626b:	push rbp                             
0x626c:	mov rbp, rsp                         
0x626f:	sub rsp, 0x40                        
0x6273:	mov qword ptr [rbp - 0x28], rdi      
MEMORY OFFSET:     -0x28     -40  >>-32

0x6277:	mov qword ptr [rbp - 0x30], rsi      
MEMORY OFFSET:     -0x30     -48  >>-40

0x627b:	mov dword ptr [rbp - 0x34], edx      
MEMORY OFFSET:     -0x34     -52  >>-44

0x627e:	mov qword ptr [rbp - 0x40], rcx      
MEMORY OFFSET:     -0x40     -64  >>-56

0x6282:	cmp dword ptr [rbp - 0x34], 0        #    if |(|status == IL_ISEARCH_BEGIN)
MEMORY OFFSET:     -0x34     -52  >>-44

0x6286:	jne 0x62c0                           
0x6288:	mov eax, 0                           #	saved_il = |i|l_save();
0x628d:	call 0xe205                          
0x6292:	mov qword ptr [rip + 0x2a6a7], rax   #	saved_il |=| il_save();
MEMORY OFFSET:     0x2a6a7     173735  >>173743

0x6299:	mov eax, 0                           #	|i|l_reset_line();
0x629e:	call 0xece2                          
0x62a3:	cmp qword ptr [rbp - 0x28], 0        #	if |(|static_text)
MEMORY OFFSET:     -0x28     -40  >>-32

0x62a8:	je 0x62b6                            
0x62aa:	mov rax, qword ptr [rbp - 0x28]      #	    |i|l_set_static_text(static_text);
MEMORY OFFSET:     -0x28     -40  >>-32

0x62ae:	mov rdi, rax                         
0x62b1:	call 0xf285                          
0x62b6:	mov eax, 0                           #	return |N|ULL;
0x62bb:	jmp 0x6517                           
0x62c0:	cmp dword ptr [rbp - 0x34], 3        #    if |(|status == IL_ISEARCH_END)
MEMORY OFFSET:     -0x34     -52  >>-44

0x62c4:	jne 0x62fd                           
0x62c6:	mov rax, qword ptr [rip + 0x2a673]   #	|i|l_restore(saved_il);
MEMORY OFFSET:     0x2a673     173683  >>173691

0x62cd:	mov rdi, rax                         
0x62d0:	call 0xe319                          
0x62d5:	mov eax, 0                           #	|i|l_update();
0x62da:	call 0xf8eb                          
0x62df:	mov eax, 0                           #	|i|l_update_point();
0x62e4:	call 0xf768                          
0x62e9:	mov eax, 0                           #	|t|ty_update();
0x62ee:	call 0xb4b7                          
0x62f3:	mov eax, 0                           #	return |N|ULL;
0x62f8:	jmp 0x6517                           
0x62fd:	cmp qword ptr [rbp - 0x40], 0        #    if |(|action == NULL)
MEMORY OFFSET:     -0x40     -64  >>-56

0x6302:	jne 0x630e                           
0x6304:	mov eax, 0                           #	return |N|ULL;
0x6309:	jmp 0x6517                           
0x630e:	mov rax, qword ptr [rbp - 0x40]      #    *action |=| IL_ISEARCH_ACTION_NONE;
MEMORY OFFSET:     -0x40     -64  >>-56

0x6312:	mov dword ptr [rax], 0               
0x6318:	mov eax, 0                           #    |i|l_update();
0x631d:	call 0xf8eb                          
0x6322:	mov eax, 0                           #    |i|l_update_point();
0x6327:	call 0xf768                          
0x632c:	mov eax, 0                           #    |t|ty_update();
0x6331:	call 0xb4b7                          
0x6336:	mov edi, 0                           #    if ((ks = |t|ty_get_key(NULL)) == NULL)
0x633b:	call 0xc5ba                          
0x6340:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0x6344:	cmp qword ptr [rbp - 0x10], 0        #    if |(|(ks = tty_get_key(NULL)) == NULL)
MEMORY OFFSET:     -0x10     -16  >>-8

0x6349:	jne 0x6373                           
0x634b:	mov eax, 0                           #	|s|tatus_update();
0x6350:	call 0x106d4                         
0x6355:	mov eax, 0                           #	|i|l_update_point();
0x635a:	call 0xf768                          
0x635f:	mov eax, 0                           #	|t|ty_update();
0x6364:	call 0xb4b7                          
0x6369:	mov eax, 0                           #	return |N|ULL;
0x636e:	jmp 0x6517                           
0x6373:	mov rax, qword ptr [rbp - 0x10]      #    key = ks|-|>key_seq[0];
MEMORY OFFSET:     -0x10     -16  >>-8

0x6377:	mov rax, qword ptr [rax]             
0x637a:	movzx eax, byte ptr [rax]            #    key = ks->key_seq|[|0];
0x637d:	movzx eax, al                        #    key |=| ks->key_seq[0];
0x6380:	mov dword ptr [rbp - 0x14], eax      
MEMORY OFFSET:     -0x14     -20  >>-12

0x6383:	mov rax, qword ptr [rbp - 0x10]      #    command |=| (command_t *)ks->aux_data;
MEMORY OFFSET:     -0x10     -16  >>-8

0x6387:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x638b:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x638f:	cmp qword ptr [rbp - 8], 0           #    if |(|command && command->builtin)
MEMORY OFFSET:     -0x8     -8  >>0

0x6394:	je 0x63db                            
0x6396:	mov rax, qword ptr [rbp - 8]         #    if (command && command|-|>builtin)
MEMORY OFFSET:     -0x8     -8  >>0

0x639a:	movzx eax, byte ptr [rax + 0x1b]     
MEMORY OFFSET:     0x1b     27  >>35

0x639e:	test al, al                          #    if (command |&|& command->builtin)
0x63a0:	je 0x63db                            
0x63a2:	mov rax, qword ptr [rbp - 8]         #	key = - 1 - (command|-|>name - builtin[0]) / MAX_BUILTIN_NAME;
MEMORY OFFSET:     -0x8     -8  >>0

0x63a6:	mov rax, qword ptr [rax]             
0x63a9:	lea rdx, [rip + 0x28cf0]             #	key = - 1 - (command->name |-| builtin[0]) / MAX_BUILTIN_NAME;
MEMORY OFFSET:     0x28cf0     167152  >>167160

0x63b0:	sub rax, rdx                         
0x63b3:	mov rcx, rax                         
0x63b6:	movabs rdx, 0xea0ea0ea0ea0ea1        #	key = - 1 - (command->name - builtin[0]) |/| MAX_BUILTIN_NAME;
0x63c0:	mov rax, rcx                         
0x63c3:	imul rdx                             
0x63c6:	mov rax, rdx                         
0x63c9:	sar rax, 1                           
0x63cc:	sar rcx, 0x3f                        
0x63d0:	mov rdx, rcx                         
0x63d3:	sub rax, rdx                         
0x63d6:	not eax                              #	key |=| - 1 - (command->name - builtin[0]) / MAX_BUILTIN_NAME;
0x63d8:	mov dword ptr [rbp - 0x14], eax      
MEMORY OFFSET:     -0x14     -20  >>-12

0x63db:	cmp dword ptr [rbp - 0x14], 7        #    |s|witch (key)
MEMORY OFFSET:     -0x14     -20  >>-12

0x63df:	je 0x64c8                            
0x63e5:	cmp dword ptr [rbp - 0x14], 7        
MEMORY OFFSET:     -0x14     -20  >>-12

0x63e9:	jg 0x6449                            
0x63eb:	cmp dword ptr [rbp - 0x14], -8       
MEMORY OFFSET:     -0x14     -20  >>-12

0x63ef:	je 0x6409                            
0x63f1:	cmp dword ptr [rbp - 0x14], -8       
MEMORY OFFSET:     -0x14     -20  >>-12

0x63f5:	jg 0x6449                            
0x63f7:	cmp dword ptr [rbp - 0x14], -0x3d    
MEMORY OFFSET:     -0x14     -20  >>-12

0x63fb:	je 0x64c8                            
0x6401:	cmp dword ptr [rbp - 0x14], -0x32    
MEMORY OFFSET:     -0x14     -20  >>-12

0x6405:	je 0x641d                            
0x6407:	jmp 0x6449                           
0x6409:	mov edi, 0                           #	    |r|efresh(0);
0x640e:	mov eax, 0                           
0x6413:	call 0x5367                          
0x6418:	jmp 0x6336                           #	    |g|oto restart;
0x641d:	mov eax, 0                           #	    if (|i|l_is_empty())
0x6422:	call 0xe3d0                          
0x6427:	test eax, eax                        #	    if |(|il_is_empty())
0x6429:	je 0x643a                            
0x642b:	mov eax, 0                           #		|t|ty_beep();
0x6430:	call 0xbfbf                          
0x6435:	jmp 0x64c9                           #	    |b|reak;
0x643a:	mov rax, qword ptr [rbp - 0x40]      #		*action |=| IL_ISEARCH_ACTION_DECREASE;
MEMORY OFFSET:     -0x40     -64  >>-56

0x643e:	mov dword ptr [rax], 1               
0x6444:	jmp 0x64c9                           #	    |b|reak;
0x6449:	cmp dword ptr [rbp - 0x14], -0x44    #	    if |(|(key == BUILTIN_isearch_backward &&
MEMORY OFFSET:     -0x14     -20  >>-12

0x644d:	jne 0x6455                           
0x644f:	cmp dword ptr [rbp - 0x34], 1        #	    if ((key == BUILTIN_isearch_backward |&|&
MEMORY OFFSET:     -0x34     -52  >>-44

0x6453:	je 0x6461                            
0x6455:	cmp dword ptr [rbp - 0x14], -0x45    #		 status == IL_ISEARCH_BACKWARD)  ||||
MEMORY OFFSET:     -0x14     -20  >>-12

0x6459:	jne 0x6487                           
0x645b:	cmp dword ptr [rbp - 0x34], 2        #		(key == BUILTIN_isearch_forward  |&|&
MEMORY OFFSET:     -0x34     -52  >>-44

0x645f:	jne 0x6487                           
0x6461:	mov eax, 0                           #		if (|i|l_is_empty())
0x6466:	call 0xe3d0                          
0x646b:	test eax, eax                        #		if |(|il_is_empty())
0x646d:	je 0x647b                            
0x646f:	mov rax, qword ptr [rbp - 0x40]      #		    *action |=| IL_ISEARCH_ACTION_INCREASE;
MEMORY OFFSET:     -0x40     -64  >>-56

0x6473:	mov dword ptr [rax], 3               
0x6479:	jmp 0x64c9                           #		|b|reak;
0x647b:	mov rax, qword ptr [rbp - 0x40]      #		    *action |=| IL_ISEARCH_ACTION_RETRY;
MEMORY OFFSET:     -0x40     -64  >>-56

0x647f:	mov dword ptr [rax], 2               
0x6485:	jmp 0x64c9                           #		|b|reak;
0x6487:	call 0x4ec0                          #	    if (|i|sprint(key))
0x648c:	mov rdx, qword ptr [rax]             
0x648f:	mov eax, dword ptr [rbp - 0x14]      
MEMORY OFFSET:     -0x14     -20  >>-12

0x6492:	cdqe                                 
0x6494:	add rax, rax                         
0x6497:	add rax, rdx                         
0x649a:	movzx eax, word ptr [rax]            
0x649d:	movzx eax, ax                        
0x64a0:	and eax, 0x4000                      
0x64a5:	test eax, eax                        #	    if |(|isprint(key))
0x64a7:	je 0x64bf                            
0x64a9:	mov eax, dword ptr [rbp - 0x14]      #		|i|l_insert_char(key);
MEMORY OFFSET:     -0x14     -20  >>-12

0x64ac:	mov edi, eax                         
0x64ae:	call 0xe797                          
0x64b3:	mov rax, qword ptr [rbp - 0x40]      #		*action |=| IL_ISEARCH_ACTION_INCREASE;
MEMORY OFFSET:     -0x40     -64  >>-56

0x64b7:	mov dword ptr [rax], 3               
0x64bd:	jmp 0x64c9                           #	    |b|reak;
0x64bf:	mov dword ptr [rbp - 0x14], 7        #		key |=| key_INTERRUPT;
MEMORY OFFSET:     -0x14     -20  >>-12

0x64c6:	jmp 0x64c9                           #	    |b|reak;
0x64c8:	nop                                  #	    |b|reak;
0x64c9:	mov eax, 0                           #    |s|tatus_update();
0x64ce:	call 0x106d4                         
0x64d3:	mov eax, 0                           #    |i|l_update();
0x64d8:	call 0xf8eb                          
0x64dd:	mov eax, 0                           #    |i|l_update_point();
0x64e2:	call 0xf768                          
0x64e7:	mov eax, 0                           #    |t|ty_update();
0x64ec:	call 0xb4b7                          
0x64f1:	mov rax, qword ptr [rbp - 0x30]      #    |i|l_get_contents(dest);
MEMORY OFFSET:     -0x30     -48  >>-40

0x64f5:	mov rdi, rax                         
0x64f8:	call 0xfc3f                          
0x64fd:	cmp dword ptr [rbp - 0x14], -0x3d    #    return (key == BUILTIN_action || key == key_INTERRUPT) ? NULL |:| *dest;
MEMORY OFFSET:     -0x14     -20  >>-12

0x6501:	je 0x6512                            
0x6503:	cmp dword ptr [rbp - 0x14], 7        #    return (key == BUILTIN_action |||| key == key_INTERRUPT) ? NULL : *dest;
MEMORY OFFSET:     -0x14     -20  >>-12

0x6507:	je 0x6512                            
0x6509:	mov rax, qword ptr [rbp - 0x30]      #    return (key == BUILTIN_action || key == key_INTERRUPT) ? NULL |:| *dest;
MEMORY OFFSET:     -0x30     -48  >>-40

0x650d:	mov rax, qword ptr [rax]             
0x6510:	jmp 0x6517                           
0x6512:	mov eax, 0                           #    return (key == BUILTIN_action || key == key_INTERRUPT) ? NULL |:| *dest;
0x6517:	leave                                #|}|
0x6518:	ret                                  
0x6519:	endbr64                              #|{|
0x651d:	push rbp                             
0x651e:	mov rbp, rsp                         
0x6521:	sub rsp, 0x10                        
0x6525:	mov rax, qword ptr [rip + 0x2a404]   #    if (|d|ir_history)
MEMORY OFFSET:     0x2a404     173060  >>173068

0x652c:	test rax, rax                        #    if |(|dir_history)
0x652f:	je 0x6581                            
0x6531:	mov dword ptr [rbp - 4], 0           #	for (i |=| 0; i < dir_history_count; i++)
MEMORY OFFSET:     -0x4     -4  >>4

0x6538:	jmp 0x655c                           #	|f|or (i = 0; i < dir_history_count; i++)
0x653a:	mov rdx, qword ptr [rip + 0x2a3ef]   #	    xfree(dir_history|[|i]);
MEMORY OFFSET:     0x2a3ef     173039  >>173047

0x6541:	mov eax, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0x6544:	cdqe                                 
0x6546:	shl rax, 3                           
0x654a:	add rax, rdx                         
0x654d:	mov rax, qword ptr [rax]             #	    |x|free(dir_history[i]);
0x6550:	mov rdi, rax                         
0x6553:	call 0x1eeae                         
0x6558:	add dword ptr [rbp - 4], 1           #	for (i = 0; i < dir_history_count; i|+|+)
MEMORY OFFSET:     -0x4     -4  >>4

0x655c:	mov eax, dword ptr [rip + 0x2a3d6]   #	for (i = 0; i |<| dir_history_count; i++)
MEMORY OFFSET:     0x2a3d6     173014  >>173022

0x6562:	cmp dword ptr [rbp - 4], eax         
MEMORY OFFSET:     -0x4     -4  >>4

0x6565:	jl 0x653a                            
0x6567:	mov rax, qword ptr [rip + 0x2a3c2]   #	|x|free(dir_history);
MEMORY OFFSET:     0x2a3c2     172994  >>173002

0x656e:	mov rdi, rax                         
0x6571:	call 0x1eeae                         
0x6576:	mov qword ptr [rip + 0x2a3af], 0     #	dir_history |=| NULL;
MEMORY OFFSET:     0x2a3af     172975  >>172983

0x6581:	mov dword ptr [rip + 0x2a3ad], 0     #    dir_history_count |=| 0;
MEMORY OFFSET:     0x2a3ad     172973  >>172981

0x658b:	mov dword ptr [rip + 0x2a3a7], 0     #    dir_history_point |=| 0;
MEMORY OFFSET:     0x2a3a7     172967  >>172975

0x6595:	nop                                  #|}|
0x6596:	leave                                
0x6597:	ret                                  
0x6598:	endbr64                              #|{|
0x659c:	push rbp                             
0x659d:	mov rbp, rsp                         
0x65a0:	push rbx                             
0x65a1:	sub rsp, 0x18                        
0x65a5:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0x65a9:	mov eax, dword ptr [rip + 0x2a389]   #    dir_history_point |=| dir_history_count;
MEMORY OFFSET:     0x2a389     172937  >>172945

0x65af:	mov dword ptr [rip + 0x2a387], eax   
MEMORY OFFSET:     0x2a387     172935  >>172943

0x65b5:	mov eax, dword ptr [rip + 0x2a37d]   #				    |+|+dir_history_count * sizeof(char *));
MEMORY OFFSET:     0x2a37d     172925  >>172933

0x65bb:	add eax, 1                           
0x65be:	mov dword ptr [rip + 0x2a374], eax   #    dir_history |=| (char **)xrealloc(dir_history,
MEMORY OFFSET:     0x2a374     172916  >>172924

0x65c4:	mov eax, dword ptr [rip + 0x2a36e]   #				    |+|+dir_history_count * sizeof(char *));
MEMORY OFFSET:     0x2a36e     172910  >>172918

0x65ca:	cdqe                                 
0x65cc:	lea rdx, [rax*8]                     #    dir_history = (char **)|x|realloc(dir_history,
0x65d4:	mov rax, qword ptr [rip + 0x2a355]   
MEMORY OFFSET:     0x2a355     172885  >>172893

0x65db:	mov rsi, rdx                         
0x65de:	mov rdi, rax                         
0x65e1:	call 0x24670                         
0x65e6:	mov qword ptr [rip + 0x2a343], rax   #    dir_history |=| (char **)xrealloc(dir_history,
MEMORY OFFSET:     0x2a343     172867  >>172875

0x65ed:	mov rdx, qword ptr [rip + 0x2a33c]   #    dir_history|[|dir_history_point] = xstrdup(directory);
MEMORY OFFSET:     0x2a33c     172860  >>172868

0x65f4:	mov eax, dword ptr [rip + 0x2a342]   
MEMORY OFFSET:     0x2a342     172866  >>172874

0x65fa:	cdqe                                 
0x65fc:	shl rax, 3                           
0x6600:	lea rbx, [rdx + rax]                 
0x6604:	mov rax, qword ptr [rbp - 0x18]      #    dir_history[dir_history_point] = |x|strdup(directory);
MEMORY OFFSET:     -0x18     -24  >>-16

0x6608:	mov rdi, rax                         
0x660b:	call 0x24780                         
0x6610:	mov qword ptr [rbx], rax             #    dir_history[dir_history_point] |=| xstrdup(directory);
0x6613:	nop                                  #|}|
0x6614:	mov rbx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0x6618:	leave                                
0x6619:	ret                                  
0x661a:	endbr64                              #|{|
0x661e:	push rbp                             
0x661f:	mov rbp, rsp                         
0x6622:	sub rsp, 0x10                        
0x6626:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0x662a:	mov qword ptr [rbp - 0x10], rsi      
MEMORY OFFSET:     -0x10     -16  >>-8

0x662e:	mov eax, dword ptr [rip + 0x2a304]   #    if (dir_history_point < dir_history_count |-| 1)
MEMORY OFFSET:     0x2a304     172804  >>172812

0x6634:	lea edx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0x6637:	mov eax, dword ptr [rip + 0x2a2ff]   #    if (dir_history_point |<| dir_history_count - 1)
MEMORY OFFSET:     0x2a2ff     172799  >>172807

0x663d:	cmp edx, eax                         #    if |(|dir_history_point < dir_history_count - 1)
0x663f:	jle 0x6686                           
0x6641:	mov rdx, qword ptr [rip + 0x2a2e8]   #		     dir_history|[|++dir_history_point], 1);
MEMORY OFFSET:     0x2a2e8     172776  >>172784

0x6648:	mov eax, dword ptr [rip + 0x2a2ee]   #		     dir_history[|+|+dir_history_point], 1);
MEMORY OFFSET:     0x2a2ee     172782  >>172790

0x664e:	add eax, 1                           
0x6651:	mov dword ptr [rip + 0x2a2e5], eax   #	|p|anel_action(this, act_CHDIR, link,
MEMORY OFFSET:     0x2a2e5     172773  >>172781

0x6657:	mov eax, dword ptr [rip + 0x2a2df]   #		     dir_history[|+|+dir_history_point], 1);
MEMORY OFFSET:     0x2a2df     172767  >>172775

0x665d:	cdqe                                 
0x665f:	shl rax, 3                           #		     dir_history|[|++dir_history_point], 1);
0x6663:	add rax, rdx                         
0x6666:	mov rcx, qword ptr [rax]             #	|p|anel_action(this, act_CHDIR, link,
0x6669:	mov rdx, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0x666d:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0x6671:	mov r8d, 1                           
0x6677:	mov esi, 0x21                        
0x667c:	mov rdi, rax                         
0x667f:	call 0x1a89a                         
0x6684:	jmp 0x6690                           #|}|
0x6686:	mov eax, 0                           #	|t|ty_beep();
0x668b:	call 0xbfbf                          
0x6690:	nop                                  #|}|
0x6691:	leave                                
0x6692:	ret                                  
0x6693:	endbr64                              #|{|
0x6697:	push rbp                             
0x6698:	mov rbp, rsp                         
0x669b:	sub rsp, 0x10                        
0x669f:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0x66a3:	mov qword ptr [rbp - 0x10], rsi      
MEMORY OFFSET:     -0x10     -16  >>-8

0x66a7:	mov eax, dword ptr [rip + 0x2a28f]   #    if (|d|ir_history_point)
MEMORY OFFSET:     0x2a28f     172687  >>172695

0x66ad:	test eax, eax                        #    if |(|dir_history_point)
0x66af:	je 0x66f6                            
0x66b1:	mov rdx, qword ptr [rip + 0x2a278]   #		     dir_history|[|--dir_history_point], 1);
MEMORY OFFSET:     0x2a278     172664  >>172672

0x66b8:	mov eax, dword ptr [rip + 0x2a27e]   #		     dir_history[|-|-dir_history_point], 1);
MEMORY OFFSET:     0x2a27e     172670  >>172678

0x66be:	sub eax, 1                           
0x66c1:	mov dword ptr [rip + 0x2a275], eax   #	|p|anel_action(this, act_CHDIR, link,
MEMORY OFFSET:     0x2a275     172661  >>172669

0x66c7:	mov eax, dword ptr [rip + 0x2a26f]   #		     dir_history[|-|-dir_history_point], 1);
MEMORY OFFSET:     0x2a26f     172655  >>172663

0x66cd:	cdqe                                 
0x66cf:	shl rax, 3                           #		     dir_history|[|--dir_history_point], 1);
0x66d3:	add rax, rdx                         
0x66d6:	mov rcx, qword ptr [rax]             #	|p|anel_action(this, act_CHDIR, link,
0x66d9:	mov rdx, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0x66dd:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0x66e1:	mov r8d, 1                           
0x66e7:	mov esi, 0x21                        
0x66ec:	mov rdi, rax                         
0x66ef:	call 0x1a89a                         
0x66f4:	jmp 0x6700                           #|}|
0x66f6:	mov eax, 0                           #	|t|ty_beep();
0x66fb:	call 0xbfbf                          
0x6700:	nop                                  #|}|
0x6701:	leave                                
0x6702:	ret                                  
0x6703:	endbr64                              #|{|
0x6707:	push rbp                             
0x6708:	mov rbp, rsp                         
0x670b:	mov edi, 0                           #    |t|ty_end(NULL);
0x6710:	call 0xb138                          
0x6715:	mov eax, 0                           #    |s|tatus_end();
0x671a:	call 0x1014d                         
0x671f:	mov eax, 0                           #    |r|emove_log();
0x6724:	call 0x1f7c7                         
0x6729:	nop                                  #|}|
0x672a:	pop rbp                              
0x672b:	ret                                  
0x672c:	endbr64                              #|{|
0x6730:	push rbp                             
0x6731:	mov rbp, rsp                         
0x6734:	sub rsp, 0x10                        
0x6738:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0x673c:	mov eax, 0                           #    if (|t|ty_get_mode() == TTY_NONCANONIC)
0x6741:	call 0xaf63                          
0x6746:	cmp eax, 1                           #    if |(|tty_get_mode() == TTY_NONCANONIC)
0x6749:	jne 0x6755                           
0x674b:	mov eax, 0                           #	|c|lean_up();
0x6750:	call 0x6703                          
0x6755:	mov rdx, qword ptr [rip + 0x2a17c]   #    |f|printf(stderr, "%s: fatal error: %s.\n", g_program, postmsg);
MEMORY OFFSET:     0x2a17c     172412  >>172420

0x675c:	mov rax, qword ptr [rip + 0x2a15d]   
MEMORY OFFSET:     0x2a15d     172381  >>172389

0x6763:	mov rcx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0x6767:	lea rsi, [rip + 0x20a15]             
MEMORY OFFSET:     0x20a15     133653  >>133661

0x676e:	mov rdi, rax                         
0x6771:	mov eax, 0                           
0x6776:	call 0x4b40                          
0x677b:	mov edi, 1                           #    |e|xit(1);
0x6780:	call 0x4df0                          
0x6785:	endbr64                              #|{|
0x6789:	push rbp                             
0x678a:	mov rbp, rsp                         
0x678d:	push rbx                             
0x678e:	sub rsp, 0xb8                        
0x6795:	mov qword ptr [rbp - 0xa8], rdi      
MEMORY OFFSET:     -0xa8     -168  >>-160

0x679c:	mov qword ptr [rbp - 0xb0], rsi      
MEMORY OFFSET:     -0xb0     -176  >>-168

0x67a3:	mov qword ptr [rbp - 0xb8], rdx      
MEMORY OFFSET:     -0xb8     -184  >>-176

0x67aa:	mov qword ptr [rbp - 0xc0], rcx      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x67b1:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0x67ba:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0x67be:	xor eax, eax                         
0x67c0:	mov qword ptr [rbp - 0x88], 0        #    char *|a|nswer = NULL;
MEMORY OFFSET:     -0x88     -136  >>-128

0x67cb:	mov qword ptr [rbp - 0x58], 0        #    char *|q|uestion = NULL;
MEMORY OFFSET:     -0x58     -88  >>-80

0x67d3:	mov dword ptr [rbp - 0x9c], 0        #    int |i|_flag = 0, entry;
MEMORY OFFSET:     -0x9c     -156  >>-148

0x67dd:	mov qword ptr [rbp - 0x80], 0        #    char *ptr, *|t|mp = NULL, *d, *flag;
MEMORY OFFSET:     -0x80     -128  >>-120

0x67e5:	mov rax, qword ptr [rbp - 0xa8]      #    char *|s|rc = command->body, *save_body;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x67ec:	mov rax, qword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0x67f0:	mov qword ptr [rbp - 0x60], rax      
MEMORY OFFSET:     -0x60     -96  >>-88

0x67f4:	mov rax, qword ptr [rbp - 0x60]      #    len = |s|trlen(src) + 1;
MEMORY OFFSET:     -0x60     -96  >>-88

0x67f8:	mov rdi, rax                         
0x67fb:	call 0x4960                          
0x6800:	add rax, 1                           #    len |=| strlen(src) + 1;
0x6804:	mov qword ptr [rbp - 0x78], rax      
MEMORY OFFSET:     -0x78     -120  >>-112

0x6808:	mov rax, qword ptr [rbp - 0x78]      #    d = *dest = |x|malloc(len);
MEMORY OFFSET:     -0x78     -120  >>-112

0x680c:	mov rdi, rax                         
0x680f:	call 0x24650                         
0x6814:	mov rdx, qword ptr [rbp - 0xb0]      #    d = *dest |=| xmalloc(len);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x681b:	mov qword ptr [rdx], rax             
0x681e:	mov rax, qword ptr [rbp - 0xb0]      #    d |=| *dest = xmalloc(len);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x6825:	mov rax, qword ptr [rax]             
0x6828:	mov qword ptr [rbp - 0x68], rax      
MEMORY OFFSET:     -0x68     -104  >>-96

0x682c:	jmp 0x7145                           #    while |(|*src)
0x6831:	mov rax, qword ptr [rbp - 0x60]      #	if (|*|src != '%')
MEMORY OFFSET:     -0x60     -96  >>-88

0x6835:	movzx eax, byte ptr [rax]            
0x6838:	cmp al, 0x25                         #	if |(|*src != '%')
0x683a:	je 0x685e                            
0x683c:	mov rdx, qword ptr [rbp - 0x60]      #	    *d++ = *src|+|+;
MEMORY OFFSET:     -0x60     -96  >>-88

0x6840:	lea rax, [rdx + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x6844:	mov qword ptr [rbp - 0x60], rax      
MEMORY OFFSET:     -0x60     -96  >>-88

0x6848:	mov rax, qword ptr [rbp - 0x68]      #	    *d|+|+ = *src++;
MEMORY OFFSET:     -0x68     -104  >>-96

0x684c:	lea rcx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x6850:	mov qword ptr [rbp - 0x68], rcx      
MEMORY OFFSET:     -0x68     -104  >>-96

0x6854:	movzx edx, byte ptr [rdx]            #	    *d++ = |*|src++;
0x6857:	mov byte ptr [rax], dl               #	    *d++ |=| *src++;
0x6859:	jmp 0x7145                           
0x685e:	call 0x4ec0                          #	    t = |i|slower((int)*++src) ? p : l;
0x6863:	mov rdx, qword ptr [rax]             
0x6866:	add qword ptr [rbp - 0x60], 1        #	    t = islower((int)*++src) ? p |:| l;
MEMORY OFFSET:     -0x60     -96  >>-88

0x686b:	mov rax, qword ptr [rbp - 0x60]      #	    t = |i|slower((int)*++src) ? p : l;
MEMORY OFFSET:     -0x60     -96  >>-88

0x686f:	movzx eax, byte ptr [rax]            
0x6872:	movsx rax, al                        
0x6876:	add rax, rax                         
0x6879:	add rax, rdx                         
0x687c:	movzx eax, word ptr [rax]            
0x687f:	movzx eax, ax                        
0x6882:	and eax, 0x200                       
0x6887:	test eax, eax                        #	    t = islower((int)*++src) ? p |:| l;
0x6889:	je 0x6894                            
0x688b:	mov rax, qword ptr [rbp - 0xb8]      #	    t = islower((int)*++src) ? p |:| l;
MEMORY OFFSET:     -0xb8     -184  >>-176

0x6892:	jmp 0x689b                           
0x6894:	mov rax, qword ptr [rbp - 0xc0]      #	    t = islower((int)*++src) ? p |:| l;
MEMORY OFFSET:     -0xc0     -192  >>-184

0x689b:	mov qword ptr [rbp - 0x50], rax      #	    t |=| islower((int)*++src) ? p : l;
MEMORY OFFSET:     -0x50     -80  >>-72

0x689f:	mov rax, qword ptr [rbp - 0x60]      #	    switch (|*|src)
MEMORY OFFSET:     -0x60     -96  >>-88

0x68a3:	movzx eax, byte ptr [rax]            
0x68a6:	movsx eax, al                        
0x68a9:	sub eax, 0x3f                        #	    |s|witch (*src)
0x68ac:	cmp eax, 0x3b                        
0x68af:	ja 0x7166                            
0x68b5:	mov eax, eax                         
0x68b7:	lea rdx, [rax*4]                     
0x68bf:	lea rax, [rip + 0x20f42]             
MEMORY OFFSET:     0x20f42     134978  >>134986

0x68c6:	mov eax, dword ptr [rdx + rax]       
0x68c9:	cdqe                                 
0x68cb:	lea rdx, [rip + 0x20f36]             
MEMORY OFFSET:     0x20f36     134966  >>134974

0x68d2:	add rax, rdx                         
0x68d5:	jmp rax                              
0x68d8:	mov eax, dword ptr [rip + 0x2a06a]   #		    if (|b|usy)
MEMORY OFFSET:     0x2a06a     172138  >>172146

0x68de:	test eax, eax                        #		    if |(|busy)
0x68e0:	je 0x68f1                            
0x68e2:	mov dword ptr [rip + 0x2a05c], 0     #			busy |=| 0;
MEMORY OFFSET:     0x2a05c     172124  >>172132

0x68ec:	jmp 0x7176                           #			|g|oto bad_command;
0x68f1:	add qword ptr [rbp - 0x60], 1        #		    if |(|*++src != '{')
MEMORY OFFSET:     -0x60     -96  >>-88

0x68f6:	mov rax, qword ptr [rbp - 0x60]      #		    if (|*|++src != '{')
MEMORY OFFSET:     -0x60     -96  >>-88

0x68fa:	movzx eax, byte ptr [rax]            
0x68fd:	cmp al, 0x7b                         #		    if |(|*++src != '{')
0x68ff:	jne 0x7169                           
0x6905:	add qword ptr [rbp - 0x60], 1        #		    if |(|(ptr = strchr(++src, '}')) == NULL)
MEMORY OFFSET:     -0x60     -96  >>-88

0x690a:	mov rax, qword ptr [rbp - 0x60]      #		    if ((ptr = |s|trchr(++src, '}')) == NULL)
MEMORY OFFSET:     -0x60     -96  >>-88

0x690e:	mov esi, 0x7d                        
0x6913:	mov rdi, rax                         
0x6916:	call 0x49b0                          
0x691b:	mov qword ptr [rbp - 0x48], rax      
MEMORY OFFSET:     -0x48     -72  >>-64

0x691f:	cmp qword ptr [rbp - 0x48], 0        #		    if |(|(ptr = strchr(++src, '}')) == NULL)
MEMORY OFFSET:     -0x48     -72  >>-64

0x6924:	je 0x716c                            
0x692a:	mov rax, qword ptr [rbp - 0x48]      #		    *ptr |=| 0;
MEMORY OFFSET:     -0x48     -72  >>-64

0x692e:	mov byte ptr [rax], 0                
0x6931:	mov rax, qword ptr [rbp - 0x60]      #		     c = |i|l_read_char(src, "yn", IL_MOVE);
MEMORY OFFSET:     -0x60     -96  >>-88

0x6935:	mov edx, 2                           
0x693a:	lea rcx, [rip + 0x20858]             
MEMORY OFFSET:     0x20858     133208  >>133216

0x6941:	mov rsi, rcx                         
0x6944:	mov rdi, rax                         
0x6947:	call 0x5c09                          
0x694c:	mov byte ptr [rbp - 0x9d], al        
MEMORY OFFSET:     -0x9d     -157  >>-149

0x6952:	mov rax, qword ptr [rbp - 0x48]      #		    *ptr |=| '}';
MEMORY OFFSET:     -0x48     -72  >>-64

0x6956:	mov byte ptr [rax], 0x7d             
0x6959:	cmp byte ptr [rbp - 0x9d], 0x79      #		    if |(|c != 'y')
MEMORY OFFSET:     -0x9d     -157  >>-149

0x6960:	jne 0x719d                           
0x6966:	mov rax, qword ptr [rbp - 0x48]      #		    src |=| ptr;
MEMORY OFFSET:     -0x48     -72  >>-64

0x696a:	mov qword ptr [rbp - 0x60], rax      
MEMORY OFFSET:     -0x60     -96  >>-88

0x696e:	jmp 0x70a9                           #		    |b|reak;
0x6973:	mov eax, dword ptr [rip + 0x29fcf]   #		    if (|b|usy)
MEMORY OFFSET:     0x29fcf     171983  >>171991

0x6979:	test eax, eax                        #		    if |(|busy)
0x697b:	je 0x698c                            
0x697d:	mov dword ptr [rip + 0x29fc1], 0     #			busy |=| 0;
MEMORY OFFSET:     0x29fc1     171969  >>171977

0x6987:	jmp 0x7176                           #			|g|oto bad_command;
0x698c:	add qword ptr [rbp - 0x60], 1        #		    if |(|*++src != '{')
MEMORY OFFSET:     -0x60     -96  >>-88

0x6991:	mov rax, qword ptr [rbp - 0x60]      #		    if (|*|++src != '{')
MEMORY OFFSET:     -0x60     -96  >>-88

0x6995:	movzx eax, byte ptr [rax]            
0x6998:	cmp al, 0x7b                         #		    if |(|*++src != '{')
0x699a:	jne 0x716f                           
0x69a0:	add qword ptr [rbp - 0x60], 1        #		    if |(|(ptr = strchr(++src, ',')) == NULL)
MEMORY OFFSET:     -0x60     -96  >>-88

0x69a5:	mov rax, qword ptr [rbp - 0x60]      #		    if ((ptr = |s|trchr(++src, ',')) == NULL)
MEMORY OFFSET:     -0x60     -96  >>-88

0x69a9:	mov esi, 0x2c                        
0x69ae:	mov rdi, rax                         
0x69b1:	call 0x49b0                          
0x69b6:	mov qword ptr [rbp - 0x48], rax      
MEMORY OFFSET:     -0x48     -72  >>-64

0x69ba:	cmp qword ptr [rbp - 0x48], 0        #		    if |(|(ptr = strchr(++src, ',')) == NULL)
MEMORY OFFSET:     -0x48     -72  >>-64

0x69bf:	je 0x7172                            
0x69c5:	mov rax, qword ptr [rbp - 0x48]      #		    *ptr |=| 0;
MEMORY OFFSET:     -0x48     -72  >>-64

0x69c9:	mov byte ptr [rax], 0                
0x69cc:	mov dword ptr [rip + 0x29f72], 1     #		    busy |=| 1;
MEMORY OFFSET:     0x29f72     171890  >>171898

0x69d6:	mov rax, qword ptr [rbp - 0xa8]      #		    save_body |=| command->body;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x69dd:	mov rax, qword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0x69e1:	mov qword ptr [rbp - 0x40], rax      
MEMORY OFFSET:     -0x40     -64  >>-56

0x69e5:	mov rax, qword ptr [rbp - 0xa8]      #		    command->body |=| src;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x69ec:	mov rdx, qword ptr [rbp - 0x60]      
MEMORY OFFSET:     -0x60     -96  >>-88

0x69f0:	mov qword ptr [rax + 8], rdx         
MEMORY OFFSET:     0x8     8  >>16

0x69f4:	mov rcx, qword ptr [rbp - 0xc0]      #		    retval = |c|ommand_expand(command, &answer, p, l);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x69fb:	mov rdx, qword ptr [rbp - 0xb8]      
MEMORY OFFSET:     -0xb8     -184  >>-176

0x6a02:	lea rsi, [rbp - 0x88]                
MEMORY OFFSET:     -0x88     -136  >>-128

0x6a09:	mov rax, qword ptr [rbp - 0xa8]      
MEMORY OFFSET:     -0xa8     -168  >>-160

0x6a10:	mov rdi, rax                         
0x6a13:	mov eax, 0                           
0x6a18:	call 0x6785                          
0x6a1d:	mov dword ptr [rbp - 0x98], eax      
MEMORY OFFSET:     -0x98     -152  >>-144

0x6a23:	mov rax, qword ptr [rbp - 0xa8]      #		    command->body |=| save_body;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x6a2a:	mov rdx, qword ptr [rbp - 0x40]      
MEMORY OFFSET:     -0x40     -64  >>-56

0x6a2e:	mov qword ptr [rax + 8], rdx         
MEMORY OFFSET:     0x8     8  >>16

0x6a32:	mov dword ptr [rip + 0x29f0c], 0     #		    busy |=| 0;
MEMORY OFFSET:     0x29f0c     171788  >>171796

0x6a3c:	cmp dword ptr [rbp - 0x98], 0        #		    if |(|retval < 1)
MEMORY OFFSET:     -0x98     -152  >>-144

0x6a43:	jg 0x6a5e                            
0x6a45:	mov rax, qword ptr [rbp - 0x48]      #			*ptr |=| ',';
MEMORY OFFSET:     -0x48     -72  >>-64

0x6a49:	mov byte ptr [rax], 0x2c             
0x6a4c:	cmp dword ptr [rbp - 0x98], 0        #			if |(|retval == 0)
MEMORY OFFSET:     -0x98     -152  >>-144

0x6a53:	jne 0x71a0                           
0x6a59:	jmp 0x7176                           #			    |g|oto bad_command;
0x6a5e:	mov rax, qword ptr [rbp - 0xa8]      #		    question = xmalloc(16 + strlen(command|-|>name) +
MEMORY OFFSET:     -0xa8     -168  >>-160

0x6a65:	mov rax, qword ptr [rax]             
0x6a68:	mov rdi, rax                         #		    question = xmalloc(16 + |s|trlen(command->name) +
0x6a6b:	call 0x4960                          
0x6a70:	mov rbx, rax                         
0x6a73:	mov rax, qword ptr [rbp - 0x88]      #				       |s|trlen(answer) + 1);
MEMORY OFFSET:     -0x88     -136  >>-128

0x6a7a:	mov rdi, rax                         
0x6a7d:	call 0x4960                          
0x6a82:	add rax, rbx                         #		    question = xmalloc(16 + strlen(command->name) |+|
0x6a85:	add rax, 0x11                        #		    question = |x|malloc(16 + strlen(command->name) +
0x6a89:	mov rdi, rax                         
0x6a8c:	call 0x24650                         
0x6a91:	mov qword ptr [rbp - 0x58], rax      
MEMORY OFFSET:     -0x58     -88  >>-80

0x6a95:	mov rcx, qword ptr [rbp - 0x88]      #		    |s|printf(question, "%s: %s", command->name, answer);
MEMORY OFFSET:     -0x88     -136  >>-128

0x6a9c:	mov rax, qword ptr [rbp - 0xa8]      
MEMORY OFFSET:     -0xa8     -168  >>-160

0x6aa3:	mov rdx, qword ptr [rax]             
0x6aa6:	mov rax, qword ptr [rbp - 0x58]      
MEMORY OFFSET:     -0x58     -88  >>-80

0x6aaa:	lea rsi, [rip + 0x206eb]             
MEMORY OFFSET:     0x206eb     132843  >>132851

0x6ab1:	mov rdi, rax                         
0x6ab4:	mov eax, 0                           
0x6ab9:	call 0x4dd0                          
0x6abe:	mov rax, qword ptr [rbp - 0x88]      #		    |x|free(answer);
MEMORY OFFSET:     -0x88     -136  >>-128

0x6ac5:	mov rdi, rax                         
0x6ac8:	call 0x1eeae                         
0x6acd:	mov qword ptr [rbp - 0x88], 0        #		    answer |=|  NULL;
MEMORY OFFSET:     -0x88     -136  >>-128

0x6ad8:	mov rax, qword ptr [rbp - 0x48]      #		    *ptr|+|+ = ',';
MEMORY OFFSET:     -0x48     -72  >>-64

0x6adc:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x6ae0:	mov qword ptr [rbp - 0x48], rdx      
MEMORY OFFSET:     -0x48     -72  >>-64

0x6ae4:	mov byte ptr [rax], 0x2c             #		    *ptr++ |=| ',';
0x6ae7:	mov rax, qword ptr [rbp - 0x48]      #		    if ((src = |s|trchr(ptr, '}')) == NULL)
MEMORY OFFSET:     -0x48     -72  >>-64

0x6aeb:	mov esi, 0x7d                        
0x6af0:	mov rdi, rax                         
0x6af3:	call 0x49b0                          
0x6af8:	mov qword ptr [rbp - 0x60], rax      
MEMORY OFFSET:     -0x60     -96  >>-88

0x6afc:	cmp qword ptr [rbp - 0x60], 0        #		    if |(|(src = strchr(ptr, '}')) == NULL)
MEMORY OFFSET:     -0x60     -96  >>-88

0x6b01:	je 0x7175                            
0x6b07:	mov rax, qword ptr [rbp - 0x60]      #		    *src |=| 0;
MEMORY OFFSET:     -0x60     -96  >>-88

0x6b0b:	mov byte ptr [rax], 0                
0x6b0e:	mov rax, qword ptr [rbp - 0x58]      #		    if (|s|trlen(question) > MAX_STATIC_SIZE)
MEMORY OFFSET:     -0x58     -88  >>-80

0x6b12:	mov rdi, rax                         
0x6b15:	call 0x4960                          
0x6b1a:	cmp rax, 0x32                        #		    if |(|strlen(question) > MAX_STATIC_SIZE)
0x6b1e:	jbe 0x6b2b                           
0x6b20:	mov rax, qword ptr [rbp - 0x58]      #			question|[|MAX_STATIC_SIZE] = 0;
MEMORY OFFSET:     -0x58     -88  >>-80

0x6b24:	add rax, 0x32                        
0x6b28:	mov byte ptr [rax], 0                #			question[MAX_STATIC_SIZE] |=| 0;
0x6b2b:	mov dword ptr [rip + 0x29e13], 1     #		    busy |=| 1;
MEMORY OFFSET:     0x29e13     171539  >>171547

0x6b35:	mov rax, qword ptr [rbp - 0xa8]      #		    save_body |=| command->body;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x6b3c:	mov rax, qword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0x6b40:	mov qword ptr [rbp - 0x40], rax      
MEMORY OFFSET:     -0x40     -64  >>-56

0x6b44:	mov rax, qword ptr [rbp - 0xa8]      #		    command->body |=| ptr;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x6b4b:	mov rdx, qword ptr [rbp - 0x48]      
MEMORY OFFSET:     -0x48     -72  >>-64

0x6b4f:	mov qword ptr [rax + 8], rdx         
MEMORY OFFSET:     0x8     8  >>16

0x6b53:	mov rcx, qword ptr [rbp - 0xc0]      #		    retval = |c|ommand_expand(command, &answer, p, l);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x6b5a:	mov rdx, qword ptr [rbp - 0xb8]      
MEMORY OFFSET:     -0xb8     -184  >>-176

0x6b61:	lea rsi, [rbp - 0x88]                
MEMORY OFFSET:     -0x88     -136  >>-128

0x6b68:	mov rax, qword ptr [rbp - 0xa8]      
MEMORY OFFSET:     -0xa8     -168  >>-160

0x6b6f:	mov rdi, rax                         
0x6b72:	mov eax, 0                           
0x6b77:	call 0x6785                          
0x6b7c:	mov dword ptr [rbp - 0x98], eax      
MEMORY OFFSET:     -0x98     -152  >>-144

0x6b82:	mov rax, qword ptr [rbp - 0xa8]      #		    command->body |=| save_body;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x6b89:	mov rdx, qword ptr [rbp - 0x40]      
MEMORY OFFSET:     -0x40     -64  >>-56

0x6b8d:	mov qword ptr [rax + 8], rdx         
MEMORY OFFSET:     0x8     8  >>16

0x6b91:	mov dword ptr [rip + 0x29dad], 0     #		    busy |=| 0;
MEMORY OFFSET:     0x29dad     171437  >>171445

0x6b9b:	cmp dword ptr [rbp - 0x98], 0        #		    if |(|retval < 1)
MEMORY OFFSET:     -0x98     -152  >>-144

0x6ba2:	jg 0x6bd1                            
0x6ba4:	mov rax, qword ptr [rbp - 0x60]      #			*src |=| '}';
MEMORY OFFSET:     -0x60     -96  >>-88

0x6ba8:	mov byte ptr [rax], 0x7d             
0x6bab:	mov rax, qword ptr [rbp - 0x58]      #			|x|free(question);
MEMORY OFFSET:     -0x58     -88  >>-80

0x6baf:	mov rdi, rax                         
0x6bb2:	call 0x1eeae                         
0x6bb7:	mov qword ptr [rbp - 0x58], 0        #			question |=| NULL;
MEMORY OFFSET:     -0x58     -88  >>-80

0x6bbf:	cmp dword ptr [rbp - 0x98], 0        #			if |(|retval == 0)
MEMORY OFFSET:     -0x98     -152  >>-144

0x6bc6:	jne 0x71a3                           
0x6bcc:	jmp 0x7176                           #			    |g|oto bad_command;
0x6bd1:	mov rax, qword ptr [rbp - 0xa8]      #		    flag = |i|l_read_line(question, &tmp, answer,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x6bd8:	mov rcx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0x6bdc:	mov rdx, qword ptr [rbp - 0x88]      
MEMORY OFFSET:     -0x88     -136  >>-128

0x6be3:	lea rsi, [rbp - 0x80]                
MEMORY OFFSET:     -0x80     -128  >>-120

0x6be7:	mov rax, qword ptr [rbp - 0x58]      
MEMORY OFFSET:     -0x58     -88  >>-80

0x6beb:	mov rdi, rax                         
0x6bee:	call 0x5efb                          
0x6bf3:	mov qword ptr [rbp - 0x38], rax      
MEMORY OFFSET:     -0x38     -56  >>-48

0x6bf7:	mov rax, qword ptr [rbp - 0x58]      #		    |x|free(question);
MEMORY OFFSET:     -0x58     -88  >>-80

0x6bfb:	mov rdi, rax                         
0x6bfe:	call 0x1eeae                         
0x6c03:	mov rax, qword ptr [rbp - 0x88]      #		    |x|free(answer);
MEMORY OFFSET:     -0x88     -136  >>-128

0x6c0a:	mov rdi, rax                         
0x6c0d:	call 0x1eeae                         
0x6c12:	mov qword ptr [rbp - 0x88], 0        #		    question = answer |=| NULL;
MEMORY OFFSET:     -0x88     -136  >>-128

0x6c1d:	mov rax, qword ptr [rbp - 0x88]      #		    question |=| answer = NULL;
MEMORY OFFSET:     -0x88     -136  >>-128

0x6c24:	mov qword ptr [rbp - 0x58], rax      
MEMORY OFFSET:     -0x58     -88  >>-80

0x6c28:	cmp qword ptr [rbp - 0x38], 0        #		    if |(|flag == NULL)
MEMORY OFFSET:     -0x38     -56  >>-48

0x6c2d:	jne 0x6c3b                           
0x6c2f:	mov rax, qword ptr [rbp - 0x60]      #			*src |=| '}';
MEMORY OFFSET:     -0x60     -96  >>-88

0x6c33:	mov byte ptr [rax], 0x7d             
0x6c36:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6c3b:	mov rax, qword ptr [rbp - 0x60]      #		    *src |=| '}';
MEMORY OFFSET:     -0x60     -96  >>-88

0x6c3f:	mov byte ptr [rax], 0x7d             
0x6c42:	jmp 0x70a9                           #		    |b|reak;
0x6c47:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != FILE_ENTRY)
MEMORY OFFSET:     -0x50     -80  >>-72

0x6c4b:	mov rdi, rax                         
0x6c4e:	call 0x1119a                         
0x6c53:	cmp eax, 1                           #		    if |(|panel_get_current_file_type(t) != FILE_ENTRY)
0x6c56:	jne 0x71a6                           
0x6c5c:	jmp 0x6c6b                           #		  |g|et_file_name:
0x6c5e:	nop                                  #		    |g|oto get_file_name;
0x6c5f:	jmp 0x6c6b                           
0x6c61:	nop                                  #		    |g|oto get_file_name;
0x6c62:	jmp 0x6c6b                           
0x6c64:	nop                                  #		    |g|oto get_file_name;
0x6c65:	jmp 0x6c6b                           
0x6c67:	nop                                  #		    |g|oto get_file_name;
0x6c68:	jmp 0x6c6b                           
0x6c6a:	nop                                  #		    |g|oto get_file_name;
0x6c6b:	mov rax, qword ptr [rbp - 0x50]      #		    ptr = |p|anel_get_current_file_name(t);
MEMORY OFFSET:     -0x50     -80  >>-72

0x6c6f:	mov rdi, rax                         
0x6c72:	call 0x110ca                         
0x6c77:	mov qword ptr [rbp - 0x48], rax      
MEMORY OFFSET:     -0x48     -72  >>-64

0x6c7b:	mov rax, qword ptr [rbp - 0x48]      #		    tmp = xmalloc(1 + |s|trlen(ptr) + 1 + 1);
MEMORY OFFSET:     -0x48     -72  >>-64

0x6c7f:	mov rdi, rax                         
0x6c82:	call 0x4960                          
0x6c87:	add rax, 3                           #		    tmp = |x|malloc(1 + strlen(ptr) + 1 + 1);
0x6c8b:	mov rdi, rax                         
0x6c8e:	call 0x24650                         
0x6c93:	mov qword ptr [rbp - 0x80], rax      #		    tmp |=| xmalloc(1 + strlen(ptr) + 1 + 1);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6c97:	mov rax, qword ptr [rbp - 0x80]      #		    |s|printf(tmp, "\"%s\"", ptr);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6c9b:	mov rdx, qword ptr [rbp - 0x48]      
MEMORY OFFSET:     -0x48     -72  >>-64

0x6c9f:	lea rcx, [rip + 0x204fd]             
MEMORY OFFSET:     0x204fd     132349  >>132357

0x6ca6:	mov rsi, rcx                         
0x6ca9:	mov rdi, rax                         
0x6cac:	mov eax, 0                           
0x6cb1:	call 0x4dd0                          
0x6cb6:	jmp 0x70a9                           #		    |b|reak;
0x6cbb:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != DIR_ENTRY)
MEMORY OFFSET:     -0x50     -80  >>-72

0x6cbf:	mov rdi, rax                         
0x6cc2:	call 0x1119a                         
0x6cc7:	test eax, eax                        #		    if |(|panel_get_current_file_type(t) != DIR_ENTRY)
0x6cc9:	je 0x6c61                            
0x6ccb:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6cd0:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != SYMLINK_ENTRY)
MEMORY OFFSET:     -0x50     -80  >>-72

0x6cd4:	mov rdi, rax                         
0x6cd7:	call 0x1119a                         
0x6cdc:	cmp eax, 2                           #		    if |(|panel_get_current_file_type(t) != SYMLINK_ENTRY)
0x6cdf:	je 0x6c64                            
0x6ce1:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6ce6:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != FIFO_ENTRY)
MEMORY OFFSET:     -0x50     -80  >>-72

0x6cea:	mov rdi, rax                         
0x6ced:	call 0x1119a                         
0x6cf2:	cmp eax, 3                           #		    if |(|panel_get_current_file_type(t) != FIFO_ENTRY)
0x6cf5:	je 0x6c67                            
0x6cfb:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6d00:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != SOCKET_ENTRY)
MEMORY OFFSET:     -0x50     -80  >>-72

0x6d04:	mov rdi, rax                         
0x6d07:	call 0x1119a                         
0x6d0c:	cmp eax, 4                           #		    if |(|panel_get_current_file_type(t) != SOCKET_ENTRY)
0x6d0f:	je 0x6c6a                            
0x6d15:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6d1a:	mov edi, 0x10                        #		    tmp = |x|malloc(16);
0x6d1f:	call 0x24650                         
0x6d24:	mov qword ptr [rbp - 0x80], rax      #		    tmp |=| xmalloc(16);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6d28:	mov rax, qword ptr [rbp - 0x50]      #			    (int)|p|anel_get_current_file_mode(t) & 07777);
MEMORY OFFSET:     -0x50     -80  >>-72

0x6d2c:	mov rdi, rax                         
0x6d2f:	call 0x11166                         
0x6d34:	and eax, 0xfff                       #		    |s|printf(tmp, "%o",
0x6d39:	mov edx, eax                         
0x6d3b:	mov rax, qword ptr [rbp - 0x80]      
MEMORY OFFSET:     -0x80     -128  >>-120

0x6d3f:	lea rcx, [rip + 0x20462]             
MEMORY OFFSET:     0x20462     132194  >>132202

0x6d46:	mov rsi, rcx                         
0x6d49:	mov rdi, rax                         
0x6d4c:	mov eax, 0                           
0x6d51:	call 0x4dd0                          
0x6d56:	jmp 0x70a9                           #		    |b|reak;
0x6d5b:	mov rax, qword ptr [rbp - 0x50]      #		    uid = |p|anel_get_current_file_uid(t);
MEMORY OFFSET:     -0x50     -80  >>-72

0x6d5f:	mov rdi, rax                         
0x6d62:	call 0x110fe                         
0x6d67:	mov dword ptr [rbp - 0x94], eax      
MEMORY OFFSET:     -0x94     -148  >>-140

0x6d6d:	mov eax, dword ptr [rbp - 0x94]      #		    pwd = |g|etpwuid(uid);
MEMORY OFFSET:     -0x94     -148  >>-140

0x6d73:	mov edi, eax                         
0x6d75:	call 0x4930                          
0x6d7a:	mov qword ptr [rbp - 0x30], rax      
MEMORY OFFSET:     -0x30     -48  >>-40

0x6d7e:	cmp qword ptr [rbp - 0x30], 0        #		    if |(|pwd)
MEMORY OFFSET:     -0x30     -48  >>-40

0x6d83:	je 0x6d9d                            
0x6d85:	mov rax, qword ptr [rbp - 0x30]      #			tmp = xstrdup(pwd|-|>pw_name);
MEMORY OFFSET:     -0x30     -48  >>-40

0x6d89:	mov rax, qword ptr [rax]             
0x6d8c:	mov rdi, rax                         #			tmp = |x|strdup(pwd->pw_name);
0x6d8f:	call 0x24780                         
0x6d94:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xstrdup(pwd->pw_name);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6d98:	jmp 0x70a9                           #		    |b|reak;
0x6d9d:	mov edi, 0x10                        #			tmp = |x|malloc(16);
0x6da2:	call 0x24650                         
0x6da7:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xmalloc(16);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6dab:	mov edx, dword ptr [rbp - 0x94]      #			|s|printf(tmp, "%o", (int)uid);
MEMORY OFFSET:     -0x94     -148  >>-140

0x6db1:	mov rax, qword ptr [rbp - 0x80]      
MEMORY OFFSET:     -0x80     -128  >>-120

0x6db5:	lea rcx, [rip + 0x203ec]             
MEMORY OFFSET:     0x203ec     132076  >>132084

0x6dbc:	mov rsi, rcx                         
0x6dbf:	mov rdi, rax                         
0x6dc2:	mov eax, 0                           
0x6dc7:	call 0x4dd0                          
0x6dcc:	jmp 0x70a9                           #		    |b|reak;
0x6dd1:	mov rax, qword ptr [rbp - 0x50]      #		    gid = |p|anel_get_current_file_gid(t);
MEMORY OFFSET:     -0x50     -80  >>-72

0x6dd5:	mov rdi, rax                         
0x6dd8:	call 0x11132                         
0x6ddd:	mov dword ptr [rbp - 0x8c], eax      
MEMORY OFFSET:     -0x8c     -140  >>-132

0x6de3:	mov eax, dword ptr [rbp - 0x8c]      #		    grp = |g|etgrgid(gid);
MEMORY OFFSET:     -0x8c     -140  >>-132

0x6de9:	mov edi, eax                         
0x6deb:	call 0x49d0                          
0x6df0:	mov qword ptr [rbp - 0x20], rax      
MEMORY OFFSET:     -0x20     -32  >>-24

0x6df4:	cmp qword ptr [rbp - 0x20], 0        #		    if |(|grp)
MEMORY OFFSET:     -0x20     -32  >>-24

0x6df9:	je 0x6e13                            
0x6dfb:	mov rax, qword ptr [rbp - 0x20]      #			tmp = xstrdup(grp|-|>gr_name);
MEMORY OFFSET:     -0x20     -32  >>-24

0x6dff:	mov rax, qword ptr [rax]             
0x6e02:	mov rdi, rax                         #			tmp = |x|strdup(grp->gr_name);
0x6e05:	call 0x24780                         
0x6e0a:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xstrdup(grp->gr_name);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6e0e:	jmp 0x70a9                           #		    |b|reak;
0x6e13:	mov edi, 0x10                        #			tmp = |x|malloc(16);
0x6e18:	call 0x24650                         
0x6e1d:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xmalloc(16);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6e21:	mov edx, dword ptr [rbp - 0x8c]      #			|s|printf(tmp, "%o", (int)gid);
MEMORY OFFSET:     -0x8c     -140  >>-132

0x6e27:	mov rax, qword ptr [rbp - 0x80]      
MEMORY OFFSET:     -0x80     -128  >>-120

0x6e2b:	lea rcx, [rip + 0x20376]             
MEMORY OFFSET:     0x20376     131958  >>131966

0x6e32:	mov rsi, rcx                         
0x6e35:	mov rdi, rax                         
0x6e38:	mov eax, 0                           
0x6e3d:	call 0x4dd0                          
0x6e42:	jmp 0x70a9                           #		    |b|reak;
0x6e47:	mov rax, qword ptr [rbp - 0x50]      #		    tmp = xmalloc(1 + strlen(t|-|>path) + 1 + 1);
MEMORY OFFSET:     -0x50     -80  >>-72

0x6e4b:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0x6e4f:	mov rdi, rax                         #		    tmp = xmalloc(1 + |s|trlen(t->path) + 1 + 1);
0x6e52:	call 0x4960                          
0x6e57:	add rax, 3                           #		    tmp = |x|malloc(1 + strlen(t->path) + 1 + 1);
0x6e5b:	mov rdi, rax                         
0x6e5e:	call 0x24650                         
0x6e63:	mov qword ptr [rbp - 0x80], rax      #		    tmp |=| xmalloc(1 + strlen(t->path) + 1 + 1);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6e67:	mov rax, qword ptr [rbp - 0x50]      #		    |s|printf(tmp, "\"%s\"", t->path);
MEMORY OFFSET:     -0x50     -80  >>-72

0x6e6b:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0x6e6f:	mov rax, qword ptr [rbp - 0x80]      
MEMORY OFFSET:     -0x80     -128  >>-120

0x6e73:	lea rcx, [rip + 0x20329]             
MEMORY OFFSET:     0x20329     131881  >>131889

0x6e7a:	mov rsi, rcx                         
0x6e7d:	mov rdi, rax                         
0x6e80:	mov eax, 0                           
0x6e85:	call 0x4dd0                          
0x6e8a:	jmp 0x70a9                           #		    |b|reak;
0x6e8f:	mov rax, qword ptr [rbp - 0x50]      #		    ptr = strrchr(t|-|>path, '/');
MEMORY OFFSET:     -0x50     -80  >>-72

0x6e93:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0x6e97:	mov esi, 0x2f                        #		    ptr = |s|trrchr(t->path, '/');
0x6e9c:	mov rdi, rax                         
0x6e9f:	call 0x49e0                          
0x6ea4:	mov qword ptr [rbp - 0x48], rax      
MEMORY OFFSET:     -0x48     -72  >>-64

0x6ea8:	add qword ptr [rbp - 0x48], 1        #		    ptr = (*++ptr) ? ptr |:| "/root";
MEMORY OFFSET:     -0x48     -72  >>-64

0x6ead:	mov rax, qword ptr [rbp - 0x48]      #		    ptr = (|*|++ptr) ? ptr : "/root";
MEMORY OFFSET:     -0x48     -72  >>-64

0x6eb1:	movzx eax, byte ptr [rax]            
0x6eb4:	test al, al                          #		    ptr = (*++ptr) ? ptr |:| "/root";
0x6eb6:	je 0x6ebe                            
0x6eb8:	mov rax, qword ptr [rbp - 0x48]      #		    ptr = (*++ptr) ? ptr |:| "/root";
MEMORY OFFSET:     -0x48     -72  >>-64

0x6ebc:	jmp 0x6ec5                           
0x6ebe:	lea rax, [rip + 0x202e6]             #		    ptr = (*++ptr) ? ptr |:| "/root";
MEMORY OFFSET:     0x202e6     131814  >>131822

0x6ec5:	mov qword ptr [rbp - 0x48], rax      #		    ptr |=| (*++ptr) ? ptr : "/root";
MEMORY OFFSET:     -0x48     -72  >>-64

0x6ec9:	mov rax, qword ptr [rbp - 0x48]      #		    tmp = xmalloc(1 + |s|trlen(ptr) + 1 + 1);
MEMORY OFFSET:     -0x48     -72  >>-64

0x6ecd:	mov rdi, rax                         
0x6ed0:	call 0x4960                          
0x6ed5:	add rax, 3                           #		    tmp = |x|malloc(1 + strlen(ptr) + 1 + 1);
0x6ed9:	mov rdi, rax                         
0x6edc:	call 0x24650                         
0x6ee1:	mov qword ptr [rbp - 0x80], rax      #		    tmp |=| xmalloc(1 + strlen(ptr) + 1 + 1);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6ee5:	mov rax, qword ptr [rbp - 0x80]      #		    |s|printf(tmp, "\"%s\"", ptr);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6ee9:	mov rdx, qword ptr [rbp - 0x48]      
MEMORY OFFSET:     -0x48     -72  >>-64

0x6eed:	lea rcx, [rip + 0x202af]             
MEMORY OFFSET:     0x202af     131759  >>131767

0x6ef4:	mov rsi, rcx                         
0x6ef7:	mov rdi, rax                         
0x6efa:	mov eax, 0                           
0x6eff:	call 0x4dd0                          
0x6f04:	jmp 0x70a9                           #		    |b|reak;
0x6f09:	mov rax, qword ptr [rbp - 0x60]      #		    i_flag = (|*|src == 'i') ? 1 : 2;
MEMORY OFFSET:     -0x60     -96  >>-88

0x6f0d:	movzx eax, byte ptr [rax]            
0x6f10:	cmp al, 0x69                         #		    i_flag = (*src == 'i') ? 1 |:| 2;
0x6f12:	jne 0x6f1b                           
0x6f14:	mov eax, 1                           #		    i_flag = (*src == 'i') ? 1 |:| 2;
0x6f19:	jmp 0x6f20                           
0x6f1b:	mov eax, 2                           #		    i_flag = (*src == 'i') ? 1 |:| 2;
0x6f20:	mov dword ptr [rbp - 0x9c], eax      #		    i_flag |=| (*src == 'i') ? 1 : 2;
MEMORY OFFSET:     -0x9c     -156  >>-148

0x6f26:	mov eax, dword ptr [rip + 0x29a1c]   #		    if (|b|usy && t->selected_entries)
MEMORY OFFSET:     0x29a1c     170524  >>170532

0x6f2c:	test eax, eax                        #		    if |(|busy && t->selected_entries)
0x6f2e:	je 0x6f7f                            
0x6f30:	mov rax, qword ptr [rbp - 0x50]      #		    if (busy && t|-|>selected_entries)
MEMORY OFFSET:     -0x50     -80  >>-72

0x6f34:	mov eax, dword ptr [rax + 0x70]      
MEMORY OFFSET:     0x70     112  >>120

0x6f37:	test eax, eax                        #		    if (busy |&|& t->selected_entries)
0x6f39:	je 0x6f7f                            
0x6f3b:	mov qword ptr [rbp - 0x70], 0x14     #			tmplen |=| 20;
MEMORY OFFSET:     -0x70     -112  >>-104

0x6f43:	mov rax, qword ptr [rbp - 0x70]      #			tmp = |x|malloc(tmplen + 1);
MEMORY OFFSET:     -0x70     -112  >>-104

0x6f47:	add rax, 1                           
0x6f4b:	mov rdi, rax                         
0x6f4e:	call 0x24650                         
0x6f53:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xmalloc(tmplen + 1);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6f57:	mov rax, qword ptr [rbp - 0x80]      #			|s|trcpy(tmp, "selected entries");
MEMORY OFFSET:     -0x80     -128  >>-120

0x6f5b:	movabs rbx, 0x64657463656c6573       
0x6f65:	movabs rsi, 0x73656972746e6520       
0x6f6f:	mov qword ptr [rax], rbx             
0x6f72:	mov qword ptr [rax + 8], rsi         
MEMORY OFFSET:     0x8     8  >>16

0x6f76:	mov byte ptr [rax + 0x10], 0         
MEMORY OFFSET:     0x10     16  >>24

0x6f7a:	jmp 0x70a9                           #			|b|reak;
0x6f7f:	mov qword ptr [rbp - 0x80], 0        #		    tmp |=| NULL;
MEMORY OFFSET:     -0x80     -128  >>-120

0x6f87:	mov qword ptr [rbp - 0x70], 0        #		    tmplen |=| 0;
MEMORY OFFSET:     -0x70     -112  >>-104

0x6f8f:	mov rax, qword ptr [rbp - 0x50]      #		    |p|anel_init_iterator(t);
MEMORY OFFSET:     -0x50     -80  >>-72

0x6f93:	mov rdi, rax                         
0x6f96:	call 0x13121                         
0x6f9b:	jmp 0x707e                           #		    while |(|(entry = panel_get_next(t)) != -1)
0x6fa0:	mov rax, qword ptr [rbp - 0x70]      #			oldtmplen |=| tmplen;
MEMORY OFFSET:     -0x70     -112  >>-104

0x6fa4:	mov qword ptr [rbp - 0x28], rax      
MEMORY OFFSET:     -0x28     -40  >>-32

0x6fa8:	mov rax, qword ptr [rbp - 0x50]      #			tmplen += 1 + strlen(t|-|>dir_entry[entry].name) + 1 + 1;
MEMORY OFFSET:     -0x50     -80  >>-72

0x6fac:	mov rcx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0x6fb0:	mov eax, dword ptr [rbp - 0x90]      #			tmplen += 1 + strlen(t->dir_entry|[|entry].name) + 1 + 1;
MEMORY OFFSET:     -0x90     -144  >>-136

0x6fb6:	movsxd rdx, eax                      
0x6fb9:	mov rax, rdx                         
0x6fbc:	shl rax, 2                           
0x6fc0:	add rax, rdx                         
0x6fc3:	shl rax, 4                           
0x6fc7:	add rax, rcx                         
0x6fca:	mov rax, qword ptr [rax]             #			tmplen += 1 + strlen(t->dir_entry[entry]|.|name) + 1 + 1;
0x6fcd:	mov rdi, rax                         #			tmplen += 1 + |s|trlen(t->dir_entry[entry].name) + 1 + 1;
0x6fd0:	call 0x4960                          
0x6fd5:	mov rdx, qword ptr [rbp - 0x70]      #			tmplen |+|= 1 + strlen(t->dir_entry[entry].name) + 1 + 1;
MEMORY OFFSET:     -0x70     -112  >>-104

0x6fd9:	add rax, rdx                         
0x6fdc:	add rax, 3                           
0x6fe0:	mov qword ptr [rbp - 0x70], rax      
MEMORY OFFSET:     -0x70     -112  >>-104

0x6fe4:	mov rax, qword ptr [rbp - 0x70]      #			tmp = |x|realloc(tmp, tmplen + 1);
MEMORY OFFSET:     -0x70     -112  >>-104

0x6fe8:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x6fec:	mov rax, qword ptr [rbp - 0x80]      
MEMORY OFFSET:     -0x80     -128  >>-120

0x6ff0:	mov rsi, rdx                         
0x6ff3:	mov rdi, rax                         
0x6ff6:	call 0x24670                         
0x6ffb:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xrealloc(tmp, tmplen + 1);
MEMORY OFFSET:     -0x80     -128  >>-120

0x6fff:	mov rdx, qword ptr [rbp - 0x80]      #			tmp|[|oldtmplen] = '"';
MEMORY OFFSET:     -0x80     -128  >>-120

0x7003:	mov rax, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0x7007:	add rax, rdx                         
0x700a:	mov byte ptr [rax], 0x22             #			tmp[oldtmplen] |=| '"';
0x700d:	mov rax, qword ptr [rbp - 0x50]      #			strcpy(tmp + oldtmplen + 1, t|-|>dir_entry[entry].name);
MEMORY OFFSET:     -0x50     -80  >>-72

0x7011:	mov rcx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0x7015:	mov eax, dword ptr [rbp - 0x90]      #			strcpy(tmp + oldtmplen + 1, t->dir_entry|[|entry].name);
MEMORY OFFSET:     -0x90     -144  >>-136

0x701b:	movsxd rdx, eax                      
0x701e:	mov rax, rdx                         
0x7021:	shl rax, 2                           
0x7025:	add rax, rdx                         
0x7028:	shl rax, 4                           
0x702c:	add rax, rcx                         
0x702f:	mov rax, qword ptr [rax]             #			strcpy(tmp + oldtmplen + 1, t->dir_entry[entry]|.|name);
0x7032:	mov rcx, qword ptr [rbp - 0x80]      #			|s|trcpy(tmp + oldtmplen + 1, t->dir_entry[entry].name);
MEMORY OFFSET:     -0x80     -128  >>-120

0x7036:	mov rdx, qword ptr [rbp - 0x28]      #			strcpy(tmp + oldtmplen |+| 1, t->dir_entry[entry].name);
MEMORY OFFSET:     -0x28     -40  >>-32

0x703a:	add rdx, 1                           
0x703e:	add rdx, rcx                         #			|s|trcpy(tmp + oldtmplen + 1, t->dir_entry[entry].name);
0x7041:	mov rsi, rax                         
0x7044:	mov rdi, rdx                         
0x7047:	call 0x4870                          
0x704c:	mov rdx, qword ptr [rbp - 0x80]      #			tmp|[|tmplen - 2] = '"';
MEMORY OFFSET:     -0x80     -128  >>-120

0x7050:	mov rax, qword ptr [rbp - 0x70]      
MEMORY OFFSET:     -0x70     -112  >>-104

0x7054:	sub rax, 2                           
0x7058:	add rax, rdx                         
0x705b:	mov byte ptr [rax], 0x22             #			tmp[tmplen - 2] |=| '"';
0x705e:	mov rdx, qword ptr [rbp - 0x80]      #			tmp|[|tmplen - 1] = ' ';
MEMORY OFFSET:     -0x80     -128  >>-120

0x7062:	mov rax, qword ptr [rbp - 0x70]      
MEMORY OFFSET:     -0x70     -112  >>-104

0x7066:	sub rax, 1                           
0x706a:	add rax, rdx                         
0x706d:	mov byte ptr [rax], 0x20             #			tmp[tmplen - 1] |=| ' ';
0x7070:	mov rdx, qword ptr [rbp - 0x80]      #			tmp|[|tmplen    ] = 0;
MEMORY OFFSET:     -0x80     -128  >>-120

0x7074:	mov rax, qword ptr [rbp - 0x70]      
MEMORY OFFSET:     -0x70     -112  >>-104

0x7078:	add rax, rdx                         
0x707b:	mov byte ptr [rax], 0                #			tmp[tmplen    ] |=| 0;
0x707e:	mov rax, qword ptr [rbp - 0x50]      #		    while ((entry = |p|anel_get_next(t)) != -1)
MEMORY OFFSET:     -0x50     -80  >>-72

0x7082:	mov rdi, rax                         
0x7085:	call 0x13149                         
0x708a:	mov dword ptr [rbp - 0x90], eax      
MEMORY OFFSET:     -0x90     -144  >>-136

0x7090:	cmp dword ptr [rbp - 0x90], -1       #		    while ((entry = panel_get_next(t)) |!|= -1)
MEMORY OFFSET:     -0x90     -144  >>-136

0x7097:	jne 0x6fa0                           
0x709d:	cmp qword ptr [rbp - 0x70], 0        #		    if |(|tmplen == 0)
MEMORY OFFSET:     -0x70     -112  >>-104

0x70a2:	je 0x71a9                            
0x70a8:	nop                                  #		    |b|reak;
0x70a9:	add qword ptr [rbp - 0x60], 1        #	    src|+|+;
MEMORY OFFSET:     -0x60     -96  >>-88

0x70ae:	mov rax, qword ptr [rbp - 0x68]      #	    *d |=| 0;
MEMORY OFFSET:     -0x68     -104  >>-96

0x70b2:	mov byte ptr [rax], 0                
0x70b5:	mov rax, qword ptr [rbp - 0x80]      #	    if (|t|mp)
MEMORY OFFSET:     -0x80     -128  >>-120

0x70b9:	test rax, rax                        #	    if |(|tmp)
0x70bc:	je 0x7145                            
0x70c2:	mov rax, qword ptr [rbp - 0x80]      #		*dest = xrealloc(*dest, len += |s|trlen(tmp));
MEMORY OFFSET:     -0x80     -128  >>-120

0x70c6:	mov rdi, rax                         
0x70c9:	call 0x4960                          
0x70ce:	add qword ptr [rbp - 0x78], rax      #		*dest = |x|realloc(*dest, len += strlen(tmp));
MEMORY OFFSET:     -0x78     -120  >>-112

0x70d2:	mov rax, qword ptr [rbp - 0xb0]      
MEMORY OFFSET:     -0xb0     -176  >>-168

0x70d9:	mov rax, qword ptr [rax]             
0x70dc:	mov rdx, qword ptr [rbp - 0x78]      
MEMORY OFFSET:     -0x78     -120  >>-112

0x70e0:	mov rsi, rdx                         
0x70e3:	mov rdi, rax                         
0x70e6:	call 0x24670                         
0x70eb:	mov rdx, qword ptr [rbp - 0xb0]      #		*dest |=| xrealloc(*dest, len += strlen(tmp));
MEMORY OFFSET:     -0xb0     -176  >>-168

0x70f2:	mov qword ptr [rdx], rax             
0x70f5:	mov rdx, qword ptr [rbp - 0x80]      #		|s|trcat(*dest, tmp);
MEMORY OFFSET:     -0x80     -128  >>-120

0x70f9:	mov rax, qword ptr [rbp - 0xb0]      
MEMORY OFFSET:     -0xb0     -176  >>-168

0x7100:	mov rax, qword ptr [rax]             
0x7103:	mov rsi, rdx                         
0x7106:	mov rdi, rax                         
0x7109:	call 0x4db0                          
0x710e:	mov rax, qword ptr [rbp - 0xb0]      #		d = |*|dest + strlen(*dest);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x7115:	mov rbx, qword ptr [rax]             
0x7118:	mov rax, qword ptr [rbp - 0xb0]      #		d = *dest + |s|trlen(*dest);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x711f:	mov rax, qword ptr [rax]             
0x7122:	mov rdi, rax                         
0x7125:	call 0x4960                          
0x712a:	add rax, rbx                         #		d |=| *dest + strlen(*dest);
0x712d:	mov qword ptr [rbp - 0x68], rax      
MEMORY OFFSET:     -0x68     -104  >>-96

0x7131:	mov rax, qword ptr [rbp - 0x80]      #		|x|free(tmp);
MEMORY OFFSET:     -0x80     -128  >>-120

0x7135:	mov rdi, rax                         
0x7138:	call 0x1eeae                         
0x713d:	mov qword ptr [rbp - 0x80], 0        #		tmp |=| NULL;
MEMORY OFFSET:     -0x80     -128  >>-120

0x7145:	mov rax, qword ptr [rbp - 0x60]      #    while (|*|src)
MEMORY OFFSET:     -0x60     -96  >>-88

0x7149:	movzx eax, byte ptr [rax]            
0x714c:	test al, al                          
0x714e:	jne 0x6831                           
0x7154:	mov rax, qword ptr [rbp - 0x68]      #    *d |=| 0;
MEMORY OFFSET:     -0x68     -104  >>-96

0x7158:	mov byte ptr [rax], 0                
0x715b:	mov eax, dword ptr [rbp - 0x9c]      #    return 1 |+| i_flag;
MEMORY OFFSET:     -0x9c     -156  >>-148

0x7161:	add eax, 1                           
0x7164:	jmp 0x71d2                           
0x7166:	nop                                  #		    |g|oto bad_command;
0x7167:	jmp 0x7176                           
0x7169:	nop                                  #			|g|oto bad_command;
0x716a:	jmp 0x7176                           
0x716c:	nop                                  #			|g|oto bad_command;
0x716d:	jmp 0x7176                           
0x716f:	nop                                  #			|g|oto bad_command;
0x7170:	jmp 0x7176                           
0x7172:	nop                                  #			|g|oto bad_command;
0x7173:	jmp 0x7176                           
0x7175:	nop                                  #			|g|oto bad_command;
0x7176:	mov rax, qword ptr [rbp - 0xb0]      #    |x|free(*dest);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x717d:	mov rax, qword ptr [rax]             
0x7180:	mov rdi, rax                         
0x7183:	call 0x1eeae                         
0x7188:	mov rax, qword ptr [rbp - 0xb0]      #    *dest |=| NULL;
MEMORY OFFSET:     -0xb0     -176  >>-168

0x718f:	mov qword ptr [rax], 0               
0x7196:	mov eax, 0                           #    return |0|;
0x719b:	jmp 0x71d2                           
0x719d:	nop                                  #			|g|oto strings_dont_match;
0x719e:	jmp 0x71aa                           
0x71a0:	nop                                  #			    |g|oto strings_dont_match;
0x71a1:	jmp 0x71aa                           
0x71a3:	nop                                  #			|g|oto strings_dont_match;
0x71a4:	jmp 0x71aa                           
0x71a6:	nop                                  #			|g|oto strings_dont_match;
0x71a7:	jmp 0x71aa                           
0x71a9:	nop                                  #			|g|oto strings_dont_match;
0x71aa:	mov rax, qword ptr [rbp - 0x80]      #    if (|t|mp)
MEMORY OFFSET:     -0x80     -128  >>-120

0x71ae:	test rax, rax                        #    if |(|tmp)
0x71b1:	je 0x71bf                            
0x71b3:	mov rax, qword ptr [rbp - 0x80]      #	|x|free(tmp);
MEMORY OFFSET:     -0x80     -128  >>-120

0x71b7:	mov rdi, rax                         
0x71ba:	call 0x1eeae                         
0x71bf:	mov rax, qword ptr [rbp - 0xb0]      #    *dest |=| NULL;
MEMORY OFFSET:     -0xb0     -176  >>-168

0x71c6:	mov qword ptr [rax], 0               
0x71cd:	mov eax, 0xffffffff                  #    return |-|1;
0x71d2:	mov rdx, qword ptr [rbp - 0x18]      #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x71d6:	sub rdx, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0x71df:	je 0x71e6                            
0x71e1:	call 0x4980                          #|}|
0x71e6:	mov rbx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0x71ea:	leave                                
0x71eb:	ret                                  
0x71ec:	endbr64                              #|{|
0x71f0:	push rbp                             
0x71f1:	mov rbp, rsp                         
0x71f4:	sub rsp, 0x30                        
0x71f8:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0x71fc:	mov qword ptr [rbp - 0x20], rsi      
MEMORY OFFSET:     -0x20     -32  >>-24

0x7200:	mov qword ptr [rbp - 0x28], rdx      
MEMORY OFFSET:     -0x28     -40  >>-32

0x7204:	mov rax, qword ptr [rbp - 0x18]      #    if (|g|etenv(variable) == NULL)
MEMORY OFFSET:     -0x18     -24  >>-16

0x7208:	mov rdi, rax                         
0x720b:	call 0x47a0                          
0x7210:	test rax, rax                        #    if |(|getenv(variable) == NULL)
0x7213:	jne 0x725b                           
0x7215:	cmp qword ptr [rbp - 0x20], 0        #	if |(|alternate_variable && (alternate_value=getenv(alternate_variable)))
MEMORY OFFSET:     -0x20     -32  >>-24

0x721a:	je 0x7248                            
0x721c:	mov rax, qword ptr [rbp - 0x20]      #	if (alternate_variable && (alternate_value=|g|etenv(alternate_variable)))
MEMORY OFFSET:     -0x20     -32  >>-24

0x7220:	mov rdi, rax                         
0x7223:	call 0x47a0                          
0x7228:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x722c:	cmp qword ptr [rbp - 8], 0           #	if (alternate_variable |&|& (alternate_value=getenv(alternate_variable)))
MEMORY OFFSET:     -0x8     -8  >>0

0x7231:	je 0x7248                            
0x7233:	mov rdx, qword ptr [rbp - 8]         #	    |x|setenv(variable, alternate_value);
MEMORY OFFSET:     -0x8     -8  >>0

0x7237:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0x723b:	mov rsi, rdx                         
0x723e:	mov rdi, rax                         
0x7241:	call 0x1e50a                         
0x7246:	jmp 0x725b                           #|}|
0x7248:	mov rdx, qword ptr [rbp - 0x28]      #	    |x|setenv(variable, value);
MEMORY OFFSET:     -0x28     -40  >>-32

0x724c:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0x7250:	mov rsi, rdx                         
0x7253:	mov rdi, rax                         
0x7256:	call 0x1e50a                         
0x725b:	nop                                  #|}|
0x725c:	leave                                
0x725d:	ret                                  
0x725e:	endbr64                              #|{|
0x7262:	push rbp                             
0x7263:	mov rbp, rsp                         
0x7266:	sub rsp, 0xc0                        
0x726d:	mov dword ptr [rbp - 0xb4], edi      
MEMORY OFFSET:     -0xb4     -180  >>-172

0x7273:	mov qword ptr [rbp - 0xc0], rsi      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x727a:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0x7283:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0x7287:	xor eax, eax                         
0x7289:	mov rax, qword ptr [rbp - 0xc0]      #    *errors |=| 0;
MEMORY OFFSET:     -0xc0     -192  >>-184

0x7290:	mov dword ptr [rax], 0               
0x7296:	mov eax, dword ptr [rbp - 0xb4]      #    for (i |=| keys; i < MAX_KEYS; i++)
MEMORY OFFSET:     -0xb4     -180  >>-172

0x729c:	mov dword ptr [rbp - 0xac], eax      
MEMORY OFFSET:     -0xac     -172  >>-164

0x72a2:	jmp 0x763e                           #    |f|or (i = keys; i < MAX_KEYS; i++)
0x72a7:	lea rsi, [rbp - 0x90]                #	|c|onfiguration_getvarinfo(key_seq, contents,
MEMORY OFFSET:     -0x90     -144  >>-136

0x72ae:	lea rax, [rbp - 0x60]                
MEMORY OFFSET:     -0x60     -96  >>-88

0x72b2:	mov ecx, 0                           
0x72b7:	mov edx, 6                           
0x72bc:	mov rdi, rax                         
0x72bf:	call 0x1cf27                         
0x72c4:	movzx eax, byte ptr [rbp - 0x60]     #	if (|*|key_seq == '\0')
MEMORY OFFSET:     -0x60     -96  >>-88

0x72c8:	test al, al                          #	if |(|*key_seq == '\0')
0x72ca:	je 0x7650                            
0x72d0:	movzx eax, byte ptr [rbp - 0x60]     #	if (|*|key_seq != '^')
MEMORY OFFSET:     -0x60     -96  >>-88

0x72d4:	cmp al, 0x5e                         #	if |(|*key_seq != '^')
0x72d6:	je 0x7335                            
0x72d8:	lea rax, [rbp - 0x60]                #	    char *key_seq_ptr = |t|ty_get_symbol_key_seq(key_seq);
MEMORY OFFSET:     -0x60     -96  >>-88

0x72dc:	mov rdi, rax                         
0x72df:	call 0xcf5e                          
0x72e4:	mov qword ptr [rbp - 0xa0], rax      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x72eb:	cmp qword ptr [rbp - 0xa0], 0        #	    if |(|key_seq_ptr)
MEMORY OFFSET:     -0xa0     -160  >>-152

0x72f3:	je 0x7329                            
0x72f5:	mov rax, qword ptr [rbp - 0xa0]      #		if (|*|key_seq_ptr == '\0')
MEMORY OFFSET:     -0xa0     -160  >>-152

0x72fc:	movzx eax, byte ptr [rax]            
0x72ff:	test al, al                          #		if |(|*key_seq_ptr == '\0')
0x7301:	je 0x7636                            
0x7307:	mov rdx, qword ptr [rbp - 0xa0]      #		|s|trcpy(key_seq, key_seq_ptr);
MEMORY OFFSET:     -0xa0     -160  >>-152

0x730e:	lea rax, [rbp - 0x60]                
MEMORY OFFSET:     -0x60     -96  >>-88

0x7312:	mov rsi, rdx                         
0x7315:	mov rdi, rax                         
0x7318:	call 0x4870                          
0x731d:	mov dword ptr [rbp - 0xa4], 0        #		need_conversion |=| 0;
MEMORY OFFSET:     -0xa4     -164  >>-156

0x7327:	jmp 0x733f                           
0x7329:	mov dword ptr [rbp - 0xa4], 1        #		need_conversion |=| 1;
MEMORY OFFSET:     -0xa4     -164  >>-156

0x7333:	jmp 0x733f                           
0x7335:	mov dword ptr [rbp - 0xa4], 1        #	    need_conversion |=| 1;
MEMORY OFFSET:     -0xa4     -164  >>-156

0x733f:	mov esi, 0x30                        #	command = (command_t *)|x|calloc(1, sizeof(command_t));
0x7344:	mov edi, 1                           
0x7349:	call 0x24720                         
0x734e:	mov qword ptr [rbp - 0x98], rax      
MEMORY OFFSET:     -0x98     -152  >>-144

0x7355:	mov rax, qword ptr [rbp - 0x90]      #	if (contents|[|0])
MEMORY OFFSET:     -0x90     -144  >>-136

0x735c:	test rax, rax                        #	if |(|contents[0])
0x735f:	je 0x739a                            
0x7361:	mov rax, qword ptr [rbp - 0x90]      #	    command->name = xstrdup(contents|[|0]);
MEMORY OFFSET:     -0x90     -144  >>-136

0x7368:	mov rdi, rax                         #	    command->name = |x|strdup(contents[0]);
0x736b:	call 0x24780                         
0x7370:	mov rdx, qword ptr [rbp - 0x98]      #	    command->name |=| xstrdup(contents[0]);
MEMORY OFFSET:     -0x98     -152  >>-144

0x7377:	mov qword ptr [rdx], rax             
0x737a:	mov edi, 8                           #	command->history = |x|stack_init(sizeof(char *));
0x737f:	call 0x1f30c                         
0x7384:	mov rdx, qword ptr [rbp - 0x98]      #	command->history |=| xstack_init(sizeof(char *));
MEMORY OFFSET:     -0x98     -152  >>-144

0x738b:	mov qword ptr [rdx + 0x28], rax      
MEMORY OFFSET:     0x28     40  >>48

0x738f:	mov rax, qword ptr [rbp - 0x80]      #	if (contents|[|2])
MEMORY OFFSET:     -0x80     -128  >>-120

0x7393:	test rax, rax                        #	if |(|contents[2])
0x7396:	je 0x73c5                            
0x7398:	jmp 0x73ae                           
0x739a:	mov rax, qword ptr [rbp - 0x98]      #	    |x|free(command);
MEMORY OFFSET:     -0x98     -152  >>-144

0x73a1:	mov rdi, rax                         
0x73a4:	call 0x1eeae                         
0x73a9:	jmp 0x7637                           #	    |c|ontinue;
0x73ae:	mov rax, qword ptr [rbp - 0x80]      #	    command->new_dir = xstrdup(contents|[|2]);
MEMORY OFFSET:     -0x80     -128  >>-120

0x73b2:	mov rdi, rax                         #	    command->new_dir = |x|strdup(contents[2]);
0x73b5:	call 0x24780                         
0x73ba:	mov rdx, qword ptr [rbp - 0x98]      #	    command->new_dir |=| xstrdup(contents[2]);
MEMORY OFFSET:     -0x98     -152  >>-144

0x73c1:	mov qword ptr [rdx + 0x10], rax      
MEMORY OFFSET:     0x10     16  >>24

0x73c5:	mov rax, qword ptr [rbp - 0x88]      #	if (contents|[|1])
MEMORY OFFSET:     -0x88     -136  >>-128

0x73cc:	test rax, rax                        #	if |(|contents[1])
0x73cf:	je 0x7482                            
0x73d5:	mov rax, qword ptr [rbp - 0x88]      #	    command->body = xstrdup(contents|[|1]);
MEMORY OFFSET:     -0x88     -136  >>-128

0x73dc:	mov rdi, rax                         #	    command->body = |x|strdup(contents[1]);
0x73df:	call 0x24780                         
0x73e4:	mov rdx, qword ptr [rbp - 0x98]      #	    command->body |=| xstrdup(contents[1]);
MEMORY OFFSET:     -0x98     -152  >>-144

0x73eb:	mov qword ptr [rdx + 8], rax         
MEMORY OFFSET:     0x8     8  >>16

0x73ef:	mov rax, qword ptr [rbp - 0x78]      #	if (contents|[|3])
MEMORY OFFSET:     -0x78     -120  >>-112

0x73f3:	test rax, rax                        #	if |(|contents[3])
0x73f6:	je 0x741d                            
0x73f8:	mov rax, qword ptr [rbp - 0x78]      #	    command->save_screen = ((tolower((int)contents|[|3][0])=='y')?1:0);
MEMORY OFFSET:     -0x78     -120  >>-112

0x73fc:	movzx eax, byte ptr [rax]            #	    command->save_screen = ((tolower((int)contents[3]|[|0])=='y')?1:0);
0x73ff:	movsx eax, al                        #	    command->save_screen = ((|t|olower((int)contents[3][0])=='y')?1:0);
0x7402:	mov edi, eax                         
0x7404:	call 0x4be0                          
0x7409:	cmp eax, 0x79                        #	    command->save_screen = ((tolower((int)contents[3][0])=='y')?1|:|0);
0x740c:	sete al                              
0x740f:	mov edx, eax                         
0x7411:	mov rax, qword ptr [rbp - 0x98]      #	    command->save_screen |=| ((tolower((int)contents[3][0])=='y')?1:0);
MEMORY OFFSET:     -0x98     -152  >>-144

0x7418:	mov byte ptr [rax + 0x18], dl        
MEMORY OFFSET:     0x18     24  >>32

0x741b:	jmp 0x7428                           
0x741d:	mov rax, qword ptr [rbp - 0x98]      #	    command->save_screen |=| 1;
MEMORY OFFSET:     -0x98     -152  >>-144

0x7424:	mov byte ptr [rax + 0x18], 1         
MEMORY OFFSET:     0x18     24  >>32

0x7428:	mov rax, qword ptr [rbp - 0x70]      #	if (contents|[|4])
MEMORY OFFSET:     -0x70     -112  >>-104

0x742c:	test rax, rax                        #	if |(|contents[4])
0x742f:	je 0x7454                            
0x7431:	mov rax, qword ptr [rbp - 0x70]      #	    command->pause = ((tolower((int)contents|[|4][0])=='y')?1:0);
MEMORY OFFSET:     -0x70     -112  >>-104

0x7435:	movzx eax, byte ptr [rax]            #	    command->pause = ((tolower((int)contents[4]|[|0])=='y')?1:0);
0x7438:	movsx eax, al                        #	    command->pause = ((|t|olower((int)contents[4][0])=='y')?1:0);
0x743b:	mov edi, eax                         
0x743d:	call 0x4be0                          
0x7442:	cmp eax, 0x79                        #	    command->pause = ((tolower((int)contents[4][0])=='y')?1|:|0);
0x7445:	sete al                              
0x7448:	mov edx, eax                         
0x744a:	mov rax, qword ptr [rbp - 0x98]      #	    command->pause |=| ((tolower((int)contents[4][0])=='y')?1:0);
MEMORY OFFSET:     -0x98     -152  >>-144

0x7451:	mov byte ptr [rax + 0x19], dl        
MEMORY OFFSET:     0x19     25  >>33

0x7454:	mov rax, qword ptr [rbp - 0x68]      #	if (contents|[|5])
MEMORY OFFSET:     -0x68     -104  >>-96

0x7458:	test rax, rax                        #	if |(|contents[5])
0x745b:	je 0x7485                            
0x745d:	mov rax, qword ptr [rbp - 0x68]      #	    command->hide = ((tolower((int)contents|[|5][0])=='y')?1:0);
MEMORY OFFSET:     -0x68     -104  >>-96

0x7461:	movzx eax, byte ptr [rax]            #	    command->hide = ((tolower((int)contents[5]|[|0])=='y')?1:0);
0x7464:	movsx eax, al                        #	    command->hide = ((|t|olower((int)contents[5][0])=='y')?1:0);
0x7467:	mov edi, eax                         
0x7469:	call 0x4be0                          
0x746e:	cmp eax, 0x79                        #	    command->hide = ((tolower((int)contents[5][0])=='y')?1|:|0);
0x7471:	sete al                              
0x7474:	mov edx, eax                         
0x7476:	mov rax, qword ptr [rbp - 0x98]      #	    command->hide |=| ((tolower((int)contents[5][0])=='y')?1:0);
MEMORY OFFSET:     -0x98     -152  >>-144

0x747d:	mov byte ptr [rax + 0x1a], dl        
MEMORY OFFSET:     0x1a     26  >>34

0x7480:	jmp 0x7486                           
0x7482:	nop                                  #	    |g|oto insert;
0x7483:	jmp 0x7486                           
0x7485:	nop                                  #      |i|nsert:
0x7486:	call 0x4ec0                          #	if (|i|slower((int)command->name[0]))
0x748b:	mov rdx, qword ptr [rax]             
0x748e:	mov rax, qword ptr [rbp - 0x98]      
MEMORY OFFSET:     -0x98     -152  >>-144

0x7495:	mov rax, qword ptr [rax]             
0x7498:	movzx eax, byte ptr [rax]            
0x749b:	movsx rax, al                        
0x749f:	add rax, rax                         
0x74a2:	add rax, rdx                         
0x74a5:	movzx eax, word ptr [rax]            
0x74a8:	movzx eax, ax                        
0x74ab:	and eax, 0x200                       
0x74b0:	test eax, eax                        #	if |(|islower((int)command->name[0]))
0x74b2:	je 0x7565                            
0x74b8:	mov dword ptr [rbp - 0xa8], 0        #	    for (j |=| 0; j < BUILTIN_OPERATIONS; j++)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x74c2:	jmp 0x7558                           #	    |f|or (j = 0; j < BUILTIN_OPERATIONS; j++)
0x74c7:	mov eax, dword ptr [rbp - 0xa8]      #		if (strcmp(command->name, builtin|[|j]) == 0)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x74cd:	movsxd rdx, eax                      
0x74d0:	mov rax, rdx                         
0x74d3:	shl rax, 3                           
0x74d7:	add rax, rdx                         
0x74da:	shl rax, 2                           
0x74de:	sub rax, rdx                         
0x74e1:	lea rdx, [rip + 0x27bb8]             
MEMORY OFFSET:     0x27bb8     162744  >>162752

0x74e8:	add rdx, rax                         
0x74eb:	mov rax, qword ptr [rbp - 0x98]      #		if (strcmp(command|-|>name, builtin[j]) == 0)
MEMORY OFFSET:     -0x98     -152  >>-144

0x74f2:	mov rax, qword ptr [rax]             
0x74f5:	mov rsi, rdx                         #		if (|s|trcmp(command->name, builtin[j]) == 0)
0x74f8:	mov rdi, rax                         
0x74fb:	call 0x4af0                          
0x7500:	test eax, eax                        #		if |(|strcmp(command->name, builtin[j]) == 0)
0x7502:	jne 0x7551                           
0x7504:	mov rax, qword ptr [rbp - 0x98]      #		    xfree(command|-|>name);
MEMORY OFFSET:     -0x98     -152  >>-144

0x750b:	mov rax, qword ptr [rax]             
0x750e:	mov rdi, rax                         #		    |x|free(command->name);
0x7511:	call 0x1eeae                         
0x7516:	mov eax, dword ptr [rbp - 0xa8]      #		    command->name = |b|uiltin[j];
MEMORY OFFSET:     -0xa8     -168  >>-160

0x751c:	movsxd rdx, eax                      
0x751f:	mov rax, rdx                         
0x7522:	shl rax, 3                           
0x7526:	add rax, rdx                         
0x7529:	shl rax, 2                           
0x752d:	sub rax, rdx                         
0x7530:	lea rdx, [rip + 0x27b69]             
MEMORY OFFSET:     0x27b69     162665  >>162673

0x7537:	add rdx, rax                         
0x753a:	mov rax, qword ptr [rbp - 0x98]      #		    command->name |=| builtin[j];
MEMORY OFFSET:     -0x98     -152  >>-144

0x7541:	mov qword ptr [rax], rdx             
0x7544:	mov rax, qword ptr [rbp - 0x98]      #		    command->builtin |=| 1;
MEMORY OFFSET:     -0x98     -152  >>-144

0x754b:	mov byte ptr [rax + 0x1b], 1         
MEMORY OFFSET:     0x1b     27  >>35

0x754f:	jmp 0x7565                           #		    |b|reak;
0x7551:	add dword ptr [rbp - 0xa8], 1        #	    for (j = 0; j < BUILTIN_OPERATIONS; j|+|+)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x7558:	cmp dword ptr [rbp - 0xa8], 0x56     #	    for (j = 0; j |<| BUILTIN_OPERATIONS; j++)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x755f:	jle 0x74c7                           
0x7565:	lea rax, [rbp - 0x60]                #	command->sequence = |x|strdup(key_seq);
MEMORY OFFSET:     -0x60     -96  >>-88

0x7569:	mov rdi, rax                         
0x756c:	call 0x24780                         
0x7571:	mov rdx, qword ptr [rbp - 0x98]      #	command->sequence |=| xstrdup(key_seq);
MEMORY OFFSET:     -0x98     -152  >>-144

0x7578:	mov qword ptr [rdx + 0x20], rax      
MEMORY OFFSET:     0x20     32  >>40

0x757c:	mov rax, qword ptr [rbp - 0x98]      #	if (command|-|>builtin || command->body || command->new_dir)
MEMORY OFFSET:     -0x98     -152  >>-144

0x7583:	movzx eax, byte ptr [rax + 0x1b]     
MEMORY OFFSET:     0x1b     27  >>35

0x7587:	test al, al                          #	if |(|command->builtin || command->body || command->new_dir)
0x7589:	jne 0x75af                           
0x758b:	mov rax, qword ptr [rbp - 0x98]      #	if (command->builtin || command|-|>body || command->new_dir)
MEMORY OFFSET:     -0x98     -152  >>-144

0x7592:	mov rax, qword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0x7596:	test rax, rax                        #	if (command->builtin |||| command->body || command->new_dir)
0x7599:	jne 0x75af                           
0x759b:	mov rax, qword ptr [rbp - 0x98]      #	if (command->builtin || command->body || command|-|>new_dir)
MEMORY OFFSET:     -0x98     -152  >>-144

0x75a2:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x75a6:	test rax, rax                        #	if (command->builtin || command->body |||| command->new_dir)
0x75a9:	je 0x7637                            
0x75af:	cmp dword ptr [rbp - 0xa4], 0        #	    if |(|need_conversion)
MEMORY OFFSET:     -0xa4     -164  >>-156

0x75b6:	je 0x761e                            
0x75b8:	lea rax, [rbp - 0x60]                #		if (|t|ty_key_human2machine((unsigned char *)key_seq))
MEMORY OFFSET:     -0x60     -96  >>-88

0x75bc:	mov rdi, rax                         
0x75bf:	call 0xb1b7                          
0x75c4:	test rax, rax                        #		if |(|tty_key_human2machine((unsigned char *)key_seq))
0x75c7:	je 0x75e1                            
0x75c9:	mov rdx, qword ptr [rbp - 0x98]      #		    |t|ty_key_list_insert((unsigned char *)key_seq,
MEMORY OFFSET:     -0x98     -152  >>-144

0x75d0:	lea rax, [rbp - 0x60]                
MEMORY OFFSET:     -0x60     -96  >>-88

0x75d4:	mov rsi, rdx                         
0x75d7:	mov rdi, rax                         
0x75da:	call 0xc285                          
0x75df:	jmp 0x7637                           
0x75e1:	mov rdx, qword ptr [rip + 0x292f0]   #		    |f|printf(stderr, "%s: warning: invalid key sequence '%s'\n",
MEMORY OFFSET:     0x292f0     168688  >>168696

0x75e8:	mov rax, qword ptr [rip + 0x292d1]   
MEMORY OFFSET:     0x292d1     168657  >>168665

0x75ef:	lea rcx, [rbp - 0x60]                
MEMORY OFFSET:     -0x60     -96  >>-88

0x75f3:	lea rsi, [rip + 0x1fbbe]             
MEMORY OFFSET:     0x1fbbe     129982  >>129990

0x75fa:	mov rdi, rax                         
0x75fd:	mov eax, 0                           
0x7602:	call 0x4b40                          
0x7607:	mov rax, qword ptr [rbp - 0xc0]      #		    (|*|errors)++;
MEMORY OFFSET:     -0xc0     -192  >>-184

0x760e:	mov eax, dword ptr [rax]             
0x7610:	lea edx, [rax + 1]                   #		    (*errors)|+|+;
MEMORY OFFSET:     0x1     1  >>9

0x7613:	mov rax, qword ptr [rbp - 0xc0]      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x761a:	mov dword ptr [rax], edx             
0x761c:	jmp 0x7637                           
0x761e:	mov rdx, qword ptr [rbp - 0x98]      #		|t|ty_key_list_insert((unsigned char *)key_seq, (void *)command);
MEMORY OFFSET:     -0x98     -152  >>-144

0x7625:	lea rax, [rbp - 0x60]                
MEMORY OFFSET:     -0x60     -96  >>-88

0x7629:	mov rsi, rdx                         
0x762c:	mov rdi, rax                         
0x762f:	call 0xc285                          
0x7634:	jmp 0x7637                           
0x7636:	nop                                  #		    |c|ontinue;
0x7637:	add dword ptr [rbp - 0xac], 1        #    for (i = keys; i < MAX_KEYS; i|+|+)
MEMORY OFFSET:     -0xac     -172  >>-164

0x763e:	cmp dword ptr [rbp - 0xac], 0x7ff    #    for (i = keys; i |<| MAX_KEYS; i++)
MEMORY OFFSET:     -0xac     -172  >>-164

0x7648:	jle 0x72a7                           
0x764e:	jmp 0x7651                           
0x7650:	nop                                  #	    |b|reak;
0x7651:	mov eax, dword ptr [rbp - 0xac]      #    return |i|;
MEMORY OFFSET:     -0xac     -172  >>-164

0x7657:	mov rdx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x765b:	sub rdx, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0x7664:	je 0x766b                            
0x7666:	call 0x4980                          
0x766b:	leave                                
0x766c:	ret                                  
0x766d:	endbr64                              #|{|
0x7671:	push rbp                             
0x7672:	mov rbp, rsp                         
0x7675:	mov edi, 0                           #    |t|ty_set_mode(TTY_CANONIC);
0x767a:	call 0xadac                          
0x767f:	mov eax, 0                           #    |t|ty_defaults();
0x7684:	call 0xc083                          
0x7689:	mov rax, qword ptr [rip + 0x29268]   #    |t|ty_put_screen(screen);
MEMORY OFFSET:     0x29268     168552  >>168560

0x7690:	mov rdi, rax                         
0x7693:	call 0xce57                          
0x7698:	nop                                  #|}|
0x7699:	pop rbp                              
0x769a:	ret                                  
0x769b:	endbr64                              #|{|
0x769f:	push rbp                             
0x76a0:	mov rbp, rsp                         
0x76a3:	push rbx                             
0x76a4:	sub rsp, 0x48                        
0x76a8:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0x76b1:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0x76b5:	xor eax, eax                         
0x76b7:	lea rax, [rip + 0x279bd]             #					      MAX_STATIC_SIZE-|s|trlen(PS1)+1),
MEMORY OFFSET:     0x279bd     162237  >>162245

0x76be:	mov rdi, rax                         
0x76c1:	call 0x4960                          
0x76c6:	mov edx, eax                         #					      MAX_STATIC_SIZE-strlen(PS1)|+|1),
0x76c8:	mov eax, 0x33                        
0x76cd:	sub eax, edx                         
0x76cf:	mov ebx, eax                         #    |i|l_set_static_text(strcat(truncate_string(panel_get_path(src_panel), temp,
0x76d1:	mov rax, qword ptr [rip + 0x29238]   
MEMORY OFFSET:     0x29238     168504  >>168512

0x76d8:	mov rdi, rax                         
0x76db:	call 0x1504f                         
0x76e0:	mov rcx, rax                         
0x76e3:	lea rax, [rbp - 0x50]                
MEMORY OFFSET:     -0x50     -80  >>-72

0x76e7:	mov edx, ebx                         
0x76e9:	mov rsi, rax                         
0x76ec:	mov rdi, rcx                         
0x76ef:	call 0x1e3f1                         
0x76f4:	mov rdx, rax                         
0x76f7:	lea rax, [rip + 0x2797d]             
MEMORY OFFSET:     0x2797d     162173  >>162181

0x76fe:	mov rsi, rax                         
0x7701:	mov rdi, rdx                         
0x7704:	call 0x4db0                          
0x7709:	mov rdi, rax                         
0x770c:	call 0xf285                          
0x7711:	nop                                  #|}|
0x7712:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0x7716:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0x771f:	je 0x7726                            
0x7721:	call 0x4980                          
0x7726:	mov rbx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0x772a:	leave                                
0x772b:	ret                                  
0x772c:	endbr64                              #|{|
0x7730:	push rbp                             
0x7731:	mov rbp, rsp                         
0x7734:	mov rdx, qword ptr [rip + 0x291d5]   #    |p|anel_action(dst_panel, act_REGET, src_panel, (void *)-1, 1);
MEMORY OFFSET:     0x291d5     168405  >>168413

0x773b:	mov rax, qword ptr [rip + 0x291d6]   
MEMORY OFFSET:     0x291d6     168406  >>168414

0x7742:	mov r8d, 1                           
0x7748:	mov rcx, -1                          
0x774f:	mov esi, 0x22                        
0x7754:	mov rdi, rax                         
0x7757:	call 0x1a89a                         
0x775c:	mov rdx, qword ptr [rip + 0x291b5]   #    |p|anel_action(src_panel, act_REGET, dst_panel, (void *)-1, 1);
MEMORY OFFSET:     0x291b5     168373  >>168381

0x7763:	mov rax, qword ptr [rip + 0x291a6]   
MEMORY OFFSET:     0x291a6     168358  >>168366

0x776a:	mov r8d, 1                           
0x7770:	mov rcx, -1                          
0x7777:	mov esi, 0x22                        
0x777c:	mov rdi, rax                         
0x777f:	call 0x1a89a                         
0x7784:	nop                                  #|}|
0x7785:	pop rbp                              
0x7786:	ret                                  
0x7787:	endbr64                              #|{|
0x778b:	push rbp                             
0x778c:	mov rbp, rsp                         
0x778f:	mov rax, qword ptr [rip + 0x29142]   #    |p|rintf("usage: %s [-hvcblp] [path1] [path2]\n", g_program);
MEMORY OFFSET:     0x29142     168258  >>168266

0x7796:	mov rsi, rax                         
0x7799:	lea rax, [rip + 0x1fa40]             
MEMORY OFFSET:     0x1fa40     129600  >>129608

0x77a0:	mov rdi, rax                         
0x77a3:	mov eax, 0                           
0x77a8:	call 0x49c0                          
0x77ad:	lea rax, [rip + 0x1fa54]             #    |p|rintf(" -h         print this help message\n");
MEMORY OFFSET:     0x1fa54     129620  >>129628

0x77b4:	mov rdi, rax                         
0x77b7:	call 0x48a0                          
0x77bc:	lea rax, [rip + 0x1fa6d]             #    |p|rintf(" -v         print the version number\n");
MEMORY OFFSET:     0x1fa6d     129645  >>129653

0x77c3:	mov rdi, rax                         
0x77c6:	call 0x48a0                          
0x77cb:	lea rax, [rip + 0x1fa83]             #    |p|rintf(" -c         use ANSI colors\n");
MEMORY OFFSET:     0x1fa83     129667  >>129675

0x77d2:	mov rdi, rax                         
0x77d5:	call 0x48a0                          
0x77da:	lea rax, [rip + 0x1fa97]             #    |p|rintf(" -b         don't use ANSI colors\n");
MEMORY OFFSET:     0x1fa97     129687  >>129695

0x77e1:	mov rdi, rax                         
0x77e4:	call 0x48a0                          
0x77e9:	lea rax, [rip + 0x1fab0]             #    |p|rintf(" -l         don't use the last screen character\n");
MEMORY OFFSET:     0x1fab0     129712  >>129720

0x77f0:	mov rdi, rax                         
0x77f3:	call 0x48a0                          
0x77f8:	lea rax, [rip + 0x1fad1]             #    |p|rintf(" -p         output final path at exit\n");
MEMORY OFFSET:     0x1fad1     129745  >>129753

0x77ff:	mov rdi, rax                         
0x7802:	call 0x48a0                          
0x7807:	nop                                  #|}|
0x7808:	pop rbp                              
0x7809:	ret                                  
0x780a:	endbr64                              #|{|
0x780e:	push rbp                             
0x780f:	mov rbp, rsp                         
0x7812:	push rbx                             
0x7813:	sub rsp, 0x168                       
0x781a:	mov dword ptr [rbp - 0x164], edi     
MEMORY OFFSET:     -0x164     -356  >>-348

0x7820:	mov qword ptr [rbp - 0x170], rsi     
MEMORY OFFSET:     -0x170     -368  >>-360

0x7827:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0x7830:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0x7834:	xor eax, eax                         
0x7836:	mov qword ptr [rbp - 0xd0], 0        #    size_t |l|en = 0, ptrlen;
MEMORY OFFSET:     -0xd0     -208  >>-200

0x7841:	mov dword ptr [rbp - 0x140], 0       #    int |o|utput_final_path = OFF;
MEMORY OFFSET:     -0x140     -320  >>-312

0x784b:	mov qword ptr [rbp - 0xc0], 0        #    input_line_t *|s|aved_il = NULL;
MEMORY OFFSET:     -0xc0     -192  >>-184

0x7856:	mov dword ptr [rbp - 0x134], 0xffffffff#    int c, |a|nsi_colors = -1, use_last_screen_character = ON;
MEMORY OFFSET:     -0x134     -308  >>-300

0x7860:	mov dword ptr [rbp - 0x130], 1       #    int c, ansi_colors = -1, |u|se_last_screen_character = ON;
MEMORY OFFSET:     -0x130     -304  >>-296

0x786a:	mov dword ptr [rbp - 0x128], 0       #    int entry, key, |a|pp_end = 0, first_time = 1, errors = 0;
MEMORY OFFSET:     -0x128     -296  >>-288

0x7874:	mov dword ptr [rbp - 0x124], 1       #    int entry, key, app_end = 0, |f|irst_time = 1, errors = 0;
MEMORY OFFSET:     -0x124     -292  >>-284

0x787e:	mov dword ptr [rbp - 0x14c], 0       #    int entry, key, app_end = 0, first_time = 1, |e|rrors = 0;
MEMORY OFFSET:     -0x14c     -332  >>-324

0x7888:	mov qword ptr [rbp - 0xe0], 0        #    char *|c|mdln = NULL, *input = NULL, *ptr, *srcptr, *search_string = NULL;
MEMORY OFFSET:     -0xe0     -224  >>-216

0x7893:	mov qword ptr [rbp - 0xd8], 0        #    char *cmdln = NULL, *|i|nput = NULL, *ptr, *srcptr, *search_string = NULL;
MEMORY OFFSET:     -0xd8     -216  >>-208

0x789e:	mov qword ptr [rbp - 0x90], 0        #    char *cmdln = NULL, *input = NULL, *ptr, *srcptr, *|s|earch_string = NULL;
MEMORY OFFSET:     -0x90     -144  >>-136

0x78a9:	mov eax, 0                           #    |s|ignals_init();
0x78ae:	call 0x1edeb                         
0x78b3:	lea rax, [rip + 0x1f8a9]             #    |s|etlocale(LC_ALL,"");
MEMORY OFFSET:     0x1f8a9     129193  >>129201

0x78ba:	mov rsi, rax                         
0x78bd:	mov edi, 6                           
0x78c2:	call 0x4cc0                          
0x78c7:	mov rax, qword ptr [rbp - 0x170]     #    g_program = argv|[|0];
MEMORY OFFSET:     -0x170     -368  >>-360

0x78ce:	mov rax, qword ptr [rax]             
0x78d1:	mov qword ptr [rip + 0x29000], rax   #    g_program |=| argv[0];
MEMORY OFFSET:     0x29000     167936  >>167944

0x78d8:	lea rax, [rip + 0x1fa17]             #    g_home = |g|etenv("HOME");
MEMORY OFFSET:     0x1fa17     129559  >>129567

0x78df:	mov rdi, rax                         
0x78e2:	call 0x47a0                          
0x78e7:	mov qword ptr [rip + 0x28fe2], rax   #    g_home |=| getenv("HOME");
MEMORY OFFSET:     0x28fe2     167906  >>167914

0x78ee:	mov rax, qword ptr [rip + 0x28fdb]   #    if (g_home |=|= NULL)
MEMORY OFFSET:     0x28fdb     167899  >>167907

0x78f5:	test rax, rax                        #    if |(|g_home == NULL)
0x78f8:	jne 0x7908                           
0x78fa:	lea rax, [rip + 0x1f9fa]             #	g_home |=| ".";
MEMORY OFFSET:     0x1f9fa     129530  >>129538

0x7901:	mov qword ptr [rip + 0x28fc8], rax   
MEMORY OFFSET:     0x28fc8     167880  >>167888

0x7908:	mov eax, 0                           #    |c|ompute_directories();
0x790d:	call 0x1d3ac                         
0x7912:	mov eax, 0                           #    |u|pdate_path();
0x7917:	call 0x1d461                         
0x791c:	mov eax, 0                           #    |g|et_login_name();
0x7921:	call 0x1e219                         
0x7926:	mov edi, 0x25                        #    exit_msg = |x|malloc(strlen(PRODUCT) + 16);
0x792b:	call 0x24650                         
0x7930:	mov qword ptr [rip + 0x28fb9], rax   #    exit_msg |=| xmalloc(strlen(PRODUCT) + 16);
MEMORY OFFSET:     0x28fb9     167865  >>167873

0x7937:	mov rax, qword ptr [rip + 0x28fb2]   #    |s|printf(exit_msg, "Exit %s? ", PRODUCT);
MEMORY OFFSET:     0x28fb2     167858  >>167866

0x793e:	lea rdx, [rip + 0x1f9b8]             
MEMORY OFFSET:     0x1f9b8     129464  >>129472

0x7945:	lea rcx, [rip + 0x1f9c7]             
MEMORY OFFSET:     0x1f9c7     129479  >>129487

0x794c:	mov rsi, rcx                         
0x794f:	mov rdi, rax                         
0x7952:	mov eax, 0                           
0x7957:	call 0x4dd0                          
0x795c:	lea rax, [rip + 0x1f9ba]             #    if (|g|etenv("COLORTERM") != NULL)
MEMORY OFFSET:     0x1f9ba     129466  >>129474

0x7963:	mov rdi, rax                         
0x7966:	call 0x47a0                          
0x796b:	test rax, rax                        #    if |(|getenv("COLORTERM") != NULL)
0x796e:	je 0x7a67                            
0x7974:	mov dword ptr [rbp - 0x134], 1       #	ansi_colors |=| ON;
MEMORY OFFSET:     -0x134     -308  >>-300

0x797e:	jmp 0x7a67                           #    while |(|(c = getopt(argc, argv, "hvcblp")) != -1)
0x7983:	mov eax, dword ptr [rbp - 0x118]     #	|s|witch (c)
MEMORY OFFSET:     -0x118     -280  >>-272

0x7989:	sub eax, 0x3f                        
0x798c:	cmp eax, 0x37                        
0x798f:	ja 0x7a38                            
0x7995:	mov eax, eax                         
0x7997:	lea rdx, [rax*4]                     
0x799f:	lea rax, [rip + 0x1ff52]             
MEMORY OFFSET:     0x1ff52     130898  >>130906

0x79a6:	mov eax, dword ptr [rdx + rax]       
0x79a9:	cdqe                                 
0x79ab:	lea rdx, [rip + 0x1ff46]             
MEMORY OFFSET:     0x1ff46     130886  >>130894

0x79b2:	add rax, rdx                         
0x79b5:	jmp rax                              
0x79b8:	mov eax, 0                           #		|u|sage();
0x79bd:	call 0x7787                          
0x79c2:	mov eax, 0                           #		return |0|;
0x79c7:	jmp 0xad7b                           
0x79cc:	lea rax, [rip + 0x1f78a]             #		|p|rintf("%s %s\n", PRODUCT, VERSION);
MEMORY OFFSET:     0x1f78a     128906  >>128914

0x79d3:	mov rdx, rax                         
0x79d6:	lea rax, [rip + 0x1f920]             
MEMORY OFFSET:     0x1f920     129312  >>129320

0x79dd:	mov rsi, rax                         
0x79e0:	lea rax, [rip + 0x1f940]             
MEMORY OFFSET:     0x1f940     129344  >>129352

0x79e7:	mov rdi, rax                         
0x79ea:	mov eax, 0                           
0x79ef:	call 0x49c0                          
0x79f4:	mov eax, 0                           #		return |0|;
0x79f9:	jmp 0xad7b                           
0x79fe:	mov dword ptr [rbp - 0x134], 1       #		ansi_colors |=| ON;
MEMORY OFFSET:     -0x134     -308  >>-300

0x7a08:	jmp 0x7a67                           #		|b|reak;
0x7a0a:	mov dword ptr [rbp - 0x134], 0       #		ansi_colors |=| OFF;
MEMORY OFFSET:     -0x134     -308  >>-300

0x7a14:	jmp 0x7a67                           #		|b|reak;
0x7a16:	mov dword ptr [rbp - 0x130], 0       #		use_last_screen_character |=| OFF;
MEMORY OFFSET:     -0x130     -304  >>-296

0x7a20:	jmp 0x7a67                           #		|b|reak;
0x7a22:	mov dword ptr [rbp - 0x140], 1       #		output_final_path |=| ON;
MEMORY OFFSET:     -0x140     -320  >>-312

0x7a2c:	jmp 0x7a67                           #		|b|reak;
0x7a2e:	mov eax, 1                           #		return |1|;
0x7a33:	jmp 0xad7b                           
0x7a38:	mov rdx, qword ptr [rip + 0x28e99]   #		|f|printf(stderr, "%s: unknown error\n", g_program);
MEMORY OFFSET:     0x28e99     167577  >>167585

0x7a3f:	mov rax, qword ptr [rip + 0x28e7a]   
MEMORY OFFSET:     0x28e7a     167546  >>167554

0x7a46:	lea rcx, [rip + 0x1f8e1]             
MEMORY OFFSET:     0x1f8e1     129249  >>129257

0x7a4d:	mov rsi, rcx                         
0x7a50:	mov rdi, rax                         
0x7a53:	mov eax, 0                           
0x7a58:	call 0x4b40                          
0x7a5d:	mov eax, 1                           #		return |1|;
0x7a62:	jmp 0xad7b                           
0x7a67:	mov rcx, qword ptr [rbp - 0x170]     #    while ((c = |g|etopt(argc, argv, "hvcblp")) != -1)
MEMORY OFFSET:     -0x170     -368  >>-360

0x7a6e:	mov eax, dword ptr [rbp - 0x164]     
MEMORY OFFSET:     -0x164     -356  >>-348

0x7a74:	lea rdx, [rip + 0x1f8c6]             
MEMORY OFFSET:     0x1f8c6     129222  >>129230

0x7a7b:	mov rsi, rcx                         
0x7a7e:	mov edi, eax                         
0x7a80:	call 0x4d90                          
0x7a85:	mov dword ptr [rbp - 0x118], eax     
MEMORY OFFSET:     -0x118     -280  >>-272

0x7a8b:	cmp dword ptr [rbp - 0x118], -1      #    while ((c = getopt(argc, argv, "hvcblp")) |!|= -1)
MEMORY OFFSET:     -0x118     -280  >>-272

0x7a92:	jne 0x7983                           
0x7a98:	lea rax, [rip + 0x1f85c]             #    left_panel_path = right_panel_path |=| ".";
MEMORY OFFSET:     0x1f85c     129116  >>129124

0x7a9f:	mov qword ptr [rbp - 0xa8], rax      
MEMORY OFFSET:     -0xa8     -168  >>-160

0x7aa6:	mov rax, qword ptr [rbp - 0xa8]      #    left_panel_path |=| right_panel_path = ".";
MEMORY OFFSET:     -0xa8     -168  >>-160

0x7aad:	mov qword ptr [rbp - 0xb0], rax      
MEMORY OFFSET:     -0xb0     -176  >>-168

0x7ab4:	mov eax, dword ptr [rip + 0x28dce]   #    if (optind |<| argc)
MEMORY OFFSET:     0x28dce     167374  >>167382

0x7aba:	cmp dword ptr [rbp - 0x164], eax     #    if |(|optind < argc)
MEMORY OFFSET:     -0x164     -356  >>-348

0x7ac0:	jle 0x7b4e                           
0x7ac6:	mov eax, dword ptr [rip + 0x28dbc]   #	left_panel_path = xstrdup(argv[optind|+|+]);
MEMORY OFFSET:     0x28dbc     167356  >>167364

0x7acc:	lea edx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x7acf:	mov dword ptr [rip + 0x28db3], edx   
MEMORY OFFSET:     0x28db3     167347  >>167355

0x7ad5:	cdqe                                 
0x7ad7:	lea rdx, [rax*8]                     #	left_panel_path = xstrdup(argv|[|optind++]);
0x7adf:	mov rax, qword ptr [rbp - 0x170]     
MEMORY OFFSET:     -0x170     -368  >>-360

0x7ae6:	add rax, rdx                         
0x7ae9:	mov rax, qword ptr [rax]             #	left_panel_path = |x|strdup(argv[optind++]);
0x7aec:	mov rdi, rax                         
0x7aef:	call 0x24780                         
0x7af4:	mov qword ptr [rbp - 0xb0], rax      
MEMORY OFFSET:     -0xb0     -176  >>-168

0x7afb:	mov eax, dword ptr [rip + 0x28d87]   #	if (optind |<| argc)
MEMORY OFFSET:     0x28d87     167303  >>167311

0x7b01:	cmp dword ptr [rbp - 0x164], eax     #	if |(|optind < argc)
MEMORY OFFSET:     -0x164     -356  >>-348

0x7b07:	jle 0x7b40                           
0x7b09:	mov eax, dword ptr [rip + 0x28d79]   #	    right_panel_path = xstrdup(argv[optind|+|+]);
MEMORY OFFSET:     0x28d79     167289  >>167297

0x7b0f:	lea edx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0x7b12:	mov dword ptr [rip + 0x28d70], edx   
MEMORY OFFSET:     0x28d70     167280  >>167288

0x7b18:	cdqe                                 
0x7b1a:	lea rdx, [rax*8]                     #	    right_panel_path = xstrdup(argv|[|optind++]);
0x7b22:	mov rax, qword ptr [rbp - 0x170]     
MEMORY OFFSET:     -0x170     -368  >>-360

0x7b29:	add rax, rdx                         
0x7b2c:	mov rax, qword ptr [rax]             #	    right_panel_path = |x|strdup(argv[optind++]);
0x7b2f:	mov rdi, rax                         
0x7b32:	call 0x24780                         
0x7b37:	mov qword ptr [rbp - 0xa8], rax      
MEMORY OFFSET:     -0xa8     -168  >>-160

0x7b3e:	jmp 0x7b4e                           
0x7b40:	mov rax, qword ptr [rbp - 0xb0]      #	    right_panel_path |=| left_panel_path;
MEMORY OFFSET:     -0xb0     -176  >>-168

0x7b47:	mov qword ptr [rbp - 0xa8], rax      
MEMORY OFFSET:     -0xa8     -168  >>-160

0x7b4e:	mov eax, dword ptr [rip + 0x28d34]   #    if (optind |<| argc)
MEMORY OFFSET:     0x28d34     167220  >>167228

0x7b54:	cmp dword ptr [rbp - 0x164], eax     #    if |(|optind < argc)
MEMORY OFFSET:     -0x164     -356  >>-348

0x7b5a:	jle 0x7b81                           
0x7b5c:	mov rdx, qword ptr [rip + 0x28d75]   #	|f|printf(stderr, "%s: warning: invalid extra options ignored\n",
MEMORY OFFSET:     0x28d75     167285  >>167293

0x7b63:	mov rax, qword ptr [rip + 0x28d56]   
MEMORY OFFSET:     0x28d56     167254  >>167262

0x7b6a:	lea rcx, [rip + 0x1f7d7]             
MEMORY OFFSET:     0x1f7d7     128983  >>128991

0x7b71:	mov rsi, rcx                         
0x7b74:	mov rdi, rax                         
0x7b77:	mov eax, 0                           
0x7b7c:	call 0x4b40                          
0x7b81:	mov edi, 0xa                         #    |p|rintf("\n");
0x7b86:	call 0x47d0                          
0x7b8b:	lea r9, [rip + 0x1f7e2]              #    |p|rintf("%s %s (%s), %s %s\n",
MEMORY OFFSET:     0x1f7e2     128994  >>129002

0x7b92:	lea r8, [rip + 0x1f7e7]              
MEMORY OFFSET:     0x1f7e7     128999  >>129007

0x7b99:	lea rax, [rip + 0x1f7e9]             
MEMORY OFFSET:     0x1f7e9     129001  >>129009

0x7ba0:	mov rcx, rax                         
0x7ba3:	lea rax, [rip + 0x1f5b3]             
MEMORY OFFSET:     0x1f5b3     128435  >>128443

0x7baa:	mov rdx, rax                         
0x7bad:	lea rax, [rip + 0x1f749]             
MEMORY OFFSET:     0x1f749     128841  >>128849

0x7bb4:	mov rsi, rax                         
0x7bb7:	lea rax, [rip + 0x1f7e4]             
MEMORY OFFSET:     0x1f7e4     128996  >>129004

0x7bbe:	mov rdi, rax                         
0x7bc1:	mov eax, 0                           
0x7bc6:	call 0x49c0                          
0x7bcb:	mov rax, qword ptr [rip + 0x2743e]   #    |p|rintf(copyright);
MEMORY OFFSET:     0x2743e     160830  >>160838

0x7bd2:	mov rdi, rax                         
0x7bd5:	mov eax, 0                           
0x7bda:	call 0x49c0                          
0x7bdf:	lea rax, [rip + 0x1f7cf]             #    |a|dd_to_environment("GIT_EDITOR",  "EDITOR",     "vi");
MEMORY OFFSET:     0x1f7cf     128975  >>128983

0x7be6:	mov rdx, rax                         
0x7be9:	lea rax, [rip + 0x1f7c8]             
MEMORY OFFSET:     0x1f7c8     128968  >>128976

0x7bf0:	mov rsi, rax                         
0x7bf3:	lea rax, [rip + 0x1f7c5]             
MEMORY OFFSET:     0x1f7c5     128965  >>128973

0x7bfa:	mov rdi, rax                         
0x7bfd:	mov eax, 0                           
0x7c02:	call 0x71ec                          
0x7c07:	lea rax, [rip + 0x1f7bc]             #    |a|dd_to_environment("GIT_PAGER",   "PAGER",      "more");
MEMORY OFFSET:     0x1f7bc     128956  >>128964

0x7c0e:	mov rdx, rax                         
0x7c11:	lea rax, [rip + 0x1f7b7]             
MEMORY OFFSET:     0x1f7b7     128951  >>128959

0x7c18:	mov rsi, rax                         
0x7c1b:	lea rax, [rip + 0x1f7b3]             
MEMORY OFFSET:     0x1f7b3     128947  >>128955

0x7c22:	mov rdi, rax                         
0x7c25:	mov eax, 0                           
0x7c2a:	call 0x71ec                          
0x7c2f:	lea rax, [rip + 0x1f7a9]             #    |a|dd_to_environment("GIT_BROWSER", (char *)NULL, "lynx");
MEMORY OFFSET:     0x1f7a9     128937  >>128945

0x7c36:	mov rdx, rax                         
0x7c39:	mov esi, 0                           
0x7c3e:	lea rax, [rip + 0x1f79f]             
MEMORY OFFSET:     0x1f79f     128927  >>128935

0x7c45:	mov rdi, rax                         
0x7c48:	mov eax, 0                           
0x7c4d:	call 0x71ec                          
0x7c52:	lea rax, [rip + 0x1f797]             #    |a|dd_to_environment("GIT_SHELL",   "SHELL",      "/bin/sh");
MEMORY OFFSET:     0x1f797     128919  >>128927

0x7c59:	mov rdx, rax                         
0x7c5c:	lea rax, [rip + 0x1f795]             
MEMORY OFFSET:     0x1f795     128917  >>128925

0x7c63:	mov rsi, rax                         
0x7c66:	lea rax, [rip + 0x1f791]             
MEMORY OFFSET:     0x1f791     128913  >>128921

0x7c6d:	mov rdi, rax                         
0x7c70:	mov eax, 0                           
0x7c75:	call 0x71ec                          
0x7c7a:	lea rax, [rip + 0x1f787]             #    |a|dd_to_environment("GIT_RMAIL",   (char *)NULL, "mail");
MEMORY OFFSET:     0x1f787     128903  >>128911

0x7c81:	mov rdx, rax                         
0x7c84:	mov esi, 0                           
0x7c89:	lea rax, [rip + 0x1f77d]             
MEMORY OFFSET:     0x1f77d     128893  >>128901

0x7c90:	mov rdi, rax                         
0x7c93:	mov eax, 0                           
0x7c98:	call 0x71ec                          
0x7c9d:	lea rax, [rip + 0x1f773]             #    |a|dd_to_environment("GIT_VMSTAT",  (char *)NULL, "free");
MEMORY OFFSET:     0x1f773     128883  >>128891

0x7ca4:	mov rdx, rax                         
0x7ca7:	mov esi, 0                           
0x7cac:	lea rax, [rip + 0x1f769]             
MEMORY OFFSET:     0x1f769     128873  >>128881

0x7cb3:	mov rdi, rax                         
0x7cb6:	mov eax, 0                           
0x7cbb:	call 0x71ec                          
0x7cc0:	mov edi, 0                           #    |t|ty_init(TTY_RESTRICTED_INPUT);
0x7cc5:	call 0xd75b                          
0x7cca:	mov eax, 0                           #    |c|ommon_configuration_init();
0x7ccf:	call 0x1d81d                         
0x7cd4:	lea rax, [rip + 0x1f74c]             #    |u|se_section("[GITFM-FTI]");
MEMORY OFFSET:     0x1f74c     128844  >>128852

0x7cdb:	mov rdi, rax                         
0x7cde:	call 0x1dbc4                         
0x7ce3:	mov eax, 0                           #    |g|et_file_type_info();
0x7ce8:	call 0x1e86b                         
0x7ced:	lea rax, [rip + 0x1f73f]             #    |u|se_section("[GITFM-Keys]");
MEMORY OFFSET:     0x1f73f     128831  >>128839

0x7cf4:	mov rdi, rax                         
0x7cf7:	call 0x1dbc4                         
0x7cfc:	lea rax, [rbp - 0x14c]               #    keys = |r|ead_keys(0, &errors);
MEMORY OFFSET:     -0x14c     -332  >>-324

0x7d03:	mov rsi, rax                         
0x7d06:	mov edi, 0                           
0x7d0b:	mov eax, 0                           
0x7d10:	call 0x725e                          
0x7d15:	mov dword ptr [rbp - 0x114], eax     
MEMORY OFFSET:     -0x114     -276  >>-268

0x7d1b:	mov edx, dword ptr [rip + 0x28bc7]   #    wait_msg |+|= errors;
MEMORY OFFSET:     0x28bc7     166855  >>166863

0x7d21:	mov eax, dword ptr [rbp - 0x14c]     
MEMORY OFFSET:     -0x14c     -332  >>-324

0x7d27:	add eax, edx                         
0x7d29:	mov dword ptr [rip + 0x28bb9], eax   
MEMORY OFFSET:     0x28bb9     166841  >>166849

0x7d2f:	mov eax, 0                           #    |c|onfiguration_end();
0x7d34:	call 0x1cd8b                         
0x7d39:	mov eax, 0                           #    wait_msg += (|s|pecific_configuration_init() == 0);
0x7d3e:	call 0x1d8e2                         
0x7d43:	test eax, eax                        #    wait_msg += (specific_configuration_init() |=|= 0);
0x7d45:	sete al                              
0x7d48:	movzx edx, al                        
0x7d4b:	mov eax, dword ptr [rip + 0x28b97]   #    wait_msg |+|= (specific_configuration_init() == 0);
MEMORY OFFSET:     0x28b97     166807  >>166815

0x7d51:	add eax, edx                         
0x7d53:	mov dword ptr [rip + 0x28b8f], eax   
MEMORY OFFSET:     0x28b8f     166799  >>166807

0x7d59:	lea rax, [rip + 0x1f6e0]             #    temporary_directory = |g|etenv("TMPDIR");
MEMORY OFFSET:     0x1f6e0     128736  >>128744

0x7d60:	mov rdi, rax                         
0x7d63:	call 0x47a0                          
0x7d68:	mov qword ptr [rbp - 0xc8], rax      
MEMORY OFFSET:     -0xc8     -200  >>-192

0x7d6f:	cmp qword ptr [rbp - 0xc8], 0        #    if |(|temporary_directory == NULL)
MEMORY OFFSET:     -0xc8     -200  >>-192

0x7d77:	jne 0x7d87                           
0x7d79:	lea rax, [rip + 0x1f6c7]             #	temporary_directory |=| "/tmp";
MEMORY OFFSET:     0x1f6c7     128711  >>128719

0x7d80:	mov qword ptr [rbp - 0xc8], rax      
MEMORY OFFSET:     -0xc8     -200  >>-192

0x7d87:	mov rax, qword ptr [rbp - 0xc8]      #    stdout_log_name = xmalloc(32 + |s|trlen(temporary_directory) + 1);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x7d8e:	mov rdi, rax                         
0x7d91:	call 0x4960                          
0x7d96:	add rax, 0x21                        #    stdout_log_name = |x|malloc(32 + strlen(temporary_directory) + 1);
0x7d9a:	mov rdi, rax                         
0x7d9d:	call 0x24650                         
0x7da2:	mov qword ptr [rip + 0x29d2f], rax   #    stdout_log_name |=| xmalloc(32 + strlen(temporary_directory) + 1);
MEMORY OFFSET:     0x29d2f     171311  >>171319

0x7da9:	mov rax, qword ptr [rbp - 0xc8]      #    stderr_log_name = xmalloc(32 + |s|trlen(temporary_directory) + 1);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x7db0:	mov rdi, rax                         
0x7db3:	call 0x4960                          
0x7db8:	add rax, 0x21                        #    stderr_log_name = |x|malloc(32 + strlen(temporary_directory) + 1);
0x7dbc:	mov rdi, rax                         
0x7dbf:	call 0x24650                         
0x7dc4:	mov qword ptr [rip + 0x29d15], rax   #    stderr_log_name |=| xmalloc(32 + strlen(temporary_directory) + 1);
MEMORY OFFSET:     0x29d15     171285  >>171293

0x7dcb:	mov edi, 0                           #    srand(|t|ime(NULL));
0x7dd0:	call 0x4ba0                          
0x7dd5:	mov edi, eax                         #    |s|rand(time(NULL));
0x7dd7:	call 0x4aa0                          
0x7ddc:	call 0x4eb0                          #    r1 = 1 + (int) (100000000.0 * |r|and() / (RAND_MAX + 1.0));
0x7de1:	pxor xmm1, xmm1                      #    r1 = 1 + (int) (100000000.0 |*| rand() / (RAND_MAX + 1.0));
0x7de5:	cvtsi2sd xmm1, eax                   
0x7de9:	movsd xmm0, qword ptr [rip + 0x1f8ff]
MEMORY OFFSET:     0x1f8ff     129279  >>129287

0x7df1:	mulsd xmm0, xmm1                     
0x7df5:	movsd xmm1, qword ptr [rip + 0x1f8fb]#    r1 = 1 + (int) (100000000.0 * rand() |/| (RAND_MAX + 1.0));
MEMORY OFFSET:     0x1f8fb     129275  >>129283

0x7dfd:	divsd xmm0, xmm1                     
0x7e01:	cvttsd2si eax, xmm0                  #    r1 = 1 + |(|int) (100000000.0 * rand() / (RAND_MAX + 1.0));
0x7e05:	add eax, 1                           #    r1 |=| 1 + (int) (100000000.0 * rand() / (RAND_MAX + 1.0));
0x7e08:	mov dword ptr [rbp - 0x110], eax     
MEMORY OFFSET:     -0x110     -272  >>-264

0x7e0e:	call 0x4eb0                          #    r2 = 1 + (int) (100000000.0 * |r|and() / (RAND_MAX + 1.0));
0x7e13:	pxor xmm1, xmm1                      #    r2 = 1 + (int) (100000000.0 |*| rand() / (RAND_MAX + 1.0));
0x7e17:	cvtsi2sd xmm1, eax                   
0x7e1b:	movsd xmm0, qword ptr [rip + 0x1f8cd]
MEMORY OFFSET:     0x1f8cd     129229  >>129237

0x7e23:	mulsd xmm0, xmm1                     
0x7e27:	movsd xmm1, qword ptr [rip + 0x1f8c9]#    r2 = 1 + (int) (100000000.0 * rand() |/| (RAND_MAX + 1.0));
MEMORY OFFSET:     0x1f8c9     129225  >>129233

0x7e2f:	divsd xmm0, xmm1                     
0x7e33:	cvttsd2si eax, xmm0                  #    r2 = 1 + |(|int) (100000000.0 * rand() / (RAND_MAX + 1.0));
0x7e37:	add eax, 1                           #    r2 |=| 1 + (int) (100000000.0 * rand() / (RAND_MAX + 1.0));
0x7e3a:	mov dword ptr [rbp - 0x10c], eax     
MEMORY OFFSET:     -0x10c     -268  >>-260

0x7e40:	call 0x48f0                          #	    temporary_directory, (int)|g|etpid(), r1);
0x7e45:	mov ecx, eax                         
0x7e47:	mov rax, qword ptr [rip + 0x29c8a]   #    |s|printf(stdout_log_name, "%s/git.1.%d.%d",
MEMORY OFFSET:     0x29c8a     171146  >>171154

0x7e4e:	mov esi, dword ptr [rbp - 0x110]     
MEMORY OFFSET:     -0x110     -272  >>-264

0x7e54:	mov rdx, qword ptr [rbp - 0xc8]      
MEMORY OFFSET:     -0xc8     -200  >>-192

0x7e5b:	mov r8d, esi                         
0x7e5e:	lea rsi, [rip + 0x1f5e7]             
MEMORY OFFSET:     0x1f5e7     128487  >>128495

0x7e65:	mov rdi, rax                         
0x7e68:	mov eax, 0                           
0x7e6d:	call 0x4dd0                          
0x7e72:	call 0x48f0                          #	    temporary_directory, (int)|g|etpid(), r2);
0x7e77:	mov ecx, eax                         
0x7e79:	mov rax, qword ptr [rip + 0x29c60]   #    |s|printf(stderr_log_name, "%s/git.2.%d.%d",
MEMORY OFFSET:     0x29c60     171104  >>171112

0x7e80:	mov esi, dword ptr [rbp - 0x10c]     
MEMORY OFFSET:     -0x10c     -268  >>-260

0x7e86:	mov rdx, qword ptr [rbp - 0xc8]      
MEMORY OFFSET:     -0xc8     -200  >>-192

0x7e8d:	mov r8d, esi                         
0x7e90:	lea rsi, [rip + 0x1f5c4]             
MEMORY OFFSET:     0x1f5c4     128452  >>128460

0x7e97:	mov rdi, rax                         
0x7e9a:	mov eax, 0                           
0x7e9f:	call 0x4dd0                          
0x7ea4:	lea rax, [rip + 0x1f5bf]             #    |u|se_section("[Setup]");
MEMORY OFFSET:     0x1f5bf     128447  >>128455

0x7eab:	mov rdi, rax                         
0x7eae:	call 0x1dbc4                         
0x7eb3:	cmp dword ptr [rbp - 0x134], -1      #    if |(|ansi_colors == -1)
MEMORY OFFSET:     -0x134     -308  >>-300

0x7eba:	jne 0x7ed8                           
0x7ebc:	mov esi, 0                           #	AnsiColors = |g|et_flag_var("AnsiColors", OFF);
0x7ec1:	lea rax, [rip + 0x1f5aa]             
MEMORY OFFSET:     0x1f5aa     128426  >>128434

0x7ec8:	mov rdi, rax                         
0x7ecb:	call 0x1de4c                         
0x7ed0:	mov dword ptr [rip + 0x27142], eax   #	AnsiColors |=| get_flag_var("AnsiColors", OFF);
MEMORY OFFSET:     0x27142     160066  >>160074

0x7ed6:	jmp 0x7ee4                           
0x7ed8:	mov eax, dword ptr [rbp - 0x134]     #	AnsiColors |=| ansi_colors;
MEMORY OFFSET:     -0x134     -308  >>-300

0x7ede:	mov dword ptr [rip + 0x27134], eax   
MEMORY OFFSET:     0x27134     160052  >>160060

0x7ee4:	cmp dword ptr [rbp - 0x130], 0       #    if |(|use_last_screen_character)
MEMORY OFFSET:     -0x130     -304  >>-296

0x7eeb:	je 0x7f09                            
0x7eed:	mov esi, 0                           #	UseLastScreenChar = |g|et_flag_var("UseLastScreenChar",  OFF);
0x7ef2:	lea rax, [rip + 0x1f584]             
MEMORY OFFSET:     0x1f584     128388  >>128396

0x7ef9:	mov rdi, rax                         
0x7efc:	call 0x1de4c                         
0x7f01:	mov dword ptr [rip + 0x289e5], eax   #	UseLastScreenChar |=| get_flag_var("UseLastScreenChar",  OFF);
MEMORY OFFSET:     0x289e5     166373  >>166381

0x7f07:	jmp 0x7f13                           
0x7f09:	mov dword ptr [rip + 0x289d9], 0     #	UseLastScreenChar |=| OFF;
MEMORY OFFSET:     0x289d9     166361  >>166369

0x7f13:	mov eax, dword ptr [rip + 0x289d3]   #    |t|ty_set_last_char_flag(UseLastScreenChar);
MEMORY OFFSET:     0x289d3     166355  >>166363

0x7f19:	mov edi, eax                         
0x7f1b:	call 0xad95                          
0x7f20:	lea rax, [rip + 0x1f568]             #    |u|se_section("[GITFM-Setup]");
MEMORY OFFSET:     0x1f568     128360  >>128368

0x7f27:	mov rdi, rax                         
0x7f2a:	call 0x1dbc4                         
0x7f2f:	mov eax, dword ptr [rip + 0x270e3]   #    if (AnsiColors |=|= ON)
MEMORY OFFSET:     0x270e3     159971  >>159979

0x7f35:	cmp eax, 1                           #    if |(|AnsiColors == ON)
0x7f38:	jne 0x7f56                           
0x7f3a:	mov esi, 1                           #	TypeSensitivity = |g|et_flag_var("TypeSensitivity", ON);
0x7f3f:	lea rax, [rip + 0x1f557]             
MEMORY OFFSET:     0x1f557     128343  >>128351

0x7f46:	mov rdi, rax                         
0x7f49:	call 0x1de4c                         
0x7f4e:	mov dword ptr [rip + 0x270c8], eax   #	TypeSensitivity |=| get_flag_var("TypeSensitivity", ON);
MEMORY OFFSET:     0x270c8     159944  >>159952

0x7f54:	jmp 0x7f60                           
0x7f56:	mov dword ptr [rip + 0x270bc], 0     #	TypeSensitivity |=| OFF;
MEMORY OFFSET:     0x270bc     159932  >>159940

0x7f60:	mov esi, 0                           #    ConfirmOnExit       = |g|et_flag_var("ConfirmOnExit", OFF);
0x7f65:	lea rax, [rip + 0x1f541]             
MEMORY OFFSET:     0x1f541     128321  >>128329

0x7f6c:	mov rdi, rax                         
0x7f6f:	call 0x1de4c                         
0x7f74:	mov dword ptr [rip + 0x289ae], eax   #    ConfirmOnExit       |=| get_flag_var("ConfirmOnExit", OFF);
MEMORY OFFSET:     0x289ae     166318  >>166326

0x7f7a:	lea rax, [rip + 0x1f1e2]             #    NormalModeHelp      = |g|et_string_var("NormalModeHelp", "");
MEMORY OFFSET:     0x1f1e2     127458  >>127466

0x7f81:	mov rsi, rax                         
0x7f84:	lea rax, [rip + 0x1f530]             
MEMORY OFFSET:     0x1f530     128304  >>128312

0x7f8b:	mov rdi, rax                         
0x7f8e:	call 0x1df1e                         
0x7f93:	mov qword ptr [rip + 0x270e6], rax   #    NormalModeHelp      |=| get_string_var("NormalModeHelp", "");
MEMORY OFFSET:     0x270e6     159974  >>159982

0x7f9a:	lea rax, [rip + 0x1f1c2]             #    CommandLineModeHelp = |g|et_string_var("CommandLineModeHelp", "");
MEMORY OFFSET:     0x1f1c2     127426  >>127434

0x7fa1:	mov rsi, rax                         
0x7fa4:	lea rax, [rip + 0x1f51f]             
MEMORY OFFSET:     0x1f51f     128287  >>128295

0x7fab:	mov rdi, rax                         
0x7fae:	call 0x1df1e                         
0x7fb3:	mov qword ptr [rip + 0x270ce], rax   #    CommandLineModeHelp |=| get_string_var("CommandLineModeHelp", "");
MEMORY OFFSET:     0x270ce     159950  >>159958

0x7fba:	mov eax, dword ptr [rip + 0x27058]   #    use_section(AnsiColors |?| color_section : monochrome_section);
MEMORY OFFSET:     0x27058     159832  >>159840

0x7fc0:	test eax, eax                        #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x7fc2:	je 0x7fcd                            
0x7fc4:	lea rax, [rip + 0x27065]             #    |u|se_section(AnsiColors ? color_section : monochrome_section);
MEMORY OFFSET:     0x27065     159845  >>159853

0x7fcb:	jmp 0x7fd4                           
0x7fcd:	lea rax, [rip + 0x2706c]             #    |u|se_section(AnsiColors ? color_section : monochrome_section);
MEMORY OFFSET:     0x2706c     159852  >>159860

0x7fd4:	mov rdi, rax                         #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x7fd7:	call 0x1dbc4                         
0x7fdc:	mov edx, 8                           #    |g|et_colorset_var(TitleColors, TitleFields, TITLE_FIELDS);
0x7fe1:	lea rax, [rip + 0x28698]             
MEMORY OFFSET:     0x28698     165528  >>165536

0x7fe8:	mov rsi, rax                         
0x7feb:	lea rax, [rip + 0x286ce]             
MEMORY OFFSET:     0x286ce     165582  >>165590

0x7ff2:	mov rdi, rax                         
0x7ff5:	call 0x1df8c                         
0x7ffa:	lea rax, [rip + 0x1f426]             #    |u|se_section("[GITFM-FTI]");
MEMORY OFFSET:     0x1f426     128038  >>128046

0x8001:	mov rdi, rax                         
0x8004:	call 0x1dbc4                         
0x8009:	mov eax, 0                           #    |g|et_file_type_info();
0x800e:	call 0x1e86b                         
0x8013:	lea rax, [rip + 0x1f419]             #    |u|se_section("[GITFM-Keys]");
MEMORY OFFSET:     0x1f419     128025  >>128033

0x801a:	mov rdi, rax                         
0x801d:	call 0x1dbc4                         
0x8022:	lea rdx, [rbp - 0x14c]               #    keys = |r|ead_keys(keys, &errors);
MEMORY OFFSET:     -0x14c     -332  >>-324

0x8029:	mov eax, dword ptr [rbp - 0x114]     
MEMORY OFFSET:     -0x114     -276  >>-268

0x802f:	mov rsi, rdx                         
0x8032:	mov edi, eax                         
0x8034:	mov eax, 0                           
0x8039:	call 0x725e                          
0x803e:	mov dword ptr [rbp - 0x114], eax     
MEMORY OFFSET:     -0x114     -276  >>-268

0x8044:	mov edx, dword ptr [rip + 0x2889e]   #    wait_msg |+|= errors;
MEMORY OFFSET:     0x2889e     166046  >>166054

0x804a:	mov eax, dword ptr [rbp - 0x14c]     
MEMORY OFFSET:     -0x14c     -332  >>-324

0x8050:	add eax, edx                         
0x8052:	mov dword ptr [rip + 0x28890], eax   
MEMORY OFFSET:     0x28890     166032  >>166040

0x8058:	cmp dword ptr [rbp - 0x114], 0x800   #    if |(|keys == MAX_KEYS)
MEMORY OFFSET:     -0x114     -276  >>-268

0x8062:	jne 0x808b                           
0x8064:	mov rdx, qword ptr [rip + 0x2886d]   #	|f|printf(stderr, "%s: too many key sequences; only %d are allowed.\n",
MEMORY OFFSET:     0x2886d     165997  >>166005

0x806b:	mov rax, qword ptr [rip + 0x2884e]   
MEMORY OFFSET:     0x2884e     165966  >>165974

0x8072:	mov ecx, 0x800                       
0x8077:	lea rsi, [rip + 0x1f462]             
MEMORY OFFSET:     0x1f462     128098  >>128106

0x807e:	mov rdi, rax                         
0x8081:	mov eax, 0                           
0x8086:	call 0x4b40                          
0x808b:	call 0x4990                          #    if (|g|etuid() == 0)
0x8090:	test eax, eax                        #    if |(|getuid() == 0)
0x8092:	jne 0x809b                           
0x8094:	mov byte ptr [rip + 0x26fe1], 0x23   #	PS1[1] |=| '#';
MEMORY OFFSET:     0x26fe1     159713  >>159721

0x809b:	mov eax, 0                           #    current_path = |x|getcwd();
0x80a0:	call 0x1f18e                         
0x80a5:	mov qword ptr [rbp - 0x88], rax      
MEMORY OFFSET:     -0x88     -136  >>-128

0x80ac:	cmp qword ptr [rbp - 0x88], 0        #    if |(|current_path == NULL)
MEMORY OFFSET:     -0x88     -136  >>-128

0x80b4:	jne 0x80ca                           
0x80b6:	lea rax, [rip + 0x1f45b]             #	|f|atal("`getcwd' failed: permission denied");
MEMORY OFFSET:     0x1f45b     128091  >>128099

0x80bd:	mov rdi, rax                         
0x80c0:	mov eax, 0                           
0x80c5:	call 0x672c                          
0x80ca:	mov eax, 0                           #    |t|ty_start_cursorapp();
0x80cf:	call 0xb0cc                          
0x80d4:	mov eax, 0                           #    |t|itle_init();
0x80d9:	call 0x1c39d                         
0x80de:	mov eax, 0                           #    |i|l_init();
0x80e3:	call 0xdfbe                          
0x80e8:	mov rax, qword ptr [rip + 0x26f91]   #    |s|tatus_init(NormalModeHelp);
MEMORY OFFSET:     0x26f91     159633  >>159641

0x80ef:	mov rdi, rax                         
0x80f2:	call 0x100a3                         
0x80f7:	mov rax, qword ptr [rbp - 0xb0]      #    if (left_panel_path|[|0] == '/')
MEMORY OFFSET:     -0xb0     -176  >>-168

0x80fe:	movzx eax, byte ptr [rax]            
0x8101:	cmp al, 0x2f                         #    if |(|left_panel_path[0] == '/')
0x8103:	jne 0x811d                           
0x8105:	mov rax, qword ptr [rbp - 0xb0]      #	panel_path = |x|strdup(left_panel_path);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x810c:	mov rdi, rax                         
0x810f:	call 0x24780                         
0x8114:	mov qword ptr [rbp - 0xb8], rax      
MEMORY OFFSET:     -0xb8     -184  >>-176

0x811b:	jmp 0x817d                           
0x811d:	mov rax, qword ptr [rbp - 0x88]      #	panel_path = xmalloc(|s|trlen(current_path) + 1 +
MEMORY OFFSET:     -0x88     -136  >>-128

0x8124:	mov rdi, rax                         
0x8127:	call 0x4960                          
0x812c:	mov rbx, rax                         
0x812f:	mov rax, qword ptr [rbp - 0xb0]      #			     |s|trlen(left_panel_path) + 1);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x8136:	mov rdi, rax                         
0x8139:	call 0x4960                          
0x813e:	add rax, rbx                         #	panel_path = xmalloc(strlen(current_path) + 1 |+|
0x8141:	add rax, 2                           #	panel_path = |x|malloc(strlen(current_path) + 1 +
0x8145:	mov rdi, rax                         
0x8148:	call 0x24650                         
0x814d:	mov qword ptr [rbp - 0xb8], rax      
MEMORY OFFSET:     -0xb8     -184  >>-176

0x8154:	mov rcx, qword ptr [rbp - 0xb0]      #	|s|printf(panel_path, "%s/%s", current_path, left_panel_path);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x815b:	mov rdx, qword ptr [rbp - 0x88]      
MEMORY OFFSET:     -0x88     -136  >>-128

0x8162:	mov rax, qword ptr [rbp - 0xb8]      
MEMORY OFFSET:     -0xb8     -184  >>-176

0x8169:	lea rsi, [rip + 0x1f3cb]             
MEMORY OFFSET:     0x1f3cb     127947  >>127955

0x8170:	mov rdi, rax                         
0x8173:	mov eax, 0                           
0x8178:	call 0x4dd0                          
0x817d:	mov rax, qword ptr [rbp - 0xb8]      #    left_panel = |p|anel_init(panel_path);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x8184:	mov rdi, rax                         
0x8187:	call 0x108b4                         
0x818c:	mov qword ptr [rip + 0x2876d], rax   #    left_panel |=| panel_init(panel_path);
MEMORY OFFSET:     0x2876d     165741  >>165749

0x8193:	mov rax, qword ptr [rbp - 0xb8]      #    |x|free(panel_path);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x819a:	mov rdi, rax                         
0x819d:	call 0x1eeae                         
0x81a2:	mov rax, qword ptr [rbp - 0xa8]      #    if (right_panel_path|[|0] == '/')
MEMORY OFFSET:     -0xa8     -168  >>-160

0x81a9:	movzx eax, byte ptr [rax]            
0x81ac:	cmp al, 0x2f                         #    if |(|right_panel_path[0] == '/')
0x81ae:	jne 0x81c8                           
0x81b0:	mov rax, qword ptr [rbp - 0xa8]      #	panel_path = |x|strdup(right_panel_path);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x81b7:	mov rdi, rax                         
0x81ba:	call 0x24780                         
0x81bf:	mov qword ptr [rbp - 0xb8], rax      
MEMORY OFFSET:     -0xb8     -184  >>-176

0x81c6:	jmp 0x8228                           
0x81c8:	mov rax, qword ptr [rbp - 0x88]      #	panel_path = xmalloc(|s|trlen(current_path) + 1 +
MEMORY OFFSET:     -0x88     -136  >>-128

0x81cf:	mov rdi, rax                         
0x81d2:	call 0x4960                          
0x81d7:	mov rbx, rax                         
0x81da:	mov rax, qword ptr [rbp - 0xa8]      #			     |s|trlen(right_panel_path) + 1);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x81e1:	mov rdi, rax                         
0x81e4:	call 0x4960                          
0x81e9:	add rax, rbx                         #	panel_path = xmalloc(strlen(current_path) + 1 |+|
0x81ec:	add rax, 2                           #	panel_path = |x|malloc(strlen(current_path) + 1 +
0x81f0:	mov rdi, rax                         
0x81f3:	call 0x24650                         
0x81f8:	mov qword ptr [rbp - 0xb8], rax      
MEMORY OFFSET:     -0xb8     -184  >>-176

0x81ff:	mov rcx, qword ptr [rbp - 0xa8]      #	|s|printf(panel_path, "%s/%s", current_path, right_panel_path);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x8206:	mov rdx, qword ptr [rbp - 0x88]      
MEMORY OFFSET:     -0x88     -136  >>-128

0x820d:	mov rax, qword ptr [rbp - 0xb8]      
MEMORY OFFSET:     -0xb8     -184  >>-176

0x8214:	lea rsi, [rip + 0x1f320]             
MEMORY OFFSET:     0x1f320     127776  >>127784

0x821b:	mov rdi, rax                         
0x821e:	mov eax, 0                           
0x8223:	call 0x4dd0                          
0x8228:	mov rax, qword ptr [rbp - 0xb8]      #    right_panel = |p|anel_init(panel_path);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x822f:	mov rdi, rax                         
0x8232:	call 0x108b4                         
0x8237:	mov qword ptr [rip + 0x286ca], rax   #    right_panel |=| panel_init(panel_path);
MEMORY OFFSET:     0x286ca     165578  >>165586

0x823e:	mov rax, qword ptr [rbp - 0xb8]      #    |x|free(panel_path);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x8245:	mov rdi, rax                         
0x8248:	call 0x1eeae                         
0x824d:	mov rax, qword ptr [rbp - 0x88]      #    |x|free(current_path);
MEMORY OFFSET:     -0x88     -136  >>-128

0x8254:	mov rdi, rax                         
0x8257:	call 0x1eeae                         
0x825c:	mov eax, 0                           #    |c|onfiguration_end();
0x8261:	call 0x1cd8b                         
0x8266:	mov rax, qword ptr [rip + 0x28693]   #    src_panel |=| left_panel;
MEMORY OFFSET:     0x28693     165523  >>165531

0x826d:	mov qword ptr [rip + 0x2869c], rax   
MEMORY OFFSET:     0x2869c     165532  >>165540

0x8274:	mov rax, qword ptr [rip + 0x2868d]   #    dst_panel |=| right_panel;
MEMORY OFFSET:     0x2868d     165517  >>165525

0x827b:	mov qword ptr [rip + 0x28696], rax   
MEMORY OFFSET:     0x28696     165526  >>165534

0x8282:	mov edi, 0                           #    |r|esize(0);
0x8287:	mov eax, 0                           
0x828c:	call 0x503a                          
0x8291:	mov rax, qword ptr [rip + 0x28660]   #    |t|ty_get_screen(screen);
MEMORY OFFSET:     0x28660     165472  >>165480

0x8298:	mov rdi, rax                         
0x829b:	call 0xce1e                          
0x82a0:	mov edi, 1                           #    |t|ty_set_mode(TTY_NONCANONIC);
0x82a5:	call 0xadac                          
0x82aa:	mov eax, 0                           #    |t|ty_defaults();
0x82af:	call 0xc083                          
0x82b4:	mov qword ptr [rip + 0x28671], 0     #    dir_history       |=| NULL;
MEMORY OFFSET:     0x28671     165489  >>165497

0x82bf:	mov dword ptr [rip + 0x2866f], 0     #    dir_history_count |=| 0;
MEMORY OFFSET:     0x2866f     165487  >>165495

0x82c9:	mov dword ptr [rip + 0x28669], 0     #    dir_history_point |=| 0;
MEMORY OFFSET:     0x28669     165481  >>165489

0x82d3:	mov edi, 1                           #    |s|ignal_handlers(ON);
0x82d8:	call 0x1ed59                         
0x82dd:	mov rax, qword ptr [rip + 0x2862c]   #    |t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x2862c     165420  >>165428

0x82e4:	mov rdi, rax                         
0x82e7:	call 0x1504f                         
0x82ec:	mov rdi, rax                         
0x82ef:	call 0xd875                          
0x82f4:	mov eax, dword ptr [rip + 0x285ee]   #    if (|w|ait_msg)
MEMORY OFFSET:     0x285ee     165358  >>165366

0x82fa:	test eax, eax                        #    if |(|wait_msg)
0x82fc:	je 0x8354                            
0x82fe:	mov edi, 0                           #	|a|larm(0);
0x8303:	call 0x4a60                          
0x8308:	mov rax, qword ptr [rip + 0x28571]   #	|f|printf(stdout, "Press almost any key to continue\n");
MEMORY OFFSET:     0x28571     165233  >>165241

0x830f:	mov rcx, rax                         
0x8312:	mov edx, 0x21                        
0x8317:	mov esi, 1                           
0x831c:	lea rax, [rip + 0x1f225]             
MEMORY OFFSET:     0x1f225     127525  >>127533

0x8323:	mov rdi, rax                         
0x8326:	call 0x4e10                          
0x832b:	mov eax, dword ptr [rip + 0x286ab]   #	|t|ty_goto(tty_lines - 1, 0);
MEMORY OFFSET:     0x286ab     165547  >>165555

0x8331:	sub eax, 1                           
0x8334:	mov esi, 0                           
0x8339:	mov edi, eax                         
0x833b:	call 0xbe95                          
0x8340:	mov edi, 0                           #	|t|ty_get_key(NULL);
0x8345:	call 0xc5ba                          
0x834a:	mov dword ptr [rip + 0x28594], 0     #	wait_msg |=| 0;
MEMORY OFFSET:     0x28594     165268  >>165276

0x8354:	mov rax, qword ptr [rip + 0x285b5]   #    |t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x285b5     165301  >>165309

0x835b:	mov rdi, rax                         
0x835e:	call 0x1504f                         
0x8363:	mov rdi, rax                         
0x8366:	call 0xd875                          
0x836b:	mov eax, 0                           #    alarm(60 - |g|et_local_time()->tm_sec);
0x8370:	call 0x1e4bf                         
0x8375:	mov edx, dword ptr [rax]             #    alarm(60 - get_local_time()|-|>tm_sec);
0x8377:	mov eax, 0x3c                        #    alarm(60 |-| get_local_time()->tm_sec);
0x837c:	sub eax, edx                         
0x837e:	mov edi, eax                         #    |a|larm(60 - get_local_time()->tm_sec);
0x8380:	call 0x4a60                          
0x8385:	mov eax, dword ptr [rip + 0x28559]   #    src_panel = panel_no |?| right_panel : left_panel;
MEMORY OFFSET:     0x28559     165209  >>165217

0x838b:	test eax, eax                        #    src_panel = panel_no ? right_panel |:| left_panel;
0x838d:	je 0x8398                            
0x838f:	mov rax, qword ptr [rip + 0x28572]   #    src_panel = panel_no ? right_panel |:| left_panel;
MEMORY OFFSET:     0x28572     165234  >>165242

0x8396:	jmp 0x839f                           
0x8398:	mov rax, qword ptr [rip + 0x28561]   #    src_panel = panel_no ? right_panel |:| left_panel;
MEMORY OFFSET:     0x28561     165217  >>165225

0x839f:	mov qword ptr [rip + 0x2856a], rax   #    src_panel |=| panel_no ? right_panel : left_panel;
MEMORY OFFSET:     0x2856a     165226  >>165234

0x83a6:	mov eax, dword ptr [rip + 0x28538]   #    dst_panel = panel_no |?| left_panel  : right_panel;
MEMORY OFFSET:     0x28538     165176  >>165184

0x83ac:	test eax, eax                        #    dst_panel = panel_no ? left_panel  |:| right_panel;
0x83ae:	je 0x83b9                            
0x83b0:	mov rax, qword ptr [rip + 0x28549]   #    dst_panel = panel_no ? left_panel  |:| right_panel;
MEMORY OFFSET:     0x28549     165193  >>165201

0x83b7:	jmp 0x83c0                           
0x83b9:	mov rax, qword ptr [rip + 0x28548]   #    dst_panel = panel_no ? left_panel  |:| right_panel;
MEMORY OFFSET:     0x28548     165192  >>165200

0x83c0:	mov qword ptr [rip + 0x28551], rax   #    dst_panel |=| panel_no ? left_panel  : right_panel;
MEMORY OFFSET:     0x28551     165201  >>165209

0x83c7:	mov eax, dword ptr [rip + 0x2860f]   #    if (tty_lines |<| 7)
MEMORY OFFSET:     0x2860f     165391  >>165399

0x83cd:	cmp eax, 6                           #    if |(|tty_lines < 7)
0x83d0:	jg 0x83e6                            
0x83d2:	mov eax, 0                           #	|t|ty_defaults();
0x83d7:	call 0xc083                          
0x83dc:	mov eax, 0                           #	|t|ty_clear();
0x83e1:	call 0xb8a5                          
0x83e6:	mov eax, 0                           #    |t|itle_update();
0x83eb:	call 0x1c9f4                         
0x83f0:	mov eax, 0                           #    |s|tatus_default();
0x83f5:	call 0x10857                         
0x83fa:	mov rax, qword ptr [rbp - 0xc0]      #    |i|l_restore(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8401:	mov rdi, rax                         
0x8404:	call 0xe319                          
0x8409:	mov eax, 0                           #    |t|ty_update();
0x840e:	call 0xb4b7                          
0x8413:	mov eax, 0                           #    saved_il = |i|l_save();
0x8418:	call 0xe205                          
0x841d:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8424:	mov eax, 0                           #    |r|eread();
0x8429:	call 0x772c                          
0x842e:	mov edi, 0                           #    |r|efresh(0);
0x8433:	mov eax, 0                           
0x8438:	call 0x5367                          
0x843d:	mov rax, qword ptr [rbp - 0xc0]      #    |i|l_restore(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8444:	mov rdi, rax                         
0x8447:	call 0xe319                          
0x844c:	mov rax, qword ptr [rip + 0x284bd]   #    |p|anel_set_focus(src_panel, ON);
MEMORY OFFSET:     0x284bd     165053  >>165061

0x8453:	mov esi, 1                           
0x8458:	mov rdi, rax                         
0x845b:	call 0x14ed2                         
0x8460:	cmp dword ptr [rbp - 0x124], 0       #    if |(|first_time)
MEMORY OFFSET:     -0x124     -292  >>-284

0x8467:	je 0x848f                            
0x8469:	mov rax, qword ptr [rip + 0x284a0]   #	|d|ir_history_add(panel_get_path(src_panel));
MEMORY OFFSET:     0x284a0     165024  >>165032

0x8470:	mov rdi, rax                         
0x8473:	call 0x1504f                         
0x8478:	mov rdi, rax                         
0x847b:	mov eax, 0                           
0x8480:	call 0x6598                          
0x8485:	mov dword ptr [rbp - 0x124], 0       #	first_time |=| 0;
MEMORY OFFSET:     -0x124     -292  >>-284

0x848f:	mov eax, 0                           #    |s|et_prompt();
0x8494:	call 0x769b                          
0x8499:	mov eax, 0                           #    saved_il = |i|l_save();
0x849e:	call 0xe205                          
0x84a3:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x84aa:	jmp 0xacc2                           #    while|(|!app_end)
0x84af:	mov rax, qword ptr [rbp - 0xc0]      #	|i|l_restore(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x84b6:	mov rdi, rax                         
0x84b9:	call 0xe319                          
0x84be:	mov eax, 0                           #	saved_il = |i|l_save();
0x84c3:	call 0xe205                          
0x84c8:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x84cf:	mov eax, 0                           #	|i|l_update();
0x84d4:	call 0xf8eb                          
0x84d9:	mov eax, 0                           #	|i|l_update_point();
0x84de:	call 0xf768                          
0x84e3:	mov eax, 0                           #	|t|ty_update();
0x84e8:	call 0xb4b7                          
0x84ed:	lea rax, [rbp - 0xe0]                #	|i|l_get_contents(&cmdln);
MEMORY OFFSET:     -0xe0     -224  >>-216

0x84f4:	mov rdi, rax                         
0x84f7:	call 0xfc3f                          
0x84fc:	mov dword ptr [rip + 0x295ba], 0     #	user_heart_attack |=| 0;
MEMORY OFFSET:     0x295ba     169402  >>169410

0x8506:	jmp 0x8517                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x8508:	mov edi, 0                           #	    |r|eport_undefined_key(NULL);
0x850d:	mov eax, 0                           
0x8512:	call 0x54a2                          
0x8517:	lea rax, [rbp - 0x158]               #	while ((ks = |t|ty_get_key(&repeat_count)) == NULL)
MEMORY OFFSET:     -0x158     -344  >>-336

0x851e:	mov rdi, rax                         
0x8521:	call 0xc5ba                          
0x8526:	mov qword ptr [rbp - 0x78], rax      
MEMORY OFFSET:     -0x78     -120  >>-112

0x852a:	cmp qword ptr [rbp - 0x78], 0        #	while ((ks = tty_get_key(&repeat_count)) |=|= NULL)
MEMORY OFFSET:     -0x78     -120  >>-112

0x852f:	je 0x8508                            
0x8531:	mov eax, 0                           #	|s|tatus_update();
0x8536:	call 0x106d4                         
0x853b:	mov rax, qword ptr [rbp - 0x78]      #	key = ks|-|>key_seq[0];
MEMORY OFFSET:     -0x78     -120  >>-112

0x853f:	mov rax, qword ptr [rax]             
0x8542:	movzx eax, byte ptr [rax]            #	key = ks->key_seq|[|0];
0x8545:	movzx eax, al                        #	key |=| ks->key_seq[0];
0x8548:	mov dword ptr [rbp - 0x12c], eax     
MEMORY OFFSET:     -0x12c     -300  >>-292

0x854e:	mov rax, qword ptr [rbp - 0x78]      #	command |=| (command_t *)ks->aux_data;
MEMORY OFFSET:     -0x78     -120  >>-112

0x8552:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x8556:	mov qword ptr [rbp - 0x70], rax      
MEMORY OFFSET:     -0x70     -112  >>-104

0x855a:	cmp qword ptr [rbp - 0x70], 0        #	if |(|command)
MEMORY OFFSET:     -0x70     -112  >>-104

0x855f:	je 0x8a13                            
0x8565:	mov rax, qword ptr [rbp - 0x70]      #	    if (command|-|>builtin)
MEMORY OFFSET:     -0x70     -112  >>-104

0x8569:	movzx eax, byte ptr [rax + 0x1b]     
MEMORY OFFSET:     0x1b     27  >>35

0x856d:	test al, al                          #	    if |(|command->builtin)
0x856f:	je 0x85b2                            
0x8571:	mov rax, qword ptr [rbp - 0x70]      #		key = - 1 - (command|-|>name-builtin[0]) / MAX_BUILTIN_NAME;
MEMORY OFFSET:     -0x70     -112  >>-104

0x8575:	mov rax, qword ptr [rax]             
0x8578:	lea rdx, [rip + 0x26b21]             #		key = - 1 - (command->name|-|builtin[0]) / MAX_BUILTIN_NAME;
MEMORY OFFSET:     0x26b21     158497  >>158505

0x857f:	sub rax, rdx                         
0x8582:	mov rcx, rax                         
0x8585:	movabs rdx, 0xea0ea0ea0ea0ea1        #		key = - 1 - (command->name-builtin[0]) |/| MAX_BUILTIN_NAME;
0x858f:	mov rax, rcx                         
0x8592:	imul rdx                             
0x8595:	mov rax, rdx                         
0x8598:	sar rax, 1                           
0x859b:	sar rcx, 0x3f                        
0x859f:	mov rdx, rcx                         
0x85a2:	sub rax, rdx                         
0x85a5:	not eax                              #		key |=| - 1 - (command->name-builtin[0]) / MAX_BUILTIN_NAME;
0x85a7:	mov dword ptr [rbp - 0x12c], eax     
MEMORY OFFSET:     -0x12c     -300  >>-292

0x85ad:	jmp 0x8a13                           
0x85b2:	mov rax, qword ptr [rbp - 0x70]      #		if (command|-|>name)
MEMORY OFFSET:     -0x70     -112  >>-104

0x85b6:	mov rax, qword ptr [rax]             
0x85b9:	test rax, rax                        #		if |(|command->name)
0x85bc:	je 0x8a13                            
0x85c2:	mov rax, qword ptr [rip + 0x28347]   #		    |p|anel_no_optimizations(src_panel);
MEMORY OFFSET:     0x28347     164679  >>164687

0x85c9:	mov rdi, rax                         
0x85cc:	call 0x110b0                         
0x85d1:	mov rax, qword ptr [rip + 0x28340]   #		    |p|anel_no_optimizations(dst_panel);
MEMORY OFFSET:     0x28340     164672  >>164680

0x85d8:	mov rdi, rax                         
0x85db:	call 0x110b0                         
0x85e0:	mov rax, qword ptr [rbp - 0x70]      #		    if (command|-|>body)
MEMORY OFFSET:     -0x70     -112  >>-104

0x85e4:	mov rax, qword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0x85e8:	test rax, rax                        #		    if |(|command->body)
0x85eb:	je 0x8997                            
0x85f1:	mov qword ptr [rbp - 0x30], 0        #			char *|c|md = NULL;
MEMORY OFFSET:     -0x30     -48  >>-40

0x85f9:	mov rcx, qword ptr [rip + 0x28318]   #			retval = |c|ommand_expand(command, &cmd,
MEMORY OFFSET:     0x28318     164632  >>164640

0x8600:	mov rdx, qword ptr [rip + 0x28309]   
MEMORY OFFSET:     0x28309     164617  >>164625

0x8607:	lea rsi, [rbp - 0x30]                
MEMORY OFFSET:     -0x30     -48  >>-40

0x860b:	mov rax, qword ptr [rbp - 0x70]      
MEMORY OFFSET:     -0x70     -112  >>-104

0x860f:	mov rdi, rax                         
0x8612:	mov eax, 0                           
0x8617:	call 0x6785                          
0x861c:	mov dword ptr [rbp - 0x108], eax     
MEMORY OFFSET:     -0x108     -264  >>-256

0x8622:	cmp dword ptr [rbp - 0x108], 0       #			if |(|retval)
MEMORY OFFSET:     -0x108     -264  >>-256

0x8629:	je 0x8924                            
0x862f:	cmp dword ptr [rbp - 0x108], 0       #			    if |(|retval > 0)
MEMORY OFFSET:     -0x108     -264  >>-256

0x8636:	jle 0x8991                           
0x863c:	mov rax, qword ptr [rbp - 0x70]      #				size_t msglen = 32 + strlen(command|-|>name) +
MEMORY OFFSET:     -0x70     -112  >>-104

0x8640:	mov rax, qword ptr [rax]             
0x8643:	mov rdi, rax                         #				size_t msglen = 32 + |s|trlen(command->name) +
0x8646:	call 0x4960                          
0x864b:	mov rbx, rax                         
0x864e:	mov rax, qword ptr [rbp - 0x30]      #				    |s|trlen(cmd) + 1;
MEMORY OFFSET:     -0x30     -48  >>-40

0x8652:	mov rdi, rax                         
0x8655:	call 0x4960                          
0x865a:	add rax, rbx                         #				size_t msglen = 32 + strlen(command->name) |+|
0x865d:	add rax, 0x21                        #				size_t |m|sglen = 32 + strlen(command->name) +
0x8661:	mov qword ptr [rbp - 0x58], rax      
MEMORY OFFSET:     -0x58     -88  >>-80

0x8665:	mov rax, qword ptr [rbp - 0x58]      #				char *msg = |x|malloc(msglen);
MEMORY OFFSET:     -0x58     -88  >>-80

0x8669:	mov rdi, rax                         
0x866c:	call 0x24650                         
0x8671:	mov qword ptr [rbp - 0x50], rax      
MEMORY OFFSET:     -0x50     -80  >>-72

0x8675:	mov rcx, qword ptr [rbp - 0x30]      #				|s|printf(msg, "%s: %s", command->name, cmd);
MEMORY OFFSET:     -0x30     -48  >>-40

0x8679:	mov rax, qword ptr [rbp - 0x70]      
MEMORY OFFSET:     -0x70     -112  >>-104

0x867d:	mov rdx, qword ptr [rax]             
0x8680:	mov rax, qword ptr [rbp - 0x50]      
MEMORY OFFSET:     -0x50     -80  >>-72

0x8684:	lea rsi, [rip + 0x1eb11]             
MEMORY OFFSET:     0x1eb11     125713  >>125721

0x868b:	mov rdi, rax                         
0x868e:	mov eax, 0                           
0x8693:	call 0x4dd0                          
0x8698:	mov rax, qword ptr [rbp - 0x50]      #				|s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
MEMORY OFFSET:     -0x50     -80  >>-72

0x869c:	mov edx, 1                           
0x86a1:	mov esi, 1                           
0x86a6:	mov rdi, rax                         
0x86a9:	call 0x107d0                         
0x86ae:	mov eax, 0                           #				|t|ty_update();
0x86b3:	call 0xb4b7                          
0x86b8:	mov rax, qword ptr [rbp - 0x50]      #				|x|free(msg);
MEMORY OFFSET:     -0x50     -80  >>-72

0x86bc:	mov rdi, rax                         
0x86bf:	call 0x1eeae                         
0x86c4:	mov rax, qword ptr [rbp - 0x70]      #				if (command|-|>hide)
MEMORY OFFSET:     -0x70     -112  >>-104

0x86c8:	movzx eax, byte ptr [rax + 0x1a]     
MEMORY OFFSET:     0x1a     26  >>34

0x86cc:	test al, al                          #				if |(|command->hide)
0x86ce:	je 0x873a                            
0x86d0:	mov rax, qword ptr [rbp - 0x70]      #				    msg = xmalloc(64+strlen(command|-|>name)+1);
MEMORY OFFSET:     -0x70     -112  >>-104

0x86d4:	mov rax, qword ptr [rax]             
0x86d7:	mov rdi, rax                         #				    msg = xmalloc(64+|s|trlen(command->name)+1);
0x86da:	call 0x4960                          
0x86df:	add rax, 0x41                        #				    msg = |x|malloc(64+strlen(command->name)+1);
0x86e3:	mov rdi, rax                         
0x86e6:	call 0x24650                         
0x86eb:	mov qword ptr [rbp - 0x50], rax      
MEMORY OFFSET:     -0x50     -80  >>-72

0x86ef:	mov rax, qword ptr [rbp - 0x70]      #				    |s|printf(msg,
MEMORY OFFSET:     -0x70     -112  >>-104

0x86f3:	mov rdx, qword ptr [rax]             
0x86f6:	mov rax, qword ptr [rbp - 0x50]      
MEMORY OFFSET:     -0x50     -80  >>-72

0x86fa:	mov rcx, rdx                         
0x86fd:	lea rdx, [rip + 0x1ee66]             
MEMORY OFFSET:     0x1ee66     126566  >>126574

0x8704:	lea rsi, [rip + 0x1ee6d]             
MEMORY OFFSET:     0x1ee6d     126573  >>126581

0x870b:	mov rdi, rax                         
0x870e:	mov eax, 0                           
0x8713:	call 0x4dd0                          
0x8718:	mov rax, qword ptr [rbp - 0x50]      #				    |i|l_message(msg);
MEMORY OFFSET:     -0x50     -80  >>-72

0x871c:	mov rdi, rax                         
0x871f:	call 0xfcbe                          
0x8724:	mov eax, 0                           #				    |t|ty_update();
0x8729:	call 0xb4b7                          
0x872e:	mov rax, qword ptr [rbp - 0x50]      #				    |x|free(msg);
MEMORY OFFSET:     -0x50     -80  >>-72

0x8732:	mov rdi, rax                         
0x8735:	call 0x1eeae                         
0x873a:	mov rax, qword ptr [rbp - 0x30]      #				if (!|i|s_a_bg_command(cmd))
MEMORY OFFSET:     -0x30     -48  >>-40

0x873e:	mov rdi, rax                         
0x8741:	call 0x1e7aa                         
0x8746:	test eax, eax                        #				if |(|!is_a_bg_command(cmd))
0x8748:	jne 0x8756                           
0x874a:	mov rax, qword ptr [rbp - 0x30]      #				    |t|ty_update_title(cmd);
MEMORY OFFSET:     -0x30     -48  >>-40

0x874e:	mov rdi, rax                         
0x8751:	call 0xd875                          
0x8756:	mov rax, qword ptr [rbp - 0x70]      #				child_exit_code = start(cmd, command|-|>hide);
MEMORY OFFSET:     -0x70     -112  >>-104

0x875a:	movzx eax, byte ptr [rax + 0x1a]     
MEMORY OFFSET:     0x1a     26  >>34

0x875e:	movsx edx, al                        #				child_exit_code = |s|tart(cmd, command->hide);
0x8761:	mov rax, qword ptr [rbp - 0x30]      
MEMORY OFFSET:     -0x30     -48  >>-40

0x8765:	mov esi, edx                         
0x8767:	mov rdi, rax                         
0x876a:	call 0x1f6f0                         
0x876f:	mov dword ptr [rbp - 0x104], eax     
MEMORY OFFSET:     -0x104     -260  >>-252

0x8775:	mov rax, qword ptr [rbp - 0x30]      #				|x|free(cmd);
MEMORY OFFSET:     -0x30     -48  >>-40

0x8779:	mov rdi, rax                         
0x877c:	call 0x1eeae                         
0x8781:	mov rax, qword ptr [rbp - 0x70]      #				if (command|-|>hide)
MEMORY OFFSET:     -0x70     -112  >>-104

0x8785:	movzx eax, byte ptr [rax + 0x1a]     
MEMORY OFFSET:     0x1a     26  >>34

0x8789:	test al, al                          #				if |(|command->hide)
0x878b:	je 0x87f2                            
0x878d:	mov eax, dword ptr [rbp - 0x104]     #				    if(|W|IFSIGNALED(child_exit_code))
MEMORY OFFSET:     -0x104     -260  >>-252

0x8793:	and eax, 0x7f                        
0x8796:	add eax, 1                           
0x8799:	sar al, 1                            
0x879b:	test al, al                          #				    if|(|WIFSIGNALED(child_exit_code))
0x879d:	jle 0x87ba                           
0x879f:	mov edx, 0xc                         #					|i|l_read_char("Command interrupted by signal",
0x87a4:	mov esi, 0                           
0x87a9:	lea rax, [rip + 0x1ede7]             
MEMORY OFFSET:     0x1ede7     126439  >>126447

0x87b0:	mov rdi, rax                         
0x87b3:	call 0x5c09                          
0x87b8:	jmp 0x882d                           
0x87ba:	mov eax, dword ptr [rbp - 0x104]     #				    else if(|W|IFEXITED(child_exit_code) &&
MEMORY OFFSET:     -0x104     -260  >>-252

0x87c0:	and eax, 0x7f                        
0x87c3:	test eax, eax                        #				    else if|(|WIFEXITED(child_exit_code) &&
0x87c5:	jne 0x882d                           
0x87c7:	mov eax, dword ptr [rbp - 0x104]     #					    (|W|EXITSTATUS(child_exit_code) != 0))
MEMORY OFFSET:     -0x104     -260  >>-252

0x87cd:	sar eax, 8                           
0x87d0:	movzx eax, al                        
0x87d3:	test eax, eax                        #				    else if(WIFEXITED(child_exit_code) |&|&
0x87d5:	je 0x882d                            
0x87d7:	mov eax, 0                           #					|t|ty_beep();
0x87dc:	call 0xbfbf                          
0x87e1:	mov rax, qword ptr [rbp - 0x70]      #					|d|isplay_errors(command->name);
MEMORY OFFSET:     -0x70     -112  >>-104

0x87e5:	mov rax, qword ptr [rax]             
0x87e8:	mov rdi, rax                         
0x87eb:	call 0x1f808                         
0x87f0:	jmp 0x882d                           
0x87f2:	mov rax, qword ptr [rbp - 0x70]      #				    if (command|-|>save_screen)
MEMORY OFFSET:     -0x70     -112  >>-104

0x87f6:	movzx eax, byte ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x87fa:	test al, al                          #				    if |(|command->save_screen)
0x87fc:	je 0x880d                            
0x87fe:	mov rax, qword ptr [rip + 0x280f3]   #					|t|ty_get_screen(screen);
MEMORY OFFSET:     0x280f3     164083  >>164091

0x8805:	mov rdi, rax                         
0x8808:	call 0xce1e                          
0x880d:	mov eax, 0                           #				    |t|ty_touch();
0x8812:	call 0xb9ce                          
0x8817:	mov rax, qword ptr [rbp - 0x70]      #				    if (command|-|>pause)
MEMORY OFFSET:     -0x70     -112  >>-104

0x881b:	movzx eax, byte ptr [rax + 0x19]     
MEMORY OFFSET:     0x19     25  >>33

0x881f:	test al, al                          #				    if |(|command->pause)
0x8821:	je 0x882d                            
0x8823:	mov dword ptr [rip + 0x280bb], 1     #					wait_msg |=| 1;
MEMORY OFFSET:     0x280bb     164027  >>164035

0x882d:	mov eax, dword ptr [rbp - 0x104]     #				if (|W|IFEXITED(child_exit_code) &&
MEMORY OFFSET:     -0x104     -260  >>-252

0x8833:	and eax, 0x7f                        
0x8836:	test eax, eax                        #				if |(|WIFEXITED(child_exit_code) &&
0x8838:	jne 0x88c1                           
0x883e:	mov eax, dword ptr [rbp - 0x104]     #				    (|W|EXITSTATUS(child_exit_code) == 0) &&
MEMORY OFFSET:     -0x104     -260  >>-252

0x8844:	sar eax, 8                           
0x8847:	movzx eax, al                        
0x884a:	test eax, eax                        #				if (WIFEXITED(child_exit_code) |&|&
0x884c:	jne 0x88c1                           
0x884e:	mov rax, qword ptr [rbp - 0x70]      #				    command|-|>new_dir)
MEMORY OFFSET:     -0x70     -112  >>-104

0x8852:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x8856:	test rax, rax                        #				    (WEXITSTATUS(child_exit_code) == 0) |&|&
0x8859:	je 0x88c1                            
0x885b:	mov rax, qword ptr [rbp - 0x70]      #					|t|ilde_expand(command->new_dir);
MEMORY OFFSET:     -0x70     -112  >>-104

0x885f:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x8863:	mov rdi, rax                         
0x8866:	mov eax, 0                           
0x886b:	call 0x1fb51                         
0x8870:	mov qword ptr [rbp - 0x48], rax      
MEMORY OFFSET:     -0x48     -72  >>-64

0x8874:	mov rdx, qword ptr [rip + 0x2809d]   #				    |p|anel_action(src_panel, act_CHDIR,
MEMORY OFFSET:     0x2809d     163997  >>164005

0x887b:	mov rax, qword ptr [rip + 0x2808e]   
MEMORY OFFSET:     0x2808e     163982  >>163990

0x8882:	mov rcx, qword ptr [rbp - 0x48]      
MEMORY OFFSET:     -0x48     -72  >>-64

0x8886:	mov r8d, 1                           
0x888c:	mov esi, 0x21                        
0x8891:	mov rdi, rax                         
0x8894:	call 0x1a89a                         
0x8899:	mov rax, qword ptr [rip + 0x28070]   #				    |d|ir_history_add(panel_get_path(src_panel));
MEMORY OFFSET:     0x28070     163952  >>163960

0x88a0:	mov rdi, rax                         
0x88a3:	call 0x1504f                         
0x88a8:	mov rdi, rax                         
0x88ab:	mov eax, 0                           
0x88b0:	call 0x6598                          
0x88b5:	mov rax, qword ptr [rbp - 0x48]      #				    |x|free(expanded_dir);
MEMORY OFFSET:     -0x48     -72  >>-64

0x88b9:	mov rdi, rax                         
0x88bc:	call 0x1eeae                         
0x88c1:	mov eax, dword ptr [rbp - 0x104]     #				if (|W|IFEXITED(child_exit_code) &&
MEMORY OFFSET:     -0x104     -260  >>-252

0x88c7:	and eax, 0x7f                        
0x88ca:	test eax, eax                        #				if |(|WIFEXITED(child_exit_code) &&
0x88cc:	jne 0x82f4                           
0x88d2:	mov eax, dword ptr [rbp - 0x104]     #				    (|W|EXITSTATUS(child_exit_code) == 0))
MEMORY OFFSET:     -0x104     -260  >>-252

0x88d8:	sar eax, 8                           
0x88db:	movzx eax, al                        
0x88de:	test eax, eax                        #				if (WIFEXITED(child_exit_code) |&|&
0x88e0:	jne 0x82f4                           
0x88e6:	cmp dword ptr [rbp - 0x108], 2       #				    if |(|retval == 2)
MEMORY OFFSET:     -0x108     -264  >>-256

0x88ed:	jne 0x8903                           
0x88ef:	mov rax, qword ptr [rip + 0x2801a]   #					|p|anel_unselect_all(src_panel);
MEMORY OFFSET:     0x2801a     163866  >>163874

0x88f6:	mov rdi, rax                         
0x88f9:	call 0x14ff9                         
0x88fe:	jmp 0x82f4                           
0x8903:	cmp dword ptr [rbp - 0x108], 3       #					if |(|retval == 3)
MEMORY OFFSET:     -0x108     -264  >>-256

0x890a:	jne 0x82f4                           
0x8910:	mov rax, qword ptr [rip + 0x28001]   #					    |p|anel_unselect_all(dst_panel);
MEMORY OFFSET:     0x28001     163841  >>163849

0x8917:	mov rdi, rax                         
0x891a:	call 0x14ff9                         
0x891f:	jmp 0x82f4                           
0x8924:	mov rax, qword ptr [rbp - 0x78]      #			    msg = xmalloc(80+strlen((char *)ks|-|>key_seq)+1);
MEMORY OFFSET:     -0x78     -120  >>-112

0x8928:	mov rax, qword ptr [rax]             
0x892b:	mov rdi, rax                         #			    msg = xmalloc(80+|s|trlen((char *)ks->key_seq)+1);
0x892e:	call 0x4960                          
0x8933:	add rax, 0x51                        #			    msg = |x|malloc(80+strlen((char *)ks->key_seq)+1);
0x8937:	mov rdi, rax                         
0x893a:	call 0x24650                         
0x893f:	mov qword ptr [rbp - 0x60], rax      
MEMORY OFFSET:     -0x60     -96  >>-88

0x8943:	mov rax, qword ptr [rbp - 0x70]      #			    |s|printf(msg,
MEMORY OFFSET:     -0x70     -112  >>-104

0x8947:	mov rcx, qword ptr [rax + 0x20]      
MEMORY OFFSET:     0x20     32  >>40

0x894b:	mov rax, qword ptr [rbp - 0x70]      
MEMORY OFFSET:     -0x70     -112  >>-104

0x894f:	mov rdx, qword ptr [rax]             
0x8952:	mov rax, qword ptr [rbp - 0x60]      
MEMORY OFFSET:     -0x60     -96  >>-88

0x8956:	lea rsi, [rip + 0x1ec5b]             
MEMORY OFFSET:     0x1ec5b     126043  >>126051

0x895d:	mov rdi, rax                         
0x8960:	mov eax, 0                           
0x8965:	call 0x4dd0                          
0x896a:	mov rax, qword ptr [rbp - 0x60]      #			    |i|l_read_char(msg, (char *)NULL,
MEMORY OFFSET:     -0x60     -96  >>-88

0x896e:	mov edx, 0x1c                        
0x8973:	mov esi, 0                           
0x8978:	mov rdi, rax                         
0x897b:	call 0x5c09                          
0x8980:	mov rax, qword ptr [rbp - 0x60]      #			    |x|free(msg);
MEMORY OFFSET:     -0x60     -96  >>-88

0x8984:	mov rdi, rax                         
0x8987:	call 0x1eeae                         
0x898c:	jmp 0xacc2                           #			    |c|ontinue;
0x8991:	nop                                  #				|c|ontinue;
0x8992:	jmp 0xacc2                           
0x8997:	mov rax, qword ptr [rbp - 0x70]      #			if (command|-|>new_dir)
MEMORY OFFSET:     -0x70     -112  >>-104

0x899b:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x899f:	test rax, rax                        #			if |(|command->new_dir)
0x89a2:	je 0x82f4                            
0x89a8:	mov rax, qword ptr [rbp - 0x70]      #			    char *expanded_dir=|t|ilde_expand(command->new_dir);
MEMORY OFFSET:     -0x70     -112  >>-104

0x89ac:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x89b0:	mov rdi, rax                         
0x89b3:	mov eax, 0                           
0x89b8:	call 0x1fb51                         
0x89bd:	mov qword ptr [rbp - 0x68], rax      
MEMORY OFFSET:     -0x68     -104  >>-96

0x89c1:	mov rdx, qword ptr [rip + 0x27f50]   #			    |p|anel_action(src_panel, act_CHDIR, dst_panel,
MEMORY OFFSET:     0x27f50     163664  >>163672

0x89c8:	mov rax, qword ptr [rip + 0x27f41]   
MEMORY OFFSET:     0x27f41     163649  >>163657

0x89cf:	mov rcx, qword ptr [rbp - 0x68]      
MEMORY OFFSET:     -0x68     -104  >>-96

0x89d3:	mov r8d, 1                           
0x89d9:	mov esi, 0x21                        
0x89de:	mov rdi, rax                         
0x89e1:	call 0x1a89a                         
0x89e6:	mov rax, qword ptr [rip + 0x27f23]   #			    |d|ir_history_add(panel_get_path(src_panel));
MEMORY OFFSET:     0x27f23     163619  >>163627

0x89ed:	mov rdi, rax                         
0x89f0:	call 0x1504f                         
0x89f5:	mov rdi, rax                         
0x89f8:	mov eax, 0                           
0x89fd:	call 0x6598                          
0x8a02:	mov rax, qword ptr [rbp - 0x68]      #			    |x|free(expanded_dir);
MEMORY OFFSET:     -0x68     -104  >>-96

0x8a06:	mov rdi, rax                         
0x8a09:	call 0x1eeae                         
0x8a0e:	jmp 0x82f4                           #			|g|oto restart;
0x8a13:	mov eax, dword ptr [rbp - 0x12c]     #	|s|witch (key)
MEMORY OFFSET:     -0x12c     -300  >>-292

0x8a19:	add eax, 0x57                        
0x8a1c:	cmp eax, 0x5e                        
0x8a1f:	ja 0xac71                            
0x8a25:	mov eax, eax                         
0x8a27:	lea rdx, [rax*4]                     
0x8a2f:	lea rax, [rip + 0x1efa2]             
MEMORY OFFSET:     0x1efa2     126882  >>126890

0x8a36:	mov eax, dword ptr [rdx + rax]       
0x8a39:	cdqe                                 
0x8a3b:	lea rdx, [rip + 0x1ef96]             
MEMORY OFFSET:     0x1ef96     126870  >>126878

0x8a42:	add rax, rdx                         
0x8a45:	jmp rax                              
0x8a48:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8a4f:	mov rdi, rax                         
0x8a52:	call 0xdf09                          
0x8a57:	mov edi, 0                           #		|i|l_kill_line(IL_DONT_STORE);
0x8a5c:	call 0xed98                          
0x8a61:	mov eax, 0                           #		saved_il = |i|l_save();
0x8a66:	call 0xe205                          
0x8a6b:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8a72:	jmp 0xacc2                           #		|b|reak;
0x8a77:	mov eax, dword ptr [rip + 0x265ab]   #		if (|!|two_panel_mode)
MEMORY OFFSET:     0x265ab     157099  >>157107

0x8a7d:	test eax, eax                        #		if |(|!two_panel_mode)
0x8a7f:	je 0xa65c                            
0x8a85:	mov eax, dword ptr [rbp - 0x158]     #		if ((repeat_count |&| 1) == 0)
MEMORY OFFSET:     -0x158     -344  >>-336

0x8a8b:	and eax, 1                           
0x8a8e:	test eax, eax                        #		if |(|(repeat_count & 1) == 0)
0x8a90:	jne 0x8a97                           
0x8a92:	jmp 0xacc2                           #		    |b|reak;
0x8a97:	mov rax, qword ptr [rip + 0x27e72]   #		|p|anel_set_focus(src_panel, OFF);
MEMORY OFFSET:     0x27e72     163442  >>163450

0x8a9e:	mov esi, 0                           
0x8aa3:	mov rdi, rax                         
0x8aa6:	call 0x14ed2                         
0x8aab:	mov rax, qword ptr [rip + 0x27e5e]   #		tmp_panel |=| src_panel;
MEMORY OFFSET:     0x27e5e     163422  >>163430

0x8ab2:	mov qword ptr [rip + 0x27e67], rax   
MEMORY OFFSET:     0x27e67     163431  >>163439

0x8ab9:	mov rax, qword ptr [rip + 0x27e58]   #		src_panel |=| dst_panel;
MEMORY OFFSET:     0x27e58     163416  >>163424

0x8ac0:	mov qword ptr [rip + 0x27e49], rax   
MEMORY OFFSET:     0x27e49     163401  >>163409

0x8ac7:	mov rax, qword ptr [rip + 0x27e52]   #		dst_panel |=| tmp_panel;
MEMORY OFFSET:     0x27e52     163410  >>163418

0x8ace:	mov qword ptr [rip + 0x27e43], rax   
MEMORY OFFSET:     0x27e43     163395  >>163403

0x8ad5:	mov eax, dword ptr [rip + 0x27e09]   #		panel_no = |!|panel_no;
MEMORY OFFSET:     0x27e09     163337  >>163345

0x8adb:	test eax, eax                        
0x8add:	sete al                              
0x8ae0:	movzx eax, al                        
0x8ae3:	mov dword ptr [rip + 0x27dfb], eax   #		panel_no |=| !panel_no;
MEMORY OFFSET:     0x27dfb     163323  >>163331

0x8ae9:	mov rax, qword ptr [rip + 0x27e20]   #		|p|anel_set_focus(src_panel, ON);
MEMORY OFFSET:     0x27e20     163360  >>163368

0x8af0:	mov esi, 1                           
0x8af5:	mov rdi, rax                         
0x8af8:	call 0x14ed2                         
0x8afd:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8b04:	mov rdi, rax                         
0x8b07:	call 0xdf09                          
0x8b0c:	mov eax, 0                           #		|s|et_prompt();
0x8b11:	call 0x769b                          
0x8b16:	mov eax, 0                           #		saved_il = |i|l_save();
0x8b1b:	call 0xe205                          
0x8b20:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8b27:	mov rax, qword ptr [rip + 0x27de2]   #		|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x27de2     163298  >>163306

0x8b2e:	mov rdi, rax                         
0x8b31:	call 0x1504f                         
0x8b36:	mov rdi, rax                         
0x8b39:	call 0xd875                          
0x8b3e:	jmp 0xacc2                           #		|b|reak;
0x8b43:	mov ecx, dword ptr [rbp - 0x158]     #		|p|anel_action(src_panel,act_UP,dst_panel,NULL,repeat_count);
MEMORY OFFSET:     -0x158     -344  >>-336

0x8b49:	mov rdx, qword ptr [rip + 0x27dc8]   
MEMORY OFFSET:     0x27dc8     163272  >>163280

0x8b50:	mov rax, qword ptr [rip + 0x27db9]   
MEMORY OFFSET:     0x27db9     163257  >>163265

0x8b57:	mov r8d, ecx                         
0x8b5a:	mov ecx, 0                           
0x8b5f:	mov esi, 0x1b                        
0x8b64:	mov rdi, rax                         
0x8b67:	call 0x1a89a                         
0x8b6c:	jmp 0xacc2                           #		|b|reak;
0x8b71:	mov ecx, dword ptr [rbp - 0x158]     #		|p|anel_action(src_panel,act_DOWN,dst_panel,NULL,repeat_count);
MEMORY OFFSET:     -0x158     -344  >>-336

0x8b77:	mov rdx, qword ptr [rip + 0x27d9a]   
MEMORY OFFSET:     0x27d9a     163226  >>163234

0x8b7e:	mov rax, qword ptr [rip + 0x27d8b]   
MEMORY OFFSET:     0x27d8b     163211  >>163219

0x8b85:	mov r8d, ecx                         
0x8b88:	mov ecx, 0                           
0x8b8d:	mov esi, 0x1c                        
0x8b92:	mov rdi, rax                         
0x8b95:	call 0x1a89a                         
0x8b9a:	jmp 0xacc2                           #		|b|reak;
0x8b9f:	mov dword ptr [rbp - 0x13c], 0       #		action_status |=| 0;
MEMORY OFFSET:     -0x13c     -316  >>-308

0x8ba9:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8bb0:	mov rdi, rax                         
0x8bb3:	call 0xdf09                          
0x8bb8:	lea rax, [rbp - 0xe0]                #		|i|l_get_contents(&cmdln);
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8bbf:	mov rdi, rax                         
0x8bc2:	call 0xfc3f                          
0x8bc7:	mov rax, qword ptr [rbp - 0xe0]      #		for (i = |s|trlen(cmdln) - 1; i >= 0; i--)
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8bce:	mov rdi, rax                         
0x8bd1:	call 0x4960                          
0x8bd6:	sub eax, 1                           #		for (i = strlen(cmdln) |-| 1; i >= 0; i--)
0x8bd9:	mov dword ptr [rbp - 0x138], eax     #		for (i |=| strlen(cmdln) - 1; i >= 0; i--)
MEMORY OFFSET:     -0x138     -312  >>-304

0x8bdf:	jmp 0x8c16                           #		|f|or (i = strlen(cmdln) - 1; i >= 0; i--)
0x8be1:	mov rdx, qword ptr [rbp - 0xe0]      #		    if (cmdln|[|i] == ' ')
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8be8:	mov eax, dword ptr [rbp - 0x138]     
MEMORY OFFSET:     -0x138     -312  >>-304

0x8bee:	cdqe                                 
0x8bf0:	add rax, rdx                         
0x8bf3:	movzx eax, byte ptr [rax]            
0x8bf6:	cmp al, 0x20                         #		    if |(|cmdln[i] == ' ')
0x8bf8:	jne 0x8c21                           
0x8bfa:	mov rdx, qword ptr [rbp - 0xe0]      #			cmdln|[|i] = '\0';
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8c01:	mov eax, dword ptr [rbp - 0x138]     
MEMORY OFFSET:     -0x138     -312  >>-304

0x8c07:	cdqe                                 
0x8c09:	add rax, rdx                         
0x8c0c:	mov byte ptr [rax], 0                #			cmdln[i] |=| '\0';
0x8c0f:	sub dword ptr [rbp - 0x138], 1       #		for (i = strlen(cmdln) - 1; i >= 0; i|-|-)
MEMORY OFFSET:     -0x138     -312  >>-304

0x8c16:	cmp dword ptr [rbp - 0x138], 0       #		for (i = strlen(cmdln) - 1; i |>|= 0; i--)
MEMORY OFFSET:     -0x138     -312  >>-304

0x8c1d:	jns 0x8be1                           
0x8c1f:	jmp 0x8c22                           
0x8c21:	nop                                  #			|b|reak;
0x8c22:	mov rax, qword ptr [rbp - 0xe0]      #		switch (cmdln|[|0])
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8c29:	movzx eax, byte ptr [rax]            
0x8c2c:	movsx eax, al                        
0x8c2f:	cmp eax, 0x2d                        
0x8c32:	je 0x8cda                            
0x8c38:	cmp eax, 0x2d                        
0x8c3b:	jg 0x8df4                            
0x8c41:	cmp eax, 0x2b                        
0x8c44:	je 0x8c65                            
0x8c46:	cmp eax, 0x2b                        
0x8c49:	jg 0x8df4                            
0x8c4f:	test eax, eax                        
0x8c51:	je 0x8d4f                            
0x8c57:	cmp eax, 0x2a                        
0x8c5a:	je 0x8dad                            
0x8c60:	jmp 0x8df4                           
0x8c65:	mov rax, qword ptr [rbp - 0xe0]      #			if (cmdln|[|1] == '\0')
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8c6c:	add rax, 1                           
0x8c70:	movzx eax, byte ptr [rax]            
0x8c73:	test al, al                          #			if |(|cmdln[1] == '\0')
0x8c75:	jne 0x8c9f                           
0x8c77:	mov rdx, qword ptr [rip + 0x27c9a]   #			    |p|anel_action(src_panel, act_SELECT_ALL,
MEMORY OFFSET:     0x27c9a     162970  >>162978

0x8c7e:	mov rax, qword ptr [rip + 0x27c8b]   
MEMORY OFFSET:     0x27c8b     162955  >>162963

0x8c85:	mov r8d, 1                           
0x8c8b:	mov ecx, 0                           
0x8c90:	mov esi, 5                           
0x8c95:	mov rdi, rax                         
0x8c98:	call 0x1a89a                         
0x8c9d:	jmp 0x8ccb                           
0x8c9f:	mov rax, qword ptr [rbp - 0xe0]      #			    |p|anel_action(src_panel, act_PATTERN_SELECT,
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8ca6:	lea rcx, [rax + 1]                   #					 dst_panel, cmdln |+| 1, 1);
MEMORY OFFSET:     0x1     1  >>9

0x8caa:	mov rdx, qword ptr [rip + 0x27c67]   #			    |p|anel_action(src_panel, act_PATTERN_SELECT,
MEMORY OFFSET:     0x27c67     162919  >>162927

0x8cb1:	mov rax, qword ptr [rip + 0x27c58]   
MEMORY OFFSET:     0x27c58     162904  >>162912

0x8cb8:	mov r8d, 1                           
0x8cbe:	mov esi, 0x24                        
0x8cc3:	mov rdi, rax                         
0x8cc6:	call 0x1a89a                         
0x8ccb:	mov edi, 0                           #			|i|l_kill_line(IL_DONT_STORE);
0x8cd0:	call 0xed98                          
0x8cd5:	jmp 0x8f3d                           #			|b|reak;
0x8cda:	mov rax, qword ptr [rbp - 0xe0]      #			if (cmdln|[|1] == '\0')
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8ce1:	add rax, 1                           
0x8ce5:	movzx eax, byte ptr [rax]            
0x8ce8:	test al, al                          #			if |(|cmdln[1] == '\0')
0x8cea:	jne 0x8d14                           
0x8cec:	mov rdx, qword ptr [rip + 0x27c25]   #			    |p|anel_action(src_panel, act_UNSELECT_ALL,
MEMORY OFFSET:     0x27c25     162853  >>162861

0x8cf3:	mov rax, qword ptr [rip + 0x27c16]   
MEMORY OFFSET:     0x27c16     162838  >>162846

0x8cfa:	mov r8d, 1                           
0x8d00:	mov ecx, 0                           
0x8d05:	mov esi, 6                           
0x8d0a:	mov rdi, rax                         
0x8d0d:	call 0x1a89a                         
0x8d12:	jmp 0x8d40                           
0x8d14:	mov rax, qword ptr [rbp - 0xe0]      #			    |p|anel_action(src_panel, act_PATTERN_UNSELECT,
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8d1b:	lea rcx, [rax + 1]                   #					 dst_panel, cmdln |+| 1, 1);
MEMORY OFFSET:     0x1     1  >>9

0x8d1f:	mov rdx, qword ptr [rip + 0x27bf2]   #			    |p|anel_action(src_panel, act_PATTERN_UNSELECT,
MEMORY OFFSET:     0x27bf2     162802  >>162810

0x8d26:	mov rax, qword ptr [rip + 0x27be3]   
MEMORY OFFSET:     0x27be3     162787  >>162795

0x8d2d:	mov r8d, 1                           
0x8d33:	mov esi, 0x25                        
0x8d38:	mov rdi, rax                         
0x8d3b:	call 0x1a89a                         
0x8d40:	mov edi, 0                           #			|i|l_kill_line(IL_DONT_STORE);
0x8d45:	call 0xed98                          
0x8d4a:	jmp 0x8f3d                           #			|b|reak;
0x8d4f:	mov rcx, qword ptr [rip + 0x27ba2]   #			action_status = |p|anel_action(src_panel, act_ENTER,
MEMORY OFFSET:     0x27ba2     162722  >>162730

0x8d56:	mov rdx, qword ptr [rip + 0x27bbb]   
MEMORY OFFSET:     0x27bbb     162747  >>162755

0x8d5d:	mov rax, qword ptr [rip + 0x27bac]   
MEMORY OFFSET:     0x27bac     162732  >>162740

0x8d64:	mov r8d, 1                           
0x8d6a:	mov esi, 1                           
0x8d6f:	mov rdi, rax                         
0x8d72:	call 0x1a89a                         
0x8d77:	mov dword ptr [rbp - 0x13c], eax     
MEMORY OFFSET:     -0x13c     -316  >>-308

0x8d7d:	mov rax, qword ptr [rip + 0x27b8c]   #			|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x27b8c     162700  >>162708

0x8d84:	mov rdi, rax                         
0x8d87:	call 0x1504f                         
0x8d8c:	mov rdi, rax                         
0x8d8f:	call 0xd875                          
0x8d94:	mov edi, 0                           #			|i|l_kill_line(IL_DONT_STORE);
0x8d99:	call 0xed98                          
0x8d9e:	mov eax, 0                           #			|s|et_prompt();
0x8da3:	call 0x769b                          
0x8da8:	jmp 0x8f3d                           #			|b|reak;
0x8dad:	mov rax, qword ptr [rbp - 0xe0]      #			if (cmdln|[|1] == '\0')
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8db4:	add rax, 1                           
0x8db8:	movzx eax, byte ptr [rax]            
0x8dbb:	test al, al                          #			if |(|cmdln[1] == '\0')
0x8dbd:	jne 0x8df4                           
0x8dbf:	mov rdx, qword ptr [rip + 0x27b52]   #			    |p|anel_action(src_panel, act_TOGGLE,
MEMORY OFFSET:     0x27b52     162642  >>162650

0x8dc6:	mov rax, qword ptr [rip + 0x27b43]   
MEMORY OFFSET:     0x27b43     162627  >>162635

0x8dcd:	mov r8d, 1                           
0x8dd3:	mov ecx, 0                           
0x8dd8:	mov esi, 7                           
0x8ddd:	mov rdi, rax                         
0x8de0:	call 0x1a89a                         
0x8de5:	mov edi, 0                           #			    |i|l_kill_line(IL_DONT_STORE);
0x8dea:	call 0xed98                          
0x8def:	jmp 0x8f3d                           #			    |b|reak;
0x8df4:	mov rax, qword ptr [rbp - 0xe0]      #			if (|h|istory_expand(cmdln, &output_string) >= 0)
MEMORY OFFSET:     -0xe0     -224  >>-216

0x8dfb:	lea rdx, [rbp - 0xe8]                
MEMORY OFFSET:     -0xe8     -232  >>-224

0x8e02:	mov rsi, rdx                         
0x8e05:	mov rdi, rax                         
0x8e08:	mov eax, 0                           
0x8e0d:	call 0x224f7                         
0x8e12:	test eax, eax                        #			if |(|history_expand(cmdln, &output_string) >= 0)
0x8e14:	js 0x8f23                            
0x8e1a:	mov rax, qword ptr [rbp - 0xe8]      #			    if (|i|s_an_empty_command(output_string))
MEMORY OFFSET:     -0xe8     -232  >>-224

0x8e21:	mov rdi, rax                         
0x8e24:	call 0x1e829                         
0x8e29:	test eax, eax                        #			    if |(|is_an_empty_command(output_string))
0x8e2b:	je 0x8e5c                            
0x8e2d:	mov eax, 0                           #				saved_il = |i|l_save();
0x8e32:	call 0xe205                          
0x8e37:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8e3e:	mov edx, 0x1c                        #				|i|l_read_char("Void command.", (char *)NULL,
0x8e43:	mov esi, 0                           
0x8e48:	lea rax, [rip + 0x1e792]             
MEMORY OFFSET:     0x1e792     124818  >>124826

0x8e4f:	mov rdi, rax                         
0x8e52:	call 0x5c09                          
0x8e57:	jmp 0x8f3d                           #				|b|reak;
0x8e5c:	mov rax, qword ptr [rbp - 0xe8]      #			    bg_cmd = |i|s_a_bg_command(output_string);
MEMORY OFFSET:     -0xe8     -232  >>-224

0x8e63:	mov rdi, rax                         
0x8e66:	call 0x1e7aa                         
0x8e6b:	mov dword ptr [rbp - 0xfc], eax      
MEMORY OFFSET:     -0xfc     -252  >>-244

0x8e71:	cmp dword ptr [rbp - 0xfc], 0        #			    if |(|!bg_cmd)
MEMORY OFFSET:     -0xfc     -252  >>-244

0x8e78:	jne 0x8e89                           
0x8e7a:	mov rax, qword ptr [rbp - 0xe8]      #				|t|ty_update_title(output_string);
MEMORY OFFSET:     -0xe8     -232  >>-224

0x8e81:	mov rdi, rax                         
0x8e84:	call 0xd875                          
0x8e89:	mov edi, 0                           #			    |i|l_kill_line(IL_DONT_STORE);
0x8e8e:	call 0xed98                          
0x8e93:	mov rax, qword ptr [rbp - 0xe8]      #			    |i|l_insert_text(output_string);
MEMORY OFFSET:     -0xe8     -232  >>-224

0x8e9a:	mov rdi, rax                         
0x8e9d:	call 0xf433                          
0x8ea2:	mov rax, qword ptr [rbp - 0xe8]      #			    |s|tart(output_string, bg_cmd);
MEMORY OFFSET:     -0xe8     -232  >>-224

0x8ea9:	mov edx, dword ptr [rbp - 0xfc]      
MEMORY OFFSET:     -0xfc     -252  >>-244

0x8eaf:	mov esi, edx                         
0x8eb1:	mov rdi, rax                         
0x8eb4:	call 0x1f6f0                         
0x8eb9:	mov edi, 0                           #			    |i|l_history(IL_RECORD);
0x8ebe:	call 0xfd26                          
0x8ec3:	mov edi, 0                           #			    |i|l_kill_line(IL_DONT_STORE);
0x8ec8:	call 0xed98                          
0x8ecd:	cmp dword ptr [rbp - 0xfc], 0        #			    if |(|!bg_cmd)
MEMORY OFFSET:     -0xfc     -252  >>-244

0x8ed4:	jne 0x8f3c                           
0x8ed6:	mov rax, qword ptr [rip + 0x27a33]   #				|p|anel_no_optimizations(src_panel);
MEMORY OFFSET:     0x27a33     162355  >>162363

0x8edd:	mov rdi, rax                         
0x8ee0:	call 0x110b0                         
0x8ee5:	mov rax, qword ptr [rip + 0x27a2c]   #				|p|anel_no_optimizations(dst_panel);
MEMORY OFFSET:     0x27a2c     162348  >>162356

0x8eec:	mov rdi, rax                         
0x8eef:	call 0x110b0                         
0x8ef4:	mov eax, 0                           #				|t|ty_touch();
0x8ef9:	call 0xb9ce                          
0x8efe:	mov rax, qword ptr [rip + 0x279f3]   #				|t|ty_get_screen(screen);
MEMORY OFFSET:     0x279f3     162291  >>162299

0x8f05:	mov rdi, rax                         
0x8f08:	call 0xce1e                          
0x8f0d:	mov dword ptr [rbp - 0x13c], 1       #				action_status |=| 1;
MEMORY OFFSET:     -0x13c     -316  >>-308

0x8f17:	mov dword ptr [rip + 0x279c7], 1     #				wait_msg |=| 1;
MEMORY OFFSET:     0x279c7     162247  >>162255

0x8f21:	jmp 0x8f3c                           #			|b|reak;
0x8f23:	mov rax, qword ptr [rbp - 0xe8]      #			    |i|l_read_char(output_string, (char *)NULL,
MEMORY OFFSET:     -0xe8     -232  >>-224

0x8f2a:	mov edx, 0x1c                        
0x8f2f:	mov esi, 0                           
0x8f34:	mov rdi, rax                         
0x8f37:	call 0x5c09                          
0x8f3c:	nop                                  #			|b|reak;
0x8f3d:	mov eax, 0                           #		saved_il = |i|l_save();
0x8f42:	call 0xe205                          
0x8f47:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x8f4e:	cmp dword ptr [rbp - 0x13c], 0       #		if |(|action_status)
MEMORY OFFSET:     -0x13c     -316  >>-308

0x8f55:	je 0xacc2                            
0x8f5b:	jmp 0x82f4                           #		    |g|oto restart;
0x8f60:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
MEMORY OFFSET:     -0x138     -312  >>-304

0x8f6a:	jmp 0x8f99                           #		|f|or (i = 0; i < repeat_count; i++)
0x8f6c:	mov rdx, qword ptr [rip + 0x279a5]   #		    |p|anel_action(src_panel, act_SELECT, dst_panel, NULL, 1);
MEMORY OFFSET:     0x279a5     162213  >>162221

0x8f73:	mov rax, qword ptr [rip + 0x27996]   
MEMORY OFFSET:     0x27996     162198  >>162206

0x8f7a:	mov r8d, 1                           
0x8f80:	mov ecx, 0                           
0x8f85:	mov esi, 4                           
0x8f8a:	mov rdi, rax                         
0x8f8d:	call 0x1a89a                         
0x8f92:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
MEMORY OFFSET:     -0x138     -312  >>-304

0x8f99:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
MEMORY OFFSET:     -0x158     -344  >>-336

0x8f9f:	cmp dword ptr [rbp - 0x138], eax     
MEMORY OFFSET:     -0x138     -312  >>-304

0x8fa5:	jl 0x8f6c                            
0x8fa7:	jmp 0xacc2                           #		|b|reak;
0x8fac:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
MEMORY OFFSET:     -0x138     -312  >>-304

0x8fb6:	jmp 0x8fe5                           #		|f|or (i = 0; i < repeat_count; i++)
0x8fb8:	mov rdx, qword ptr [rip + 0x27959]   #		    |p|anel_action(src_panel, act_PGUP, dst_panel, NULL, 1);
MEMORY OFFSET:     0x27959     162137  >>162145

0x8fbf:	mov rax, qword ptr [rip + 0x2794a]   
MEMORY OFFSET:     0x2794a     162122  >>162130

0x8fc6:	mov r8d, 1                           
0x8fcc:	mov ecx, 0                           
0x8fd1:	mov esi, 0x1d                        
0x8fd6:	mov rdi, rax                         
0x8fd9:	call 0x1a89a                         
0x8fde:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
MEMORY OFFSET:     -0x138     -312  >>-304

0x8fe5:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
MEMORY OFFSET:     -0x158     -344  >>-336

0x8feb:	cmp dword ptr [rbp - 0x138], eax     
MEMORY OFFSET:     -0x138     -312  >>-304

0x8ff1:	jl 0x8fb8                            
0x8ff3:	jmp 0xacc2                           #		|b|reak;
0x8ff8:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
MEMORY OFFSET:     -0x138     -312  >>-304

0x9002:	jmp 0x9031                           #		|f|or (i = 0; i < repeat_count; i++)
0x9004:	mov rdx, qword ptr [rip + 0x2790d]   #		    |p|anel_action(src_panel, act_PGDOWN, dst_panel, NULL, 1);
MEMORY OFFSET:     0x2790d     162061  >>162069

0x900b:	mov rax, qword ptr [rip + 0x278fe]   
MEMORY OFFSET:     0x278fe     162046  >>162054

0x9012:	mov r8d, 1                           
0x9018:	mov ecx, 0                           
0x901d:	mov esi, 0x1e                        
0x9022:	mov rdi, rax                         
0x9025:	call 0x1a89a                         
0x902a:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
MEMORY OFFSET:     -0x138     -312  >>-304

0x9031:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
MEMORY OFFSET:     -0x158     -344  >>-336

0x9037:	cmp dword ptr [rbp - 0x138], eax     
MEMORY OFFSET:     -0x138     -312  >>-304

0x903d:	jl 0x9004                            
0x903f:	jmp 0xacc2                           #		|b|reak;
0x9044:	mov rdx, qword ptr [rip + 0x278cd]   #		|p|anel_action(src_panel, act_HOME, dst_panel, NULL, 1);
MEMORY OFFSET:     0x278cd     161997  >>162005

0x904b:	mov rax, qword ptr [rip + 0x278be]   
MEMORY OFFSET:     0x278be     161982  >>161990

0x9052:	mov r8d, 1                           
0x9058:	mov ecx, 0                           
0x905d:	mov esi, 0x1f                        
0x9062:	mov rdi, rax                         
0x9065:	call 0x1a89a                         
0x906a:	jmp 0xacc2                           #		|b|reak;
0x906f:	mov rdx, qword ptr [rip + 0x278a2]   #		|p|anel_action(src_panel, act_END, dst_panel, NULL, 1);
MEMORY OFFSET:     0x278a2     161954  >>161962

0x9076:	mov rax, qword ptr [rip + 0x27893]   
MEMORY OFFSET:     0x27893     161939  >>161947

0x907d:	mov r8d, 1                           
0x9083:	mov ecx, 0                           
0x9088:	mov esi, 0x20                        
0x908d:	mov rdi, rax                         
0x9090:	call 0x1a89a                         
0x9095:	jmp 0xacc2                           #		|b|reak;
0x909a:	mov eax, 0                           #		|r|eread();
0x909f:	call 0x772c                          
0x90a4:	mov rax, qword ptr [rip + 0x27865]   #		|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x27865     161893  >>161901

0x90ab:	mov rdi, rax                         
0x90ae:	call 0x1504f                         
0x90b3:	mov rdi, rax                         
0x90b6:	call 0xd875                          
0x90bb:	mov edi, 0                           #		|r|efresh(0);
0x90c0:	mov eax, 0                           
0x90c5:	call 0x5367                          
0x90ca:	jmp 0xacc2                           #		|b|reak;
0x90cf:	mov eax, dword ptr [rbp - 0x158]     #		if ((repeat_count |&| 1) == 0)
MEMORY OFFSET:     -0x158     -344  >>-336

0x90d5:	and eax, 1                           
0x90d8:	test eax, eax                        #		if |(|(repeat_count & 1) == 0)
0x90da:	jne 0x90e1                           
0x90dc:	jmp 0xacc2                           #		    |b|reak;
0x90e1:	mov edi, 0                           #		|a|larm(0);
0x90e6:	call 0x4a60                          
0x90eb:	mov rax, qword ptr [rip + 0x27806]   #		|t|ty_put_screen(screen);
MEMORY OFFSET:     0x27806     161798  >>161806

0x90f2:	mov rdi, rax                         
0x90f5:	call 0xce57                          
0x90fa:	mov rax, qword ptr [rip + 0x25f87]   #		|s|tatus(CommandLineModeHelp, STATUS_OK, STATUS_CENTERED);
MEMORY OFFSET:     0x25f87     155527  >>155535

0x9101:	mov edx, 0                           
0x9106:	mov esi, 0                           
0x910b:	mov rdi, rax                         
0x910e:	call 0x107d0                         
0x9113:	mov eax, 0                           #		|t|ty_update();
0x9118:	call 0xb4b7                          
0x911d:	mov rax, qword ptr [rbp - 0xc0]      #		    |i|l_restore(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9124:	mov rdi, rax                         
0x9127:	call 0xe319                          
0x912c:	mov eax, 0                           #		    saved_il = |i|l_save();
0x9131:	call 0xe205                          
0x9136:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x913d:	mov eax, 0                           #		    |i|l_update();
0x9142:	call 0xf8eb                          
0x9147:	mov eax, 0                           #		    |i|l_update_point();
0x914c:	call 0xf768                          
0x9151:	mov eax, 0                           #		    |t|ty_update();
0x9156:	call 0xb4b7                          
0x915b:	lea rax, [rbp - 0xe0]                #		    |i|l_get_contents(&cmdln);
MEMORY OFFSET:     -0xe0     -224  >>-216

0x9162:	mov rdi, rax                         
0x9165:	call 0xfc3f                          
0x916a:	mov dword ptr [rip + 0x2776c], 1     #		    current_mode |=| GIT_TERMINAL_MODE;
MEMORY OFFSET:     0x2776c     161644  >>161652

0x9174:	jmp 0x918a                           #		    while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x9176:	mov rax, qword ptr [rip + 0x25f0b]   #			|r|eport_undefined_key(CommandLineModeHelp);
MEMORY OFFSET:     0x25f0b     155403  >>155411

0x917d:	mov rdi, rax                         
0x9180:	mov eax, 0                           
0x9185:	call 0x54a2                          
0x918a:	lea rax, [rbp - 0x158]               #		    while ((ks = |t|ty_get_key(&repeat_count)) == NULL)
MEMORY OFFSET:     -0x158     -344  >>-336

0x9191:	mov rdi, rax                         
0x9194:	call 0xc5ba                          
0x9199:	mov qword ptr [rbp - 0x78], rax      
MEMORY OFFSET:     -0x78     -120  >>-112

0x919d:	cmp qword ptr [rbp - 0x78], 0        #		    while ((ks = tty_get_key(&repeat_count)) |=|= NULL)
MEMORY OFFSET:     -0x78     -120  >>-112

0x91a2:	je 0x9176                            
0x91a4:	mov rax, qword ptr [rbp - 0x78]      #		    key = ks|-|>key_seq[0];
MEMORY OFFSET:     -0x78     -120  >>-112

0x91a8:	mov rax, qword ptr [rax]             
0x91ab:	movzx eax, byte ptr [rax]            #		    key = ks->key_seq|[|0];
0x91ae:	movzx eax, al                        #		    key |=| ks->key_seq[0];
0x91b1:	mov dword ptr [rbp - 0x12c], eax     
MEMORY OFFSET:     -0x12c     -300  >>-292

0x91b7:	mov rax, qword ptr [rbp - 0x78]      #		    command |=| (command_t *)ks->aux_data;
MEMORY OFFSET:     -0x78     -120  >>-112

0x91bb:	mov rax, qword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0x91bf:	mov qword ptr [rbp - 0x70], rax      
MEMORY OFFSET:     -0x70     -112  >>-104

0x91c3:	cmp qword ptr [rbp - 0x70], 0        #		    if |(|command && command->builtin)
MEMORY OFFSET:     -0x70     -112  >>-104

0x91c8:	je 0x9212                            
0x91ca:	mov rax, qword ptr [rbp - 0x70]      #		    if (command && command|-|>builtin)
MEMORY OFFSET:     -0x70     -112  >>-104

0x91ce:	movzx eax, byte ptr [rax + 0x1b]     
MEMORY OFFSET:     0x1b     27  >>35

0x91d2:	test al, al                          #		    if (command |&|& command->builtin)
0x91d4:	je 0x9212                            
0x91d6:	mov rax, qword ptr [rbp - 0x70]      #			key = - 1 - (command|-|>name - builtin[0]) /
MEMORY OFFSET:     -0x70     -112  >>-104

0x91da:	mov rax, qword ptr [rax]             
0x91dd:	lea rdx, [rip + 0x25ebc]             #			key = - 1 - (command->name |-| builtin[0]) /
MEMORY OFFSET:     0x25ebc     155324  >>155332

0x91e4:	sub rax, rdx                         
0x91e7:	mov rcx, rax                         
0x91ea:	movabs rdx, 0xea0ea0ea0ea0ea1        #			key = - 1 - (command->name - builtin[0]) |/|
0x91f4:	mov rax, rcx                         
0x91f7:	imul rdx                             
0x91fa:	mov rax, rdx                         
0x91fd:	sar rax, 1                           
0x9200:	sar rcx, 0x3f                        
0x9204:	mov rdx, rcx                         
0x9207:	sub rax, rdx                         
0x920a:	not eax                              #			key |=| - 1 - (command->name - builtin[0]) /
0x920c:	mov dword ptr [rbp - 0x12c], eax     
MEMORY OFFSET:     -0x12c     -300  >>-292

0x9212:	cmp dword ptr [rbp - 0x12c], -7      #		    if |(|key == BUILTIN_tty_mode && (repeat_count & 1))
MEMORY OFFSET:     -0x12c     -300  >>-292

0x9219:	jne 0x924d                           
0x921b:	mov eax, dword ptr [rbp - 0x158]     #		    if (key == BUILTIN_tty_mode && (repeat_count |&| 1))
MEMORY OFFSET:     -0x158     -344  >>-336

0x9221:	and eax, 1                           
0x9224:	test eax, eax                        #		    if (key == BUILTIN_tty_mode |&|& (repeat_count & 1))
0x9226:	je 0x924d                            
0x9228:	mov rax, qword ptr [rbp - 0xc0]      #			|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x922f:	mov rdi, rax                         
0x9232:	call 0xdf09                          
0x9237:	mov eax, 0                           #			saved_il = |i|l_save();
0x923c:	call 0xe205                          
0x9241:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9248:	jmp 0x95d4                           #			|b|reak;
0x924d:	cmp dword ptr [rbp - 0x12c], -0x3d   
MEMORY OFFSET:     -0x12c     -300  >>-292

0x9254:	je 0x92e5                            
0x925a:	cmp dword ptr [rbp - 0x12c], -0x3d   
MEMORY OFFSET:     -0x12c     -300  >>-292

0x9261:	jl 0x956f                            
0x9267:	cmp dword ptr [rbp - 0x12c], 7       
MEMORY OFFSET:     -0x12c     -300  >>-292

0x926e:	jg 0x956f                            
0x9274:	cmp dword ptr [rbp - 0x12c], -0x22   
MEMORY OFFSET:     -0x12c     -300  >>-292

0x927b:	jl 0x956f                            
0x9281:	mov eax, dword ptr [rbp - 0x12c]     
MEMORY OFFSET:     -0x12c     -300  >>-292

0x9287:	add eax, 0x22                        
0x928a:	cmp eax, 0x29                        
0x928d:	ja 0x956f                            
0x9293:	mov eax, eax                         
0x9295:	lea rdx, [rax*4]                     
0x929d:	lea rax, [rip + 0x1e8b0]             
MEMORY OFFSET:     0x1e8b0     125104  >>125112

0x92a4:	mov eax, dword ptr [rdx + rax]       
0x92a7:	cdqe                                 
0x92a9:	lea rdx, [rip + 0x1e8a4]             
MEMORY OFFSET:     0x1e8a4     125092  >>125100

0x92b0:	add rax, rdx                         
0x92b3:	jmp rax                              
0x92b6:	mov rax, qword ptr [rbp - 0xc0]      #			    |i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x92bd:	mov rdi, rax                         
0x92c0:	call 0xdf09                          
0x92c5:	mov edi, 0                           #			    |i|l_kill_line(IL_DONT_STORE);
0x92ca:	call 0xed98                          
0x92cf:	mov eax, 0                           #			    saved_il = |i|l_save();
0x92d4:	call 0xe205                          
0x92d9:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x92e0:	jmp 0x95c5                           #			    |b|reak;
0x92e5:	mov rax, qword ptr [rbp - 0xe0]      #			    if (cmdln|[|0])
MEMORY OFFSET:     -0xe0     -224  >>-216

0x92ec:	movzx eax, byte ptr [rax]            
0x92ef:	test al, al                          #			    if |(|cmdln[0])
0x92f1:	je 0x95c1                            
0x92f7:	mov rax, qword ptr [rbp - 0xc0]      #				|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x92fe:	mov rdi, rax                         
0x9301:	call 0xdf09                          
0x9306:	mov rax, qword ptr [rbp - 0xe0]      #				if (|h|istory_expand(cmdln, &output_string) < 0)
MEMORY OFFSET:     -0xe0     -224  >>-216

0x930d:	lea rdx, [rbp - 0xe8]                
MEMORY OFFSET:     -0xe8     -232  >>-224

0x9314:	mov rsi, rdx                         
0x9317:	mov rdi, rax                         
0x931a:	mov eax, 0                           
0x931f:	call 0x224f7                         
0x9324:	test eax, eax                        #				if |(|history_expand(cmdln, &output_string) < 0)
0x9326:	jns 0x9357                           
0x9328:	mov rax, qword ptr [rbp - 0xe8]      #				    |i|l_read_char(output_string, (char *)NULL,
MEMORY OFFSET:     -0xe8     -232  >>-224

0x932f:	mov edx, 0x1c                        
0x9334:	mov esi, 0                           
0x9339:	mov rdi, rax                         
0x933c:	call 0x5c09                          
0x9341:	mov eax, 0                           #				    saved_il = |i|l_save();
0x9346:	call 0xe205                          
0x934b:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9352:	jmp 0x95c5                           #				    |b|reak;
0x9357:	mov rax, qword ptr [rip + 0x2759a]   #				|t|ty_put_screen(screen);
MEMORY OFFSET:     0x2759a     161178  >>161186

0x935e:	mov rdi, rax                         
0x9361:	call 0xce57                          
0x9366:	mov edi, 0                           #				|i|l_kill_line(IL_DONT_STORE);
0x936b:	call 0xed98                          
0x9370:	mov rax, qword ptr [rbp - 0xe8]      #				|i|l_insert_text(output_string);
MEMORY OFFSET:     -0xe8     -232  >>-224

0x9377:	mov rdi, rax                         
0x937a:	call 0xf433                          
0x937f:	mov rax, qword ptr [rbp - 0xe8]      #				|t|ty_update_title(output_string);
MEMORY OFFSET:     -0xe8     -232  >>-224

0x9386:	mov rdi, rax                         
0x9389:	call 0xd875                          
0x938e:	mov rax, qword ptr [rbp - 0xe8]      #				|s|tart(output_string, 0);
MEMORY OFFSET:     -0xe8     -232  >>-224

0x9395:	mov esi, 0                           
0x939a:	mov rdi, rax                         
0x939d:	call 0x1f6f0                         
0x93a2:	mov rax, qword ptr [rip + 0x2754f]   #				|t|ty_get_screen(screen);
MEMORY OFFSET:     0x2754f     161103  >>161111

0x93a9:	mov rdi, rax                         
0x93ac:	call 0xce1e                          
0x93b1:	mov edi, 0                           #				|i|l_history(IL_RECORD);
0x93b6:	call 0xfd26                          
0x93bb:	mov rax, qword ptr [rip + 0x25cc6]   #				|s|tatus(CommandLineModeHelp,
MEMORY OFFSET:     0x25cc6     154822  >>154830

0x93c2:	mov edx, 0                           
0x93c7:	mov esi, 0                           
0x93cc:	mov rdi, rax                         
0x93cf:	call 0x107d0                         
0x93d4:	mov edi, 0                           #				|i|l_kill_line(IL_DONT_STORE);
0x93d9:	call 0xed98                          
0x93de:	mov eax, 0                           #				saved_il = |i|l_save();
0x93e3:	call 0xe205                          
0x93e8:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x93ef:	mov rax, qword ptr [rip + 0x2751a]   #				|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x2751a     161050  >>161058

0x93f6:	mov rdi, rax                         
0x93f9:	call 0x1504f                         
0x93fe:	mov rdi, rax                         
0x9401:	call 0xd875                          
0x9406:	mov eax, 0                           #				|t|ty_update();
0x940b:	call 0xb4b7                          
0x9410:	jmp 0x95c1                           #			    |b|reak;
0x9415:	mov rax, qword ptr [rbp - 0xc0]      #			    |i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x941c:	mov rdi, rax                         
0x941f:	call 0xdf09                          
0x9424:	mov dword ptr [rbp - 0x138], 0       #			    for (i |=| 0; i < repeat_count; i++)
MEMORY OFFSET:     -0x138     -312  >>-304

0x942e:	jmp 0x944b                           #			    |f|or (i = 0; i < repeat_count; i++)
0x9430:	mov edi, 1                           #				|i|l_history(IL_PREVIOUS);
0x9435:	call 0xfd26                          
0x943a:	mov eax, 0                           #				|t|ty_update();
0x943f:	call 0xb4b7                          
0x9444:	add dword ptr [rbp - 0x138], 1       #			    for (i = 0; i < repeat_count; i|+|+)
MEMORY OFFSET:     -0x138     -312  >>-304

0x944b:	mov eax, dword ptr [rbp - 0x158]     #			    for (i = 0; i |<| repeat_count; i++)
MEMORY OFFSET:     -0x158     -344  >>-336

0x9451:	cmp dword ptr [rbp - 0x138], eax     
MEMORY OFFSET:     -0x138     -312  >>-304

0x9457:	jl 0x9430                            
0x9459:	mov eax, 0                           #			    saved_il = |i|l_save();
0x945e:	call 0xe205                          
0x9463:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x946a:	jmp 0x95c5                           #			    |b|reak;
0x946f:	mov rax, qword ptr [rbp - 0xc0]      #			    |i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9476:	mov rdi, rax                         
0x9479:	call 0xdf09                          
0x947e:	mov dword ptr [rbp - 0x138], 0       #			    for (i |=| 0; i < repeat_count; i++)
MEMORY OFFSET:     -0x138     -312  >>-304

0x9488:	jmp 0x94a5                           #			    |f|or (i = 0; i < repeat_count; i++)
0x948a:	mov edi, 2                           #				|i|l_history(IL_NEXT);
0x948f:	call 0xfd26                          
0x9494:	mov eax, 0                           #				|t|ty_update();
0x9499:	call 0xb4b7                          
0x949e:	add dword ptr [rbp - 0x138], 1       #			    for (i = 0; i < repeat_count; i|+|+)
MEMORY OFFSET:     -0x138     -312  >>-304

0x94a5:	mov eax, dword ptr [rbp - 0x158]     #			    for (i = 0; i |<| repeat_count; i++)
MEMORY OFFSET:     -0x158     -344  >>-336

0x94ab:	cmp dword ptr [rbp - 0x138], eax     
MEMORY OFFSET:     -0x138     -312  >>-304

0x94b1:	jl 0x948a                            
0x94b3:	mov eax, 0                           #			    saved_il = |i|l_save();
0x94b8:	call 0xe205                          
0x94bd:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x94c4:	jmp 0x95c5                           #			    |b|reak;
0x94c9:	mov edi, 0                           #			    |r|efresh(0);
0x94ce:	mov eax, 0                           
0x94d3:	call 0x5367                          
0x94d8:	mov rax, qword ptr [rip + 0x27419]   #			    |t|ty_put_screen(screen);
MEMORY OFFSET:     0x27419     160793  >>160801

0x94df:	mov rdi, rax                         
0x94e2:	call 0xce57                          
0x94e7:	mov rax, qword ptr [rip + 0x25b9a]   #			    |s|tatus(CommandLineModeHelp,
MEMORY OFFSET:     0x25b9a     154522  >>154530

0x94ee:	mov edx, 0                           
0x94f3:	mov esi, 0                           
0x94f8:	mov rdi, rax                         
0x94fb:	call 0x107d0                         
0x9500:	mov eax, 0                           #			    |t|ty_update();
0x9505:	call 0xb4b7                          
0x950a:	jmp 0x95c5                           #			    |b|reak;
0x950f:	mov eax, dword ptr [rip + 0x27413]   #			    if (ConfirmOnExit |=|= OFF ||
MEMORY OFFSET:     0x27413     160787  >>160795

0x9515:	test eax, eax                        #			    if |(|ConfirmOnExit == OFF ||
0x9517:	je 0x953b                            
0x9519:	mov rax, qword ptr [rip + 0x273d0]   #				|i|l_read_char(exit_msg,"yn",IL_FREEZED) == 'y')
MEMORY OFFSET:     0x273d0     160720  >>160728

0x9520:	mov edx, 0                           
0x9525:	lea rcx, [rip + 0x1dc6d]             
MEMORY OFFSET:     0x1dc6d     121965  >>121973

0x952c:	mov rsi, rcx                         
0x952f:	mov rdi, rax                         
0x9532:	call 0x5c09                          
0x9537:	cmp al, 0x79                         #			    if (ConfirmOnExit == OFF ||||
0x9539:	jne 0x954a                           
0x953b:	mov dword ptr [rbp - 0x128], 1       #				app_end |=| 1;
MEMORY OFFSET:     -0x128     -296  >>-288

0x9545:	jmp 0x95d4                           #				|g|oto end_tty_mode;
0x954a:	mov rax, qword ptr [rip + 0x25b37]   #			    |s|tatus(CommandLineModeHelp,
MEMORY OFFSET:     0x25b37     154423  >>154431

0x9551:	mov edx, 0                           
0x9556:	mov esi, 0                           
0x955b:	mov rdi, rax                         
0x955e:	call 0x107d0                         
0x9563:	mov eax, 0                           #			    |t|ty_update();
0x9568:	call 0xb4b7                          
0x956d:	jmp 0x95c5                           #			    |b|reak;
0x956f:	cmp dword ptr [rbp - 0x12c], 0       #			    if |(|key)
MEMORY OFFSET:     -0x12c     -300  >>-292

0x9576:	je 0x95c4                            
0x9578:	mov rax, qword ptr [rbp - 0xc0]      #				|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x957f:	mov rdi, rax                         
0x9582:	call 0xdf09                          
0x9587:	jmp 0x959b                           #				while |(|repeat_count--)
0x9589:	mov eax, dword ptr [rbp - 0x12c]     #				    |i|l_dispatch_commands(key, IL_MOVE|IL_EDIT);
MEMORY OFFSET:     -0x12c     -300  >>-292

0x958f:	mov esi, 3                           
0x9594:	mov edi, eax                         
0x9596:	call 0x56bd                          
0x959b:	mov eax, dword ptr [rbp - 0x158]     #				while (repeat_count|-|-)
MEMORY OFFSET:     -0x158     -344  >>-336

0x95a1:	lea edx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0x95a4:	mov dword ptr [rbp - 0x158], edx     
MEMORY OFFSET:     -0x158     -344  >>-336

0x95aa:	test eax, eax                        #				while (|r|epeat_count--)
0x95ac:	jne 0x9589                           
0x95ae:	mov eax, 0                           #				saved_il = |i|l_save();
0x95b3:	call 0xe205                          
0x95b8:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x95bf:	jmp 0x95c4                           #			    |b|reak;
0x95c1:	nop                                  #			    |b|reak;
0x95c2:	jmp 0x95c5                           
0x95c4:	nop                                  #			    |b|reak;
0x95c5:	mov eax, 0                           #		    |s|tatus_update();
0x95ca:	call 0x106d4                         
0x95cf:	jmp 0x911d                           #		    |i|l_restore(saved_il);
0x95d4:	mov rax, qword ptr [rip + 0x27335]   #		|p|anel_no_optimizations(src_panel);
MEMORY OFFSET:     0x27335     160565  >>160573

0x95db:	mov rdi, rax                         
0x95de:	call 0x110b0                         
0x95e3:	mov rax, qword ptr [rip + 0x2732e]   #		|p|anel_no_optimizations(dst_panel);
MEMORY OFFSET:     0x2732e     160558  >>160566

0x95ea:	mov rdi, rax                         
0x95ed:	call 0x110b0                         
0x95f2:	mov eax, 0                           #		|t|ty_touch();
0x95f7:	call 0xb9ce                          
0x95fc:	mov eax, 0                           #		|s|tatus_default();
0x9601:	call 0x10857                         
0x9606:	mov eax, 0                           #		|t|ty_update();
0x960b:	call 0xb4b7                          
0x9610:	mov eax, 0                           #		alarm(60 - |g|et_local_time()->tm_sec);
0x9615:	call 0x1e4bf                         
0x961a:	mov edx, dword ptr [rax]             #		alarm(60 - get_local_time()|-|>tm_sec);
0x961c:	mov eax, 0x3c                        #		alarm(60 |-| get_local_time()->tm_sec);
0x9621:	sub eax, edx                         
0x9623:	mov edi, eax                         #		|a|larm(60 - get_local_time()->tm_sec);
0x9625:	call 0x4a60                          
0x962a:	mov dword ptr [rip + 0x272ac], 0     #		current_mode |=| GIT_SCREEN_MODE;
MEMORY OFFSET:     0x272ac     160428  >>160436

0x9634:	cmp dword ptr [rbp - 0x128], 0       #		if |(|app_end)
MEMORY OFFSET:     -0x128     -296  >>-288

0x963b:	je 0x82f4                            
0x9641:	jmp 0xacc2                           #		    |c|ontinue;
0x9646:	mov rdx, qword ptr [rip + 0x272cb]   #		|p|anel_action(src_panel, act_COPY, dst_panel, NULL, 1);
MEMORY OFFSET:     0x272cb     160459  >>160467

0x964d:	mov rax, qword ptr [rip + 0x272bc]   
MEMORY OFFSET:     0x272bc     160444  >>160452

0x9654:	mov r8d, 1                           
0x965a:	mov ecx, 0                           
0x965f:	mov esi, 2                           
0x9664:	mov rdi, rax                         
0x9667:	call 0x1a89a                         
0x966c:	jmp 0xacc2                           #		|b|reak;
0x9671:	mov rdx, qword ptr [rip + 0x272a0]   #		|p|anel_action(src_panel, act_MOVE, dst_panel, NULL, 1);
MEMORY OFFSET:     0x272a0     160416  >>160424

0x9678:	mov rax, qword ptr [rip + 0x27291]   
MEMORY OFFSET:     0x27291     160401  >>160409

0x967f:	mov r8d, 1                           
0x9685:	mov ecx, 0                           
0x968a:	mov esi, 0x1a                        
0x968f:	mov rdi, rax                         
0x9692:	call 0x1a89a                         
0x9697:	jmp 0xacc2                           #		|b|reak;
0x969c:	mov rdx, qword ptr [rip + 0x27275]   #		|p|anel_action(src_panel, act_MKDIR, dst_panel, NULL, 1);
MEMORY OFFSET:     0x27275     160373  >>160381

0x96a3:	mov rax, qword ptr [rip + 0x27266]   
MEMORY OFFSET:     0x27266     160358  >>160366

0x96aa:	mov r8d, 1                           
0x96b0:	mov ecx, 0                           
0x96b5:	mov esi, 0x19                        
0x96ba:	mov rdi, rax                         
0x96bd:	call 0x1a89a                         
0x96c2:	jmp 0xacc2                           #		|b|reak;
0x96c7:	mov rdx, qword ptr [rip + 0x2724a]   #		|p|anel_action(src_panel, act_DELETE, dst_panel, NULL, 1);
MEMORY OFFSET:     0x2724a     160330  >>160338

0x96ce:	mov rax, qword ptr [rip + 0x2723b]   
MEMORY OFFSET:     0x2723b     160315  >>160323

0x96d5:	mov r8d, 1                           
0x96db:	mov ecx, 0                           
0x96e0:	mov esi, 3                           
0x96e5:	mov rdi, rax                         
0x96e8:	call 0x1a89a                         
0x96ed:	jmp 0xacc2                           #		|b|reak;
0x96f2:	mov eax, 0xfffffffd                  #		|p|anel_action(src_panel,
0x96f7:	sub eax, dword ptr [rbp - 0x12c]     
MEMORY OFFSET:     -0x12c     -300  >>-292

0x96fd:	mov esi, eax                         
0x96ff:	mov rax, qword ptr [rip + 0x2720a]   
MEMORY OFFSET:     0x2720a     160266  >>160274

0x9706:	mov r8d, 1                           
0x970c:	mov ecx, 0                           
0x9711:	mov edx, 0                           
0x9716:	mov rdi, rax                         
0x9719:	call 0x1a89a                         
0x971e:	jmp 0xacc2                           #		|b|reak;
0x9723:	mov eax, 0xfffffffe                  #		|p|anel_action(src_panel,
0x9728:	sub eax, dword ptr [rbp - 0x12c]     
MEMORY OFFSET:     -0x12c     -300  >>-292

0x972e:	mov esi, eax                         
0x9730:	mov rax, qword ptr [rip + 0x271d9]   
MEMORY OFFSET:     0x271d9     160217  >>160225

0x9737:	mov r8d, 1                           
0x973d:	mov ecx, 0                           
0x9742:	mov edx, 0                           
0x9747:	mov rdi, rax                         
0x974a:	call 0x1a89a                         
0x974f:	jmp 0xacc2                           #		|b|reak;
0x9754:	mov eax, dword ptr [rip + 0x271ce]   #		if (ConfirmOnExit |=|= OFF ||
MEMORY OFFSET:     0x271ce     160206  >>160214

0x975a:	test eax, eax                        #		if |(|ConfirmOnExit == OFF ||
0x975c:	je 0x9784                            
0x975e:	mov rax, qword ptr [rip + 0x2718b]   #		    |i|l_read_char(exit_msg, "yn", IL_FREEZED) == 'y')
MEMORY OFFSET:     0x2718b     160139  >>160147

0x9765:	mov edx, 0                           
0x976a:	lea rcx, [rip + 0x1da28]             
MEMORY OFFSET:     0x1da28     121384  >>121392

0x9771:	mov rsi, rcx                         
0x9774:	mov rdi, rax                         
0x9777:	call 0x5c09                          
0x977c:	cmp al, 0x79                         #		if (ConfirmOnExit == OFF ||||
0x977e:	jne 0xacc2                           
0x9784:	mov dword ptr [rbp - 0x128], 1       #		    app_end |=| 1;
MEMORY OFFSET:     -0x128     -296  >>-288

0x978e:	jmp 0xacc2                           #		|b|reak;
0x9793:	mov rax, qword ptr [rip + 0x27176]   #		srcptr = |p|anel_get_current_file_name(src_panel);
MEMORY OFFSET:     0x27176     160118  >>160126

0x979a:	mov rdi, rax                         
0x979d:	call 0x110ca                         
0x97a2:	mov qword ptr [rbp - 0x98], rax      
MEMORY OFFSET:     -0x98     -152  >>-144

0x97a9:	mov rax, qword ptr [rbp - 0x98]      #		ptr = xmalloc(1 + 1 + |s|trlen(srcptr) + 1 + 1 + 1);
MEMORY OFFSET:     -0x98     -152  >>-144

0x97b0:	mov rdi, rax                         
0x97b3:	call 0x4960                          
0x97b8:	add rax, 5                           #		ptr = |x|malloc(1 + 1 + strlen(srcptr) + 1 + 1 + 1);
0x97bc:	mov rdi, rax                         
0x97bf:	call 0x24650                         
0x97c4:	mov qword ptr [rbp - 0xa0], rax      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x97cb:	mov rax, qword ptr [rbp - 0xe0]      #		len = |s|trlen(cmdln);
MEMORY OFFSET:     -0xe0     -224  >>-216

0x97d2:	mov rdi, rax                         
0x97d5:	call 0x4960                          
0x97da:	mov qword ptr [rbp - 0xd0], rax      
MEMORY OFFSET:     -0xd0     -208  >>-200

0x97e1:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x97e8:	mov rdi, rax                         
0x97eb:	call 0xdf09                          
0x97f0:	cmp qword ptr [rbp - 0xd0], 0        #		if |(|(len != 0) &&
MEMORY OFFSET:     -0xd0     -208  >>-200

0x97f8:	je 0x98b5                            
0x97fe:	mov rbx, qword ptr [rbp - 0xe0]      #		    ((cmdln|[|il_point() - 1] == '/') ||
MEMORY OFFSET:     -0xe0     -224  >>-216

0x9805:	mov eax, 0                           #		    ((cmdln[|i|l_point() - 1] == '/') ||
0x980a:	call 0xe380                          
0x980f:	sub rax, 1                           #		    ((cmdln|[|il_point() - 1] == '/') ||
0x9813:	add rax, rbx                         
0x9816:	movzx eax, byte ptr [rax]            
0x9819:	cmp al, 0x2f                         #		if ((len != 0) |&|&
0x981b:	je 0x983c                            
0x981d:	mov rbx, qword ptr [rbp - 0xe0]      #		     (cmdln|[|il_point() - 1] == ' ')))
MEMORY OFFSET:     -0xe0     -224  >>-216

0x9824:	mov eax, 0                           #		     (cmdln[|i|l_point() - 1] == ' ')))
0x9829:	call 0xe380                          
0x982e:	sub rax, 1                           #		     (cmdln|[|il_point() - 1] == ' ')))
0x9832:	add rax, rbx                         
0x9835:	movzx eax, byte ptr [rax]            
0x9838:	cmp al, 0x20                         #		    ((cmdln[il_point() - 1] == '/') ||||
0x983a:	jne 0x98b5                           
0x983c:	mov rax, qword ptr [rbp - 0x98]      #		    if (|n|eeds_quotes(srcptr, strlen(srcptr)))
MEMORY OFFSET:     -0x98     -152  >>-144

0x9843:	mov rdi, rax                         
0x9846:	call 0x4960                          
0x984b:	mov rdx, rax                         
0x984e:	mov rax, qword ptr [rbp - 0x98]      
MEMORY OFFSET:     -0x98     -152  >>-144

0x9855:	mov rsi, rdx                         
0x9858:	mov rdi, rax                         
0x985b:	call 0x1e61f                         
0x9860:	test eax, eax                        #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x9862:	je 0x988e                            
0x9864:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, "\"%s\" ", srcptr);
MEMORY OFFSET:     -0x98     -152  >>-144

0x986b:	mov rax, qword ptr [rbp - 0xa0]      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9872:	lea rcx, [rip + 0x1dd76]             
MEMORY OFFSET:     0x1dd76     122230  >>122238

0x9879:	mov rsi, rcx                         
0x987c:	mov rdi, rax                         
0x987f:	mov eax, 0                           
0x9884:	call 0x4dd0                          
0x9889:	jmp 0x9929                           #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x988e:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, "%s ", srcptr);
MEMORY OFFSET:     -0x98     -152  >>-144

0x9895:	mov rax, qword ptr [rbp - 0xa0]      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x989c:	lea rcx, [rip + 0x1dd52]             
MEMORY OFFSET:     0x1dd52     122194  >>122202

0x98a3:	mov rsi, rcx                         
0x98a6:	mov rdi, rax                         
0x98a9:	mov eax, 0                           
0x98ae:	call 0x4dd0                          
0x98b3:	jmp 0x9929                           #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x98b5:	mov rax, qword ptr [rbp - 0x98]      #		    if (|n|eeds_quotes(srcptr, strlen(srcptr)))
MEMORY OFFSET:     -0x98     -152  >>-144

0x98bc:	mov rdi, rax                         
0x98bf:	call 0x4960                          
0x98c4:	mov rdx, rax                         
0x98c7:	mov rax, qword ptr [rbp - 0x98]      
MEMORY OFFSET:     -0x98     -152  >>-144

0x98ce:	mov rsi, rdx                         
0x98d1:	mov rdi, rax                         
0x98d4:	call 0x1e61f                         
0x98d9:	test eax, eax                        #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x98db:	je 0x9904                            
0x98dd:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, " \"%s\" ", srcptr);
MEMORY OFFSET:     -0x98     -152  >>-144

0x98e4:	mov rax, qword ptr [rbp - 0xa0]      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x98eb:	lea rcx, [rip + 0x1dd07]             
MEMORY OFFSET:     0x1dd07     122119  >>122127

0x98f2:	mov rsi, rcx                         
0x98f5:	mov rdi, rax                         
0x98f8:	mov eax, 0                           
0x98fd:	call 0x4dd0                          
0x9902:	jmp 0x9929                           
0x9904:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, " %s ", srcptr);
MEMORY OFFSET:     -0x98     -152  >>-144

0x990b:	mov rax, qword ptr [rbp - 0xa0]      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9912:	lea rcx, [rip + 0x1dce7]             
MEMORY OFFSET:     0x1dce7     122087  >>122095

0x9919:	mov rsi, rcx                         
0x991c:	mov rdi, rax                         
0x991f:	mov eax, 0                           
0x9924:	call 0x4dd0                          
0x9929:	mov rax, qword ptr [rbp - 0xa0]      #		ptrlen = |s|trlen(ptr);
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9930:	mov rdi, rax                         
0x9933:	call 0x4960                          
0x9938:	mov qword ptr [rbp - 0x38], rax      
MEMORY OFFSET:     -0x38     -56  >>-48

0x993c:	mov rax, qword ptr [rbp - 0xa0]      #		|t|oprintable(ptr, strlen(ptr));
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9943:	mov rdi, rax                         
0x9946:	call 0x4960                          
0x994b:	mov rdx, rax                         
0x994e:	mov rax, qword ptr [rbp - 0xa0]      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9955:	mov rsi, rdx                         
0x9958:	mov rdi, rax                         
0x995b:	call 0x1e5b1                         
0x9960:	mov rax, qword ptr [rbp - 0xa0]      #		|i|l_insert_text(ptr);
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9967:	mov rdi, rax                         
0x996a:	call 0xf433                          
0x996f:	mov rax, qword ptr [rbp - 0xa0]      #		|x|free(ptr);
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9976:	mov rdi, rax                         
0x9979:	call 0x1eeae                         
0x997e:	mov eax, 0                           #		saved_il = |i|l_save();
0x9983:	call 0xe205                          
0x9988:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x998f:	jmp 0xacc2                           #		|b|reak;
0x9994:	mov rax, qword ptr [rip + 0x26f7d]   #		srcptr = dst_panel|-|>path;
MEMORY OFFSET:     0x26f7d     159613  >>159621

0x999b:	mov rax, qword ptr [rax + 0x18]      #		srcptr |=| dst_panel->path;
MEMORY OFFSET:     0x18     24  >>32

0x999f:	mov qword ptr [rbp - 0x98], rax      
MEMORY OFFSET:     -0x98     -152  >>-144

0x99a6:	mov rax, qword ptr [rip + 0x26f6b]   #		ptr = xmalloc(1 + 1 + dst_panel|-|>pathlen + 1 + 1 + 1);
MEMORY OFFSET:     0x26f6b     159595  >>159603

0x99ad:	mov rax, qword ptr [rax + 0x78]      
MEMORY OFFSET:     0x78     120  >>128

0x99b1:	add rax, 5                           #		ptr = |x|malloc(1 + 1 + dst_panel->pathlen + 1 + 1 + 1);
0x99b5:	mov rdi, rax                         
0x99b8:	call 0x24650                         
0x99bd:	mov qword ptr [rbp - 0xa0], rax      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x99c4:	jmp 0x97cb                           #		|g|oto copy_to_cmdln;
0x99c9:	mov rax, qword ptr [rbp - 0xe0]      #		len = |s|trlen(cmdln);
MEMORY OFFSET:     -0xe0     -224  >>-216

0x99d0:	mov rdi, rax                         
0x99d3:	call 0x4960                          
0x99d8:	mov qword ptr [rbp - 0xd0], rax      
MEMORY OFFSET:     -0xd0     -208  >>-200

0x99df:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x99e6:	mov rdi, rax                         
0x99e9:	call 0xdf09                          
0x99ee:	mov rax, qword ptr [rip + 0x26f1b]   #		|p|anel_init_iterator(src_panel);
MEMORY OFFSET:     0x26f1b     159515  >>159523

0x99f5:	mov rdi, rax                         
0x99f8:	call 0x13121                         
0x99fd:	jmp 0x9b19                           #		while |(|(entry = panel_get_next(src_panel)) != -1)
0x9a02:	mov rax, qword ptr [rip + 0x26f07]   #		    srcptr = src_panel|-|>dir_entry[entry].name;
MEMORY OFFSET:     0x26f07     159495  >>159503

0x9a09:	mov rcx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0x9a0d:	mov eax, dword ptr [rbp - 0x100]     #		    srcptr = src_panel->dir_entry|[|entry].name;
MEMORY OFFSET:     -0x100     -256  >>-248

0x9a13:	movsxd rdx, eax                      
0x9a16:	mov rax, rdx                         
0x9a19:	shl rax, 2                           
0x9a1d:	add rax, rdx                         
0x9a20:	shl rax, 4                           
0x9a24:	add rax, rcx                         
0x9a27:	mov rax, qword ptr [rax]             #		    srcptr |=| src_panel->dir_entry[entry].name;
0x9a2a:	mov qword ptr [rbp - 0x98], rax      
MEMORY OFFSET:     -0x98     -152  >>-144

0x9a31:	mov rax, qword ptr [rbp - 0x98]      #		    ptr = xmalloc(1 + 1 + |s|trlen(srcptr) + 1 + 1 + 1);
MEMORY OFFSET:     -0x98     -152  >>-144

0x9a38:	mov rdi, rax                         
0x9a3b:	call 0x4960                          
0x9a40:	add rax, 5                           #		    ptr = |x|malloc(1 + 1 + strlen(srcptr) + 1 + 1 + 1);
0x9a44:	mov rdi, rax                         
0x9a47:	call 0x24650                         
0x9a4c:	mov qword ptr [rbp - 0xa0], rax      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9a53:	mov rax, qword ptr [rbp - 0x98]      #		    if (|n|eeds_quotes(srcptr, strlen(srcptr)))
MEMORY OFFSET:     -0x98     -152  >>-144

0x9a5a:	mov rdi, rax                         
0x9a5d:	call 0x4960                          
0x9a62:	mov rdx, rax                         
0x9a65:	mov rax, qword ptr [rbp - 0x98]      
MEMORY OFFSET:     -0x98     -152  >>-144

0x9a6c:	mov rsi, rdx                         
0x9a6f:	mov rdi, rax                         
0x9a72:	call 0x1e61f                         
0x9a77:	test eax, eax                        #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x9a79:	je 0x9aa2                            
0x9a7b:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, " \"%s\"", srcptr);
MEMORY OFFSET:     -0x98     -152  >>-144

0x9a82:	mov rax, qword ptr [rbp - 0xa0]      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9a89:	lea rcx, [rip + 0x1db75]             
MEMORY OFFSET:     0x1db75     121717  >>121725

0x9a90:	mov rsi, rcx                         
0x9a93:	mov rdi, rax                         
0x9a96:	mov eax, 0                           
0x9a9b:	call 0x4dd0                          
0x9aa0:	jmp 0x9ac7                           
0x9aa2:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, " %s", srcptr);
MEMORY OFFSET:     -0x98     -152  >>-144

0x9aa9:	mov rax, qword ptr [rbp - 0xa0]      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9ab0:	lea rcx, [rip + 0x1db54]             
MEMORY OFFSET:     0x1db54     121684  >>121692

0x9ab7:	mov rsi, rcx                         
0x9aba:	mov rdi, rax                         
0x9abd:	mov eax, 0                           
0x9ac2:	call 0x4dd0                          
0x9ac7:	mov rax, qword ptr [rbp - 0xa0]      #		    ptrlen = |s|trlen(ptr);
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9ace:	mov rdi, rax                         
0x9ad1:	call 0x4960                          
0x9ad6:	mov qword ptr [rbp - 0x38], rax      
MEMORY OFFSET:     -0x38     -56  >>-48

0x9ada:	mov rax, qword ptr [rbp - 0x38]      #		    len |+|= ptrlen;
MEMORY OFFSET:     -0x38     -56  >>-48

0x9ade:	add qword ptr [rbp - 0xd0], rax      
MEMORY OFFSET:     -0xd0     -208  >>-200

0x9ae5:	mov rdx, qword ptr [rbp - 0x38]      #		    |t|oprintable(ptr, ptrlen);
MEMORY OFFSET:     -0x38     -56  >>-48

0x9ae9:	mov rax, qword ptr [rbp - 0xa0]      
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9af0:	mov rsi, rdx                         
0x9af3:	mov rdi, rax                         
0x9af6:	call 0x1e5b1                         
0x9afb:	mov rax, qword ptr [rbp - 0xa0]      #		    |i|l_insert_text(ptr);
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9b02:	mov rdi, rax                         
0x9b05:	call 0xf433                          
0x9b0a:	mov rax, qword ptr [rbp - 0xa0]      #		    |x|free(ptr);
MEMORY OFFSET:     -0xa0     -160  >>-152

0x9b11:	mov rdi, rax                         
0x9b14:	call 0x1eeae                         
0x9b19:	mov rax, qword ptr [rip + 0x26df0]   #		while ((entry = |p|anel_get_next(src_panel)) != -1)
MEMORY OFFSET:     0x26df0     159216  >>159224

0x9b20:	mov rdi, rax                         
0x9b23:	call 0x13149                         
0x9b28:	mov dword ptr [rbp - 0x100], eax     
MEMORY OFFSET:     -0x100     -256  >>-248

0x9b2e:	cmp dword ptr [rbp - 0x100], -1      #		while ((entry = panel_get_next(src_panel)) |!|= -1)
MEMORY OFFSET:     -0x100     -256  >>-248

0x9b35:	jne 0x9a02                           
0x9b3b:	lea rax, [rip + 0x1dacd]             #		|i|l_insert_text(" ");
MEMORY OFFSET:     0x1dacd     121549  >>121557

0x9b42:	mov rdi, rax                         
0x9b45:	call 0xf433                          
0x9b4a:	mov eax, 0                           #		saved_il = |i|l_save();
0x9b4f:	call 0xe205                          
0x9b54:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9b5b:	jmp 0xacc2                           #		|b|reak;
0x9b60:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9b67:	mov rdi, rax                         
0x9b6a:	call 0xdf09                          
0x9b6f:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
MEMORY OFFSET:     -0x138     -312  >>-304

0x9b79:	jmp 0x9b96                           #		|f|or (i = 0; i < repeat_count; i++)
0x9b7b:	mov edi, 1                           #		    |i|l_history(IL_PREVIOUS);
0x9b80:	call 0xfd26                          
0x9b85:	mov eax, 0                           #		    |t|ty_update();
0x9b8a:	call 0xb4b7                          
0x9b8f:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
MEMORY OFFSET:     -0x138     -312  >>-304

0x9b96:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
MEMORY OFFSET:     -0x158     -344  >>-336

0x9b9c:	cmp dword ptr [rbp - 0x138], eax     
MEMORY OFFSET:     -0x138     -312  >>-304

0x9ba2:	jl 0x9b7b                            
0x9ba4:	mov eax, 0                           #		saved_il = |i|l_save();
0x9ba9:	call 0xe205                          
0x9bae:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9bb5:	jmp 0xacc2                           #		|b|reak;
0x9bba:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9bc1:	mov rdi, rax                         
0x9bc4:	call 0xdf09                          
0x9bc9:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
MEMORY OFFSET:     -0x138     -312  >>-304

0x9bd3:	jmp 0x9bf0                           #		|f|or (i = 0; i < repeat_count; i++)
0x9bd5:	mov edi, 2                           #		    |i|l_history(IL_NEXT);
0x9bda:	call 0xfd26                          
0x9bdf:	mov eax, 0                           #		    |t|ty_update();
0x9be4:	call 0xb4b7                          
0x9be9:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
MEMORY OFFSET:     -0x138     -312  >>-304

0x9bf0:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
MEMORY OFFSET:     -0x158     -344  >>-336

0x9bf6:	cmp dword ptr [rbp - 0x138], eax     
MEMORY OFFSET:     -0x138     -312  >>-304

0x9bfc:	jl 0x9bd5                            
0x9bfe:	mov eax, 0                           #		saved_il = |i|l_save();
0x9c03:	call 0xe205                          
0x9c08:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9c0f:	jmp 0xacc2                           #		|b|reak;
0x9c14:	mov eax, dword ptr [rbp - 0x158]     #		if ((repeat_count |&| 1) == 0)
MEMORY OFFSET:     -0x158     -344  >>-336

0x9c1a:	and eax, 1                           
0x9c1d:	test eax, eax                        #		if |(|(repeat_count & 1) == 0)
0x9c1f:	jne 0x9c26                           
0x9c21:	jmp 0xacc2                           #		    |b|reak;
0x9c26:	mov eax, dword ptr [rip + 0x253fc]   #		if (|!|two_panel_mode)
MEMORY OFFSET:     0x253fc     152572  >>152580

0x9c2c:	test eax, eax                        #		if |(|!two_panel_mode)
0x9c2e:	jne 0x9c35                           
0x9c30:	jmp 0xacc2                           #		    |b|reak;
0x9c35:	mov rax, qword ptr [rip + 0x26cd4]   #		|p|anel_no_optimizations(src_panel);
MEMORY OFFSET:     0x26cd4     158932  >>158940

0x9c3c:	mov rdi, rax                         
0x9c3f:	call 0x110b0                         
0x9c44:	mov rax, qword ptr [rip + 0x26ccd]   #		|p|anel_no_optimizations(dst_panel);
MEMORY OFFSET:     0x26ccd     158925  >>158933

0x9c4b:	mov rdi, rax                         
0x9c4e:	call 0x110b0                         
0x9c53:	mov rdx, qword ptr [rip + 0x26cbe]   #		|p|anel_action(src_panel, act_SWITCH, dst_panel, NULL, 1);
MEMORY OFFSET:     0x26cbe     158910  >>158918

0x9c5a:	mov rax, qword ptr [rip + 0x26caf]   
MEMORY OFFSET:     0x26caf     158895  >>158903

0x9c61:	mov r8d, 1                           
0x9c67:	mov ecx, 0                           
0x9c6c:	mov esi, 0x23                        
0x9c71:	mov rdi, rax                         
0x9c74:	call 0x1a89a                         
0x9c79:	mov rax, qword ptr [rip + 0x26c90]   #		|p|anel_update(src_panel);
MEMORY OFFSET:     0x26c90     158864  >>158872

0x9c80:	mov rdi, rax                         
0x9c83:	call 0x14e6a                         
0x9c88:	mov rax, qword ptr [rip + 0x26c89]   #		|p|anel_update(dst_panel);
MEMORY OFFSET:     0x26c89     158857  >>158865

0x9c8f:	mov rdi, rax                         
0x9c92:	call 0x14e6a                         
0x9c97:	jmp 0xacc2                           #		|b|reak;
0x9c9c:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line("Directory: ", &input, (char *)NULL,
MEMORY OFFSET:     -0x70     -112  >>-104

0x9ca0:	mov rdx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0x9ca4:	lea rax, [rbp - 0xd8]                
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9cab:	mov rcx, rdx                         
0x9cae:	mov edx, 0                           
0x9cb3:	mov rsi, rax                         
0x9cb6:	lea rax, [rip + 0x1d954]             
MEMORY OFFSET:     0x1d954     121172  >>121180

0x9cbd:	mov rdi, rax                         
0x9cc0:	call 0x5efb                          
0x9cc5:	test rax, rax                        #		if |(|il_read_line("Directory: ", &input, (char *)NULL,
0x9cc8:	je 0xacc2                            
0x9cce:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9cd5:	movzx eax, byte ptr [rax]            
0x9cd8:	test al, al                          #		    if |(|input[0] == 0)
0x9cda:	jne 0x9ce1                           
0x9cdc:	jmp 0xacc2                           #			|b|reak;
0x9ce1:	mov rax, qword ptr [rbp - 0xd8]      #				 expanded_input = |t|ilde_expand(input), 1);
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9ce8:	mov rdi, rax                         
0x9ceb:	mov eax, 0                           
0x9cf0:	call 0x1fb51                         
0x9cf5:	mov qword ptr [rbp - 0x40], rax      
MEMORY OFFSET:     -0x40     -64  >>-56

0x9cf9:	mov rdx, qword ptr [rip + 0x26c18]   #		    |p|anel_action(src_panel, act_CHDIR, dst_panel,
MEMORY OFFSET:     0x26c18     158744  >>158752

0x9d00:	mov rax, qword ptr [rip + 0x26c09]   
MEMORY OFFSET:     0x26c09     158729  >>158737

0x9d07:	mov rcx, qword ptr [rbp - 0x40]      
MEMORY OFFSET:     -0x40     -64  >>-56

0x9d0b:	mov r8d, 1                           
0x9d11:	mov esi, 0x21                        
0x9d16:	mov rdi, rax                         
0x9d19:	call 0x1a89a                         
0x9d1e:	mov rax, qword ptr [rip + 0x26beb]   #		    |d|ir_history_add(panel_get_path(src_panel));
MEMORY OFFSET:     0x26beb     158699  >>158707

0x9d25:	mov rdi, rax                         
0x9d28:	call 0x1504f                         
0x9d2d:	mov rdi, rax                         
0x9d30:	mov eax, 0                           
0x9d35:	call 0x6598                          
0x9d3a:	mov rax, qword ptr [rbp - 0x40]      #		    |x|free(expanded_input);
MEMORY OFFSET:     -0x40     -64  >>-56

0x9d3e:	mov rdi, rax                         
0x9d41:	call 0x1eeae                         
0x9d46:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9d4d:	mov rdi, rax                         
0x9d50:	call 0x1eeae                         
0x9d55:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9d60:	mov rax, qword ptr [rbp - 0xc0]      #		    |i|l_restore(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9d67:	mov rdi, rax                         
0x9d6a:	call 0xe319                          
0x9d6f:	mov eax, 0                           #		    |s|et_prompt();
0x9d74:	call 0x769b                          
0x9d79:	mov eax, 0                           #		    saved_il = |i|l_save();
0x9d7e:	call 0xe205                          
0x9d83:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9d8a:	mov rax, qword ptr [rip + 0x26b7f]   #		    |t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x26b7f     158591  >>158599

0x9d91:	mov rdi, rax                         
0x9d94:	call 0x1504f                         
0x9d99:	mov rdi, rax                         
0x9d9c:	call 0xd875                          
0x9da1:	jmp 0xacc2                           #		|b|reak;
0x9da6:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line(
MEMORY OFFSET:     -0x70     -112  >>-104

0x9daa:	mov rdx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0x9dae:	lea rax, [rbp - 0xd8]                
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9db5:	mov rcx, rdx                         
0x9db8:	mov edx, 0                           
0x9dbd:	mov rsi, rax                         
0x9dc0:	lea rax, [rip + 0x1d859]             
MEMORY OFFSET:     0x1d859     120921  >>120929

0x9dc7:	mov rdi, rax                         
0x9dca:	call 0x5efb                          
0x9dcf:	test rax, rax                        #		if |(|il_read_line(
0x9dd2:	je 0xacc2                            
0x9dd8:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9ddf:	movzx eax, byte ptr [rax]            
0x9de2:	test al, al                          #		    if |(|input[0] == 0)
0x9de4:	jne 0x9deb                           
0x9de6:	jmp 0xacc2                           #			|b|reak;
0x9deb:	mov rcx, qword ptr [rbp - 0xd8]      #		    |p|anel_action(src_panel, act_PATTERN_SELECT,
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9df2:	mov rdx, qword ptr [rip + 0x26b1f]   
MEMORY OFFSET:     0x26b1f     158495  >>158503

0x9df9:	mov rax, qword ptr [rip + 0x26b10]   
MEMORY OFFSET:     0x26b10     158480  >>158488

0x9e00:	mov r8d, 1                           
0x9e06:	mov esi, 0x24                        
0x9e0b:	mov rdi, rax                         
0x9e0e:	call 0x1a89a                         
0x9e13:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9e1a:	mov rdi, rax                         
0x9e1d:	call 0x1eeae                         
0x9e22:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9e2d:	jmp 0xacc2                           #		|b|reak;
0x9e32:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line(
MEMORY OFFSET:     -0x70     -112  >>-104

0x9e36:	mov rdx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0x9e3a:	lea rax, [rbp - 0xd8]                
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9e41:	mov rcx, rdx                         
0x9e44:	mov edx, 0                           
0x9e49:	mov rsi, rax                         
0x9e4c:	lea rax, [rip + 0x1d7fd]             
MEMORY OFFSET:     0x1d7fd     120829  >>120837

0x9e53:	mov rdi, rax                         
0x9e56:	call 0x5efb                          
0x9e5b:	test rax, rax                        #		if |(|il_read_line(
0x9e5e:	je 0xacc2                            
0x9e64:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9e6b:	movzx eax, byte ptr [rax]            
0x9e6e:	test al, al                          #		    if |(|input[0] == 0)
0x9e70:	jne 0x9e77                           
0x9e72:	jmp 0xacc2                           #			|b|reak;
0x9e77:	mov rcx, qword ptr [rbp - 0xd8]      #		    |p|anel_action(src_panel, act_PATTERN_UNSELECT,
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9e7e:	mov rdx, qword ptr [rip + 0x26a93]   
MEMORY OFFSET:     0x26a93     158355  >>158363

0x9e85:	mov rax, qword ptr [rip + 0x26a84]   
MEMORY OFFSET:     0x26a84     158340  >>158348

0x9e8c:	mov r8d, 1                           
0x9e92:	mov esi, 0x25                        
0x9e97:	mov rdi, rax                         
0x9e9a:	call 0x1a89a                         
0x9e9f:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9ea6:	mov rdi, rax                         
0x9ea9:	call 0x1eeae                         
0x9eae:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9eb9:	jmp 0xacc2                           #		|b|reak;
0x9ebe:	mov rax, qword ptr [rip + 0x26a53]   #			     dst_panel|-|>path, 1);
MEMORY OFFSET:     0x26a53     158291  >>158299

0x9ec5:	mov rcx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0x9ec9:	mov rdx, qword ptr [rip + 0x26a48]   #		|p|anel_action(src_panel, act_CHDIR, dst_panel,
MEMORY OFFSET:     0x26a48     158280  >>158288

0x9ed0:	mov rax, qword ptr [rip + 0x26a39]   
MEMORY OFFSET:     0x26a39     158265  >>158273

0x9ed7:	mov r8d, 1                           
0x9edd:	mov esi, 0x21                        
0x9ee2:	mov rdi, rax                         
0x9ee5:	call 0x1a89a                         
0x9eea:	mov rax, qword ptr [rip + 0x26a1f]   #		|d|ir_history_add(panel_get_path(src_panel));
MEMORY OFFSET:     0x26a1f     158239  >>158247

0x9ef1:	mov rdi, rax                         
0x9ef4:	call 0x1504f                         
0x9ef9:	mov rdi, rax                         
0x9efc:	mov eax, 0                           
0x9f01:	call 0x6598                          
0x9f06:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9f0d:	mov rdi, rax                         
0x9f10:	call 0xdf09                          
0x9f15:	mov eax, 0                           #		|s|et_prompt();
0x9f1a:	call 0x769b                          
0x9f1f:	mov eax, 0                           #		saved_il = |i|l_save();
0x9f24:	call 0xe205                          
0x9f29:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0x9f30:	mov rax, qword ptr [rip + 0x269d9]   #		|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x269d9     158169  >>158177

0x9f37:	mov rdi, rax                         
0x9f3a:	call 0x1504f                         
0x9f3f:	mov rdi, rax                         
0x9f42:	call 0xd875                          
0x9f47:	jmp 0xacc2                           #		|b|reak;
0x9f4c:	mov rax, qword ptr [rip + 0x269bd]   #			     src_panel|-|>path, 1);
MEMORY OFFSET:     0x269bd     158141  >>158149

0x9f53:	mov rcx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0x9f57:	mov rdx, qword ptr [rip + 0x269b2]   #		|p|anel_action(dst_panel, act_CHDIR, src_panel,
MEMORY OFFSET:     0x269b2     158130  >>158138

0x9f5e:	mov rax, qword ptr [rip + 0x269b3]   
MEMORY OFFSET:     0x269b3     158131  >>158139

0x9f65:	mov r8d, 1                           
0x9f6b:	mov esi, 0x21                        
0x9f70:	mov rdi, rax                         
0x9f73:	call 0x1a89a                         
0x9f78:	mov rax, qword ptr [rip + 0x26999]   #		|d|ir_history_add(panel_get_path(dst_panel));
MEMORY OFFSET:     0x26999     158105  >>158113

0x9f7f:	mov rdi, rax                         
0x9f82:	call 0x1504f                         
0x9f87:	mov rdi, rax                         
0x9f8a:	mov eax, 0                           
0x9f8f:	call 0x6598                          
0x9f94:	jmp 0xacc2                           #		|b|reak;
0x9f99:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line("Scroll step: ", &input, (char *)NULL,
MEMORY OFFSET:     -0x70     -112  >>-104

0x9f9d:	mov rdx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0x9fa1:	lea rax, [rbp - 0xd8]                
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9fa8:	mov rcx, rdx                         
0x9fab:	mov edx, 0                           
0x9fb0:	mov rsi, rax                         
0x9fb3:	lea rax, [rip + 0x1d6c4]             
MEMORY OFFSET:     0x1d6c4     120516  >>120524

0x9fba:	mov rdi, rax                         
0x9fbd:	call 0x5efb                          
0x9fc2:	test rax, rax                        #		if |(|il_read_line("Scroll step: ", &input, (char *)NULL,
0x9fc5:	je 0xacc2                            
0x9fcb:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9fd2:	movzx eax, byte ptr [rax]            
0x9fd5:	test al, al                          #		    if |(|input[0] == 0)
0x9fd7:	jne 0x9fde                           
0x9fd9:	jmp 0xacc2                           #			|b|reak;
0x9fde:	mov rcx, qword ptr [rbp - 0xd8]      #		    |p|anel_action(src_panel, act_SET_SCROLL_STEP,
MEMORY OFFSET:     -0xd8     -216  >>-208

0x9fe5:	mov rdx, qword ptr [rip + 0x2692c]   
MEMORY OFFSET:     0x2692c     157996  >>158004

0x9fec:	mov rax, qword ptr [rip + 0x2691d]   
MEMORY OFFSET:     0x2691d     157981  >>157989

0x9ff3:	mov r8d, 1                           
0x9ff9:	mov esi, 0x26                        
0x9ffe:	mov rdi, rax                         
0xa001:	call 0x1a89a                         
0xa006:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa00d:	mov rdi, rax                         
0xa010:	call 0x1eeae                         
0xa015:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa020:	jmp 0xacc2                           #		|b|reak;
0xa025:	mov dword ptr [rbp - 0x148], 0       #		previous_isearch_failed |=| 0;
MEMORY OFFSET:     -0x148     -328  >>-320

0xa02f:	mov dword ptr [rbp - 0x144], 0       #		resuming_previous_isearch |=| 0;
MEMORY OFFSET:     -0x144     -324  >>-316

0xa039:	mov ecx, 0                           #		|i|l_isearch("I-search backward: ", (char **)NULL,
0xa03e:	mov edx, 0                           
0xa043:	mov esi, 0                           
0xa048:	lea rax, [rip + 0x1d63d]             
MEMORY OFFSET:     0x1d63d     120381  >>120389

0xa04f:	mov rdi, rax                         
0xa052:	call 0x6267                          
0xa057:	mov rdx, qword ptr [rip + 0x268ba]   #		|p|anel_action(src_panel, act_ISEARCH_BEGIN,
MEMORY OFFSET:     0x268ba     157882  >>157890

0xa05e:	mov rax, qword ptr [rip + 0x268ab]   
MEMORY OFFSET:     0x268ab     157867  >>157875

0xa065:	mov r8d, 1                           
0xa06b:	mov ecx, 0                           
0xa070:	mov esi, 0x27                        
0xa075:	mov rdi, rax                         
0xa078:	call 0x1a89a                         
0xa07d:	lea rdx, [rbp - 0x30]                #		    if (|i|l_isearch((char *)NULL, &input, IL_ISEARCH_BACKWARD,
MEMORY OFFSET:     -0x30     -48  >>-40

0xa081:	lea rax, [rbp - 0xd8]                
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa088:	mov rcx, rdx                         
0xa08b:	mov edx, 1                           
0xa090:	mov rsi, rax                         
0xa093:	mov edi, 0                           
0xa098:	call 0x6267                          
0xa09d:	test rax, rax                        #		    if |(|il_isearch((char *)NULL, &input, IL_ISEARCH_BACKWARD,
0xa0a0:	jne 0xa0b5                           
0xa0a2:	cmp qword ptr [rbp - 0x90], 0        #		if |(|search_string)
MEMORY OFFSET:     -0x90     -144  >>-136

0xa0aa:	jne 0xa248                           
0xa0b0:	jmp 0xa257                           
0xa0b5:	mov rax, qword ptr [rbp - 0xd8]      #		    if (strlen(input) |=|= 0 &&
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa0bc:	movzx eax, byte ptr [rax]            
0xa0bf:	test al, al                          #		    if |(|strlen(input) == 0 &&
0xa0c1:	jne 0xa123                           
0xa0c3:	cmp qword ptr [rbp - 0x90], 0        #		    if (strlen(input) == 0 |&|&
MEMORY OFFSET:     -0x90     -144  >>-136

0xa0cb:	je 0xa123                            
0xa0cd:	mov rax, qword ptr [rbp - 0x90]      #			search_string |&|& strlen(search_string))
MEMORY OFFSET:     -0x90     -144  >>-136

0xa0d4:	movzx eax, byte ptr [rax]            
0xa0d7:	test al, al                          
0xa0d9:	je 0xa123                            
0xa0db:	mov rax, qword ptr [rbp - 0xd8]      #			|x|free(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa0e2:	mov rdi, rax                         
0xa0e5:	call 0x1eeae                         
0xa0ea:	mov rax, qword ptr [rbp - 0x90]      #			input = |s|trdup(search_string);
MEMORY OFFSET:     -0x90     -144  >>-136

0xa0f1:	mov rdi, rax                         
0xa0f4:	call 0x4e40                          
0xa0f9:	mov qword ptr [rbp - 0xd8], rax      #			input |=| strdup(search_string);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa100:	mov rax, qword ptr [rbp - 0xd8]      #			|i|l_insert_text(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa107:	mov rdi, rax                         
0xa10a:	call 0xf433                          
0xa10f:	mov dword ptr [rbp - 0x144], 1       #			resuming_previous_isearch |=| 1;
MEMORY OFFSET:     -0x144     -324  >>-316

0xa119:	mov dword ptr [rbp - 0x148], 0       #			previous_isearch_failed |=| 0;
MEMORY OFFSET:     -0x148     -328  >>-320

0xa123:	mov eax, dword ptr [rbp - 0x30]      #		    if (iai|.|action == IL_ISEARCH_ACTION_RETRY &&
MEMORY OFFSET:     -0x30     -48  >>-40

0xa126:	cmp eax, 2                           #		    if |(|iai.action == IL_ISEARCH_ACTION_RETRY &&
0xa129:	jne 0xa152                           
0xa12b:	cmp dword ptr [rbp - 0x148], 0       #		    if (iai.action == IL_ISEARCH_ACTION_RETRY |&|&
MEMORY OFFSET:     -0x148     -328  >>-320

0xa132:	je 0xa152                            
0xa134:	mov rax, qword ptr [rip + 0x267d5]   #			|p|anel_set_wrapped_isearch_flag(src_panel, 1);
MEMORY OFFSET:     0x267d5     157653  >>157661

0xa13b:	mov esi, 1                           
0xa140:	mov rdi, rax                         
0xa143:	call 0x11460                         
0xa148:	mov dword ptr [rbp - 0x148], 0       #			previous_isearch_failed |=| 0;
MEMORY OFFSET:     -0x148     -328  >>-320

0xa152:	mov rax, qword ptr [rbp - 0xd8]      #		    iai.string |=| input;
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa159:	mov qword ptr [rbp - 0x28], rax      
MEMORY OFFSET:     -0x28     -40  >>-32

0xa15d:	mov rdx, qword ptr [rip + 0x267b4]   #		    |p|anel_action(src_panel, act_ISEARCH_BACKWARD,
MEMORY OFFSET:     0x267b4     157620  >>157628

0xa164:	mov rax, qword ptr [rip + 0x267a5]   
MEMORY OFFSET:     0x267a5     157605  >>157613

0xa16b:	lea rcx, [rbp - 0x30]                
MEMORY OFFSET:     -0x30     -48  >>-40

0xa16f:	mov r8d, 1                           
0xa175:	mov esi, 0x28                        
0xa17a:	mov rdi, rax                         
0xa17d:	call 0x1a89a                         
0xa182:	mov eax, dword ptr [rbp - 0x30]      #		    if (iai|.|action == IL_ISEARCH_ACTION_FAILED)
MEMORY OFFSET:     -0x30     -48  >>-40

0xa185:	cmp eax, -1                          #		    if |(|iai.action == IL_ISEARCH_ACTION_FAILED)
0xa188:	jne 0xa1a3                           
0xa18a:	mov dword ptr [rbp - 0x148], 1       #			previous_isearch_failed |=| 1;
MEMORY OFFSET:     -0x148     -328  >>-320

0xa194:	mov eax, 0                           #			|t|ty_beep();
0xa199:	call 0xbfbf                          
0xa19e:	jmp 0xa07d                           
0xa1a3:	mov dword ptr [rbp - 0x120], 0       #			int |u|pdate = 0;
MEMORY OFFSET:     -0x120     -288  >>-280

0xa1ad:	cmp dword ptr [rbp - 0x144], 0       #			if |(|resuming_previous_isearch)
MEMORY OFFSET:     -0x144     -324  >>-316

0xa1b4:	je 0xa1ec                            
0xa1b6:	mov rbx, qword ptr [rbp - 0x20]      #			    if (iai|.|length < strlen(search_string))
MEMORY OFFSET:     -0x20     -32  >>-24

0xa1ba:	mov rax, qword ptr [rbp - 0x90]      #			    if (iai.length < |s|trlen(search_string))
MEMORY OFFSET:     -0x90     -144  >>-136

0xa1c1:	mov rdi, rax                         
0xa1c4:	call 0x4960                          
0xa1c9:	cmp rbx, rax                         #			    if |(|iai.length < strlen(search_string))
0xa1cc:	jae 0xa1ec                           
0xa1ce:	mov edi, 0                           #				|i|l_kill_line(0);
0xa1d3:	call 0xed98                          
0xa1d8:	mov dword ptr [rbp - 0x144], 0       #				resuming_previous_isearch |=| 0;
MEMORY OFFSET:     -0x144     -324  >>-316

0xa1e2:	mov dword ptr [rbp - 0x120], 1       #				update |=| 1;
MEMORY OFFSET:     -0x120     -288  >>-280

0xa1ec:	mov rbx, qword ptr [rbp - 0x20]      #			if (iai|.|length < strlen(input))
MEMORY OFFSET:     -0x20     -32  >>-24

0xa1f0:	mov rax, qword ptr [rbp - 0xd8]      #			if (iai.length < |s|trlen(input))
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa1f7:	mov rdi, rax                         
0xa1fa:	call 0x4960                          
0xa1ff:	cmp rbx, rax                         #			if |(|iai.length < strlen(input))
0xa202:	jae 0xa218                           
0xa204:	mov eax, 0                           #			    |i|l_backward_delete_char();
0xa209:	call 0xea22                          
0xa20e:	mov dword ptr [rbp - 0x120], 1       #			    update |=| 1;
MEMORY OFFSET:     -0x120     -288  >>-280

0xa218:	cmp dword ptr [rbp - 0x120], 0       #			if |(|update)
MEMORY OFFSET:     -0x120     -288  >>-280

0xa21f:	je 0xa07d                            
0xa225:	mov eax, 0                           #			    |i|l_update();
0xa22a:	call 0xf8eb                          
0xa22f:	mov eax, 0                           #			    |i|l_update_point();
0xa234:	call 0xf768                          
0xa239:	mov eax, 0                           #			    |t|ty_update();
0xa23e:	call 0xb4b7                          
0xa243:	jmp 0xa07d                           #		|{|
0xa248:	mov rax, qword ptr [rbp - 0x90]      #		    |x|free(search_string);
MEMORY OFFSET:     -0x90     -144  >>-136

0xa24f:	mov rdi, rax                         
0xa252:	call 0x1eeae                         
0xa257:	mov rax, qword ptr [rbp - 0xd8]      #		if (input |=|= NULL)
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa25e:	test rax, rax                        #		if |(|input == NULL)
0xa261:	jne 0xa268                           
0xa263:	jmp 0xacc2                           #		    |b|reak;
0xa268:	mov rax, qword ptr [rbp - 0xd8]      #		search_string = |s|trdup(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa26f:	mov rdi, rax                         
0xa272:	call 0x4e40                          
0xa277:	mov qword ptr [rbp - 0x90], rax      
MEMORY OFFSET:     -0x90     -144  >>-136

0xa27e:	mov rdx, qword ptr [rip + 0x26693]   #		|p|anel_action(src_panel, act_ISEARCH_END, dst_panel, NULL, 1);
MEMORY OFFSET:     0x26693     157331  >>157339

0xa285:	mov rax, qword ptr [rip + 0x26684]   
MEMORY OFFSET:     0x26684     157316  >>157324

0xa28c:	mov r8d, 1                           
0xa292:	mov ecx, 0                           
0xa297:	mov esi, 0x2a                        
0xa29c:	mov rdi, rax                         
0xa29f:	call 0x1a89a                         
0xa2a4:	mov ecx, 0                           #		|i|l_isearch((char *)NULL, (char **)NULL,
0xa2a9:	mov edx, 3                           
0xa2ae:	mov esi, 0                           
0xa2b3:	mov edi, 0                           
0xa2b8:	call 0x6267                          
0xa2bd:	jmp 0xacc2                           #		|b|reak;
0xa2c2:	mov dword ptr [rbp - 0x148], 0       #		previous_isearch_failed |=| 0;
MEMORY OFFSET:     -0x148     -328  >>-320

0xa2cc:	mov dword ptr [rbp - 0x144], 0       #		resuming_previous_isearch |=| 0;
MEMORY OFFSET:     -0x144     -324  >>-316

0xa2d6:	mov ecx, 0                           #		|i|l_isearch("I-search: ", (char **)NULL,
0xa2db:	mov edx, 0                           
0xa2e0:	mov esi, 0                           
0xa2e5:	lea rax, [rip + 0x1d3b4]             
MEMORY OFFSET:     0x1d3b4     119732  >>119740

0xa2ec:	mov rdi, rax                         
0xa2ef:	call 0x6267                          
0xa2f4:	mov rdx, qword ptr [rip + 0x2661d]   #		|p|anel_action(src_panel, act_ISEARCH_BEGIN, dst_panel, NULL, 1);
MEMORY OFFSET:     0x2661d     157213  >>157221

0xa2fb:	mov rax, qword ptr [rip + 0x2660e]   
MEMORY OFFSET:     0x2660e     157198  >>157206

0xa302:	mov r8d, 1                           
0xa308:	mov ecx, 0                           
0xa30d:	mov esi, 0x27                        
0xa312:	mov rdi, rax                         
0xa315:	call 0x1a89a                         
0xa31a:	lea rdx, [rbp - 0x30]                #		    if (|i|l_isearch((char *)NULL, &input, IL_ISEARCH_FORWARD,
MEMORY OFFSET:     -0x30     -48  >>-40

0xa31e:	lea rax, [rbp - 0xd8]                
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa325:	mov rcx, rdx                         
0xa328:	mov edx, 2                           
0xa32d:	mov rsi, rax                         
0xa330:	mov edi, 0                           
0xa335:	call 0x6267                          
0xa33a:	test rax, rax                        #		    if |(|il_isearch((char *)NULL, &input, IL_ISEARCH_FORWARD,
0xa33d:	jne 0xa352                           
0xa33f:	cmp qword ptr [rbp - 0x90], 0        #		if |(|search_string)
MEMORY OFFSET:     -0x90     -144  >>-136

0xa347:	jne 0xa4ef                           
0xa34d:	jmp 0xa4fe                           
0xa352:	mov rax, qword ptr [rbp - 0xd8]      #		    if (strlen(input) |=|= 0 &&
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa359:	movzx eax, byte ptr [rax]            
0xa35c:	test al, al                          #		    if |(|strlen(input) == 0 &&
0xa35e:	jne 0xa3c0                           
0xa360:	cmp qword ptr [rbp - 0x90], 0        #		    if (strlen(input) == 0 |&|&
MEMORY OFFSET:     -0x90     -144  >>-136

0xa368:	je 0xa3c0                            
0xa36a:	mov rax, qword ptr [rbp - 0x90]      #			search_string |&|& strlen(search_string))
MEMORY OFFSET:     -0x90     -144  >>-136

0xa371:	movzx eax, byte ptr [rax]            
0xa374:	test al, al                          
0xa376:	je 0xa3c0                            
0xa378:	mov rax, qword ptr [rbp - 0xd8]      #			|x|free(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa37f:	mov rdi, rax                         
0xa382:	call 0x1eeae                         
0xa387:	mov rax, qword ptr [rbp - 0x90]      #			input = |s|trdup(search_string);
MEMORY OFFSET:     -0x90     -144  >>-136

0xa38e:	mov rdi, rax                         
0xa391:	call 0x4e40                          
0xa396:	mov qword ptr [rbp - 0xd8], rax      #			input |=| strdup(search_string);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa39d:	mov rax, qword ptr [rbp - 0xd8]      #			|i|l_insert_text(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa3a4:	mov rdi, rax                         
0xa3a7:	call 0xf433                          
0xa3ac:	mov dword ptr [rbp - 0x144], 1       #			resuming_previous_isearch |=| 1;
MEMORY OFFSET:     -0x144     -324  >>-316

0xa3b6:	mov dword ptr [rbp - 0x148], 0       #			previous_isearch_failed |=| 0;
MEMORY OFFSET:     -0x148     -328  >>-320

0xa3c0:	mov eax, dword ptr [rbp - 0x30]      #		    if (iai|.|action == IL_ISEARCH_ACTION_RETRY &&
MEMORY OFFSET:     -0x30     -48  >>-40

0xa3c3:	cmp eax, 2                           #		    if |(|iai.action == IL_ISEARCH_ACTION_RETRY &&
0xa3c6:	jne 0xa3f9                           
0xa3c8:	cmp dword ptr [rbp - 0x148], 0       #		    if (iai.action == IL_ISEARCH_ACTION_RETRY |&|&
MEMORY OFFSET:     -0x148     -328  >>-320

0xa3cf:	je 0xa3f9                            
0xa3d1:	mov eax, 0                           #			|t|ty_beep();
0xa3d6:	call 0xbfbf                          
0xa3db:	mov rax, qword ptr [rip + 0x2652e]   #			|p|anel_set_wrapped_isearch_flag(src_panel, 1);
MEMORY OFFSET:     0x2652e     156974  >>156982

0xa3e2:	mov esi, 1                           
0xa3e7:	mov rdi, rax                         
0xa3ea:	call 0x11460                         
0xa3ef:	mov dword ptr [rbp - 0x148], 0       #			previous_isearch_failed |=| 0;
MEMORY OFFSET:     -0x148     -328  >>-320

0xa3f9:	mov rax, qword ptr [rbp - 0xd8]      #		    iai.string |=| input;
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa400:	mov qword ptr [rbp - 0x28], rax      
MEMORY OFFSET:     -0x28     -40  >>-32

0xa404:	mov rdx, qword ptr [rip + 0x2650d]   #		    |p|anel_action(src_panel, act_ISEARCH_FORWARD,
MEMORY OFFSET:     0x2650d     156941  >>156949

0xa40b:	mov rax, qword ptr [rip + 0x264fe]   
MEMORY OFFSET:     0x264fe     156926  >>156934

0xa412:	lea rcx, [rbp - 0x30]                
MEMORY OFFSET:     -0x30     -48  >>-40

0xa416:	mov r8d, 1                           
0xa41c:	mov esi, 0x29                        
0xa421:	mov rdi, rax                         
0xa424:	call 0x1a89a                         
0xa429:	mov eax, dword ptr [rbp - 0x30]      #		    if (iai|.|action == IL_ISEARCH_ACTION_FAILED)
MEMORY OFFSET:     -0x30     -48  >>-40

0xa42c:	cmp eax, -1                          #		    if |(|iai.action == IL_ISEARCH_ACTION_FAILED)
0xa42f:	jne 0xa44a                           
0xa431:	mov dword ptr [rbp - 0x148], 1       #			previous_isearch_failed |=| 1;
MEMORY OFFSET:     -0x148     -328  >>-320

0xa43b:	mov eax, 0                           #			|t|ty_beep();
0xa440:	call 0xbfbf                          
0xa445:	jmp 0xa31a                           
0xa44a:	mov dword ptr [rbp - 0x11c], 0       #			int |u|pdate = 0;
MEMORY OFFSET:     -0x11c     -284  >>-276

0xa454:	cmp dword ptr [rbp - 0x144], 0       #			if |(|resuming_previous_isearch)
MEMORY OFFSET:     -0x144     -324  >>-316

0xa45b:	je 0xa493                            
0xa45d:	mov rbx, qword ptr [rbp - 0x20]      #			    if (iai|.|length < strlen(search_string))
MEMORY OFFSET:     -0x20     -32  >>-24

0xa461:	mov rax, qword ptr [rbp - 0x90]      #			    if (iai.length < |s|trlen(search_string))
MEMORY OFFSET:     -0x90     -144  >>-136

0xa468:	mov rdi, rax                         
0xa46b:	call 0x4960                          
0xa470:	cmp rbx, rax                         #			    if |(|iai.length < strlen(search_string))
0xa473:	jae 0xa493                           
0xa475:	mov edi, 0                           #				|i|l_kill_line(0);
0xa47a:	call 0xed98                          
0xa47f:	mov dword ptr [rbp - 0x144], 0       #				resuming_previous_isearch |=| 0;
MEMORY OFFSET:     -0x144     -324  >>-316

0xa489:	mov dword ptr [rbp - 0x11c], 1       #				update |=| 1;
MEMORY OFFSET:     -0x11c     -284  >>-276

0xa493:	mov rbx, qword ptr [rbp - 0x20]      #			if (iai|.|length < strlen(input))
MEMORY OFFSET:     -0x20     -32  >>-24

0xa497:	mov rax, qword ptr [rbp - 0xd8]      #			if (iai.length < |s|trlen(input))
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa49e:	mov rdi, rax                         
0xa4a1:	call 0x4960                          
0xa4a6:	cmp rbx, rax                         #			if |(|iai.length < strlen(input))
0xa4a9:	jae 0xa4bf                           
0xa4ab:	mov eax, 0                           #			    |i|l_backward_delete_char();
0xa4b0:	call 0xea22                          
0xa4b5:	mov dword ptr [rbp - 0x11c], 1       #			    update |=| 1;
MEMORY OFFSET:     -0x11c     -284  >>-276

0xa4bf:	cmp dword ptr [rbp - 0x11c], 0       #			if |(|update)
MEMORY OFFSET:     -0x11c     -284  >>-276

0xa4c6:	je 0xa31a                            
0xa4cc:	mov eax, 0                           #			    |i|l_update();
0xa4d1:	call 0xf8eb                          
0xa4d6:	mov eax, 0                           #			    |i|l_update_point();
0xa4db:	call 0xf768                          
0xa4e0:	mov eax, 0                           #			    |t|ty_update();
0xa4e5:	call 0xb4b7                          
0xa4ea:	jmp 0xa31a                           #		|{|
0xa4ef:	mov rax, qword ptr [rbp - 0x90]      #		    |x|free(search_string);
MEMORY OFFSET:     -0x90     -144  >>-136

0xa4f6:	mov rdi, rax                         
0xa4f9:	call 0x1eeae                         
0xa4fe:	mov rax, qword ptr [rbp - 0xd8]      #		if (input |=|= NULL)
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa505:	test rax, rax                        #		if |(|input == NULL)
0xa508:	jne 0xa50f                           
0xa50a:	jmp 0xacc2                           #		    |b|reak;
0xa50f:	mov rax, qword ptr [rbp - 0xd8]      #		search_string = |s|trdup(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xa516:	mov rdi, rax                         
0xa519:	call 0x4e40                          
0xa51e:	mov qword ptr [rbp - 0x90], rax      
MEMORY OFFSET:     -0x90     -144  >>-136

0xa525:	mov rdx, qword ptr [rip + 0x263ec]   #		|p|anel_action(src_panel, act_ISEARCH_END, dst_panel, NULL, 1);
MEMORY OFFSET:     0x263ec     156652  >>156660

0xa52c:	mov rax, qword ptr [rip + 0x263dd]   
MEMORY OFFSET:     0x263dd     156637  >>156645

0xa533:	mov r8d, 1                           
0xa539:	mov ecx, 0                           
0xa53e:	mov esi, 0x2a                        
0xa543:	mov rdi, rax                         
0xa546:	call 0x1a89a                         
0xa54b:	mov ecx, 0                           #		|i|l_isearch((char *)NULL, (char **)NULL,
0xa550:	mov edx, 3                           
0xa555:	mov esi, 0                           
0xa55a:	mov edi, 0                           
0xa55f:	call 0x6267                          
0xa564:	jmp 0xacc2                           #		|b|reak;
0xa569:	mov eax, 0                           #		|d|ir_history_reset();
0xa56e:	call 0x6519                          
0xa573:	mov rax, qword ptr [rip + 0x26396]   #		|d|ir_history_add(panel_get_path(src_panel));
MEMORY OFFSET:     0x26396     156566  >>156574

0xa57a:	mov rdi, rax                         
0xa57d:	call 0x1504f                         
0xa582:	mov rdi, rax                         
0xa585:	mov eax, 0                           
0xa58a:	call 0x6598                          
0xa58f:	jmp 0xacc2                           #		|b|reak;
0xa594:	mov rdx, qword ptr [rip + 0x2637d]   #		|d|ir_history_prev(src_panel, dst_panel);
MEMORY OFFSET:     0x2637d     156541  >>156549

0xa59b:	mov rax, qword ptr [rip + 0x2636e]   
MEMORY OFFSET:     0x2636e     156526  >>156534

0xa5a2:	mov rsi, rdx                         
0xa5a5:	mov rdi, rax                         
0xa5a8:	mov eax, 0                           
0xa5ad:	call 0x6693                          
0xa5b2:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_restore(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0xa5b9:	mov rdi, rax                         
0xa5bc:	call 0xe319                          
0xa5c1:	mov eax, 0                           #		|s|et_prompt();
0xa5c6:	call 0x769b                          
0xa5cb:	mov eax, 0                           #		saved_il = |i|l_save();
0xa5d0:	call 0xe205                          
0xa5d5:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0xa5dc:	mov rax, qword ptr [rip + 0x2632d]   #		|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x2632d     156461  >>156469

0xa5e3:	mov rdi, rax                         
0xa5e6:	call 0x1504f                         
0xa5eb:	mov rdi, rax                         
0xa5ee:	call 0xd875                          
0xa5f3:	jmp 0xacc2                           #		|b|reak;
0xa5f8:	mov rdx, qword ptr [rip + 0x26319]   #		|d|ir_history_next(src_panel, dst_panel);
MEMORY OFFSET:     0x26319     156441  >>156449

0xa5ff:	mov rax, qword ptr [rip + 0x2630a]   
MEMORY OFFSET:     0x2630a     156426  >>156434

0xa606:	mov rsi, rdx                         
0xa609:	mov rdi, rax                         
0xa60c:	mov eax, 0                           
0xa611:	call 0x661a                          
0xa616:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_restore(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0xa61d:	mov rdi, rax                         
0xa620:	call 0xe319                          
0xa625:	mov eax, 0                           #		|s|et_prompt();
0xa62a:	call 0x769b                          
0xa62f:	mov eax, 0                           #		saved_il = |i|l_save();
0xa634:	call 0xe205                          
0xa639:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0xa640:	mov rax, qword ptr [rip + 0x262c9]   #		|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x262c9     156361  >>156369

0xa647:	mov rdi, rax                         
0xa64a:	call 0x1504f                         
0xa64f:	mov rdi, rax                         
0xa652:	call 0xd875                          
0xa657:	jmp 0xacc2                           #		|b|reak;
0xa65c:	nop                                  #		    |g|oto one_panel_mode;
0xa65d:	mov rax, qword ptr [rip + 0x262ac]   #		|p|anel_set_focus(src_panel, OFF);
MEMORY OFFSET:     0x262ac     156332  >>156340

0xa664:	mov esi, 0                           
0xa669:	mov rdi, rax                         
0xa66c:	call 0x14ed2                         
0xa671:	mov rax, qword ptr [rip + 0x26298]   #		tmp_panel |=| src_panel;
MEMORY OFFSET:     0x26298     156312  >>156320

0xa678:	mov qword ptr [rip + 0x262a1], rax   
MEMORY OFFSET:     0x262a1     156321  >>156329

0xa67f:	mov rax, qword ptr [rip + 0x26292]   #		src_panel |=| dst_panel;
MEMORY OFFSET:     0x26292     156306  >>156314

0xa686:	mov qword ptr [rip + 0x26283], rax   
MEMORY OFFSET:     0x26283     156291  >>156299

0xa68d:	mov rax, qword ptr [rip + 0x2628c]   #		dst_panel |=| tmp_panel;
MEMORY OFFSET:     0x2628c     156300  >>156308

0xa694:	mov qword ptr [rip + 0x2627d], rax   
MEMORY OFFSET:     0x2627d     156285  >>156293

0xa69b:	mov eax, dword ptr [rip + 0x26243]   #		panel_no = |!|panel_no;
MEMORY OFFSET:     0x26243     156227  >>156235

0xa6a1:	test eax, eax                        
0xa6a3:	sete al                              
0xa6a6:	movzx eax, al                        
0xa6a9:	mov dword ptr [rip + 0x26235], eax   #		panel_no |=| !panel_no;
MEMORY OFFSET:     0x26235     156213  >>156221

0xa6af:	mov rax, qword ptr [rip + 0x2625a]   #		|p|anel_set_focus(src_panel, ON);
MEMORY OFFSET:     0x2625a     156250  >>156258

0xa6b6:	mov esi, 1                           
0xa6bb:	mov rdi, rax                         
0xa6be:	call 0x14ed2                         
0xa6c3:	mov rax, qword ptr [rip + 0x26246]   #		|p|anel_activate(src_panel);
MEMORY OFFSET:     0x26246     156230  >>156238

0xa6ca:	mov rdi, rax                         
0xa6cd:	call 0x1131a                         
0xa6d2:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0xa6d9:	mov rdi, rax                         
0xa6dc:	call 0xdf09                          
0xa6e1:	mov eax, 0                           #		|s|et_prompt();
0xa6e6:	call 0x769b                          
0xa6eb:	mov eax, 0                           #		saved_il = |i|l_save();
0xa6f0:	call 0xe205                          
0xa6f5:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0xa6fc:	mov rax, qword ptr [rip + 0x2620d]   #		|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x2620d     156173  >>156181

0xa703:	mov rdi, rax                         
0xa706:	call 0x1504f                         
0xa70b:	mov rdi, rax                         
0xa70e:	call 0xd875                          
0xa713:	mov rax, qword ptr [rip + 0x261f6]   #		|p|anel_no_optimizations(src_panel);
MEMORY OFFSET:     0x261f6     156150  >>156158

0xa71a:	mov rdi, rax                         
0xa71d:	call 0x110b0                         
0xa722:	mov rax, qword ptr [rip + 0x261ef]   #		|p|anel_no_optimizations(dst_panel);
MEMORY OFFSET:     0x261ef     156143  >>156151

0xa729:	mov rdi, rax                         
0xa72c:	call 0x110b0                         
0xa731:	mov eax, 0                           #		|t|ty_touch();
0xa736:	call 0xb9ce                          
0xa73b:	mov rax, qword ptr [rip + 0x261d6]   #		|p|anel_deactivate(dst_panel);
MEMORY OFFSET:     0x261d6     156118  >>156126

0xa742:	mov rdi, rax                         
0xa745:	call 0x11331                         
0xa74a:	mov dword ptr [rip + 0x248d4], 0     #		two_panel_mode |=| 0;
MEMORY OFFSET:     0x248d4     149716  >>149724

0xa754:	mov edi, 1                           #		|r|esize(1);
0xa759:	mov eax, 0                           
0xa75e:	call 0x503a                          
0xa763:	mov rax, qword ptr [rip + 0x261a6]   #		|p|anel_action(src_panel, act_ENABLE_ALL, NULL, NULL, 1);
MEMORY OFFSET:     0x261a6     156070  >>156078

0xa76a:	mov r8d, 1                           
0xa770:	mov ecx, 0                           
0xa775:	mov edx, 0                           
0xa77a:	mov esi, 0xe                         
0xa77f:	mov rdi, rax                         
0xa782:	call 0x1a89a                         
0xa787:	mov rax, qword ptr [rip + 0x2618a]   #		|p|anel_action(dst_panel, act_ENABLE_ALL, NULL, NULL, 1);
MEMORY OFFSET:     0x2618a     156042  >>156050

0xa78e:	mov r8d, 1                           
0xa794:	mov ecx, 0                           
0xa799:	mov edx, 0                           
0xa79e:	mov esi, 0xe                         
0xa7a3:	mov rdi, rax                         
0xa7a6:	call 0x1a89a                         
0xa7ab:	mov rax, qword ptr [rip + 0x2615e]   #		|p|anel_update(src_panel);
MEMORY OFFSET:     0x2615e     155998  >>156006

0xa7b2:	mov rdi, rax                         
0xa7b5:	call 0x14e6a                         
0xa7ba:	jmp 0xacc2                           #		|b|reak;
0xa7bf:	mov rax, qword ptr [rip + 0x2614a]   #		|p|anel_no_optimizations(src_panel);
MEMORY OFFSET:     0x2614a     155978  >>155986

0xa7c6:	mov rdi, rax                         
0xa7c9:	call 0x110b0                         
0xa7ce:	mov rax, qword ptr [rip + 0x26143]   #		|p|anel_no_optimizations(dst_panel);
MEMORY OFFSET:     0x26143     155971  >>155979

0xa7d5:	mov rdi, rax                         
0xa7d8:	call 0x110b0                         
0xa7dd:	mov eax, 0                           #		|t|ty_touch();
0xa7e2:	call 0xb9ce                          
0xa7e7:	mov rax, qword ptr [rip + 0x2612a]   #		|p|anel_activate(dst_panel);
MEMORY OFFSET:     0x2612a     155946  >>155954

0xa7ee:	mov rdi, rax                         
0xa7f1:	call 0x1131a                         
0xa7f6:	mov dword ptr [rip + 0x24828], 1     #		two_panel_mode |=| 1;
MEMORY OFFSET:     0x24828     149544  >>149552

0xa800:	mov edi, 1                           #		|r|esize(1);
0xa805:	mov eax, 0                           
0xa80a:	call 0x503a                          
0xa80f:	mov eax, dword ptr [rip + 0x261cb]   #		if (tty_columns |<| 6 * 2)
MEMORY OFFSET:     0x261cb     156107  >>156115

0xa815:	cmp eax, 0xb                         #		if |(|tty_columns < 6 * 2)
0xa818:	jg 0xa829                            
0xa81a:	mov edi, 1                           #		    |r|efresh(1);
0xa81f:	mov eax, 0                           
0xa824:	call 0x5367                          
0xa829:	mov rax, qword ptr [rip + 0x260e0]   #		|p|anel_action(src_panel, act_ENABLE_SIZE, NULL, NULL, 1);
MEMORY OFFSET:     0x260e0     155872  >>155880

0xa830:	mov r8d, 1                           
0xa836:	mov ecx, 0                           
0xa83b:	mov edx, 0                           
0xa840:	mov esi, 0xb                         
0xa845:	mov rdi, rax                         
0xa848:	call 0x1a89a                         
0xa84d:	mov rax, qword ptr [rip + 0x260c4]   #		|p|anel_action(dst_panel, act_ENABLE_SIZE, NULL, NULL, 1);
MEMORY OFFSET:     0x260c4     155844  >>155852

0xa854:	mov r8d, 1                           
0xa85a:	mov ecx, 0                           
0xa85f:	mov edx, 0                           
0xa864:	mov esi, 0xb                         
0xa869:	mov rdi, rax                         
0xa86c:	call 0x1a89a                         
0xa871:	mov rax, qword ptr [rip + 0x26098]   #		|p|anel_update(src_panel);
MEMORY OFFSET:     0x26098     155800  >>155808

0xa878:	mov rdi, rax                         
0xa87b:	call 0x14e6a                         
0xa880:	mov rax, qword ptr [rip + 0x26091]   #		|p|anel_update(dst_panel);
MEMORY OFFSET:     0x26091     155793  >>155801

0xa887:	mov rdi, rax                         
0xa88a:	call 0x14e6a                         
0xa88f:	jmp 0xacc2                           #		|b|reak;
0xa894:	mov edi, 0                           #		|i|l_echo(0);
0xa899:	call 0xe3a6                          
0xa89e:	mov qword ptr [rbp - 0xf8], 0        #		lock_password |=| NULL;
MEMORY OFFSET:     -0xf8     -248  >>-240

0xa8a9:	lea rax, [rbp - 0xf8]                #		|i|l_read_line("Enter a password: ", &lock_password,
MEMORY OFFSET:     -0xf8     -248  >>-240

0xa8b0:	mov ecx, 0                           
0xa8b5:	mov edx, 0                           
0xa8ba:	mov rsi, rax                         
0xa8bd:	lea rax, [rip + 0x1cde7]             
MEMORY OFFSET:     0x1cde7     118247  >>118255

0xa8c4:	mov rdi, rax                         
0xa8c7:	call 0x5efb                          
0xa8cc:	mov rax, qword ptr [rbp - 0xf8]      #		if (lock_password |=|= NULL || *lock_password == '\0')
MEMORY OFFSET:     -0xf8     -248  >>-240

0xa8d3:	test rax, rax                        #		if |(|lock_password == NULL || *lock_password == '\0')
0xa8d6:	je 0xa8e6                            
0xa8d8:	mov rax, qword ptr [rbp - 0xf8]      #		if (lock_password == NULL || |*|lock_password == '\0')
MEMORY OFFSET:     -0xf8     -248  >>-240

0xa8df:	movzx eax, byte ptr [rax]            
0xa8e2:	test al, al                          #		if (lock_password == NULL |||| *lock_password == '\0')
0xa8e4:	jne 0xa8f5                           
0xa8e6:	mov edi, 1                           #		    |i|l_echo(1);
0xa8eb:	call 0xe3a6                          
0xa8f0:	jmp 0xacc2                           #		    |b|reak;
0xa8f5:	mov qword ptr [rbp - 0xf0], 0        #		for (unlock_password |=| NULL;;)
MEMORY OFFSET:     -0xf0     -240  >>-232

0xa900:	lea rax, [rbp - 0xf0]                #		    |i|l_read_line("Enter password to unlock: ",
MEMORY OFFSET:     -0xf0     -240  >>-232

0xa907:	mov ecx, 0                           
0xa90c:	mov edx, 0                           
0xa911:	mov rsi, rax                         
0xa914:	lea rax, [rip + 0x1cda3]             
MEMORY OFFSET:     0x1cda3     118179  >>118187

0xa91b:	mov rdi, rax                         
0xa91e:	call 0x5efb                          
0xa923:	mov eax, 0                           #		    |t|ty_update();
0xa928:	call 0xb4b7                          
0xa92d:	mov rax, qword ptr [rbp - 0xf0]      #		    if (|u|nlock_password &&
MEMORY OFFSET:     -0xf0     -240  >>-232

0xa934:	test rax, rax                        #		    if |(|unlock_password &&
0xa937:	je 0xa956                            
0xa939:	mov rdx, qword ptr [rbp - 0xf0]      #			|s|trcmp(lock_password, unlock_password) == 0)
MEMORY OFFSET:     -0xf0     -240  >>-232

0xa940:	mov rax, qword ptr [rbp - 0xf8]      
MEMORY OFFSET:     -0xf8     -248  >>-240

0xa947:	mov rsi, rdx                         
0xa94a:	mov rdi, rax                         
0xa94d:	call 0x4af0                          
0xa952:	test eax, eax                        #		    if (unlock_password |&|&
0xa954:	je 0xa988                            
0xa956:	lea rax, [rip + 0x24703]             #		    |i|l_message(lock_bad);
MEMORY OFFSET:     0x24703     149251  >>149259

0xa95d:	mov rdi, rax                         
0xa960:	call 0xfcbe                          
0xa965:	mov eax, 0                           #		    |t|ty_beep();
0xa96a:	call 0xbfbf                          
0xa96f:	mov eax, 0                           #		    |t|ty_update();
0xa974:	call 0xb4b7                          
0xa979:	mov edi, 2                           #		    |s|leep(2);
0xa97e:	call 0x4e70                          
0xa983:	jmp 0xa900                           #		    |i|l_read_line("Enter password to unlock: ",
0xa988:	nop                                  #			|b|reak;
0xa989:	mov eax, 0                           #		|t|ty_update();
0xa98e:	call 0xb4b7                          
0xa993:	mov rax, qword ptr [rbp - 0xf8]      #		|x|free(lock_password);
MEMORY OFFSET:     -0xf8     -248  >>-240

0xa99a:	mov rdi, rax                         
0xa99d:	call 0x1eeae                         
0xa9a2:	mov rax, qword ptr [rbp - 0xf0]      #		|x|free(unlock_password);
MEMORY OFFSET:     -0xf0     -240  >>-232

0xa9a9:	mov rdi, rax                         
0xa9ac:	call 0x1eeae                         
0xa9b1:	mov edi, 1                           #		|i|l_echo(1);
0xa9b6:	call 0xe3a6                          
0xa9bb:	jmp 0xacc2                           #		|b|reak;
0xa9c0:	mov dword ptr [rbp - 0x150], 1       #		cmp_mode |=| CMPDIR_QUICK;
MEMORY OFFSET:     -0x150     -336  >>-328

0xa9ca:	mov rdx, qword ptr [rip + 0x25f47]   #		|p|anel_action(src_panel, act_CMPDIR, dst_panel, &cmp_mode, 1);
MEMORY OFFSET:     0x25f47     155463  >>155471

0xa9d1:	mov rax, qword ptr [rip + 0x25f38]   
MEMORY OFFSET:     0x25f38     155448  >>155456

0xa9d8:	lea rcx, [rbp - 0x150]               
MEMORY OFFSET:     -0x150     -336  >>-328

0xa9df:	mov r8d, 1                           
0xa9e5:	mov esi, 0x2b                        
0xa9ea:	mov rdi, rax                         
0xa9ed:	call 0x1a89a                         
0xa9f2:	jmp 0xacc2                           #		|b|reak;
0xa9f7:	mov dword ptr [rbp - 0x150], 0       #		cmp_mode |=| CMPDIR_THOROUGH;
MEMORY OFFSET:     -0x150     -336  >>-328

0xaa01:	mov rdx, qword ptr [rip + 0x25f10]   #		|p|anel_action(src_panel, act_CMPDIR, dst_panel, &cmp_mode, 1);
MEMORY OFFSET:     0x25f10     155408  >>155416

0xaa08:	mov rax, qword ptr [rip + 0x25f01]   
MEMORY OFFSET:     0x25f01     155393  >>155401

0xaa0f:	lea rcx, [rbp - 0x150]               
MEMORY OFFSET:     -0x150     -336  >>-328

0xaa16:	mov r8d, 1                           
0xaa1c:	mov esi, 0x2b                        
0xaa21:	mov rdi, rax                         
0xaa24:	call 0x1a89a                         
0xaa29:	jmp 0xacc2                           #		|b|reak;
0xaa2e:	mov dword ptr [rbp - 0x154], 0       #		to_case |=| CASE_DOWN;
MEMORY OFFSET:     -0x154     -340  >>-332

0xaa38:	mov rdx, qword ptr [rip + 0x25ed9]   #		|p|anel_action(src_panel, act_CASE, dst_panel, &to_case, 1);
MEMORY OFFSET:     0x25ed9     155353  >>155361

0xaa3f:	mov rax, qword ptr [rip + 0x25eca]   
MEMORY OFFSET:     0x25eca     155338  >>155346

0xaa46:	lea rcx, [rbp - 0x154]               
MEMORY OFFSET:     -0x154     -340  >>-332

0xaa4d:	mov r8d, 1                           
0xaa53:	mov esi, 0x2c                        
0xaa58:	mov rdi, rax                         
0xaa5b:	call 0x1a89a                         
0xaa60:	jmp 0xacc2                           #		|b|reak;
0xaa65:	mov dword ptr [rbp - 0x154], 1       #		to_case |=| CASE_UP;
MEMORY OFFSET:     -0x154     -340  >>-332

0xaa6f:	mov rdx, qword ptr [rip + 0x25ea2]   #		|p|anel_action(src_panel, act_CASE, dst_panel, &to_case, 1);
MEMORY OFFSET:     0x25ea2     155298  >>155306

0xaa76:	mov rax, qword ptr [rip + 0x25e93]   
MEMORY OFFSET:     0x25e93     155283  >>155291

0xaa7d:	lea rcx, [rbp - 0x154]               
MEMORY OFFSET:     -0x154     -340  >>-332

0xaa84:	mov r8d, 1                           
0xaa8a:	mov esi, 0x2c                        
0xaa8f:	mov rdi, rax                         
0xaa92:	call 0x1a89a                         
0xaa97:	jmp 0xacc2                           #		|b|reak;
0xaa9c:	mov rdx, qword ptr [rip + 0x25e75]   #		|p|anel_action(src_panel, act_UP_ONE_DIR, dst_panel, NULL, 1);
MEMORY OFFSET:     0x25e75     155253  >>155261

0xaaa3:	mov rax, qword ptr [rip + 0x25e66]   
MEMORY OFFSET:     0x25e66     155238  >>155246

0xaaaa:	mov r8d, 1                           
0xaab0:	mov ecx, 0                           
0xaab5:	mov esi, 0x2d                        
0xaaba:	mov rdi, rax                         
0xaabd:	call 0x1a89a                         
0xaac2:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_restore(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0xaac9:	mov rdi, rax                         
0xaacc:	call 0xe319                          
0xaad1:	mov eax, 0                           #		|s|et_prompt();
0xaad6:	call 0x769b                          
0xaadb:	mov eax, 0                           #		saved_il = |i|l_save();
0xaae0:	call 0xe205                          
0xaae5:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0xaaec:	mov rax, qword ptr [rip + 0x25e1d]   #		|t|ty_update_title(panel_get_path(src_panel));
MEMORY OFFSET:     0x25e1d     155165  >>155173

0xaaf3:	mov rdi, rax                         
0xaaf6:	call 0x1504f                         
0xaafb:	mov rdi, rax                         
0xaafe:	call 0xd875                          
0xab03:	jmp 0xacc2                           #		|b|reak;
0xab08:	mov rdx, qword ptr [rip + 0x25e09]   #		|p|anel_action(src_panel, act_COMPARE, dst_panel, NULL, 1);
MEMORY OFFSET:     0x25e09     155145  >>155153

0xab0f:	mov rax, qword ptr [rip + 0x25dfa]   
MEMORY OFFSET:     0x25dfa     155130  >>155138

0xab16:	mov r8d, 1                           
0xab1c:	mov ecx, 0                           
0xab21:	mov esi, 0x2e                        
0xab26:	mov rdi, rax                         
0xab29:	call 0x1a89a                         
0xab2e:	jmp 0xacc2                           #		|b|reak;
0xab33:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line("Bin size (in Kb): ", &input, "0",
MEMORY OFFSET:     -0x70     -112  >>-104

0xab37:	mov rdx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xab3b:	lea rax, [rbp - 0xd8]                
MEMORY OFFSET:     -0xd8     -216  >>-208

0xab42:	mov rcx, rdx                         
0xab45:	lea rdx, [rip + 0x1cb8d]             
MEMORY OFFSET:     0x1cb8d     117645  >>117653

0xab4c:	mov rsi, rax                         
0xab4f:	lea rax, [rip + 0x1cb85]             
MEMORY OFFSET:     0x1cb85     117637  >>117645

0xab56:	mov rdi, rax                         
0xab59:	call 0x5efb                          
0xab5e:	test rax, rax                        #		if |(|il_read_line("Bin size (in Kb): ", &input, "0",
0xab61:	je 0xacc2                            
0xab67:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
MEMORY OFFSET:     -0xd8     -216  >>-208

0xab6e:	movzx eax, byte ptr [rax]            
0xab71:	test al, al                          #		    if |(|input[0] == 0)
0xab73:	jne 0xab7a                           
0xab75:	jmp 0xacc2                           #			|b|reak;
0xab7a:	mov rcx, qword ptr [rbp - 0xd8]      #		    |p|anel_action(src_panel, act_BIN_PACKING,
MEMORY OFFSET:     -0xd8     -216  >>-208

0xab81:	mov rdx, qword ptr [rip + 0x25d90]   
MEMORY OFFSET:     0x25d90     155024  >>155032

0xab88:	mov rax, qword ptr [rip + 0x25d81]   
MEMORY OFFSET:     0x25d81     155009  >>155017

0xab8f:	mov r8d, 1                           
0xab95:	mov esi, 0x2f                        
0xab9a:	mov rdi, rax                         
0xab9d:	call 0x1a89a                         
0xaba2:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
MEMORY OFFSET:     -0xd8     -216  >>-208

0xaba9:	mov rdi, rax                         
0xabac:	call 0x1eeae                         
0xabb1:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
MEMORY OFFSET:     -0xd8     -216  >>-208

0xabbc:	jmp 0xacc2                           #		|b|reak;
0xabc1:	mov esi, dword ptr [rbp - 0x158]     #		|p|anel_action(src_panel, act_HORIZONTAL_SCROLL_LEFT,
MEMORY OFFSET:     -0x158     -344  >>-336

0xabc7:	mov rcx, qword ptr [rbp - 0xd8]      
MEMORY OFFSET:     -0xd8     -216  >>-208

0xabce:	mov rdx, qword ptr [rip + 0x25d43]   
MEMORY OFFSET:     0x25d43     154947  >>154955

0xabd5:	mov rax, qword ptr [rip + 0x25d34]   
MEMORY OFFSET:     0x25d34     154932  >>154940

0xabdc:	mov r8d, esi                         
0xabdf:	mov esi, 0x30                        
0xabe4:	mov rdi, rax                         
0xabe7:	call 0x1a89a                         
0xabec:	jmp 0xacc2                           #		|b|reak;
0xabf1:	mov esi, dword ptr [rbp - 0x158]     #		|p|anel_action(src_panel, act_HORIZONTAL_SCROLL_RIGHT,
MEMORY OFFSET:     -0x158     -344  >>-336

0xabf7:	mov rcx, qword ptr [rbp - 0xd8]      
MEMORY OFFSET:     -0xd8     -216  >>-208

0xabfe:	mov rdx, qword ptr [rip + 0x25d13]   
MEMORY OFFSET:     0x25d13     154899  >>154907

0xac05:	mov rax, qword ptr [rip + 0x25d04]   
MEMORY OFFSET:     0x25d04     154884  >>154892

0xac0c:	mov r8d, esi                         
0xac0f:	mov esi, 0x31                        
0xac14:	mov rdi, rax                         
0xac17:	call 0x1a89a                         
0xac1c:	jmp 0xacc2                           #		|b|reak;
0xac21:	mov rdx, qword ptr [rip + 0x25cf0]   #		|p|anel_action(src_panel, act_SELECT_EXTENSION, dst_panel,
MEMORY OFFSET:     0x25cf0     154864  >>154872

0xac28:	mov rax, qword ptr [rip + 0x25ce1]   
MEMORY OFFSET:     0x25ce1     154849  >>154857

0xac2f:	mov r8d, 1                           
0xac35:	mov ecx, 0                           
0xac3a:	mov esi, 0x32                        
0xac3f:	mov rdi, rax                         
0xac42:	call 0x1a89a                         
0xac47:	jmp 0xacc2                           #		|b|reak;
0xac49:	mov rdx, qword ptr [rip + 0x25cc8]   #		|p|anel_action(src_panel, act_UNSELECT_EXTENSION, dst_panel,
MEMORY OFFSET:     0x25cc8     154824  >>154832

0xac50:	mov rax, qword ptr [rip + 0x25cb9]   
MEMORY OFFSET:     0x25cb9     154809  >>154817

0xac57:	mov r8d, 1                           
0xac5d:	mov ecx, 0                           
0xac62:	mov esi, 0x33                        
0xac67:	mov rdi, rax                         
0xac6a:	call 0x1a89a                         
0xac6f:	jmp 0xacc2                           #		|b|reak;
0xac71:	cmp dword ptr [rbp - 0x12c], 0       #		if |(|key)
MEMORY OFFSET:     -0x12c     -300  >>-292

0xac78:	je 0xacc1                            
0xac7a:	mov rax, qword ptr [rbp - 0xc0]      #		    |i|l_free(saved_il);
MEMORY OFFSET:     -0xc0     -192  >>-184

0xac81:	mov rdi, rax                         
0xac84:	call 0xdf09                          
0xac89:	jmp 0xac9d                           #		    while |(|repeat_count--)
0xac8b:	mov eax, dword ptr [rbp - 0x12c]     #			|i|l_dispatch_commands(key, IL_MOVE | IL_EDIT);
MEMORY OFFSET:     -0x12c     -300  >>-292

0xac91:	mov esi, 3                           
0xac96:	mov edi, eax                         
0xac98:	call 0x56bd                          
0xac9d:	mov eax, dword ptr [rbp - 0x158]     #		    while (repeat_count|-|-)
MEMORY OFFSET:     -0x158     -344  >>-336

0xaca3:	lea edx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0xaca6:	mov dword ptr [rbp - 0x158], edx     
MEMORY OFFSET:     -0x158     -344  >>-336

0xacac:	test eax, eax                        #		    while (|r|epeat_count--)
0xacae:	jne 0xac8b                           
0xacb0:	mov eax, 0                           #		    saved_il = |i|l_save();
0xacb5:	call 0xe205                          
0xacba:	mov qword ptr [rbp - 0xc0], rax      
MEMORY OFFSET:     -0xc0     -192  >>-184

0xacc1:	nop                                  #		|b|reak;
0xacc2:	cmp dword ptr [rbp - 0x128], 0       #    while(|!|app_end)
MEMORY OFFSET:     -0x128     -296  >>-288

0xacc9:	je 0x84af                            
0xaccf:	mov rax, qword ptr [rip + 0x25c3a]   #    final_path = |p|anel_get_path(src_panel);
MEMORY OFFSET:     0x25c3a     154682  >>154690

0xacd6:	mov rdi, rax                         
0xacd9:	call 0x1504f                         
0xacde:	mov qword ptr [rbp - 0x80], rax      
MEMORY OFFSET:     -0x80     -128  >>-120

0xace2:	mov rax, qword ptr [rip + 0x25c17]   #    |p|anel_end(left_panel);
MEMORY OFFSET:     0x25c17     154647  >>154655

0xace9:	mov rdi, rax                         
0xacec:	call 0x10bef                         
0xacf1:	mov rax, qword ptr [rip + 0x25c10]   #    |p|anel_end(right_panel);
MEMORY OFFSET:     0x25c10     154640  >>154648

0xacf8:	mov rdi, rax                         
0xacfb:	call 0x10bef                         
0xad00:	mov edi, 0                           #    |t|ty_set_mode(TTY_CANONIC);
0xad05:	call 0xadac                          
0xad0a:	mov eax, 0                           #    |t|ty_defaults();
0xad0f:	call 0xc083                          
0xad14:	mov rax, qword ptr [rip + 0x266f5]   #    if (|i|l)
MEMORY OFFSET:     0x266f5     157429  >>157437

0xad1b:	test rax, rax                        #    if |(|il)
0xad1e:	je 0xad2a                            
0xad20:	mov eax, 0                           #	|i|l_end();
0xad25:	call 0xe15a                          
0xad2a:	mov eax, 0                           #    |s|tatus_end();
0xad2f:	call 0x1014d                         
0xad34:	mov eax, 0                           #    |r|emove_log();
0xad39:	call 0x1f7c7                         
0xad3e:	mov rax, qword ptr [rip + 0x25bb3]   #    |t|ty_end(screen);
MEMORY OFFSET:     0x25bb3     154547  >>154555

0xad45:	mov rdi, rax                         
0xad48:	call 0xb138                          
0xad4d:	cmp dword ptr [rbp - 0x140], 0       #    if |(|output_final_path)
MEMORY OFFSET:     -0x140     -320  >>-312

0xad54:	je 0xad76                            
0xad56:	mov rax, qword ptr [rbp - 0x80]      #	|w|rite(3, final_path, strlen(final_path));
MEMORY OFFSET:     -0x80     -128  >>-120

0xad5a:	mov rdi, rax                         
0xad5d:	call 0x4960                          
0xad62:	mov rdx, rax                         
0xad65:	mov rax, qword ptr [rbp - 0x80]      
MEMORY OFFSET:     -0x80     -128  >>-120

0xad69:	mov rsi, rax                         
0xad6c:	mov edi, 3                           
0xad71:	call 0x4770                          
0xad76:	mov eax, 0                           #    return |0|;
0xad7b:	mov rdx, qword ptr [rbp - 0x18]      #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0xad7f:	sub rdx, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xad88:	je 0xad8f                            
0xad8a:	call 0x4980                          #|}|
0xad8f:	mov rbx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xad93:	leave                                
0xad94:	ret                                  

####################################################################################################
 /home/nahid/reverse/binaries/gnuit/src/tty.c
####################################################################################################

0xad95:	endbr64                              #|{|
0xad99:	push rbp                             
0xad9a:	mov rbp, rsp                         
0xad9d:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xada0:	mov eax, dword ptr [rbp - 4]         #    tty_last_char_flag |=| last_char_flag;
MEMORY OFFSET:     -0x4     -4  >>4

0xada3:	mov dword ptr [rip + 0x25c53], eax   
MEMORY OFFSET:     0x25c53     154707  >>154715

0xada9:	nop                                  #|}|
0xadaa:	pop rbp                              
0xadab:	ret                                  
0xadac:	endbr64                              #|{|
0xadb0:	push rbp                             
0xadb1:	mov rbp, rsp                         
0xadb4:	sub rsp, 0x10                        
0xadb8:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xadbb:	cmp dword ptr [rbp - 4], 1           #    if |(|mode == TTY_NONCANONIC)
MEMORY OFFSET:     -0x4     -4  >>4

0xadbf:	jne 0xaf3e                           
0xadc5:	mov rax, qword ptr [rip + 0x25b94]   #	new_term |=| old_term;
MEMORY OFFSET:     0x25b94     154516  >>154524

0xadcc:	mov rdx, qword ptr [rip + 0x25b95]   
MEMORY OFFSET:     0x25b95     154517  >>154525

0xadd3:	mov qword ptr [rip + 0x25bc6], rax   
MEMORY OFFSET:     0x25bc6     154566  >>154574

0xadda:	mov qword ptr [rip + 0x25bc7], rdx   
MEMORY OFFSET:     0x25bc7     154567  >>154575

0xade1:	mov rax, qword ptr [rip + 0x25b88]   
MEMORY OFFSET:     0x25b88     154504  >>154512

0xade8:	mov rdx, qword ptr [rip + 0x25b89]   
MEMORY OFFSET:     0x25b89     154505  >>154513

0xadef:	mov qword ptr [rip + 0x25bba], rax   
MEMORY OFFSET:     0x25bba     154554  >>154562

0xadf6:	mov qword ptr [rip + 0x25bbb], rdx   
MEMORY OFFSET:     0x25bbb     154555  >>154563

0xadfd:	mov rax, qword ptr [rip + 0x25b7c]   
MEMORY OFFSET:     0x25b7c     154492  >>154500

0xae04:	mov rdx, qword ptr [rip + 0x25b7d]   
MEMORY OFFSET:     0x25b7d     154493  >>154501

0xae0b:	mov qword ptr [rip + 0x25bae], rax   
MEMORY OFFSET:     0x25bae     154542  >>154550

0xae12:	mov qword ptr [rip + 0x25baf], rdx   
MEMORY OFFSET:     0x25baf     154543  >>154551

0xae19:	mov rax, qword ptr [rip + 0x25b70]   
MEMORY OFFSET:     0x25b70     154480  >>154488

0xae20:	mov qword ptr [rip + 0x25ba9], rax   
MEMORY OFFSET:     0x25ba9     154537  >>154545

0xae27:	mov eax, dword ptr [rip + 0x25b6b]   
MEMORY OFFSET:     0x25b6b     154475  >>154483

0xae2d:	mov dword ptr [rip + 0x25ba5], eax   
MEMORY OFFSET:     0x25ba5     154533  >>154541

0xae33:	mov eax, dword ptr [rip + 0x25b67]   #	new_term.c_iflag |&|= ~(IXON | ICRNL | IGNCR | INLCR | IGNBRK | BRKINT);
MEMORY OFFSET:     0x25b67     154471  >>154479

0xae39:	and eax, 0xfffffa3c                  
0xae3e:	mov dword ptr [rip + 0x25b5c], eax   
MEMORY OFFSET:     0x25b5c     154460  >>154468

0xae44:	mov eax, dword ptr [rip + 0x25b5a]   #	new_term.c_oflag |&|= ~OPOST;
MEMORY OFFSET:     0x25b5a     154458  >>154466

0xae4a:	and eax, 0xfffffffe                  
0xae4d:	mov dword ptr [rip + 0x25b51], eax   
MEMORY OFFSET:     0x25b51     154449  >>154457

0xae53:	mov eax, dword ptr [rip + 0x25b53]   #	new_term.c_lflag |||= ISIG | NOFLSH;
MEMORY OFFSET:     0x25b53     154451  >>154459

0xae59:	or al, 0x81                          
0xae5b:	mov dword ptr [rip + 0x25b4b], eax   
MEMORY OFFSET:     0x25b4b     154443  >>154451

0xae61:	mov eax, dword ptr [rip + 0x25b45]   #	new_term.c_lflag |&|= ~(ICANON | ECHO);
MEMORY OFFSET:     0x25b45     154437  >>154445

0xae67:	and eax, 0xfffffff5                  
0xae6a:	mov dword ptr [rip + 0x25b3c], eax   
MEMORY OFFSET:     0x25b3c     154428  >>154436

0xae70:	mov byte ptr [rip + 0x25b3a], 7      #	new_term.c_cc[VINTR] |=| key_INTERRUPT;		/* Ctrl-G */
MEMORY OFFSET:     0x25b3a     154426  >>154434

0xae77:	mov byte ptr [rip + 0x25b34], 0      #	new_term.c_cc[VQUIT] |=| CDISABLE;
MEMORY OFFSET:     0x25b34     154420  >>154428

0xae7e:	mov byte ptr [rip + 0x25b34], 0      #	new_term.c_cc[VSTART] |=| CDISABLE;		/* START (^Q) */
MEMORY OFFSET:     0x25b34     154420  >>154428

0xae85:	mov byte ptr [rip + 0x25b2e], 0      #	new_term.c_cc[VSTOP] |=| CDISABLE;		/* STOP (^S) */
MEMORY OFFSET:     0x25b2e     154414  >>154422

0xae8c:	mov byte ptr [rip + 0x25b24], 1      #	new_term.c_cc[VMIN] |=| 1;
MEMORY OFFSET:     0x25b24     154404  >>154412

0xae93:	mov byte ptr [rip + 0x25b1c], 0      #	new_term.c_cc[VTIME] |=| 0;
MEMORY OFFSET:     0x25b1c     154396  >>154404

0xae9a:	mov byte ptr [rip + 0x25b12], 0      #	new_term.c_cc[VERASE] |=| CDISABLE;
MEMORY OFFSET:     0x25b12     154386  >>154394

0xaea1:	mov byte ptr [rip + 0x25b0c], 0      #	new_term.c_cc[VKILL] |=| CDISABLE;
MEMORY OFFSET:     0x25b0c     154380  >>154388

0xaea8:	mov byte ptr [rip + 0x25b0d], 0      #	new_term.c_cc[VEOL] |=| CDISABLE;
MEMORY OFFSET:     0x25b0d     154381  >>154389

0xaeaf:	mov byte ptr [rip + 0x25b0b], 0      #	new_term.c_cc[VEOL2] |=| CDISABLE;
MEMORY OFFSET:     0x25b0b     154379  >>154387

0xaeb6:	mov byte ptr [rip + 0x25afe], 0x1a   #	new_term.c_cc[VSUSP] |=| key_SUSPEND;             /* Ctrl-Z */
MEMORY OFFSET:     0x25afe     154366  >>154374

0xaebd:	mov byte ptr [rip + 0x25af9], 0      #	new_term.c_cc[VREPRINT] |=| CDISABLE;
MEMORY OFFSET:     0x25af9     154361  >>154369

0xaec4:	mov byte ptr [rip + 0x25af3], 0      #	new_term.c_cc[VDISCARD] |=| CDISABLE;
MEMORY OFFSET:     0x25af3     154355  >>154363

0xaecb:	mov byte ptr [rip + 0x25aed], 0      #	new_term.c_cc[VWERASE] |=| CDISABLE;
MEMORY OFFSET:     0x25aed     154349  >>154357

0xaed2:	mov byte ptr [rip + 0x25ae7], 0      #	new_term.c_cc[VLNEXT] |=| CDISABLE;
MEMORY OFFSET:     0x25ae7     154343  >>154351

0xaed9:	lea rax, [rip + 0x25ac0]             #	|t|csetattr(TTY_OUTPUT, TCSADRAIN, &new_term);
MEMORY OFFSET:     0x25ac0     154304  >>154312

0xaee0:	mov rdx, rax                         
0xaee3:	mov esi, 1                           
0xaee8:	mov edi, 1                           
0xaeed:	call 0x4d20                          
0xaef2:	lea rax, [rip + 0x25aa7]             #	ospeed = |c|fgetospeed(&new_term);
MEMORY OFFSET:     0x25aa7     154279  >>154287

0xaef9:	mov rdi, rax                         
0xaefc:	call 0x4cd0                          
0xaf01:	mov dword ptr [rip + 0x25fa1], eax   #	ospeed |=| cfgetospeed(&new_term);
MEMORY OFFSET:     0x25fa1     155553  >>155561

0xaf07:	mov edx, 1                           #	|i|octl(TTY_OUTPUT, TCXONC, 1);
0xaf0c:	mov esi, 0x540a                      
0xaf11:	mov edi, 1                           
0xaf16:	mov eax, 0                           
0xaf1b:	call 0x4a30                          
0xaf20:	mov esi, 1                           #	|t|cflow(TTY_OUTPUT, TCOON);
0xaf25:	mov edi, 1                           
0xaf2a:	call 0x4d60                          
0xaf2f:	mov eax, dword ptr [rip + 0x24d53]   #	|t|ty_set_interrupt_char(tty_interrupt_char);
MEMORY OFFSET:     0x24d53     150867  >>150875

0xaf35:	mov edi, eax                         
0xaf37:	call 0xaf73                          
0xaf3c:	jmp 0xaf57                           
0xaf3e:	lea rax, [rip + 0x25a1b]             #	|t|csetattr(TTY_OUTPUT, TCSADRAIN, &old_term);
MEMORY OFFSET:     0x25a1b     154139  >>154147

0xaf45:	mov rdx, rax                         
0xaf48:	mov esi, 1                           
0xaf4d:	mov edi, 1                           
0xaf52:	call 0x4d20                          
0xaf57:	mov eax, dword ptr [rbp - 4]         #    tty_mode |=| mode;
MEMORY OFFSET:     -0x4     -4  >>4

0xaf5a:	mov dword ptr [rip + 0x25f24], eax   
MEMORY OFFSET:     0x25f24     155428  >>155436

0xaf60:	nop                                  #|}|
0xaf61:	leave                                
0xaf62:	ret                                  
0xaf63:	endbr64                              #|{|
0xaf67:	push rbp                             
0xaf68:	mov rbp, rsp                         
0xaf6b:	mov eax, dword ptr [rip + 0x25f13]   #    return |t|ty_mode;
MEMORY OFFSET:     0x25f13     155411  >>155419

0xaf71:	pop rbp                              #|}|
0xaf72:	ret                                  
0xaf73:	endbr64                              #|{|
0xaf77:	push rbp                             
0xaf78:	mov rbp, rsp                         
0xaf7b:	sub rsp, 0x60                        
0xaf7f:	mov dword ptr [rbp - 0x54], edi      
MEMORY OFFSET:     -0x54     -84  >>-76

0xaf82:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xaf8b:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xaf8f:	xor eax, eax                         
0xaf91:	lea rax, [rbp - 0x50]                #    |t|cgetattr(TTY_OUTPUT, &current_term);
MEMORY OFFSET:     -0x50     -80  >>-72

0xaf95:	mov rsi, rax                         
0xaf98:	mov edi, 1                           
0xaf9d:	call 0x4d10                          
0xafa2:	mov eax, dword ptr [rbp - 0x54]      #    current_term.c_cc[VINTR] |=| c;
MEMORY OFFSET:     -0x54     -84  >>-76

0xafa5:	mov byte ptr [rbp - 0x3f], al        
MEMORY OFFSET:     -0x3f     -63  >>-55

0xafa8:	mov byte ptr [rbp - 0x3e], 0         #    current_term.c_cc[VQUIT] |=| CDISABLE;
MEMORY OFFSET:     -0x3e     -62  >>-54

0xafac:	lea rax, [rbp - 0x50]                #    |t|csetattr(TTY_OUTPUT, TCSADRAIN, &current_term);
MEMORY OFFSET:     -0x50     -80  >>-72

0xafb0:	mov rdx, rax                         
0xafb3:	mov esi, 1                           
0xafb8:	mov edi, 1                           
0xafbd:	call 0x4d20                          
0xafc2:	mov eax, dword ptr [rbp - 0x54]      #    tty_interrupt_char |=| c;
MEMORY OFFSET:     -0x54     -84  >>-76

0xafc5:	mov dword ptr [rip + 0x24cbd], eax   
MEMORY OFFSET:     0x24cbd     150717  >>150725

0xafcb:	nop                                  #|}|
0xafcc:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xafd0:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xafd9:	je 0xafe0                            
0xafdb:	call 0x4980                          
0xafe0:	leave                                
0xafe1:	ret                                  
0xafe2:	endbr64                              #|{|
0xafe6:	push rbp                             
0xafe7:	mov rbp, rsp                         
0xafea:	sub rsp, 0x10                        
0xafee:	mov dword ptr [rbp - 8], 0           #    int |b|ytes_transferred = 0;
MEMORY OFFSET:     -0x8     -8  >>0

0xaff5:	jmp 0xb031                           #    while |(|bytes_transferred < tty_index)
0xaff7:	mov eax, dword ptr [rip + 0x25e83]   #			   tty_index |-| bytes_transferred);
MEMORY OFFSET:     0x25e83     155267  >>155275

0xaffd:	sub eax, dword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xb000:	cdqe                                 #	int count = |x|write(TTY_OUTPUT,
0xb002:	mov edx, dword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xb005:	movsxd rdx, edx                      
0xb008:	lea rcx, [rip + 0x25a71]             
MEMORY OFFSET:     0x25a71     154225  >>154233

0xb00f:	add rcx, rdx                         
0xb012:	mov rdx, rax                         
0xb015:	mov rsi, rcx                         
0xb018:	mov edi, 1                           
0xb01d:	call 0x1ef4c                         
0xb022:	mov dword ptr [rbp - 4], eax         
MEMORY OFFSET:     -0x4     -4  >>4

0xb025:	cmp dword ptr [rbp - 4], 0           #	if |(|count < 0)
MEMORY OFFSET:     -0x4     -4  >>4

0xb029:	js 0xb03e                            
0xb02b:	mov eax, dword ptr [rbp - 4]         #	bytes_transferred |+|= count;
MEMORY OFFSET:     -0x4     -4  >>4

0xb02e:	add dword ptr [rbp - 8], eax         
MEMORY OFFSET:     -0x8     -8  >>0

0xb031:	mov eax, dword ptr [rip + 0x25e49]   #    while (bytes_transferred |<| tty_index)
MEMORY OFFSET:     0x25e49     155209  >>155217

0xb037:	cmp dword ptr [rbp - 8], eax         
MEMORY OFFSET:     -0x8     -8  >>0

0xb03a:	jl 0xaff7                            
0xb03c:	jmp 0xb03f                           
0xb03e:	nop                                  #	    |b|reak;
0xb03f:	mov dword ptr [rip + 0x25e37], 0     #    tty_index |=| 0;
MEMORY OFFSET:     0x25e37     155191  >>155199

0xb049:	nop                                  #|}|
0xb04a:	leave                                
0xb04b:	ret                                  
0xb04c:	endbr64                              #|{|
0xb050:	push rbp                             
0xb051:	mov rbp, rsp                         
0xb054:	sub rsp, 0x10                        
0xb058:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xb05b:	mov eax, dword ptr [rip + 0x25e1f]   #    if (tty_index |=|= TTY_CACHE_SIZE)
MEMORY OFFSET:     0x25e1f     155167  >>155175

0xb061:	cmp eax, 0x400                       #    if |(|tty_index == TTY_CACHE_SIZE)
0xb066:	jne 0xb072                           
0xb068:	mov eax, 0                           #	|t|ty_flush();
0xb06d:	call 0xafe2                          
0xb072:	mov eax, dword ptr [rip + 0x25e08]   #    tty_cache[tty_index|+|+] = (char)c;
MEMORY OFFSET:     0x25e08     155144  >>155152

0xb078:	lea edx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0xb07b:	mov dword ptr [rip + 0x25dff], edx   
MEMORY OFFSET:     0x25dff     155135  >>155143

0xb081:	mov edx, dword ptr [rbp - 4]         #    tty_cache[tty_index++] = |(|char)c;
MEMORY OFFSET:     -0x4     -4  >>4

0xb084:	mov ecx, edx                         
0xb086:	cdqe                                 #    tty_cache[tty_index++] |=| (char)c;
0xb088:	lea rdx, [rip + 0x259f1]             
MEMORY OFFSET:     0x259f1     154097  >>154105

0xb08f:	mov byte ptr [rax + rdx], cl         
0xb092:	mov eax, 1                           #    return |1|;
0xb097:	leave                                #|}|
0xb098:	ret                                  
0xb099:	endbr64                              #|{|
0xb09d:	push rbp                             
0xb09e:	mov rbp, rsp                         
0xb0a1:	mov ecx, dword ptr [rip + 0x25935]   #    |t|puts(TTY_CLEAR_SCREEN, tty_lines, tty_writec);
MEMORY OFFSET:     0x25935     153909  >>153917

0xb0a7:	mov rax, qword ptr [rip + 0x24c9a]   #    tputs(|T|TY_CLEAR_SCREEN, tty_lines, tty_writec);
MEMORY OFFSET:     0x24c9a     150682  >>150690

0xb0ae:	lea rdx, [rip - 0x69]                #    |t|puts(TTY_CLEAR_SCREEN, tty_lines, tty_writec);
MEMORY OFFSET:     -0x69     -105  >>-97

0xb0b5:	mov esi, ecx                         
0xb0b7:	mov rdi, rax                         
0xb0ba:	call 0x47e0                          
0xb0bf:	mov eax, 0                           #    |t|ty_flush();
0xb0c4:	call 0xafe2                          
0xb0c9:	nop                                  #|}|
0xb0ca:	pop rbp                              
0xb0cb:	ret                                  
0xb0cc:	endbr64                              #|{|
0xb0d0:	push rbp                             
0xb0d1:	mov rbp, rsp                         
0xb0d4:	mov eax, dword ptr [rip + 0x25902]   #    |t|puts(TTY_START_CURSORAPP,tty_lines-1,tty_writec);
MEMORY OFFSET:     0x25902     153858  >>153866

0xb0da:	lea ecx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0xb0dd:	mov rax, qword ptr [rip + 0x24da4]   #    tputs(|T|TY_START_CURSORAPP,tty_lines-1,tty_writec);
MEMORY OFFSET:     0x24da4     150948  >>150956

0xb0e4:	lea rdx, [rip - 0x9f]                #    |t|puts(TTY_START_CURSORAPP,tty_lines-1,tty_writec);
MEMORY OFFSET:     -0x9f     -159  >>-151

0xb0eb:	mov esi, ecx                         
0xb0ed:	mov rdi, rax                         
0xb0f0:	call 0x47e0                          
0xb0f5:	mov eax, 0                           #    |t|ty_flush();
0xb0fa:	call 0xafe2                          
0xb0ff:	nop                                  #|}|
0xb100:	pop rbp                              
0xb101:	ret                                  
0xb102:	endbr64                              #|{|
0xb106:	push rbp                             
0xb107:	mov rbp, rsp                         
0xb10a:	mov eax, dword ptr [rip + 0x258cc]   #    |t|puts(TTY_END_CURSORAPP,tty_lines-1,tty_writec);
MEMORY OFFSET:     0x258cc     153804  >>153812

0xb110:	lea ecx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0xb113:	mov rax, qword ptr [rip + 0x24d8e]   #    tputs(|T|TY_END_CURSORAPP,tty_lines-1,tty_writec);
MEMORY OFFSET:     0x24d8e     150926  >>150934

0xb11a:	lea rdx, [rip - 0xd5]                #    |t|puts(TTY_END_CURSORAPP,tty_lines-1,tty_writec);
MEMORY OFFSET:     -0xd5     -213  >>-205

0xb121:	mov esi, ecx                         
0xb123:	mov rdi, rax                         
0xb126:	call 0x47e0                          
0xb12b:	mov eax, 0                           #    |t|ty_flush();
0xb130:	call 0xafe2                          
0xb135:	nop                                  #|}|
0xb136:	pop rbp                              
0xb137:	ret                                  
0xb138:	endbr64                              #|{|
0xb13c:	push rbp                             
0xb13d:	mov rbp, rsp                         
0xb140:	sub rsp, 0x10                        
0xb144:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xb148:	mov eax, dword ptr [rip + 0x25d36]   #    if (tty_mode |=|= TTY_NONCANONIC)
MEMORY OFFSET:     0x25d36     154934  >>154942

0xb14e:	cmp eax, 1                           #    if |(|tty_mode == TTY_NONCANONIC)
0xb151:	jne 0xb15d                           
0xb153:	mov edi, 0                           #	|t|ty_set_mode(TTY_CANONIC);
0xb158:	call 0xadac                          
0xb15d:	mov eax, 0                           #    |t|ty_defaults();
0xb162:	call 0xc083                          
0xb167:	cmp qword ptr [rbp - 8], 0           #    if|(|screen && LinuxConsole)
MEMORY OFFSET:     -0x8     -8  >>0

0xb16c:	je 0xb184                            
0xb16e:	mov eax, dword ptr [rip + 0x258cc]   #    if(screen |&|& LinuxConsole)
MEMORY OFFSET:     0x258cc     153804  >>153812

0xb174:	test eax, eax                        
0xb176:	je 0xb184                            
0xb178:	mov rax, qword ptr [rbp - 8]         #	|t|ty_put_screen(screen);
MEMORY OFFSET:     -0x8     -8  >>0

0xb17c:	mov rdi, rax                         
0xb17f:	call 0xce57                          
0xb184:	mov eax, 0                           #    |t|ty_end_cursorapp();
0xb189:	call 0xb102                          
0xb18e:	mov eax, dword ptr [rip + 0x25848]   #    |t|ty_io_goto(tty_lines, 0);
MEMORY OFFSET:     0x25848     153672  >>153680

0xb194:	mov esi, 0                           
0xb199:	mov edi, eax                         
0xb19b:	call 0xb9ff                          
0xb1a0:	mov eax, 0                           #    |t|ty_flush();
0xb1a5:	call 0xafe2                          
0xb1aa:	mov edi, 0xa                         #    |p|rintf("\n");
0xb1af:	call 0x47d0                          
0xb1b4:	nop                                  #|}|
0xb1b5:	leave                                
0xb1b6:	ret                                  
0xb1b7:	endbr64                              #|{|
0xb1bb:	push rbp                             
0xb1bc:	mov rbp, rsp                         
0xb1bf:	sub rsp, 0x20                        
0xb1c3:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb1c7:	mov rax, qword ptr [rbp - 0x18]      #    first = second |=| key_seq;
MEMORY OFFSET:     -0x18     -24  >>-16

0xb1cb:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xb1cf:	mov rax, qword ptr [rbp - 8]         #    first |=| second = key_seq;
MEMORY OFFSET:     -0x8     -8  >>0

0xb1d3:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xb1d7:	mov eax, dword ptr [rip + 0x25777]   #    if (tty_kbdmode |=|= TTY_RESTRICTED_INPUT && *key_seq != '^')
MEMORY OFFSET:     0x25777     153463  >>153471

0xb1dd:	test eax, eax                        #    if |(|tty_kbdmode == TTY_RESTRICTED_INPUT && *key_seq != '^')
0xb1df:	jne 0xb2aa                           
0xb1e5:	mov rax, qword ptr [rbp - 0x18]      #    if (tty_kbdmode == TTY_RESTRICTED_INPUT && |*|key_seq != '^')
MEMORY OFFSET:     -0x18     -24  >>-16

0xb1e9:	movzx eax, byte ptr [rax]            
0xb1ec:	cmp al, 0x5e                         #    if (tty_kbdmode == TTY_RESTRICTED_INPUT |&|& *key_seq != '^')
0xb1ee:	je 0xb2aa                            
0xb1f4:	mov eax, 0                           #	return |N|ULL;
0xb1f9:	jmp 0xb2c4                           
0xb1fe:	mov rax, qword ptr [rbp - 8]         #	if (|*|second == '^')
MEMORY OFFSET:     -0x8     -8  >>0

0xb202:	movzx eax, byte ptr [rax]            
0xb205:	cmp al, 0x5e                         #	if |(|*second == '^')
0xb207:	jne 0xb28d                           
0xb20d:	add qword ptr [rbp - 8], 1           #	    if |(|*++second)
MEMORY OFFSET:     -0x8     -8  >>0

0xb212:	mov rax, qword ptr [rbp - 8]         #	    if (|*|++second)
MEMORY OFFSET:     -0x8     -8  >>0

0xb216:	movzx eax, byte ptr [rax]            
0xb219:	test al, al                          #	    if |(|*++second)
0xb21b:	je 0xb286                            
0xb21d:	mov rax, qword ptr [rbp - 8]         #		if (toupper(|*|second) == 'G' || toupper(*second) == 'Z')
MEMORY OFFSET:     -0x8     -8  >>0

0xb221:	movzx eax, byte ptr [rax]            
0xb224:	movzx eax, al                        #		if (|t|oupper(*second) == 'G' || toupper(*second) == 'Z')
0xb227:	mov edi, eax                         
0xb229:	call 0x4890                          
0xb22e:	cmp eax, 0x47                        #		if |(|toupper(*second) == 'G' || toupper(*second) == 'Z')
0xb231:	je 0xb249                            
0xb233:	mov rax, qword ptr [rbp - 8]         #		if (toupper(*second) == 'G' || toupper(|*|second) == 'Z')
MEMORY OFFSET:     -0x8     -8  >>0

0xb237:	movzx eax, byte ptr [rax]            
0xb23a:	movzx eax, al                        #		if (toupper(*second) == 'G' || |t|oupper(*second) == 'Z')
0xb23d:	mov edi, eax                         
0xb23f:	call 0x4890                          
0xb244:	cmp eax, 0x5a                        #		if (toupper(*second) == 'G' |||| toupper(*second) == 'Z')
0xb247:	jne 0xb250                           
0xb249:	mov eax, 0                           #		    return |N|ULL;
0xb24e:	jmp 0xb2c4                           
0xb250:	mov rax, qword ptr [rbp - 8]         #		*first++ = key_ctrl_table[(*second|+|+ & 0x7F) - ' '];
MEMORY OFFSET:     -0x8     -8  >>0

0xb254:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0xb258:	mov qword ptr [rbp - 8], rdx         
MEMORY OFFSET:     -0x8     -8  >>0

0xb25c:	movzx eax, byte ptr [rax]            #		*first++ = key_ctrl_table[(|*|second++ & 0x7F) - ' '];
0xb25f:	movzx eax, al                        #		*first++ = key_ctrl_table[(*second++ |&| 0x7F) - ' '];
0xb262:	and eax, 0x7f                        
0xb265:	lea ecx, [rax - 0x20]                #		*first++ = key_ctrl_table[(*second++ & 0x7F) |-| ' '];
MEMORY OFFSET:     -0x20     -32  >>-24

0xb268:	mov rax, qword ptr [rbp - 0x10]      #		*first|+|+ = key_ctrl_table[(*second++ & 0x7F) - ' '];
MEMORY OFFSET:     -0x10     -16  >>-8

0xb26c:	lea rdx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0xb270:	mov qword ptr [rbp - 0x10], rdx      
MEMORY OFFSET:     -0x10     -16  >>-8

0xb274:	movsxd rdx, ecx                      #		*first++ = key_ctrl_table|[|(*second++ & 0x7F) - ' '];
0xb277:	lea rcx, [rip + 0x24f62]             
MEMORY OFFSET:     0x24f62     151394  >>151402

0xb27e:	movzx edx, byte ptr [rdx + rcx]      
0xb282:	mov byte ptr [rax], dl               #		*first++ |=| key_ctrl_table[(*second++ & 0x7F) - ' '];
0xb284:	jmp 0xb2aa                           
0xb286:	mov eax, 0                           #		return |N|ULL;
0xb28b:	jmp 0xb2c4                           
0xb28d:	mov rdx, qword ptr [rbp - 8]         #	    *first++ = *second|+|+;
MEMORY OFFSET:     -0x8     -8  >>0

0xb291:	lea rax, [rdx + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0xb295:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xb299:	mov rax, qword ptr [rbp - 0x10]      #	    *first|+|+ = *second++;
MEMORY OFFSET:     -0x10     -16  >>-8

0xb29d:	lea rcx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0xb2a1:	mov qword ptr [rbp - 0x10], rcx      
MEMORY OFFSET:     -0x10     -16  >>-8

0xb2a5:	movzx edx, byte ptr [rdx]            #	    *first++ = |*|second++;
0xb2a8:	mov byte ptr [rax], dl               #	    *first++ |=| *second++;
0xb2aa:	mov rax, qword ptr [rbp - 8]         #    while (|*|second)
MEMORY OFFSET:     -0x8     -8  >>0

0xb2ae:	movzx eax, byte ptr [rax]            
0xb2b1:	test al, al                          
0xb2b3:	jne 0xb1fe                           
0xb2b9:	mov rax, qword ptr [rbp - 0x10]      #    *first |=| 0;
MEMORY OFFSET:     -0x10     -16  >>-8

0xb2bd:	mov byte ptr [rax], 0                
0xb2c0:	mov rax, qword ptr [rbp - 0x18]      #    return |(|char *)key_seq;
MEMORY OFFSET:     -0x18     -24  >>-16

0xb2c4:	leave                                #|}|
0xb2c5:	ret                                  
0xb2c6:	endbr64                              #|{|
0xb2ca:	push rbp                             
0xb2cb:	mov rbp, rsp                         
0xb2ce:	sub rsp, 0x30                        
0xb2d2:	mov qword ptr [rbp - 0x28], rdi      
MEMORY OFFSET:     -0x28     -40  >>-32

0xb2d6:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xb2df:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xb2e3:	xor eax, eax                         
0xb2e5:	mov byte ptr [rip + 0x25fd4], 0      #    keystr[0] |=| '\0';
MEMORY OFFSET:     0x25fd4     155604  >>155612

0xb2ec:	mov rax, qword ptr [rbp - 0x28]      #    for (ptr |=| (unsigned char *)key_seq; *ptr; ptr++)
MEMORY OFFSET:     -0x28     -40  >>-32

0xb2f0:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb2f4:	jmp 0xb48b                           #    |f|or (ptr = (unsigned char *)key_seq; *ptr; ptr++)
0xb2f9:	mov rax, qword ptr [rbp - 0x18]      #	if |(|ptr != (unsigned char *)key_seq)
MEMORY OFFSET:     -0x18     -24  >>-16

0xb2fd:	cmp rax, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0xb301:	je 0xb324                            
0xb303:	lea rax, [rip + 0x25fb6]             #	    |s|trcat((char *)keystr, " ");
MEMORY OFFSET:     0x25fb6     155574  >>155582

0xb30a:	mov rdi, rax                         
0xb30d:	call 0x4960                          
0xb312:	mov rdx, rax                         
0xb315:	lea rax, [rip + 0x25fa4]             
MEMORY OFFSET:     0x25fa4     155556  >>155564

0xb31c:	add rax, rdx                         
0xb31f:	mov word ptr [rax], 0x20             
0xb324:	mov rax, qword ptr [rbp - 0x18]      #	if (|*|ptr == key_ESC)
MEMORY OFFSET:     -0x18     -24  >>-16

0xb328:	movzx eax, byte ptr [rax]            
0xb32b:	cmp al, 0x1b                         #	if |(|*ptr == key_ESC)
0xb32d:	jne 0xb360                           
0xb32f:	lea rax, [rip + 0x25f8a]             #	    |s|trcat((char *)keystr, "escape");
MEMORY OFFSET:     0x25f8a     155530  >>155538

0xb336:	mov rdi, rax                         
0xb339:	call 0x4960                          
0xb33e:	mov rdx, rax                         
0xb341:	lea rax, [rip + 0x25f78]             
MEMORY OFFSET:     0x25f78     155512  >>155520

0xb348:	add rax, rdx                         
0xb34b:	mov dword ptr [rax], 0x61637365      
0xb351:	mov word ptr [rax + 4], 0x6570       
MEMORY OFFSET:     0x4     4  >>12

0xb357:	mov byte ptr [rax + 6], 0            
MEMORY OFFSET:     0x6     6  >>14

0xb35b:	jmp 0xb486                           
0xb360:	mov rax, qword ptr [rbp - 0x18]      #	else if (|*|ptr == ' ')
MEMORY OFFSET:     -0x18     -24  >>-16

0xb364:	movzx eax, byte ptr [rax]            
0xb367:	cmp al, 0x20                         #	else if |(|*ptr == ' ')
0xb369:	jne 0xb398                           
0xb36b:	lea rax, [rip + 0x25f4e]             #	    |s|trcat((char *)keystr, "space");
MEMORY OFFSET:     0x25f4e     155470  >>155478

0xb372:	mov rdi, rax                         
0xb375:	call 0x4960                          
0xb37a:	mov rdx, rax                         
0xb37d:	lea rax, [rip + 0x25f3c]             
MEMORY OFFSET:     0x25f3c     155452  >>155460

0xb384:	add rax, rdx                         
0xb387:	mov dword ptr [rax], 0x63617073      
0xb38d:	mov word ptr [rax + 4], 0x65         
MEMORY OFFSET:     0x4     4  >>12

0xb393:	jmp 0xb486                           
0xb398:	mov rax, qword ptr [rbp - 0x18]      #	else if (|*|ptr == key_BACKSPACE)
MEMORY OFFSET:     -0x18     -24  >>-16

0xb39c:	movzx eax, byte ptr [rax]            
0xb39f:	cmp al, 0x7f                         #	else if |(|*ptr == key_BACKSPACE)
0xb3a1:	jne 0xb3d7                           
0xb3a3:	lea rax, [rip + 0x25f16]             #	    |s|trcat((char *)keystr, "backspace");
MEMORY OFFSET:     0x25f16     155414  >>155422

0xb3aa:	mov rdi, rax                         
0xb3ad:	call 0x4960                          
0xb3b2:	mov rdx, rax                         
0xb3b5:	lea rax, [rip + 0x25f04]             
MEMORY OFFSET:     0x25f04     155396  >>155404

0xb3bc:	add rax, rdx                         
0xb3bf:	movabs rcx, 0x636170736b636162       
0xb3c9:	mov qword ptr [rax], rcx             
0xb3cc:	mov word ptr [rax + 8], 0x65         
MEMORY OFFSET:     0x8     8  >>16

0xb3d2:	jmp 0xb486                           
0xb3d7:	mov rax, qword ptr [rbp - 0x18]      #	else if (|*|ptr == key_CTRL_SPACE)
MEMORY OFFSET:     -0x18     -24  >>-16

0xb3db:	movzx eax, byte ptr [rax]            
0xb3de:	cmp al, 0xff                         #	else if |(|*ptr == key_CTRL_SPACE)
0xb3e0:	jne 0xb410                           
0xb3e2:	lea rax, [rip + 0x25ed7]             #	    |s|trcat((char *)keystr, "^space");
MEMORY OFFSET:     0x25ed7     155351  >>155359

0xb3e9:	mov rdi, rax                         
0xb3ec:	call 0x4960                          
0xb3f1:	mov rdx, rax                         
0xb3f4:	lea rax, [rip + 0x25ec5]             
MEMORY OFFSET:     0x25ec5     155333  >>155341

0xb3fb:	add rax, rdx                         
0xb3fe:	mov dword ptr [rax], 0x6170735e      
0xb404:	mov word ptr [rax + 4], 0x6563       
MEMORY OFFSET:     0x4     4  >>12

0xb40a:	mov byte ptr [rax + 6], 0            
MEMORY OFFSET:     0x6     6  >>14

0xb40e:	jmp 0xb486                           
0xb410:	call 0x4ec0                          #	else if (|i|scntrl(*ptr))
0xb415:	mov rdx, qword ptr [rax]             
0xb418:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb41c:	movzx eax, byte ptr [rax]            
0xb41f:	movzx eax, al                        
0xb422:	add rax, rax                         
0xb425:	add rax, rdx                         
0xb428:	movzx eax, word ptr [rax]            
0xb42b:	movzx eax, ax                        
0xb42e:	and eax, 2                           
0xb431:	test eax, eax                        #	else if |(|iscntrl(*ptr))
0xb433:	je 0xb462                            
0xb435:	mov byte ptr [rbp - 0xb], 0x5e       #	    x[0] |=| '^';
MEMORY OFFSET:     -0xb     -11  >>-3

0xb439:	mov rax, qword ptr [rbp - 0x18]      #	    x[1] = |*|ptr + 'A' - 1;
MEMORY OFFSET:     -0x18     -24  >>-16

0xb43d:	movzx eax, byte ptr [rax]            
0xb440:	add eax, 0x40                        #	    x[1] = *ptr + 'A' |-| 1;
0xb443:	mov byte ptr [rbp - 0xa], al         #	    x[1] |=| *ptr + 'A' - 1;
MEMORY OFFSET:     -0xa     -10  >>-2

0xb446:	mov byte ptr [rbp - 9], 0            #	    x[2] |=| '\0';
MEMORY OFFSET:     -0x9     -9  >>-1

0xb44a:	lea rax, [rbp - 0xb]                 #	    |s|trcat((char *)keystr, x);
MEMORY OFFSET:     -0xb     -11  >>-3

0xb44e:	mov rsi, rax                         
0xb451:	lea rax, [rip + 0x25e68]             
MEMORY OFFSET:     0x25e68     155240  >>155248

0xb458:	mov rdi, rax                         
0xb45b:	call 0x4db0                          
0xb460:	jmp 0xb486                           
0xb462:	mov rax, qword ptr [rbp - 0x18]      #	    x[0] = |*|ptr;
MEMORY OFFSET:     -0x18     -24  >>-16

0xb466:	movzx eax, byte ptr [rax]            
0xb469:	mov byte ptr [rbp - 0xb], al         #	    x[0] |=| *ptr;
MEMORY OFFSET:     -0xb     -11  >>-3

0xb46c:	mov byte ptr [rbp - 0xa], 0          #	    x[1] |=| '\0';
MEMORY OFFSET:     -0xa     -10  >>-2

0xb470:	lea rax, [rbp - 0xb]                 #	    |s|trcat((char *)keystr, x);
MEMORY OFFSET:     -0xb     -11  >>-3

0xb474:	mov rsi, rax                         
0xb477:	lea rax, [rip + 0x25e42]             
MEMORY OFFSET:     0x25e42     155202  >>155210

0xb47e:	mov rdi, rax                         
0xb481:	call 0x4db0                          
0xb486:	add qword ptr [rbp - 0x18], 1        #    for (ptr = (unsigned char *)key_seq; *ptr; ptr|+|+)
MEMORY OFFSET:     -0x18     -24  >>-16

0xb48b:	mov rax, qword ptr [rbp - 0x18]      #    for (ptr = (unsigned char *)key_seq; |*|ptr; ptr++)
MEMORY OFFSET:     -0x18     -24  >>-16

0xb48f:	movzx eax, byte ptr [rax]            
0xb492:	test al, al                          
0xb494:	jne 0xb2f9                           
0xb49a:	lea rax, [rip + 0x25e1f]             #    return |(|unsigned char *)keystr;
MEMORY OFFSET:     0x25e1f     155167  >>155175

0xb4a1:	mov rdx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0xb4a5:	sub rdx, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xb4ae:	je 0xb4b5                            
0xb4b0:	call 0x4980                          
0xb4b5:	leave                                
0xb4b6:	ret                                  
0xb4b7:	endbr64                              #|{|
0xb4bb:	push rbp                             
0xb4bc:	mov rbp, rsp                         
0xb4bf:	sub rsp, 0x20                        
0xb4c3:	mov dword ptr [rbp - 0x14], 0xffffffff#    int |t|ty_io_cursor_x = -1;
MEMORY OFFSET:     -0x14     -20  >>-12

0xb4ca:	mov dword ptr [rbp - 0x10], 0xffffffff#    int |t|ty_io_cursor_y = -1;
MEMORY OFFSET:     -0x10     -16  >>-8

0xb4d1:	mov edx, dword ptr [rip + 0x25509]   #    int last_pos = tty_columns |*| tty_lines;
MEMORY OFFSET:     0x25509     152841  >>152849

0xb4d7:	mov eax, dword ptr [rip + 0x254ff]   
MEMORY OFFSET:     0x254ff     152831  >>152839

0xb4dd:	imul eax, edx                        #    int |l|ast_pos = tty_columns * tty_lines;
0xb4e0:	mov dword ptr [rbp - 0xc], eax       
MEMORY OFFSET:     -0xc     -12  >>-4

0xb4e3:	mov eax, dword ptr [rip + 0x25513]   #    if (tty_last_char_flag |=|= OFF)
MEMORY OFFSET:     0x25513     152851  >>152859

0xb4e9:	test eax, eax                        #    if |(|tty_last_char_flag == OFF)
0xb4eb:	jne 0xb4f1                           
0xb4ed:	sub dword ptr [rbp - 0xc], 1         #	last_pos|-|-;
MEMORY OFFSET:     -0xc     -12  >>-4

0xb4f1:	mov edi, 0                           #    |t|ty_cursor(OFF);
0xb4f6:	call 0xbfe3                          
0xb4fb:	mov dword ptr [rbp - 0x18], 0        #    for (pos |=| 0; pos < last_pos; pos++)
MEMORY OFFSET:     -0x18     -24  >>-16

0xb502:	jmp 0xb602                           #    |f|or (pos = 0; pos < last_pos; pos++)
0xb507:	mov rdx, qword ptr [rip + 0x25512]   #	if (tty_scr|[|pos] != tty_prev_scr[pos] ||
MEMORY OFFSET:     0x25512     152850  >>152858

0xb50e:	mov eax, dword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb511:	cdqe                                 
0xb513:	add rax, rdx                         
0xb516:	movzx edx, byte ptr [rax]            
0xb519:	mov rcx, qword ptr [rip + 0x25510]   #	if (tty_scr[pos] != tty_prev_scr|[|pos] ||
MEMORY OFFSET:     0x25510     152848  >>152856

0xb520:	mov eax, dword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb523:	cdqe                                 
0xb525:	add rax, rcx                         
0xb528:	movzx eax, byte ptr [rax]            
0xb52b:	cmp dl, al                           #	if |(|tty_scr[pos] != tty_prev_scr[pos] ||
0xb52d:	jne 0xb55b                           
0xb52f:	mov rdx, qword ptr [rip + 0x254f2]   #	    tty_atr|[|pos] != tty_prev_atr[pos])
MEMORY OFFSET:     0x254f2     152818  >>152826

0xb536:	mov eax, dword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb539:	cdqe                                 
0xb53b:	add rax, rdx                         
0xb53e:	movzx edx, byte ptr [rax]            
0xb541:	mov rcx, qword ptr [rip + 0x254f0]   #	    tty_atr[pos] != tty_prev_atr|[|pos])
MEMORY OFFSET:     0x254f0     152816  >>152824

0xb548:	mov eax, dword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb54b:	cdqe                                 
0xb54d:	add rax, rcx                         
0xb550:	movzx eax, byte ptr [rax]            
0xb553:	cmp dl, al                           #	if (tty_scr[pos] != tty_prev_scr[pos] ||||
0xb555:	je 0xb5fe                            
0xb55b:	mov esi, dword ptr [rip + 0x2547f]   #	    y = pos |/| tty_columns;
MEMORY OFFSET:     0x2547f     152703  >>152711

0xb561:	mov eax, dword ptr [rbp - 0x18]      #	    y |=| pos / tty_columns;
MEMORY OFFSET:     -0x18     -24  >>-16

0xb564:	cdq                                  
0xb565:	idiv esi                             
0xb567:	mov dword ptr [rbp - 8], eax         
MEMORY OFFSET:     -0x8     -8  >>0

0xb56a:	mov ecx, dword ptr [rip + 0x25470]   #	    x = pos |%| tty_columns;
MEMORY OFFSET:     0x25470     152688  >>152696

0xb570:	mov eax, dword ptr [rbp - 0x18]      #	    x |=| pos % tty_columns;
MEMORY OFFSET:     -0x18     -24  >>-16

0xb573:	cdq                                  
0xb574:	idiv ecx                             
0xb576:	mov dword ptr [rbp - 4], edx         
MEMORY OFFSET:     -0x4     -4  >>4

0xb579:	mov eax, dword ptr [rbp - 4]         #	    if |(|x != tty_io_cursor_x || y != tty_io_cursor_y)
MEMORY OFFSET:     -0x4     -4  >>4

0xb57c:	cmp eax, dword ptr [rbp - 0x14]      
MEMORY OFFSET:     -0x14     -20  >>-12

0xb57f:	jne 0xb589                           
0xb581:	mov eax, dword ptr [rbp - 8]         #	    if (x != tty_io_cursor_x |||| y != tty_io_cursor_y)
MEMORY OFFSET:     -0x8     -8  >>0

0xb584:	cmp eax, dword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xb587:	je 0xb5a4                            
0xb589:	mov eax, dword ptr [rbp - 4]         #		|t|ty_io_goto(tty_io_cursor_y = y, tty_io_cursor_x = x);
MEMORY OFFSET:     -0x4     -4  >>4

0xb58c:	mov dword ptr [rbp - 0x14], eax      
MEMORY OFFSET:     -0x14     -20  >>-12

0xb58f:	mov eax, dword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xb592:	mov dword ptr [rbp - 0x10], eax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xb595:	mov edx, dword ptr [rbp - 0x14]      
MEMORY OFFSET:     -0x14     -20  >>-12

0xb598:	mov eax, dword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xb59b:	mov esi, edx                         
0xb59d:	mov edi, eax                         
0xb59f:	call 0xb9ff                          
0xb5a4:	mov rdx, qword ptr [rip + 0x2547d]   #	    tty_io_colors(tty_atr|[|pos]);
MEMORY OFFSET:     0x2547d     152701  >>152709

0xb5ab:	mov eax, dword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb5ae:	cdqe                                 
0xb5b0:	add rax, rdx                         
0xb5b3:	movzx eax, byte ptr [rax]            
0xb5b6:	movzx eax, al                        #	    |t|ty_io_colors(tty_atr[pos]);
0xb5b9:	mov edi, eax                         
0xb5bb:	call 0xbe56                          
0xb5c0:	mov rdx, qword ptr [rip + 0x25459]   #	    tty_writec(tty_scr|[|pos]);
MEMORY OFFSET:     0x25459     152665  >>152673

0xb5c7:	mov eax, dword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb5ca:	cdqe                                 
0xb5cc:	add rax, rdx                         
0xb5cf:	movzx eax, byte ptr [rax]            
0xb5d2:	movzx eax, al                        #	    |t|ty_writec(tty_scr[pos]);
0xb5d5:	mov edi, eax                         
0xb5d7:	mov eax, 0                           
0xb5dc:	call 0xb04c                          
0xb5e1:	add dword ptr [rbp - 0x14], 1        #	    if |(|++tty_io_cursor_x == tty_columns)
MEMORY OFFSET:     -0x14     -20  >>-12

0xb5e5:	mov eax, dword ptr [rip + 0x253f5]   #	    if (++tty_io_cursor_x |=|= tty_columns)
MEMORY OFFSET:     0x253f5     152565  >>152573

0xb5eb:	cmp dword ptr [rbp - 0x14], eax      #	    if |(|++tty_io_cursor_x == tty_columns)
MEMORY OFFSET:     -0x14     -20  >>-12

0xb5ee:	jne 0xb5fe                           
0xb5f0:	mov dword ptr [rbp - 0x14], 0        #		tty_io_cursor_x |=| 0;
MEMORY OFFSET:     -0x14     -20  >>-12

0xb5f7:	mov dword ptr [rbp - 0x10], 0xffffffff#		tty_io_cursor_y |=| -1;
MEMORY OFFSET:     -0x10     -16  >>-8

0xb5fe:	add dword ptr [rbp - 0x18], 1        #    for (pos = 0; pos < last_pos; pos|+|+)
MEMORY OFFSET:     -0x18     -24  >>-16

0xb602:	mov eax, dword ptr [rbp - 0x18]      #    for (pos = 0; pos |<| last_pos; pos++)
MEMORY OFFSET:     -0x18     -24  >>-16

0xb605:	cmp eax, dword ptr [rbp - 0xc]       
MEMORY OFFSET:     -0xc     -12  >>-4

0xb608:	jl 0xb507                            
0xb60e:	mov edx, dword ptr [rip + 0x253ec]   #    |t|ty_io_goto(tty_cursor_y, tty_cursor_x);
MEMORY OFFSET:     0x253ec     152556  >>152564

0xb614:	mov eax, dword ptr [rip + 0x253ea]   
MEMORY OFFSET:     0x253ea     152554  >>152562

0xb61a:	mov esi, edx                         
0xb61c:	mov edi, eax                         
0xb61e:	call 0xb9ff                          
0xb623:	mov edi, 1                           #    |t|ty_cursor(ON);
0xb628:	call 0xbfe3                          
0xb62d:	mov eax, dword ptr [rip + 0x2584d]   #    if (|t|ty_index)
MEMORY OFFSET:     0x2584d     153677  >>153685

0xb633:	test eax, eax                        #    if |(|tty_index)
0xb635:	je 0xb641                            
0xb637:	mov eax, 0                           #	|t|ty_flush();
0xb63c:	call 0xafe2                          
0xb641:	mov edx, dword ptr [rip + 0x25399]   #    memcpy(tty_prev_scr, tty_scr, tty_columns |*| tty_lines * sizeof(char));
MEMORY OFFSET:     0x25399     152473  >>152481

0xb647:	mov eax, dword ptr [rip + 0x2538f]   
MEMORY OFFSET:     0x2538f     152463  >>152471

0xb64d:	imul eax, edx                        
0xb650:	movsxd rdx, eax                      #    |m|emcpy(tty_prev_scr, tty_scr, tty_columns * tty_lines * sizeof(char));
0xb653:	mov rcx, qword ptr [rip + 0x253c6]   
MEMORY OFFSET:     0x253c6     152518  >>152526

0xb65a:	mov rax, qword ptr [rip + 0x253cf]   
MEMORY OFFSET:     0x253cf     152527  >>152535

0xb661:	mov rsi, rcx                         
0xb664:	mov rdi, rax                         
0xb667:	call 0x4b70                          
0xb66c:	mov edx, dword ptr [rip + 0x2536e]   #    memcpy(tty_prev_atr, tty_atr, tty_columns |*| tty_lines * sizeof(char));
MEMORY OFFSET:     0x2536e     152430  >>152438

0xb672:	mov eax, dword ptr [rip + 0x25364]   
MEMORY OFFSET:     0x25364     152420  >>152428

0xb678:	imul eax, edx                        
0xb67b:	movsxd rdx, eax                      #    |m|emcpy(tty_prev_atr, tty_atr, tty_columns * tty_lines * sizeof(char));
0xb67e:	mov rcx, qword ptr [rip + 0x253a3]   
MEMORY OFFSET:     0x253a3     152483  >>152491

0xb685:	mov rax, qword ptr [rip + 0x253ac]   
MEMORY OFFSET:     0x253ac     152492  >>152500

0xb68c:	mov rsi, rcx                         
0xb68f:	mov rdi, rax                         
0xb692:	call 0x4b70                          
0xb697:	nop                                  #|}|
0xb698:	leave                                
0xb699:	ret                                  
0xb69a:	endbr64                              #|{|
0xb69e:	push rbp                             
0xb69f:	mov rbp, rsp                         
0xb6a2:	sub rsp, 0x10                        
0xb6a6:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xb6aa:	mov dword ptr [rbp - 0xc], esi       
MEMORY OFFSET:     -0xc     -12  >>-4

0xb6ad:	mov edx, dword ptr [rip + 0x257cd]   #    if (tty_index |+| len >= TTY_CACHE_SIZE)
MEMORY OFFSET:     0x257cd     153549  >>153557

0xb6b3:	mov eax, dword ptr [rbp - 0xc]       
MEMORY OFFSET:     -0xc     -12  >>-4

0xb6b6:	add eax, edx                         
0xb6b8:	cmp eax, 0x3ff                       #    if |(|tty_index + len >= TTY_CACHE_SIZE)
0xb6bd:	jle 0xb6c9                           
0xb6bf:	mov eax, 0                           #	|t|ty_flush();
0xb6c4:	call 0xafe2                          
0xb6c9:	mov eax, dword ptr [rbp - 0xc]       #    |m|emcpy(tty_cache + tty_index, s, len);
MEMORY OFFSET:     -0xc     -12  >>-4

0xb6cc:	movsxd rdx, eax                      
0xb6cf:	mov eax, dword ptr [rip + 0x257ab]   
MEMORY OFFSET:     0x257ab     153515  >>153523

0xb6d5:	cdqe                                 
0xb6d7:	lea rcx, [rip + 0x253a2]             
MEMORY OFFSET:     0x253a2     152482  >>152490

0xb6de:	add rcx, rax                         
0xb6e1:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xb6e5:	mov rsi, rax                         
0xb6e8:	mov rdi, rcx                         
0xb6eb:	call 0x4b70                          
0xb6f0:	mov edx, dword ptr [rip + 0x2578a]   #    tty_index |+|= len;
MEMORY OFFSET:     0x2578a     153482  >>153490

0xb6f6:	mov eax, dword ptr [rbp - 0xc]       
MEMORY OFFSET:     -0xc     -12  >>-4

0xb6f9:	add eax, edx                         
0xb6fb:	mov dword ptr [rip + 0x2577f], eax   
MEMORY OFFSET:     0x2577f     153471  >>153479

0xb701:	mov eax, dword ptr [rbp - 0xc]       #    return |l|en;
MEMORY OFFSET:     -0xc     -12  >>-4

0xb704:	leave                                #|}|
0xb705:	ret                                  
0xb706:	endbr64                              #|{|
0xb70a:	push rbp                             
0xb70b:	mov rbp, rsp                         
0xb70e:	sub rsp, 0x20                        
0xb712:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb716:	mov dword ptr [rbp - 0x1c], esi      
MEMORY OFFSET:     -0x1c     -28  >>-20

0xb719:	mov eax, dword ptr [rip + 0x252e1]   #    int |x| = tty_cursor_x;
MEMORY OFFSET:     0x252e1     152289  >>152297

0xb71f:	mov dword ptr [rbp - 8], eax         
MEMORY OFFSET:     -0x8     -8  >>0

0xb722:	mov edx, dword ptr [rip + 0x252d8]   #    tty_cursor_x |+|= length;
MEMORY OFFSET:     0x252d8     152280  >>152288

0xb728:	mov eax, dword ptr [rbp - 0x1c]      
MEMORY OFFSET:     -0x1c     -28  >>-20

0xb72b:	add eax, edx                         
0xb72d:	mov dword ptr [rip + 0x252cd], eax   
MEMORY OFFSET:     0x252cd     152269  >>152277

0xb733:	mov eax, dword ptr [rip + 0x252a7]   #    if (x |>|= tty_columns)
MEMORY OFFSET:     0x252a7     152231  >>152239

0xb739:	cmp dword ptr [rbp - 8], eax         #    if |(|x >= tty_columns)
MEMORY OFFSET:     -0x8     -8  >>0

0xb73c:	jl 0xb748                            
0xb73e:	mov eax, 0                           #	return |0|;
0xb743:	jmp 0xb7e8                           
0xb748:	mov edx, dword ptr [rip + 0x252b6]   #    if (tty_cursor_y |>|= tty_lines)
MEMORY OFFSET:     0x252b6     152246  >>152254

0xb74e:	mov eax, dword ptr [rip + 0x25288]   
MEMORY OFFSET:     0x25288     152200  >>152208

0xb754:	cmp edx, eax                         #    if |(|tty_cursor_y >= tty_lines)
0xb756:	jl 0xb762                            
0xb758:	mov eax, 0                           #	return |0|;
0xb75d:	jmp 0xb7e8                           
0xb762:	mov edx, dword ptr [rbp - 8]         #    if (x |+| length > tty_columns)
MEMORY OFFSET:     -0x8     -8  >>0

0xb765:	mov eax, dword ptr [rbp - 0x1c]      
MEMORY OFFSET:     -0x1c     -28  >>-20

0xb768:	add edx, eax                         
0xb76a:	mov eax, dword ptr [rip + 0x25270]   #    if (x + length |>| tty_columns)
MEMORY OFFSET:     0x25270     152176  >>152184

0xb770:	cmp edx, eax                         #    if |(|x + length > tty_columns)
0xb772:	jle 0xb780                           
0xb774:	mov eax, dword ptr [rip + 0x25266]   #	length = tty_columns |-| x;
MEMORY OFFSET:     0x25266     152166  >>152174

0xb77a:	sub eax, dword ptr [rbp - 8]         #	length |=| tty_columns - x;
MEMORY OFFSET:     -0x8     -8  >>0

0xb77d:	mov dword ptr [rbp - 0x1c], eax      
MEMORY OFFSET:     -0x1c     -28  >>-20

0xb780:	mov edx, dword ptr [rip + 0x2527e]   #    tty_offset = (tty_cursor_y |*| tty_columns) + x;
MEMORY OFFSET:     0x2527e     152190  >>152198

0xb786:	mov eax, dword ptr [rip + 0x25254]   
MEMORY OFFSET:     0x25254     152148  >>152156

0xb78c:	imul edx, eax                        
0xb78f:	mov eax, dword ptr [rbp - 8]         #    tty_offset |=| (tty_cursor_y * tty_columns) + x;
MEMORY OFFSET:     -0x8     -8  >>0

0xb792:	add eax, edx                         
0xb794:	mov dword ptr [rbp - 4], eax         
MEMORY OFFSET:     -0x4     -4  >>4

0xb797:	mov eax, dword ptr [rbp - 0x1c]      #    |m|emcpy(tty_scr + tty_offset, buf, length);
MEMORY OFFSET:     -0x1c     -28  >>-20

0xb79a:	movsxd rdx, eax                      
0xb79d:	mov rcx, qword ptr [rip + 0x2527c]   
MEMORY OFFSET:     0x2527c     152188  >>152196

0xb7a4:	mov eax, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0xb7a7:	cdqe                                 
0xb7a9:	add rcx, rax                         #    memcpy(tty_scr |+| tty_offset, buf, length);
0xb7ac:	mov rax, qword ptr [rbp - 0x18]      #    |m|emcpy(tty_scr + tty_offset, buf, length);
MEMORY OFFSET:     -0x18     -24  >>-16

0xb7b0:	mov rsi, rax                         
0xb7b3:	mov rdi, rcx                         
0xb7b6:	call 0x4b70                          
0xb7bb:	mov eax, dword ptr [rbp - 0x1c]      #    |m|emset(tty_atr + tty_offset, tty_current_attribute, length);
MEMORY OFFSET:     -0x1c     -28  >>-20

0xb7be:	movsxd rdx, eax                      
0xb7c1:	movzx eax, byte ptr [rip + 0x25240]  
MEMORY OFFSET:     0x25240     152128  >>152136

0xb7c8:	movzx eax, al                        
0xb7cb:	mov rsi, qword ptr [rip + 0x25256]   
MEMORY OFFSET:     0x25256     152150  >>152158

0xb7d2:	mov ecx, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0xb7d5:	movsxd rcx, ecx                      
0xb7d8:	add rcx, rsi                         #    memset(tty_atr |+| tty_offset, tty_current_attribute, length);
0xb7db:	mov esi, eax                         #    |m|emset(tty_atr + tty_offset, tty_current_attribute, length);
0xb7dd:	mov rdi, rcx                         
0xb7e0:	call 0x4a10                          
0xb7e5:	mov eax, dword ptr [rbp - 0x1c]      #    return |l|ength;
MEMORY OFFSET:     -0x1c     -28  >>-20

0xb7e8:	leave                                #|}|
0xb7e9:	ret                                  
0xb7ea:	endbr64                              #|{|
0xb7ee:	push rbp                             
0xb7ef:	mov rbp, rsp                         
0xb7f2:	sub rsp, 0x20                        
0xb7f6:	mov dword ptr [rbp - 0x14], edi      
MEMORY OFFSET:     -0x14     -20  >>-12

0xb7f9:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xb802:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xb806:	xor eax, eax                         
0xb808:	mov eax, dword ptr [rbp - 0x14]      #    char |c|haracter = c;
MEMORY OFFSET:     -0x14     -20  >>-12

0xb80b:	mov byte ptr [rbp - 9], al           
MEMORY OFFSET:     -0x9     -9  >>-1

0xb80e:	lea rax, [rbp - 9]                   #    return |t|ty_puts(&character, sizeof(char));
MEMORY OFFSET:     -0x9     -9  >>-1

0xb812:	mov esi, 1                           
0xb817:	mov rdi, rax                         
0xb81a:	call 0xb706                          
0xb81f:	mov rdx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0xb823:	sub rdx, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xb82c:	je 0xb833                            
0xb82e:	call 0x4980                          
0xb833:	leave                                
0xb834:	ret                                  
0xb835:	endbr64                              #|{|
0xb839:	push rbp                             
0xb83a:	mov rbp, rsp                         
0xb83d:	sub rsp, 0x20                        
0xb841:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb845:	mov dword ptr [rbp - 0x1c], esi      
MEMORY OFFSET:     -0x1c     -28  >>-20

0xb848:	mov eax, 0                           #    |t|ty_update();
0xb84d:	call 0xb4b7                          
0xb852:	mov rax, qword ptr [rip + 0x25b9f]   #    if (|t|ty_enter_idle_hook)
MEMORY OFFSET:     0x25b9f     154527  >>154535

0xb859:	test rax, rax                        #    if |(|tty_enter_idle_hook)
0xb85c:	je 0xb86c                            
0xb85e:	mov rdx, qword ptr [rip + 0x25b93]   #	(|*|tty_enter_idle_hook)();
MEMORY OFFSET:     0x25b93     154515  >>154523

0xb865:	mov eax, 0                           
0xb86a:	call rdx                             
0xb86c:	mov eax, dword ptr [rbp - 0x1c]      #    bytes = |x|read(TTY_INPUT, buf, length);
MEMORY OFFSET:     -0x1c     -28  >>-20

0xb86f:	movsxd rdx, eax                      
0xb872:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xb876:	mov rsi, rax                         
0xb879:	mov edi, 0                           
0xb87e:	call 0x1eee5                         
0xb883:	mov dword ptr [rbp - 4], eax         
MEMORY OFFSET:     -0x4     -4  >>4

0xb886:	mov rax, qword ptr [rip + 0x25b73]   #    if (|t|ty_exit_idle_hook)
MEMORY OFFSET:     0x25b73     154483  >>154491

0xb88d:	test rax, rax                        #    if |(|tty_exit_idle_hook)
0xb890:	je 0xb8a0                            
0xb892:	mov rdx, qword ptr [rip + 0x25b67]   #	(|*|tty_exit_idle_hook)();
MEMORY OFFSET:     0x25b67     154471  >>154479

0xb899:	mov eax, 0                           
0xb89e:	call rdx                             
0xb8a0:	mov eax, dword ptr [rbp - 4]         #    return |b|ytes;
MEMORY OFFSET:     -0x4     -4  >>4

0xb8a3:	leave                                #|}|
0xb8a4:	ret                                  
0xb8a5:	endbr64                              #|{|
0xb8a9:	push rbp                             
0xb8aa:	mov rbp, rsp                         
0xb8ad:	mov eax, 0                           #    |t|ty_io_clear();
0xb8b2:	call 0xb099                          
0xb8b7:	mov edx, dword ptr [rip + 0x2511f]   #    memset(tty_scr,      '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
MEMORY OFFSET:     0x2511f     151839  >>151847

0xb8bd:	mov eax, dword ptr [rip + 0x2511d]   
MEMORY OFFSET:     0x2511d     151837  >>151845

0xb8c3:	imul eax, edx                        
0xb8c6:	movsxd rdx, eax                      #    |m|emset(tty_scr,      '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb8c9:	mov rax, qword ptr [rip + 0x25150]   
MEMORY OFFSET:     0x25150     151888  >>151896

0xb8d0:	mov esi, 0                           
0xb8d5:	mov rdi, rax                         
0xb8d8:	call 0x4a10                          
0xb8dd:	mov edx, dword ptr [rip + 0x250f9]   #    memset(tty_atr,      '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
MEMORY OFFSET:     0x250f9     151801  >>151809

0xb8e3:	mov eax, dword ptr [rip + 0x250f7]   
MEMORY OFFSET:     0x250f7     151799  >>151807

0xb8e9:	imul eax, edx                        
0xb8ec:	movsxd rdx, eax                      #    |m|emset(tty_atr,      '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb8ef:	mov rax, qword ptr [rip + 0x25132]   
MEMORY OFFSET:     0x25132     151858  >>151866

0xb8f6:	mov esi, 0                           
0xb8fb:	mov rdi, rax                         
0xb8fe:	call 0x4a10                          
0xb903:	mov edx, dword ptr [rip + 0x250d3]   #    memset(tty_prev_scr, '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
MEMORY OFFSET:     0x250d3     151763  >>151771

0xb909:	mov eax, dword ptr [rip + 0x250d1]   
MEMORY OFFSET:     0x250d1     151761  >>151769

0xb90f:	imul eax, edx                        
0xb912:	movsxd rdx, eax                      #    |m|emset(tty_prev_scr, '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb915:	mov rax, qword ptr [rip + 0x25114]   
MEMORY OFFSET:     0x25114     151828  >>151836

0xb91c:	mov esi, 0                           
0xb921:	mov rdi, rax                         
0xb924:	call 0x4a10                          
0xb929:	mov edx, dword ptr [rip + 0x250ad]   #    memset(tty_prev_atr, '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
MEMORY OFFSET:     0x250ad     151725  >>151733

0xb92f:	mov eax, dword ptr [rip + 0x250ab]   
MEMORY OFFSET:     0x250ab     151723  >>151731

0xb935:	imul eax, edx                        
0xb938:	movsxd rdx, eax                      #    |m|emset(tty_prev_atr, '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb93b:	mov rax, qword ptr [rip + 0x250f6]   
MEMORY OFFSET:     0x250f6     151798  >>151806

0xb942:	mov esi, 0                           
0xb947:	mov rdi, rax                         
0xb94a:	call 0x4a10                          
0xb94f:	mov dword ptr [rip + 0x250a7], 0     #    tty_cursor_x |=| 0;
MEMORY OFFSET:     0x250a7     151719  >>151727

0xb959:	mov dword ptr [rip + 0x250a1], 0     #    tty_cursor_y |=| 0;
MEMORY OFFSET:     0x250a1     151713  >>151721

0xb963:	nop                                  #|}|
0xb964:	pop rbp                              
0xb965:	ret                                  
0xb966:	endbr64                              #|{|
0xb96a:	push rbp                             
0xb96b:	mov rbp, rsp                         
0xb96e:	mov edx, dword ptr [rip + 0x25068]   #	   tty_lines |*| tty_columns * sizeof(unsigned char));
MEMORY OFFSET:     0x25068     151656  >>151664

0xb974:	mov eax, dword ptr [rip + 0x25066]   
MEMORY OFFSET:     0x25066     151654  >>151662

0xb97a:	imul eax, edx                        
0xb97d:	movsxd rdx, eax                      #    |m|emset(tty_scr, ' ',
0xb980:	mov rax, qword ptr [rip + 0x25099]   
MEMORY OFFSET:     0x25099     151705  >>151713

0xb987:	mov esi, 0x20                        
0xb98c:	mov rdi, rax                         
0xb98f:	call 0x4a10                          
0xb994:	mov edx, dword ptr [rip + 0x25042]   #	   tty_lines |*| tty_columns * sizeof(unsigned char));
MEMORY OFFSET:     0x25042     151618  >>151626

0xb99a:	mov eax, dword ptr [rip + 0x25040]   
MEMORY OFFSET:     0x25040     151616  >>151624

0xb9a0:	imul eax, edx                        
0xb9a3:	movsxd rdx, eax                      #    |m|emset(tty_atr, tty_current_attribute,
0xb9a6:	movzx eax, byte ptr [rip + 0x2505b]  
MEMORY OFFSET:     0x2505b     151643  >>151651

0xb9ad:	movzx ecx, al                        
0xb9b0:	mov rax, qword ptr [rip + 0x25071]   
MEMORY OFFSET:     0x25071     151665  >>151673

0xb9b7:	mov esi, ecx                         
0xb9b9:	mov rdi, rax                         
0xb9bc:	call 0x4a10                          
0xb9c1:	mov eax, 0                           #    |t|ty_touch();
0xb9c6:	call 0xb9ce                          
0xb9cb:	nop                                  #|}|
0xb9cc:	pop rbp                              
0xb9cd:	ret                                  
0xb9ce:	endbr64                              #|{|
0xb9d2:	push rbp                             
0xb9d3:	mov rbp, rsp                         
0xb9d6:	mov edx, dword ptr [rip + 0x25000]   #    memset(tty_prev_scr, '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
MEMORY OFFSET:     0x25000     151552  >>151560

0xb9dc:	mov eax, dword ptr [rip + 0x24ffe]   
MEMORY OFFSET:     0x24ffe     151550  >>151558

0xb9e2:	imul eax, edx                        
0xb9e5:	movsxd rdx, eax                      #    |m|emset(tty_prev_scr, '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb9e8:	mov rax, qword ptr [rip + 0x25041]   
MEMORY OFFSET:     0x25041     151617  >>151625

0xb9ef:	mov esi, 0                           
0xb9f4:	mov rdi, rax                         
0xb9f7:	call 0x4a10                          
0xb9fc:	nop                                  #|}|
0xb9fd:	pop rbp                              
0xb9fe:	ret                                  
0xb9ff:	endbr64                              #|{|
0xba03:	push rbp                             
0xba04:	mov rbp, rsp                         
0xba07:	sub rsp, 0x10                        
0xba0b:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xba0e:	mov dword ptr [rbp - 8], esi         
MEMORY OFFSET:     -0x8     -8  >>0

0xba11:	mov eax, dword ptr [rip + 0x24419]   #    if (|T|TY_MS_FLAG == 0)
MEMORY OFFSET:     0x24419     148505  >>148513

0xba17:	test eax, eax                        #    if |(|TTY_MS_FLAG == 0)
0xba19:	jne 0xba25                           
0xba1b:	mov eax, 0                           #	|t|ty_defaults();
0xba20:	call 0xc083                          
0xba25:	cmp dword ptr [rbp - 8], 0           #    if |(|x < 0 || x >= tty_columns ||
MEMORY OFFSET:     -0x8     -8  >>0

0xba29:	js 0xba47                            
0xba2b:	mov eax, dword ptr [rip + 0x24faf]   #    if (x < 0 || x |>|= tty_columns ||
MEMORY OFFSET:     0x24faf     151471  >>151479

0xba31:	cmp dword ptr [rbp - 8], eax         #    if (x < 0 |||| x >= tty_columns ||
MEMORY OFFSET:     -0x8     -8  >>0

0xba34:	jge 0xba47                           
0xba36:	cmp dword ptr [rbp - 4], 0           #    if (x < 0 || x >= tty_columns ||||
MEMORY OFFSET:     -0x4     -4  >>4

0xba3a:	js 0xba47                            
0xba3c:	mov eax, dword ptr [rip + 0x24f9a]   #	y < 0 || y |>|= tty_lines)
MEMORY OFFSET:     0x24f9a     151450  >>151458

0xba42:	cmp dword ptr [rbp - 4], eax         #	y < 0 |||| y >= tty_lines)
MEMORY OFFSET:     -0x4     -4  >>4

0xba45:	jl 0xba86                            
0xba47:	mov eax, dword ptr [rip + 0x24f8f]   #	tputs(|t|goto(TTY_CURSOR_MOVE, tty_columns - 1, tty_lines - 1),
MEMORY OFFSET:     0x24f8f     151439  >>151447

0xba4d:	lea edx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0xba50:	mov eax, dword ptr [rip + 0x24f8a]   
MEMORY OFFSET:     0x24f8a     151434  >>151442

0xba56:	lea ecx, [rax - 1]                   
MEMORY OFFSET:     -0x1     -1  >>7

0xba59:	mov rax, qword ptr [rip + 0x24308]   #	tputs(tgoto(|T|TY_CURSOR_MOVE, tty_columns - 1, tty_lines - 1),
MEMORY OFFSET:     0x24308     148232  >>148240

0xba60:	mov esi, ecx                         #	tputs(|t|goto(TTY_CURSOR_MOVE, tty_columns - 1, tty_lines - 1),
0xba62:	mov rdi, rax                         
0xba65:	call 0x4920                          
0xba6a:	mov rcx, rax                         
0xba6d:	lea rax, [rip - 0xa28]               #	|t|puts(tgoto(TTY_CURSOR_MOVE, tty_columns - 1, tty_lines - 1),
MEMORY OFFSET:     -0xa28     -2600  >>-2592

0xba74:	mov rdx, rax                         
0xba77:	mov esi, 1                           
0xba7c:	mov rdi, rcx                         
0xba7f:	call 0x47e0                          
0xba84:	jmp 0xbab8                           
0xba86:	mov rax, qword ptr [rip + 0x242db]   #	tputs(tgoto(|T|TY_CURSOR_MOVE, x, y), 1, tty_writec);
MEMORY OFFSET:     0x242db     148187  >>148195

0xba8d:	mov edx, dword ptr [rbp - 4]         #	tputs(|t|goto(TTY_CURSOR_MOVE, x, y), 1, tty_writec);
MEMORY OFFSET:     -0x4     -4  >>4

0xba90:	mov ecx, dword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xba93:	mov esi, ecx                         
0xba95:	mov rdi, rax                         
0xba98:	call 0x4920                          
0xba9d:	mov rcx, rax                         
0xbaa0:	lea rax, [rip - 0xa5b]               #	|t|puts(tgoto(TTY_CURSOR_MOVE, x, y), 1, tty_writec);
MEMORY OFFSET:     -0xa5b     -2651  >>-2643

0xbaa7:	mov rdx, rax                         
0xbaaa:	mov esi, 1                           
0xbaaf:	mov rdi, rcx                         
0xbab2:	call 0x47e0                          
0xbab7:	nop                                  #|}|
0xbab8:	nop                                  
0xbab9:	leave                                
0xbaba:	ret                                  
0xbabb:	endbr64                              #|{|
0xbabf:	push rbp                             
0xbac0:	mov rbp, rsp                         
0xbac3:	sub rsp, 0x30                        
0xbac7:	mov dword ptr [rbp - 0x24], edi      
MEMORY OFFSET:     -0x24     -36  >>-28

0xbaca:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xbad3:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xbad7:	xor eax, eax                         
0xbad9:	mov eax, dword ptr [rip + 0x24f2d]   #    if (fg_cache |=|= VALID_CACHE && color == TTY_IO_FOREGROUND)
MEMORY OFFSET:     0x24f2d     151341  >>151349

0xbadf:	cmp eax, 1                           #    if |(|fg_cache == VALID_CACHE && color == TTY_IO_FOREGROUND)
0xbae2:	jne 0xbaf6                           
0xbae4:	movzx eax, byte ptr [rip + 0x24f1e]  #    if (fg_cache == VALID_CACHE && color == |T|TY_IO_FOREGROUND)
MEMORY OFFSET:     0x24f1e     151326  >>151334

0xbaeb:	movzx eax, al                        
0xbaee:	and eax, 7                           
0xbaf1:	cmp dword ptr [rbp - 0x24], eax      #    if (fg_cache == VALID_CACHE |&|& color == TTY_IO_FOREGROUND)
MEMORY OFFSET:     -0x24     -36  >>-28

0xbaf4:	je 0xbb71                            
0xbaf6:	mov eax, dword ptr [rip + 0x2351c]   #    if (AnsiColors |=|= ON)
MEMORY OFFSET:     0x2351c     144668  >>144676

0xbafc:	cmp eax, 1                           #    if |(|AnsiColors == ON)
0xbaff:	jne 0xbb3a                           
0xbb01:	mov eax, dword ptr [rip + 0x24185]   #	|m|emcpy(str, ansi_foreground, sizeof(ansi_foreground));
MEMORY OFFSET:     0x24185     147845  >>147853

0xbb07:	mov dword ptr [rbp - 0x20], eax      
MEMORY OFFSET:     -0x20     -32  >>-24

0xbb0a:	movzx eax, byte ptr [rip + 0x2417f]  
MEMORY OFFSET:     0x2417f     147839  >>147847

0xbb11:	mov byte ptr [rbp - 0x1c], al        
MEMORY OFFSET:     -0x1c     -28  >>-20

0xbb14:	movzx eax, byte ptr [rbp - 0x1d]     #	str[3] |+|= color;
MEMORY OFFSET:     -0x1d     -29  >>-21

0xbb18:	mov edx, eax                         
0xbb1a:	mov eax, dword ptr [rbp - 0x24]      
MEMORY OFFSET:     -0x24     -36  >>-28

0xbb1d:	add eax, edx                         
0xbb1f:	mov byte ptr [rbp - 0x1d], al        
MEMORY OFFSET:     -0x1d     -29  >>-21

0xbb22:	lea rax, [rbp - 0x20]                #	|t|ty_writes(str, sizeof(ansi_foreground));
MEMORY OFFSET:     -0x20     -32  >>-24

0xbb26:	mov esi, 5                           
0xbb2b:	mov rdi, rax                         
0xbb2e:	mov eax, 0                           
0xbb33:	call 0xb69a                          
0xbb38:	jmp 0xbb4b                           
0xbb3a:	cmp dword ptr [rbp - 0x24], 7        #	|t|ty_io_reversevid(color != WHITE);
MEMORY OFFSET:     -0x24     -36  >>-28

0xbb3e:	setne al                             
0xbb41:	movzx eax, al                        
0xbb44:	mov edi, eax                         
0xbb46:	call 0xbd5a                          
0xbb4b:	mov dword ptr [rip + 0x24eb7], 1     #    fg_cache |=| VALID_CACHE;
MEMORY OFFSET:     0x24eb7     151223  >>151231

0xbb55:	movzx eax, byte ptr [rip + 0x24ead]  #    |T|TY_IO_SET_FOREGROUND(color);
MEMORY OFFSET:     0x24ead     151213  >>151221

0xbb5c:	and eax, 0xfffffff8                  
0xbb5f:	mov edx, eax                         
0xbb61:	mov eax, dword ptr [rbp - 0x24]      
MEMORY OFFSET:     -0x24     -36  >>-28

0xbb64:	and eax, 7                           
0xbb67:	or eax, edx                          
0xbb69:	mov byte ptr [rip + 0x24e9a], al     
MEMORY OFFSET:     0x24e9a     151194  >>151202

0xbb6f:	jmp 0xbb72                           
0xbb71:	nop                                  #	|r|eturn;
0xbb72:	mov rax, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0xbb76:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xbb7f:	je 0xbb86                            
0xbb81:	call 0x4980                          
0xbb86:	leave                                
0xbb87:	ret                                  
0xbb88:	endbr64                              #|{|
0xbb8c:	push rbp                             
0xbb8d:	mov rbp, rsp                         
0xbb90:	sub rsp, 0x30                        
0xbb94:	mov dword ptr [rbp - 0x24], edi      
MEMORY OFFSET:     -0x24     -36  >>-28

0xbb97:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xbba0:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xbba4:	xor eax, eax                         
0xbba6:	mov eax, dword ptr [rip + 0x24e64]   #    if (bg_cache |=|= VALID_CACHE && color == TTY_IO_BACKGROUND)
MEMORY OFFSET:     0x24e64     151140  >>151148

0xbbac:	cmp eax, 1                           #    if |(|bg_cache == VALID_CACHE && color == TTY_IO_BACKGROUND)
0xbbaf:	jne 0xbbc6                           
0xbbb1:	movzx eax, byte ptr [rip + 0x24e51]  #    if (bg_cache == VALID_CACHE && color == |T|TY_IO_BACKGROUND)
MEMORY OFFSET:     0x24e51     151121  >>151129

0xbbb8:	movzx eax, al                        
0xbbbb:	sar eax, 3                           
0xbbbe:	and eax, 7                           
0xbbc1:	cmp dword ptr [rbp - 0x24], eax      #    if (bg_cache == VALID_CACHE |&|& color == TTY_IO_BACKGROUND)
MEMORY OFFSET:     -0x24     -36  >>-28

0xbbc4:	je 0xbc44                            
0xbbc6:	mov eax, dword ptr [rip + 0x2344c]   #    if (AnsiColors |=|= ON)
MEMORY OFFSET:     0x2344c     144460  >>144468

0xbbcc:	cmp eax, 1                           #    if |(|AnsiColors == ON)
0xbbcf:	jne 0xbc0a                           
0xbbd1:	mov eax, dword ptr [rip + 0x240ba]   #	|m|emcpy(str, ansi_background, sizeof(ansi_background));
MEMORY OFFSET:     0x240ba     147642  >>147650

0xbbd7:	mov dword ptr [rbp - 0x20], eax      
MEMORY OFFSET:     -0x20     -32  >>-24

0xbbda:	movzx eax, byte ptr [rip + 0x240b4]  
MEMORY OFFSET:     0x240b4     147636  >>147644

0xbbe1:	mov byte ptr [rbp - 0x1c], al        
MEMORY OFFSET:     -0x1c     -28  >>-20

0xbbe4:	movzx eax, byte ptr [rbp - 0x1d]     #	str[3] |+|= color;
MEMORY OFFSET:     -0x1d     -29  >>-21

0xbbe8:	mov edx, eax                         
0xbbea:	mov eax, dword ptr [rbp - 0x24]      
MEMORY OFFSET:     -0x24     -36  >>-28

0xbbed:	add eax, edx                         
0xbbef:	mov byte ptr [rbp - 0x1d], al        
MEMORY OFFSET:     -0x1d     -29  >>-21

0xbbf2:	lea rax, [rbp - 0x20]                #	|t|ty_writes(str, sizeof(ansi_background));
MEMORY OFFSET:     -0x20     -32  >>-24

0xbbf6:	mov esi, 5                           
0xbbfb:	mov rdi, rax                         
0xbbfe:	mov eax, 0                           
0xbc03:	call 0xb69a                          
0xbc08:	jmp 0xbc1b                           
0xbc0a:	cmp dword ptr [rbp - 0x24], 0        #	|t|ty_io_reversevid(color != BLACK);
MEMORY OFFSET:     -0x24     -36  >>-28

0xbc0e:	setne al                             
0xbc11:	movzx eax, al                        
0xbc14:	mov edi, eax                         
0xbc16:	call 0xbd5a                          
0xbc1b:	mov dword ptr [rip + 0x24deb], 1     #    bg_cache |=| VALID_CACHE;
MEMORY OFFSET:     0x24deb     151019  >>151027

0xbc25:	movzx eax, byte ptr [rip + 0x24ddd]  #    |T|TY_IO_SET_BACKGROUND(color);
MEMORY OFFSET:     0x24ddd     151005  >>151013

0xbc2c:	and eax, 0xffffffc7                  
0xbc2f:	mov edx, eax                         
0xbc31:	mov eax, dword ptr [rbp - 0x24]      
MEMORY OFFSET:     -0x24     -36  >>-28

0xbc34:	shl eax, 3                           
0xbc37:	and eax, 0x38                        
0xbc3a:	or eax, edx                          
0xbc3c:	mov byte ptr [rip + 0x24dc7], al     
MEMORY OFFSET:     0x24dc7     150983  >>150991

0xbc42:	jmp 0xbc45                           
0xbc44:	nop                                  #	|r|eturn;
0xbc45:	mov rax, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0xbc49:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xbc52:	je 0xbc59                            
0xbc54:	call 0x4980                          
0xbc59:	leave                                
0xbc5a:	ret                                  
0xbc5b:	endbr64                              #|{|
0xbc5f:	push rbp                             
0xbc60:	mov rbp, rsp                         
0xbc63:	sub rsp, 0x10                        
0xbc67:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbc6a:	mov eax, dword ptr [rip + 0x24da4]   #    if (br_cache |=|= VALID_CACHE && status == TTY_IO_BRIGHTNESS)
MEMORY OFFSET:     0x24da4     150948  >>150956

0xbc70:	cmp eax, 1                           #    if |(|br_cache == VALID_CACHE && status == TTY_IO_BRIGHTNESS)
0xbc73:	jne 0xbc8e                           
0xbc75:	movzx eax, byte ptr [rip + 0x24d8d]  #    if (br_cache == VALID_CACHE && status == |T|TY_IO_BRIGHTNESS)
MEMORY OFFSET:     0x24d8d     150925  >>150933

0xbc7c:	movzx eax, al                        
0xbc7f:	sar eax, 6                           
0xbc82:	and eax, 1                           
0xbc85:	cmp dword ptr [rbp - 4], eax         #    if (br_cache == VALID_CACHE |&|& status == TTY_IO_BRIGHTNESS)
MEMORY OFFSET:     -0x4     -4  >>4

0xbc88:	je 0xbd57                            
0xbc8e:	cmp dword ptr [rbp - 4], 1           #    if |(|status == ON)
MEMORY OFFSET:     -0x4     -4  >>4

0xbc92:	jne 0xbcc1                           
0xbc94:	mov rax, qword ptr [rip + 0x2404d]   #	if (|T|TY_BRIGHT_ON)
MEMORY OFFSET:     0x2404d     147533  >>147541

0xbc9b:	test rax, rax                        #	if |(|TTY_BRIGHT_ON)
0xbc9e:	je 0xbd2e                            
0xbca4:	mov rax, qword ptr [rip + 0x2403d]   #	    tputs(|T|TY_BRIGHT_ON, 1, tty_writec);
MEMORY OFFSET:     0x2403d     147517  >>147525

0xbcab:	lea rdx, [rip - 0xc66]               #	    |t|puts(TTY_BRIGHT_ON, 1, tty_writec);
MEMORY OFFSET:     -0xc66     -3174  >>-3166

0xbcb2:	mov esi, 1                           
0xbcb7:	mov rdi, rax                         
0xbcba:	call 0x47e0                          
0xbcbf:	jmp 0xbd2e                           
0xbcc1:	mov rax, qword ptr [rip + 0x23fe0]   #	if (|T|TY_ATTRIBUTES_OFF)
MEMORY OFFSET:     0x23fe0     147424  >>147432

0xbcc8:	test rax, rax                        #	if |(|TTY_ATTRIBUTES_OFF)
0xbccb:	je 0xbce8                            
0xbccd:	mov rax, qword ptr [rip + 0x23fd4]   #	    tputs(|T|TY_ATTRIBUTES_OFF, 1, tty_writec);
MEMORY OFFSET:     0x23fd4     147412  >>147420

0xbcd4:	lea rdx, [rip - 0xc8f]               #	    |t|puts(TTY_ATTRIBUTES_OFF, 1, tty_writec);
MEMORY OFFSET:     -0xc8f     -3215  >>-3207

0xbcdb:	mov esi, 1                           
0xbce0:	mov rdi, rax                         
0xbce3:	call 0x47e0                          
0xbce8:	mov dword ptr [rip + 0x24d1a], 0     #	fg_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x24d1a     150810  >>150818

0xbcf2:	mov dword ptr [rip + 0x24d14], 0     #	bg_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x24d14     150804  >>150812

0xbcfc:	movzx eax, byte ptr [rip + 0x24d06]  #	|T|TY_IO_SET_BRIGHTNESS(OFF);
MEMORY OFFSET:     0x24d06     150790  >>150798

0xbd03:	and eax, 0xffffffbf                  
0xbd06:	mov byte ptr [rip + 0x24cfd], al     
MEMORY OFFSET:     0x24cfd     150781  >>150789

0xbd0c:	movzx eax, byte ptr [rip + 0x24cf6]  #	if (|T|TY_IO_REVERSEVID == ON)
MEMORY OFFSET:     0x24cf6     150774  >>150782

0xbd13:	shr al, 7                            
0xbd16:	cmp al, 1                            #	if |(|TTY_IO_REVERSEVID == ON)
0xbd18:	jne 0xbd2e                           
0xbd1a:	mov dword ptr [rip + 0x24cf4], 0     #	    rv_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x24cf4     150772  >>150780

0xbd24:	mov edi, 1                           #	    |t|ty_io_reversevid(ON);
0xbd29:	call 0xbd5a                          
0xbd2e:	mov dword ptr [rip + 0x24cdc], 1     #    br_cache |=| VALID_CACHE;
MEMORY OFFSET:     0x24cdc     150748  >>150756

0xbd38:	movzx eax, byte ptr [rip + 0x24cca]  #    |T|TY_IO_SET_BRIGHTNESS(status);
MEMORY OFFSET:     0x24cca     150730  >>150738

0xbd3f:	and eax, 0xffffffbf                  
0xbd42:	mov edx, eax                         
0xbd44:	mov eax, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0xbd47:	shl eax, 6                           
0xbd4a:	and eax, 0x40                        
0xbd4d:	or eax, edx                          
0xbd4f:	mov byte ptr [rip + 0x24cb4], al     
MEMORY OFFSET:     0x24cb4     150708  >>150716

0xbd55:	jmp 0xbd58                           
0xbd57:	nop                                  #	|r|eturn;
0xbd58:	leave                                #|}|
0xbd59:	ret                                  
0xbd5a:	endbr64                              #|{|
0xbd5e:	push rbp                             
0xbd5f:	mov rbp, rsp                         
0xbd62:	sub rsp, 0x10                        
0xbd66:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbd69:	mov eax, dword ptr [rip + 0x24ca9]   #    if (rv_cache |=|= VALID_CACHE && status == TTY_IO_REVERSEVID)
MEMORY OFFSET:     0x24ca9     150697  >>150705

0xbd6f:	cmp eax, 1                           #    if |(|rv_cache == VALID_CACHE && status == TTY_IO_REVERSEVID)
0xbd72:	jne 0xbd8a                           
0xbd74:	movzx eax, byte ptr [rip + 0x24c8e]  #    if (rv_cache == VALID_CACHE && status == |T|TY_IO_REVERSEVID)
MEMORY OFFSET:     0x24c8e     150670  >>150678

0xbd7b:	shr al, 7                            
0xbd7e:	movzx eax, al                        
0xbd81:	cmp dword ptr [rbp - 4], eax         #    if (rv_cache == VALID_CACHE |&|& status == TTY_IO_REVERSEVID)
MEMORY OFFSET:     -0x4     -4  >>4

0xbd84:	je 0xbe53                            
0xbd8a:	cmp dword ptr [rbp - 4], 1           #    if |(|status == ON)
MEMORY OFFSET:     -0x4     -4  >>4

0xbd8e:	jne 0xbdbd                           
0xbd90:	mov rax, qword ptr [rip + 0x23f31]   #	if (|T|TY_REVERSE_ON)
MEMORY OFFSET:     0x23f31     147249  >>147257

0xbd97:	test rax, rax                        #	if |(|TTY_REVERSE_ON)
0xbd9a:	je 0xbe2d                            
0xbda0:	mov rax, qword ptr [rip + 0x23f21]   #	    tputs(|T|TY_REVERSE_ON, 1, tty_writec);
MEMORY OFFSET:     0x23f21     147233  >>147241

0xbda7:	lea rdx, [rip - 0xd62]               #	    |t|puts(TTY_REVERSE_ON, 1, tty_writec);
MEMORY OFFSET:     -0xd62     -3426  >>-3418

0xbdae:	mov esi, 1                           
0xbdb3:	mov rdi, rax                         
0xbdb6:	call 0x47e0                          
0xbdbb:	jmp 0xbe2d                           
0xbdbd:	mov rax, qword ptr [rip + 0x23ee4]   #	if (|T|TY_ATTRIBUTES_OFF)
MEMORY OFFSET:     0x23ee4     147172  >>147180

0xbdc4:	test rax, rax                        #	if |(|TTY_ATTRIBUTES_OFF)
0xbdc7:	je 0xbde4                            
0xbdc9:	mov rax, qword ptr [rip + 0x23ed8]   #	    tputs(|T|TY_ATTRIBUTES_OFF, 1, tty_writec);
MEMORY OFFSET:     0x23ed8     147160  >>147168

0xbdd0:	lea rdx, [rip - 0xd8b]               #	    |t|puts(TTY_ATTRIBUTES_OFF, 1, tty_writec);
MEMORY OFFSET:     -0xd8b     -3467  >>-3459

0xbdd7:	mov esi, 1                           
0xbddc:	mov rdi, rax                         
0xbddf:	call 0x47e0                          
0xbde4:	mov dword ptr [rip + 0x24c1e], 0     #	fg_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x24c1e     150558  >>150566

0xbdee:	mov dword ptr [rip + 0x24c18], 0     #	bg_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x24c18     150552  >>150560

0xbdf8:	movzx eax, byte ptr [rip + 0x24c0a]  #	|T|TY_IO_SET_REVERSEVID(OFF);
MEMORY OFFSET:     0x24c0a     150538  >>150546

0xbdff:	and eax, 0x7f                        
0xbe02:	mov byte ptr [rip + 0x24c01], al     
MEMORY OFFSET:     0x24c01     150529  >>150537

0xbe08:	movzx eax, byte ptr [rip + 0x24bfa]  #	if (TTY_IO_BRIGHTNESS |=|= ON)
MEMORY OFFSET:     0x24bfa     150522  >>150530

0xbe0f:	movzx eax, al                        
0xbe12:	and eax, 0x40                        
0xbe15:	test eax, eax                        #	if |(|TTY_IO_BRIGHTNESS == ON)
0xbe17:	je 0xbe2d                            
0xbe19:	mov dword ptr [rip + 0x24bf1], 0     #	    br_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x24bf1     150513  >>150521

0xbe23:	mov edi, 1                           #	    |t|ty_io_brightness(ON);
0xbe28:	call 0xbc5b                          
0xbe2d:	mov dword ptr [rip + 0x24be1], 1     #    rv_cache |=| VALID_CACHE;
MEMORY OFFSET:     0x24be1     150497  >>150505

0xbe37:	movzx eax, byte ptr [rip + 0x24bcb]  #    |T|TY_IO_SET_REVERSEVID(status);
MEMORY OFFSET:     0x24bcb     150475  >>150483

0xbe3e:	and eax, 0x7f                        
0xbe41:	mov edx, eax                         
0xbe43:	mov eax, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0xbe46:	shl eax, 7                           
0xbe49:	or eax, edx                          
0xbe4b:	mov byte ptr [rip + 0x24bb8], al     
MEMORY OFFSET:     0x24bb8     150456  >>150464

0xbe51:	jmp 0xbe54                           
0xbe53:	nop                                  #	|r|eturn;
0xbe54:	leave                                #|}|
0xbe55:	ret                                  
0xbe56:	endbr64                              #|{|
0xbe5a:	push rbp                             
0xbe5b:	mov rbp, rsp                         
0xbe5e:	sub rsp, 0x10                        
0xbe62:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbe65:	mov eax, dword ptr [rbp - 4]         #    tty_io_brightness(|_|TTY_BRIGHTNESS(attributes));
MEMORY OFFSET:     -0x4     -4  >>4

0xbe68:	sar eax, 6                           
0xbe6b:	and eax, 1                           #    |t|ty_io_brightness(_TTY_BRIGHTNESS(attributes));
0xbe6e:	mov edi, eax                         
0xbe70:	call 0xbc5b                          
0xbe75:	mov eax, dword ptr [rbp - 4]         #    |t|ty_io_foreground(_TTY_FOREGROUND(attributes));
MEMORY OFFSET:     -0x4     -4  >>4

0xbe78:	and eax, 7                           
0xbe7b:	mov edi, eax                         
0xbe7d:	call 0xbabb                          
0xbe82:	mov eax, dword ptr [rbp - 4]         #    tty_io_background(|_|TTY_BACKGROUND(attributes));
MEMORY OFFSET:     -0x4     -4  >>4

0xbe85:	sar eax, 3                           
0xbe88:	and eax, 7                           #    |t|ty_io_background(_TTY_BACKGROUND(attributes));
0xbe8b:	mov edi, eax                         
0xbe8d:	call 0xbb88                          
0xbe92:	nop                                  #|}|
0xbe93:	leave                                
0xbe94:	ret                                  
0xbe95:	endbr64                              #|{|
0xbe99:	push rbp                             
0xbe9a:	mov rbp, rsp                         
0xbe9d:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbea0:	mov dword ptr [rbp - 8], esi         
MEMORY OFFSET:     -0x8     -8  >>0

0xbea3:	mov eax, dword ptr [rbp - 4]         #    tty_cursor_y |=| y;
MEMORY OFFSET:     -0x4     -4  >>4

0xbea6:	mov dword ptr [rip + 0x24b58], eax   
MEMORY OFFSET:     0x24b58     150360  >>150368

0xbeac:	mov eax, dword ptr [rbp - 8]         #    tty_cursor_x |=| x;
MEMORY OFFSET:     -0x8     -8  >>0

0xbeaf:	mov dword ptr [rip + 0x24b4b], eax   
MEMORY OFFSET:     0x24b4b     150347  >>150355

0xbeb5:	nop                                  #|}|
0xbeb6:	pop rbp                              
0xbeb7:	ret                                  
0xbeb8:	endbr64                              #|{|
0xbebc:	push rbp                             
0xbebd:	mov rbp, rsp                         
0xbec0:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xbec4:	mov qword ptr [rbp - 0x10], rsi      
MEMORY OFFSET:     -0x10     -16  >>-8

0xbec8:	mov edx, dword ptr [rip + 0x24b36]   #    *y |=| tty_cursor_y;
MEMORY OFFSET:     0x24b36     150326  >>150334

0xbece:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xbed2:	mov dword ptr [rax], edx             
0xbed4:	mov edx, dword ptr [rip + 0x24b26]   #    *x |=| tty_cursor_x;
MEMORY OFFSET:     0x24b26     150310  >>150318

0xbeda:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xbede:	mov dword ptr [rax], edx             
0xbee0:	nop                                  #|}|
0xbee1:	pop rbp                              
0xbee2:	ret                                  
0xbee3:	endbr64                              #|{|
0xbee7:	push rbp                             
0xbee8:	mov rbp, rsp                         
0xbeeb:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbeee:	movzx eax, byte ptr [rip + 0x24b13]  #    |T|TY_SET_FOREGROUND(color);
MEMORY OFFSET:     0x24b13     150291  >>150299

0xbef5:	and eax, 0xfffffff8                  
0xbef8:	mov edx, eax                         
0xbefa:	mov eax, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0xbefd:	and eax, 7                           
0xbf00:	or eax, edx                          
0xbf02:	mov byte ptr [rip + 0x24b00], al     
MEMORY OFFSET:     0x24b00     150272  >>150280

0xbf08:	nop                                  #|}|
0xbf09:	pop rbp                              
0xbf0a:	ret                                  
0xbf0b:	endbr64                              #|{|
0xbf0f:	push rbp                             
0xbf10:	mov rbp, rsp                         
0xbf13:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbf16:	movzx eax, byte ptr [rip + 0x24aeb]  #    |T|TY_SET_BACKGROUND(color);
MEMORY OFFSET:     0x24aeb     150251  >>150259

0xbf1d:	and eax, 0xffffffc7                  
0xbf20:	mov edx, eax                         
0xbf22:	mov eax, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0xbf25:	shl eax, 3                           
0xbf28:	and eax, 0x38                        
0xbf2b:	or eax, edx                          
0xbf2d:	mov byte ptr [rip + 0x24ad5], al     
MEMORY OFFSET:     0x24ad5     150229  >>150237

0xbf33:	nop                                  #|}|
0xbf34:	pop rbp                              
0xbf35:	ret                                  
0xbf36:	endbr64                              #|{|
0xbf3a:	push rbp                             
0xbf3b:	mov rbp, rsp                         
0xbf3e:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbf41:	movzx eax, byte ptr [rip + 0x24ac0]  #    |T|TY_SET_BRIGHTNESS(status);
MEMORY OFFSET:     0x24ac0     150208  >>150216

0xbf48:	and eax, 0xffffffbf                  
0xbf4b:	mov edx, eax                         
0xbf4d:	mov eax, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0xbf50:	shl eax, 6                           
0xbf53:	and eax, 0x40                        
0xbf56:	or eax, edx                          
0xbf58:	mov byte ptr [rip + 0x24aaa], al     
MEMORY OFFSET:     0x24aaa     150186  >>150194

0xbf5e:	nop                                  #|}|
0xbf5f:	pop rbp                              
0xbf60:	ret                                  
0xbf61:	endbr64                              #|{|
0xbf65:	push rbp                             
0xbf66:	mov rbp, rsp                         
0xbf69:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbf6c:	movzx eax, byte ptr [rip + 0x24a95]  #    |T|TY_SET_REVERSEVID(status);
MEMORY OFFSET:     0x24a95     150165  >>150173

0xbf73:	and eax, 0x7f                        
0xbf76:	mov edx, eax                         
0xbf78:	mov eax, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0xbf7b:	shl eax, 7                           
0xbf7e:	or eax, edx                          
0xbf80:	mov byte ptr [rip + 0x24a82], al     
MEMORY OFFSET:     0x24a82     150146  >>150154

0xbf86:	nop                                  #|}|
0xbf87:	pop rbp                              
0xbf88:	ret                                  
0xbf89:	endbr64                              #|{|
0xbf8d:	push rbp                             
0xbf8e:	mov rbp, rsp                         
0xbf91:	sub rsp, 0x10                        
0xbf95:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbf98:	mov dword ptr [rbp - 8], esi         
MEMORY OFFSET:     -0x8     -8  >>0

0xbf9b:	mov dword ptr [rbp - 0xc], edx       
MEMORY OFFSET:     -0xc     -12  >>-4

0xbf9e:	mov eax, dword ptr [rbp - 4]         #    |t|ty_brightness(brightness);
MEMORY OFFSET:     -0x4     -4  >>4

0xbfa1:	mov edi, eax                         
0xbfa3:	call 0xbf36                          
0xbfa8:	mov eax, dword ptr [rbp - 8]         #    |t|ty_foreground(foreground);
MEMORY OFFSET:     -0x8     -8  >>0

0xbfab:	mov edi, eax                         
0xbfad:	call 0xbee3                          
0xbfb2:	mov eax, dword ptr [rbp - 0xc]       #    |t|ty_background(background);
MEMORY OFFSET:     -0xc     -12  >>-4

0xbfb5:	mov edi, eax                         
0xbfb7:	call 0xbf0b                          
0xbfbc:	nop                                  #|}|
0xbfbd:	leave                                
0xbfbe:	ret                                  
0xbfbf:	endbr64                              #|{|
0xbfc3:	push rbp                             
0xbfc4:	mov rbp, rsp                         
0xbfc7:	mov edi, 7                           #    |t|ty_writec(7);
0xbfcc:	mov eax, 0                           
0xbfd1:	call 0xb04c                          
0xbfd6:	mov eax, 0                           #    |t|ty_flush();
0xbfdb:	call 0xafe2                          
0xbfe0:	nop                                  #|}|
0xbfe1:	pop rbp                              
0xbfe2:	ret                                  
0xbfe3:	endbr64                              #|{|
0xbfe7:	push rbp                             
0xbfe8:	mov rbp, rsp                         
0xbfeb:	sub rsp, 0x10                        
0xbfef:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xbff2:	cmp dword ptr [rbp - 4], 0           #    if |(|status)
MEMORY OFFSET:     -0x4     -4  >>4

0xbff6:	je 0xc021                            
0xbff8:	mov rax, qword ptr [rip + 0x23d29]   #	if (|T|TY_CURSOR_ON)
MEMORY OFFSET:     0x23d29     146729  >>146737

0xbfff:	test rax, rax                        #	if |(|TTY_CURSOR_ON)
0xc002:	je 0xc048                            
0xc004:	mov rax, qword ptr [rip + 0x23d1d]   #	    tputs(|T|TY_CURSOR_ON, 1, tty_writec);
MEMORY OFFSET:     0x23d1d     146717  >>146725

0xc00b:	lea rdx, [rip - 0xfc6]               #	    |t|puts(TTY_CURSOR_ON, 1, tty_writec);
MEMORY OFFSET:     -0xfc6     -4038  >>-4030

0xc012:	mov esi, 1                           
0xc017:	mov rdi, rax                         
0xc01a:	call 0x47e0                          
0xc01f:	jmp 0xc048                           #|}|
0xc021:	mov rax, qword ptr [rip + 0x23ce0]   #	if (|T|TY_CURSOR_OFF)
MEMORY OFFSET:     0x23ce0     146656  >>146664

0xc028:	test rax, rax                        #	if |(|TTY_CURSOR_OFF)
0xc02b:	je 0xc048                            
0xc02d:	mov rax, qword ptr [rip + 0x23cd4]   #	    tputs(|T|TY_CURSOR_OFF, 1, tty_writec);
MEMORY OFFSET:     0x23cd4     146644  >>146652

0xc034:	lea rdx, [rip - 0xfef]               #	    |t|puts(TTY_CURSOR_OFF, 1, tty_writec);
MEMORY OFFSET:     -0xfef     -4079  >>-4071

0xc03b:	mov esi, 1                           
0xc040:	mov rdi, rax                         
0xc043:	call 0x47e0                          
0xc048:	nop                                  #|}|
0xc049:	leave                                
0xc04a:	ret                                  
0xc04b:	endbr64                              #|{|
0xc04f:	push rbp                             
0xc050:	mov rbp, rsp                         
0xc053:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xc057:	movzx edx, byte ptr [rip + 0x249aa]  #    *status |=| tty_current_attribute;
MEMORY OFFSET:     0x249aa     149930  >>149938

0xc05e:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xc062:	mov byte ptr [rax], dl               
0xc064:	nop                                  #|}|
0xc065:	pop rbp                              
0xc066:	ret                                  
0xc067:	endbr64                              #|{|
0xc06b:	push rbp                             
0xc06c:	mov rbp, rsp                         
0xc06f:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xc073:	mov rax, qword ptr [rbp - 8]         #    tty_current_attribute = |*|status;
MEMORY OFFSET:     -0x8     -8  >>0

0xc077:	movzx eax, byte ptr [rax]            
0xc07a:	mov byte ptr [rip + 0x24988], al     #    tty_current_attribute |=| *status;
MEMORY OFFSET:     0x24988     149896  >>149904

0xc080:	nop                                  #|}|
0xc081:	pop rbp                              
0xc082:	ret                                  
0xc083:	endbr64                              #|{|
0xc087:	push rbp                             
0xc088:	mov rbp, rsp                         
0xc08b:	mov eax, dword ptr [rip + 0x22f87]   #    if (AnsiColors |=|= ON)
MEMORY OFFSET:     0x22f87     143239  >>143247

0xc091:	cmp eax, 1                           #    if |(|AnsiColors == ON)
0xc094:	jne 0xc0af                           
0xc096:	mov esi, 4                           #	|t|ty_writes(ansi_defaults, sizeof(ansi_defaults));
0xc09b:	lea rax, [rip + 0x23bf4]             
MEMORY OFFSET:     0x23bf4     146420  >>146428

0xc0a2:	mov rdi, rax                         
0xc0a5:	mov eax, 0                           
0xc0aa:	call 0xb69a                          
0xc0af:	mov rax, qword ptr [rip + 0x23bf2]   #    if (|T|TY_ATTRIBUTES_OFF)
MEMORY OFFSET:     0x23bf2     146418  >>146426

0xc0b6:	test rax, rax                        #    if |(|TTY_ATTRIBUTES_OFF)
0xc0b9:	je 0xc0d6                            
0xc0bb:	mov rax, qword ptr [rip + 0x23be6]   #	tputs(|T|TY_ATTRIBUTES_OFF, 1, tty_writec);
MEMORY OFFSET:     0x23be6     146406  >>146414

0xc0c2:	lea rdx, [rip - 0x107d]              #	|t|puts(TTY_ATTRIBUTES_OFF, 1, tty_writec);
MEMORY OFFSET:     -0x107d     -4221  >>-4213

0xc0c9:	mov esi, 1                           
0xc0ce:	mov rdi, rax                         
0xc0d1:	call 0x47e0                          
0xc0d6:	mov dword ptr [rip + 0x2492c], 0     #    fg_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x2492c     149804  >>149812

0xc0e0:	mov dword ptr [rip + 0x24926], 0     #    bg_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x24926     149798  >>149806

0xc0ea:	mov dword ptr [rip + 0x24920], 0     #    br_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x24920     149792  >>149800

0xc0f4:	mov dword ptr [rip + 0x2491a], 0     #    rv_cache |=| INVALID_CACHE;
MEMORY OFFSET:     0x2491a     149786  >>149794

0xc0fe:	nop                                  #|}|
0xc0ff:	pop rbp                              
0xc100:	ret                                  
0xc101:	endbr64                              #|{|
0xc105:	push rbp                             
0xc106:	mov rbp, rsp                         
0xc109:	mov eax, dword ptr [rip + 0x24da1]   #    int key = keybuf|[|keyindex];
MEMORY OFFSET:     0x24da1     150945  >>150953

0xc10f:	cdqe                                 
0xc111:	lea rdx, [rip + 0x24da8]             
MEMORY OFFSET:     0x24da8     150952  >>150960

0xc118:	movzx eax, byte ptr [rax + rdx]      
0xc11c:	movsx eax, al                        #    int |k|ey = keybuf[keyindex];
0xc11f:	mov dword ptr [rbp - 4], eax         
MEMORY OFFSET:     -0x4     -4  >>4

0xc122:	mov eax, dword ptr [rbp - 4]         #    if (key |&| 0x80)
MEMORY OFFSET:     -0x4     -4  >>4

0xc125:	and eax, 0x80                        
0xc12a:	test eax, eax                        #    if |(|key & 0x80)
0xc12c:	je 0xc15f                            
0xc12e:	mov eax, dword ptr [rip + 0x24d7c]   #	keybuf[keyindex] |&|= 0x7F;
MEMORY OFFSET:     0x24d7c     150908  >>150916

0xc134:	cdqe                                 
0xc136:	lea rdx, [rip + 0x24d83]             
MEMORY OFFSET:     0x24d83     150915  >>150923

0xc13d:	movzx edx, byte ptr [rax + rdx]      
0xc141:	mov eax, dword ptr [rip + 0x24d69]   
MEMORY OFFSET:     0x24d69     150889  >>150897

0xc147:	mov ecx, edx                         
0xc149:	and ecx, 0x7f                        
0xc14c:	cdqe                                 
0xc14e:	lea rdx, [rip + 0x24d6b]             
MEMORY OFFSET:     0x24d6b     150891  >>150899

0xc155:	mov byte ptr [rax + rdx], cl         
0xc158:	mov eax, 0x1b                        #	return |k|ey_ESC;
0xc15d:	jmp 0xc180                           
0xc15f:	mov eax, dword ptr [rip + 0x24d47]   #    keyno|-|-;
MEMORY OFFSET:     0x24d47     150855  >>150863

0xc165:	sub eax, 1                           
0xc168:	mov dword ptr [rip + 0x24d3e], eax   
MEMORY OFFSET:     0x24d3e     150846  >>150854

0xc16e:	mov eax, dword ptr [rip + 0x24d3c]   #    keyindex|+|+;
MEMORY OFFSET:     0x24d3c     150844  >>150852

0xc174:	add eax, 1                           
0xc177:	mov dword ptr [rip + 0x24d33], eax   
MEMORY OFFSET:     0x24d33     150835  >>150843

0xc17d:	mov eax, dword ptr [rbp - 4]         #    return |k|ey;
MEMORY OFFSET:     -0x4     -4  >>4

0xc180:	pop rbp                              #|}|
0xc181:	ret                                  
0xc182:	endbr64                              #|{|
0xc186:	push rbp                             
0xc187:	mov rbp, rsp                         
0xc18a:	mov eax, 0                           #    |s|ervice_pending_signals();
0xc18f:	call 0x1ea4b                         
0xc194:	mov eax, dword ptr [rip + 0x24d12]   #    if (|k|eyno)
MEMORY OFFSET:     0x24d12     150802  >>150810

0xc19a:	test eax, eax                        #    if |(|keyno)
0xc19c:	je 0xc1aa                            
0xc19e:	mov eax, 0                           #	return |t|ty_extract_key();
0xc1a3:	call 0xc101                          
0xc1a8:	jmp 0xc221                           
0xc1aa:	mov edi, 0xffffffff                  #    |t|ty_set_interrupt_char(-1);
0xc1af:	call 0xaf73                          
0xc1b4:	mov edi, 1                           #    |s|ignals(ON);
0xc1b9:	call 0x1eaed                         
0xc1be:	mov dword ptr [rip + 0x24ce8], 0     #    keyindex |=| 0;
MEMORY OFFSET:     0x24ce8     150760  >>150768

0xc1c8:	nop                                  #    while |(|(keyno = tty_read(keybuf, 1024)) < 0)
0xc1c9:	mov esi, 0x400                       #    while ((keyno = |t|ty_read(keybuf, 1024)) < 0)
0xc1ce:	lea rax, [rip + 0x24ceb]             
MEMORY OFFSET:     0x24ceb     150763  >>150771

0xc1d5:	mov rdi, rax                         
0xc1d8:	mov eax, 0                           
0xc1dd:	call 0xb835                          
0xc1e2:	mov dword ptr [rip + 0x24cc4], eax   #    while ((keyno |=| tty_read(keybuf, 1024)) < 0)
MEMORY OFFSET:     0x24cc4     150724  >>150732

0xc1e8:	mov eax, dword ptr [rip + 0x24cbe]   
MEMORY OFFSET:     0x24cbe     150718  >>150726

0xc1ee:	test eax, eax                        #    while ((keyno = tty_read(keybuf, 1024)) |<| 0)
0xc1f0:	js 0xc1c9                            
0xc1f2:	mov edi, 0                           #    |s|ignals(OFF);
0xc1f7:	call 0x1eaed                         
0xc1fc:	mov edi, 7                           #    |t|ty_set_interrupt_char(key_INTERRUPT);
0xc201:	call 0xaf73                          
0xc206:	mov eax, dword ptr [rip + 0x24ca0]   #    return keyno |?| tty_extract_key() : -1;
MEMORY OFFSET:     0x24ca0     150688  >>150696

0xc20c:	test eax, eax                        #    return keyno ? tty_extract_key() |:| -1;
0xc20e:	je 0xc21c                            
0xc210:	mov eax, 0                           #    return keyno ? |t|ty_extract_key() : -1;
0xc215:	call 0xc101                          
0xc21a:	jmp 0xc221                           #    return keyno ? tty_extract_key() |:| -1;
0xc21c:	mov eax, 0xffffffff                  #    return keyno ? tty_extract_key() |:| -1;
0xc221:	pop rbp                              #|}|
0xc222:	ret                                  
0xc223:	endbr64                              #|{|
0xc227:	push rbp                             
0xc228:	mov rbp, rsp                         
0xc22b:	sub rsp, 0x30                        
0xc22f:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xc233:	mov qword ptr [rbp - 0x20], rsi      
MEMORY OFFSET:     -0x20     -32  >>-24

0xc237:	mov qword ptr [rbp - 0x28], rdx      
MEMORY OFFSET:     -0x28     -40  >>-32

0xc23b:	mov edi, 0x18                        #    new_key = (tty_key_t *)|x|malloc(sizeof(tty_key_t));
0xc240:	call 0x24650                         
0xc245:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xc249:	mov rax, qword ptr [rbp - 0x20]      #    new_key->key_seq = (unsigned char *)|x|strdup((char *)key_seq);
MEMORY OFFSET:     -0x20     -32  >>-24

0xc24d:	mov rdi, rax                         
0xc250:	call 0x24780                         
0xc255:	mov rdx, qword ptr [rbp - 8]         #    new_key->key_seq |=| (unsigned char *)xstrdup((char *)key_seq);
MEMORY OFFSET:     -0x8     -8  >>0

0xc259:	mov qword ptr [rdx], rax             
0xc25c:	mov rax, qword ptr [rbp - 8]         #    new_key->aux_data |=| aux_data;
MEMORY OFFSET:     -0x8     -8  >>0

0xc260:	mov rdx, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0xc264:	mov qword ptr [rax + 0x10], rdx      
MEMORY OFFSET:     0x10     16  >>24

0xc268:	mov rax, qword ptr [rbp - 0x18]      #    new_key->next = |*|key;
MEMORY OFFSET:     -0x18     -24  >>-16

0xc26c:	mov rdx, qword ptr [rax]             
0xc26f:	mov rax, qword ptr [rbp - 8]         #    new_key->next |=| *key;
MEMORY OFFSET:     -0x8     -8  >>0

0xc273:	mov qword ptr [rax + 8], rdx         
MEMORY OFFSET:     0x8     8  >>16

0xc277:	mov rax, qword ptr [rbp - 0x18]      #    *key |=| new_key;
MEMORY OFFSET:     -0x18     -24  >>-16

0xc27b:	mov rdx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xc27f:	mov qword ptr [rax], rdx             
0xc282:	nop                                  #|}|
0xc283:	leave                                
0xc284:	ret                                  
0xc285:	endbr64                              #|{|
0xc289:	push rbp                             
0xc28a:	mov rbp, rsp                         
0xc28d:	sub rsp, 0x10                        
0xc291:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xc295:	mov qword ptr [rbp - 0x10], rsi      
MEMORY OFFSET:     -0x10     -16  >>-8

0xc299:	mov rax, qword ptr [rbp - 8]         #    if (|*|key_seq == 0)
MEMORY OFFSET:     -0x8     -8  >>0

0xc29d:	movzx eax, byte ptr [rax]            
0xc2a0:	test al, al                          #    if |(|*key_seq == 0)
0xc2a2:	je 0xc36a                            
0xc2a8:	mov rax, qword ptr [rip + 0x25159]   #    if (key |=|= NULL || strcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
MEMORY OFFSET:     0x25159     151897  >>151905

0xc2af:	test rax, rax                        #    if |(|key == NULL || strcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
0xc2b2:	je 0xc2d4                            
0xc2b4:	mov rax, qword ptr [rip + 0x2514d]   #    if (key == NULL || strcmp((char *)key_seq, (char *)(|*|key)->key_seq) <= 0)
MEMORY OFFSET:     0x2514d     151885  >>151893

0xc2bb:	mov rax, qword ptr [rax]             
0xc2be:	mov rdx, qword ptr [rax]             #    if (key == NULL || strcmp((char *)key_seq, (char *)(*key)|-|>key_seq) <= 0)
0xc2c1:	mov rax, qword ptr [rbp - 8]         #    if (key == NULL || |s|trcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
MEMORY OFFSET:     -0x8     -8  >>0

0xc2c5:	mov rsi, rdx                         
0xc2c8:	mov rdi, rax                         
0xc2cb:	call 0x4af0                          
0xc2d0:	test eax, eax                        #    if (key == NULL |||| strcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
0xc2d2:	jg 0xc33a                            
0xc2d4:	lea rax, [rip + 0x2476d]             #	key |=| &key_list_head;
MEMORY OFFSET:     0x2476d     149357  >>149365

0xc2db:	mov qword ptr [rip + 0x25126], rax   
MEMORY OFFSET:     0x25126     151846  >>151854

0xc2e2:	jmp 0xc33a                           #    |f|or (; *key; key = &(*key)->next)
0xc2e4:	mov rax, qword ptr [rip + 0x2511d]   #	if (strcmp((char *)key_seq, (char *)(|*|key)->key_seq) <= 0)
MEMORY OFFSET:     0x2511d     151837  >>151845

0xc2eb:	mov rax, qword ptr [rax]             
0xc2ee:	mov rdx, qword ptr [rax]             #	if (strcmp((char *)key_seq, (char *)(*key)|-|>key_seq) <= 0)
0xc2f1:	mov rax, qword ptr [rbp - 8]         #	if (|s|trcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
MEMORY OFFSET:     -0x8     -8  >>0

0xc2f5:	mov rsi, rdx                         
0xc2f8:	mov rdi, rax                         
0xc2fb:	call 0x4af0                          
0xc300:	test eax, eax                        #	if |(|strcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
0xc302:	jg 0xc325                            
0xc304:	mov rax, qword ptr [rip + 0x250fd]   #	    |t|ty_key_list_insert_sequence(key, key_seq, aux_data);
MEMORY OFFSET:     0x250fd     151805  >>151813

0xc30b:	mov rdx, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xc30f:	mov rcx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xc313:	mov rsi, rcx                         
0xc316:	mov rdi, rax                         
0xc319:	mov eax, 0                           
0xc31e:	call 0xc223                          
0xc323:	jmp 0xc36b                           #	    |r|eturn;
0xc325:	mov rax, qword ptr [rip + 0x250dc]   #    for (; *key; key = &(|*|key)->next)
MEMORY OFFSET:     0x250dc     151772  >>151780

0xc32c:	mov rax, qword ptr [rax]             
0xc32f:	add rax, 8                           #    for (; *key; key = |&|(*key)->next)
0xc333:	mov qword ptr [rip + 0x250ce], rax   #    for (; *key; key |=| &(*key)->next)
MEMORY OFFSET:     0x250ce     151758  >>151766

0xc33a:	mov rax, qword ptr [rip + 0x250c7]   #    for (; |*|key; key = &(*key)->next)
MEMORY OFFSET:     0x250c7     151751  >>151759

0xc341:	mov rax, qword ptr [rax]             
0xc344:	test rax, rax                        
0xc347:	jne 0xc2e4                           
0xc349:	mov rax, qword ptr [rip + 0x250b8]   #    |t|ty_key_list_insert_sequence(key, key_seq, aux_data);
MEMORY OFFSET:     0x250b8     151736  >>151744

0xc350:	mov rdx, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xc354:	mov rcx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xc358:	mov rsi, rcx                         
0xc35b:	mov rdi, rax                         
0xc35e:	mov eax, 0                           
0xc363:	call 0xc223                          
0xc368:	jmp 0xc36b                           
0xc36a:	nop                                  #	|r|eturn;               /* bad key sequence !  */
0xc36b:	leave                                #|}|
0xc36c:	ret                                  
0xc36d:	endbr64                              #|{|
0xc371:	push rbp                             
0xc372:	mov rbp, rsp                         
0xc375:	mov rax, qword ptr [rip + 0x246cc]   #    current_key |=| key_list_head;
MEMORY OFFSET:     0x246cc     149196  >>149204

0xc37c:	mov qword ptr [rip + 0x246cd], rax   
MEMORY OFFSET:     0x246cd     149197  >>149205

0xc383:	nop                                  #|}|
0xc384:	pop rbp                              
0xc385:	ret                                  
0xc386:	endbr64                              #|{|
0xc38a:	push rbp                             
0xc38b:	mov rbp, rsp                         
0xc38e:	sub rsp, 0x20                        
0xc392:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xc396:	mov rax, qword ptr [rip + 0x246b3]   #    if (current_key |=|= NULL)
MEMORY OFFSET:     0x246b3     149171  >>149179

0xc39d:	test rax, rax                        #    if |(|current_key == NULL)
0xc3a0:	jne 0xc3ef                           
0xc3a2:	mov eax, 0                           #	return |N|ULL;
0xc3a7:	jmp 0xc444                           
0xc3ac:	mov rax, qword ptr [rip + 0x2469d]   #	cmp = strcmp(key_seq, (char *)current_key|-|>key_seq);
MEMORY OFFSET:     0x2469d     149149  >>149157

0xc3b3:	mov rdx, qword ptr [rax]             
0xc3b6:	mov rax, qword ptr [rbp - 0x18]      #	cmp = |s|trcmp(key_seq, (char *)current_key->key_seq);
MEMORY OFFSET:     -0x18     -24  >>-16

0xc3ba:	mov rsi, rdx                         
0xc3bd:	mov rdi, rax                         
0xc3c0:	call 0x4af0                          
0xc3c5:	mov dword ptr [rbp - 4], eax         
MEMORY OFFSET:     -0x4     -4  >>4

0xc3c8:	cmp dword ptr [rbp - 4], 0           #	if |(|cmp == 0)
MEMORY OFFSET:     -0x4     -4  >>4

0xc3cc:	jne 0xc3d7                           
0xc3ce:	mov rax, qword ptr [rip + 0x2467b]   #	    return |c|urrent_key;
MEMORY OFFSET:     0x2467b     149115  >>149123

0xc3d5:	jmp 0xc444                           
0xc3d7:	cmp dword ptr [rbp - 4], 0           #	if |(|cmp  < 0)
MEMORY OFFSET:     -0x4     -4  >>4

0xc3db:	js 0xc3fd                            
0xc3dd:	mov rax, qword ptr [rip + 0x2466c]   #    for (; current_key; current_key = current_key|-|>next)
MEMORY OFFSET:     0x2466c     149100  >>149108

0xc3e4:	mov rax, qword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0xc3e8:	mov qword ptr [rip + 0x24661], rax   #    for (; current_key; current_key |=| current_key->next)
MEMORY OFFSET:     0x24661     149089  >>149097

0xc3ef:	mov rax, qword ptr [rip + 0x2465a]   #    for (; |c|urrent_key; current_key = current_key->next)
MEMORY OFFSET:     0x2465a     149082  >>149090

0xc3f6:	test rax, rax                        
0xc3f9:	jne 0xc3ac                           
0xc3fb:	jmp 0xc3fe                           
0xc3fd:	nop                                  #	    |b|reak;
0xc3fe:	mov rax, qword ptr [rip + 0x2464b]   #    if (current_key |=|= NULL ||
MEMORY OFFSET:     0x2464b     149067  >>149075

0xc405:	test rax, rax                        #    if |(|current_key == NULL ||
0xc408:	je 0xc436                            
0xc40a:	mov rax, qword ptr [rbp - 0x18]      #	|s|trncmp(key_seq, (char *)current_key->key_seq, strlen(key_seq)) != 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0xc40e:	mov rdi, rax                         
0xc411:	call 0x4960                          
0xc416:	mov rdx, rax                         
0xc419:	mov rax, qword ptr [rip + 0x24630]   #	strncmp(key_seq, (char *)current_key|-|>key_seq, strlen(key_seq)) != 0)
MEMORY OFFSET:     0x24630     149040  >>149048

0xc420:	mov rcx, qword ptr [rax]             
0xc423:	mov rax, qword ptr [rbp - 0x18]      #	|s|trncmp(key_seq, (char *)current_key->key_seq, strlen(key_seq)) != 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0xc427:	mov rsi, rcx                         
0xc42a:	mov rdi, rax                         
0xc42d:	call 0x4850                          
0xc432:	test eax, eax                        #    if (current_key == NULL ||||
0xc434:	je 0xc43f                            
0xc436:	mov rax, -1                          #	return |(|tty_key_t *)-1;
0xc43d:	jmp 0xc444                           
0xc43f:	mov eax, 0                           #	return |N|ULL;
0xc444:	leave                                #|}|
0xc445:	ret                                  
0xc446:	endbr64                              #|{|
0xc44a:	push rbp                             
0xc44b:	mov rbp, rsp                         
0xc44e:	sub rsp, 0x40                        
0xc452:	mov qword ptr [rbp - 0x38], rdi      
MEMORY OFFSET:     -0x38     -56  >>-48

0xc456:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xc45f:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xc463:	xor eax, eax                         
0xc465:	lea rax, [rip + 0x1b88e]             #    char *|t|yped = "Keys typed so far: ";
MEMORY OFFSET:     0x1b88e     112782  >>112790

0xc46c:	mov qword ptr [rbp - 0x20], rax      
MEMORY OFFSET:     -0x20     -32  >>-24

0xc470:	lea rax, [rip + 0x1b897]             #    char *|i|ncomplete = " ";
MEMORY OFFSET:     0x1b897     112791  >>112799

0xc477:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xc47b:	lea rax, [rbp - 0x21]                #    |t|ty_save(&tty_status);
MEMORY OFFSET:     -0x21     -33  >>-25

0xc47f:	mov rdi, rax                         
0xc482:	call 0xc04b                          
0xc487:	mov eax, dword ptr [rip + 0x2454f]   #    |t|ty_goto(tty_lines - 1, 0);
MEMORY OFFSET:     0x2454f     148815  >>148823

0xc48d:	sub eax, 1                           
0xc490:	mov esi, 0                           
0xc495:	mov edi, eax                         
0xc497:	call 0xbe95                          
0xc49c:	mov edi, 7                           #    |t|ty_background(WHITE);
0xc4a1:	call 0xbf0b                          
0xc4a6:	mov edi, 0                           #    |t|ty_foreground(BLACK);
0xc4ab:	call 0xbee3                          
0xc4b0:	mov eax, dword ptr [rip + 0x2452a]   #    spaces = xmalloc(tty_columns|+|1);
MEMORY OFFSET:     0x2452a     148778  >>148786

0xc4b6:	add eax, 1                           
0xc4b9:	cdqe                                 #    spaces = |x|malloc(tty_columns+1);
0xc4bb:	mov rdi, rax                         
0xc4be:	call 0x24650                         
0xc4c3:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xc4c7:	mov eax, dword ptr [rip + 0x24513]   #    |m|emset(spaces, ' ', tty_columns);
MEMORY OFFSET:     0x24513     148755  >>148763

0xc4cd:	movsxd rdx, eax                      
0xc4d0:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xc4d4:	mov esi, 0x20                        
0xc4d9:	mov rdi, rax                         
0xc4dc:	call 0x4a10                          
0xc4e1:	mov eax, dword ptr [rip + 0x244f9]   #    spaces|[|tty_columns] = '\0';
MEMORY OFFSET:     0x244f9     148729  >>148737

0xc4e7:	movsxd rdx, eax                      
0xc4ea:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xc4ee:	add rax, rdx                         
0xc4f1:	mov byte ptr [rax], 0                #    spaces[tty_columns] |=| '\0';
0xc4f4:	mov edx, dword ptr [rip + 0x244e6]   #    |t|ty_puts(spaces, tty_columns);
MEMORY OFFSET:     0x244e6     148710  >>148718

0xc4fa:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xc4fe:	mov esi, edx                         
0xc500:	mov rdi, rax                         
0xc503:	call 0xb706                          
0xc508:	mov rax, qword ptr [rbp - 0x10]      #    |x|free(spaces);
MEMORY OFFSET:     -0x10     -16  >>-8

0xc50c:	mov rdi, rax                         
0xc50f:	call 0x1eeae                         
0xc514:	mov eax, dword ptr [rip + 0x244c2]   #    |t|ty_goto(tty_lines - 1, 0);
MEMORY OFFSET:     0x244c2     148674  >>148682

0xc51a:	sub eax, 1                           
0xc51d:	mov esi, 0                           
0xc522:	mov edi, eax                         
0xc524:	call 0xbe95                          
0xc529:	mov rax, qword ptr [rbp - 0x38]      #    |t|ty_key_machine2human(key_seq);
MEMORY OFFSET:     -0x38     -56  >>-48

0xc52d:	mov rdi, rax                         
0xc530:	call 0xb2c6                          
0xc535:	mov rax, qword ptr [rbp - 0x20]      #    tty_puts(typed, |s|trlen(typed));
MEMORY OFFSET:     -0x20     -32  >>-24

0xc539:	mov rdi, rax                         
0xc53c:	call 0x4960                          
0xc541:	mov edx, eax                         #    |t|ty_puts(typed, strlen(typed));
0xc543:	mov rax, qword ptr [rbp - 0x20]      
MEMORY OFFSET:     -0x20     -32  >>-24

0xc547:	mov esi, edx                         
0xc549:	mov rdi, rax                         
0xc54c:	call 0xb706                          
0xc551:	lea rax, [rip + 0x24d68]             #    tty_puts((char *)keystr, |s|trlen((char *)keystr));
MEMORY OFFSET:     0x24d68     150888  >>150896

0xc558:	mov rdi, rax                         
0xc55b:	call 0x4960                          
0xc560:	mov esi, eax                         #    |t|ty_puts((char *)keystr, strlen((char *)keystr));
0xc562:	lea rax, [rip + 0x24d57]             
MEMORY OFFSET:     0x24d57     150871  >>150879

0xc569:	mov rdi, rax                         
0xc56c:	call 0xb706                          
0xc571:	mov rax, qword ptr [rbp - 0x18]      #    tty_puts(incomplete, |s|trlen(incomplete));
MEMORY OFFSET:     -0x18     -24  >>-16

0xc575:	mov rdi, rax                         
0xc578:	call 0x4960                          
0xc57d:	mov edx, eax                         #    |t|ty_puts(incomplete, strlen(incomplete));
0xc57f:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xc583:	mov esi, edx                         
0xc585:	mov rdi, rax                         
0xc588:	call 0xb706                          
0xc58d:	mov eax, 0                           #    |t|ty_update();
0xc592:	call 0xb4b7                          
0xc597:	lea rax, [rbp - 0x21]                #    |t|ty_restore(&tty_status);
MEMORY OFFSET:     -0x21     -33  >>-25

0xc59b:	mov rdi, rax                         
0xc59e:	call 0xc067                          
0xc5a3:	nop                                  #|}|
0xc5a4:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xc5a8:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xc5b1:	je 0xc5b8                            
0xc5b3:	call 0x4980                          
0xc5b8:	leave                                
0xc5b9:	ret                                  
0xc5ba:	endbr64                              #|{|
0xc5be:	push rbp                             
0xc5bf:	mov rbp, rsp                         
0xc5c2:	sub rsp, 0x20                        
0xc5c6:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xc5ca:	mov qword ptr [rbp - 8], 0           #    tty_key_t *|k|ey = NULL;
MEMORY OFFSET:     -0x8     -8  >>0

0xc5d2:	nop                                  #    while |(|(c = tty_getc()) == -1)
0xc5d3:	mov eax, 0                           #    while ((c = |t|ty_getc()) == -1)
0xc5d8:	call 0xc182                          
0xc5dd:	mov dword ptr [rbp - 0xc], eax       
MEMORY OFFSET:     -0xc     -12  >>-4

0xc5e0:	cmp dword ptr [rbp - 0xc], -1        #    while ((c = tty_getc()) |=|= -1)
MEMORY OFFSET:     -0xc     -12  >>-4

0xc5e4:	je 0xc5d3                            
0xc5e6:	cmp qword ptr [rbp - 0x18], 0        #    if |(|repeat_count)
MEMORY OFFSET:     -0x18     -24  >>-16

0xc5eb:	je 0xc5f7                            
0xc5ed:	mov rax, qword ptr [rbp - 0x18]      #	*repeat_count |=| 1;
MEMORY OFFSET:     -0x18     -24  >>-16

0xc5f1:	mov dword ptr [rax], 1               
0xc5f7:	cmp dword ptr [rbp - 0xc], 0         #    if |(|c == 0)
MEMORY OFFSET:     -0xc     -12  >>-4

0xc5fb:	jne 0xc604                           
0xc5fd:	mov dword ptr [rbp - 0xc], 0xff      #	c |=| 0xff;
MEMORY OFFSET:     -0xc     -12  >>-4

0xc604:	mov eax, dword ptr [rip + 0x2434a]   #    if (tty_kbdmode |=|= TTY_RESTRICTED_INPUT)
MEMORY OFFSET:     0x2434a     148298  >>148306

0xc60a:	test eax, eax                        #    if |(|tty_kbdmode == TTY_RESTRICTED_INPUT)
0xc60c:	jne 0xc66f                           
0xc60e:	cmp dword ptr [rbp - 0xc], 0xa       #	if |(|c == '\n' || c == '\r')
MEMORY OFFSET:     -0xc     -12  >>-4

0xc612:	je 0xc61a                            
0xc614:	cmp dword ptr [rbp - 0xc], 0xd       #	if (c == '\n' |||| c == '\r')
MEMORY OFFSET:     -0xc     -12  >>-4

0xc618:	jne 0xc621                           
0xc61a:	mov dword ptr [rbp - 0xc], 0xa       #	    c |=| key_ENTER;
MEMORY OFFSET:     -0xc     -12  >>-4

0xc621:	call 0x4ec0                          #	if (|i|sprint(c) || c == key_INTERRUPT)
0xc626:	mov rdx, qword ptr [rax]             
0xc629:	mov eax, dword ptr [rbp - 0xc]       
MEMORY OFFSET:     -0xc     -12  >>-4

0xc62c:	cdqe                                 
0xc62e:	add rax, rax                         
0xc631:	add rax, rdx                         
0xc634:	movzx eax, word ptr [rax]            
0xc637:	movzx eax, ax                        
0xc63a:	and eax, 0x4000                      
0xc63f:	test eax, eax                        #	if |(|isprint(c) || c == key_INTERRUPT)
0xc641:	jne 0xc649                           
0xc643:	cmp dword ptr [rbp - 0xc], 7         #	if (isprint(c) |||| c == key_INTERRUPT)
MEMORY OFFSET:     -0xc     -12  >>-4

0xc647:	jne 0xc66f                           
0xc649:	mov rax, qword ptr [rip + 0x24410]   #	    default_key|.|key_seq[0] = c;
MEMORY OFFSET:     0x24410     148496  >>148504

0xc650:	mov edx, dword ptr [rbp - 0xc]       #	    default_key.key_seq[0] |=| c;
MEMORY OFFSET:     -0xc     -12  >>-4

0xc653:	mov byte ptr [rax], dl               
0xc655:	mov rax, qword ptr [rip + 0x24404]   #	    default_key|.|key_seq[1] = '\0';
MEMORY OFFSET:     0x24404     148484  >>148492

0xc65c:	add rax, 1                           #	    default_key.key_seq|[|1] = '\0';
0xc660:	mov byte ptr [rax], 0                #	    default_key.key_seq[1] |=| '\0';
0xc663:	lea rax, [rip + 0x243f6]             #	    return |&|default_key;
MEMORY OFFSET:     0x243f6     148470  >>148478

0xc66a:	jmp 0xc825                           
0xc66f:	mov dword ptr [rip + 0x24d73], 0     #    partial |=| 0;
MEMORY OFFSET:     0x24d73     150899  >>150907

0xc679:	mov dword ptr [rip + 0x24d6d], 0     #    key_on_display |=| 0;
MEMORY OFFSET:     0x24d6d     150893  >>150901

0xc683:	mov eax, 0                           #    |t|ty_key_search_restart();
0xc688:	call 0xc36d                          
0xc68d:	mov dword ptr [rbp - 0x10], 0        #    for (i |=| 0; i < MAX_KEY_LENGTH; i++)
MEMORY OFFSET:     -0x10     -16  >>-8

0xc694:	jmp 0xc760                           #    |f|or (i = 0; i < MAX_KEY_LENGTH; i++)
0xc699:	cmp dword ptr [rbp - 0xc], 0         #	if |(|c == 0)
MEMORY OFFSET:     -0xc     -12  >>-4

0xc69d:	jne 0xc6a6                           
0xc69f:	mov dword ptr [rbp - 0xc], 0xff      #	    c |=| 0xff;
MEMORY OFFSET:     -0xc     -12  >>-4

0xc6a6:	mov rdx, qword ptr [rip + 0x24343]   #	tty_key_seq|[|i] = c;
MEMORY OFFSET:     0x24343     148291  >>148299

0xc6ad:	mov eax, dword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xc6b0:	cdqe                                 
0xc6b2:	add rax, rdx                         
0xc6b5:	mov edx, dword ptr [rbp - 0xc]       #	tty_key_seq[i] |=| c;
MEMORY OFFSET:     -0xc     -12  >>-4

0xc6b8:	mov byte ptr [rax], dl               
0xc6ba:	mov rdx, qword ptr [rip + 0x2432f]   #	tty_key_seq|[|i + 1] = 0;
MEMORY OFFSET:     0x2432f     148271  >>148279

0xc6c1:	mov eax, dword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xc6c4:	cdqe                                 
0xc6c6:	add rax, 1                           
0xc6ca:	add rax, rdx                         
0xc6cd:	mov byte ptr [rax], 0                #	tty_key_seq[i + 1] |=| 0;
0xc6d0:	mov rax, qword ptr [rip + 0x24319]   #	key = |t|ty_key_search((char *)tty_key_seq);
MEMORY OFFSET:     0x24319     148249  >>148257

0xc6d7:	mov rdi, rax                         
0xc6da:	call 0xc386                          
0xc6df:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xc6e3:	cmp qword ptr [rbp - 8], -1          #	if |(|key == (tty_key_t *)-1)
MEMORY OFFSET:     -0x8     -8  >>0

0xc6e8:	jne 0xc708                           
0xc6ea:	mov edi, 1                           #	    |a|larm(1);
0xc6ef:	call 0x4a60                          
0xc6f4:	mov dword ptr [rip + 0x24cee], 0     #	    partial |=| 0;
MEMORY OFFSET:     0x24cee     150766  >>150774

0xc6fe:	mov eax, 0                           #	    return |N|ULL;
0xc703:	jmp 0xc825                           
0xc708:	cmp qword ptr [rbp - 8], 0           #	if |(|key)
MEMORY OFFSET:     -0x8     -8  >>0

0xc70d:	jne 0xc76c                           
0xc70f:	mov eax, dword ptr [rip + 0x24797]   #	if (keyno |=|= 0)
MEMORY OFFSET:     0x24797     149399  >>149407

0xc715:	test eax, eax                        #	if |(|keyno == 0)
0xc717:	jne 0xc748                           
0xc719:	mov eax, dword ptr [rip + 0x24cd1]   #	    if (|k|ey_on_display)
MEMORY OFFSET:     0x24cd1     150737  >>150745

0xc71f:	test eax, eax                        #	    if |(|key_on_display)
0xc721:	je 0xc734                            
0xc723:	mov rax, qword ptr [rip + 0x242c6]   #		|t|ty_key_print((char *)tty_key_seq);
MEMORY OFFSET:     0x242c6     148166  >>148174

0xc72a:	mov rdi, rax                         
0xc72d:	call 0xc446                          
0xc732:	jmp 0xc73e                           
0xc734:	mov edi, 1                           #		|a|larm(1);
0xc739:	call 0x4a60                          
0xc73e:	mov dword ptr [rip + 0x24ca4], 1     #	    partial |=| 1;
MEMORY OFFSET:     0x24ca4     150692  >>150700

0xc748:	nop                                  #	while |(|(c = tty_getc()) == -1)
0xc749:	mov eax, 0                           #	while ((c = |t|ty_getc()) == -1)
0xc74e:	call 0xc182                          
0xc753:	mov dword ptr [rbp - 0xc], eax       
MEMORY OFFSET:     -0xc     -12  >>-4

0xc756:	cmp dword ptr [rbp - 0xc], -1        #	while ((c = tty_getc()) |=|= -1)
MEMORY OFFSET:     -0xc     -12  >>-4

0xc75a:	je 0xc749                            
0xc75c:	add dword ptr [rbp - 0x10], 1        #    for (i = 0; i < MAX_KEY_LENGTH; i|+|+)
MEMORY OFFSET:     -0x10     -16  >>-8

0xc760:	cmp dword ptr [rbp - 0x10], 0xe      #    for (i = 0; i |<| MAX_KEY_LENGTH; i++)
MEMORY OFFSET:     -0x10     -16  >>-8

0xc764:	jle 0xc699                           
0xc76a:	jmp 0xc76d                           
0xc76c:	nop                                  #	    |b|reak;
0xc76d:	cmp dword ptr [rbp - 0x10], 0xf      #    if |(|i == MAX_KEY_LENGTH)
MEMORY OFFSET:     -0x10     -16  >>-8

0xc771:	jne 0xc791                           
0xc773:	mov edi, 1                           #	|a|larm(1);
0xc778:	call 0x4a60                          
0xc77d:	mov dword ptr [rip + 0x24c65], 0     #	partial |=| 0;
MEMORY OFFSET:     0x24c65     150629  >>150637

0xc787:	mov eax, 0                           #	return |N|ULL;
0xc78c:	jmp 0xc825                           
0xc791:	cmp qword ptr [rbp - 0x18], 0        #    if |(|repeat_count)
MEMORY OFFSET:     -0x18     -24  >>-16

0xc796:	je 0xc80d                            
0xc798:	jmp 0xc7d1                           #	while |(|keyno > i &&
0xc79a:	mov eax, dword ptr [rbp - 0x10]      #	    keyindex += i |+| 1;
MEMORY OFFSET:     -0x10     -16  >>-8

0xc79d:	lea edx, [rax + 1]                   
MEMORY OFFSET:     0x1     1  >>9

0xc7a0:	mov eax, dword ptr [rip + 0x2470a]   #	    keyindex |+|= i + 1;
MEMORY OFFSET:     0x2470a     149258  >>149266

0xc7a6:	add eax, edx                         
0xc7a8:	mov dword ptr [rip + 0x24702], eax   
MEMORY OFFSET:     0x24702     149250  >>149258

0xc7ae:	mov eax, dword ptr [rip + 0x246f8]   #	    keyno |-|= i + 1;
MEMORY OFFSET:     0x246f8     149240  >>149248

0xc7b4:	mov edx, dword ptr [rbp - 0x10]      #	    keyno -= i |+| 1;
MEMORY OFFSET:     -0x10     -16  >>-8

0xc7b7:	add edx, 1                           
0xc7ba:	sub eax, edx                         #	    keyno |-|= i + 1;
0xc7bc:	mov dword ptr [rip + 0x246ea], eax   
MEMORY OFFSET:     0x246ea     149226  >>149234

0xc7c2:	mov rax, qword ptr [rbp - 0x18]      #	    (|*|repeat_count)++;
MEMORY OFFSET:     -0x18     -24  >>-16

0xc7c6:	mov eax, dword ptr [rax]             
0xc7c8:	lea edx, [rax + 1]                   #	    (*repeat_count)|+|+;
MEMORY OFFSET:     0x1     1  >>9

0xc7cb:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xc7cf:	mov dword ptr [rax], edx             
0xc7d1:	mov eax, dword ptr [rip + 0x246d5]   #	while (keyno |>| i &&
MEMORY OFFSET:     0x246d5     149205  >>149213

0xc7d7:	cmp dword ptr [rbp - 0x10], eax      #	while (keyno > i |&|&
MEMORY OFFSET:     -0x10     -16  >>-8

0xc7da:	jge 0xc80d                           
0xc7dc:	mov eax, dword ptr [rbp - 0x10]      #	       (memcmp(tty_key_seq, &keybuf[keyindex], i |+| 1) == 0))
MEMORY OFFSET:     -0x10     -16  >>-8

0xc7df:	add eax, 1                           
0xc7e2:	movsxd rdx, eax                      #	       (|m|emcmp(tty_key_seq, &keybuf[keyindex], i + 1) == 0))
0xc7e5:	mov eax, dword ptr [rip + 0x246c5]   #	       (memcmp(tty_key_seq, &keybuf|[|keyindex], i + 1) == 0))
MEMORY OFFSET:     0x246c5     149189  >>149197

0xc7eb:	cdqe                                 #	       (memcmp(tty_key_seq, |&|keybuf[keyindex], i + 1) == 0))
0xc7ed:	lea rcx, [rip + 0x246cc]             
MEMORY OFFSET:     0x246cc     149196  >>149204

0xc7f4:	add rcx, rax                         
0xc7f7:	mov rax, qword ptr [rip + 0x241f2]   #	       (|m|emcmp(tty_key_seq, &keybuf[keyindex], i + 1) == 0))
MEMORY OFFSET:     0x241f2     147954  >>147962

0xc7fe:	mov rsi, rcx                         
0xc801:	mov rdi, rax                         
0xc804:	call 0x4ab0                          
0xc809:	test eax, eax                        #	while (keyno > i |&|&
0xc80b:	je 0xc79a                            
0xc80d:	mov edi, 1                           #    |a|larm(1);
0xc812:	call 0x4a60                          
0xc817:	mov dword ptr [rip + 0x24bcb], 0     #    partial |=| 0;
MEMORY OFFSET:     0x24bcb     150475  >>150483

0xc821:	mov rax, qword ptr [rbp - 8]         #    return |k|ey;
MEMORY OFFSET:     -0x8     -8  >>0

0xc825:	leave                                #|}|
0xc826:	ret                                  
0xc827:	endbr64                              #|{|
0xc82b:	push rbp                             
0xc82c:	mov rbp, rsp                         
0xc82f:	mov eax, dword ptr [rip + 0x24bb7]   #    if (|p|artial)
MEMORY OFFSET:     0x24bb7     150455  >>150463

0xc835:	test eax, eax                        #    if |(|partial)
0xc837:	je 0xc852                            
0xc839:	mov rax, qword ptr [rip + 0x241b0]   #	|t|ty_key_print((char *)tty_key_seq);
MEMORY OFFSET:     0x241b0     147888  >>147896

0xc840:	mov rdi, rax                         
0xc843:	call 0xc446                          
0xc848:	mov dword ptr [rip + 0x24b9e], 1     #	key_on_display |=| 1;
MEMORY OFFSET:     0x24b9e     150430  >>150438

0xc852:	nop                                  #|}|
0xc853:	pop rbp                              
0xc854:	ret                                  
0xc855:	endbr64                              #|{|
0xc859:	push rbp                             
0xc85a:	mov rbp, rsp                         
0xc85d:	mov rax, qword ptr [rip + 0x2418c]   #    return |(|char *)tty_key_seq;
MEMORY OFFSET:     0x2418c     147852  >>147860

0xc864:	pop rbp                              #|}|
0xc865:	ret                                  
0xc866:	endbr64                              #|{|
0xc86a:	push rbp                             
0xc86b:	mov rbp, rsp                         
0xc86e:	sub rsp, 0x60                        
0xc872:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xc87b:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xc87f:	xor eax, eax                         
0xc881:	mov dword ptr [rbp - 0x58], 0        #    int |s|hell_lines = 0, shell_columns = 0;
MEMORY OFFSET:     -0x58     -88  >>-80

0xc888:	mov dword ptr [rbp - 0x54], 0        #    int shell_lines = 0, |s|hell_columns = 0;
MEMORY OFFSET:     -0x54     -84  >>-76

0xc88f:	mov dword ptr [rbp - 0x48], 0        #    int |t|ermcap_lines = 0, termcap_columns = 0;
MEMORY OFFSET:     -0x48     -72  >>-64

0xc896:	mov dword ptr [rbp - 0x44], 0        #    int termcap_lines = 0, |t|ermcap_columns = 0;
MEMORY OFFSET:     -0x44     -68  >>-60

0xc89d:	mov dword ptr [rbp - 0x50], 0        #    int |w|insz_lines = 0, winsz_columns = 0;
MEMORY OFFSET:     -0x50     -80  >>-72

0xc8a4:	mov dword ptr [rbp - 0x4c], 0        #    int winsz_lines = 0, |w|insz_columns = 0;
MEMORY OFFSET:     -0x4c     -76  >>-68

0xc8ab:	lea rax, [rbp - 0x38]                #    if (|i|octl(TTY_OUTPUT, TIOCGWINSZ, &winsz) == 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0xc8af:	mov rdx, rax                         
0xc8b2:	mov esi, 0x5413                      
0xc8b7:	mov edi, 1                           
0xc8bc:	mov eax, 0                           
0xc8c1:	call 0x4a30                          
0xc8c6:	test eax, eax                        #    if |(|ioctl(TTY_OUTPUT, TIOCGWINSZ, &winsz) == 0)
0xc8c8:	jne 0xc8f0                           
0xc8ca:	movzx eax, word ptr [rbp - 0x36]     #	if (winsz|.|ws_col && winsz.ws_row)
MEMORY OFFSET:     -0x36     -54  >>-46

0xc8ce:	test ax, ax                          #	if |(|winsz.ws_col && winsz.ws_row)
0xc8d1:	je 0xc8f0                            
0xc8d3:	movzx eax, word ptr [rbp - 0x38]     #	if (winsz.ws_col && winsz|.|ws_row)
MEMORY OFFSET:     -0x38     -56  >>-48

0xc8d7:	test ax, ax                          #	if (winsz.ws_col |&|& winsz.ws_row)
0xc8da:	je 0xc8f0                            
0xc8dc:	movzx eax, word ptr [rbp - 0x36]     #	    winsz_columns = winsz|.|ws_col;
MEMORY OFFSET:     -0x36     -54  >>-46

0xc8e0:	movzx eax, ax                        #	    winsz_columns |=| winsz.ws_col;
0xc8e3:	mov dword ptr [rbp - 0x4c], eax      
MEMORY OFFSET:     -0x4c     -76  >>-68

0xc8e6:	movzx eax, word ptr [rbp - 0x38]     #	    winsz_lines   = winsz|.|ws_row;
MEMORY OFFSET:     -0x38     -56  >>-48

0xc8ea:	movzx eax, ax                        #	    winsz_lines   |=| winsz.ws_row;
0xc8ed:	mov dword ptr [rbp - 0x50], eax      
MEMORY OFFSET:     -0x50     -80  >>-72

0xc8f0:	lea rax, [rip + 0x1b419]             #    if ((env = |g|etenv("COLUMNS")))
MEMORY OFFSET:     0x1b419     111641  >>111649

0xc8f7:	mov rdi, rax                         
0xc8fa:	call 0x47a0                          
0xc8ff:	mov qword ptr [rbp - 0x40], rax      
MEMORY OFFSET:     -0x40     -64  >>-56

0xc903:	cmp qword ptr [rbp - 0x40], 0        #    if |(|(env = getenv("COLUMNS")))
MEMORY OFFSET:     -0x40     -64  >>-56

0xc908:	je 0xc929                            
0xc90a:	lea rdx, [rbp - 0x54]                #	|s|scanf(env, "%d", &shell_columns);
MEMORY OFFSET:     -0x54     -84  >>-76

0xc90e:	mov rax, qword ptr [rbp - 0x40]      
MEMORY OFFSET:     -0x40     -64  >>-56

0xc912:	lea rcx, [rip + 0x1b3ff]             
MEMORY OFFSET:     0x1b3ff     111615  >>111623

0xc919:	mov rsi, rcx                         
0xc91c:	mov rdi, rax                         
0xc91f:	mov eax, 0                           
0xc924:	call 0x4c30                          
0xc929:	lea rax, [rip + 0x1b3eb]             #    if ((env = |g|etenv("LINES")))
MEMORY OFFSET:     0x1b3eb     111595  >>111603

0xc930:	mov rdi, rax                         
0xc933:	call 0x47a0                          
0xc938:	mov qword ptr [rbp - 0x40], rax      
MEMORY OFFSET:     -0x40     -64  >>-56

0xc93c:	cmp qword ptr [rbp - 0x40], 0        #    if |(|(env = getenv("LINES")))
MEMORY OFFSET:     -0x40     -64  >>-56

0xc941:	je 0xc962                            
0xc943:	lea rdx, [rbp - 0x58]                #	|s|scanf(env, "%d", &shell_lines);
MEMORY OFFSET:     -0x58     -88  >>-80

0xc947:	mov rax, qword ptr [rbp - 0x40]      
MEMORY OFFSET:     -0x40     -64  >>-56

0xc94b:	lea rcx, [rip + 0x1b3c6]             
MEMORY OFFSET:     0x1b3c6     111558  >>111566

0xc952:	mov rsi, rcx                         
0xc955:	mov rdi, rax                         
0xc958:	mov eax, 0                           
0xc95d:	call 0x4c30                          
0xc962:	mov eax, dword ptr [rip + 0x234e8]   #    termcap_columns |=| TTY_COLUMNS;
MEMORY OFFSET:     0x234e8     144616  >>144624

0xc968:	mov dword ptr [rbp - 0x44], eax      
MEMORY OFFSET:     -0x44     -68  >>-60

0xc96b:	mov eax, dword ptr [rip + 0x234ff]   #    termcap_lines   |=| TTY_LINES;
MEMORY OFFSET:     0x234ff     144639  >>144647

0xc971:	mov dword ptr [rbp - 0x48], eax      
MEMORY OFFSET:     -0x48     -72  >>-64

0xc974:	cmp dword ptr [rbp - 0x4c], 0        #    if |(|columns_ok(winsz_columns))
MEMORY OFFSET:     -0x4c     -76  >>-68

0xc978:	jle 0xc98e                           
0xc97a:	cmp dword ptr [rbp - 0x4c], 0x400    #    if (|c|olumns_ok(winsz_columns))
MEMORY OFFSET:     -0x4c     -76  >>-68

0xc981:	jg 0xc98e                            
0xc983:	mov eax, dword ptr [rbp - 0x4c]      #	tty_columns |=| winsz_columns;
MEMORY OFFSET:     -0x4c     -76  >>-68

0xc986:	mov dword ptr [rip + 0x24054], eax   
MEMORY OFFSET:     0x24054     147540  >>147548

0xc98c:	jmp 0xc9ce                           
0xc98e:	mov eax, dword ptr [rbp - 0x54]      #	if (|c|olumns_ok(shell_columns))
MEMORY OFFSET:     -0x54     -84  >>-76

0xc991:	test eax, eax                        #	if |(|columns_ok(shell_columns))
0xc993:	jle 0xc9aa                           
0xc995:	mov eax, dword ptr [rbp - 0x54]      #	if (|c|olumns_ok(shell_columns))
MEMORY OFFSET:     -0x54     -84  >>-76

0xc998:	cmp eax, 0x400                       
0xc99d:	jg 0xc9aa                            
0xc99f:	mov eax, dword ptr [rbp - 0x54]      #	    tty_columns |=| shell_columns;
MEMORY OFFSET:     -0x54     -84  >>-76

0xc9a2:	mov dword ptr [rip + 0x24038], eax   
MEMORY OFFSET:     0x24038     147512  >>147520

0xc9a8:	jmp 0xc9ce                           
0xc9aa:	cmp dword ptr [rbp - 0x44], 0        #	else if |(|columns_ok(termcap_columns))
MEMORY OFFSET:     -0x44     -68  >>-60

0xc9ae:	jle 0xc9c4                           
0xc9b0:	cmp dword ptr [rbp - 0x44], 0x400    #	else if (|c|olumns_ok(termcap_columns))
MEMORY OFFSET:     -0x44     -68  >>-60

0xc9b7:	jg 0xc9c4                            
0xc9b9:	mov eax, dword ptr [rbp - 0x44]      #	    tty_columns |=| termcap_columns;
MEMORY OFFSET:     -0x44     -68  >>-60

0xc9bc:	mov dword ptr [rip + 0x2401e], eax   
MEMORY OFFSET:     0x2401e     147486  >>147494

0xc9c2:	jmp 0xc9ce                           
0xc9c4:	mov dword ptr [rip + 0x24012], 0x50  #	    tty_columns |=| 80;
MEMORY OFFSET:     0x24012     147474  >>147482

0xc9ce:	cmp dword ptr [rbp - 0x50], 0        #    if |(|lines_ok(winsz_lines))
MEMORY OFFSET:     -0x50     -80  >>-72

0xc9d2:	jle 0xc9e8                           
0xc9d4:	cmp dword ptr [rbp - 0x50], 0x400    #    if (|l|ines_ok(winsz_lines))
MEMORY OFFSET:     -0x50     -80  >>-72

0xc9db:	jg 0xc9e8                            
0xc9dd:	mov eax, dword ptr [rbp - 0x50]      #	tty_lines |=| winsz_lines;
MEMORY OFFSET:     -0x50     -80  >>-72

0xc9e0:	mov dword ptr [rip + 0x23ff6], eax   
MEMORY OFFSET:     0x23ff6     147446  >>147454

0xc9e6:	jmp 0xca28                           
0xc9e8:	mov eax, dword ptr [rbp - 0x58]      #	if (|l|ines_ok(shell_lines))
MEMORY OFFSET:     -0x58     -88  >>-80

0xc9eb:	test eax, eax                        #	if |(|lines_ok(shell_lines))
0xc9ed:	jle 0xca04                           
0xc9ef:	mov eax, dword ptr [rbp - 0x58]      #	if (|l|ines_ok(shell_lines))
MEMORY OFFSET:     -0x58     -88  >>-80

0xc9f2:	cmp eax, 0x400                       
0xc9f7:	jg 0xca04                            
0xc9f9:	mov eax, dword ptr [rbp - 0x58]      #	    tty_lines |=| shell_lines;
MEMORY OFFSET:     -0x58     -88  >>-80

0xc9fc:	mov dword ptr [rip + 0x23fda], eax   
MEMORY OFFSET:     0x23fda     147418  >>147426

0xca02:	jmp 0xca28                           
0xca04:	cmp dword ptr [rbp - 0x48], 0        #	else if |(|lines_ok(termcap_lines))
MEMORY OFFSET:     -0x48     -72  >>-64

0xca08:	jle 0xca1e                           
0xca0a:	cmp dword ptr [rbp - 0x48], 0x400    #	else if (|l|ines_ok(termcap_lines))
MEMORY OFFSET:     -0x48     -72  >>-64

0xca11:	jg 0xca1e                            
0xca13:	mov eax, dword ptr [rbp - 0x48]      #	    tty_lines |=| termcap_lines;
MEMORY OFFSET:     -0x48     -72  >>-64

0xca16:	mov dword ptr [rip + 0x23fc0], eax   
MEMORY OFFSET:     0x23fc0     147392  >>147400

0xca1c:	jmp 0xca28                           
0xca1e:	mov dword ptr [rip + 0x23fb4], 0x18  #	    tty_lines |=| 24;
MEMORY OFFSET:     0x23fb4     147380  >>147388

0xca28:	mov edx, dword ptr [rip + 0x23fae]   #    |s|printf(buf, "%d", tty_lines);
MEMORY OFFSET:     0x23fae     147374  >>147382

0xca2e:	lea rax, [rbp - 0x30]                
MEMORY OFFSET:     -0x30     -48  >>-40

0xca32:	lea rcx, [rip + 0x1b2df]             
MEMORY OFFSET:     0x1b2df     111327  >>111335

0xca39:	mov rsi, rcx                         
0xca3c:	mov rdi, rax                         
0xca3f:	mov eax, 0                           
0xca44:	call 0x4dd0                          
0xca49:	lea rax, [rbp - 0x30]                #    |x|setenv("LINES", buf);
MEMORY OFFSET:     -0x30     -48  >>-40

0xca4d:	mov rsi, rax                         
0xca50:	lea rax, [rip + 0x1b2c4]             
MEMORY OFFSET:     0x1b2c4     111300  >>111308

0xca57:	mov rdi, rax                         
0xca5a:	call 0x1e50a                         
0xca5f:	mov edx, dword ptr [rip + 0x23f7b]   #    |s|printf(buf, "%d", tty_columns);
MEMORY OFFSET:     0x23f7b     147323  >>147331

0xca65:	lea rax, [rbp - 0x30]                
MEMORY OFFSET:     -0x30     -48  >>-40

0xca69:	lea rcx, [rip + 0x1b2a8]             
MEMORY OFFSET:     0x1b2a8     111272  >>111280

0xca70:	mov rsi, rcx                         
0xca73:	mov rdi, rax                         
0xca76:	mov eax, 0                           
0xca7b:	call 0x4dd0                          
0xca80:	lea rax, [rbp - 0x30]                #    |x|setenv("COLUMNS", buf);
MEMORY OFFSET:     -0x30     -48  >>-40

0xca84:	mov rsi, rax                         
0xca87:	lea rax, [rip + 0x1b282]             
MEMORY OFFSET:     0x1b282     111234  >>111242

0xca8e:	mov rdi, rax                         
0xca91:	call 0x1e50a                         
0xca96:	mov rax, qword ptr [rip + 0x23f83]   #    if (|t|ty_scr)
MEMORY OFFSET:     0x23f83     147331  >>147339

0xca9d:	test rax, rax                        #    if |(|tty_scr)
0xcaa0:	je 0xcab1                            
0xcaa2:	mov rax, qword ptr [rip + 0x23f77]   #	|x|free(tty_scr);
MEMORY OFFSET:     0x23f77     147319  >>147327

0xcaa9:	mov rdi, rax                         
0xcaac:	call 0x1eeae                         
0xcab1:	mov rax, qword ptr [rip + 0x23f70]   #    if (|t|ty_atr)
MEMORY OFFSET:     0x23f70     147312  >>147320

0xcab8:	test rax, rax                        #    if |(|tty_atr)
0xcabb:	je 0xcacc                            
0xcabd:	mov rax, qword ptr [rip + 0x23f64]   #	|x|free(tty_atr);
MEMORY OFFSET:     0x23f64     147300  >>147308

0xcac4:	mov rdi, rax                         
0xcac7:	call 0x1eeae                         
0xcacc:	mov rax, qword ptr [rip + 0x23f5d]   #    if (|t|ty_prev_scr)
MEMORY OFFSET:     0x23f5d     147293  >>147301

0xcad3:	test rax, rax                        #    if |(|tty_prev_scr)
0xcad6:	je 0xcae7                            
0xcad8:	mov rax, qword ptr [rip + 0x23f51]   #	|x|free(tty_prev_scr);
MEMORY OFFSET:     0x23f51     147281  >>147289

0xcadf:	mov rdi, rax                         
0xcae2:	call 0x1eeae                         
0xcae7:	mov rax, qword ptr [rip + 0x23f4a]   #    if (|t|ty_prev_atr)
MEMORY OFFSET:     0x23f4a     147274  >>147282

0xcaee:	test rax, rax                        #    if |(|tty_prev_atr)
0xcaf1:	je 0xcb02                            
0xcaf3:	mov rax, qword ptr [rip + 0x23f3e]   #	|x|free(tty_prev_atr);
MEMORY OFFSET:     0x23f3e     147262  >>147270

0xcafa:	mov rdi, rax                         
0xcafd:	call 0x1eeae                         
0xcb02:	mov edx, dword ptr [rip + 0x23ed8]   #	tty_columns |*| tty_lines, sizeof(unsigned char));
MEMORY OFFSET:     0x23ed8     147160  >>147168

0xcb08:	mov eax, dword ptr [rip + 0x23ece]   
MEMORY OFFSET:     0x23ece     147150  >>147158

0xcb0e:	imul eax, edx                        
0xcb11:	cdqe                                 #    tty_scr = (unsigned char *)|x|calloc(
0xcb13:	mov esi, 1                           
0xcb18:	mov rdi, rax                         
0xcb1b:	call 0x24720                         
0xcb20:	mov qword ptr [rip + 0x23ef9], rax   #    tty_scr |=| (unsigned char *)xcalloc(
MEMORY OFFSET:     0x23ef9     147193  >>147201

0xcb27:	mov edx, dword ptr [rip + 0x23eb3]   #	tty_columns |*| tty_lines, sizeof(unsigned char));
MEMORY OFFSET:     0x23eb3     147123  >>147131

0xcb2d:	mov eax, dword ptr [rip + 0x23ea9]   
MEMORY OFFSET:     0x23ea9     147113  >>147121

0xcb33:	imul eax, edx                        
0xcb36:	cdqe                                 #    tty_atr = (unsigned char *)|x|calloc(
0xcb38:	mov esi, 1                           
0xcb3d:	mov rdi, rax                         
0xcb40:	call 0x24720                         
0xcb45:	mov qword ptr [rip + 0x23edc], rax   #    tty_atr |=| (unsigned char *)xcalloc(
MEMORY OFFSET:     0x23edc     147164  >>147172

0xcb4c:	mov edx, dword ptr [rip + 0x23e8e]   #	tty_columns |*| tty_lines, sizeof(unsigned char));
MEMORY OFFSET:     0x23e8e     147086  >>147094

0xcb52:	mov eax, dword ptr [rip + 0x23e84]   
MEMORY OFFSET:     0x23e84     147076  >>147084

0xcb58:	imul eax, edx                        
0xcb5b:	cdqe                                 #    tty_prev_scr = (unsigned char *)|x|calloc(
0xcb5d:	mov esi, 1                           
0xcb62:	mov rdi, rax                         
0xcb65:	call 0x24720                         
0xcb6a:	mov qword ptr [rip + 0x23ebf], rax   #    tty_prev_scr |=| (unsigned char *)xcalloc(
MEMORY OFFSET:     0x23ebf     147135  >>147143

0xcb71:	mov edx, dword ptr [rip + 0x23e69]   #	tty_columns |*| tty_lines, sizeof(unsigned char));
MEMORY OFFSET:     0x23e69     147049  >>147057

0xcb77:	mov eax, dword ptr [rip + 0x23e5f]   
MEMORY OFFSET:     0x23e5f     147039  >>147047

0xcb7d:	imul eax, edx                        
0xcb80:	cdqe                                 #    tty_prev_atr = (unsigned char *)|x|calloc(
0xcb82:	mov esi, 1                           
0xcb87:	mov rdi, rax                         
0xcb8a:	call 0x24720                         
0xcb8f:	mov qword ptr [rip + 0x23ea2], rax   #    tty_prev_atr |=| (unsigned char *)xcalloc(
MEMORY OFFSET:     0x23ea2     147106  >>147114

0xcb96:	nop                                  #|}|
0xcb97:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xcb9b:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xcba4:	je 0xcbab                            
0xcba6:	call 0x4980                          
0xcbab:	leave                                
0xcbac:	ret                                  
0xcbad:	endbr64                              #|{|
0xcbb1:	push rbp                             
0xcbb2:	mov rbp, rsp                         
0xcbb5:	sub rsp, 0x50                        
0xcbb9:	mov qword ptr [rbp - 0x48], rdi      
MEMORY OFFSET:     -0x48     -72  >>-64

0xcbbd:	mov dword ptr [rbp - 0x4c], esi      
MEMORY OFFSET:     -0x4c     -76  >>-68

0xcbc0:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xcbc9:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xcbcd:	xor eax, eax                         
0xcbcf:	lea rax, [rbp - 0x30]                #    |s|trcpy(vcs_name, "/dev/vcsXX");
MEMORY OFFSET:     -0x30     -48  >>-40

0xcbd3:	movabs rcx, 0x7363762f7665642f       
0xcbdd:	mov qword ptr [rax], rcx             
0xcbe0:	mov word ptr [rax + 8], 0x5858       
MEMORY OFFSET:     0x8     8  >>16

0xcbe6:	mov byte ptr [rax + 0xa], 0          
MEMORY OFFSET:     0xa     10  >>18

0xcbea:	lea rax, [rbp - 0x20]                #    |s|trcpy(vcsa_name, "/dev/vcsaXX");
MEMORY OFFSET:     -0x20     -32  >>-24

0xcbee:	mov qword ptr [rax], rcx             
0xcbf1:	mov dword ptr [rax + 8], 0x585861    
MEMORY OFFSET:     0x8     8  >>16

0xcbf8:	cmp dword ptr [rbp - 0x4c], 1        #    if |(|op == VCS_READ)
MEMORY OFFSET:     -0x4c     -76  >>-68

0xcbfc:	jne 0xcc12                           
0xcbfe:	mov dword ptr [rbp - 0x3c], 0        #	flag |=| O_RDONLY;
MEMORY OFFSET:     -0x3c     -60  >>-52

0xcc05:	mov rax, qword ptr [rip + 0x223c4]   #	fn |=| read;
MEMORY OFFSET:     0x223c4     140228  >>140236

0xcc0c:	mov qword ptr [rbp - 0x38], rax      
MEMORY OFFSET:     -0x38     -56  >>-48

0xcc10:	jmp 0xcc32                           
0xcc12:	mov dword ptr [rbp - 0x3c], 1        #	flag |=| O_WRONLY;
MEMORY OFFSET:     -0x3c     -60  >>-52

0xcc19:	mov rax, qword ptr [rip + 0x223a8]   #	fn |=| write;
MEMORY OFFSET:     0x223a8     140200  >>140208

0xcc20:	mov qword ptr [rbp - 0x38], rax      
MEMORY OFFSET:     -0x38     -56  >>-48

0xcc24:	mov eax, dword ptr [rip + 0x23d26]   #	if (|v|cs_is_monochrome)
MEMORY OFFSET:     0x23d26     146726  >>146734

0xcc2a:	test eax, eax                        #	if |(|vcs_is_monochrome)
0xcc2c:	jne 0xcd1e                           
0xcc32:	mov dword ptr [rip + 0x23d14], 0     #    vcs_is_monochrome |=| 0;
MEMORY OFFSET:     0x23d14     146708  >>146716

0xcc3c:	mov rax, qword ptr [rip + 0x23da5]   #    vcsa_name[9] |=| tty_device[8];
MEMORY OFFSET:     0x23da5     146853  >>146861

0xcc43:	movzx eax, byte ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0xcc47:	mov byte ptr [rbp - 0x17], al        
MEMORY OFFSET:     -0x17     -23  >>-15

0xcc4a:	mov rax, qword ptr [rip + 0x23d97]   #    vcsa_name[10] |=| tty_device[9];
MEMORY OFFSET:     0x23d97     146839  >>146847

0xcc51:	movzx eax, byte ptr [rax + 9]        
MEMORY OFFSET:     0x9     9  >>17

0xcc55:	mov byte ptr [rbp - 0x16], al        
MEMORY OFFSET:     -0x16     -22  >>-14

0xcc58:	mov edx, dword ptr [rbp - 0x3c]      #    vcsfd = |o|pen(vcsa_name, flag);
MEMORY OFFSET:     -0x3c     -60  >>-52

0xcc5b:	lea rax, [rbp - 0x20]                
MEMORY OFFSET:     -0x20     -32  >>-24

0xcc5f:	mov esi, edx                         
0xcc61:	mov rdi, rax                         
0xcc64:	mov eax, 0                           
0xcc69:	call 0x4d30                          
0xcc6e:	mov dword ptr [rbp - 0x40], eax      
MEMORY OFFSET:     -0x40     -64  >>-56

0xcc71:	cmp dword ptr [rbp - 0x40], -1       #    if |(|vcsfd != -1)
MEMORY OFFSET:     -0x40     -64  >>-56

0xcc75:	je 0xccf1                            
0xcc77:	nop                                  #      |v|csa_label:
0xcc78:	jmp 0xcc7b                           
0xcc7a:	nop                                  #	|g|oto vcsa_label;
0xcc7b:	mov edx, dword ptr [rip + 0x23d5b]   #	(*fn)(vcsfd, buf, 4 + tty_lines |*| tty_columns * 2);
MEMORY OFFSET:     0x23d5b     146779  >>146787

0xcc81:	mov eax, dword ptr [rip + 0x23d59]   
MEMORY OFFSET:     0x23d59     146777  >>146785

0xcc87:	imul eax, edx                        
0xcc8a:	add eax, 2                           #	(*fn)(vcsfd, buf, 4 |+| tty_lines * tty_columns * 2);
0xcc8d:	lea edx, [rax + rax]                 #	(|*|fn)(vcsfd, buf, 4 + tty_lines * tty_columns * 2);
0xcc90:	mov rcx, qword ptr [rbp - 0x48]      
MEMORY OFFSET:     -0x48     -72  >>-64

0xcc94:	mov eax, dword ptr [rbp - 0x40]      
MEMORY OFFSET:     -0x40     -64  >>-56

0xcc97:	mov r8, qword ptr [rbp - 0x38]       
MEMORY OFFSET:     -0x38     -56  >>-48

0xcc9b:	mov rsi, rcx                         
0xcc9e:	mov edi, eax                         
0xcca0:	mov eax, 0                           
0xcca5:	call r8                              
0xcca8:	mov eax, dword ptr [rbp - 0x40]      #	|c|lose(vcsfd);
MEMORY OFFSET:     -0x40     -64  >>-56

0xccab:	mov edi, eax                         
0xccad:	call 0x4a70                          
0xccb2:	cmp dword ptr [rbp - 0x4c], 2        #	if |(|op == VCS_WRITE)
MEMORY OFFSET:     -0x4c     -76  >>-68

0xccb6:	jne 0xcce7                           
0xccb8:	mov rax, qword ptr [rbp - 0x48]      #	    tty_io_goto(buf[3], buf|[|2]);
MEMORY OFFSET:     -0x48     -72  >>-64

0xccbc:	add rax, 2                           
0xccc0:	movzx eax, byte ptr [rax]            
0xccc3:	movsx edx, al                        #	    |t|ty_io_goto(buf[3], buf[2]);
0xccc6:	mov rax, qword ptr [rbp - 0x48]      #	    tty_io_goto(buf|[|3], buf[2]);
MEMORY OFFSET:     -0x48     -72  >>-64

0xccca:	add rax, 3                           
0xccce:	movzx eax, byte ptr [rax]            
0xccd1:	movsx eax, al                        #	    |t|ty_io_goto(buf[3], buf[2]);
0xccd4:	mov esi, edx                         
0xccd6:	mov edi, eax                         
0xccd8:	call 0xb9ff                          
0xccdd:	mov eax, 0                           #	    |t|ty_flush();
0xcce2:	call 0xafe2                          
0xcce7:	mov eax, 1                           #	return |1|;
0xccec:	jmp 0xce08                           
0xccf1:	mov byte ptr [rbp - 0x17], 0x30      #    vcsa_name[9] |=| '0';
MEMORY OFFSET:     -0x17     -23  >>-15

0xccf5:	mov byte ptr [rbp - 0x16], 0         #    vcsa_name[10] |=| '\0';
MEMORY OFFSET:     -0x16     -22  >>-14

0xccf9:	mov edx, dword ptr [rbp - 0x3c]      #    vcsfd = |o|pen(vcsa_name, flag);
MEMORY OFFSET:     -0x3c     -60  >>-52

0xccfc:	lea rax, [rbp - 0x20]                
MEMORY OFFSET:     -0x20     -32  >>-24

0xcd00:	mov esi, edx                         
0xcd02:	mov rdi, rax                         
0xcd05:	mov eax, 0                           
0xcd0a:	call 0x4d30                          
0xcd0f:	mov dword ptr [rbp - 0x40], eax      
MEMORY OFFSET:     -0x40     -64  >>-56

0xcd12:	cmp dword ptr [rbp - 0x40], -1       #    if |(|vcsfd != -1)
MEMORY OFFSET:     -0x40     -64  >>-56

0xcd16:	jne 0xcc7a                           
0xcd1c:	jmp 0xcd1f                           #  |m|onochrome:
0xcd1e:	nop                                  #	    |g|oto monochrome;
0xcd1f:	mov dword ptr [rip + 0x23c27], 1     #    vcs_is_monochrome |=| 1;
MEMORY OFFSET:     0x23c27     146471  >>146479

0xcd29:	cmp dword ptr [rbp - 0x4c], 2        #    if |(|op == VCS_WRITE)
MEMORY OFFSET:     -0x4c     -76  >>-68

0xcd2d:	jne 0xcd39                           
0xcd2f:	mov eax, 0                           #	|t|ty_clear();
0xcd34:	call 0xb8a5                          
0xcd39:	mov rax, qword ptr [rip + 0x23ca8]   #    vcs_name[8] |=| tty_device[8];
MEMORY OFFSET:     0x23ca8     146600  >>146608

0xcd40:	movzx eax, byte ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0xcd44:	mov byte ptr [rbp - 0x28], al        
MEMORY OFFSET:     -0x28     -40  >>-32

0xcd47:	mov rax, qword ptr [rip + 0x23c9a]   #    vcs_name[9] |=| tty_device[9];
MEMORY OFFSET:     0x23c9a     146586  >>146594

0xcd4e:	movzx eax, byte ptr [rax + 9]        
MEMORY OFFSET:     0x9     9  >>17

0xcd52:	mov byte ptr [rbp - 0x27], al        
MEMORY OFFSET:     -0x27     -39  >>-31

0xcd55:	mov edx, dword ptr [rbp - 0x3c]      #    vcsfd = |o|pen(vcs_name, flag);
MEMORY OFFSET:     -0x3c     -60  >>-52

0xcd58:	lea rax, [rbp - 0x30]                
MEMORY OFFSET:     -0x30     -48  >>-40

0xcd5c:	mov esi, edx                         
0xcd5e:	mov rdi, rax                         
0xcd61:	mov eax, 0                           
0xcd66:	call 0x4d30                          
0xcd6b:	mov dword ptr [rbp - 0x40], eax      
MEMORY OFFSET:     -0x40     -64  >>-56

0xcd6e:	cmp dword ptr [rbp - 0x40], -1       #    if |(|vcsfd != -1)
MEMORY OFFSET:     -0x40     -64  >>-56

0xcd72:	je 0xcdd8                            
0xcd74:	nop                                  #      |v|cs_label:
0xcd75:	jmp 0xcd78                           
0xcd77:	nop                                  #	|g|oto vcs_label;
0xcd78:	mov edx, dword ptr [rip + 0x23c5e]   #	(*fn)(vcsfd, buf, 4 + tty_lines |*| tty_columns);
MEMORY OFFSET:     0x23c5e     146526  >>146534

0xcd7e:	mov eax, dword ptr [rip + 0x23c5c]   
MEMORY OFFSET:     0x23c5c     146524  >>146532

0xcd84:	imul eax, edx                        
0xcd87:	lea edx, [rax + 4]                   #	(|*|fn)(vcsfd, buf, 4 + tty_lines * tty_columns);
MEMORY OFFSET:     0x4     4  >>12

0xcd8a:	mov rcx, qword ptr [rbp - 0x48]      
MEMORY OFFSET:     -0x48     -72  >>-64

0xcd8e:	mov eax, dword ptr [rbp - 0x40]      
MEMORY OFFSET:     -0x40     -64  >>-56

0xcd91:	mov r8, qword ptr [rbp - 0x38]       
MEMORY OFFSET:     -0x38     -56  >>-48

0xcd95:	mov rsi, rcx                         
0xcd98:	mov edi, eax                         
0xcd9a:	mov eax, 0                           
0xcd9f:	call r8                              
0xcda2:	mov eax, dword ptr [rbp - 0x40]      #	|c|lose(vcsfd);
MEMORY OFFSET:     -0x40     -64  >>-56

0xcda5:	mov edi, eax                         
0xcda7:	call 0x4a70                          
0xcdac:	cmp dword ptr [rbp - 0x4c], 2        #	if |(|op == VCS_WRITE)
MEMORY OFFSET:     -0x4c     -76  >>-68

0xcdb0:	jne 0xcdd1                           
0xcdb2:	mov eax, dword ptr [rip + 0x23c24]   #	    |t|ty_io_goto(tty_lines - 1, 0);
MEMORY OFFSET:     0x23c24     146468  >>146476

0xcdb8:	sub eax, 1                           
0xcdbb:	mov esi, 0                           
0xcdc0:	mov edi, eax                         
0xcdc2:	call 0xb9ff                          
0xcdc7:	mov eax, 0                           #	    |t|ty_flush();
0xcdcc:	call 0xafe2                          
0xcdd1:	mov eax, 1                           #	return |1|;
0xcdd6:	jmp 0xce08                           
0xcdd8:	mov byte ptr [rbp - 0x28], 0x30      #    vcs_name[8] |=| '0';
MEMORY OFFSET:     -0x28     -40  >>-32

0xcddc:	mov byte ptr [rbp - 0x27], 0         #    vcs_name[9] |=| '\0';
MEMORY OFFSET:     -0x27     -39  >>-31

0xcde0:	mov edx, dword ptr [rbp - 0x3c]      #    vcsfd = |o|pen(vcs_name, flag);
MEMORY OFFSET:     -0x3c     -60  >>-52

0xcde3:	lea rax, [rbp - 0x30]                
MEMORY OFFSET:     -0x30     -48  >>-40

0xcde7:	mov esi, edx                         
0xcde9:	mov rdi, rax                         
0xcdec:	mov eax, 0                           
0xcdf1:	call 0x4d30                          
0xcdf6:	mov dword ptr [rbp - 0x40], eax      
MEMORY OFFSET:     -0x40     -64  >>-56

0xcdf9:	cmp dword ptr [rbp - 0x40], -1       #    if |(|vcsfd != -1)
MEMORY OFFSET:     -0x40     -64  >>-56

0xcdfd:	jne 0xcd77                           
0xce03:	mov eax, 0                           #    return |0|;
0xce08:	mov rdx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0xce0c:	sub rdx, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xce15:	je 0xce1c                            
0xce17:	call 0x4980                          #|}|
0xce1c:	leave                                
0xce1d:	ret                                  
0xce1e:	endbr64                              #|{|
0xce22:	push rbp                             
0xce23:	mov rbp, rsp                         
0xce26:	sub rsp, 0x10                        
0xce2a:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xce2e:	mov eax, dword ptr [rip + 0x23c0c]   #    if (|L|inuxConsole)
MEMORY OFFSET:     0x23c0c     146444  >>146452

0xce34:	test eax, eax                        #    if |(|LinuxConsole)
0xce36:	je 0xce54                            
0xce38:	mov rax, qword ptr [rbp - 8]         #	vcs_read_ok = |v|cs_io(buf, VCS_READ);
MEMORY OFFSET:     -0x8     -8  >>0

0xce3c:	mov esi, 1                           
0xce41:	mov rdi, rax                         
0xce44:	mov eax, 0                           
0xce49:	call 0xcbad                          
0xce4e:	mov dword ptr [rip + 0x23af8], eax   #	vcs_read_ok |=| vcs_io(buf, VCS_READ);
MEMORY OFFSET:     0x23af8     146168  >>146176

0xce54:	nop                                  #|}|
0xce55:	leave                                
0xce56:	ret                                  
0xce57:	endbr64                              #|{|
0xce5b:	push rbp                             
0xce5c:	mov rbp, rsp                         
0xce5f:	sub rsp, 0x10                        
0xce63:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xce67:	mov eax, 0                           #    |t|ty_defaults();
0xce6c:	call 0xc083                          
0xce71:	mov eax, dword ptr [rip + 0x23bc9]   #    if (|L|inuxConsole)
MEMORY OFFSET:     0x23bc9     146377  >>146385

0xce77:	test eax, eax                        #    if |(|LinuxConsole)
0xce79:	je 0xcee9                            
0xce7b:	mov eax, dword ptr [rip + 0x23acb]   #	if (|v|cs_read_ok)
MEMORY OFFSET:     0x23acb     146123  >>146131

0xce81:	test eax, eax                        #	if |(|vcs_read_ok)
0xce83:	je 0xcedd                            
0xce85:	mov eax, 0                           #	    |t|ty_touch();
0xce8a:	call 0xb9ce                          
0xce8f:	mov rax, qword ptr [rbp - 8]         #	    if (|v|cs_io(buf, VCS_WRITE) == 0)
MEMORY OFFSET:     -0x8     -8  >>0

0xce93:	mov esi, 2                           
0xce98:	mov rdi, rax                         
0xce9b:	mov eax, 0                           
0xcea0:	call 0xcbad                          
0xcea5:	test eax, eax                        #	    if |(|vcs_io(buf, VCS_WRITE) == 0)
0xcea7:	jne 0xceb5                           
0xcea9:	mov eax, 0                           #		|t|ty_clear();
0xceae:	call 0xb8a5                          
0xceb3:	jmp 0xcef3                           #|}|
0xceb5:	mov edx, dword ptr [rip + 0x23b21]   #		       tty_lines |*| tty_columns * sizeof(unsigned char));
MEMORY OFFSET:     0x23b21     146209  >>146217

0xcebb:	mov eax, dword ptr [rip + 0x23b1f]   
MEMORY OFFSET:     0x23b1f     146207  >>146215

0xcec1:	imul eax, edx                        
0xcec4:	movsxd rdx, eax                      #		|m|emset(tty_scr, '\0',
0xcec7:	mov rax, qword ptr [rip + 0x23b52]   
MEMORY OFFSET:     0x23b52     146258  >>146266

0xcece:	mov esi, 0                           
0xced3:	mov rdi, rax                         
0xced6:	call 0x4a10                          
0xcedb:	jmp 0xcef3                           #|}|
0xcedd:	mov eax, 0                           #	    |t|ty_clear();
0xcee2:	call 0xb8a5                          
0xcee7:	jmp 0xcef3                           #|}|
0xcee9:	mov eax, 0                           #	|t|ty_clear();
0xceee:	call 0xb8a5                          
0xcef3:	nop                                  #|}|
0xcef4:	leave                                
0xcef5:	ret                                  
0xcef6:	endbr64                              #|{|
0xcefa:	push rbp                             
0xcefb:	mov rbp, rsp                         
0xcefe:	sub rsp, 0x20                        
0xcf02:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xcf06:	mov dword ptr [rbp - 4], 0           #    for (i |=| 0; i < 10; i++)
MEMORY OFFSET:     -0x4     -4  >>4

0xcf0d:	jmp 0xcf51                           #    |f|or (i = 0; i < 10; i++)
0xcf0f:	mov eax, dword ptr [rbp - 4]         #	if (strcmp(colors|[|i], colorname) == 0)
MEMORY OFFSET:     -0x4     -4  >>4

0xcf12:	cdqe                                 
0xcf14:	lea rdx, [rax*8]                     
0xcf1c:	lea rax, [rip + 0x2325d]             
MEMORY OFFSET:     0x2325d     143965  >>143973

0xcf23:	mov rax, qword ptr [rdx + rax]       
0xcf27:	mov rdx, qword ptr [rbp - 0x18]      #	if (|s|trcmp(colors[i], colorname) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0xcf2b:	mov rsi, rdx                         
0xcf2e:	mov rdi, rax                         
0xcf31:	call 0x4af0                          
0xcf36:	test eax, eax                        #	if |(|strcmp(colors[i], colorname) == 0)
0xcf38:	jne 0xcf4d                           
0xcf3a:	cmp dword ptr [rbp - 4], 7           #	    return (i < 8) ? i |:| (i - 8);
MEMORY OFFSET:     -0x4     -4  >>4

0xcf3e:	jle 0xcf48                           
0xcf40:	mov eax, dword ptr [rbp - 4]         #	    return (i < 8) ? i |:| (i - 8);
MEMORY OFFSET:     -0x4     -4  >>4

0xcf43:	sub eax, 8                           
0xcf46:	jmp 0xcf5c                           
0xcf48:	mov eax, dword ptr [rbp - 4]         #	    return (i < 8) ? i |:| (i - 8);
MEMORY OFFSET:     -0x4     -4  >>4

0xcf4b:	jmp 0xcf5c                           
0xcf4d:	add dword ptr [rbp - 4], 1           #    for (i = 0; i < 10; i|+|+)
MEMORY OFFSET:     -0x4     -4  >>4

0xcf51:	cmp dword ptr [rbp - 4], 9           #    for (i = 0; i |<| 10; i++)
MEMORY OFFSET:     -0x4     -4  >>4

0xcf55:	jle 0xcf0f                           
0xcf57:	mov eax, 0xffffffff                  #    return |-|1;
0xcf5c:	leave                                #|}|
0xcf5d:	ret                                  
0xcf5e:	endbr64                              #|{|
0xcf62:	push rbp                             
0xcf63:	mov rbp, rsp                         
0xcf66:	sub rsp, 0x20                        
0xcf6a:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xcf6e:	mov dword ptr [rbp - 4], 0x11        #    for (i |=| TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i++)
MEMORY OFFSET:     -0x4     -4  >>4

0xcf75:	jmp 0xcfbe                           #    |f|or (i = TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i++)
0xcf77:	mov eax, dword ptr [rbp - 4]         #	if (strcmp(tty_capability[i]|.|symbol, symbol) == 0)
MEMORY OFFSET:     -0x4     -4  >>4

0xcf7a:	cdqe                                 
0xcf7c:	shl rax, 5                           
0xcf80:	mov rdx, rax                         
0xcf83:	lea rax, [rip + 0x22d2e]             
MEMORY OFFSET:     0x22d2e     142638  >>142646

0xcf8a:	mov rax, qword ptr [rdx + rax]       
0xcf8e:	mov rdx, qword ptr [rbp - 0x18]      #	if (|s|trcmp(tty_capability[i].symbol, symbol) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0xcf92:	mov rsi, rdx                         
0xcf95:	mov rdi, rax                         
0xcf98:	call 0x4af0                          
0xcf9d:	test eax, eax                        #	if |(|strcmp(tty_capability[i].symbol, symbol) == 0)
0xcf9f:	jne 0xcfba                           
0xcfa1:	mov eax, dword ptr [rbp - 4]         #	    return tty_capability[i]|.|string;
MEMORY OFFSET:     -0x4     -4  >>4

0xcfa4:	cdqe                                 
0xcfa6:	shl rax, 5                           
0xcfaa:	mov rdx, rax                         
0xcfad:	lea rax, [rip + 0x22cf4]             
MEMORY OFFSET:     0x22cf4     142580  >>142588

0xcfb4:	mov rax, qword ptr [rdx + rax]       
0xcfb8:	jmp 0xcfc9                           
0xcfba:	add dword ptr [rbp - 4], 1           #    for (i = TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i|+|+)
MEMORY OFFSET:     -0x4     -4  >>4

0xcfbe:	cmp dword ptr [rbp - 4], 0x25        #    for (i = TTY_FIRST_SYMBOL_KEY; i |<| TTY_CAPABILITIES_USED; i++)
MEMORY OFFSET:     -0x4     -4  >>4

0xcfc2:	jle 0xcf77                           
0xcfc4:	mov eax, 0                           #    return |N|ULL;
0xcfc9:	leave                                #|}|
0xcfca:	ret                                  
0xcfcb:	endbr64                              #|{|
0xcfcf:	push rbp                             
0xcfd0:	mov rbp, rsp                         
0xcfd3:	sub rsp, 0xd0                        
0xcfda:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xcfe3:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xcfe7:	xor eax, eax                         
0xcfe9:	mov dword ptr [rbp - 0xc0], 0        #    int err, i, |t|erm_errors = 0;
MEMORY OFFSET:     -0xc0     -192  >>-184

0xcff3:	lea rax, [rip + 0x1ad27]             #    char *termtype = |g|etenv("TERM");
MEMORY OFFSET:     0x1ad27     109863  >>109871

0xcffa:	mov rdi, rax                         
0xcffd:	call 0x47a0                          
0xd002:	mov qword ptr [rbp - 0xb0], rax      
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd009:	lea rax, [rbp - 0xa0]                #    |f|stat(TTY_OUTPUT, &statbuf);
MEMORY OFFSET:     -0xa0     -160  >>-152

0xd010:	mov rsi, rax                         
0xd013:	mov edi, 1                           
0xd018:	call 0x4e80                          
0xd01d:	mov rax, qword ptr [rbp - 0x78]      #    if ((statbuf|.|st_rdev >> 8) == LINUX_VC_MAJOR)
MEMORY OFFSET:     -0x78     -120  >>-112

0xd021:	shr rax, 8                           #    if ((statbuf.st_rdev |>|> 8) == LINUX_VC_MAJOR)
0xd025:	cmp rax, 4                           #    if |(|(statbuf.st_rdev >> 8) == LINUX_VC_MAJOR)
0xd029:	jne 0xd037                           
0xd02b:	mov dword ptr [rip + 0x23a0b], 1     #	LinuxConsole |=| 1;
MEMORY OFFSET:     0x23a0b     145931  >>145939

0xd035:	jmp 0xd041                           
0xd037:	mov dword ptr [rip + 0x239ff], 0     #	LinuxConsole |=| 0;
MEMORY OFFSET:     0x239ff     145919  >>145927

0xd041:	cmp qword ptr [rbp - 0xb0], 0        #    if |(|termtype == NULL)
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd049:	jne 0xd072                           
0xd04b:	mov rdx, qword ptr [rip + 0x23886]   #	|f|printf(stderr, "%s: can't find the TERM environment variable, ",
MEMORY OFFSET:     0x23886     145542  >>145550

0xd052:	mov rax, qword ptr [rip + 0x23867]   
MEMORY OFFSET:     0x23867     145511  >>145519

0xd059:	lea rcx, [rip + 0x1acc8]             
MEMORY OFFSET:     0x1acc8     109768  >>109776

0xd060:	mov rsi, rcx                         
0xd063:	mov rdi, rax                         
0xd066:	mov eax, 0                           
0xd06b:	call 0x4b40                          
0xd070:	jmp 0xd0ac                           #	|g|oto switch_to_vt100;
0xd072:	mov rax, qword ptr [rbp - 0xb0]      #    if (|s|trlen(termtype) > 63)
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd079:	mov rdi, rax                         
0xd07c:	call 0x4960                          
0xd081:	cmp rax, 0x3f                        #    if |(|strlen(termtype) > 63)
0xd085:	jbe 0xd0df                           
0xd087:	mov rdx, qword ptr [rip + 0x2384a]   #	|f|printf(stderr, "%s: the TERM environment variable is too long, ",
MEMORY OFFSET:     0x2384a     145482  >>145490

0xd08e:	mov rax, qword ptr [rip + 0x2382b]   
MEMORY OFFSET:     0x2382b     145451  >>145459

0xd095:	lea rcx, [rip + 0x1acbc]             
MEMORY OFFSET:     0x1acbc     109756  >>109764

0xd09c:	mov rsi, rcx                         
0xd09f:	mov rdi, rax                         
0xd0a2:	mov eax, 0                           
0xd0a7:	call 0x4b40                          
0xd0ac:	mov rax, qword ptr [rip + 0x2380d]   #	|f|printf(stderr, "trying vt100 ...\n");
MEMORY OFFSET:     0x2380d     145421  >>145429

0xd0b3:	mov rcx, rax                         
0xd0b6:	mov edx, 0x11                        
0xd0bb:	mov esi, 1                           
0xd0c0:	lea rax, [rip + 0x1acc1]             
MEMORY OFFSET:     0x1acc1     109761  >>109769

0xd0c7:	mov rdi, rax                         
0xd0ca:	call 0x4e10                          
0xd0cf:	lea rax, [rip + 0x22bc4]             #	termtype |=| vt100;
MEMORY OFFSET:     0x22bc4     142276  >>142284

0xd0d6:	mov qword ptr [rbp - 0xb0], rax      
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd0dd:	jmp 0xd0e0                           
0xd0df:	nop                                  #  |r|etry:
0xd0e0:	mov rax, qword ptr [rbp - 0xb0]      #    err = |t|getent(NULL, termtype);
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd0e7:	mov rsi, rax                         
0xd0ea:	mov edi, 0                           
0xd0ef:	call 0x4e60                          
0xd0f4:	mov dword ptr [rbp - 0xbc], eax      
MEMORY OFFSET:     -0xbc     -188  >>-180

0xd0fa:	cmp dword ptr [rbp - 0xbc], -1       #    if |(|err == -1)
MEMORY OFFSET:     -0xbc     -188  >>-180

0xd101:	jne 0xd15f                           
0xd103:	mov rdx, qword ptr [rip + 0x237ce]   #	|f|printf(stderr, "%s: can't find the %s database.\n",
MEMORY OFFSET:     0x237ce     145358  >>145366

0xd10a:	mov rax, qword ptr [rip + 0x237af]   
MEMORY OFFSET:     0x237af     145327  >>145335

0xd111:	lea rcx, [rip + 0x23048]             
MEMORY OFFSET:     0x23048     143432  >>143440

0xd118:	lea rsi, [rip + 0x1ac81]             
MEMORY OFFSET:     0x1ac81     109697  >>109705

0xd11f:	mov rdi, rax                         
0xd122:	mov eax, 0                           
0xd127:	call 0x4b40                          
0xd12c:	mov rdx, qword ptr [rip + 0x237a5]   #	|f|printf(stderr, "%s: check your %s environment variable ...\n",
MEMORY OFFSET:     0x237a5     145317  >>145325

0xd133:	mov rax, qword ptr [rip + 0x23786]   
MEMORY OFFSET:     0x23786     145286  >>145294

0xd13a:	lea rcx, [rip + 0x2302f]             
MEMORY OFFSET:     0x2302f     143407  >>143415

0xd141:	lea rsi, [rip + 0x1ac80]             
MEMORY OFFSET:     0x1ac80     109696  >>109704

0xd148:	mov rdi, rax                         
0xd14b:	mov eax, 0                           
0xd150:	call 0x4b40                          
0xd155:	mov edi, 1                           #	|e|xit(1);
0xd15a:	call 0x4df0                          
0xd15f:	cmp dword ptr [rbp - 0xbc], 0        #    if |(|err == 0)
MEMORY OFFSET:     -0xbc     -188  >>-180

0xd166:	jne 0xd2b8                           
0xd16c:	mov rdx, qword ptr [rip + 0x23765]   #	|f|printf(stderr,
MEMORY OFFSET:     0x23765     145253  >>145261

0xd173:	mov rax, qword ptr [rip + 0x23746]   
MEMORY OFFSET:     0x23746     145222  >>145230

0xd17a:	mov rcx, qword ptr [rbp - 0xb0]      
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd181:	lea r8, [rip + 0x22fd8]              
MEMORY OFFSET:     0x22fd8     143320  >>143328

0xd188:	lea rsi, [rip + 0x1ac69]             
MEMORY OFFSET:     0x1ac69     109673  >>109681

0xd18f:	mov rdi, rax                         
0xd192:	mov eax, 0                           
0xd197:	call 0x4b40                          
0xd19c:	mov rax, qword ptr [rbp - 0xb0]      #	if (|s|trcmp(termtype, "iris-ansi") == 0)
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd1a3:	lea rdx, [rip + 0x1ac87]             
MEMORY OFFSET:     0x1ac87     109703  >>109711

0xd1aa:	mov rsi, rdx                         
0xd1ad:	mov rdi, rax                         
0xd1b0:	call 0x4af0                          
0xd1b5:	test eax, eax                        #	if |(|strcmp(termtype, "iris-ansi") == 0)
0xd1b7:	jne 0xd1f1                           
0xd1b9:	mov rdx, qword ptr [rip + 0x23718]   #	    |f|printf(stderr, "%s: trying ansi...\n", g_program);
MEMORY OFFSET:     0x23718     145176  >>145184

0xd1c0:	mov rax, qword ptr [rip + 0x236f9]   
MEMORY OFFSET:     0x236f9     145145  >>145153

0xd1c7:	lea rcx, [rip + 0x1ac6d]             
MEMORY OFFSET:     0x1ac6d     109677  >>109685

0xd1ce:	mov rsi, rcx                         
0xd1d1:	mov rdi, rax                         
0xd1d4:	mov eax, 0                           
0xd1d9:	call 0x4b40                          
0xd1de:	lea rax, [rip + 0x1ac6a]             #	    termtype |=| "ansi";
MEMORY OFFSET:     0x1ac6a     109674  >>109682

0xd1e5:	mov qword ptr [rbp - 0xb0], rax      
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd1ec:	jmp 0xd0e0                           #	    |g|oto retry;
0xd1f1:	mov rax, qword ptr [rbp - 0xb0]      #	if (|t|ty_is_xterm(termtype))
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd1f8:	mov rdi, rax                         
0xd1fb:	call 0xd9a3                          
0xd200:	test eax, eax                        #	if |(|tty_is_xterm(termtype))
0xd202:	je 0xd23c                            
0xd204:	mov rdx, qword ptr [rip + 0x236cd]   #	    |f|printf(stderr, "%s: trying xterm...\n", g_program);
MEMORY OFFSET:     0x236cd     145101  >>145109

0xd20b:	mov rax, qword ptr [rip + 0x236ae]   
MEMORY OFFSET:     0x236ae     145070  >>145078

0xd212:	lea rcx, [rip + 0x1ac3b]             
MEMORY OFFSET:     0x1ac3b     109627  >>109635

0xd219:	mov rsi, rcx                         
0xd21c:	mov rdi, rax                         
0xd21f:	mov eax, 0                           
0xd224:	call 0x4b40                          
0xd229:	lea rax, [rip + 0x1ac39]             #	    termtype |=| "xterm";
MEMORY OFFSET:     0x1ac39     109625  >>109633

0xd230:	mov qword ptr [rbp - 0xb0], rax      
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd237:	jmp 0xd0e0                           #	    |g|oto retry;
0xd23c:	mov rax, qword ptr [rbp - 0xb0]      #	if (|s|trcmp(termtype, "vt220") == 0 ||
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd243:	lea rdx, [rip + 0x1ac25]             
MEMORY OFFSET:     0x1ac25     109605  >>109613

0xd24a:	mov rsi, rdx                         
0xd24d:	mov rdi, rax                         
0xd250:	call 0x4af0                          
0xd255:	test eax, eax                        #	if |(|strcmp(termtype, "vt220") == 0 ||
0xd257:	je 0xd276                            
0xd259:	mov rax, qword ptr [rbp - 0xb0]      #	    |s|trcmp(termtype, "vt320") == 0)
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd260:	lea rdx, [rip + 0x1ac0e]             
MEMORY OFFSET:     0x1ac0e     109582  >>109590

0xd267:	mov rsi, rdx                         
0xd26a:	mov rdi, rax                         
0xd26d:	call 0x4af0                          
0xd272:	test eax, eax                        #	if (strcmp(termtype, "vt220") == 0 ||||
0xd274:	jne 0xd2ae                           
0xd276:	mov rdx, qword ptr [rip + 0x2365b]   #	    |f|printf(stderr, "%s: trying vt100...\n", g_program);
MEMORY OFFSET:     0x2365b     144987  >>144995

0xd27d:	mov rax, qword ptr [rip + 0x2363c]   
MEMORY OFFSET:     0x2363c     144956  >>144964

0xd284:	lea rcx, [rip + 0x1abf0]             
MEMORY OFFSET:     0x1abf0     109552  >>109560

0xd28b:	mov rsi, rcx                         
0xd28e:	mov rdi, rax                         
0xd291:	mov eax, 0                           
0xd296:	call 0x4b40                          
0xd29b:	lea rax, [rip + 0x1abad]             #	    termtype |=| "ansi";
MEMORY OFFSET:     0x1abad     109485  >>109493

0xd2a2:	mov qword ptr [rbp - 0xb0], rax      
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd2a9:	jmp 0xd0e0                           #	    |g|oto retry;
0xd2ae:	mov edi, 1                           #	|e|xit(1);
0xd2b3:	call 0x4df0                          
0xd2b8:	mov rax, qword ptr [rbp - 0xb0]      #    tty_type = |x|strdup(termtype);
MEMORY OFFSET:     -0xb0     -176  >>-168

0xd2bf:	mov rdi, rax                         
0xd2c2:	call 0x24780                         
0xd2c7:	mov qword ptr [rip + 0x23bba], rax   #    tty_type |=| xstrdup(termtype);
MEMORY OFFSET:     0x23bba     146362  >>146370

0xd2ce:	mov edi, 0x800                       #    capability_buf = |x|malloc(2048);
0xd2d3:	call 0x24650                         
0xd2d8:	mov qword ptr [rbp - 0xb8], rax      #    capability_buf |=| xmalloc(2048);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd2df:	mov rax, qword ptr [rip + 0x22a9a]   #    tmp = tgetstr(|T|TY_PAD_CHAR_NAME, &capability_buf);
MEMORY OFFSET:     0x22a9a     141978  >>141986

0xd2e6:	lea rdx, [rbp - 0xb8]                #    tmp = |t|getstr(TTY_PAD_CHAR_NAME, &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd2ed:	mov rsi, rdx                         
0xd2f0:	mov rdi, rax                         
0xd2f3:	call 0x4c70                          
0xd2f8:	mov qword ptr [rbp - 0xa8], rax      
MEMORY OFFSET:     -0xa8     -168  >>-160

0xd2ff:	cmp qword ptr [rbp - 0xa8], 0        #    PC |=| tmp ? *tmp : 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0xd307:	je 0xd315                            
0xd309:	mov rax, qword ptr [rbp - 0xa8]      #    PC |=| tmp ? *tmp : 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0xd310:	movzx eax, byte ptr [rax]            
0xd313:	jmp 0xd31a                           
0xd315:	mov eax, 0                           #    PC |=| tmp ? *tmp : 0;
0xd31a:	mov byte ptr [rip + 0x23b70], al     #    PC |=| tmp ? *tmp : 0;
MEMORY OFFSET:     0x23b70     146288  >>146296

0xd320:	mov rax, qword ptr [rip + 0x22a99]   #    BC = tgetstr(|T|TY_LEFT_ONE_SPACE_NAME, &capability_buf);
MEMORY OFFSET:     0x22a99     141977  >>141985

0xd327:	lea rdx, [rbp - 0xb8]                #    BC = |t|getstr(TTY_LEFT_ONE_SPACE_NAME, &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd32e:	mov rsi, rdx                         
0xd331:	mov rdi, rax                         
0xd334:	call 0x4c70                          
0xd339:	mov qword ptr [rip + 0x23b58], rax   #    BC |=| tgetstr(TTY_LEFT_ONE_SPACE_NAME, &capability_buf);
MEMORY OFFSET:     0x23b58     146264  >>146272

0xd340:	mov rax, qword ptr [rip + 0x22a59]   #    UP = tgetstr(|T|TY_UP_ONE_LINE_NAME,    &capability_buf);
MEMORY OFFSET:     0x22a59     141913  >>141921

0xd347:	lea rdx, [rbp - 0xb8]                #    UP = |t|getstr(TTY_UP_ONE_LINE_NAME,    &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd34e:	mov rsi, rdx                         
0xd351:	mov rdi, rax                         
0xd354:	call 0x4c70                          
0xd359:	mov qword ptr [rip + 0x23b40], rax   #    UP |=| tgetstr(TTY_UP_ONE_LINE_NAME,    &capability_buf);
MEMORY OFFSET:     0x23b40     146240  >>146248

0xd360:	mov rax, qword ptr [rip + 0x23b31]   #    if (BC |=|= NULL || UP == NULL)
MEMORY OFFSET:     0x23b31     146225  >>146233

0xd367:	test rax, rax                        #    if |(|BC == NULL || UP == NULL)
0xd36a:	je 0xd378                            
0xd36c:	mov rax, qword ptr [rip + 0x23b2d]   #    if (BC == NULL || UP |=|= NULL)
MEMORY OFFSET:     0x23b2d     146221  >>146229

0xd373:	test rax, rax                        #    if (BC == NULL |||| UP == NULL)
0xd376:	jne 0xd391                           
0xd378:	mov qword ptr [rip + 0x23b1d], 0     #	BC = UP |=| NULL;
MEMORY OFFSET:     0x23b1d     146205  >>146213

0xd383:	mov rax, qword ptr [rip + 0x23b16]   #	BC |=| UP = NULL;
MEMORY OFFSET:     0x23b16     146198  >>146206

0xd38a:	mov qword ptr [rip + 0x23b07], rax   
MEMORY OFFSET:     0x23b07     146183  >>146191

0xd391:	mov rax, qword ptr [rip + 0x22908]   #    TTY_ATTRIBUTES_OFF = tgetstr(|T|TY_ATTRIBUTES_OFF_NAME, &capability_buf);
MEMORY OFFSET:     0x22908     141576  >>141584

0xd398:	lea rdx, [rbp - 0xb8]                #    TTY_ATTRIBUTES_OFF = |t|getstr(TTY_ATTRIBUTES_OFF_NAME, &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd39f:	mov rsi, rdx                         
0xd3a2:	mov rdi, rax                         
0xd3a5:	call 0x4c70                          
0xd3aa:	mov qword ptr [rip + 0x228f7], rax   #    TTY_ATTRIBUTES_OFF |=| tgetstr(TTY_ATTRIBUTES_OFF_NAME, &capability_buf);
MEMORY OFFSET:     0x228f7     141559  >>141567

0xd3b1:	mov rax, qword ptr [rip + 0x22928]   #    TTY_BRIGHT_ON      = tgetstr(|T|TY_BRIGHT_ON_NAME,      &capability_buf);
MEMORY OFFSET:     0x22928     141608  >>141616

0xd3b8:	lea rdx, [rbp - 0xb8]                #    TTY_BRIGHT_ON      = |t|getstr(TTY_BRIGHT_ON_NAME,      &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd3bf:	mov rsi, rdx                         
0xd3c2:	mov rdi, rax                         
0xd3c5:	call 0x4c70                          
0xd3ca:	mov qword ptr [rip + 0x22917], rax   #    TTY_BRIGHT_ON      |=| tgetstr(TTY_BRIGHT_ON_NAME,      &capability_buf);
MEMORY OFFSET:     0x22917     141591  >>141599

0xd3d1:	mov rax, qword ptr [rip + 0x228e8]   #    TTY_REVERSE_ON     = tgetstr(|T|TY_REVERSE_ON_NAME,     &capability_buf);
MEMORY OFFSET:     0x228e8     141544  >>141552

0xd3d8:	lea rdx, [rbp - 0xb8]                #    TTY_REVERSE_ON     = |t|getstr(TTY_REVERSE_ON_NAME,     &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd3df:	mov rsi, rdx                         
0xd3e2:	mov rdi, rax                         
0xd3e5:	call 0x4c70                          
0xd3ea:	mov qword ptr [rip + 0x228d7], rax   #    TTY_REVERSE_ON     |=| tgetstr(TTY_REVERSE_ON_NAME,     &capability_buf);
MEMORY OFFSET:     0x228d7     141527  >>141535

0xd3f1:	mov rax, qword ptr [rip + 0x228b0]   #    if (|T|TY_ATTRIBUTES_OFF == NULL)
MEMORY OFFSET:     0x228b0     141488  >>141496

0xd3f8:	test rax, rax                        #    if |(|TTY_ATTRIBUTES_OFF == NULL)
0xd3fb:	jne 0xd416                           
0xd3fd:	mov qword ptr [rip + 0x228e0], 0     #	TTY_REVERSE_ON = TTY_BRIGHT_ON |=| NULL;
MEMORY OFFSET:     0x228e0     141536  >>141544

0xd408:	mov rax, qword ptr [rip + 0x228d9]   #	TTY_REVERSE_ON = |T|TY_BRIGHT_ON = NULL;
MEMORY OFFSET:     0x228d9     141529  >>141537

0xd40f:	mov qword ptr [rip + 0x228b2], rax   #	TTY_REVERSE_ON |=| TTY_BRIGHT_ON = NULL;
MEMORY OFFSET:     0x228b2     141490  >>141498

0xd416:	mov rax, qword ptr [rip + 0x229c3]   #    TTY_STANDOUT_ON  = tgetstr(|T|TY_STANDOUT_ON_NAME,  &capability_buf);
MEMORY OFFSET:     0x229c3     141763  >>141771

0xd41d:	lea rdx, [rbp - 0xb8]                #    TTY_STANDOUT_ON  = |t|getstr(TTY_STANDOUT_ON_NAME,  &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd424:	mov rsi, rdx                         
0xd427:	mov rdi, rax                         
0xd42a:	call 0x4c70                          
0xd42f:	mov qword ptr [rip + 0x229b2], rax   #    TTY_STANDOUT_ON  |=| tgetstr(TTY_STANDOUT_ON_NAME,  &capability_buf);
MEMORY OFFSET:     0x229b2     141746  >>141754

0xd436:	mov rax, qword ptr [rip + 0x229ab]   #    if (|T|TY_STANDOUT_ON == NULL)
MEMORY OFFSET:     0x229ab     141739  >>141747

0xd43d:	test rax, rax                        #    if |(|TTY_STANDOUT_ON == NULL)
0xd440:	jne 0xd459                           
0xd442:	mov qword ptr [rip + 0x2299b], 0     #	TTY_STANDOUT_ON |=| NULL;
MEMORY OFFSET:     0x2299b     141723  >>141731

0xd44d:	mov dword ptr [rip + 0x229d9], 0     #	TTY_MS_FLAG |=| 0;
MEMORY OFFSET:     0x229d9     141785  >>141793

0xd457:	jmp 0xd47c                           
0xd459:	mov rax, qword ptr [rip + 0x22988]   #	TTY_REVERSE_ON = |T|TY_STANDOUT_ON;
MEMORY OFFSET:     0x22988     141704  >>141712

0xd460:	mov qword ptr [rip + 0x22861], rax   #	TTY_REVERSE_ON |=| TTY_STANDOUT_ON;
MEMORY OFFSET:     0x22861     141409  >>141417

0xd467:	mov rax, qword ptr [rip + 0x229b2]   #	TTY_MS_FLAG = tgetflag(|T|TY_MS_FLAG_NAME);
MEMORY OFFSET:     0x229b2     141746  >>141754

0xd46e:	mov rdi, rax                         #	TTY_MS_FLAG = |t|getflag(TTY_MS_FLAG_NAME);
0xd471:	call 0x4c60                          
0xd476:	mov dword ptr [rip + 0x229b4], eax   #	TTY_MS_FLAG |=| tgetflag(TTY_MS_FLAG_NAME);
MEMORY OFFSET:     0x229b4     141748  >>141756

0xd47c:	mov rax, qword ptr [rip + 0x2297d]   #    TTY_MAGIC_COOKIE = tgetnum(|T|TY_MAGIC_COOKIE_NAME);
MEMORY OFFSET:     0x2297d     141693  >>141701

0xd483:	mov rdi, rax                         #    TTY_MAGIC_COOKIE = |t|getnum(TTY_MAGIC_COOKIE_NAME);
0xd486:	call 0x4c20                          
0xd48b:	mov dword ptr [rip + 0x2297f], eax   #    TTY_MAGIC_COOKIE |=| tgetnum(TTY_MAGIC_COOKIE_NAME);
MEMORY OFFSET:     0x2297f     141695  >>141703

0xd491:	mov eax, dword ptr [rip + 0x22979]   #    if (|T|TY_MAGIC_COOKIE >= 0)
MEMORY OFFSET:     0x22979     141689  >>141697

0xd497:	test eax, eax                        #    if |(|TTY_MAGIC_COOKIE >= 0)
0xd499:	js 0xd4c2                            
0xd49b:	mov qword ptr [rip + 0x22842], 0     #	TTY_ATTRIBUTES_OFF = TTY_REVERSE_ON = TTY_BRIGHT_ON |=| NULL;
MEMORY OFFSET:     0x22842     141378  >>141386

0xd4a6:	mov rax, qword ptr [rip + 0x2283b]   #	TTY_ATTRIBUTES_OFF = TTY_REVERSE_ON = |T|TY_BRIGHT_ON = NULL;
MEMORY OFFSET:     0x2283b     141371  >>141379

0xd4ad:	mov qword ptr [rip + 0x22814], rax   #	TTY_ATTRIBUTES_OFF = TTY_REVERSE_ON |=| TTY_BRIGHT_ON = NULL;
MEMORY OFFSET:     0x22814     141332  >>141340

0xd4b4:	mov rax, qword ptr [rip + 0x2280d]   #	TTY_ATTRIBUTES_OFF = |T|TY_REVERSE_ON = TTY_BRIGHT_ON = NULL;
MEMORY OFFSET:     0x2280d     141325  >>141333

0xd4bb:	mov qword ptr [rip + 0x227e6], rax   #	TTY_ATTRIBUTES_OFF |=| TTY_REVERSE_ON = TTY_BRIGHT_ON = NULL;
MEMORY OFFSET:     0x227e6     141286  >>141294

0xd4c2:	mov rax, qword ptr [rip + 0x22977]   #    TTY_COLUMNS = tgetnum(|T|TY_COLUMNS_NAME);
MEMORY OFFSET:     0x22977     141687  >>141695

0xd4c9:	mov rdi, rax                         #    TTY_COLUMNS = |t|getnum(TTY_COLUMNS_NAME);
0xd4cc:	call 0x4c20                          
0xd4d1:	mov dword ptr [rip + 0x22979], eax   #    TTY_COLUMNS |=| tgetnum(TTY_COLUMNS_NAME);
MEMORY OFFSET:     0x22979     141689  >>141697

0xd4d7:	mov rax, qword ptr [rip + 0x22982]   #    TTY_LINES   = tgetnum(|T|TY_LINES_NAME);
MEMORY OFFSET:     0x22982     141698  >>141706

0xd4de:	mov rdi, rax                         #    TTY_LINES   = |t|getnum(TTY_LINES_NAME);
0xd4e1:	call 0x4c20                          
0xd4e6:	mov dword ptr [rip + 0x22984], eax   #    TTY_LINES   |=| tgetnum(TTY_LINES_NAME);
MEMORY OFFSET:     0x22984     141700  >>141708

0xd4ec:	mov rax, qword ptr [rip + 0x2280d]   #    TTY_CURSOR_OFF = tgetstr(|T|TY_CURSOR_OFF_NAME, &capability_buf);
MEMORY OFFSET:     0x2280d     141325  >>141333

0xd4f3:	lea rdx, [rbp - 0xb8]                #    TTY_CURSOR_OFF = |t|getstr(TTY_CURSOR_OFF_NAME, &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd4fa:	mov rsi, rdx                         
0xd4fd:	mov rdi, rax                         
0xd500:	call 0x4c70                          
0xd505:	mov qword ptr [rip + 0x227fc], rax   #    TTY_CURSOR_OFF |=| tgetstr(TTY_CURSOR_OFF_NAME, &capability_buf);
MEMORY OFFSET:     0x227fc     141308  >>141316

0xd50c:	mov rax, qword ptr [rip + 0x2280d]   #    TTY_CURSOR_ON  = tgetstr(|T|TY_CURSOR_ON_NAME,  &capability_buf);
MEMORY OFFSET:     0x2280d     141325  >>141333

0xd513:	lea rdx, [rbp - 0xb8]                #    TTY_CURSOR_ON  = |t|getstr(TTY_CURSOR_ON_NAME,  &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd51a:	mov rsi, rdx                         
0xd51d:	mov rdi, rax                         
0xd520:	call 0x4c70                          
0xd525:	mov qword ptr [rip + 0x227fc], rax   #    TTY_CURSOR_ON  |=| tgetstr(TTY_CURSOR_ON_NAME,  &capability_buf);
MEMORY OFFSET:     0x227fc     141308  >>141316

0xd52c:	mov rax, qword ptr [rip + 0x227d5]   #    if (|T|TY_CURSOR_OFF == NULL || TTY_CURSOR_ON == NULL)
MEMORY OFFSET:     0x227d5     141269  >>141277

0xd533:	test rax, rax                        #    if |(|TTY_CURSOR_OFF == NULL || TTY_CURSOR_ON == NULL)
0xd536:	je 0xd544                            
0xd538:	mov rax, qword ptr [rip + 0x227e9]   #    if (TTY_CURSOR_OFF == NULL || |T|TY_CURSOR_ON == NULL)
MEMORY OFFSET:     0x227e9     141289  >>141297

0xd53f:	test rax, rax                        #    if (TTY_CURSOR_OFF == NULL |||| TTY_CURSOR_ON == NULL)
0xd542:	jne 0xd55d                           
0xd544:	mov qword ptr [rip + 0x227b9], 0     #	TTY_CURSOR_ON = TTY_CURSOR_OFF |=| NULL;
MEMORY OFFSET:     0x227b9     141241  >>141249

0xd54f:	mov rax, qword ptr [rip + 0x227b2]   #	TTY_CURSOR_ON = |T|TY_CURSOR_OFF = NULL;
MEMORY OFFSET:     0x227b2     141234  >>141242

0xd556:	mov qword ptr [rip + 0x227cb], rax   #	TTY_CURSOR_ON |=| TTY_CURSOR_OFF = NULL;
MEMORY OFFSET:     0x227cb     141259  >>141267

0xd55d:	mov rax, qword ptr [rip + 0x227dc]   #    TTY_CLEAR_SCREEN = tgetstr(|T|TY_CLEAR_SCREEN_NAME, &capability_buf);
MEMORY OFFSET:     0x227dc     141276  >>141284

0xd564:	lea rdx, [rbp - 0xb8]                #    TTY_CLEAR_SCREEN = |t|getstr(TTY_CLEAR_SCREEN_NAME, &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd56b:	mov rsi, rdx                         
0xd56e:	mov rdi, rax                         
0xd571:	call 0x4c70                          
0xd576:	mov qword ptr [rip + 0x227cb], rax   #    TTY_CLEAR_SCREEN |=| tgetstr(TTY_CLEAR_SCREEN_NAME, &capability_buf);
MEMORY OFFSET:     0x227cb     141259  >>141267

0xd57d:	mov rax, qword ptr [rip + 0x227dc]   #    TTY_CURSOR_MOVE  = tgetstr(|T|TY_CURSOR_MOVE_NAME,  &capability_buf);
MEMORY OFFSET:     0x227dc     141276  >>141284

0xd584:	lea rdx, [rbp - 0xb8]                #    TTY_CURSOR_MOVE  = |t|getstr(TTY_CURSOR_MOVE_NAME,  &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd58b:	mov rsi, rdx                         
0xd58e:	mov rdi, rax                         
0xd591:	call 0x4c70                          
0xd596:	mov qword ptr [rip + 0x227cb], rax   #    TTY_CURSOR_MOVE  |=| tgetstr(TTY_CURSOR_MOVE_NAME,  &capability_buf);
MEMORY OFFSET:     0x227cb     141259  >>141267

0xd59d:	mov rax, qword ptr [rip + 0x228dc]   #    TTY_START_CURSORAPP = tgetstr(|T|TY_START_CURSORAPP_NAME, &capability_buf);
MEMORY OFFSET:     0x228dc     141532  >>141540

0xd5a4:	lea rdx, [rbp - 0xb8]                #    TTY_START_CURSORAPP = |t|getstr(TTY_START_CURSORAPP_NAME, &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd5ab:	mov rsi, rdx                         
0xd5ae:	mov rdi, rax                         
0xd5b1:	call 0x4c70                          
0xd5b6:	mov qword ptr [rip + 0x228cb], rax   #    TTY_START_CURSORAPP |=| tgetstr(TTY_START_CURSORAPP_NAME, &capability_buf);
MEMORY OFFSET:     0x228cb     141515  >>141523

0xd5bd:	mov rax, qword ptr [rip + 0x228dc]   #    TTY_END_CURSORAPP = tgetstr(|T|TY_END_CURSORAPP_NAME, &capability_buf);
MEMORY OFFSET:     0x228dc     141532  >>141540

0xd5c4:	lea rdx, [rbp - 0xb8]                #    TTY_END_CURSORAPP = |t|getstr(TTY_END_CURSORAPP_NAME, &capability_buf);
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd5cb:	mov rsi, rdx                         
0xd5ce:	mov rdi, rax                         
0xd5d1:	call 0x4c70                          
0xd5d6:	mov qword ptr [rip + 0x228cb], rax   #    TTY_END_CURSORAPP |=| tgetstr(TTY_END_CURSORAPP_NAME, &capability_buf);
MEMORY OFFSET:     0x228cb     141515  >>141523

0xd5dd:	mov dword ptr [rbp - 0xc4], 0x11     #    for (i |=| TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i++)
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd5e7:	jmp 0xd637                           #    |f|or (i = TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i++)
0xd5e9:	mov eax, dword ptr [rbp - 0xc4]      #	tty_capability[i].string = tgetstr(tty_capability[i]|.|name,
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd5ef:	cdqe                                 
0xd5f1:	shl rax, 5                           
0xd5f5:	mov rdx, rax                         
0xd5f8:	lea rax, [rip + 0x226a1]             
MEMORY OFFSET:     0x226a1     140961  >>140969

0xd5ff:	mov rax, qword ptr [rdx + rax]       
0xd603:	lea rdx, [rbp - 0xb8]                #	tty_capability[i].string = |t|getstr(tty_capability[i].name,
MEMORY OFFSET:     -0xb8     -184  >>-176

0xd60a:	mov rsi, rdx                         
0xd60d:	mov rdi, rax                         
0xd610:	call 0x4c70                          
0xd615:	mov edx, dword ptr [rbp - 0xc4]      #	tty_capability[i].string |=| tgetstr(tty_capability[i].name,
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd61b:	movsxd rdx, edx                      
0xd61e:	mov rcx, rdx                         
0xd621:	shl rcx, 5                           
0xd625:	lea rdx, [rip + 0x2267c]             
MEMORY OFFSET:     0x2267c     140924  >>140932

0xd62c:	mov qword ptr [rcx + rdx], rax       
0xd630:	add dword ptr [rbp - 0xc4], 1        #    for (i = TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i|+|+)
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd637:	cmp dword ptr [rbp - 0xc4], 0x25     #    for (i = TTY_FIRST_SYMBOL_KEY; i |<| TTY_CAPABILITIES_USED; i++)
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd63e:	jle 0xd5e9                           
0xd640:	mov dword ptr [rbp - 0xc4], 0        #    for (i |=| 0; i < TTY_CAPABILITIES_USED; i++)
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd64a:	jmp 0xd6fc                           #    |f|or (i = 0; i < TTY_CAPABILITIES_USED; i++)
0xd64f:	mov eax, dword ptr [rbp - 0xc4]      #	if (tty_capability[i]|.|string == NULL)
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd655:	cdqe                                 
0xd657:	shl rax, 5                           
0xd65b:	mov rdx, rax                         
0xd65e:	lea rax, [rip + 0x22643]             
MEMORY OFFSET:     0x22643     140867  >>140875

0xd665:	mov rax, qword ptr [rdx + rax]       
0xd669:	test rax, rax                        #	if |(|tty_capability[i].string == NULL)
0xd66c:	jne 0xd6f5                           
0xd672:	mov eax, dword ptr [rbp - 0xc4]      #	    if (tty_capability[i]|.|required)
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd678:	cdqe                                 
0xd67a:	shl rax, 5                           
0xd67e:	mov rdx, rax                         
0xd681:	lea rax, [rip + 0x2262c]             
MEMORY OFFSET:     0x2262c     140844  >>140852

0xd688:	mov eax, dword ptr [rdx + rax]       
0xd68b:	test eax, eax                        #	    if |(|tty_capability[i].required)
0xd68d:	je 0xd6d4                            
0xd68f:	add dword ptr [rbp - 0xc0], 1        #		term_errors|+|+;
MEMORY OFFSET:     -0xc0     -192  >>-184

0xd696:	mov eax, dword ptr [rbp - 0xc4]      #		|f|printf(stderr,
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd69c:	cdqe                                 
0xd69e:	shl rax, 5                           
0xd6a2:	mov rdx, rax                         
0xd6a5:	lea rax, [rip + 0x225f4]             
MEMORY OFFSET:     0x225f4     140788  >>140796

0xd6ac:	mov rcx, qword ptr [rdx + rax]       
0xd6b0:	mov rdx, qword ptr [rip + 0x23221]   
MEMORY OFFSET:     0x23221     143905  >>143913

0xd6b7:	mov rax, qword ptr [rip + 0x23202]   
MEMORY OFFSET:     0x23202     143874  >>143882

0xd6be:	lea rsi, [rip + 0x1a7cb]             
MEMORY OFFSET:     0x1a7cb     108491  >>108499

0xd6c5:	mov rdi, rax                         
0xd6c8:	mov eax, 0                           
0xd6cd:	call 0x4b40                          
0xd6d2:	jmp 0xd6f5                           
0xd6d4:	mov eax, dword ptr [rbp - 0xc4]      #		tty_capability[i].string |=| "";
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd6da:	cdqe                                 
0xd6dc:	shl rax, 5                           
0xd6e0:	mov rdx, rax                         
0xd6e3:	lea rax, [rip + 0x225be]             
MEMORY OFFSET:     0x225be     140734  >>140742

0xd6ea:	lea rcx, [rip + 0x1a7cd]             
MEMORY OFFSET:     0x1a7cd     108493  >>108501

0xd6f1:	mov qword ptr [rdx + rax], rcx       
0xd6f5:	add dword ptr [rbp - 0xc4], 1        #    for (i = 0; i < TTY_CAPABILITIES_USED; i|+|+)
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd6fc:	cmp dword ptr [rbp - 0xc4], 0x25     #    for (i = 0; i |<| TTY_CAPABILITIES_USED; i++)
MEMORY OFFSET:     -0xc4     -196  >>-188

0xd703:	jle 0xd64f                           
0xd709:	cmp dword ptr [rbp - 0xc0], 0        #    if |(|term_errors)
MEMORY OFFSET:     -0xc0     -192  >>-184

0xd710:	je 0xd744                            
0xd712:	mov rdx, qword ptr [rip + 0x231bf]   #	|f|printf(stderr, "%s: %d errors. Your terminal is too dumb :-< .\n",
MEMORY OFFSET:     0x231bf     143807  >>143815

0xd719:	mov rax, qword ptr [rip + 0x231a0]   
MEMORY OFFSET:     0x231a0     143776  >>143784

0xd720:	mov ecx, dword ptr [rbp - 0xc0]      
MEMORY OFFSET:     -0xc0     -192  >>-184

0xd726:	lea rsi, [rip + 0x1a793]             
MEMORY OFFSET:     0x1a793     108435  >>108443

0xd72d:	mov rdi, rax                         
0xd730:	mov eax, 0                           
0xd735:	call 0x4b40                          
0xd73a:	mov edi, 1                           #	|e|xit(1);
0xd73f:	call 0x4df0                          
0xd744:	nop                                  #|}|
0xd745:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xd749:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xd752:	je 0xd759                            
0xd754:	call 0x4980                          
0xd759:	leave                                
0xd75a:	ret                                  
0xd75b:	endbr64                              #|{|
0xd75f:	push rbp                             
0xd760:	mov rbp, rsp                         
0xd763:	sub rsp, 0x10                        
0xd767:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xd76a:	mov edi, 0                           #    if (!|i|satty(TTY_INPUT) || !isatty(TTY_OUTPUT))
0xd76f:	call 0x48c0                          
0xd774:	test eax, eax                        #    if |(|!isatty(TTY_INPUT) || !isatty(TTY_OUTPUT))
0xd776:	je 0xd786                            
0xd778:	mov edi, 1                           #    if (!isatty(TTY_INPUT) || !|i|satty(TTY_OUTPUT))
0xd77d:	call 0x48c0                          
0xd782:	test eax, eax                        #    if (!isatty(TTY_INPUT) |||| !isatty(TTY_OUTPUT))
0xd784:	jne 0xd7b5                           
0xd786:	mov rdx, qword ptr [rip + 0x2314b]   #	|f|printf(stderr, "%s: only stderr can be redirected.\n", g_program);
MEMORY OFFSET:     0x2314b     143691  >>143699

0xd78d:	mov rax, qword ptr [rip + 0x2312c]   
MEMORY OFFSET:     0x2312c     143660  >>143668

0xd794:	lea rcx, [rip + 0x1a755]             
MEMORY OFFSET:     0x1a755     108373  >>108381

0xd79b:	mov rsi, rcx                         
0xd79e:	mov rdi, rax                         
0xd7a1:	mov eax, 0                           
0xd7a6:	call 0x4b40                          
0xd7ab:	mov edi, 1                           #	|e|xit(1);
0xd7b0:	call 0x4df0                          
0xd7b5:	mov edi, 1                           #    if ((tty_device = |t|tyname(1)) == NULL)
0xd7ba:	call 0x4ca0                          
0xd7bf:	mov qword ptr [rip + 0x23222], rax   #    if ((tty_device |=| ttyname(1)) == NULL)
MEMORY OFFSET:     0x23222     143906  >>143914

0xd7c6:	mov rax, qword ptr [rip + 0x2321b]   
MEMORY OFFSET:     0x2321b     143899  >>143907

0xd7cd:	test rax, rax                        #    if |(|(tty_device = ttyname(1)) == NULL)
0xd7d0:	jne 0xd801                           
0xd7d2:	mov rdx, qword ptr [rip + 0x230ff]   #	|f|printf(stderr, "%s: can't get terminal name.\n", g_program);
MEMORY OFFSET:     0x230ff     143615  >>143623

0xd7d9:	mov rax, qword ptr [rip + 0x230e0]   
MEMORY OFFSET:     0x230e0     143584  >>143592

0xd7e0:	lea rcx, [rip + 0x1a72d]             
MEMORY OFFSET:     0x1a72d     108333  >>108341

0xd7e7:	mov rsi, rcx                         
0xd7ea:	mov rdi, rax                         
0xd7ed:	mov eax, 0                           
0xd7f2:	call 0x4b40                          
0xd7f7:	mov edi, 1                           #	|e|xit(1);
0xd7fc:	call 0x4df0                          
0xd801:	lea rax, [rip + 0x23158]             #    |t|cgetattr(TTY_OUTPUT, &old_term);
MEMORY OFFSET:     0x23158     143704  >>143712

0xd808:	mov rsi, rax                         
0xd80b:	mov edi, 1                           
0xd810:	call 0x4d10                          
0xd815:	mov edi, 0x40                        #    default_key.key_seq  = tty_key_seq = (unsigned char *)|x|malloc(64);
0xd81a:	call 0x24650                         
0xd81f:	mov qword ptr [rip + 0x231ca], rax   #    default_key.key_seq  = tty_key_seq |=| (unsigned char *)xmalloc(64);
MEMORY OFFSET:     0x231ca     143818  >>143826

0xd826:	mov rax, qword ptr [rip + 0x231c3]   #    default_key.key_seq  |=| tty_key_seq = (unsigned char *)xmalloc(64);
MEMORY OFFSET:     0x231c3     143811  >>143819

0xd82d:	mov qword ptr [rip + 0x2322c], rax   
MEMORY OFFSET:     0x2322c     143916  >>143924

0xd834:	mov qword ptr [rip + 0x23231], 0     #    default_key.aux_data |=| NULL;
MEMORY OFFSET:     0x23231     143921  >>143929

0xd83f:	mov qword ptr [rip + 0x2321e], 0     #    default_key.next |=| NULL;
MEMORY OFFSET:     0x2321e     143902  >>143910

0xd84a:	mov eax, dword ptr [rbp - 4]         #    tty_kbdmode |=| kbd_mode;
MEMORY OFFSET:     -0x4     -4  >>4

0xd84d:	mov dword ptr [rip + 0x23101], eax   
MEMORY OFFSET:     0x23101     143617  >>143625

0xd853:	mov rax, qword ptr [rip + 0x2318e]   #    tty_device_length = |s|trlen(tty_device);
MEMORY OFFSET:     0x2318e     143758  >>143766

0xd85a:	mov rdi, rax                         
0xd85d:	call 0x4960                          
0xd862:	mov dword ptr [rip + 0x23190], eax   #    tty_device_length |=| strlen(tty_device);
MEMORY OFFSET:     0x23190     143760  >>143768

0xd868:	mov eax, 0                           #    |t|ty_get_capabilities();
0xd86d:	call 0xcfcb                          
0xd872:	nop                                  #|}|
0xd873:	leave                                
0xd874:	ret                                  
0xd875:	endbr64                              #|{|
0xd879:	push rbp                             
0xd87a:	mov rbp, rsp                         
0xd87d:	sub rsp, 0x30                        
0xd881:	mov qword ptr [rbp - 0x28], rdi      
MEMORY OFFSET:     -0x28     -40  >>-32

0xd885:	mov rax, qword ptr [rip + 0x235fc]   #    if (|t|ty_is_xterm(tty_type))
MEMORY OFFSET:     0x235fc     144892  >>144900

0xd88c:	mov rdi, rax                         
0xd88f:	call 0xd9a3                          
0xd894:	test eax, eax                        #    if |(|tty_is_xterm(tty_type))
0xd896:	je 0xd9a0                            
0xd89c:	mov rax, qword ptr [rbp - 0x28]      #	size_t len = |s|trlen(string);
MEMORY OFFSET:     -0x28     -40  >>-32

0xd8a0:	mov rdi, rax                         
0xd8a3:	call 0x4960                          
0xd8a8:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xd8ac:	mov rax, qword ptr [rbp - 0x18]      #	char *temp = |x|malloc(128 + len + 1);
MEMORY OFFSET:     -0x18     -24  >>-16

0xd8b0:	add rax, 0x81                        
0xd8b6:	mov rdi, rax                         
0xd8b9:	call 0x24650                         
0xd8be:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xd8c2:	mov rax, qword ptr [rbp - 0x28]      #	char *printable_string = |x|strdup(string);
MEMORY OFFSET:     -0x28     -40  >>-32

0xd8c6:	mov rdi, rax                         
0xd8c9:	call 0x24780                         
0xd8ce:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xd8d2:	mov rdx, qword ptr [rbp - 0x18]      #	|t|oprintable(printable_string, len);
MEMORY OFFSET:     -0x18     -24  >>-16

0xd8d6:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xd8da:	mov rsi, rdx                         
0xd8dd:	mov rdi, rax                         
0xd8e0:	call 0x1e5b1                         
0xd8e5:	mov rdx, qword ptr [rbp - 8]         #	|s|printf(temp, "%c]2;%s - %s%c", 0x1b, PRODUCT, printable_string, 0x07);
MEMORY OFFSET:     -0x8     -8  >>0

0xd8e9:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xd8ed:	mov r9d, 7                           
0xd8f3:	mov r8, rdx                          
0xd8f6:	lea rdx, [rip + 0x1a635]             
MEMORY OFFSET:     0x1a635     108085  >>108093

0xd8fd:	mov rcx, rdx                         
0xd900:	mov edx, 0x1b                        
0xd905:	lea rsi, [rip + 0x1a63c]             
MEMORY OFFSET:     0x1a63c     108092  >>108100

0xd90c:	mov rdi, rax                         
0xd90f:	mov eax, 0                           
0xd914:	call 0x4dd0                          
0xd919:	mov rax, qword ptr [rbp - 0x18]      #	if (128 + |(|int)len > 2 * tty_columns)
MEMORY OFFSET:     -0x18     -24  >>-16

0xd91d:	lea edx, [rax + 0x7f]                #	if (128 + (int)len |>| 2 * tty_columns)
MEMORY OFFSET:     0x7f     127  >>135

0xd920:	mov eax, dword ptr [rip + 0x230ba]   #	if (128 + (int)len > 2 |*| tty_columns)
MEMORY OFFSET:     0x230ba     143546  >>143554

0xd926:	add eax, eax                         
0xd928:	cmp edx, eax                         #	if |(|128 + (int)len > 2 * tty_columns)
0xd92a:	jl 0xd959                            
0xd92c:	mov eax, dword ptr [rip + 0x230ae]   #	    temp[2 |*| tty_columns    ] = 0x07;
MEMORY OFFSET:     0x230ae     143534  >>143542

0xd932:	add eax, eax                         
0xd934:	movsxd rdx, eax                      
0xd937:	mov rax, qword ptr [rbp - 0x10]      #	    temp|[|2 * tty_columns    ] = 0x07;
MEMORY OFFSET:     -0x10     -16  >>-8

0xd93b:	add rax, rdx                         
0xd93e:	mov byte ptr [rax], 7                #	    temp[2 * tty_columns    ] |=| 0x07;
0xd941:	mov eax, dword ptr [rip + 0x23099]   #	    temp[2 |*| tty_columns + 1] = '\0';
MEMORY OFFSET:     0x23099     143513  >>143521

0xd947:	add eax, eax                         
0xd949:	cdqe                                 
0xd94b:	lea rdx, [rax + 1]                   #	    temp|[|2 * tty_columns + 1] = '\0';
MEMORY OFFSET:     0x1     1  >>9

0xd94f:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xd953:	add rax, rdx                         
0xd956:	mov byte ptr [rax], 0                #	    temp[2 * tty_columns + 1] |=| '\0';
0xd959:	mov rax, qword ptr [rbp - 0x10]      #	|x|write(TTY_OUTPUT, temp, strlen(temp));
MEMORY OFFSET:     -0x10     -16  >>-8

0xd95d:	mov rdi, rax                         
0xd960:	call 0x4960                          
0xd965:	mov rdx, rax                         
0xd968:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xd96c:	mov rsi, rax                         
0xd96f:	mov edi, 1                           
0xd974:	call 0x1ef4c                         
0xd979:	mov rax, qword ptr [rbp - 8]         #	|x|free(printable_string);
MEMORY OFFSET:     -0x8     -8  >>0

0xd97d:	mov rdi, rax                         
0xd980:	call 0x1eeae                         
0xd985:	mov rax, qword ptr [rbp - 0x10]      #	|x|free(temp);
MEMORY OFFSET:     -0x10     -16  >>-8

0xd989:	mov rdi, rax                         
0xd98c:	call 0x1eeae                         
0xd991:	mov rax, qword ptr [rip + 0x22ee8]   #	|f|flush(stdout);
MEMORY OFFSET:     0x22ee8     143080  >>143088

0xd998:	mov rdi, rax                         
0xd99b:	call 0x4c10                          
0xd9a0:	nop                                  #|}|
0xd9a1:	leave                                
0xd9a2:	ret                                  
0xd9a3:	endbr64                              #|{|
0xd9a7:	push rbp                             
0xd9a8:	mov rbp, rsp                         
0xd9ab:	sub rsp, 0x10                        
0xd9af:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xd9b3:	mov rax, qword ptr [rbp - 8]         #    if (|s|trncmp(term, "xterm", 5)     == 0 ||
MEMORY OFFSET:     -0x8     -8  >>0

0xd9b7:	mov edx, 5                           
0xd9bc:	lea rcx, [rip + 0x1a4a6]             
MEMORY OFFSET:     0x1a4a6     107686  >>107694

0xd9c3:	mov rsi, rcx                         
0xd9c6:	mov rdi, rax                         
0xd9c9:	call 0x4850                          
0xd9ce:	test eax, eax                        #    if |(|strncmp(term, "xterm", 5)     == 0 ||
0xd9d0:	je 0xda62                            
0xd9d6:	mov rax, qword ptr [rbp - 8]         #	|s|trncmp(term, "rxvt", 4)      == 0 ||
MEMORY OFFSET:     -0x8     -8  >>0

0xd9da:	mov edx, 4                           
0xd9df:	lea rcx, [rip + 0x1a571]             
MEMORY OFFSET:     0x1a571     107889  >>107897

0xd9e6:	mov rsi, rcx                         
0xd9e9:	mov rdi, rax                         
0xd9ec:	call 0x4850                          
0xd9f1:	test eax, eax                        #    if (strncmp(term, "xterm", 5)     == 0 ||||
0xd9f3:	je 0xda62                            
0xd9f5:	mov rax, qword ptr [rbp - 8]         #	|s|trncmp(term, "iris-ansi", 9) == 0 ||
MEMORY OFFSET:     -0x8     -8  >>0

0xd9f9:	mov edx, 9                           
0xd9fe:	lea rcx, [rip + 0x1a42c]             
MEMORY OFFSET:     0x1a42c     107564  >>107572

0xda05:	mov rsi, rcx                         
0xda08:	mov rdi, rax                         
0xda0b:	call 0x4850                          
0xda10:	test eax, eax                        #	strncmp(term, "rxvt", 4)      == 0 ||||
0xda12:	je 0xda62                            
0xda14:	mov rax, qword ptr [rbp - 8]         #	|s|trcmp(term, "aixterm")       == 0 ||
MEMORY OFFSET:     -0x8     -8  >>0

0xda18:	lea rdx, [rip + 0x1a53d]             
MEMORY OFFSET:     0x1a53d     107837  >>107845

0xda1f:	mov rsi, rdx                         
0xda22:	mov rdi, rax                         
0xda25:	call 0x4af0                          
0xda2a:	test eax, eax                        #	strncmp(term, "iris-ansi", 9) == 0 ||||
0xda2c:	je 0xda62                            
0xda2e:	mov rax, qword ptr [rbp - 8]         #	|s|trcmp(term, "Eterm")         == 0 ||
MEMORY OFFSET:     -0x8     -8  >>0

0xda32:	lea rdx, [rip + 0x1a52b]             
MEMORY OFFSET:     0x1a52b     107819  >>107827

0xda39:	mov rsi, rdx                         
0xda3c:	mov rdi, rax                         
0xda3f:	call 0x4af0                          
0xda44:	test eax, eax                        #	strcmp(term, "aixterm")       == 0 ||||
0xda46:	je 0xda62                            
0xda48:	mov rax, qword ptr [rbp - 8]         #	|s|trcmp(term, "dtterm")        == 0)
MEMORY OFFSET:     -0x8     -8  >>0

0xda4c:	lea rdx, [rip + 0x1a517]             
MEMORY OFFSET:     0x1a517     107799  >>107807

0xda53:	mov rsi, rdx                         
0xda56:	mov rdi, rax                         
0xda59:	call 0x4af0                          
0xda5e:	test eax, eax                        #	strcmp(term, "Eterm")         == 0 ||||
0xda60:	jne 0xda69                           
0xda62:	mov eax, 1                           #	return |1|;
0xda67:	jmp 0xda6e                           
0xda69:	mov eax, 0                           #    return |0|;
0xda6e:	leave                                #|}|
0xda6f:	ret                                  

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/window.c
####################################################################################################

0xda70:	endbr64                              #|{|
0xda74:	push rbp                             
0xda75:	mov rbp, rsp                         
0xda78:	sub rsp, 0x10                        
0xda7c:	mov edi, 0x18                        #    window_t *window  = (window_t *)|x|malloc(sizeof(window_t));
0xda81:	call 0x24650                         
0xda86:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xda8a:	mov rax, qword ptr [rbp - 8]         #    |w|indow_resize(window, 0, 0, 0, 0);
MEMORY OFFSET:     -0x8     -8  >>0

0xda8e:	mov r8d, 0                           
0xda94:	mov ecx, 0                           
0xda99:	mov edx, 0                           
0xda9e:	mov esi, 0                           
0xdaa3:	mov rdi, rax                         
0xdaa6:	call 0xdad7                          
0xdaab:	mov rax, qword ptr [rbp - 8]         #    return |w|indow;
MEMORY OFFSET:     -0x8     -8  >>0

0xdaaf:	leave                                #|}|
0xdab0:	ret                                  
0xdab1:	endbr64                              #|{|
0xdab5:	push rbp                             
0xdab6:	mov rbp, rsp                         
0xdab9:	sub rsp, 0x10                        
0xdabd:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xdac1:	cmp qword ptr [rbp - 8], 0           #    if |(|window)
MEMORY OFFSET:     -0x8     -8  >>0

0xdac6:	je 0xdad4                            
0xdac8:	mov rax, qword ptr [rbp - 8]         #	|x|free(window);
MEMORY OFFSET:     -0x8     -8  >>0

0xdacc:	mov rdi, rax                         
0xdacf:	call 0x1eeae                         
0xdad4:	nop                                  #|}|
0xdad5:	leave                                
0xdad6:	ret                                  
0xdad7:	endbr64                              #|{|
0xdadb:	push rbp                             
0xdadc:	mov rbp, rsp                         
0xdadf:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xdae3:	mov dword ptr [rbp - 0xc], esi       
MEMORY OFFSET:     -0xc     -12  >>-4

0xdae6:	mov dword ptr [rbp - 0x10], edx      
MEMORY OFFSET:     -0x10     -16  >>-8

0xdae9:	mov dword ptr [rbp - 0x14], ecx      
MEMORY OFFSET:     -0x14     -20  >>-12

0xdaec:	mov dword ptr [rbp - 0x18], r8d      
MEMORY OFFSET:     -0x18     -24  >>-16

0xdaf0:	mov rax, qword ptr [rbp - 8]         #    window->x       |=| x;
MEMORY OFFSET:     -0x8     -8  >>0

0xdaf4:	mov edx, dword ptr [rbp - 0xc]       
MEMORY OFFSET:     -0xc     -12  >>-4

0xdaf7:	mov dword ptr [rax], edx             
0xdaf9:	mov rax, qword ptr [rbp - 8]         #    window->y       |=| y;
MEMORY OFFSET:     -0x8     -8  >>0

0xdafd:	mov edx, dword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xdb00:	mov dword ptr [rax + 4], edx         
MEMORY OFFSET:     0x4     4  >>12

0xdb03:	mov rax, qword ptr [rbp - 8]         #    window->lines   |=| lines;
MEMORY OFFSET:     -0x8     -8  >>0

0xdb07:	mov edx, dword ptr [rbp - 0x14]      
MEMORY OFFSET:     -0x14     -20  >>-12

0xdb0a:	mov dword ptr [rax + 8], edx         
MEMORY OFFSET:     0x8     8  >>16

0xdb0d:	mov rax, qword ptr [rbp - 8]         #    window->columns |=| columns;
MEMORY OFFSET:     -0x8     -8  >>0

0xdb11:	mov edx, dword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xdb14:	mov dword ptr [rax + 0xc], edx       
MEMORY OFFSET:     0xc     12  >>20

0xdb17:	nop                                  #|}|
0xdb18:	pop rbp                              
0xdb19:	ret                                  
0xdb1a:	endbr64                              #|{|
0xdb1e:	push rbp                             
0xdb1f:	mov rbp, rsp                         
0xdb22:	sub rsp, 0x30                        
0xdb26:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xdb2a:	mov qword ptr [rbp - 0x20], rsi      
MEMORY OFFSET:     -0x20     -32  >>-24

0xdb2e:	mov dword ptr [rbp - 0x24], edx      
MEMORY OFFSET:     -0x24     -36  >>-28

0xdb31:	mov rax, qword ptr [rbp - 0x18]      #    int |x| = window->cursor_x;
MEMORY OFFSET:     -0x18     -24  >>-16

0xdb35:	mov eax, dword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0xdb38:	mov dword ptr [rbp - 4], eax         
MEMORY OFFSET:     -0x4     -4  >>4

0xdb3b:	mov rax, qword ptr [rbp - 0x18]      #    window->cursor_x |+|= length;
MEMORY OFFSET:     -0x18     -24  >>-16

0xdb3f:	mov edx, dword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0xdb42:	mov eax, dword ptr [rbp - 0x24]      
MEMORY OFFSET:     -0x24     -36  >>-28

0xdb45:	add edx, eax                         
0xdb47:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xdb4b:	mov dword ptr [rax + 0x10], edx      
MEMORY OFFSET:     0x10     16  >>24

0xdb4e:	mov rax, qword ptr [rbp - 0x18]      #    if (x >= window|-|>columns)
MEMORY OFFSET:     -0x18     -24  >>-16

0xdb52:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xdb55:	cmp dword ptr [rbp - 4], eax         #    if |(|x >= window->columns)
MEMORY OFFSET:     -0x4     -4  >>4

0xdb58:	jl 0xdb61                            
0xdb5a:	mov eax, 0                           #	return |0|;
0xdb5f:	jmp 0xdbba                           
0xdb61:	mov rax, qword ptr [rbp - 0x18]      #    if (window|-|>cursor_y >= window->lines)
MEMORY OFFSET:     -0x18     -24  >>-16

0xdb65:	mov edx, dword ptr [rax + 0x14]      
MEMORY OFFSET:     0x14     20  >>28

0xdb68:	mov rax, qword ptr [rbp - 0x18]      #    if (window->cursor_y >= window|-|>lines)
MEMORY OFFSET:     -0x18     -24  >>-16

0xdb6c:	mov eax, dword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0xdb6f:	cmp edx, eax                         #    if |(|window->cursor_y >= window->lines)
0xdb71:	jl 0xdb7a                            
0xdb73:	mov eax, 0                           #	return |0|;
0xdb78:	jmp 0xdbba                           
0xdb7a:	mov edx, dword ptr [rbp - 4]         #    if (x |+| length <= window->columns)
MEMORY OFFSET:     -0x4     -4  >>4

0xdb7d:	mov eax, dword ptr [rbp - 0x24]      
MEMORY OFFSET:     -0x24     -36  >>-28

0xdb80:	add edx, eax                         
0xdb82:	mov rax, qword ptr [rbp - 0x18]      #    if (x + length <= window|-|>columns)
MEMORY OFFSET:     -0x18     -24  >>-16

0xdb86:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xdb89:	cmp edx, eax                         #    if |(|x + length <= window->columns)
0xdb8b:	jg 0xdba0                            
0xdb8d:	mov edx, dword ptr [rbp - 0x24]      #	return |t|ty_puts(str, length);
MEMORY OFFSET:     -0x24     -36  >>-28

0xdb90:	mov rax, qword ptr [rbp - 0x20]      
MEMORY OFFSET:     -0x20     -32  >>-24

0xdb94:	mov esi, edx                         
0xdb96:	mov rdi, rax                         
0xdb99:	call 0xb706                          
0xdb9e:	jmp 0xdbba                           
0xdba0:	mov rax, qword ptr [rbp - 0x18]      #    return tty_puts(str, window|-|>columns - x);
MEMORY OFFSET:     -0x18     -24  >>-16

0xdba4:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xdba7:	sub eax, dword ptr [rbp - 4]         #    return |t|ty_puts(str, window->columns - x);
MEMORY OFFSET:     -0x4     -4  >>4

0xdbaa:	mov edx, eax                         
0xdbac:	mov rax, qword ptr [rbp - 0x20]      
MEMORY OFFSET:     -0x20     -32  >>-24

0xdbb0:	mov esi, edx                         
0xdbb2:	mov rdi, rax                         
0xdbb5:	call 0xb706                          
0xdbba:	leave                                #|}|
0xdbbb:	ret                                  
0xdbbc:	endbr64                              #|{|
0xdbc0:	push rbp                             
0xdbc1:	mov rbp, rsp                         
0xdbc4:	sub rsp, 0x10                        
0xdbc8:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xdbcc:	mov dword ptr [rbp - 0xc], esi       
MEMORY OFFSET:     -0xc     -12  >>-4

0xdbcf:	mov rax, qword ptr [rbp - 8]         #    if (++window|-|>cursor_x > window->columns)
MEMORY OFFSET:     -0x8     -8  >>0

0xdbd3:	mov eax, dword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0xdbd6:	lea edx, [rax + 1]                   #    if (|+|+window->cursor_x > window->columns)
MEMORY OFFSET:     0x1     1  >>9

0xdbd9:	mov rax, qword ptr [rbp - 8]         #    if |(|++window->cursor_x > window->columns)
MEMORY OFFSET:     -0x8     -8  >>0

0xdbdd:	mov dword ptr [rax + 0x10], edx      
MEMORY OFFSET:     0x10     16  >>24

0xdbe0:	mov rax, qword ptr [rbp - 8]         #    if (++window|-|>cursor_x > window->columns)
MEMORY OFFSET:     -0x8     -8  >>0

0xdbe4:	mov edx, dword ptr [rax + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0xdbe7:	mov rax, qword ptr [rbp - 8]         #    if (++window->cursor_x > window|-|>columns)
MEMORY OFFSET:     -0x8     -8  >>0

0xdbeb:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xdbee:	cmp edx, eax                         #    if |(|++window->cursor_x > window->columns)
0xdbf0:	jle 0xdbf9                           
0xdbf2:	mov eax, 0                           #	return |0|;
0xdbf7:	jmp 0xdc1c                           
0xdbf9:	mov rax, qword ptr [rbp - 8]         #    if (window|-|>cursor_y >= window->lines)
MEMORY OFFSET:     -0x8     -8  >>0

0xdbfd:	mov edx, dword ptr [rax + 0x14]      
MEMORY OFFSET:     0x14     20  >>28

0xdc00:	mov rax, qword ptr [rbp - 8]         #    if (window->cursor_y >= window|-|>lines)
MEMORY OFFSET:     -0x8     -8  >>0

0xdc04:	mov eax, dword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0xdc07:	cmp edx, eax                         #    if |(|window->cursor_y >= window->lines)
0xdc09:	jl 0xdc12                            
0xdc0b:	mov eax, 0                           #	return |0|;
0xdc10:	jmp 0xdc1c                           
0xdc12:	mov eax, dword ptr [rbp - 0xc]       #    return |t|ty_putc(c);
MEMORY OFFSET:     -0xc     -12  >>-4

0xdc15:	mov edi, eax                         
0xdc17:	call 0xb7ea                          
0xdc1c:	leave                                #|}|
0xdc1d:	ret                                  
0xdc1e:	endbr64                              #|{|
0xdc22:	push rbp                             
0xdc23:	mov rbp, rsp                         
0xdc26:	sub rsp, 0x10                        
0xdc2a:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xdc2e:	mov dword ptr [rbp - 0xc], esi       
MEMORY OFFSET:     -0xc     -12  >>-4

0xdc31:	mov dword ptr [rbp - 0x10], edx      
MEMORY OFFSET:     -0x10     -16  >>-8

0xdc34:	mov rax, qword ptr [rbp - 8]         #    window->cursor_x |=| x;
MEMORY OFFSET:     -0x8     -8  >>0

0xdc38:	mov edx, dword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xdc3b:	mov dword ptr [rax + 0x10], edx      
MEMORY OFFSET:     0x10     16  >>24

0xdc3e:	mov rax, qword ptr [rbp - 8]         #    window->cursor_y |=| y;
MEMORY OFFSET:     -0x8     -8  >>0

0xdc42:	mov edx, dword ptr [rbp - 0xc]       
MEMORY OFFSET:     -0xc     -12  >>-4

0xdc45:	mov dword ptr [rax + 0x14], edx      
MEMORY OFFSET:     0x14     20  >>28

0xdc48:	mov rax, qword ptr [rbp - 8]         #    tty_goto(y + window->y, x + window|-|>x);
MEMORY OFFSET:     -0x8     -8  >>0

0xdc4c:	mov edx, dword ptr [rax]             
0xdc4e:	mov eax, dword ptr [rbp - 0x10]      #    |t|ty_goto(y + window->y, x + window->x);
MEMORY OFFSET:     -0x10     -16  >>-8

0xdc51:	add edx, eax                         
0xdc53:	mov rax, qword ptr [rbp - 8]         #    tty_goto(y + window|-|>y, x + window->x);
MEMORY OFFSET:     -0x8     -8  >>0

0xdc57:	mov ecx, dword ptr [rax + 4]         
MEMORY OFFSET:     0x4     4  >>12

0xdc5a:	mov eax, dword ptr [rbp - 0xc]       #    |t|ty_goto(y + window->y, x + window->x);
MEMORY OFFSET:     -0xc     -12  >>-4

0xdc5d:	add eax, ecx                         
0xdc5f:	mov esi, edx                         
0xdc61:	mov edi, eax                         
0xdc63:	call 0xbe95                          
0xdc68:	nop                                  #|}|
0xdc69:	leave                                
0xdc6a:	ret                                  
0xdc6b:	endbr64                              #|{|
0xdc6f:	push rbp                             
0xdc70:	mov rbp, rsp                         
0xdc73:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xdc77:	mov rax, qword ptr [rbp - 8]         #    return window|-|>x;
MEMORY OFFSET:     -0x8     -8  >>0

0xdc7b:	mov eax, dword ptr [rax]             
0xdc7d:	pop rbp                              #|}|
0xdc7e:	ret                                  
0xdc7f:	endbr64                              #|{|
0xdc83:	push rbp                             
0xdc84:	mov rbp, rsp                         
0xdc87:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xdc8b:	mov rax, qword ptr [rbp - 8]         #    return window|-|>y;
MEMORY OFFSET:     -0x8     -8  >>0

0xdc8f:	mov eax, dword ptr [rax + 4]         
MEMORY OFFSET:     0x4     4  >>12

0xdc92:	pop rbp                              #|}|
0xdc93:	ret                                  
0xdc94:	endbr64                              #|{|
0xdc98:	push rbp                             
0xdc99:	mov rbp, rsp                         
0xdc9c:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xdca0:	mov rax, qword ptr [rbp - 8]         #    return window|-|>lines;
MEMORY OFFSET:     -0x8     -8  >>0

0xdca4:	mov eax, dword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0xdca7:	pop rbp                              #|}|
0xdca8:	ret                                  
0xdca9:	endbr64                              #|{|
0xdcad:	push rbp                             
0xdcae:	mov rbp, rsp                         
0xdcb1:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xdcb5:	mov rax, qword ptr [rbp - 8]         #    return window|-|>columns;
MEMORY OFFSET:     -0x8     -8  >>0

0xdcb9:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xdcbc:	pop rbp                              #|}|
0xdcbd:	ret                                  

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/inputline.c
####################################################################################################

0xdcbe:	endbr64                              #|{|
0xdcc2:	push rbp                             
0xdcc3:	mov rbp, rsp                         
0xdcc6:	mov eax, edi                         
0xdcc8:	mov byte ptr [rbp - 4], al           
MEMORY OFFSET:     -0x4     -4  >>4

0xdccb:	cmp byte ptr [rbp - 4], 0x60         #    if |(|(c >= 'a' && c <= 'z') ||
MEMORY OFFSET:     -0x4     -4  >>4

0xdccf:	jle 0xdcd7                           
0xdcd1:	cmp byte ptr [rbp - 4], 0x7a         #    if ((c >= 'a' |&|& c <= 'z') ||
MEMORY OFFSET:     -0x4     -4  >>4

0xdcd5:	jle 0xdcfb                           
0xdcd7:	cmp byte ptr [rbp - 4], 0x40         #    if ((c >= 'a' && c <= 'z') ||||
MEMORY OFFSET:     -0x4     -4  >>4

0xdcdb:	jle 0xdce3                           
0xdcdd:	cmp byte ptr [rbp - 4], 0x5a         #	(c >= 'A' |&|& c <= 'Z') ||
MEMORY OFFSET:     -0x4     -4  >>4

0xdce1:	jle 0xdcfb                           
0xdce3:	cmp byte ptr [rbp - 4], 0x2f         #	(c >= 'A' && c <= 'Z') ||||
MEMORY OFFSET:     -0x4     -4  >>4

0xdce7:	jle 0xdcef                           
0xdce9:	cmp byte ptr [rbp - 4], 0x39         #	(c >= '0' |&|& c <= '9') ||
MEMORY OFFSET:     -0x4     -4  >>4

0xdced:	jle 0xdcfb                           
0xdcef:	cmp byte ptr [rbp - 4], 0x24         #	(c >= '0' && c <= '9') ||||
MEMORY OFFSET:     -0x4     -4  >>4

0xdcf3:	je 0xdcfb                            
0xdcf5:	cmp byte ptr [rbp - 4], 0x25         #	(c == '$')             ||||
MEMORY OFFSET:     -0x4     -4  >>4

0xdcf9:	jne 0xdd02                           
0xdcfb:	mov eax, 0                           #	return |0|;
0xdd00:	jmp 0xdd07                           
0xdd02:	mov eax, 1                           #	return |1|;
0xdd07:	pop rbp                              #|}|
0xdd08:	ret                                  
0xdd09:	endbr64                              #|{|
0xdd0d:	push rbp                             
0xdd0e:	mov rbp, rsp                         
0xdd11:	push rbx                             
0xdd12:	sub rsp, 0x38                        
0xdd16:	mov dword ptr [rbp - 0x34], edi      
MEMORY OFFSET:     -0x34     -52  >>-44

0xdd19:	mov rax, qword ptr [rip + 0x236f0]   #    if (il|-|>mark == il->point)
MEMORY OFFSET:     0x236f0     145136  >>145144

0xdd20:	mov rdx, qword ptr [rax + 0x20]      
MEMORY OFFSET:     0x20     32  >>40

0xdd24:	mov rax, qword ptr [rip + 0x236e5]   #    if (il->mark == il|-|>point)
MEMORY OFFSET:     0x236e5     145125  >>145133

0xdd2b:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xdd2f:	cmp rdx, rax                         #    if |(|il->mark == il->point)
0xdd32:	je 0xdf02                            
0xdd38:	mov rax, qword ptr [rip + 0x236d1]   #    if (il|-|>mark > il->point)
MEMORY OFFSET:     0x236d1     145105  >>145113

0xdd3f:	mov rdx, qword ptr [rax + 0x20]      
MEMORY OFFSET:     0x20     32  >>40

0xdd43:	mov rax, qword ptr [rip + 0x236c6]   #    if (il->mark > il|-|>point)
MEMORY OFFSET:     0x236c6     145094  >>145102

0xdd4a:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xdd4e:	cmp rdx, rax                         #    if |(|il->mark > il->point)
0xdd51:	jbe 0xdd73                           
0xdd53:	mov rax, qword ptr [rip + 0x236b6]   #	region_start = il|-|>point;
MEMORY OFFSET:     0x236b6     145078  >>145086

0xdd5a:	mov rax, qword ptr [rax + 0x18]      #	region_start |=| il->point;
MEMORY OFFSET:     0x18     24  >>32

0xdd5e:	mov qword ptr [rbp - 0x28], rax      
MEMORY OFFSET:     -0x28     -40  >>-32

0xdd62:	mov rax, qword ptr [rip + 0x236a7]   #	region_end   = il|-|>mark;
MEMORY OFFSET:     0x236a7     145063  >>145071

0xdd69:	mov rax, qword ptr [rax + 0x20]      #	region_end   |=| il->mark;
MEMORY OFFSET:     0x20     32  >>40

0xdd6d:	mov qword ptr [rbp - 0x20], rax      
MEMORY OFFSET:     -0x20     -32  >>-24

0xdd71:	jmp 0xdd91                           
0xdd73:	mov rax, qword ptr [rip + 0x23696]   #	region_start = il|-|>mark;
MEMORY OFFSET:     0x23696     145046  >>145054

0xdd7a:	mov rax, qword ptr [rax + 0x20]      #	region_start |=| il->mark;
MEMORY OFFSET:     0x20     32  >>40

0xdd7e:	mov qword ptr [rbp - 0x28], rax      
MEMORY OFFSET:     -0x28     -40  >>-32

0xdd82:	mov rax, qword ptr [rip + 0x23687]   #	region_end   = il|-|>point;
MEMORY OFFSET:     0x23687     145031  >>145039

0xdd89:	mov rax, qword ptr [rax + 0x18]      #	region_end   |=| il->point;
MEMORY OFFSET:     0x18     24  >>32

0xdd8d:	mov qword ptr [rbp - 0x20], rax      
MEMORY OFFSET:     -0x20     -32  >>-24

0xdd91:	mov rax, qword ptr [rbp - 0x20]      #    region_size |=| region_end - region_start;
MEMORY OFFSET:     -0x20     -32  >>-24

0xdd95:	sub rax, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0xdd99:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xdd9d:	mov eax, dword ptr [rbp - 0x34]      #    if (flags |&| IL_STORE)
MEMORY OFFSET:     -0x34     -52  >>-44

0xdda0:	and eax, 1                           
0xdda3:	test eax, eax                        #    if |(|flags & IL_STORE)
0xdda5:	je 0xde2b                            
0xddab:	mov rax, qword ptr [rip + 0x2365e]   #	if (il|-|>kill_ring)
MEMORY OFFSET:     0x2365e     144990  >>144998

0xddb2:	mov rax, qword ptr [rax + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xddb6:	test rax, rax                        #	if |(|il->kill_ring)
0xddb9:	je 0xddce                            
0xddbb:	mov rax, qword ptr [rip + 0x2364e]   #	    xfree(il|-|>kill_ring);
MEMORY OFFSET:     0x2364e     144974  >>144982

0xddc2:	mov rax, qword ptr [rax + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xddc6:	mov rdi, rax                         #	    |x|free(il->kill_ring);
0xddc9:	call 0x1eeae                         
0xddce:	mov rax, qword ptr [rbp - 0x18]      #	il->kill_ring = |x|malloc(region_size + 1);
MEMORY OFFSET:     -0x18     -24  >>-16

0xddd2:	add rax, 1                           
0xddd6:	mov rbx, qword ptr [rip + 0x23633]   #	il|-|>kill_ring = xmalloc(region_size + 1);
MEMORY OFFSET:     0x23633     144947  >>144955

0xdddd:	mov rdi, rax                         #	il->kill_ring = |x|malloc(region_size + 1);
0xdde0:	call 0x24650                         
0xdde5:	mov qword ptr [rbx + 0x60], rax      #	il->kill_ring |=| xmalloc(region_size + 1);
MEMORY OFFSET:     0x60     96  >>104

0xdde9:	mov rax, qword ptr [rip + 0x23620]   #	memcpy(il->kill_ring, il|-|>buffer + region_start, region_size);
MEMORY OFFSET:     0x23620     144928  >>144936

0xddf0:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xddf4:	mov rax, qword ptr [rbp - 0x28]      #	memcpy(il->kill_ring, il->buffer |+| region_start, region_size);
MEMORY OFFSET:     -0x28     -40  >>-32

0xddf8:	lea rcx, [rdx + rax]                 
0xddfc:	mov rax, qword ptr [rip + 0x2360d]   #	memcpy(il|-|>kill_ring, il->buffer + region_start, region_size);
MEMORY OFFSET:     0x2360d     144909  >>144917

0xde03:	mov rax, qword ptr [rax + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xde07:	mov rdx, qword ptr [rbp - 0x18]      #	|m|emcpy(il->kill_ring, il->buffer + region_start, region_size);
MEMORY OFFSET:     -0x18     -24  >>-16

0xde0b:	mov rsi, rcx                         
0xde0e:	mov rdi, rax                         
0xde11:	call 0x4b70                          
0xde16:	mov rax, qword ptr [rip + 0x235f3]   #	il|-|>kill_ring[region_size] = '\0';
MEMORY OFFSET:     0x235f3     144883  >>144891

0xde1d:	mov rdx, qword ptr [rax + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xde21:	mov rax, qword ptr [rbp - 0x18]      #	il->kill_ring|[|region_size] = '\0';
MEMORY OFFSET:     -0x18     -24  >>-16

0xde25:	add rax, rdx                         
0xde28:	mov byte ptr [rax], 0                #	il->kill_ring[region_size] |=| '\0';
0xde2b:	mov eax, dword ptr [rbp - 0x34]      #    if (flags |&| IL_KILL)
MEMORY OFFSET:     -0x34     -52  >>-44

0xde2e:	and eax, 2                           
0xde31:	test eax, eax                        #    if |(|flags & IL_KILL)
0xde33:	je 0xdf03                            
0xde39:	mov rax, qword ptr [rip + 0x235d0]   #	il->dynamic_length |-|= region_size;
MEMORY OFFSET:     0x235d0     144848  >>144856

0xde40:	mov rdx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xde44:	mov rax, qword ptr [rip + 0x235c5]   
MEMORY OFFSET:     0x235c5     144837  >>144845

0xde4b:	sub rdx, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xde4f:	mov qword ptr [rax + 0x48], rdx      
MEMORY OFFSET:     0x48     72  >>80

0xde53:	mov rax, qword ptr [rip + 0x235b6]   #	il->length         |-|= region_size;
MEMORY OFFSET:     0x235b6     144822  >>144830

0xde5a:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xde5e:	mov rax, qword ptr [rip + 0x235ab]   
MEMORY OFFSET:     0x235ab     144811  >>144819

0xde65:	sub rdx, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xde69:	mov qword ptr [rax + 0x38], rdx      
MEMORY OFFSET:     0x38     56  >>64

0xde6d:	mov rax, qword ptr [rip + 0x2359c]   #	il|-|>point           = region_start;
MEMORY OFFSET:     0x2359c     144796  >>144804

0xde74:	mov rdx, qword ptr [rbp - 0x28]      #	il->point           |=| region_start;
MEMORY OFFSET:     -0x28     -40  >>-32

0xde78:	mov qword ptr [rax + 0x18], rdx      
MEMORY OFFSET:     0x18     24  >>32

0xde7c:	mov rax, qword ptr [rip + 0x2358d]   #	il|-|>mark            = region_start;
MEMORY OFFSET:     0x2358d     144781  >>144789

0xde83:	mov rdx, qword ptr [rbp - 0x28]      #	il->mark            |=| region_start;
MEMORY OFFSET:     -0x28     -40  >>-32

0xde87:	mov qword ptr [rax + 0x20], rdx      
MEMORY OFFSET:     0x20     32  >>40

0xde8b:	mov rax, qword ptr [rip + 0x2357e]   #	strcpy(il->buffer + region_start, il|-|>buffer + region_end);
MEMORY OFFSET:     0x2357e     144766  >>144774

0xde92:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xde96:	mov rax, qword ptr [rbp - 0x20]      #	strcpy(il->buffer + region_start, il->buffer |+| region_end);
MEMORY OFFSET:     -0x20     -32  >>-24

0xde9a:	add rdx, rax                         
0xde9d:	mov rax, qword ptr [rip + 0x2356c]   #	strcpy(il|-|>buffer + region_start, il->buffer + region_end);
MEMORY OFFSET:     0x2356c     144748  >>144756

0xdea4:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xdea8:	mov rax, qword ptr [rbp - 0x28]      #	|s|trcpy(il->buffer + region_start, il->buffer + region_end);
MEMORY OFFSET:     -0x28     -40  >>-32

0xdeac:	add rax, rcx                         
0xdeaf:	mov rsi, rdx                         
0xdeb2:	mov rdi, rax                         
0xdeb5:	call 0x4870                          
0xdeba:	mov rax, qword ptr [rip + 0x2354f]   #	|I|L_RESIZE(il->length + 1);
MEMORY OFFSET:     0x2354f     144719  >>144727

0xdec1:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xdec5:	mov rax, qword ptr [rip + 0x23544]   
MEMORY OFFSET:     0x23544     144708  >>144716

0xdecc:	add rdx, 1                           
0xded0:	mov qword ptr [rax + 0x50], rdx      
MEMORY OFFSET:     0x50     80  >>88

0xded4:	mov rax, qword ptr [rip + 0x23535]   
MEMORY OFFSET:     0x23535     144693  >>144701

0xdedb:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xdedf:	mov rax, qword ptr [rip + 0x2352a]   
MEMORY OFFSET:     0x2352a     144682  >>144690

0xdee6:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xdeea:	mov rbx, qword ptr [rip + 0x2351f]   
MEMORY OFFSET:     0x2351f     144671  >>144679

0xdef1:	mov rsi, rdx                         
0xdef4:	mov rdi, rax                         
0xdef7:	call 0x24670                         
0xdefc:	mov qword ptr [rbx + 0x58], rax      
MEMORY OFFSET:     0x58     88  >>96

0xdf00:	jmp 0xdf03                           
0xdf02:	nop                                  #	|r|eturn;
0xdf03:	mov rbx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0xdf07:	leave                                
0xdf08:	ret                                  
0xdf09:	endbr64                              #|{|
0xdf0d:	push rbp                             
0xdf0e:	mov rbp, rsp                         
0xdf11:	sub rsp, 0x10                        
0xdf15:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xdf19:	cmp qword ptr [rbp - 8], 0           #    if |(|some_il == NULL)
MEMORY OFFSET:     -0x8     -8  >>0

0xdf1e:	je 0xdf68                            
0xdf20:	mov rax, qword ptr [rbp - 8]         #    if (some_il|-|>buffer)
MEMORY OFFSET:     -0x8     -8  >>0

0xdf24:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xdf28:	test rax, rax                        #    if |(|some_il->buffer)
0xdf2b:	je 0xdf3d                            
0xdf2d:	mov rax, qword ptr [rbp - 8]         #	xfree(some_il|-|>buffer);
MEMORY OFFSET:     -0x8     -8  >>0

0xdf31:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xdf35:	mov rdi, rax                         #	|x|free(some_il->buffer);
0xdf38:	call 0x1eeae                         
0xdf3d:	mov rax, qword ptr [rbp - 8]         #    if (some_il|-|>kill_ring)
MEMORY OFFSET:     -0x8     -8  >>0

0xdf41:	mov rax, qword ptr [rax + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xdf45:	test rax, rax                        #    if |(|some_il->kill_ring)
0xdf48:	je 0xdf5a                            
0xdf4a:	mov rax, qword ptr [rbp - 8]         #	xfree(some_il|-|>kill_ring);
MEMORY OFFSET:     -0x8     -8  >>0

0xdf4e:	mov rax, qword ptr [rax + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xdf52:	mov rdi, rax                         #	|x|free(some_il->kill_ring);
0xdf55:	call 0x1eeae                         
0xdf5a:	mov rax, qword ptr [rbp - 8]         #    |x|free(some_il);
MEMORY OFFSET:     -0x8     -8  >>0

0xdf5e:	mov rdi, rax                         
0xdf61:	call 0x1eeae                         
0xdf66:	jmp 0xdf69                           
0xdf68:	nop                                  #	|r|eturn;
0xdf69:	leave                                #|}|
0xdf6a:	ret                                  
0xdf6b:	endbr64                              #|{|
0xdf6f:	push rbp                             
0xdf70:	mov rbp, rsp                         
0xdf73:	mov rax, qword ptr [rip + 0x23496]   #    return |m|ax((il->columns - il->static_length) / 4,  1);
MEMORY OFFSET:     0x23496     144534  >>144542

0xdf7a:	mov rdx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xdf7e:	mov rax, qword ptr [rip + 0x2348b]   
MEMORY OFFSET:     0x2348b     144523  >>144531

0xdf85:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xdf89:	mov rax, rdx                         
0xdf8c:	sub rax, rcx                         
0xdf8f:	cmp rax, 3                           
0xdf93:	jbe 0xdfb7                           
0xdf95:	mov rax, qword ptr [rip + 0x23474]   #    return |m|ax((il->columns - il->static_length) / 4,  1);
MEMORY OFFSET:     0x23474     144500  >>144508

0xdf9c:	mov rdx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xdfa0:	mov rax, qword ptr [rip + 0x23469]   
MEMORY OFFSET:     0x23469     144489  >>144497

0xdfa7:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xdfab:	mov rax, rdx                         
0xdfae:	sub rax, rcx                         
0xdfb1:	shr rax, 2                           
0xdfb5:	jmp 0xdfbc                           
0xdfb7:	mov eax, 1                           #    return |m|ax((il->columns - il->static_length) / 4,  1);
0xdfbc:	pop rbp                              #|}|
0xdfbd:	ret                                  
0xdfbe:	endbr64                              #|{|
0xdfc2:	push rbp                             
0xdfc3:	mov rbp, rsp                         
0xdfc6:	push rbx                             
0xdfc7:	sub rsp, 0x18                        
0xdfcb:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xdfd4:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xdfd8:	xor eax, eax                         
0xdfda:	mov edi, 0x70                        #    il = (input_line_t *)|x|malloc(sizeof(input_line_t));
0xdfdf:	call 0x24650                         
0xdfe4:	mov qword ptr [rip + 0x23425], rax   #    il |=| (input_line_t *)xmalloc(sizeof(input_line_t));
MEMORY OFFSET:     0x23425     144421  >>144429

0xdfeb:	mov rax, qword ptr [rip + 0x2341e]   #    il|-|>echo = 1;
MEMORY OFFSET:     0x2341e     144414  >>144422

0xdff2:	mov dword ptr [rax + 8], 1           #    il->echo |=| 1;
MEMORY OFFSET:     0x8     8  >>16

0xdff9:	mov rax, qword ptr [rip + 0x23410]   #    il|-|>error = 0;
MEMORY OFFSET:     0x23410     144400  >>144408

0xe000:	mov dword ptr [rax + 0xc], 0         #    il->error |=| 0;
MEMORY OFFSET:     0xc     12  >>20

0xe007:	mov rax, qword ptr [rip + 0x23402]   #    il|-|>buffer = NULL;
MEMORY OFFSET:     0x23402     144386  >>144394

0xe00e:	mov qword ptr [rax + 0x58], 0        #    il->buffer |=| NULL;
MEMORY OFFSET:     0x58     88  >>96

0xe016:	mov rax, qword ptr [rip + 0x233f3]   #    il|-|>kill_ring = NULL;
MEMORY OFFSET:     0x233f3     144371  >>144379

0xe01d:	mov qword ptr [rax + 0x60], 0        #    il->kill_ring |=| NULL;
MEMORY OFFSET:     0x60     96  >>104

0xe025:	mov rax, qword ptr [rip + 0x233e4]   #    il|-|>columns = 0;
MEMORY OFFSET:     0x233e4     144356  >>144364

0xe02c:	mov qword ptr [rax + 0x28], 0        #    il->columns |=| 0;
MEMORY OFFSET:     0x28     40  >>48

0xe034:	mov rax, qword ptr [rip + 0x233d5]   #    il|-|>line = 0;
MEMORY OFFSET:     0x233d5     144341  >>144349

0xe03b:	mov qword ptr [rax + 0x30], 0        #    il->line |=| 0;
MEMORY OFFSET:     0x30     48  >>56

0xe043:	mov eax, 0                           #    |i|l_reset_line();
0xe048:	call 0xece2                          
0xe04d:	mov rbx, qword ptr [rip + 0x233bc]   #    il|-|>window = window_init();
MEMORY OFFSET:     0x233bc     144316  >>144324

0xe054:	mov eax, 0                           #    il->window = |w|indow_init();
0xe059:	call 0xda70                          
0xe05e:	mov qword ptr [rbx], rax             #    il->window |=| window_init();
0xe061:	lea rax, [rip + 0x19f90]             #    |u|se_section("[GITFM-Setup]");
MEMORY OFFSET:     0x19f90     106384  >>106392

0xe068:	mov rdi, rax                         
0xe06b:	call 0x1dbc4                         
0xe070:	lea rax, [rbp - 0x20]                #    |c|onfiguration_getvarinfo("HistoryFile", &data, 1, DO_SEEK);
MEMORY OFFSET:     -0x20     -32  >>-24

0xe074:	mov ecx, 1                           
0xe079:	mov edx, 1                           
0xe07e:	mov rsi, rax                         
0xe081:	lea rax, [rip + 0x19f7e]             
MEMORY OFFSET:     0x19f7e     106366  >>106374

0xe088:	mov rdi, rax                         
0xe08b:	call 0x1cf27                         
0xe090:	mov rax, qword ptr [rbp - 0x20]      #    il->history_file = tilde_expand(data |?| data : "~/.githistory");
MEMORY OFFSET:     -0x20     -32  >>-24

0xe094:	test rax, rax                        #    il->history_file = |t|ilde_expand(data ? data : "~/.githistory");
0xe097:	je 0xe09f                            
0xe099:	mov rax, qword ptr [rbp - 0x20]      #    il->history_file = |t|ilde_expand(data ? data : "~/.githistory");
MEMORY OFFSET:     -0x20     -32  >>-24

0xe09d:	jmp 0xe0a6                           
0xe09f:	lea rax, [rip + 0x19f6c]             #    il->history_file = |t|ilde_expand(data ? data : "~/.githistory");
MEMORY OFFSET:     0x19f6c     106348  >>106356

0xe0a6:	mov rbx, qword ptr [rip + 0x23363]   #    il|-|>history_file = tilde_expand(data ? data : "~/.githistory");
MEMORY OFFSET:     0x23363     144227  >>144235

0xe0ad:	mov rdi, rax                         #    il->history_file = |t|ilde_expand(data ? data : "~/.githistory");
0xe0b0:	mov eax, 0                           
0xe0b5:	call 0x1fb51                         
0xe0ba:	mov qword ptr [rbx + 0x68], rax      #    il->history_file |=| tilde_expand(data ? data : "~/.githistory");
MEMORY OFFSET:     0x68     104  >>112

0xe0be:	mov eax, dword ptr [rip + 0x20f54]   #    use_section(AnsiColors |?| color_section : monochrome_section);
MEMORY OFFSET:     0x20f54     134996  >>135004

0xe0c4:	test eax, eax                        #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0xe0c6:	je 0xe0d1                            
0xe0c8:	lea rax, [rip + 0x20f61]             #    |u|se_section(AnsiColors ? color_section : monochrome_section);
MEMORY OFFSET:     0x20f61     135009  >>135017

0xe0cf:	jmp 0xe0d8                           
0xe0d1:	lea rax, [rip + 0x20f68]             #    |u|se_section(AnsiColors ? color_section : monochrome_section);
MEMORY OFFSET:     0x20f68     135016  >>135024

0xe0d8:	mov rdi, rax                         #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0xe0db:	call 0x1dbc4                         
0xe0e0:	mov edx, 6                           #    |g|et_colorset_var(InputLineColors, InputLineFields, INPUTLINE_FIELDS);
0xe0e5:	lea rax, [rip + 0x22154]             
MEMORY OFFSET:     0x22154     139604  >>139612

0xe0ec:	mov rsi, rax                         
0xe0ef:	lea rax, [rip + 0x2217a]             
MEMORY OFFSET:     0x2217a     139642  >>139650

0xe0f6:	mov rdi, rax                         
0xe0f9:	call 0x1df8c                         
0xe0fe:	mov eax, 0                           #    |u|sing_history();
0xe103:	call 0x2012d                         
0xe108:	mov rax, qword ptr [rip + 0x23301]   #    read_history(il|-|>history_file);
MEMORY OFFSET:     0x23301     144129  >>144137

0xe10f:	mov rax, qword ptr [rax + 0x68]      #    |r|ead_history(il->history_file);
MEMORY OFFSET:     0x68     104  >>112

0xe113:	mov rdi, rax                         
0xe116:	mov eax, 0                           
0xe11b:	call 0x20979                         
0xe120:	nop                                  #    while |(|next_history());
0xe121:	mov eax, 0                           #    while (|n|ext_history());
0xe126:	call 0x21109                         
0xe12b:	test rax, rax                        
0xe12e:	jne 0xe121                           
0xe130:	mov edi, 0x200                       #    |s|tifle_history(MAX_INPUT_HISTORY);
0xe135:	mov eax, 0                           
0xe13a:	call 0x20759                         
0xe13f:	nop                                  #|}|
0xe140:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xe144:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xe14d:	je 0xe154                            
0xe14f:	call 0x4980                          
0xe154:	mov rbx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xe158:	leave                                
0xe159:	ret                                  
0xe15a:	endbr64                              #|{|
0xe15e:	push rbp                             
0xe15f:	mov rbp, rsp                         
0xe162:	mov rax, qword ptr [rip + 0x232a7]   #    write_history(il|-|>history_file);
MEMORY OFFSET:     0x232a7     144039  >>144047

0xe169:	mov rax, qword ptr [rax + 0x68]      #    |w|rite_history(il->history_file);
MEMORY OFFSET:     0x68     104  >>112

0xe16d:	mov rdi, rax                         
0xe170:	mov eax, 0                           
0xe175:	call 0x21050                         
0xe17a:	mov rax, qword ptr [rip + 0x2328f]   #    window_end(il|-|>window);
MEMORY OFFSET:     0x2328f     144015  >>144023

0xe181:	mov rax, qword ptr [rax]             #    |w|indow_end(il->window);
0xe184:	mov rdi, rax                         
0xe187:	call 0xdab1                          
0xe18c:	mov rax, qword ptr [rip + 0x2327d]   #    |i|l_free(il);
MEMORY OFFSET:     0x2327d     143997  >>144005

0xe193:	mov rdi, rax                         
0xe196:	call 0xdf09                          
0xe19b:	mov qword ptr [rip + 0x2326a], 0     #    il |=| NULL;
MEMORY OFFSET:     0x2326a     143978  >>143986

0xe1a6:	nop                                  #|}|
0xe1a7:	pop rbp                              
0xe1a8:	ret                                  
0xe1a9:	endbr64                              #|{|
0xe1ad:	push rbp                             
0xe1ae:	mov rbp, rsp                         
0xe1b1:	sub rsp, 0x10                        
0xe1b5:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xe1b8:	mov dword ptr [rbp - 8], esi         
MEMORY OFFSET:     -0x8     -8  >>0

0xe1bb:	mov rax, qword ptr [rip + 0x2324e]   #    il|-|>columns = _columns;
MEMORY OFFSET:     0x2324e     143950  >>143958

0xe1c2:	mov edx, dword ptr [rbp - 4]         #    il->columns |=| _columns;
MEMORY OFFSET:     -0x4     -4  >>4

0xe1c5:	movsxd rdx, edx                      
0xe1c8:	mov qword ptr [rax + 0x28], rdx      
MEMORY OFFSET:     0x28     40  >>48

0xe1cc:	mov rax, qword ptr [rip + 0x2323d]   #    il|-|>line = _line;
MEMORY OFFSET:     0x2323d     143933  >>143941

0xe1d3:	mov edx, dword ptr [rbp - 8]         #    il->line |=| _line;
MEMORY OFFSET:     -0x8     -8  >>0

0xe1d6:	movsxd rdx, edx                      
0xe1d9:	mov qword ptr [rax + 0x30], rdx      
MEMORY OFFSET:     0x30     48  >>56

0xe1dd:	mov rax, qword ptr [rip + 0x2322c]   #    window_resize(il|-|>window, 0, _line, 1, _columns);
MEMORY OFFSET:     0x2322c     143916  >>143924

0xe1e4:	mov rax, qword ptr [rax]             #    |w|indow_resize(il->window, 0, _line, 1, _columns);
0xe1e7:	mov ecx, dword ptr [rbp - 4]         
MEMORY OFFSET:     -0x4     -4  >>4

0xe1ea:	mov edx, dword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xe1ed:	mov r8d, ecx                         
0xe1f0:	mov ecx, 1                           
0xe1f5:	mov esi, 0                           
0xe1fa:	mov rdi, rax                         
0xe1fd:	call 0xdad7                          
0xe202:	nop                                  #|}|
0xe203:	leave                                
0xe204:	ret                                  
0xe205:	endbr64                              #|{|
0xe209:	push rbp                             
0xe20a:	mov rbp, rsp                         
0xe20d:	push rbx                             
0xe20e:	sub rsp, 0x18                        
0xe212:	mov edi, 0x70                        #    input_line_t *saved_il = (input_line_t *)|x|malloc(sizeof(input_line_t));
0xe217:	call 0x24650                         
0xe21c:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xe220:	mov rdx, qword ptr [rip + 0x231e9]   #    *saved_il = |*|il;
MEMORY OFFSET:     0x231e9     143849  >>143857

0xe227:	mov rax, qword ptr [rbp - 0x18]      #    *saved_il |=| *il;
MEMORY OFFSET:     -0x18     -24  >>-16

0xe22b:	mov rcx, qword ptr [rdx]             
0xe22e:	mov rbx, qword ptr [rdx + 8]         
MEMORY OFFSET:     0x8     8  >>16

0xe232:	mov qword ptr [rax], rcx             
0xe235:	mov qword ptr [rax + 8], rbx         
MEMORY OFFSET:     0x8     8  >>16

0xe239:	mov rcx, qword ptr [rdx + 0x10]      
MEMORY OFFSET:     0x10     16  >>24

0xe23d:	mov rbx, qword ptr [rdx + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe241:	mov qword ptr [rax + 0x10], rcx      
MEMORY OFFSET:     0x10     16  >>24

0xe245:	mov qword ptr [rax + 0x18], rbx      
MEMORY OFFSET:     0x18     24  >>32

0xe249:	mov rcx, qword ptr [rdx + 0x20]      
MEMORY OFFSET:     0x20     32  >>40

0xe24d:	mov rbx, qword ptr [rdx + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xe251:	mov qword ptr [rax + 0x20], rcx      
MEMORY OFFSET:     0x20     32  >>40

0xe255:	mov qword ptr [rax + 0x28], rbx      
MEMORY OFFSET:     0x28     40  >>48

0xe259:	mov rcx, qword ptr [rdx + 0x30]      
MEMORY OFFSET:     0x30     48  >>56

0xe25d:	mov rbx, qword ptr [rdx + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe261:	mov qword ptr [rax + 0x30], rcx      
MEMORY OFFSET:     0x30     48  >>56

0xe265:	mov qword ptr [rax + 0x38], rbx      
MEMORY OFFSET:     0x38     56  >>64

0xe269:	mov rcx, qword ptr [rdx + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xe26d:	mov rbx, qword ptr [rdx + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xe271:	mov qword ptr [rax + 0x40], rcx      
MEMORY OFFSET:     0x40     64  >>72

0xe275:	mov qword ptr [rax + 0x48], rbx      
MEMORY OFFSET:     0x48     72  >>80

0xe279:	mov rcx, qword ptr [rdx + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xe27d:	mov rbx, qword ptr [rdx + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe281:	mov qword ptr [rax + 0x50], rcx      
MEMORY OFFSET:     0x50     80  >>88

0xe285:	mov qword ptr [rax + 0x58], rbx      
MEMORY OFFSET:     0x58     88  >>96

0xe289:	mov rcx, qword ptr [rdx + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xe28d:	mov rbx, qword ptr [rdx + 0x68]      
MEMORY OFFSET:     0x68     104  >>112

0xe291:	mov qword ptr [rax + 0x60], rcx      
MEMORY OFFSET:     0x60     96  >>104

0xe295:	mov qword ptr [rax + 0x68], rbx      
MEMORY OFFSET:     0x68     104  >>112

0xe299:	mov rax, qword ptr [rbp - 0x18]      #    if (saved_il|-|>buffer)
MEMORY OFFSET:     -0x18     -24  >>-16

0xe29d:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe2a1:	test rax, rax                        #    if |(|saved_il->buffer)
0xe2a4:	je 0xe2e7                            
0xe2a6:	mov rax, qword ptr [rbp - 0x18]      #	il->buffer = |x|malloc(saved_il->size);
MEMORY OFFSET:     -0x18     -24  >>-16

0xe2aa:	mov rax, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xe2ae:	mov rbx, qword ptr [rip + 0x2315b]   #	il|-|>buffer = xmalloc(saved_il->size);
MEMORY OFFSET:     0x2315b     143707  >>143715

0xe2b5:	mov rdi, rax                         #	il->buffer = |x|malloc(saved_il->size);
0xe2b8:	call 0x24650                         
0xe2bd:	mov qword ptr [rbx + 0x58], rax      #	il->buffer |=| xmalloc(saved_il->size);
MEMORY OFFSET:     0x58     88  >>96

0xe2c1:	mov rax, qword ptr [rbp - 0x18]      #	|m|emcpy(il->buffer, saved_il->buffer, saved_il->size);
MEMORY OFFSET:     -0x18     -24  >>-16

0xe2c5:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xe2c9:	mov rax, qword ptr [rbp - 0x18]      #	memcpy(il->buffer, saved_il|-|>buffer, saved_il->size);
MEMORY OFFSET:     -0x18     -24  >>-16

0xe2cd:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe2d1:	mov rax, qword ptr [rip + 0x23138]   #	memcpy(il|-|>buffer, saved_il->buffer, saved_il->size);
MEMORY OFFSET:     0x23138     143672  >>143680

0xe2d8:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe2dc:	mov rsi, rcx                         #	|m|emcpy(il->buffer, saved_il->buffer, saved_il->size);
0xe2df:	mov rdi, rax                         
0xe2e2:	call 0x4b70                          
0xe2e7:	mov rax, qword ptr [rbp - 0x18]      #    if (saved_il|-|>kill_ring)
MEMORY OFFSET:     -0x18     -24  >>-16

0xe2eb:	mov rax, qword ptr [rax + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xe2ef:	test rax, rax                        #    if |(|saved_il->kill_ring)
0xe2f2:	je 0xe30f                            
0xe2f4:	mov rax, qword ptr [rbp - 0x18]      #	il->kill_ring = xstrdup(saved_il|-|>kill_ring);
MEMORY OFFSET:     -0x18     -24  >>-16

0xe2f8:	mov rax, qword ptr [rax + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xe2fc:	mov rbx, qword ptr [rip + 0x2310d]   #	il|-|>kill_ring = xstrdup(saved_il->kill_ring);
MEMORY OFFSET:     0x2310d     143629  >>143637

0xe303:	mov rdi, rax                         #	il->kill_ring = |x|strdup(saved_il->kill_ring);
0xe306:	call 0x24780                         
0xe30b:	mov qword ptr [rbx + 0x60], rax      #	il->kill_ring |=| xstrdup(saved_il->kill_ring);
MEMORY OFFSET:     0x60     96  >>104

0xe30f:	mov rax, qword ptr [rbp - 0x18]      #    return |s|aved_il;
MEMORY OFFSET:     -0x18     -24  >>-16

0xe313:	mov rbx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0xe317:	leave                                
0xe318:	ret                                  
0xe319:	endbr64                              #|{|
0xe31d:	push rbp                             
0xe31e:	mov rbp, rsp                         
0xe321:	sub rsp, 0x20                        
0xe325:	mov qword ptr [rbp - 0x18], rdi      
MEMORY OFFSET:     -0x18     -24  >>-16

0xe329:	mov rax, qword ptr [rip + 0x230e0]   #    size_t columns = il|-|>columns;
MEMORY OFFSET:     0x230e0     143584  >>143592

0xe330:	mov rax, qword ptr [rax + 0x28]      #    size_t |c|olumns = il->columns;
MEMORY OFFSET:     0x28     40  >>48

0xe334:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xe338:	mov rax, qword ptr [rip + 0x230d1]   #    size_t line = il|-|>line;
MEMORY OFFSET:     0x230d1     143569  >>143577

0xe33f:	mov rax, qword ptr [rax + 0x30]      #    size_t |l|ine = il->line;
MEMORY OFFSET:     0x30     48  >>56

0xe343:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xe347:	cmp qword ptr [rbp - 0x18], 0        #    if |(|saved_il == NULL)
MEMORY OFFSET:     -0x18     -24  >>-16

0xe34c:	je 0xe37d                            
0xe34e:	mov rax, qword ptr [rip + 0x230bb]   #    |i|l_free(il);
MEMORY OFFSET:     0x230bb     143547  >>143555

0xe355:	mov rdi, rax                         
0xe358:	call 0xdf09                          
0xe35d:	mov rax, qword ptr [rbp - 0x18]      #    il |=| saved_il;
MEMORY OFFSET:     -0x18     -24  >>-16

0xe361:	mov qword ptr [rip + 0x230a8], rax   
MEMORY OFFSET:     0x230a8     143528  >>143536

0xe368:	mov rax, qword ptr [rbp - 8]         #    |i|l_resize(columns, line);
MEMORY OFFSET:     -0x8     -8  >>0

0xe36c:	mov edx, eax                         
0xe36e:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xe372:	mov esi, edx                         
0xe374:	mov edi, eax                         
0xe376:	call 0xe1a9                          
0xe37b:	jmp 0xe37e                           
0xe37d:	nop                                  #	|r|eturn;
0xe37e:	leave                                #|}|
0xe37f:	ret                                  
0xe380:	endbr64                              #|{|
0xe384:	push rbp                             
0xe385:	mov rbp, rsp                         
0xe388:	mov rax, qword ptr [rip + 0x23081]   #    return il|-|>point - il->static_length;
MEMORY OFFSET:     0x23081     143489  >>143497

0xe38f:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe393:	mov rax, qword ptr [rip + 0x23076]   #    return il->point - il|-|>static_length;
MEMORY OFFSET:     0x23076     143478  >>143486

0xe39a:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xe39e:	mov rax, rdx                         #    return il->point |-| il->static_length;
0xe3a1:	sub rax, rcx                         
0xe3a4:	pop rbp                              #|}|
0xe3a5:	ret                                  
0xe3a6:	endbr64                              #|{|
0xe3aa:	push rbp                             
0xe3ab:	mov rbp, rsp                         
0xe3ae:	mov dword ptr [rbp - 0x14], edi      
MEMORY OFFSET:     -0x14     -20  >>-12

0xe3b1:	mov rax, qword ptr [rip + 0x23058]   #    int old_echo_flag = il|-|>echo;
MEMORY OFFSET:     0x23058     143448  >>143456

0xe3b8:	mov eax, dword ptr [rax + 8]         #    int |o|ld_echo_flag = il->echo;
MEMORY OFFSET:     0x8     8  >>16

0xe3bb:	mov dword ptr [rbp - 4], eax         
MEMORY OFFSET:     -0x4     -4  >>4

0xe3be:	mov rax, qword ptr [rip + 0x2304b]   #    il|-|>echo = echo;
MEMORY OFFSET:     0x2304b     143435  >>143443

0xe3c5:	mov edx, dword ptr [rbp - 0x14]      #    il->echo |=| echo;
MEMORY OFFSET:     -0x14     -20  >>-12

0xe3c8:	mov dword ptr [rax + 8], edx         
MEMORY OFFSET:     0x8     8  >>16

0xe3cb:	mov eax, dword ptr [rbp - 4]         #    return |o|ld_echo_flag;
MEMORY OFFSET:     -0x4     -4  >>4

0xe3ce:	pop rbp                              #|}|
0xe3cf:	ret                                  
0xe3d0:	endbr64                              #|{|
0xe3d4:	push rbp                             
0xe3d5:	mov rbp, rsp                         
0xe3d8:	mov rax, qword ptr [rip + 0x23031]   #    return il|-|>dynamic_length == 0;
MEMORY OFFSET:     0x23031     143409  >>143417

0xe3df:	mov rax, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xe3e3:	test rax, rax                        #    return il->dynamic_length |=|= 0;
0xe3e6:	sete al                              
0xe3e9:	movzx eax, al                        
0xe3ec:	pop rbp                              #|}|
0xe3ed:	ret                                  
0xe3ee:	endbr64                              #|{|
0xe3f2:	push rbp                             
0xe3f3:	mov rbp, rsp                         
0xe3f6:	mov rdx, qword ptr [rip + 0x23013]   #    il->mark = il|-|>point;
MEMORY OFFSET:     0x23013     143379  >>143387

0xe3fd:	mov rax, qword ptr [rip + 0x2300c]   #    il|-|>mark = il->point;
MEMORY OFFSET:     0x2300c     143372  >>143380

0xe404:	mov rdx, qword ptr [rdx + 0x18]      #    il->mark = il|-|>point;
MEMORY OFFSET:     0x18     24  >>32

0xe408:	mov qword ptr [rax + 0x20], rdx      #    il->mark |=| il->point;
MEMORY OFFSET:     0x20     32  >>40

0xe40c:	nop                                  #|}|
0xe40d:	pop rbp                              
0xe40e:	ret                                  
0xe40f:	endbr64                              #|{|
0xe413:	push rbp                             
0xe414:	mov rbp, rsp                         
0xe417:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xe41c:	mov eax, 0                           
0xe421:	call 0xdd09                          
0xe426:	mov rax, qword ptr [rip + 0x22fe3]   #    il|-|>last_operation = IL_KILL_REGION;
MEMORY OFFSET:     0x22fe3     143331  >>143339

0xe42d:	mov dword ptr [rax + 0x10], 0x18     #    il->last_operation |=| IL_KILL_REGION;
MEMORY OFFSET:     0x10     16  >>24

0xe434:	nop                                  #|}|
0xe435:	pop rbp                              
0xe436:	ret                                  
0xe437:	endbr64                              #|{|
0xe43b:	push rbp                             
0xe43c:	mov rbp, rsp                         
0xe43f:	mov edi, 1                           #    |i|l_region_command(IL_STORE);
0xe444:	mov eax, 0                           
0xe449:	call 0xdd09                          
0xe44e:	mov rax, qword ptr [rip + 0x22fbb]   #    il|-|>last_operation = IL_KILL_RING_SAVE;
MEMORY OFFSET:     0x22fbb     143291  >>143299

0xe455:	mov dword ptr [rax + 0x10], 0x19     #    il->last_operation |=| IL_KILL_RING_SAVE;
MEMORY OFFSET:     0x10     16  >>24

0xe45c:	nop                                  #|}|
0xe45d:	pop rbp                              
0xe45e:	ret                                  
0xe45f:	endbr64                              #|{|
0xe463:	push rbp                             
0xe464:	mov rbp, rsp                         
0xe467:	mov rax, qword ptr [rip + 0x22fa2]   #    if (il|-|>kill_ring)
MEMORY OFFSET:     0x22fa2     143266  >>143274

0xe46e:	mov rax, qword ptr [rax + 0x60]      
MEMORY OFFSET:     0x60     96  >>104

0xe472:	test rax, rax                        #    if |(|il->kill_ring)
0xe475:	je 0xe498                            
0xe477:	mov rax, qword ptr [rip + 0x22f92]   #	il_insert_text(il|-|>kill_ring);
MEMORY OFFSET:     0x22f92     143250  >>143258

0xe47e:	mov rax, qword ptr [rax + 0x60]      #	|i|l_insert_text(il->kill_ring);
MEMORY OFFSET:     0x60     96  >>104

0xe482:	mov rdi, rax                         
0xe485:	call 0xf433                          
0xe48a:	mov rax, qword ptr [rip + 0x22f7f]   #	il|-|>last_operation = IL_YANK;
MEMORY OFFSET:     0x22f7f     143231  >>143239

0xe491:	mov dword ptr [rax + 0x10], 0x1a     #	il->last_operation |=| IL_YANK;
MEMORY OFFSET:     0x10     16  >>24

0xe498:	nop                                  #|}|
0xe499:	pop rbp                              
0xe49a:	ret                                  
0xe49b:	endbr64                              #|{|
0xe49f:	push rbp                             
0xe4a0:	mov rbp, rsp                         
0xe4a3:	mov rax, qword ptr [rip + 0x22f66]   #    int point = il|-|>point;
MEMORY OFFSET:     0x22f66     143206  >>143214

0xe4aa:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe4ae:	mov dword ptr [rbp - 4], eax         #    int |p|oint = il->point;
MEMORY OFFSET:     -0x4     -4  >>4

0xe4b1:	mov rdx, qword ptr [rip + 0x22f58]   #    il->point = il|-|>mark;
MEMORY OFFSET:     0x22f58     143192  >>143200

0xe4b8:	mov rax, qword ptr [rip + 0x22f51]   #    il|-|>point = il->mark;
MEMORY OFFSET:     0x22f51     143185  >>143193

0xe4bf:	mov rdx, qword ptr [rdx + 0x20]      #    il->point = il|-|>mark;
MEMORY OFFSET:     0x20     32  >>40

0xe4c3:	mov qword ptr [rax + 0x18], rdx      #    il->point |=| il->mark;
MEMORY OFFSET:     0x18     24  >>32

0xe4c7:	mov rax, qword ptr [rip + 0x22f42]   #    il|-|>mark  = point;
MEMORY OFFSET:     0x22f42     143170  >>143178

0xe4ce:	mov edx, dword ptr [rbp - 4]         #    il->mark  |=| point;
MEMORY OFFSET:     -0x4     -4  >>4

0xe4d1:	movsxd rdx, edx                      
0xe4d4:	mov qword ptr [rax + 0x20], rdx      
MEMORY OFFSET:     0x20     32  >>40

0xe4d8:	nop                                  #|}|
0xe4d9:	pop rbp                              
0xe4da:	ret                                  
0xe4db:	endbr64                              #|{|
0xe4df:	push rbp                             
0xe4e0:	mov rbp, rsp                         
0xe4e3:	mov rax, qword ptr [rip + 0x22f26]   #    if (il|-|>point > il->static_length)
MEMORY OFFSET:     0x22f26     143142  >>143150

0xe4ea:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe4ee:	mov rax, qword ptr [rip + 0x22f1b]   #    if (il->point > il|-|>static_length)
MEMORY OFFSET:     0x22f1b     143131  >>143139

0xe4f5:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xe4f9:	cmp rdx, rax                         #    if |(|il->point > il->static_length)
0xe4fc:	jbe 0xe51f                           
0xe4fe:	mov rax, qword ptr [rip + 0x22f0b]   #	il|-|>point--;
MEMORY OFFSET:     0x22f0b     143115  >>143123

0xe505:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe509:	sub rdx, 1                           #	il->point|-|-;
0xe50d:	mov qword ptr [rax + 0x18], rdx      
MEMORY OFFSET:     0x18     24  >>32

0xe511:	mov rax, qword ptr [rip + 0x22ef8]   #	il|-|>last_operation = IL_BACKWARD_CHAR;
MEMORY OFFSET:     0x22ef8     143096  >>143104

0xe518:	mov dword ptr [rax + 0x10], 1        #	il->last_operation |=| IL_BACKWARD_CHAR;
MEMORY OFFSET:     0x10     16  >>24

0xe51f:	nop                                  #|}|
0xe520:	pop rbp                              
0xe521:	ret                                  
0xe522:	endbr64                              #|{|
0xe526:	push rbp                             
0xe527:	mov rbp, rsp                         
0xe52a:	mov rax, qword ptr [rip + 0x22edf]   #    if (il|-|>point < il->length)
MEMORY OFFSET:     0x22edf     143071  >>143079

0xe531:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe535:	mov rax, qword ptr [rip + 0x22ed4]   #    if (il->point < il|-|>length)
MEMORY OFFSET:     0x22ed4     143060  >>143068

0xe53c:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe540:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xe543:	jae 0xe566                           
0xe545:	mov rax, qword ptr [rip + 0x22ec4]   #	il|-|>point++;
MEMORY OFFSET:     0x22ec4     143044  >>143052

0xe54c:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe550:	add rdx, 1                           #	il->point|+|+;
0xe554:	mov qword ptr [rax + 0x18], rdx      
MEMORY OFFSET:     0x18     24  >>32

0xe558:	mov rax, qword ptr [rip + 0x22eb1]   #	il|-|>last_operation = IL_FORWARD_CHAR;
MEMORY OFFSET:     0x22eb1     143025  >>143033

0xe55f:	mov dword ptr [rax + 0x10], 2        #	il->last_operation |=| IL_FORWARD_CHAR;
MEMORY OFFSET:     0x10     16  >>24

0xe566:	nop                                  #|}|
0xe567:	pop rbp                              
0xe568:	ret                                  
0xe569:	endbr64                              #|{|
0xe56d:	push rbp                             
0xe56e:	mov rbp, rsp                         
0xe571:	mov rax, qword ptr [rip + 0x22e98]   #    if (il|-|>point > il->static_length)
MEMORY OFFSET:     0x22e98     143000  >>143008

0xe578:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe57c:	mov rax, qword ptr [rip + 0x22e8d]   #    if (il->point > il|-|>static_length)
MEMORY OFFSET:     0x22e8d     142989  >>142997

0xe583:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xe587:	cmp rdx, rax                         #    if |(|il->point > il->static_length)
0xe58a:	jbe 0xe652                           
0xe590:	jmp 0xe59c                           #	while |(|il->point > il->static_length &&
0xe592:	mov eax, 0                           #	    |i|l_backward_char();
0xe597:	call 0xe4db                          
0xe59c:	mov rax, qword ptr [rip + 0x22e6d]   #	while (il|-|>point > il->static_length &&
MEMORY OFFSET:     0x22e6d     142957  >>142965

0xe5a3:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe5a7:	mov rax, qword ptr [rip + 0x22e62]   #	while (il->point > il|-|>static_length &&
MEMORY OFFSET:     0x22e62     142946  >>142954

0xe5ae:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xe5b2:	cmp rdx, rax                         #	while (il->point > il->static_length |&|&
0xe5b5:	jbe 0xe5f6                           
0xe5b7:	mov rax, qword ptr [rip + 0x22e52]   #	       il_separator(il|-|>buffer[il->point - 1]))
MEMORY OFFSET:     0x22e52     142930  >>142938

0xe5be:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe5c2:	mov rax, qword ptr [rip + 0x22e47]   #	       il_separator(il->buffer[il|-|>point - 1]))
MEMORY OFFSET:     0x22e47     142919  >>142927

0xe5c9:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe5cd:	sub rax, 1                           #	       il_separator(il->buffer|[|il->point - 1]))
0xe5d1:	add rax, rdx                         
0xe5d4:	movzx eax, byte ptr [rax]            
0xe5d7:	movsx eax, al                        #	       |i|l_separator(il->buffer[il->point - 1]))
0xe5da:	mov edi, eax                         
0xe5dc:	mov eax, 0                           
0xe5e1:	call 0xdcbe                          
0xe5e6:	test eax, eax                        #	while (il->point > il->static_length |&|&
0xe5e8:	jne 0xe592                           
0xe5ea:	jmp 0xe5f6                           #	while |(|il->point > il->static_length &&
0xe5ec:	mov eax, 0                           #	    |i|l_backward_char();
0xe5f1:	call 0xe4db                          
0xe5f6:	mov rax, qword ptr [rip + 0x22e13]   #	while (il|-|>point > il->static_length &&
MEMORY OFFSET:     0x22e13     142867  >>142875

0xe5fd:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe601:	mov rax, qword ptr [rip + 0x22e08]   #	while (il->point > il|-|>static_length &&
MEMORY OFFSET:     0x22e08     142856  >>142864

0xe608:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xe60c:	cmp rdx, rax                         #	while (il->point > il->static_length |&|&
0xe60f:	jbe 0xe644                           
0xe611:	mov rax, qword ptr [rip + 0x22df8]   #	       !il_separator(il|-|>buffer[il->point - 1]))
MEMORY OFFSET:     0x22df8     142840  >>142848

0xe618:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe61c:	mov rax, qword ptr [rip + 0x22ded]   #	       !il_separator(il->buffer[il|-|>point - 1]))
MEMORY OFFSET:     0x22ded     142829  >>142837

0xe623:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe627:	sub rax, 1                           #	       !il_separator(il->buffer|[|il->point - 1]))
0xe62b:	add rax, rdx                         
0xe62e:	movzx eax, byte ptr [rax]            
0xe631:	movsx eax, al                        #	       !|i|l_separator(il->buffer[il->point - 1]))
0xe634:	mov edi, eax                         
0xe636:	mov eax, 0                           
0xe63b:	call 0xdcbe                          
0xe640:	test eax, eax                        #	while (il->point > il->static_length |&|&
0xe642:	je 0xe5ec                            
0xe644:	mov rax, qword ptr [rip + 0x22dc5]   #	il|-|>last_operation = IL_BACKWARD_WORD;
MEMORY OFFSET:     0x22dc5     142789  >>142797

0xe64b:	mov dword ptr [rax + 0x10], 3        #	il->last_operation |=| IL_BACKWARD_WORD;
MEMORY OFFSET:     0x10     16  >>24

0xe652:	nop                                  #|}|
0xe653:	pop rbp                              
0xe654:	ret                                  
0xe655:	endbr64                              #|{|
0xe659:	push rbp                             
0xe65a:	mov rbp, rsp                         
0xe65d:	mov rax, qword ptr [rip + 0x22dac]   #    if (il|-|>point < il->length)
MEMORY OFFSET:     0x22dac     142764  >>142772

0xe664:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe668:	mov rax, qword ptr [rip + 0x22da1]   #    if (il->point < il|-|>length)
MEMORY OFFSET:     0x22da1     142753  >>142761

0xe66f:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe673:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xe676:	jae 0xe736                           
0xe67c:	jmp 0xe688                           #	while |(|il->point < il->length &&
0xe67e:	mov eax, 0                           #	    |i|l_forward_char();
0xe683:	call 0xe522                          
0xe688:	mov rax, qword ptr [rip + 0x22d81]   #	while (il|-|>point < il->length &&
MEMORY OFFSET:     0x22d81     142721  >>142729

0xe68f:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe693:	mov rax, qword ptr [rip + 0x22d76]   #	while (il->point < il|-|>length &&
MEMORY OFFSET:     0x22d76     142710  >>142718

0xe69a:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe69e:	cmp rdx, rax                         #	while (il->point < il->length |&|&
0xe6a1:	jae 0xe6de                           
0xe6a3:	mov rax, qword ptr [rip + 0x22d66]   #	       il_separator(il|-|>buffer[il->point]))
MEMORY OFFSET:     0x22d66     142694  >>142702

0xe6aa:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe6ae:	mov rax, qword ptr [rip + 0x22d5b]   #	       il_separator(il->buffer[il|-|>point]))
MEMORY OFFSET:     0x22d5b     142683  >>142691

0xe6b5:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe6b9:	add rax, rdx                         #	       il_separator(il->buffer|[|il->point]))
0xe6bc:	movzx eax, byte ptr [rax]            
0xe6bf:	movsx eax, al                        #	       |i|l_separator(il->buffer[il->point]))
0xe6c2:	mov edi, eax                         
0xe6c4:	mov eax, 0                           
0xe6c9:	call 0xdcbe                          
0xe6ce:	test eax, eax                        #	while (il->point < il->length |&|&
0xe6d0:	jne 0xe67e                           
0xe6d2:	jmp 0xe6de                           #	while |(|il->point < il->length &&
0xe6d4:	mov eax, 0                           #	    |i|l_forward_char();
0xe6d9:	call 0xe522                          
0xe6de:	mov rax, qword ptr [rip + 0x22d2b]   #	while (il|-|>point < il->length &&
MEMORY OFFSET:     0x22d2b     142635  >>142643

0xe6e5:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe6e9:	mov rax, qword ptr [rip + 0x22d20]   #	while (il->point < il|-|>length &&
MEMORY OFFSET:     0x22d20     142624  >>142632

0xe6f0:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe6f4:	cmp rdx, rax                         #	while (il->point < il->length |&|&
0xe6f7:	jae 0xe728                           
0xe6f9:	mov rax, qword ptr [rip + 0x22d10]   #	       !il_separator(il|-|>buffer[il->point]))
MEMORY OFFSET:     0x22d10     142608  >>142616

0xe700:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe704:	mov rax, qword ptr [rip + 0x22d05]   #	       !il_separator(il->buffer[il|-|>point]))
MEMORY OFFSET:     0x22d05     142597  >>142605

0xe70b:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe70f:	add rax, rdx                         #	       !il_separator(il->buffer|[|il->point]))
0xe712:	movzx eax, byte ptr [rax]            
0xe715:	movsx eax, al                        #	       !|i|l_separator(il->buffer[il->point]))
0xe718:	mov edi, eax                         
0xe71a:	mov eax, 0                           
0xe71f:	call 0xdcbe                          
0xe724:	test eax, eax                        #	while (il->point < il->length |&|&
0xe726:	je 0xe6d4                            
0xe728:	mov rax, qword ptr [rip + 0x22ce1]   #	il|-|>last_operation = IL_FORWARD_WORD;
MEMORY OFFSET:     0x22ce1     142561  >>142569

0xe72f:	mov dword ptr [rax + 0x10], 4        #	il->last_operation |=| IL_FORWARD_WORD;
MEMORY OFFSET:     0x10     16  >>24

0xe736:	nop                                  #|}|
0xe737:	pop rbp                              
0xe738:	ret                                  
0xe739:	endbr64                              #|{|
0xe73d:	push rbp                             
0xe73e:	mov rbp, rsp                         
0xe741:	mov rdx, qword ptr [rip + 0x22cc8]   #    il->point = il|-|>static_length;
MEMORY OFFSET:     0x22cc8     142536  >>142544

0xe748:	mov rax, qword ptr [rip + 0x22cc1]   #    il|-|>point = il->static_length;
MEMORY OFFSET:     0x22cc1     142529  >>142537

0xe74f:	mov rdx, qword ptr [rdx + 0x40]      #    il->point = il|-|>static_length;
MEMORY OFFSET:     0x40     64  >>72

0xe753:	mov qword ptr [rax + 0x18], rdx      #    il->point |=| il->static_length;
MEMORY OFFSET:     0x18     24  >>32

0xe757:	mov rax, qword ptr [rip + 0x22cb2]   #    il|-|>last_operation = IL_BEGINNING_OF_LINE;
MEMORY OFFSET:     0x22cb2     142514  >>142522

0xe75e:	mov dword ptr [rax + 0x10], 5        #    il->last_operation |=| IL_BEGINNING_OF_LINE;
MEMORY OFFSET:     0x10     16  >>24

0xe765:	nop                                  #|}|
0xe766:	pop rbp                              
0xe767:	ret                                  
0xe768:	endbr64                              #|{|
0xe76c:	push rbp                             
0xe76d:	mov rbp, rsp                         
0xe770:	mov rdx, qword ptr [rip + 0x22c99]   #    il->point = il|-|>length;
MEMORY OFFSET:     0x22c99     142489  >>142497

0xe777:	mov rax, qword ptr [rip + 0x22c92]   #    il|-|>point = il->length;
MEMORY OFFSET:     0x22c92     142482  >>142490

0xe77e:	mov rdx, qword ptr [rdx + 0x38]      #    il->point = il|-|>length;
MEMORY OFFSET:     0x38     56  >>64

0xe782:	mov qword ptr [rax + 0x18], rdx      #    il->point |=| il->length;
MEMORY OFFSET:     0x18     24  >>32

0xe786:	mov rax, qword ptr [rip + 0x22c83]   #    il|-|>last_operation = IL_END_OF_LINE;
MEMORY OFFSET:     0x22c83     142467  >>142475

0xe78d:	mov dword ptr [rax + 0x10], 6        #    il->last_operation |=| IL_END_OF_LINE;
MEMORY OFFSET:     0x10     16  >>24

0xe794:	nop                                  #|}|
0xe795:	pop rbp                              
0xe796:	ret                                  
0xe797:	endbr64                              #|{|
0xe79b:	push rbp                             
0xe79c:	mov rbp, rsp                         
0xe79f:	push rbx                             
0xe7a0:	sub rsp, 0x18                        
0xe7a4:	mov dword ptr [rbp - 0x14], edi      
MEMORY OFFSET:     -0x14     -20  >>-12

0xe7a7:	call 0x4ec0                          #    if (!|i|sprint(c))
0xe7ac:	mov rdx, qword ptr [rax]             
0xe7af:	mov eax, dword ptr [rbp - 0x14]      
MEMORY OFFSET:     -0x14     -20  >>-12

0xe7b2:	cdqe                                 
0xe7b4:	add rax, rax                         
0xe7b7:	add rax, rdx                         
0xe7ba:	movzx eax, word ptr [rax]            
0xe7bd:	movzx eax, ax                        
0xe7c0:	and eax, 0x4000                      
0xe7c5:	test eax, eax                        #    if |(|!isprint(c))
0xe7c7:	je 0xe8fa                            
0xe7cd:	mov rax, qword ptr [rip + 0x22c3c]   #    if (il|-|>length + 1 >= il->size)
MEMORY OFFSET:     0x22c3c     142396  >>142404

0xe7d4:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe7d8:	lea rdx, [rax + 1]                   #    if (il->length |+| 1 >= il->size)
MEMORY OFFSET:     0x1     1  >>9

0xe7dc:	mov rax, qword ptr [rip + 0x22c2d]   #    if (il->length + 1 >= il|-|>size)
MEMORY OFFSET:     0x22c2d     142381  >>142389

0xe7e3:	mov rax, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xe7e7:	cmp rdx, rax                         #    if |(|il->length + 1 >= il->size)
0xe7ea:	jb 0xe832                            
0xe7ec:	mov rax, qword ptr [rip + 0x22c1d]   #	|I|L_RESIZE(il->length + 1 + 32);
MEMORY OFFSET:     0x22c1d     142365  >>142373

0xe7f3:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe7f7:	mov rax, qword ptr [rip + 0x22c12]   
MEMORY OFFSET:     0x22c12     142354  >>142362

0xe7fe:	add rdx, 0x21                        
0xe802:	mov qword ptr [rax + 0x50], rdx      
MEMORY OFFSET:     0x50     80  >>88

0xe806:	mov rax, qword ptr [rip + 0x22c03]   
MEMORY OFFSET:     0x22c03     142339  >>142347

0xe80d:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xe811:	mov rax, qword ptr [rip + 0x22bf8]   
MEMORY OFFSET:     0x22bf8     142328  >>142336

0xe818:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe81c:	mov rbx, qword ptr [rip + 0x22bed]   
MEMORY OFFSET:     0x22bed     142317  >>142325

0xe823:	mov rsi, rdx                         
0xe826:	mov rdi, rax                         
0xe829:	call 0x24670                         
0xe82e:	mov qword ptr [rbx + 0x58], rax      
MEMORY OFFSET:     0x58     88  >>96

0xe832:	mov rax, qword ptr [rip + 0x22bd7]   #	    il|-|>length - il->point + 1);
MEMORY OFFSET:     0x22bd7     142295  >>142303

0xe839:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe83d:	mov rax, qword ptr [rip + 0x22bcc]   #	    il->length - il|-|>point + 1);
MEMORY OFFSET:     0x22bcc     142284  >>142292

0xe844:	mov rcx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe848:	mov rax, rdx                         #	    il->length |-| il->point + 1);
0xe84b:	sub rax, rcx                         
0xe84e:	lea rdx, [rax + 1]                   #    |m|emmove(il->buffer + il->point + 1,
MEMORY OFFSET:     0x1     1  >>9

0xe852:	mov rax, qword ptr [rip + 0x22bb7]   #	    il|-|>buffer + il->point,
MEMORY OFFSET:     0x22bb7     142263  >>142271

0xe859:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe85d:	mov rax, qword ptr [rip + 0x22bac]   #	    il->buffer + il|-|>point,
MEMORY OFFSET:     0x22bac     142252  >>142260

0xe864:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe868:	add rcx, rax                         #	    il->buffer |+| il->point,
0xe86b:	mov rax, qword ptr [rip + 0x22b9e]   #    memmove(il|-|>buffer + il->point + 1,
MEMORY OFFSET:     0x22b9e     142238  >>142246

0xe872:	mov rsi, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe876:	mov rax, qword ptr [rip + 0x22b93]   #    memmove(il->buffer + il|-|>point + 1,
MEMORY OFFSET:     0x22b93     142227  >>142235

0xe87d:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe881:	add rax, 1                           #    memmove(il->buffer + il->point |+| 1,
0xe885:	add rax, rsi                         
0xe888:	mov rsi, rcx                         #    |m|emmove(il->buffer + il->point + 1,
0xe88b:	mov rdi, rax                         
0xe88e:	call 0x4cf0                          
0xe893:	mov rax, qword ptr [rip + 0x22b76]   #    il|-|>buffer[il->point] = c;
MEMORY OFFSET:     0x22b76     142198  >>142206

0xe89a:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe89e:	mov rax, qword ptr [rip + 0x22b6b]   #    il->buffer[il|-|>point] = c;
MEMORY OFFSET:     0x22b6b     142187  >>142195

0xe8a5:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe8a9:	add rax, rdx                         #    il->buffer|[|il->point] = c;
0xe8ac:	mov edx, dword ptr [rbp - 0x14]      #    il->buffer[il->point] |=| c;
MEMORY OFFSET:     -0x14     -20  >>-12

0xe8af:	mov byte ptr [rax], dl               
0xe8b1:	mov rax, qword ptr [rip + 0x22b58]   #    il|-|>point++;
MEMORY OFFSET:     0x22b58     142168  >>142176

0xe8b8:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe8bc:	add rdx, 1                           #    il->point|+|+;
0xe8c0:	mov qword ptr [rax + 0x18], rdx      
MEMORY OFFSET:     0x18     24  >>32

0xe8c4:	mov rax, qword ptr [rip + 0x22b45]   #    il|-|>length++;
MEMORY OFFSET:     0x22b45     142149  >>142157

0xe8cb:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe8cf:	add rdx, 1                           #    il->length|+|+;
0xe8d3:	mov qword ptr [rax + 0x38], rdx      
MEMORY OFFSET:     0x38     56  >>64

0xe8d7:	mov rax, qword ptr [rip + 0x22b32]   #    il|-|>dynamic_length++;
MEMORY OFFSET:     0x22b32     142130  >>142138

0xe8de:	mov rdx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xe8e2:	add rdx, 1                           #    il->dynamic_length|+|+;
0xe8e6:	mov qword ptr [rax + 0x48], rdx      
MEMORY OFFSET:     0x48     72  >>80

0xe8ea:	mov rax, qword ptr [rip + 0x22b1f]   #    il|-|>last_operation = IL_INSERT_CHAR;
MEMORY OFFSET:     0x22b1f     142111  >>142119

0xe8f1:	mov dword ptr [rax + 0x10], 7        #    il->last_operation |=| IL_INSERT_CHAR;
MEMORY OFFSET:     0x10     16  >>24

0xe8f8:	jmp 0xe8fb                           
0xe8fa:	nop                                  #	|r|eturn;
0xe8fb:	mov rbx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0xe8ff:	leave                                
0xe900:	ret                                  
0xe901:	endbr64                              #|{|
0xe905:	push rbp                             
0xe906:	mov rbp, rsp                         
0xe909:	push rbx                             
0xe90a:	sub rsp, 8                           
0xe90e:	mov rax, qword ptr [rip + 0x22afb]   #    if (il|-|>point < il->length)
MEMORY OFFSET:     0x22afb     142075  >>142083

0xe915:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe919:	mov rax, qword ptr [rip + 0x22af0]   #    if (il->point < il|-|>length)
MEMORY OFFSET:     0x22af0     142064  >>142072

0xe920:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe924:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xe927:	jae 0xea1b                           
0xe92d:	mov rax, qword ptr [rip + 0x22adc]   #	       il|-|>length - il->point + 1);
MEMORY OFFSET:     0x22adc     142044  >>142052

0xe934:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe938:	mov rax, qword ptr [rip + 0x22ad1]   #	       il->length - il|-|>point + 1);
MEMORY OFFSET:     0x22ad1     142033  >>142041

0xe93f:	mov rcx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe943:	mov rax, rdx                         #	       il->length |-| il->point + 1);
0xe946:	sub rax, rcx                         
0xe949:	lea rdx, [rax + 1]                   #	|m|emcpy(il->buffer + il->point,
MEMORY OFFSET:     0x1     1  >>9

0xe94d:	mov rax, qword ptr [rip + 0x22abc]   #	       il|-|>buffer + il->point + 1,
MEMORY OFFSET:     0x22abc     142012  >>142020

0xe954:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe958:	mov rax, qword ptr [rip + 0x22ab1]   #	       il->buffer + il|-|>point + 1,
MEMORY OFFSET:     0x22ab1     142001  >>142009

0xe95f:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe963:	add rax, 1                           #	       il->buffer + il->point |+| 1,
0xe967:	add rcx, rax                         
0xe96a:	mov rax, qword ptr [rip + 0x22a9f]   #	memcpy(il|-|>buffer + il->point,
MEMORY OFFSET:     0x22a9f     141983  >>141991

0xe971:	mov rsi, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe975:	mov rax, qword ptr [rip + 0x22a94]   #	memcpy(il->buffer + il|-|>point,
MEMORY OFFSET:     0x22a94     141972  >>141980

0xe97c:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xe980:	add rax, rsi                         #	memcpy(il->buffer |+| il->point,
0xe983:	mov rsi, rcx                         #	|m|emcpy(il->buffer + il->point,
0xe986:	mov rdi, rax                         
0xe989:	call 0x4b70                          
0xe98e:	mov rax, qword ptr [rip + 0x22a7b]   #	il|-|>length--;
MEMORY OFFSET:     0x22a7b     141947  >>141955

0xe995:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe999:	sub rdx, 1                           #	il->length|-|-;
0xe99d:	mov qword ptr [rax + 0x38], rdx      
MEMORY OFFSET:     0x38     56  >>64

0xe9a1:	mov rax, qword ptr [rip + 0x22a68]   #	il|-|>dynamic_length--;
MEMORY OFFSET:     0x22a68     141928  >>141936

0xe9a8:	mov rdx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xe9ac:	sub rdx, 1                           #	il->dynamic_length|-|-;
0xe9b0:	mov qword ptr [rax + 0x48], rdx      
MEMORY OFFSET:     0x48     72  >>80

0xe9b4:	mov rax, qword ptr [rip + 0x22a55]   #	if (il|-|>length % 16 == 0)
MEMORY OFFSET:     0x22a55     141909  >>141917

0xe9bb:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe9bf:	and eax, 0xf                         #	if (il->length |%| 16 == 0)
0xe9c2:	test rax, rax                        #	if |(|il->length % 16 == 0)
0xe9c5:	jne 0xea0d                           
0xe9c7:	mov rax, qword ptr [rip + 0x22a42]   #	    |I|L_RESIZE(il->length + 1);
MEMORY OFFSET:     0x22a42     141890  >>141898

0xe9ce:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xe9d2:	mov rax, qword ptr [rip + 0x22a37]   
MEMORY OFFSET:     0x22a37     141879  >>141887

0xe9d9:	add rdx, 1                           
0xe9dd:	mov qword ptr [rax + 0x50], rdx      
MEMORY OFFSET:     0x50     80  >>88

0xe9e1:	mov rax, qword ptr [rip + 0x22a28]   
MEMORY OFFSET:     0x22a28     141864  >>141872

0xe9e8:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xe9ec:	mov rax, qword ptr [rip + 0x22a1d]   
MEMORY OFFSET:     0x22a1d     141853  >>141861

0xe9f3:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xe9f7:	mov rbx, qword ptr [rip + 0x22a12]   
MEMORY OFFSET:     0x22a12     141842  >>141850

0xe9fe:	mov rsi, rdx                         
0xea01:	mov rdi, rax                         
0xea04:	call 0x24670                         
0xea09:	mov qword ptr [rbx + 0x58], rax      
MEMORY OFFSET:     0x58     88  >>96

0xea0d:	mov rax, qword ptr [rip + 0x229fc]   #	il|-|>last_operation = IL_DELETE_CHAR;
MEMORY OFFSET:     0x229fc     141820  >>141828

0xea14:	mov dword ptr [rax + 0x10], 8        #	il->last_operation |=| IL_DELETE_CHAR;
MEMORY OFFSET:     0x10     16  >>24

0xea1b:	nop                                  #|}|
0xea1c:	mov rbx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xea20:	leave                                
0xea21:	ret                                  
0xea22:	endbr64                              #|{|
0xea26:	push rbp                             
0xea27:	mov rbp, rsp                         
0xea2a:	push rbx                             
0xea2b:	sub rsp, 8                           
0xea2f:	mov rax, qword ptr [rip + 0x229da]   #    if (il|-|>point > il->static_length)
MEMORY OFFSET:     0x229da     141786  >>141794

0xea36:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xea3a:	mov rax, qword ptr [rip + 0x229cf]   #    if (il->point > il|-|>static_length)
MEMORY OFFSET:     0x229cf     141775  >>141783

0xea41:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xea45:	cmp rdx, rax                         #    if |(|il->point > il->static_length)
0xea48:	jbe 0xeb4f                           
0xea4e:	mov rax, qword ptr [rip + 0x229bb]   #	       il|-|>length - il->point + 1);
MEMORY OFFSET:     0x229bb     141755  >>141763

0xea55:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xea59:	mov rax, qword ptr [rip + 0x229b0]   #	       il->length - il|-|>point + 1);
MEMORY OFFSET:     0x229b0     141744  >>141752

0xea60:	mov rcx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xea64:	mov rax, rdx                         #	       il->length |-| il->point + 1);
0xea67:	sub rax, rcx                         
0xea6a:	lea rdx, [rax + 1]                   #	|m|emcpy(il->buffer + il->point - 1,
MEMORY OFFSET:     0x1     1  >>9

0xea6e:	mov rax, qword ptr [rip + 0x2299b]   #	       il|-|>buffer + il->point,
MEMORY OFFSET:     0x2299b     141723  >>141731

0xea75:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xea79:	mov rax, qword ptr [rip + 0x22990]   #	       il->buffer + il|-|>point,
MEMORY OFFSET:     0x22990     141712  >>141720

0xea80:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xea84:	add rcx, rax                         #	       il->buffer |+| il->point,
0xea87:	mov rax, qword ptr [rip + 0x22982]   #	memcpy(il|-|>buffer + il->point - 1,
MEMORY OFFSET:     0x22982     141698  >>141706

0xea8e:	mov rsi, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xea92:	mov rax, qword ptr [rip + 0x22977]   #	memcpy(il->buffer + il|-|>point - 1,
MEMORY OFFSET:     0x22977     141687  >>141695

0xea99:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xea9d:	sub rax, 1                           #	memcpy(il->buffer + il->point |-| 1,
0xeaa1:	add rax, rsi                         
0xeaa4:	mov rsi, rcx                         #	|m|emcpy(il->buffer + il->point - 1,
0xeaa7:	mov rdi, rax                         
0xeaaa:	call 0x4b70                          
0xeaaf:	mov rax, qword ptr [rip + 0x2295a]   #	il|-|>point--;
MEMORY OFFSET:     0x2295a     141658  >>141666

0xeab6:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xeaba:	sub rdx, 1                           #	il->point|-|-;
0xeabe:	mov qword ptr [rax + 0x18], rdx      
MEMORY OFFSET:     0x18     24  >>32

0xeac2:	mov rax, qword ptr [rip + 0x22947]   #	il|-|>length--;
MEMORY OFFSET:     0x22947     141639  >>141647

0xeac9:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xeacd:	sub rdx, 1                           #	il->length|-|-;
0xead1:	mov qword ptr [rax + 0x38], rdx      
MEMORY OFFSET:     0x38     56  >>64

0xead5:	mov rax, qword ptr [rip + 0x22934]   #	il|-|>dynamic_length--;
MEMORY OFFSET:     0x22934     141620  >>141628

0xeadc:	mov rdx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xeae0:	sub rdx, 1                           #	il->dynamic_length|-|-;
0xeae4:	mov qword ptr [rax + 0x48], rdx      
MEMORY OFFSET:     0x48     72  >>80

0xeae8:	mov rax, qword ptr [rip + 0x22921]   #	if (il|-|>length % 16 == 0)
MEMORY OFFSET:     0x22921     141601  >>141609

0xeaef:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xeaf3:	and eax, 0xf                         #	if (il->length |%| 16 == 0)
0xeaf6:	test rax, rax                        #	if |(|il->length % 16 == 0)
0xeaf9:	jne 0xeb41                           
0xeafb:	mov rax, qword ptr [rip + 0x2290e]   #	    |I|L_RESIZE(il->length + 1);
MEMORY OFFSET:     0x2290e     141582  >>141590

0xeb02:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xeb06:	mov rax, qword ptr [rip + 0x22903]   
MEMORY OFFSET:     0x22903     141571  >>141579

0xeb0d:	add rdx, 1                           
0xeb11:	mov qword ptr [rax + 0x50], rdx      
MEMORY OFFSET:     0x50     80  >>88

0xeb15:	mov rax, qword ptr [rip + 0x228f4]   
MEMORY OFFSET:     0x228f4     141556  >>141564

0xeb1c:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xeb20:	mov rax, qword ptr [rip + 0x228e9]   
MEMORY OFFSET:     0x228e9     141545  >>141553

0xeb27:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xeb2b:	mov rbx, qword ptr [rip + 0x228de]   
MEMORY OFFSET:     0x228de     141534  >>141542

0xeb32:	mov rsi, rdx                         
0xeb35:	mov rdi, rax                         
0xeb38:	call 0x24670                         
0xeb3d:	mov qword ptr [rbx + 0x58], rax      
MEMORY OFFSET:     0x58     88  >>96

0xeb41:	mov rax, qword ptr [rip + 0x228c8]   #	il|-|>last_operation = IL_BACKWARD_DELETE_CHAR;
MEMORY OFFSET:     0x228c8     141512  >>141520

0xeb48:	mov dword ptr [rax + 0x10], 9        #	il->last_operation |=| IL_BACKWARD_DELETE_CHAR;
MEMORY OFFSET:     0x10     16  >>24

0xeb4f:	nop                                  #|}|
0xeb50:	mov rbx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xeb54:	leave                                
0xeb55:	ret                                  
0xeb56:	endbr64                              #|{|
0xeb5a:	push rbp                             
0xeb5b:	mov rbp, rsp                         
0xeb5e:	sub rsp, 0x10                        
0xeb62:	mov rax, qword ptr [rip + 0x228a7]   #    size_t old_mark = il|-|>mark;
MEMORY OFFSET:     0x228a7     141479  >>141487

0xeb69:	mov rax, qword ptr [rax + 0x20]      #    size_t |o|ld_mark = il->mark;
MEMORY OFFSET:     0x20     32  >>40

0xeb6d:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xeb71:	mov eax, 0                           #    |i|l_set_mark();
0xeb76:	call 0xe3ee                          
0xeb7b:	mov eax, 0                           #    |i|l_forward_word();
0xeb80:	call 0xe655                          
0xeb85:	mov rax, qword ptr [rip + 0x22884]   #    end_of_word = il|-|>point;
MEMORY OFFSET:     0x22884     141444  >>141452

0xeb8c:	mov rax, qword ptr [rax + 0x18]      #    end_of_word |=| il->point;
MEMORY OFFSET:     0x18     24  >>32

0xeb90:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xeb94:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xeb99:	mov eax, 0                           
0xeb9e:	call 0xdd09                          
0xeba3:	mov rax, qword ptr [rip + 0x22866]   #    if (old_mark <= il|-|>point)
MEMORY OFFSET:     0x22866     141414  >>141422

0xebaa:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xebae:	cmp qword ptr [rbp - 0x10], rax      #    if |(|old_mark <= il->point)
MEMORY OFFSET:     -0x10     -16  >>-8

0xebb2:	ja 0xebc5                            
0xebb4:	mov rax, qword ptr [rip + 0x22855]   #	il|-|>mark = old_mark;
MEMORY OFFSET:     0x22855     141397  >>141405

0xebbb:	mov rdx, qword ptr [rbp - 0x10]      #	il->mark |=| old_mark;
MEMORY OFFSET:     -0x10     -16  >>-8

0xebbf:	mov qword ptr [rax + 0x20], rdx      
MEMORY OFFSET:     0x20     32  >>40

0xebc3:	jmp 0xec0b                           
0xebc5:	mov rax, qword ptr [rbp - 0x10]      #	if |(|old_mark >= end_of_word)
MEMORY OFFSET:     -0x10     -16  >>-8

0xebc9:	cmp rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xebcd:	jb 0xebf5                            
0xebcf:	mov rax, qword ptr [rip + 0x2283a]   #	    il->mark = old_mark - (end_of_word - il|-|>point);
MEMORY OFFSET:     0x2283a     141370  >>141378

0xebd6:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xebda:	sub rax, qword ptr [rbp - 8]         #	    il->mark = old_mark |-| (end_of_word - il->point);
MEMORY OFFSET:     -0x8     -8  >>0

0xebde:	mov rcx, rax                         
0xebe1:	mov rax, qword ptr [rip + 0x22828]   #	    il|-|>mark = old_mark - (end_of_word - il->point);
MEMORY OFFSET:     0x22828     141352  >>141360

0xebe8:	mov rdx, qword ptr [rbp - 0x10]      #	    il->mark = old_mark |-| (end_of_word - il->point);
MEMORY OFFSET:     -0x10     -16  >>-8

0xebec:	add rdx, rcx                         
0xebef:	mov qword ptr [rax + 0x20], rdx      #	    il->mark |=| old_mark - (end_of_word - il->point);
MEMORY OFFSET:     0x20     32  >>40

0xebf3:	jmp 0xec0b                           
0xebf5:	mov rdx, qword ptr [rip + 0x22814]   #	    il->mark = il|-|>point;
MEMORY OFFSET:     0x22814     141332  >>141340

0xebfc:	mov rax, qword ptr [rip + 0x2280d]   #	    il|-|>mark = il->point;
MEMORY OFFSET:     0x2280d     141325  >>141333

0xec03:	mov rdx, qword ptr [rdx + 0x18]      #	    il->mark = il|-|>point;
MEMORY OFFSET:     0x18     24  >>32

0xec07:	mov qword ptr [rax + 0x20], rdx      #	    il->mark |=| il->point;
MEMORY OFFSET:     0x20     32  >>40

0xec0b:	mov rax, qword ptr [rip + 0x227fe]   #    il|-|>last_operation = IL_KILL_WORD;
MEMORY OFFSET:     0x227fe     141310  >>141318

0xec12:	mov dword ptr [rax + 0x10], 0xa      #    il->last_operation |=| IL_KILL_WORD;
MEMORY OFFSET:     0x10     16  >>24

0xec19:	nop                                  #|}|
0xec1a:	leave                                
0xec1b:	ret                                  
0xec1c:	endbr64                              #|{|
0xec20:	push rbp                             
0xec21:	mov rbp, rsp                         
0xec24:	sub rsp, 0x10                        
0xec28:	mov rax, qword ptr [rip + 0x227e1]   #    size_t old_mark  = il|-|>mark;
MEMORY OFFSET:     0x227e1     141281  >>141289

0xec2f:	mov rax, qword ptr [rax + 0x20]      #    size_t |o|ld_mark  = il->mark;
MEMORY OFFSET:     0x20     32  >>40

0xec33:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xec37:	mov rax, qword ptr [rip + 0x227d2]   #    size_t old_point = il|-|>point;
MEMORY OFFSET:     0x227d2     141266  >>141274

0xec3e:	mov rax, qword ptr [rax + 0x18]      #    size_t |o|ld_point = il->point;
MEMORY OFFSET:     0x18     24  >>32

0xec42:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xec46:	mov eax, 0                           #    |i|l_set_mark();
0xec4b:	call 0xe3ee                          
0xec50:	mov eax, 0                           #    |i|l_backward_word();
0xec55:	call 0xe569                          
0xec5a:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xec5f:	mov eax, 0                           
0xec64:	call 0xdd09                          
0xec69:	mov rax, qword ptr [rip + 0x227a0]   #    if (old_mark <= il|-|>point)
MEMORY OFFSET:     0x227a0     141216  >>141224

0xec70:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xec74:	cmp qword ptr [rbp - 0x10], rax      #    if |(|old_mark <= il->point)
MEMORY OFFSET:     -0x10     -16  >>-8

0xec78:	ja 0xec8b                            
0xec7a:	mov rax, qword ptr [rip + 0x2278f]   #	il|-|>mark = old_mark;
MEMORY OFFSET:     0x2278f     141199  >>141207

0xec81:	mov rdx, qword ptr [rbp - 0x10]      #	il->mark |=| old_mark;
MEMORY OFFSET:     -0x10     -16  >>-8

0xec85:	mov qword ptr [rax + 0x20], rdx      
MEMORY OFFSET:     0x20     32  >>40

0xec89:	jmp 0xecd1                           
0xec8b:	mov rax, qword ptr [rbp - 0x10]      #	if |(|old_mark >= old_point)
MEMORY OFFSET:     -0x10     -16  >>-8

0xec8f:	cmp rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xec93:	jb 0xecbb                            
0xec95:	mov rax, qword ptr [rip + 0x22774]   #	    il->mark = old_mark - (old_point - il|-|>point);
MEMORY OFFSET:     0x22774     141172  >>141180

0xec9c:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xeca0:	sub rax, qword ptr [rbp - 8]         #	    il->mark = old_mark |-| (old_point - il->point);
MEMORY OFFSET:     -0x8     -8  >>0

0xeca4:	mov rcx, rax                         
0xeca7:	mov rax, qword ptr [rip + 0x22762]   #	    il|-|>mark = old_mark - (old_point - il->point);
MEMORY OFFSET:     0x22762     141154  >>141162

0xecae:	mov rdx, qword ptr [rbp - 0x10]      #	    il->mark = old_mark |-| (old_point - il->point);
MEMORY OFFSET:     -0x10     -16  >>-8

0xecb2:	add rdx, rcx                         
0xecb5:	mov qword ptr [rax + 0x20], rdx      #	    il->mark |=| old_mark - (old_point - il->point);
MEMORY OFFSET:     0x20     32  >>40

0xecb9:	jmp 0xecd1                           
0xecbb:	mov rdx, qword ptr [rip + 0x2274e]   #	    il->mark = il|-|>point;
MEMORY OFFSET:     0x2274e     141134  >>141142

0xecc2:	mov rax, qword ptr [rip + 0x22747]   #	    il|-|>mark = il->point;
MEMORY OFFSET:     0x22747     141127  >>141135

0xecc9:	mov rdx, qword ptr [rdx + 0x18]      #	    il->mark = il|-|>point;
MEMORY OFFSET:     0x18     24  >>32

0xeccd:	mov qword ptr [rax + 0x20], rdx      #	    il->mark |=| il->point;
MEMORY OFFSET:     0x20     32  >>40

0xecd1:	mov rax, qword ptr [rip + 0x22738]   #    il|-|>last_operation = IL_BACKWARD_KILL_WORD;
MEMORY OFFSET:     0x22738     141112  >>141120

0xecd8:	mov dword ptr [rax + 0x10], 0xb      #    il->last_operation |=| IL_BACKWARD_KILL_WORD;
MEMORY OFFSET:     0x10     16  >>24

0xecdf:	nop                                  #|}|
0xece0:	leave                                
0xece1:	ret                                  
0xece2:	endbr64                              #|{|
0xece6:	push rbp                             
0xece7:	mov rbp, rsp                         
0xecea:	push rbx                             
0xeceb:	sub rsp, 8                           
0xecef:	mov rax, qword ptr [rip + 0x2271a]   #    il|-|>point          = 0;
MEMORY OFFSET:     0x2271a     141082  >>141090

0xecf6:	mov qword ptr [rax + 0x18], 0        #    il->point          |=| 0;
MEMORY OFFSET:     0x18     24  >>32

0xecfe:	mov rax, qword ptr [rip + 0x2270b]   #    il|-|>mark           = 0;
MEMORY OFFSET:     0x2270b     141067  >>141075

0xed05:	mov qword ptr [rax + 0x20], 0        #    il->mark           |=| 0;
MEMORY OFFSET:     0x20     32  >>40

0xed0d:	mov rax, qword ptr [rip + 0x226fc]   #    il|-|>length         = 0;
MEMORY OFFSET:     0x226fc     141052  >>141060

0xed14:	mov qword ptr [rax + 0x38], 0        #    il->length         |=| 0;
MEMORY OFFSET:     0x38     56  >>64

0xed1c:	mov rax, qword ptr [rip + 0x226ed]   #    il|-|>static_length  = 0;
MEMORY OFFSET:     0x226ed     141037  >>141045

0xed23:	mov qword ptr [rax + 0x40], 0        #    il->static_length  |=| 0;
MEMORY OFFSET:     0x40     64  >>72

0xed2b:	mov rax, qword ptr [rip + 0x226de]   #    il|-|>dynamic_length = 0;
MEMORY OFFSET:     0x226de     141022  >>141030

0xed32:	mov qword ptr [rax + 0x48], 0        #    il->dynamic_length |=| 0;
MEMORY OFFSET:     0x48     72  >>80

0xed3a:	mov rax, qword ptr [rip + 0x226cf]   #    |I|L_RESIZE(1);
MEMORY OFFSET:     0x226cf     141007  >>141015

0xed41:	mov qword ptr [rax + 0x50], 1        
MEMORY OFFSET:     0x50     80  >>88

0xed49:	mov rax, qword ptr [rip + 0x226c0]   
MEMORY OFFSET:     0x226c0     140992  >>141000

0xed50:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xed54:	mov rax, qword ptr [rip + 0x226b5]   
MEMORY OFFSET:     0x226b5     140981  >>140989

0xed5b:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xed5f:	mov rbx, qword ptr [rip + 0x226aa]   
MEMORY OFFSET:     0x226aa     140970  >>140978

0xed66:	mov rsi, rdx                         
0xed69:	mov rdi, rax                         
0xed6c:	call 0x24670                         
0xed71:	mov qword ptr [rbx + 0x58], rax      
MEMORY OFFSET:     0x58     88  >>96

0xed75:	mov rax, qword ptr [rip + 0x22694]   #    il|-|>buffer[0] = '\0';
MEMORY OFFSET:     0x22694     140948  >>140956

0xed7c:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xed80:	mov byte ptr [rax], 0                #    il->buffer[0] |=| '\0';
0xed83:	mov rax, qword ptr [rip + 0x22686]   #    il|-|>last_operation = IL_RESET_LINE;
MEMORY OFFSET:     0x22686     140934  >>140942

0xed8a:	mov dword ptr [rax + 0x10], 0xc      #    il->last_operation |=| IL_RESET_LINE;
MEMORY OFFSET:     0x10     16  >>24

0xed91:	nop                                  #|}|
0xed92:	mov rbx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xed96:	leave                                
0xed97:	ret                                  
0xed98:	endbr64                              #|{|
0xed9c:	push rbp                             
0xed9d:	mov rbp, rsp                         
0xeda0:	sub rsp, 0x10                        
0xeda4:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xeda7:	mov eax, 0                           #    |i|l_beginning_of_line();
0xedac:	call 0xe739                          
0xedb1:	mov eax, 0                           #    |i|l_set_mark();
0xedb6:	call 0xe3ee                          
0xedbb:	mov eax, 0                           #    |i|l_end_of_line();
0xedc0:	call 0xe768                          
0xedc5:	mov eax, dword ptr [rbp - 4]         #    |i|l_region_command(store | IL_KILL);
MEMORY OFFSET:     -0x4     -4  >>4

0xedc8:	or eax, 2                            
0xedcb:	mov edi, eax                         
0xedcd:	mov eax, 0                           
0xedd2:	call 0xdd09                          
0xedd7:	mov rdx, qword ptr [rip + 0x22632]   #    il->mark = il|-|>point;
MEMORY OFFSET:     0x22632     140850  >>140858

0xedde:	mov rax, qword ptr [rip + 0x2262b]   #    il|-|>mark = il->point;
MEMORY OFFSET:     0x2262b     140843  >>140851

0xede5:	mov rdx, qword ptr [rdx + 0x18]      #    il->mark = il|-|>point;
MEMORY OFFSET:     0x18     24  >>32

0xede9:	mov qword ptr [rax + 0x20], rdx      #    il->mark |=| il->point;
MEMORY OFFSET:     0x20     32  >>40

0xeded:	mov rax, qword ptr [rip + 0x2261c]   #    il|-|>last_operation = IL_KILL_LINE;
MEMORY OFFSET:     0x2261c     140828  >>140836

0xedf4:	mov dword ptr [rax + 0x10], 0xd      #    il->last_operation |=| IL_KILL_LINE;
MEMORY OFFSET:     0x10     16  >>24

0xedfb:	nop                                  #|}|
0xedfc:	leave                                
0xedfd:	ret                                  
0xedfe:	endbr64                              #|{|
0xee02:	push rbp                             
0xee03:	mov rbp, rsp                         
0xee06:	sub rsp, 0x10                        
0xee0a:	mov rax, qword ptr [rip + 0x225ff]   #    size_t old_mark = (il|-|>mark <= il->point) ? il->static_length :
MEMORY OFFSET:     0x225ff     140799  >>140807

0xee11:	mov rdx, qword ptr [rax + 0x20]      
MEMORY OFFSET:     0x20     32  >>40

0xee15:	mov rax, qword ptr [rip + 0x225f4]   #    size_t old_mark = (il->mark <= il|-|>point) ? il->static_length :
MEMORY OFFSET:     0x225f4     140788  >>140796

0xee1c:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xee20:	cmp rdx, rax                         #    size_t old_mark = (il->mark <= il->point) ? il->static_length |:|
0xee23:	ja 0xee32                            
0xee25:	mov rax, qword ptr [rip + 0x225e4]   #    size_t old_mark = (il->mark <= il->point) ? il|-|>static_length :
MEMORY OFFSET:     0x225e4     140772  >>140780

0xee2c:	mov rax, qword ptr [rax + 0x40]      #    size_t old_mark = (il->mark <= il->point) ? il->static_length |:|
MEMORY OFFSET:     0x40     64  >>72

0xee30:	jmp 0xee4e                           
0xee32:	mov rax, qword ptr [rip + 0x225d7]   #						il|-|>mark - il->point;
MEMORY OFFSET:     0x225d7     140759  >>140767

0xee39:	mov rdx, qword ptr [rax + 0x20]      
MEMORY OFFSET:     0x20     32  >>40

0xee3d:	mov rax, qword ptr [rip + 0x225cc]   #						il->mark - il|-|>point;
MEMORY OFFSET:     0x225cc     140748  >>140756

0xee44:	mov rcx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xee48:	mov rax, rdx                         #    size_t old_mark = (il->mark <= il->point) ? il->static_length |:|
0xee4b:	sub rax, rcx                         
0xee4e:	mov qword ptr [rbp - 8], rax         #    size_t |o|ld_mark = (il->mark <= il->point) ? il->static_length :
MEMORY OFFSET:     -0x8     -8  >>0

0xee52:	mov eax, 0                           #    |i|l_set_mark();
0xee57:	call 0xe3ee                          
0xee5c:	mov eax, 0                           #    |i|l_beginning_of_line();
0xee61:	call 0xe739                          
0xee66:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xee6b:	mov eax, 0                           
0xee70:	call 0xdd09                          
0xee75:	mov rax, qword ptr [rip + 0x22594]   #    il->mark = |m|in(old_mark, il->length);
MEMORY OFFSET:     0x22594     140692  >>140700

0xee7c:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xee80:	mov rcx, qword ptr [rip + 0x22589]   #    il|-|>mark = min(old_mark, il->length);
MEMORY OFFSET:     0x22589     140681  >>140689

0xee87:	mov rax, qword ptr [rbp - 8]         #    il->mark = |m|in(old_mark, il->length);
MEMORY OFFSET:     -0x8     -8  >>0

0xee8b:	cmp rdx, rax                         
0xee8e:	cmovbe rax, rdx                      
0xee92:	mov qword ptr [rcx + 0x20], rax      #    il->mark |=| min(old_mark, il->length);
MEMORY OFFSET:     0x20     32  >>40

0xee96:	mov rax, qword ptr [rip + 0x22573]   #    il|-|>last_operation = IL_KILL_TO_BEGINNING_OF_LINE;
MEMORY OFFSET:     0x22573     140659  >>140667

0xee9d:	mov dword ptr [rax + 0x10], 0xe      #    il->last_operation |=| IL_KILL_TO_BEGINNING_OF_LINE;
MEMORY OFFSET:     0x10     16  >>24

0xeea4:	nop                                  #|}|
0xeea5:	leave                                
0xeea6:	ret                                  
0xeea7:	endbr64                              #|{|
0xeeab:	push rbp                             
0xeeac:	mov rbp, rsp                         
0xeeaf:	sub rsp, 0x10                        
0xeeb3:	mov rax, qword ptr [rip + 0x22556]   #    size_t old_mark = il|-|>mark;
MEMORY OFFSET:     0x22556     140630  >>140638

0xeeba:	mov rax, qword ptr [rax + 0x20]      #    size_t |o|ld_mark = il->mark;
MEMORY OFFSET:     0x20     32  >>40

0xeebe:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xeec2:	mov eax, 0                           #    |i|l_set_mark();
0xeec7:	call 0xe3ee                          
0xeecc:	mov eax, 0                           #    |i|l_end_of_line();
0xeed1:	call 0xe768                          
0xeed6:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xeedb:	mov eax, 0                           
0xeee0:	call 0xdd09                          
0xeee5:	mov rax, qword ptr [rip + 0x22524]   #    il->mark = |m|in(old_mark, il->length);
MEMORY OFFSET:     0x22524     140580  >>140588

0xeeec:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xeef0:	mov rcx, qword ptr [rip + 0x22519]   #    il|-|>mark = min(old_mark, il->length);
MEMORY OFFSET:     0x22519     140569  >>140577

0xeef7:	mov rax, qword ptr [rbp - 8]         #    il->mark = |m|in(old_mark, il->length);
MEMORY OFFSET:     -0x8     -8  >>0

0xeefb:	cmp rdx, rax                         
0xeefe:	cmovbe rax, rdx                      
0xef02:	mov qword ptr [rcx + 0x20], rax      #    il->mark |=| min(old_mark, il->length);
MEMORY OFFSET:     0x20     32  >>40

0xef06:	mov rax, qword ptr [rip + 0x22503]   #    il|-|>last_operation = IL_KILL_TO_END_OF_LINE;
MEMORY OFFSET:     0x22503     140547  >>140555

0xef0d:	mov dword ptr [rax + 0x10], 0xf      #    il->last_operation |=| IL_KILL_TO_END_OF_LINE;
MEMORY OFFSET:     0x10     16  >>24

0xef14:	nop                                  #|}|
0xef15:	leave                                
0xef16:	ret                                  
0xef17:	endbr64                              #|{|
0xef1b:	push rbp                             
0xef1c:	mov rbp, rsp                         
0xef1f:	mov rax, qword ptr [rip + 0x224ea]   #    if (il|-|>buffer[il->point] == ' ')
MEMORY OFFSET:     0x224ea     140522  >>140530

0xef26:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xef2a:	mov rax, qword ptr [rip + 0x224df]   #    if (il->buffer[il|-|>point] == ' ')
MEMORY OFFSET:     0x224df     140511  >>140519

0xef31:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xef35:	add rax, rdx                         #    if (il->buffer|[|il->point] == ' ')
0xef38:	movzx eax, byte ptr [rax]            
0xef3b:	cmp al, 0x20                         #    if |(|il->buffer[il->point] == ' ')
0xef3d:	jne 0xef61                           
0xef3f:	mov eax, 0                           #	|i|l_delete_horizontal_space();
0xef44:	call 0xef64                          
0xef49:	mov edi, 0x20                        #	|i|l_insert_char(' ');
0xef4e:	call 0xe797                          
0xef53:	mov rax, qword ptr [rip + 0x224b6]   #	il|-|>last_operation = IL_JUST_ONE_SPACE;
MEMORY OFFSET:     0x224b6     140470  >>140478

0xef5a:	mov dword ptr [rax + 0x10], 0x10     #	il->last_operation |=| IL_JUST_ONE_SPACE;
MEMORY OFFSET:     0x10     16  >>24

0xef61:	nop                                  #|}|
0xef62:	pop rbp                              
0xef63:	ret                                  
0xef64:	endbr64                              #|{|
0xef68:	push rbp                             
0xef69:	mov rbp, rsp                         
0xef6c:	mov rax, qword ptr [rip + 0x2249d]   #    if (il|-|>buffer[il->point] == ' ')
MEMORY OFFSET:     0x2249d     140445  >>140453

0xef73:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xef77:	mov rax, qword ptr [rip + 0x22492]   #    if (il->buffer[il|-|>point] == ' ')
MEMORY OFFSET:     0x22492     140434  >>140442

0xef7e:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xef82:	add rax, rdx                         #    if (il->buffer|[|il->point] == ' ')
0xef85:	movzx eax, byte ptr [rax]            
0xef88:	cmp al, 0x20                         #    if |(|il->buffer[il->point] == ' ')
0xef8a:	jne 0xf006                           
0xef8c:	jmp 0xef98                           #	while |(|il->buffer[il->point] == ' ')
0xef8e:	mov eax, 0                           #	    |i|l_delete_char();
0xef93:	call 0xe901                          
0xef98:	mov rax, qword ptr [rip + 0x22471]   #	while (il|-|>buffer[il->point] == ' ')
MEMORY OFFSET:     0x22471     140401  >>140409

0xef9f:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xefa3:	mov rax, qword ptr [rip + 0x22466]   #	while (il->buffer[il|-|>point] == ' ')
MEMORY OFFSET:     0x22466     140390  >>140398

0xefaa:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xefae:	add rax, rdx                         #	while (il->buffer|[|il->point] == ' ')
0xefb1:	movzx eax, byte ptr [rax]            
0xefb4:	cmp al, 0x20                         #	while (il->buffer[il->point] |=|= ' ')
0xefb6:	je 0xef8e                            
0xefb8:	jmp 0xefc4                           #	while |(|il->dynamic_length && il->buffer[il->point - 1] == ' ')
0xefba:	mov eax, 0                           #	    |i|l_backward_delete_char();
0xefbf:	call 0xea22                          
0xefc4:	mov rax, qword ptr [rip + 0x22445]   #	while (il|-|>dynamic_length && il->buffer[il->point - 1] == ' ')
MEMORY OFFSET:     0x22445     140357  >>140365

0xefcb:	mov rax, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xefcf:	test rax, rax                        #	while (il->dynamic_length |&|& il->buffer[il->point - 1] == ' ')
0xefd2:	je 0xeff8                            
0xefd4:	mov rax, qword ptr [rip + 0x22435]   #	while (il->dynamic_length && il|-|>buffer[il->point - 1] == ' ')
MEMORY OFFSET:     0x22435     140341  >>140349

0xefdb:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xefdf:	mov rax, qword ptr [rip + 0x2242a]   #	while (il->dynamic_length && il->buffer[il|-|>point - 1] == ' ')
MEMORY OFFSET:     0x2242a     140330  >>140338

0xefe6:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xefea:	sub rax, 1                           #	while (il->dynamic_length && il->buffer|[|il->point - 1] == ' ')
0xefee:	add rax, rdx                         
0xeff1:	movzx eax, byte ptr [rax]            
0xeff4:	cmp al, 0x20                         #	while (il->dynamic_length |&|& il->buffer[il->point - 1] == ' ')
0xeff6:	je 0xefba                            
0xeff8:	mov rax, qword ptr [rip + 0x22411]   #	il|-|>last_operation = IL_DELETE_HORIZONTAL_SPACE;
MEMORY OFFSET:     0x22411     140305  >>140313

0xefff:	mov dword ptr [rax + 0x10], 0x11     #	il->last_operation |=| IL_DELETE_HORIZONTAL_SPACE;
MEMORY OFFSET:     0x10     16  >>24

0xf006:	nop                                  #|}|
0xf007:	pop rbp                              
0xf008:	ret                                  
0xf009:	endbr64                              #|{|
0xf00d:	push rbp                             
0xf00e:	mov rbp, rsp                         
0xf011:	sub rsp, 0x10                        
0xf015:	mov rax, qword ptr [rip + 0x223f4]   #    if (il|-|>point < il->length)
MEMORY OFFSET:     0x223f4     140276  >>140284

0xf01c:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf020:	mov rax, qword ptr [rip + 0x223e9]   #    if (il->point < il|-|>length)
MEMORY OFFSET:     0x223e9     140265  >>140273

0xf027:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xf02b:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xf02e:	jae 0xf0ac                           
0xf030:	mov rax, qword ptr [rip + 0x223d9]   #	size_t previous_point = il|-|>point;
MEMORY OFFSET:     0x223d9     140249  >>140257

0xf037:	mov rax, qword ptr [rax + 0x18]      #	size_t |p|revious_point = il->point;
MEMORY OFFSET:     0x18     24  >>32

0xf03b:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xf03f:	mov eax, 0                           #	|i|l_forward_word();
0xf044:	call 0xe655                          
0xf049:	mov rax, qword ptr [rbp - 8]         #	for (i |=| previous_point; i < il->point; i++)
MEMORY OFFSET:     -0x8     -8  >>0

0xf04d:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xf051:	jmp 0xf08d                           #	|f|or (i = previous_point; i < il->point; i++)
0xf053:	mov rax, qword ptr [rip + 0x223b6]   #	    il->buffer[i] = tolower((int)il|-|>buffer[i]);
MEMORY OFFSET:     0x223b6     140214  >>140222

0xf05a:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf05e:	mov rax, qword ptr [rbp - 0x10]      #	    il->buffer[i] = tolower((int)il->buffer|[|i]);
MEMORY OFFSET:     -0x10     -16  >>-8

0xf062:	add rax, rdx                         
0xf065:	movzx eax, byte ptr [rax]            
0xf068:	movsx eax, al                        #	    il->buffer[i] = |t|olower((int)il->buffer[i]);
0xf06b:	mov edi, eax                         
0xf06d:	call 0x4be0                          
0xf072:	mov edx, eax                         
0xf074:	mov rax, qword ptr [rip + 0x22395]   #	    il|-|>buffer[i] = tolower((int)il->buffer[i]);
MEMORY OFFSET:     0x22395     140181  >>140189

0xf07b:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf07f:	mov rax, qword ptr [rbp - 0x10]      #	    il->buffer|[|i] = tolower((int)il->buffer[i]);
MEMORY OFFSET:     -0x10     -16  >>-8

0xf083:	add rax, rcx                         
0xf086:	mov byte ptr [rax], dl               #	    il->buffer[i] |=| tolower((int)il->buffer[i]);
0xf088:	add qword ptr [rbp - 0x10], 1        #	for (i = previous_point; i < il->point; i|+|+)
MEMORY OFFSET:     -0x10     -16  >>-8

0xf08d:	mov rax, qword ptr [rip + 0x2237c]   #	for (i = previous_point; i < il|-|>point; i++)
MEMORY OFFSET:     0x2237c     140156  >>140164

0xf094:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf098:	cmp qword ptr [rbp - 0x10], rax      #	for (i = previous_point; i |<| il->point; i++)
MEMORY OFFSET:     -0x10     -16  >>-8

0xf09c:	jb 0xf053                            
0xf09e:	mov rax, qword ptr [rip + 0x2236b]   #	il|-|>last_operation = IL_DOWNCASE_WORD;
MEMORY OFFSET:     0x2236b     140139  >>140147

0xf0a5:	mov dword ptr [rax + 0x10], 0x12     #	il->last_operation |=| IL_DOWNCASE_WORD;
MEMORY OFFSET:     0x10     16  >>24

0xf0ac:	nop                                  #|}|
0xf0ad:	leave                                
0xf0ae:	ret                                  
0xf0af:	endbr64                              #|{|
0xf0b3:	push rbp                             
0xf0b4:	mov rbp, rsp                         
0xf0b7:	sub rsp, 0x10                        
0xf0bb:	mov rax, qword ptr [rip + 0x2234e]   #    if (il|-|>point < il->length)
MEMORY OFFSET:     0x2234e     140110  >>140118

0xf0c2:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf0c6:	mov rax, qword ptr [rip + 0x22343]   #    if (il->point < il|-|>length)
MEMORY OFFSET:     0x22343     140099  >>140107

0xf0cd:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xf0d1:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xf0d4:	jae 0xf152                           
0xf0d6:	mov rax, qword ptr [rip + 0x22333]   #	size_t previous_point = il|-|>point;
MEMORY OFFSET:     0x22333     140083  >>140091

0xf0dd:	mov rax, qword ptr [rax + 0x18]      #	size_t |p|revious_point = il->point;
MEMORY OFFSET:     0x18     24  >>32

0xf0e1:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xf0e5:	mov eax, 0                           #	|i|l_forward_word();
0xf0ea:	call 0xe655                          
0xf0ef:	mov rax, qword ptr [rbp - 8]         #	for (i |=| previous_point; i < il->point; i++)
MEMORY OFFSET:     -0x8     -8  >>0

0xf0f3:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xf0f7:	jmp 0xf133                           #	|f|or (i = previous_point; i < il->point; i++)
0xf0f9:	mov rax, qword ptr [rip + 0x22310]   #	    il->buffer[i] = toupper((int)il|-|>buffer[i]);
MEMORY OFFSET:     0x22310     140048  >>140056

0xf100:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf104:	mov rax, qword ptr [rbp - 0x10]      #	    il->buffer[i] = toupper((int)il->buffer|[|i]);
MEMORY OFFSET:     -0x10     -16  >>-8

0xf108:	add rax, rdx                         
0xf10b:	movzx eax, byte ptr [rax]            
0xf10e:	movsx eax, al                        #	    il->buffer[i] = |t|oupper((int)il->buffer[i]);
0xf111:	mov edi, eax                         
0xf113:	call 0x4890                          
0xf118:	mov edx, eax                         
0xf11a:	mov rax, qword ptr [rip + 0x222ef]   #	    il|-|>buffer[i] = toupper((int)il->buffer[i]);
MEMORY OFFSET:     0x222ef     140015  >>140023

0xf121:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf125:	mov rax, qword ptr [rbp - 0x10]      #	    il->buffer|[|i] = toupper((int)il->buffer[i]);
MEMORY OFFSET:     -0x10     -16  >>-8

0xf129:	add rax, rcx                         
0xf12c:	mov byte ptr [rax], dl               #	    il->buffer[i] |=| toupper((int)il->buffer[i]);
0xf12e:	add qword ptr [rbp - 0x10], 1        #	for (i = previous_point; i < il->point; i|+|+)
MEMORY OFFSET:     -0x10     -16  >>-8

0xf133:	mov rax, qword ptr [rip + 0x222d6]   #	for (i = previous_point; i < il|-|>point; i++)
MEMORY OFFSET:     0x222d6     139990  >>139998

0xf13a:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf13e:	cmp qword ptr [rbp - 0x10], rax      #	for (i = previous_point; i |<| il->point; i++)
MEMORY OFFSET:     -0x10     -16  >>-8

0xf142:	jb 0xf0f9                            
0xf144:	mov rax, qword ptr [rip + 0x222c5]   #	il|-|>last_operation = IL_UPCASE_WORD;
MEMORY OFFSET:     0x222c5     139973  >>139981

0xf14b:	mov dword ptr [rax + 0x10], 0x13     #	il->last_operation |=| IL_UPCASE_WORD;
MEMORY OFFSET:     0x10     16  >>24

0xf152:	nop                                  #|}|
0xf153:	leave                                
0xf154:	ret                                  
0xf155:	endbr64                              #|{|
0xf159:	push rbp                             
0xf15a:	mov rbp, rsp                         
0xf15d:	sub rsp, 0x20                        
0xf161:	mov rax, qword ptr [rip + 0x222a8]   #    if (il|-|>point < il->length)
MEMORY OFFSET:     0x222a8     139944  >>139952

0xf168:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf16c:	mov rax, qword ptr [rip + 0x2229d]   #    if (il->point < il|-|>length)
MEMORY OFFSET:     0x2229d     139933  >>139941

0xf173:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xf177:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xf17a:	jae 0xf282                           
0xf180:	mov dword ptr [rbp - 0x14], 1        #	int |f|irst = 1;
MEMORY OFFSET:     -0x14     -20  >>-12

0xf187:	mov rax, qword ptr [rip + 0x22282]   #	size_t previous_point = il|-|>point;
MEMORY OFFSET:     0x22282     139906  >>139914

0xf18e:	mov rax, qword ptr [rax + 0x18]      #	size_t |p|revious_point = il->point;
MEMORY OFFSET:     0x18     24  >>32

0xf192:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xf196:	mov eax, 0                           #	|i|l_forward_word();
0xf19b:	call 0xe655                          
0xf1a0:	mov rax, qword ptr [rbp - 8]         #	for (i |=| previous_point; i < il->point; i++)
MEMORY OFFSET:     -0x8     -8  >>0

0xf1a4:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xf1a8:	jmp 0xf25f                           #	|f|or (i = previous_point; i < il->point; i++)
0xf1ad:	call 0x4ec0                          #	    if (|i|salnum((int)il->buffer[i]))
0xf1b2:	mov rdx, qword ptr [rax]             
0xf1b5:	mov rax, qword ptr [rip + 0x22254]   
MEMORY OFFSET:     0x22254     139860  >>139868

0xf1bc:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf1c0:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xf1c4:	add rax, rcx                         
0xf1c7:	movzx eax, byte ptr [rax]            
0xf1ca:	movsx rax, al                        
0xf1ce:	add rax, rax                         
0xf1d1:	add rax, rdx                         
0xf1d4:	movzx eax, word ptr [rax]            
0xf1d7:	movzx eax, ax                        
0xf1da:	and eax, 8                           
0xf1dd:	test eax, eax                        #	    if |(|isalnum((int)il->buffer[i]))
0xf1df:	je 0xf25a                            
0xf1e1:	cmp dword ptr [rbp - 0x14], 0        #		if |(|first)
MEMORY OFFSET:     -0x14     -20  >>-12

0xf1e5:	je 0xf225                            
0xf1e7:	mov rax, qword ptr [rip + 0x22222]   #		    il->buffer[i] = toupper((int)il|-|>buffer[i]);
MEMORY OFFSET:     0x22222     139810  >>139818

0xf1ee:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf1f2:	mov rax, qword ptr [rbp - 0x10]      #		    il->buffer[i] = toupper((int)il->buffer|[|i]);
MEMORY OFFSET:     -0x10     -16  >>-8

0xf1f6:	add rax, rdx                         
0xf1f9:	movzx eax, byte ptr [rax]            
0xf1fc:	movsx eax, al                        #		    il->buffer[i] = |t|oupper((int)il->buffer[i]);
0xf1ff:	mov edi, eax                         
0xf201:	call 0x4890                          
0xf206:	mov edx, eax                         
0xf208:	mov rax, qword ptr [rip + 0x22201]   #		    il|-|>buffer[i] = toupper((int)il->buffer[i]);
MEMORY OFFSET:     0x22201     139777  >>139785

0xf20f:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf213:	mov rax, qword ptr [rbp - 0x10]      #		    il->buffer|[|i] = toupper((int)il->buffer[i]);
MEMORY OFFSET:     -0x10     -16  >>-8

0xf217:	add rax, rcx                         
0xf21a:	mov byte ptr [rax], dl               #		    il->buffer[i] |=| toupper((int)il->buffer[i]);
0xf21c:	mov dword ptr [rbp - 0x14], 0        #		    first |=| 0;
MEMORY OFFSET:     -0x14     -20  >>-12

0xf223:	jmp 0xf25a                           
0xf225:	mov rax, qword ptr [rip + 0x221e4]   #		    il->buffer[i] = tolower((int)il|-|>buffer[i]);
MEMORY OFFSET:     0x221e4     139748  >>139756

0xf22c:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf230:	mov rax, qword ptr [rbp - 0x10]      #		    il->buffer[i] = tolower((int)il->buffer|[|i]);
MEMORY OFFSET:     -0x10     -16  >>-8

0xf234:	add rax, rdx                         
0xf237:	movzx eax, byte ptr [rax]            
0xf23a:	movsx eax, al                        #		    il->buffer[i] = |t|olower((int)il->buffer[i]);
0xf23d:	mov edi, eax                         
0xf23f:	call 0x4be0                          
0xf244:	mov edx, eax                         
0xf246:	mov rax, qword ptr [rip + 0x221c3]   #		    il|-|>buffer[i] = tolower((int)il->buffer[i]);
MEMORY OFFSET:     0x221c3     139715  >>139723

0xf24d:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf251:	mov rax, qword ptr [rbp - 0x10]      #		    il->buffer|[|i] = tolower((int)il->buffer[i]);
MEMORY OFFSET:     -0x10     -16  >>-8

0xf255:	add rax, rcx                         
0xf258:	mov byte ptr [rax], dl               #		    il->buffer[i] |=| tolower((int)il->buffer[i]);
0xf25a:	add qword ptr [rbp - 0x10], 1        #	for (i = previous_point; i < il->point; i|+|+)
MEMORY OFFSET:     -0x10     -16  >>-8

0xf25f:	mov rax, qword ptr [rip + 0x221aa]   #	for (i = previous_point; i < il|-|>point; i++)
MEMORY OFFSET:     0x221aa     139690  >>139698

0xf266:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf26a:	cmp qword ptr [rbp - 0x10], rax      #	for (i = previous_point; i |<| il->point; i++)
MEMORY OFFSET:     -0x10     -16  >>-8

0xf26e:	jb 0xf1ad                            
0xf274:	mov rax, qword ptr [rip + 0x22195]   #	il|-|>last_operation = IL_CAPITALIZE_WORD;
MEMORY OFFSET:     0x22195     139669  >>139677

0xf27b:	mov dword ptr [rax + 0x10], 0x14     #	il->last_operation |=| IL_CAPITALIZE_WORD;
MEMORY OFFSET:     0x10     16  >>24

0xf282:	nop                                  #|}|
0xf283:	leave                                
0xf284:	ret                                  
0xf285:	endbr64                              #|{|
0xf289:	push rbp                             
0xf28a:	mov rbp, rsp                         
0xf28d:	push rbx                             
0xf28e:	sub rsp, 0x28                        
0xf292:	mov qword ptr [rbp - 0x28], rdi      
MEMORY OFFSET:     -0x28     -40  >>-32

0xf296:	mov rax, qword ptr [rbp - 0x28]      #    len = |s|trlen(static_text);
MEMORY OFFSET:     -0x28     -40  >>-32

0xf29a:	mov rdi, rax                         
0xf29d:	call 0x4960                          
0xf2a2:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf2a6:	mov rax, qword ptr [rip + 0x22163]   #    il->point |+|= len - il->static_length;
MEMORY OFFSET:     0x22163     139619  >>139627

0xf2ad:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf2b1:	mov rax, qword ptr [rip + 0x22158]   #    il->point += len - il|-|>static_length;
MEMORY OFFSET:     0x22158     139608  >>139616

0xf2b8:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf2bc:	mov rax, qword ptr [rbp - 0x18]      #    il->point += len |-| il->static_length;
MEMORY OFFSET:     -0x18     -24  >>-16

0xf2c0:	sub rax, rcx                         
0xf2c3:	mov rsi, rax                         
0xf2c6:	mov rax, qword ptr [rip + 0x22143]   #    il->point |+|= len - il->static_length;
MEMORY OFFSET:     0x22143     139587  >>139595

0xf2cd:	add rdx, rsi                         
0xf2d0:	mov qword ptr [rax + 0x18], rdx      
MEMORY OFFSET:     0x18     24  >>32

0xf2d4:	mov rax, qword ptr [rip + 0x22135]   #    il->mark  |+|= len - il->static_length;
MEMORY OFFSET:     0x22135     139573  >>139581

0xf2db:	mov rdx, qword ptr [rax + 0x20]      
MEMORY OFFSET:     0x20     32  >>40

0xf2df:	mov rax, qword ptr [rip + 0x2212a]   #    il->mark  += len - il|-|>static_length;
MEMORY OFFSET:     0x2212a     139562  >>139570

0xf2e6:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf2ea:	mov rax, qword ptr [rbp - 0x18]      #    il->mark  += len |-| il->static_length;
MEMORY OFFSET:     -0x18     -24  >>-16

0xf2ee:	sub rax, rcx                         
0xf2f1:	mov rsi, rax                         
0xf2f4:	mov rax, qword ptr [rip + 0x22115]   #    il->mark  |+|= len - il->static_length;
MEMORY OFFSET:     0x22115     139541  >>139549

0xf2fb:	add rdx, rsi                         
0xf2fe:	mov qword ptr [rax + 0x20], rdx      
MEMORY OFFSET:     0x20     32  >>40

0xf302:	mov rax, qword ptr [rip + 0x22107]   #    if (len + il|-|>dynamic_length + 1 > il->size)
MEMORY OFFSET:     0x22107     139527  >>139535

0xf309:	mov rdx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xf30d:	mov rax, qword ptr [rbp - 0x18]      #    if (len |+| il->dynamic_length + 1 > il->size)
MEMORY OFFSET:     -0x18     -24  >>-16

0xf311:	add rax, rdx                         
0xf314:	lea rdx, [rax + 1]                   #    if (len + il->dynamic_length |+| 1 > il->size)
MEMORY OFFSET:     0x1     1  >>9

0xf318:	mov rax, qword ptr [rip + 0x220f1]   #    if (len + il->dynamic_length + 1 > il|-|>size)
MEMORY OFFSET:     0x220f1     139505  >>139513

0xf31f:	mov rax, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xf323:	cmp rdx, rax                         #    if |(|len + il->dynamic_length + 1 > il->size)
0xf326:	jbe 0xf375                           
0xf328:	mov rax, qword ptr [rip + 0x220e1]   #	|I|L_RESIZE(len + il->dynamic_length + 1);
MEMORY OFFSET:     0x220e1     139489  >>139497

0xf32f:	mov rdx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xf333:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf337:	add rdx, rax                         
0xf33a:	mov rax, qword ptr [rip + 0x220cf]   
MEMORY OFFSET:     0x220cf     139471  >>139479

0xf341:	add rdx, 1                           
0xf345:	mov qword ptr [rax + 0x50], rdx      
MEMORY OFFSET:     0x50     80  >>88

0xf349:	mov rax, qword ptr [rip + 0x220c0]   
MEMORY OFFSET:     0x220c0     139456  >>139464

0xf350:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xf354:	mov rax, qword ptr [rip + 0x220b5]   
MEMORY OFFSET:     0x220b5     139445  >>139453

0xf35b:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf35f:	mov rbx, qword ptr [rip + 0x220aa]   
MEMORY OFFSET:     0x220aa     139434  >>139442

0xf366:	mov rsi, rdx                         
0xf369:	mov rdi, rax                         
0xf36c:	call 0x24670                         
0xf371:	mov qword ptr [rbx + 0x58], rax      
MEMORY OFFSET:     0x58     88  >>96

0xf375:	mov rax, qword ptr [rip + 0x22094]   #	    il|-|>dynamic_length + 1);
MEMORY OFFSET:     0x22094     139412  >>139420

0xf37c:	mov rax, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xf380:	lea rdx, [rax + 1]                   #    |m|emmove(il->buffer + len,
MEMORY OFFSET:     0x1     1  >>9

0xf384:	mov rax, qword ptr [rip + 0x22085]   #	    il|-|>buffer + il->static_length,
MEMORY OFFSET:     0x22085     139397  >>139405

0xf38b:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf38f:	mov rax, qword ptr [rip + 0x2207a]   #	    il->buffer + il|-|>static_length,
MEMORY OFFSET:     0x2207a     139386  >>139394

0xf396:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf39a:	add rcx, rax                         #	    il->buffer |+| il->static_length,
0xf39d:	mov rax, qword ptr [rip + 0x2206c]   #    memmove(il|-|>buffer + len,
MEMORY OFFSET:     0x2206c     139372  >>139380

0xf3a4:	mov rsi, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf3a8:	mov rax, qword ptr [rbp - 0x18]      #    memmove(il->buffer |+| len,
MEMORY OFFSET:     -0x18     -24  >>-16

0xf3ac:	add rax, rsi                         
0xf3af:	mov rsi, rcx                         #    |m|emmove(il->buffer + len,
0xf3b2:	mov rdi, rax                         
0xf3b5:	call 0x4cf0                          
0xf3ba:	mov rax, qword ptr [rip + 0x2204f]   #    memcpy(il|-|>buffer, static_text, len);
MEMORY OFFSET:     0x2204f     139343  >>139351

0xf3c1:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf3c5:	mov rdx, qword ptr [rbp - 0x18]      #    |m|emcpy(il->buffer, static_text, len);
MEMORY OFFSET:     -0x18     -24  >>-16

0xf3c9:	mov rcx, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0xf3cd:	mov rsi, rcx                         
0xf3d0:	mov rdi, rax                         
0xf3d3:	call 0x4b70                          
0xf3d8:	mov rax, qword ptr [rip + 0x22031]   #    toprintable(il|-|>buffer, len);
MEMORY OFFSET:     0x22031     139313  >>139321

0xf3df:	mov rax, qword ptr [rax + 0x58]      #    |t|oprintable(il->buffer, len);
MEMORY OFFSET:     0x58     88  >>96

0xf3e3:	mov rdx, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf3e7:	mov rsi, rdx                         
0xf3ea:	mov rdi, rax                         
0xf3ed:	call 0x1e5b1                         
0xf3f2:	mov rax, qword ptr [rip + 0x22017]   #    il->length = (il|-|>static_length = len) + il->dynamic_length;
MEMORY OFFSET:     0x22017     139287  >>139295

0xf3f9:	mov rdx, qword ptr [rbp - 0x18]      #    il->length = (il->static_length |=| len) + il->dynamic_length;
MEMORY OFFSET:     -0x18     -24  >>-16

0xf3fd:	mov qword ptr [rax + 0x40], rdx      
MEMORY OFFSET:     0x40     64  >>72

0xf401:	mov rcx, qword ptr [rax + 0x40]      #    il->length = (il|-|>static_length = len) + il->dynamic_length;
MEMORY OFFSET:     0x40     64  >>72

0xf405:	mov rax, qword ptr [rip + 0x22004]   #    il->length = (il->static_length = len) + il|-|>dynamic_length;
MEMORY OFFSET:     0x22004     139268  >>139276

0xf40c:	mov rdx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xf410:	mov rax, qword ptr [rip + 0x21ff9]   #    il|-|>length = (il->static_length = len) + il->dynamic_length;
MEMORY OFFSET:     0x21ff9     139257  >>139265

0xf417:	add rdx, rcx                         #    il->length = (il->static_length = len) |+| il->dynamic_length;
0xf41a:	mov qword ptr [rax + 0x38], rdx      #    il->length |=| (il->static_length = len) + il->dynamic_length;
MEMORY OFFSET:     0x38     56  >>64

0xf41e:	mov rax, qword ptr [rip + 0x21feb]   #    il|-|>last_operation = IL_SET_STATIC_TEXT;
MEMORY OFFSET:     0x21feb     139243  >>139251

0xf425:	mov dword ptr [rax + 0x10], 0x15     #    il->last_operation |=| IL_SET_STATIC_TEXT;
MEMORY OFFSET:     0x10     16  >>24

0xf42c:	nop                                  #|}|
0xf42d:	mov rbx, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xf431:	leave                                
0xf432:	ret                                  
0xf433:	endbr64                              #|{|
0xf437:	push rbp                             
0xf438:	mov rbp, rsp                         
0xf43b:	push rbx                             
0xf43c:	sub rsp, 0x28                        
0xf440:	mov qword ptr [rbp - 0x28], rdi      
MEMORY OFFSET:     -0x28     -40  >>-32

0xf444:	cmp qword ptr [rbp - 0x28], 0        #    if |(|text == NULL)
MEMORY OFFSET:     -0x28     -40  >>-32

0xf449:	je 0xf5f2                            
0xf44f:	mov rax, qword ptr [rbp - 0x28]      #    len = |s|trlen(text);
MEMORY OFFSET:     -0x28     -40  >>-32

0xf453:	mov rdi, rax                         
0xf456:	call 0x4960                          
0xf45b:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf45f:	mov rax, qword ptr [rip + 0x21faa]   #    if (il|-|>length + len + 1 > il->size)
MEMORY OFFSET:     0x21faa     139178  >>139186

0xf466:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xf46a:	mov rax, qword ptr [rbp - 0x18]      #    if (il->length |+| len + 1 > il->size)
MEMORY OFFSET:     -0x18     -24  >>-16

0xf46e:	add rax, rdx                         
0xf471:	lea rdx, [rax + 1]                   #    if (il->length + len |+| 1 > il->size)
MEMORY OFFSET:     0x1     1  >>9

0xf475:	mov rax, qword ptr [rip + 0x21f94]   #    if (il->length + len + 1 > il|-|>size)
MEMORY OFFSET:     0x21f94     139156  >>139164

0xf47c:	mov rax, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xf480:	cmp rdx, rax                         #    if |(|il->length + len + 1 > il->size)
0xf483:	jbe 0xf4d2                           
0xf485:	mov rax, qword ptr [rip + 0x21f84]   #	|I|L_RESIZE(il->size + len + 1 + 32);
MEMORY OFFSET:     0x21f84     139140  >>139148

0xf48c:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xf490:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf494:	add rdx, rax                         
0xf497:	mov rax, qword ptr [rip + 0x21f72]   
MEMORY OFFSET:     0x21f72     139122  >>139130

0xf49e:	add rdx, 0x21                        
0xf4a2:	mov qword ptr [rax + 0x50], rdx      
MEMORY OFFSET:     0x50     80  >>88

0xf4a6:	mov rax, qword ptr [rip + 0x21f63]   
MEMORY OFFSET:     0x21f63     139107  >>139115

0xf4ad:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xf4b1:	mov rax, qword ptr [rip + 0x21f58]   
MEMORY OFFSET:     0x21f58     139096  >>139104

0xf4b8:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf4bc:	mov rbx, qword ptr [rip + 0x21f4d]   
MEMORY OFFSET:     0x21f4d     139085  >>139093

0xf4c3:	mov rsi, rdx                         
0xf4c6:	mov rdi, rax                         
0xf4c9:	call 0x24670                         
0xf4ce:	mov qword ptr [rbx + 0x58], rax      
MEMORY OFFSET:     0x58     88  >>96

0xf4d2:	mov rax, qword ptr [rip + 0x21f37]   #	    il|-|>length - il->point + 1);
MEMORY OFFSET:     0x21f37     139063  >>139071

0xf4d9:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xf4dd:	mov rax, qword ptr [rip + 0x21f2c]   #	    il->length - il|-|>point + 1);
MEMORY OFFSET:     0x21f2c     139052  >>139060

0xf4e4:	mov rcx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf4e8:	mov rax, rdx                         #	    il->length |-| il->point + 1);
0xf4eb:	sub rax, rcx                         
0xf4ee:	lea rdx, [rax + 1]                   #    |m|emmove(il->buffer + il->point + len,
MEMORY OFFSET:     0x1     1  >>9

0xf4f2:	mov rax, qword ptr [rip + 0x21f17]   #	    il|-|>buffer + il->point,
MEMORY OFFSET:     0x21f17     139031  >>139039

0xf4f9:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf4fd:	mov rax, qword ptr [rip + 0x21f0c]   #	    il->buffer + il|-|>point,
MEMORY OFFSET:     0x21f0c     139020  >>139028

0xf504:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf508:	add rcx, rax                         #	    il->buffer |+| il->point,
0xf50b:	mov rax, qword ptr [rip + 0x21efe]   #    memmove(il|-|>buffer + il->point + len,
MEMORY OFFSET:     0x21efe     139006  >>139014

0xf512:	mov rsi, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf516:	mov rax, qword ptr [rip + 0x21ef3]   #    memmove(il->buffer + il|-|>point + len,
MEMORY OFFSET:     0x21ef3     138995  >>139003

0xf51d:	mov rdi, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf521:	mov rax, qword ptr [rbp - 0x18]      #    memmove(il->buffer + il->point |+| len,
MEMORY OFFSET:     -0x18     -24  >>-16

0xf525:	add rax, rdi                         
0xf528:	add rax, rsi                         
0xf52b:	mov rsi, rcx                         #    |m|emmove(il->buffer + il->point + len,
0xf52e:	mov rdi, rax                         
0xf531:	call 0x4cf0                          
0xf536:	mov rax, qword ptr [rip + 0x21ed3]   #    memcpy(il|-|>buffer + il->point, text, len);
MEMORY OFFSET:     0x21ed3     138963  >>138971

0xf53d:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf541:	mov rax, qword ptr [rip + 0x21ec8]   #    memcpy(il->buffer + il|-|>point, text, len);
MEMORY OFFSET:     0x21ec8     138952  >>138960

0xf548:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf54c:	lea rcx, [rdx + rax]                 #    memcpy(il->buffer |+| il->point, text, len);
0xf550:	mov rdx, qword ptr [rbp - 0x18]      #    |m|emcpy(il->buffer + il->point, text, len);
MEMORY OFFSET:     -0x18     -24  >>-16

0xf554:	mov rax, qword ptr [rbp - 0x28]      
MEMORY OFFSET:     -0x28     -40  >>-32

0xf558:	mov rsi, rax                         
0xf55b:	mov rdi, rcx                         
0xf55e:	call 0x4b70                          
0xf563:	mov rax, qword ptr [rip + 0x21ea6]   #    toprintable(il|-|>buffer + il->point, len);
MEMORY OFFSET:     0x21ea6     138918  >>138926

0xf56a:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf56e:	mov rax, qword ptr [rip + 0x21e9b]   #    toprintable(il->buffer + il|-|>point, len);
MEMORY OFFSET:     0x21e9b     138907  >>138915

0xf575:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf579:	add rdx, rax                         #    |t|oprintable(il->buffer + il->point, len);
0xf57c:	mov rax, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf580:	mov rsi, rax                         
0xf583:	mov rdi, rdx                         
0xf586:	call 0x1e5b1                         
0xf58b:	mov rax, qword ptr [rip + 0x21e7e]   #    il->point          |+|= len;
MEMORY OFFSET:     0x21e7e     138878  >>138886

0xf592:	mov rcx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf596:	mov rax, qword ptr [rip + 0x21e73]   
MEMORY OFFSET:     0x21e73     138867  >>138875

0xf59d:	mov rdx, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf5a1:	add rdx, rcx                         
0xf5a4:	mov qword ptr [rax + 0x18], rdx      
MEMORY OFFSET:     0x18     24  >>32

0xf5a8:	mov rax, qword ptr [rip + 0x21e61]   #    il->length         |+|= len;
MEMORY OFFSET:     0x21e61     138849  >>138857

0xf5af:	mov rcx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xf5b3:	mov rax, qword ptr [rip + 0x21e56]   
MEMORY OFFSET:     0x21e56     138838  >>138846

0xf5ba:	mov rdx, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf5be:	add rdx, rcx                         
0xf5c1:	mov qword ptr [rax + 0x38], rdx      
MEMORY OFFSET:     0x38     56  >>64

0xf5c5:	mov rax, qword ptr [rip + 0x21e44]   #    il->dynamic_length |+|= len;
MEMORY OFFSET:     0x21e44     138820  >>138828

0xf5cc:	mov rcx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xf5d0:	mov rax, qword ptr [rip + 0x21e39]   
MEMORY OFFSET:     0x21e39     138809  >>138817

0xf5d7:	mov rdx, qword ptr [rbp - 0x18]      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf5db:	add rdx, rcx                         
0xf5de:	mov qword ptr [rax + 0x48], rdx      
MEMORY OFFSET:     0x48     72  >>80

0xf5e2:	mov rax, qword ptr [rip + 0x21e27]   #    il|-|>last_operation = IL_INSERT_TEXT;
MEMORY OFFSET:     0x21e27     138791  >>138799

0xf5e9:	mov dword ptr [rax + 0x10], 0x16     #    il->last_operation |=| IL_INSERT_TEXT;
MEMORY OFFSET:     0x10     16  >>24

0xf5f0:	jmp 0xf5f3                           
0xf5f2:	nop                                  #	|r|eturn;
0xf5f3:	mov rbx, qword ptr [rbp - 8]         #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0xf5f7:	leave                                
0xf5f8:	ret                                  
0xf5f9:	endbr64                              #|{|
0xf5fd:	push rbp                             
0xf5fe:	mov rbp, rsp                         
0xf601:	mov rax, qword ptr [rip + 0x21e08]   #    int normal_static_length = il|-|>static_length;
MEMORY OFFSET:     0x21e08     138760  >>138768

0xf608:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf60c:	mov dword ptr [rbp - 4], eax         #    int |n|ormal_static_length = il->static_length;
MEMORY OFFSET:     -0x4     -4  >>4

0xf60f:	mov rax, qword ptr [rip + 0x21dfa]   #    il->buffer |+|= il->static_length;
MEMORY OFFSET:     0x21dfa     138746  >>138754

0xf616:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf61a:	mov rax, qword ptr [rip + 0x21def]   #    il->buffer += il|-|>static_length;
MEMORY OFFSET:     0x21def     138735  >>138743

0xf621:	mov rdx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf625:	mov rax, qword ptr [rip + 0x21de4]   #    il->buffer |+|= il->static_length;
MEMORY OFFSET:     0x21de4     138724  >>138732

0xf62c:	add rdx, rcx                         
0xf62f:	mov qword ptr [rax + 0x58], rdx      
MEMORY OFFSET:     0x58     88  >>96

0xf633:	mov rax, qword ptr [rip + 0x21dd6]   #    il->length |-|= il->static_length;
MEMORY OFFSET:     0x21dd6     138710  >>138718

0xf63a:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xf63e:	mov rax, qword ptr [rip + 0x21dcb]   #    il->length -= il|-|>static_length;
MEMORY OFFSET:     0x21dcb     138699  >>138707

0xf645:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf649:	mov rax, qword ptr [rip + 0x21dc0]   #    il->length |-|= il->static_length;
MEMORY OFFSET:     0x21dc0     138688  >>138696

0xf650:	sub rdx, rcx                         
0xf653:	mov qword ptr [rax + 0x38], rdx      
MEMORY OFFSET:     0x38     56  >>64

0xf657:	mov rax, qword ptr [rip + 0x21db2]   #    il->point |-|= il->static_length;
MEMORY OFFSET:     0x21db2     138674  >>138682

0xf65e:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf662:	mov rax, qword ptr [rip + 0x21da7]   #    il->point -= il|-|>static_length;
MEMORY OFFSET:     0x21da7     138663  >>138671

0xf669:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf66d:	mov rax, qword ptr [rip + 0x21d9c]   #    il->point |-|= il->static_length;
MEMORY OFFSET:     0x21d9c     138652  >>138660

0xf674:	sub rdx, rcx                         
0xf677:	mov qword ptr [rax + 0x18], rdx      
MEMORY OFFSET:     0x18     24  >>32

0xf67b:	mov rax, qword ptr [rip + 0x21d8e]   #    il->mark |-|= il->static_length;
MEMORY OFFSET:     0x21d8e     138638  >>138646

0xf682:	mov rdx, qword ptr [rax + 0x20]      
MEMORY OFFSET:     0x20     32  >>40

0xf686:	mov rax, qword ptr [rip + 0x21d83]   #    il->mark -= il|-|>static_length;
MEMORY OFFSET:     0x21d83     138627  >>138635

0xf68d:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf691:	mov rax, qword ptr [rip + 0x21d78]   #    il->mark |-|= il->static_length;
MEMORY OFFSET:     0x21d78     138616  >>138624

0xf698:	sub rdx, rcx                         
0xf69b:	mov qword ptr [rax + 0x20], rdx      
MEMORY OFFSET:     0x20     32  >>40

0xf69f:	mov rax, qword ptr [rip + 0x21d6a]   #    il|-|>static_length = 0;
MEMORY OFFSET:     0x21d6a     138602  >>138610

0xf6a6:	mov qword ptr [rax + 0x40], 0        #    il->static_length |=| 0;
MEMORY OFFSET:     0x40     64  >>72

0xf6ae:	mov eax, dword ptr [rbp - 4]         #    return |n|ormal_static_length;
MEMORY OFFSET:     -0x4     -4  >>4

0xf6b1:	pop rbp                              #|}|
0xf6b2:	ret                                  
0xf6b3:	endbr64                              #|{|
0xf6b7:	push rbp                             
0xf6b8:	mov rbp, rsp                         
0xf6bb:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xf6be:	mov rax, qword ptr [rip + 0x21d4b]   #    il|-|>static_length = normal_static_length;
MEMORY OFFSET:     0x21d4b     138571  >>138579

0xf6c5:	mov edx, dword ptr [rbp - 4]         #    il->static_length |=| normal_static_length;
MEMORY OFFSET:     -0x4     -4  >>4

0xf6c8:	movsxd rdx, edx                      
0xf6cb:	mov qword ptr [rax + 0x40], rdx      
MEMORY OFFSET:     0x40     64  >>72

0xf6cf:	mov rax, qword ptr [rip + 0x21d3a]   #    il->buffer |-|= il->static_length;
MEMORY OFFSET:     0x21d3a     138554  >>138562

0xf6d6:	mov rdx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xf6da:	mov rax, qword ptr [rip + 0x21d2f]   #    il->buffer -= il|-|>static_length;
MEMORY OFFSET:     0x21d2f     138543  >>138551

0xf6e1:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf6e5:	neg rax                              #    il->buffer |-|= il->static_length;
0xf6e8:	mov rcx, rax                         
0xf6eb:	mov rax, qword ptr [rip + 0x21d1e]   
MEMORY OFFSET:     0x21d1e     138526  >>138534

0xf6f2:	add rdx, rcx                         
0xf6f5:	mov qword ptr [rax + 0x58], rdx      
MEMORY OFFSET:     0x58     88  >>96

0xf6f9:	mov rax, qword ptr [rip + 0x21d10]   #    il->length |+|= il->static_length;
MEMORY OFFSET:     0x21d10     138512  >>138520

0xf700:	mov rcx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xf704:	mov rax, qword ptr [rip + 0x21d05]   #    il->length += il|-|>static_length;
MEMORY OFFSET:     0x21d05     138501  >>138509

0xf70b:	mov rdx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf70f:	mov rax, qword ptr [rip + 0x21cfa]   #    il->length |+|= il->static_length;
MEMORY OFFSET:     0x21cfa     138490  >>138498

0xf716:	add rdx, rcx                         
0xf719:	mov qword ptr [rax + 0x38], rdx      
MEMORY OFFSET:     0x38     56  >>64

0xf71d:	mov rax, qword ptr [rip + 0x21cec]   #    il->point |+|= il->static_length;
MEMORY OFFSET:     0x21cec     138476  >>138484

0xf724:	mov rcx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf728:	mov rax, qword ptr [rip + 0x21ce1]   #    il->point += il|-|>static_length;
MEMORY OFFSET:     0x21ce1     138465  >>138473

0xf72f:	mov rdx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf733:	mov rax, qword ptr [rip + 0x21cd6]   #    il->point |+|= il->static_length;
MEMORY OFFSET:     0x21cd6     138454  >>138462

0xf73a:	add rdx, rcx                         
0xf73d:	mov qword ptr [rax + 0x18], rdx      
MEMORY OFFSET:     0x18     24  >>32

0xf741:	mov rax, qword ptr [rip + 0x21cc8]   #    il->mark |+|= il->static_length;
MEMORY OFFSET:     0x21cc8     138440  >>138448

0xf748:	mov rcx, qword ptr [rax + 0x20]      
MEMORY OFFSET:     0x20     32  >>40

0xf74c:	mov rax, qword ptr [rip + 0x21cbd]   #    il->mark += il|-|>static_length;
MEMORY OFFSET:     0x21cbd     138429  >>138437

0xf753:	mov rdx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf757:	mov rax, qword ptr [rip + 0x21cb2]   #    il->mark |+|= il->static_length;
MEMORY OFFSET:     0x21cb2     138418  >>138426

0xf75e:	add rdx, rcx                         
0xf761:	mov qword ptr [rax + 0x20], rdx      
MEMORY OFFSET:     0x20     32  >>40

0xf765:	nop                                  #|}|
0xf766:	pop rbp                              
0xf767:	ret                                  
0xf768:	endbr64                              #|{|
0xf76c:	push rbp                             
0xf76d:	mov rbp, rsp                         
0xf770:	sub rsp, 0x20                        
0xf774:	mov qword ptr [rbp - 0x10], 0        #    size_t |n|ormal_static_length = 0;
MEMORY OFFSET:     -0x10     -16  >>-8

0xf77c:	mov rax, qword ptr [rip + 0x21c8d]   #    int il_too_small = il|-|>columns < il->static_length + 3;
MEMORY OFFSET:     0x21c8d     138381  >>138389

0xf783:	mov rdx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xf787:	mov rax, qword ptr [rip + 0x21c82]   #    int il_too_small = il->columns < il|-|>static_length + 3;
MEMORY OFFSET:     0x21c82     138370  >>138378

0xf78e:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf792:	add rax, 3                           #    int il_too_small = il->columns < il->static_length |+| 3;
0xf796:	cmp rdx, rax                         #    int il_too_small = il->columns |<| il->static_length + 3;
0xf799:	setb al                              
0xf79c:	movzx eax, al                        #    int |i|l_too_small = il->columns < il->static_length + 3;
0xf79f:	mov dword ptr [rbp - 0x18], eax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf7a2:	mov rax, qword ptr [rip + 0x21c67]   #	       il|-|>error ? InputLineErrorBackground : InputLineBackground);
MEMORY OFFSET:     0x21c67     138343  >>138351

0xf7a9:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xf7ac:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7ae:	je 0xf7b8                            
0xf7b0:	mov edx, dword ptr [rip + 0x20aca]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x20aca     133834  >>133842

0xf7b6:	jmp 0xf7be                           
0xf7b8:	mov edx, dword ptr [rip + 0x20ab6]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x20ab6     133814  >>133822

0xf7be:	mov rax, qword ptr [rip + 0x21c4b]   #	       il|-|>error ? InputLineErrorForeground : InputLineForeground,
MEMORY OFFSET:     0x21c4b     138315  >>138323

0xf7c5:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xf7c8:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7ca:	je 0xf7d4                            
0xf7cc:	mov ecx, dword ptr [rip + 0x20aaa]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x20aaa     133802  >>133810

0xf7d2:	jmp 0xf7da                           
0xf7d4:	mov ecx, dword ptr [rip + 0x20a96]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x20a96     133782  >>133790

0xf7da:	mov rax, qword ptr [rip + 0x21c2f]   #    tty_colors(il|-|>error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x21c2f     138287  >>138295

0xf7e1:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xf7e4:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7e6:	je 0xf7f0                            
0xf7e8:	mov eax, dword ptr [rip + 0x20a96]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x20a96     133782  >>133790

0xf7ee:	jmp 0xf7f6                           
0xf7f0:	mov eax, dword ptr [rip + 0x20a82]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x20a82     133762  >>133770

0xf7f6:	mov esi, ecx                         #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7f8:	mov edi, eax                         
0xf7fa:	call 0xbf89                          
0xf7ff:	cmp dword ptr [rbp - 0x18], 0        #    if |(|il_too_small)
MEMORY OFFSET:     -0x18     -24  >>-16

0xf803:	je 0xf815                            
0xf805:	mov eax, 0                           #	normal_static_length = |i|l_hide_static();
0xf80a:	call 0xf5f9                          
0xf80f:	cdqe                                 #	normal_static_length |=| il_hide_static();
0xf811:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xf815:	mov eax, 0                           #    scroll = |i|l_compute_scroll();
0xf81a:	call 0xdf6b                          
0xf81f:	mov dword ptr [rbp - 0x14], eax      #    scroll |=| il_compute_scroll();
MEMORY OFFSET:     -0x14     -20  >>-12

0xf822:	mov rax, qword ptr [rip + 0x21be7]   #    len = ((il|-|>point >= il->columns) ?
MEMORY OFFSET:     0x21be7     138215  >>138223

0xf829:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf82d:	mov rax, qword ptr [rip + 0x21bdc]   #    len = ((il->point >= il|-|>columns) ?
MEMORY OFFSET:     0x21bdc     138204  >>138212

0xf834:	mov rax, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xf838:	cmp rdx, rax                         #	   (scroll - 1) - ((il->point - il->columns) % scroll) |:| 0);
0xf83b:	jb 0xf898                            
0xf83d:	mov rax, qword ptr [rip + 0x21bcc]   #	   il|-|>point - il->columns + 1 +
MEMORY OFFSET:     0x21bcc     138188  >>138196

0xf844:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf848:	mov rax, qword ptr [rip + 0x21bc1]   #	   il->point - il|-|>columns + 1 +
MEMORY OFFSET:     0x21bc1     138177  >>138185

0xf84f:	mov rax, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xf853:	sub rdx, rax                         #	   il->point |-| il->columns + 1 +
0xf856:	mov eax, dword ptr [rbp - 0x14]      #	   (scroll |-| 1) - ((il->point - il->columns) % scroll) : 0);
MEMORY OFFSET:     -0x14     -20  >>-12

0xf859:	sub eax, 1                           
0xf85c:	cdqe                                 
0xf85e:	lea rsi, [rdx + rax]                 #	   il->point - il->columns + 1 |+|
0xf862:	mov rax, qword ptr [rip + 0x21ba7]   #	   (scroll - 1) - ((il|-|>point - il->columns) % scroll) : 0);
MEMORY OFFSET:     0x21ba7     138151  >>138159

0xf869:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf86d:	mov rax, qword ptr [rip + 0x21b9c]   #	   (scroll - 1) - ((il->point - il|-|>columns) % scroll) : 0);
MEMORY OFFSET:     0x21b9c     138140  >>138148

0xf874:	mov rcx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xf878:	mov rax, rdx                         #	   (scroll - 1) - ((il->point |-| il->columns) % scroll) : 0);
0xf87b:	sub rax, rcx                         
0xf87e:	mov edx, dword ptr [rbp - 0x14]      #	   (scroll - 1) - ((il->point - il->columns) |%| scroll) : 0);
MEMORY OFFSET:     -0x14     -20  >>-12

0xf881:	movsxd rcx, edx                      
0xf884:	mov edx, 0                           
0xf889:	div rcx                              
0xf88c:	mov rax, rsi                         #	   (scroll - 1) |-| ((il->point - il->columns) % scroll) : 0);
0xf88f:	sub rax, rdx                         
0xf892:	add rax, 1                           #	   (scroll - 1) - ((il->point - il->columns) % scroll) |:| 0);
0xf896:	jmp 0xf89d                           
0xf898:	mov eax, 0                           #	   (scroll - 1) - ((il->point - il->columns) % scroll) |:| 0);
0xf89d:	mov qword ptr [rbp - 8], rax         #    len |=| ((il->point >= il->columns) ?
MEMORY OFFSET:     -0x8     -8  >>0

0xf8a1:	mov rax, qword ptr [rip + 0x21b68]   #    window_goto(il->window, 0, il|-|>point - len);
MEMORY OFFSET:     0x21b68     138088  >>138096

0xf8a8:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf8ac:	mov edx, eax                         #    window_goto(il->window, 0, il->point |-| len);
0xf8ae:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xf8b2:	mov ecx, eax                         
0xf8b4:	mov eax, edx                         
0xf8b6:	sub eax, ecx                         
0xf8b8:	mov edx, eax                         #    |w|indow_goto(il->window, 0, il->point - len);
0xf8ba:	mov rax, qword ptr [rip + 0x21b4f]   #    window_goto(il|-|>window, 0, il->point - len);
MEMORY OFFSET:     0x21b4f     138063  >>138071

0xf8c1:	mov rax, qword ptr [rax]             #    |w|indow_goto(il->window, 0, il->point - len);
0xf8c4:	mov esi, 0                           
0xf8c9:	mov rdi, rax                         
0xf8cc:	call 0xdc1e                          
0xf8d1:	cmp dword ptr [rbp - 0x18], 0        #    if |(|il_too_small)
MEMORY OFFSET:     -0x18     -24  >>-16

0xf8d5:	je 0xf8e8                            
0xf8d7:	mov rax, qword ptr [rbp - 0x10]      #	|i|l_restore_static(normal_static_length);
MEMORY OFFSET:     -0x10     -16  >>-8

0xf8db:	mov rdi, rax                         
0xf8de:	mov eax, 0                           
0xf8e3:	call 0xf6b3                          
0xf8e8:	nop                                  #|}|
0xf8e9:	leave                                
0xf8ea:	ret                                  
0xf8eb:	endbr64                              #|{|
0xf8ef:	push rbp                             
0xf8f0:	mov rbp, rsp                         
0xf8f3:	sub rsp, 0x30                        
0xf8f7:	mov rax, qword ptr fs:[0x28]         #|{|
MEMORY OFFSET:     0x28     40  >>48

0xf900:	mov qword ptr [rbp - 8], rax         
MEMORY OFFSET:     -0x8     -8  >>0

0xf904:	xor eax, eax                         
0xf906:	mov qword ptr [rbp - 0x18], 0        #    size_t |n|ormal_static_length = 0;
MEMORY OFFSET:     -0x18     -24  >>-16

0xf90e:	mov rax, qword ptr [rip + 0x21afb]   #    int il_too_small = il|-|>columns < il->static_length + 3;
MEMORY OFFSET:     0x21afb     137979  >>137987

0xf915:	mov rdx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xf919:	mov rax, qword ptr [rip + 0x21af0]   #    int il_too_small = il->columns < il|-|>static_length + 3;
MEMORY OFFSET:     0x21af0     137968  >>137976

0xf920:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xf924:	add rax, 3                           #    int il_too_small = il->columns < il->static_length |+| 3;
0xf928:	cmp rdx, rax                         #    int il_too_small = il->columns |<| il->static_length + 3;
0xf92b:	setb al                              
0xf92e:	movzx eax, al                        #    int |i|l_too_small = il->columns < il->static_length + 3;
0xf931:	mov dword ptr [rbp - 0x24], eax      
MEMORY OFFSET:     -0x24     -36  >>-28

0xf934:	lea rax, [rbp - 0x25]                #    |t|ty_save(&status);
MEMORY OFFSET:     -0x25     -37  >>-29

0xf938:	mov rdi, rax                         
0xf93b:	call 0xc04b                          
0xf940:	mov rax, qword ptr [rip + 0x21ac9]   #	       il|-|>error ? InputLineErrorBackground : InputLineBackground);
MEMORY OFFSET:     0x21ac9     137929  >>137937

0xf947:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xf94a:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf94c:	je 0xf956                            
0xf94e:	mov edx, dword ptr [rip + 0x2092c]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x2092c     133420  >>133428

0xf954:	jmp 0xf95c                           
0xf956:	mov edx, dword ptr [rip + 0x20918]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x20918     133400  >>133408

0xf95c:	mov rax, qword ptr [rip + 0x21aad]   #	       il|-|>error ? InputLineErrorForeground : InputLineForeground,
MEMORY OFFSET:     0x21aad     137901  >>137909

0xf963:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xf966:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf968:	je 0xf972                            
0xf96a:	mov ecx, dword ptr [rip + 0x2090c]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x2090c     133388  >>133396

0xf970:	jmp 0xf978                           
0xf972:	mov ecx, dword ptr [rip + 0x208f8]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x208f8     133368  >>133376

0xf978:	mov rax, qword ptr [rip + 0x21a91]   #    tty_colors(il|-|>error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x21a91     137873  >>137881

0xf97f:	mov eax, dword ptr [rax + 0xc]       
MEMORY OFFSET:     0xc     12  >>20

0xf982:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf984:	je 0xf98e                            
0xf986:	mov eax, dword ptr [rip + 0x208f8]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x208f8     133368  >>133376

0xf98c:	jmp 0xf994                           
0xf98e:	mov eax, dword ptr [rip + 0x208e4]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
MEMORY OFFSET:     0x208e4     133348  >>133356

0xf994:	mov esi, ecx                         #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf996:	mov edi, eax                         
0xf998:	call 0xbf89                          
0xf99d:	cmp dword ptr [rbp - 0x24], 0        #    if |(|il_too_small)
MEMORY OFFSET:     -0x24     -36  >>-28

0xf9a1:	je 0xf9b3                            
0xf9a3:	mov eax, 0                           #	normal_static_length = |i|l_hide_static();
0xf9a8:	call 0xf5f9                          
0xf9ad:	cdqe                                 #	normal_static_length |=| il_hide_static();
0xf9af:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xf9b3:	mov eax, 0                           #    scroll = |i|l_compute_scroll();
0xf9b8:	call 0xdf6b                          
0xf9bd:	mov dword ptr [rbp - 0x20], eax      #    scroll |=| il_compute_scroll();
MEMORY OFFSET:     -0x20     -32  >>-24

0xf9c0:	mov rax, qword ptr [rip + 0x21a49]   #    len = ((il|-|>point >= il->columns) ?
MEMORY OFFSET:     0x21a49     137801  >>137809

0xf9c7:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf9cb:	mov rax, qword ptr [rip + 0x21a3e]   #    len = ((il->point >= il|-|>columns) ?
MEMORY OFFSET:     0x21a3e     137790  >>137798

0xf9d2:	mov rax, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xf9d6:	cmp rdx, rax                         #    len |=| ((il->point >= il->columns) ?
0xf9d9:	jb 0xfa30                            
0xf9db:	mov rax, qword ptr [rip + 0x21a2e]   #	   il|-|>point - il->columns + 1 +
MEMORY OFFSET:     0x21a2e     137774  >>137782

0xf9e2:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xf9e6:	mov edx, eax                         #	   il->point |-| il->columns + 1 +
0xf9e8:	mov rax, qword ptr [rip + 0x21a21]   #	   il->point - il|-|>columns + 1 +
MEMORY OFFSET:     0x21a21     137761  >>137769

0xf9ef:	mov rax, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xf9f3:	sub edx, eax                         #	   il->point |-| il->columns + 1 +
0xf9f5:	mov eax, dword ptr [rbp - 0x20]      #	   il->point - il->columns + 1 |+|
MEMORY OFFSET:     -0x20     -32  >>-24

0xf9f8:	lea esi, [rdx + rax]                 
0xf9fb:	mov rax, qword ptr [rip + 0x21a0e]   #	   (scroll - 1) - ((il|-|>point - il->columns) % scroll) : 0);
MEMORY OFFSET:     0x21a0e     137742  >>137750

0xfa02:	mov rdx, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xfa06:	mov rax, qword ptr [rip + 0x21a03]   #	   (scroll - 1) - ((il->point - il|-|>columns) % scroll) : 0);
MEMORY OFFSET:     0x21a03     137731  >>137739

0xfa0d:	mov rcx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xfa11:	mov rax, rdx                         #	   (scroll - 1) - ((il->point |-| il->columns) % scroll) : 0);
0xfa14:	sub rax, rcx                         
0xfa17:	mov edx, dword ptr [rbp - 0x20]      #	   (scroll - 1) - ((il->point - il->columns) |%| scroll) : 0);
MEMORY OFFSET:     -0x20     -32  >>-24

0xfa1a:	movsxd rcx, edx                      
0xfa1d:	mov edx, 0                           
0xfa22:	div rcx                              
0xfa25:	mov rax, rdx                         
0xfa28:	mov edx, eax                         #	   (scroll - 1) |-| ((il->point - il->columns) % scroll) : 0);
0xfa2a:	mov eax, esi                         #    len |=| ((il->point >= il->columns) ?
0xfa2c:	sub eax, edx                         
0xfa2e:	jmp 0xfa35                           
0xfa30:	mov eax, 0                           #    len |=| ((il->point >= il->columns) ?
0xfa35:	mov dword ptr [rbp - 0x1c], eax      #    len |=| ((il->point >= il->columns) ?
MEMORY OFFSET:     -0x1c     -28  >>-20

0xfa38:	mov rax, qword ptr [rip + 0x219d1]   #    temp = xmalloc(il|-|>columns);
MEMORY OFFSET:     0x219d1     137681  >>137689

0xfa3f:	mov rax, qword ptr [rax + 0x28]      #    temp = |x|malloc(il->columns);
MEMORY OFFSET:     0x28     40  >>48

0xfa43:	mov rdi, rax                         
0xfa46:	call 0x24650                         
0xfa4b:	mov qword ptr [rbp - 0x10], rax      
MEMORY OFFSET:     -0x10     -16  >>-8

0xfa4f:	mov rax, qword ptr [rip + 0x219ba]   #    memset(temp, ' ', il|-|>columns);
MEMORY OFFSET:     0x219ba     137658  >>137666

0xfa56:	mov rdx, qword ptr [rax + 0x28]      #    |m|emset(temp, ' ', il->columns);
MEMORY OFFSET:     0x28     40  >>48

0xfa5a:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xfa5e:	mov esi, 0x20                        
0xfa63:	mov rdi, rax                         
0xfa66:	call 0x4a10                          
0xfa6b:	mov rax, qword ptr [rip + 0x2199e]   #    if (il|-|>echo)
MEMORY OFFSET:     0x2199e     137630  >>137638

0xfa72:	mov eax, dword ptr [rax + 8]         
MEMORY OFFSET:     0x8     8  >>16

0xfa75:	test eax, eax                        #    if |(|il->echo)
0xfa77:	je 0xfaf1                            
0xfa79:	mov rax, qword ptr [rip + 0x21990]   #	       |m|in(il->length   - il->static_length - len,
MEMORY OFFSET:     0x21990     137616  >>137624

0xfa80:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xfa84:	mov rax, qword ptr [rip + 0x21985]   
MEMORY OFFSET:     0x21985     137605  >>137613

0xfa8b:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfa8f:	mov rax, rdx                         
0xfa92:	sub rax, rcx                         
0xfa95:	mov ecx, dword ptr [rbp - 0x1c]      
MEMORY OFFSET:     -0x1c     -28  >>-20

0xfa98:	sub rax, rcx                         
0xfa9b:	mov rdx, rax                         
0xfa9e:	mov rax, qword ptr [rip + 0x2196b]   
MEMORY OFFSET:     0x2196b     137579  >>137587

0xfaa5:	mov rcx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xfaa9:	mov rax, qword ptr [rip + 0x21960]   
MEMORY OFFSET:     0x21960     137568  >>137576

0xfab0:	mov rsi, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfab4:	mov rax, rcx                         
0xfab7:	sub rax, rsi                         
0xfaba:	cmp rdx, rax                         #	|m|emcpy(temp, il->buffer + il->static_length + len,
0xfabd:	cmova rdx, rax                       
0xfac1:	mov rax, qword ptr [rip + 0x21948]   #	memcpy(temp, il|-|>buffer + il->static_length + len,
MEMORY OFFSET:     0x21948     137544  >>137552

0xfac8:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xfacc:	mov rax, qword ptr [rip + 0x2193d]   #	memcpy(temp, il->buffer + il|-|>static_length + len,
MEMORY OFFSET:     0x2193d     137533  >>137541

0xfad3:	mov rsi, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfad7:	mov eax, dword ptr [rbp - 0x1c]      #	memcpy(temp, il->buffer + il->static_length |+| len,
MEMORY OFFSET:     -0x1c     -28  >>-20

0xfada:	add rax, rsi                         
0xfadd:	add rcx, rax                         
0xfae0:	mov rax, qword ptr [rbp - 0x10]      #	|m|emcpy(temp, il->buffer + il->static_length + len,
MEMORY OFFSET:     -0x10     -16  >>-8

0xfae4:	mov rsi, rcx                         
0xfae7:	mov rdi, rax                         
0xfaea:	call 0x4b70                          
0xfaef:	jmp 0xfb4a                           
0xfaf1:	mov rax, qword ptr [rip + 0x21918]   #	       |m|in(il->length   - il->static_length - len,
MEMORY OFFSET:     0x21918     137496  >>137504

0xfaf8:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xfafc:	mov rax, qword ptr [rip + 0x2190d]   
MEMORY OFFSET:     0x2190d     137485  >>137493

0xfb03:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfb07:	mov rax, rdx                         
0xfb0a:	sub rax, rcx                         
0xfb0d:	mov ecx, dword ptr [rbp - 0x1c]      
MEMORY OFFSET:     -0x1c     -28  >>-20

0xfb10:	sub rax, rcx                         
0xfb13:	mov rdx, rax                         
0xfb16:	mov rax, qword ptr [rip + 0x218f3]   
MEMORY OFFSET:     0x218f3     137459  >>137467

0xfb1d:	mov rcx, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xfb21:	mov rax, qword ptr [rip + 0x218e8]   
MEMORY OFFSET:     0x218e8     137448  >>137456

0xfb28:	mov rsi, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfb2c:	mov rax, rcx                         
0xfb2f:	sub rax, rsi                         
0xfb32:	cmp rdx, rax                         #	|m|emset(temp, '*',
0xfb35:	cmova rdx, rax                       
0xfb39:	mov rax, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xfb3d:	mov esi, 0x2a                        
0xfb42:	mov rdi, rax                         
0xfb45:	call 0x4a10                          
0xfb4a:	mov rax, qword ptr [rip + 0x218bf]   #    window_goto(il|-|>window, 0, 0);
MEMORY OFFSET:     0x218bf     137407  >>137415

0xfb51:	mov rax, qword ptr [rax]             #    |w|indow_goto(il->window, 0, 0);
0xfb54:	mov edx, 0                           
0xfb59:	mov esi, 0                           
0xfb5e:	mov rdi, rax                         
0xfb61:	call 0xdc1e                          
0xfb66:	cmp dword ptr [rbp - 0x24], 0        #    if |(|!il_too_small)
MEMORY OFFSET:     -0x24     -36  >>-28

0xfb6a:	jne 0xfb99                           
0xfb6c:	mov rax, qword ptr [rip + 0x2189d]   #	window_puts(il->window, il->buffer, il|-|>static_length);
MEMORY OFFSET:     0x2189d     137373  >>137381

0xfb73:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfb77:	mov edx, eax                         #	|w|indow_puts(il->window, il->buffer, il->static_length);
0xfb79:	mov rax, qword ptr [rip + 0x21890]   #	window_puts(il->window, il|-|>buffer, il->static_length);
MEMORY OFFSET:     0x21890     137360  >>137368

0xfb80:	mov rcx, qword ptr [rax + 0x58]      #	|w|indow_puts(il->window, il->buffer, il->static_length);
MEMORY OFFSET:     0x58     88  >>96

0xfb84:	mov rax, qword ptr [rip + 0x21885]   #	window_puts(il|-|>window, il->buffer, il->static_length);
MEMORY OFFSET:     0x21885     137349  >>137357

0xfb8b:	mov rax, qword ptr [rax]             #	|w|indow_puts(il->window, il->buffer, il->static_length);
0xfb8e:	mov rsi, rcx                         
0xfb91:	mov rdi, rax                         
0xfb94:	call 0xdb1a                          
0xfb99:	mov rax, qword ptr [rip + 0x21870]   #    window_puts(il->window, temp, il|-|>columns - il->static_length);
MEMORY OFFSET:     0x21870     137328  >>137336

0xfba0:	mov rax, qword ptr [rax + 0x28]      
MEMORY OFFSET:     0x28     40  >>48

0xfba4:	mov edx, eax                         #    window_puts(il->window, temp, il->columns |-| il->static_length);
0xfba6:	mov rax, qword ptr [rip + 0x21863]   #    window_puts(il->window, temp, il->columns - il|-|>static_length);
MEMORY OFFSET:     0x21863     137315  >>137323

0xfbad:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfbb1:	mov ecx, eax                         #    window_puts(il->window, temp, il->columns |-| il->static_length);
0xfbb3:	mov eax, edx                         
0xfbb5:	sub eax, ecx                         
0xfbb7:	mov edx, eax                         #    |w|indow_puts(il->window, temp, il->columns - il->static_length);
0xfbb9:	mov rax, qword ptr [rip + 0x21850]   #    window_puts(il|-|>window, temp, il->columns - il->static_length);
MEMORY OFFSET:     0x21850     137296  >>137304

0xfbc0:	mov rax, qword ptr [rax]             #    |w|indow_puts(il->window, temp, il->columns - il->static_length);
0xfbc3:	mov rcx, qword ptr [rbp - 0x10]      
MEMORY OFFSET:     -0x10     -16  >>-8

0xfbc7:	mov rsi, rcx                         
0xfbca:	mov rdi, rax                         
0xfbcd:	call 0xdb1a                          
0xfbd2:	mov rax, qword ptr [rip + 0x21837]   #    window_goto(il->window, 0, il|-|>point - len);
MEMORY OFFSET:     0x21837     137271  >>137279

0xfbd9:	mov rax, qword ptr [rax + 0x18]      
MEMORY OFFSET:     0x18     24  >>32

0xfbdd:	sub eax, dword ptr [rbp - 0x1c]      #    window_goto(il->window, 0, il->point |-| len);
MEMORY OFFSET:     -0x1c     -28  >>-20

0xfbe0:	mov edx, eax                         #    |w|indow_goto(il->window, 0, il->point - len);
0xfbe2:	mov rax, qword ptr [rip + 0x21827]   #    window_goto(il|-|>window, 0, il->point - len);
MEMORY OFFSET:     0x21827     137255  >>137263

0xfbe9:	mov rax, qword ptr [rax]             #    |w|indow_goto(il->window, 0, il->point - len);
0xfbec:	mov esi, 0                           
0xfbf1:	mov rdi, rax                         
0xfbf4:	call 0xdc1e                          
0xfbf9:	cmp dword ptr [rbp - 0x24], 0        #    if |(|il_too_small)
MEMORY OFFSET:     -0x24     -36  >>-28

0xfbfd:	je 0xfc10                            
0xfbff:	mov rax, qword ptr [rbp - 0x18]      #	|i|l_restore_static(normal_static_length);
MEMORY OFFSET:     -0x18     -24  >>-16

0xfc03:	mov rdi, rax                         
0xfc06:	mov eax, 0                           
0xfc0b:	call 0xf6b3                          
0xfc10:	mov rax, qword ptr [rbp - 0x10]      #    |x|free(temp);
MEMORY OFFSET:     -0x10     -16  >>-8

0xfc14:	mov rdi, rax                         
0xfc17:	call 0x1eeae                         
0xfc1c:	lea rax, [rbp - 0x25]                #    |t|ty_restore(&status);
MEMORY OFFSET:     -0x25     -37  >>-29

0xfc20:	mov rdi, rax                         
0xfc23:	call 0xc067                          
0xfc28:	nop                                  #|}|
0xfc29:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xfc2d:	sub rax, qword ptr fs:[0x28]         
MEMORY OFFSET:     0x28     40  >>48

0xfc36:	je 0xfc3d                            
0xfc38:	call 0x4980                          
0xfc3d:	leave                                
0xfc3e:	ret                                  
0xfc3f:	endbr64                              #|{|
0xfc43:	push rbp                             
0xfc44:	mov rbp, rsp                         
0xfc47:	sub rsp, 0x10                        
0xfc4b:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xfc4f:	mov rax, qword ptr [rip + 0x217ba]   #    *dest = xrealloc(*dest, il|-|>dynamic_length + 1);
MEMORY OFFSET:     0x217ba     137146  >>137154

0xfc56:	mov rax, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xfc5a:	lea rdx, [rax + 1]                   #    *dest = |x|realloc(*dest, il->dynamic_length + 1);
MEMORY OFFSET:     0x1     1  >>9

0xfc5e:	mov rax, qword ptr [rbp - 8]         
MEMORY OFFSET:     -0x8     -8  >>0

0xfc62:	mov rax, qword ptr [rax]             
0xfc65:	mov rsi, rdx                         
0xfc68:	mov rdi, rax                         
0xfc6b:	call 0x24670                         
0xfc70:	mov rdx, qword ptr [rbp - 8]         #    *dest |=| xrealloc(*dest, il->dynamic_length + 1);
MEMORY OFFSET:     -0x8     -8  >>0

0xfc74:	mov qword ptr [rdx], rax             
0xfc77:	mov rax, qword ptr [rip + 0x21792]   #    memcpy(*dest, il->buffer + il->static_length, il|-|>dynamic_length + 1);
MEMORY OFFSET:     0x21792     137106  >>137114

0xfc7e:	mov rax, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xfc82:	lea rdx, [rax + 1]                   #    |m|emcpy(*dest, il->buffer + il->static_length, il->dynamic_length + 1);
MEMORY OFFSET:     0x1     1  >>9

0xfc86:	mov rax, qword ptr [rip + 0x21783]   #    memcpy(*dest, il|-|>buffer + il->static_length, il->dynamic_length + 1);
MEMORY OFFSET:     0x21783     137091  >>137099

0xfc8d:	mov rcx, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xfc91:	mov rax, qword ptr [rip + 0x21778]   #    memcpy(*dest, il->buffer + il|-|>static_length, il->dynamic_length + 1);
MEMORY OFFSET:     0x21778     137080  >>137088

0xfc98:	mov rax, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfc9c:	add rcx, rax                         #    memcpy(*dest, il->buffer |+| il->static_length, il->dynamic_length + 1);
0xfc9f:	mov rax, qword ptr [rbp - 8]         #    |m|emcpy(*dest, il->buffer + il->static_length, il->dynamic_length + 1);
MEMORY OFFSET:     -0x8     -8  >>0

0xfca3:	mov rax, qword ptr [rax]             
0xfca6:	mov rsi, rcx                         
0xfca9:	mov rdi, rax                         
0xfcac:	call 0x4b70                          
0xfcb1:	mov rax, qword ptr [rip + 0x21758]   #    return il|-|>dynamic_length;
MEMORY OFFSET:     0x21758     137048  >>137056

0xfcb8:	mov rax, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xfcbc:	leave                                #|}|
0xfcbd:	ret                                  
0xfcbe:	endbr64                              #|{|
0xfcc2:	push rbp                             
0xfcc3:	mov rbp, rsp                         
0xfcc6:	sub rsp, 0x10                        
0xfcca:	mov qword ptr [rbp - 8], rdi         
MEMORY OFFSET:     -0x8     -8  >>0

0xfcce:	mov eax, 0                           #    |i|l_reset_line();
0xfcd3:	call 0xece2                          
0xfcd8:	cmp qword ptr [rbp - 8], 0           #    |i|l_set_static_text(message ? message : "Wait....");
MEMORY OFFSET:     -0x8     -8  >>0

0xfcdd:	je 0xfce5                            
0xfcdf:	mov rax, qword ptr [rbp - 8]         #    |i|l_set_static_text(message ? message : "Wait....");
MEMORY OFFSET:     -0x8     -8  >>0

0xfce3:	jmp 0xfcec                           
0xfce5:	lea rax, [rip + 0x18334]             #    |i|l_set_static_text(message ? message : "Wait....");
MEMORY OFFSET:     0x18334     99124  >>99132

0xfcec:	mov rdi, rax                         #    |i|l_set_static_text(message ? message : "Wait....");
0xfcef:	call 0xf285                          
0xfcf4:	mov eax, 0                           #    |i|l_update();
0xfcf9:	call 0xf8eb                          
0xfcfe:	mov eax, 0                           #    |i|l_update_point();
0xfd03:	call 0xf768                          
0xfd08:	nop                                  #|}|
0xfd09:	leave                                
0xfd0a:	ret                                  
0xfd0b:	endbr64                              #|{|
0xfd0f:	push rbp                             
0xfd10:	mov rbp, rsp                         
0xfd13:	mov dword ptr [rbp - 4], edi         
MEMORY OFFSET:     -0x4     -4  >>4

0xfd16:	mov rax, qword ptr [rip + 0x216f3]   #    il|-|>error = flag;
MEMORY OFFSET:     0x216f3     136947  >>136955

0xfd1d:	mov edx, dword ptr [rbp - 4]         #    il->error |=| flag;
MEMORY OFFSET:     -0x4     -4  >>4

0xfd20:	mov dword ptr [rax + 0xc], edx       
MEMORY OFFSET:     0xc     12  >>20

0xfd23:	nop                                  #|}|
0xfd24:	pop rbp                              
0xfd25:	ret                                  
0xfd26:	endbr64                              #|{|
0xfd2a:	push rbp                             
0xfd2b:	mov rbp, rsp                         
0xfd2e:	push rbx                             
0xfd2f:	sub rsp, 0x28                        
0xfd33:	mov dword ptr [rbp - 0x24], edi      
MEMORY OFFSET:     -0x24     -36  >>-28

0xfd36:	cmp dword ptr [rbp - 0x24], 2        #    |s|witch (dir)
MEMORY OFFSET:     -0x24     -36  >>-28

0xfd3a:	je 0xfe8e                            
0xfd40:	cmp dword ptr [rbp - 0x24], 2        
MEMORY OFFSET:     -0x24     -36  >>-28

0xfd44:	jg 0x10098                           
0xfd4a:	cmp dword ptr [rbp - 0x24], 0        
MEMORY OFFSET:     -0x24     -36  >>-28

0xfd4e:	je 0xffca                            
0xfd54:	cmp dword ptr [rbp - 0x24], 1        
MEMORY OFFSET:     -0x24     -36  >>-28

0xfd58:	jne 0x10098                          
0xfd5e:	mov eax, dword ptr [rip + 0x216b4]   #	    if (|!|browsing)
MEMORY OFFSET:     0x216b4     136884  >>136892

0xfd64:	test eax, eax                        #	    if |(|!browsing)
0xfd66:	jne 0xfd82                           
0xfd68:	mov dword ptr [rip + 0x216a6], 1     #		browsing |=| 1;
MEMORY OFFSET:     0x216a6     136870  >>136878

0xfd72:	mov eax, 0                           #		last_history_position = |w|here_history();
0xfd77:	call 0x20455                         
0xfd7c:	mov dword ptr [rip + 0x2169a], eax   #		last_history_position |=| where_history();
MEMORY OFFSET:     0x2169a     136858  >>136866

0xfd82:	mov eax, 0                           #	    if ((hist = |p|revious_history()))
0xfd87:	call 0x210c6                         
0xfd8c:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xfd90:	cmp qword ptr [rbp - 0x18], 0        #	    if |(|(hist = previous_history()))
MEMORY OFFSET:     -0x18     -24  >>-16

0xfd95:	je 0x1009b                           
0xfd9b:	mov rax, qword ptr [rbp - 0x18]      #		il->dynamic_length = strlen(hist|-|>line);
MEMORY OFFSET:     -0x18     -24  >>-16

0xfd9f:	mov rax, qword ptr [rax]             
0xfda2:	mov rbx, qword ptr [rip + 0x21667]   #		il|-|>dynamic_length = strlen(hist->line);
MEMORY OFFSET:     0x21667     136807  >>136815

0xfda9:	mov rdi, rax                         #		il->dynamic_length = |s|trlen(hist->line);
0xfdac:	call 0x4960                          
0xfdb1:	mov qword ptr [rbx + 0x48], rax      #		il->dynamic_length |=| strlen(hist->line);
MEMORY OFFSET:     0x48     72  >>80

0xfdb5:	mov rax, qword ptr [rip + 0x21654]   #		il->length         = il|-|>static_length + il->dynamic_length;
MEMORY OFFSET:     0x21654     136788  >>136796

0xfdbc:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfdc0:	mov rax, qword ptr [rip + 0x21649]   #		il->length         = il->static_length + il|-|>dynamic_length;
MEMORY OFFSET:     0x21649     136777  >>136785

0xfdc7:	mov rdx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xfdcb:	mov rax, qword ptr [rip + 0x2163e]   #		il|-|>length         = il->static_length + il->dynamic_length;
MEMORY OFFSET:     0x2163e     136766  >>136774

0xfdd2:	add rdx, rcx                         #		il->length         = il->static_length |+| il->dynamic_length;
0xfdd5:	mov qword ptr [rax + 0x38], rdx      #		il->length         |=| il->static_length + il->dynamic_length;
MEMORY OFFSET:     0x38     56  >>64

0xfdd9:	mov rdx, qword ptr [rip + 0x21630]   #		il->point          = il|-|>length;
MEMORY OFFSET:     0x21630     136752  >>136760

0xfde0:	mov rax, qword ptr [rip + 0x21629]   #		il|-|>point          = il->length;
MEMORY OFFSET:     0x21629     136745  >>136753

0xfde7:	mov rdx, qword ptr [rdx + 0x38]      #		il->point          = il|-|>length;
MEMORY OFFSET:     0x38     56  >>64

0xfdeb:	mov qword ptr [rax + 0x18], rdx      #		il->point          |=| il->length;
MEMORY OFFSET:     0x18     24  >>32

0xfdef:	mov rax, qword ptr [rip + 0x2161a]   #		if (il|-|>length + 1 > il->size)
MEMORY OFFSET:     0x2161a     136730  >>136738

0xfdf6:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xfdfa:	lea rdx, [rax + 1]                   #		if (il->length |+| 1 > il->size)
MEMORY OFFSET:     0x1     1  >>9

0xfdfe:	mov rax, qword ptr [rip + 0x2160b]   #		if (il->length + 1 > il|-|>size)
MEMORY OFFSET:     0x2160b     136715  >>136723

0xfe05:	mov rax, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xfe09:	cmp rdx, rax                         #		if |(|il->length + 1 > il->size)
0xfe0c:	jbe 0xfe54                           
0xfe0e:	mov rax, qword ptr [rip + 0x215fb]   #		    |I|L_RESIZE(il->length + 1);
MEMORY OFFSET:     0x215fb     136699  >>136707

0xfe15:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xfe19:	mov rax, qword ptr [rip + 0x215f0]   
MEMORY OFFSET:     0x215f0     136688  >>136696

0xfe20:	add rdx, 1                           
0xfe24:	mov qword ptr [rax + 0x50], rdx      
MEMORY OFFSET:     0x50     80  >>88

0xfe28:	mov rax, qword ptr [rip + 0x215e1]   
MEMORY OFFSET:     0x215e1     136673  >>136681

0xfe2f:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xfe33:	mov rax, qword ptr [rip + 0x215d6]   
MEMORY OFFSET:     0x215d6     136662  >>136670

0xfe3a:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xfe3e:	mov rbx, qword ptr [rip + 0x215cb]   
MEMORY OFFSET:     0x215cb     136651  >>136659

0xfe45:	mov rsi, rdx                         
0xfe48:	mov rdi, rax                         
0xfe4b:	call 0x24670                         
0xfe50:	mov qword ptr [rbx + 0x58], rax      
MEMORY OFFSET:     0x58     88  >>96

0xfe54:	mov rax, qword ptr [rbp - 0x18]      #		strcpy(il->buffer + il->static_length, hist|-|>line);
MEMORY OFFSET:     -0x18     -24  >>-16

0xfe58:	mov rax, qword ptr [rax]             
0xfe5b:	mov rdx, qword ptr [rip + 0x215ae]   #		strcpy(il|-|>buffer + il->static_length, hist->line);
MEMORY OFFSET:     0x215ae     136622  >>136630

0xfe62:	mov rcx, qword ptr [rdx + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xfe66:	mov rdx, qword ptr [rip + 0x215a3]   #		strcpy(il->buffer + il|-|>static_length, hist->line);
MEMORY OFFSET:     0x215a3     136611  >>136619

0xfe6d:	mov rdx, qword ptr [rdx + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfe71:	add rdx, rcx                         #		|s|trcpy(il->buffer + il->static_length, hist->line);
0xfe74:	mov rsi, rax                         
0xfe77:	mov rdi, rdx                         
0xfe7a:	call 0x4870                          
0xfe7f:	mov eax, 0                           #		|i|l_update();
0xfe84:	call 0xf8eb                          
0xfe89:	jmp 0x1009b                          #	    |b|reak;
0xfe8e:	mov eax, dword ptr [rip + 0x21584]   #	    if (|!|browsing)
MEMORY OFFSET:     0x21584     136580  >>136588

0xfe94:	test eax, eax                        #	    if |(|!browsing)
0xfe96:	jne 0xfeb2                           
0xfe98:	mov dword ptr [rip + 0x21576], 1     #		browsing |=| 1;
MEMORY OFFSET:     0x21576     136566  >>136574

0xfea2:	mov eax, 0                           #		last_history_position = |w|here_history();
0xfea7:	call 0x20455                         
0xfeac:	mov dword ptr [rip + 0x2156a], eax   #		last_history_position |=| where_history();
MEMORY OFFSET:     0x2156a     136554  >>136562

0xfeb2:	mov eax, 0                           #	    if ((hist = |n|ext_history()))
0xfeb7:	call 0x21109                         
0xfebc:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xfec0:	cmp qword ptr [rbp - 0x18], 0        #	    if |(|(hist = next_history()))
MEMORY OFFSET:     -0x18     -24  >>-16

0xfec5:	je 0xffb1                            
0xfecb:	mov rax, qword ptr [rbp - 0x18]      #		il->dynamic_length = strlen(hist|-|>line);
MEMORY OFFSET:     -0x18     -24  >>-16

0xfecf:	mov rax, qword ptr [rax]             
0xfed2:	mov rbx, qword ptr [rip + 0x21537]   #		il|-|>dynamic_length = strlen(hist->line);
MEMORY OFFSET:     0x21537     136503  >>136511

0xfed9:	mov rdi, rax                         #		il->dynamic_length = |s|trlen(hist->line);
0xfedc:	call 0x4960                          
0xfee1:	mov qword ptr [rbx + 0x48], rax      #		il->dynamic_length |=| strlen(hist->line);
MEMORY OFFSET:     0x48     72  >>80

0xfee5:	mov rax, qword ptr [rip + 0x21524]   #		il->length         = il|-|>static_length + il->dynamic_length;
MEMORY OFFSET:     0x21524     136484  >>136492

0xfeec:	mov rcx, qword ptr [rax + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xfef0:	mov rax, qword ptr [rip + 0x21519]   #		il->length         = il->static_length + il|-|>dynamic_length;
MEMORY OFFSET:     0x21519     136473  >>136481

0xfef7:	mov rdx, qword ptr [rax + 0x48]      
MEMORY OFFSET:     0x48     72  >>80

0xfefb:	mov rax, qword ptr [rip + 0x2150e]   #		il|-|>length         = il->static_length + il->dynamic_length;
MEMORY OFFSET:     0x2150e     136462  >>136470

0xff02:	add rdx, rcx                         #		il->length         = il->static_length |+| il->dynamic_length;
0xff05:	mov qword ptr [rax + 0x38], rdx      #		il->length         |=| il->static_length + il->dynamic_length;
MEMORY OFFSET:     0x38     56  >>64

0xff09:	mov rdx, qword ptr [rip + 0x21500]   #		il->point          = il|-|>length;
MEMORY OFFSET:     0x21500     136448  >>136456

0xff10:	mov rax, qword ptr [rip + 0x214f9]   #		il|-|>point          = il->length;
MEMORY OFFSET:     0x214f9     136441  >>136449

0xff17:	mov rdx, qword ptr [rdx + 0x38]      #		il->point          = il|-|>length;
MEMORY OFFSET:     0x38     56  >>64

0xff1b:	mov qword ptr [rax + 0x18], rdx      #		il->point          |=| il->length;
MEMORY OFFSET:     0x18     24  >>32

0xff1f:	mov rax, qword ptr [rip + 0x214ea]   #		if (il|-|>length + 1 > il->size)
MEMORY OFFSET:     0x214ea     136426  >>136434

0xff26:	mov rax, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xff2a:	lea rdx, [rax + 1]                   #		if (il->length |+| 1 > il->size)
MEMORY OFFSET:     0x1     1  >>9

0xff2e:	mov rax, qword ptr [rip + 0x214db]   #		if (il->length + 1 > il|-|>size)
MEMORY OFFSET:     0x214db     136411  >>136419

0xff35:	mov rax, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xff39:	cmp rdx, rax                         #		if |(|il->length + 1 > il->size)
0xff3c:	jbe 0xff84                           
0xff3e:	mov rax, qword ptr [rip + 0x214cb]   #		    |I|L_RESIZE(il->length + 1);
MEMORY OFFSET:     0x214cb     136395  >>136403

0xff45:	mov rdx, qword ptr [rax + 0x38]      
MEMORY OFFSET:     0x38     56  >>64

0xff49:	mov rax, qword ptr [rip + 0x214c0]   
MEMORY OFFSET:     0x214c0     136384  >>136392

0xff50:	add rdx, 1                           
0xff54:	mov qword ptr [rax + 0x50], rdx      
MEMORY OFFSET:     0x50     80  >>88

0xff58:	mov rax, qword ptr [rip + 0x214b1]   
MEMORY OFFSET:     0x214b1     136369  >>136377

0xff5f:	mov rdx, qword ptr [rax + 0x50]      
MEMORY OFFSET:     0x50     80  >>88

0xff63:	mov rax, qword ptr [rip + 0x214a6]   
MEMORY OFFSET:     0x214a6     136358  >>136366

0xff6a:	mov rax, qword ptr [rax + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xff6e:	mov rbx, qword ptr [rip + 0x2149b]   
MEMORY OFFSET:     0x2149b     136347  >>136355

0xff75:	mov rsi, rdx                         
0xff78:	mov rdi, rax                         
0xff7b:	call 0x24670                         
0xff80:	mov qword ptr [rbx + 0x58], rax      
MEMORY OFFSET:     0x58     88  >>96

0xff84:	mov rax, qword ptr [rbp - 0x18]      #		strcpy(il->buffer + il->static_length, hist|-|>line);
MEMORY OFFSET:     -0x18     -24  >>-16

0xff88:	mov rax, qword ptr [rax]             
0xff8b:	mov rdx, qword ptr [rip + 0x2147e]   #		strcpy(il|-|>buffer + il->static_length, hist->line);
MEMORY OFFSET:     0x2147e     136318  >>136326

0xff92:	mov rcx, qword ptr [rdx + 0x58]      
MEMORY OFFSET:     0x58     88  >>96

0xff96:	mov rdx, qword ptr [rip + 0x21473]   #		strcpy(il->buffer + il|-|>static_length, hist->line);
MEMORY OFFSET:     0x21473     136307  >>136315

0xff9d:	mov rdx, qword ptr [rdx + 0x40]      
MEMORY OFFSET:     0x40     64  >>72

0xffa1:	add rdx, rcx                         #		|s|trcpy(il->buffer + il->static_length, hist->line);
0xffa4:	mov rsi, rax                         
0xffa7:	mov rdi, rdx                         
0xffaa:	call 0x4870                          
0xffaf:	jmp 0xffbb                           
0xffb1:	mov edi, 0                           #		|i|l_kill_line(IL_DONT_STORE);
0xffb6:	call 0xed98                          
0xffbb:	mov eax, 0                           #	    |i|l_update();
0xffc0:	call 0xf8eb                          
0xffc5:	jmp 0x1009c                          #	    |b|reak;
0xffca:	mov eax, dword ptr [rip + 0x21448]   #	    if (|b|rowsing)
MEMORY OFFSET:     0x21448     136264  >>136272

0xffd0:	test eax, eax                        #	    if |(|browsing)
0xffd2:	je 0xfff0                            
0xffd4:	mov eax, dword ptr [rip + 0x21442]   #		|h|istory_set_pos(last_history_position);
MEMORY OFFSET:     0x21442     136258  >>136266

0xffda:	mov edi, eax                         
0xffdc:	mov eax, 0                           
0xffe1:	call 0x2123c                         
0xffe6:	mov dword ptr [rip + 0x21428], 0     #		browsing |=| 0;
MEMORY OFFSET:     0x21428     136232  >>136240

0xfff0:	mov eax, 0                           #	    if ((hist = |p|revious_history()))
0xfff5:	call 0x210c6                         
0xfffa:	mov qword ptr [rbp - 0x18], rax      
MEMORY OFFSET:     -0x18     -24  >>-16

0xfffe:	cmp qword ptr [rbp - 0x18], 0        #	    if |(|(hist = previous_history()))
MEMORY OFFSET:     -0x18     -24  >>-16

0x10003:	je 0x10066                          
0x10005:	mov rax, qword ptr [rbp - 0x18]     #		if (strcmp(il->buffer + il->static_length, hist|-|>line) != 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x10009:	mov rax, qword ptr [rax]            
0x1000c:	mov rdx, qword ptr [rip + 0x213fd]  #		if (strcmp(il|-|>buffer + il->static_length, hist->line) != 0)
MEMORY OFFSET:     0x213fd     136189  >>136197

0x10013:	mov rcx, qword ptr [rdx + 0x58]     
MEMORY OFFSET:     0x58     88  >>96

0x10017:	mov rdx, qword ptr [rip + 0x213f2]  #		if (strcmp(il->buffer + il|-|>static_length, hist->line) != 0)
MEMORY OFFSET:     0x213f2     136178  >>136186

0x1001e:	mov rdx, qword ptr [rdx + 0x40]     
MEMORY OFFSET:     0x40     64  >>72

0x10022:	add rdx, rcx                        #		if (strcmp(il->buffer |+| il->static_length, hist->line) != 0)
0x10025:	mov rsi, rax                        #		if (|s|trcmp(il->buffer + il->static_length, hist->line) != 0)
0x10028:	mov rdi, rdx                        
0x1002b:	call 0x4af0                         
0x10030:	test eax, eax                       #		if |(|strcmp(il->buffer + il->static_length, hist->line) != 0)
0x10032:	je 0x1008c                          
0x10034:	mov rax, qword ptr [rip + 0x213d5]  #		    add_history(il|-|>buffer + il->static_length);
MEMORY OFFSET:     0x213d5     136149  >>136157

0x1003b:	mov rdx, qword ptr [rax + 0x58]     
MEMORY OFFSET:     0x58     88  >>96

0x1003f:	mov rax, qword ptr [rip + 0x213ca]  #		    add_history(il->buffer + il|-|>static_length);
MEMORY OFFSET:     0x213ca     136138  >>136146

0x10046:	mov rax, qword ptr [rax + 0x40]     
MEMORY OFFSET:     0x40     64  >>72

0x1004a:	add rax, rdx                        #		    |a|dd_history(il->buffer + il->static_length);
0x1004d:	mov rdi, rax                        
0x10050:	mov eax, 0                          
0x10055:	call 0x201b5                        
0x1005a:	mov eax, 0                          #		    |n|ext_history();
0x1005f:	call 0x21109                        
0x10064:	jmp 0x1008c                         
0x10066:	mov rax, qword ptr [rip + 0x213a3]  #		add_history(il|-|>buffer + il->static_length);
MEMORY OFFSET:     0x213a3     136099  >>136107

0x1006d:	mov rdx, qword ptr [rax + 0x58]     
MEMORY OFFSET:     0x58     88  >>96

0x10071:	mov rax, qword ptr [rip + 0x21398]  #		add_history(il->buffer + il|-|>static_length);
MEMORY OFFSET:     0x21398     136088  >>136096

0x10078:	mov rax, qword ptr [rax + 0x40]     
MEMORY OFFSET:     0x40     64  >>72

0x1007c:	add rax, rdx                        #		|a|dd_history(il->buffer + il->static_length);
0x1007f:	mov rdi, rax                        
0x10082:	mov eax, 0                          
0x10087:	call 0x201b5                        
0x1008c:	mov eax, 0                          #	    |n|ext_history();
0x10091:	call 0x21109                        
0x10096:	jmp 0x1009c                         #	    |b|reak;
0x10098:	nop                                 #	    |b|reak;
0x10099:	jmp 0x1009c                         
0x1009b:	nop                                 #	    |b|reak;
0x1009c:	nop                                 #|}|
0x1009d:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x100a1:	leave                               
0x100a2:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/status.c
####################################################################################################

0x100a3:	endbr64                             #|{|
0x100a7:	push rbp                            
0x100a8:	mov rbp, rsp                        
0x100ab:	sub rsp, 0x10                       
0x100af:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x100b3:	mov eax, dword ptr [rip + 0x1ef5f]  #    use_section(AnsiColors |?| color_section : monochrome_section);
MEMORY OFFSET:     0x1ef5f     126815  >>126823

0x100b9:	test eax, eax                       #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x100bb:	je 0x100c6                          
0x100bd:	lea rax, [rip + 0x1ef6c]            #    |u|se_section(AnsiColors ? color_section : monochrome_section);
MEMORY OFFSET:     0x1ef6c     126828  >>126836

0x100c4:	jmp 0x100cd                         
0x100c6:	lea rax, [rip + 0x1ef73]            #    |u|se_section(AnsiColors ? color_section : monochrome_section);
MEMORY OFFSET:     0x1ef73     126835  >>126843

0x100cd:	mov rdi, rax                        #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x100d0:	call 0x1dbc4                        
0x100d5:	mov edx, 9                          #    |g|et_colorset_var(StatusBarColors, StatusBarFields, STATUSBAR_FIELDS);
0x100da:	lea rax, [rip + 0x201bf]            
MEMORY OFFSET:     0x201bf     131519  >>131527

0x100e1:	mov rsi, rax                        
0x100e4:	lea rax, [rip + 0x20215]            
MEMORY OFFSET:     0x20215     131605  >>131613

0x100eb:	mov rdi, rax                        
0x100ee:	call 0x1df8c                        
0x100f3:	mov rax, qword ptr [rbp - 8]        #    status_default_message = |x|strdup(default_message);
MEMORY OFFSET:     -0x8     -8  >>0

0x100f7:	mov rdi, rax                        
0x100fa:	call 0x24780                        
0x100ff:	mov qword ptr [rip + 0x2133a], rax  #    status_default_message |=| xstrdup(default_message);
MEMORY OFFSET:     0x2133a     135994  >>136002

0x10106:	mov rax, qword ptr [rip + 0x21333]  #    |t|oprintable(status_default_message, strlen(status_default_message));
MEMORY OFFSET:     0x21333     135987  >>135995

0x1010d:	mov rdi, rax                        
0x10110:	call 0x4960                         
0x10115:	mov rdx, rax                        
0x10118:	mov rax, qword ptr [rip + 0x21321]  
MEMORY OFFSET:     0x21321     135969  >>135977

0x1011f:	mov rsi, rdx                        
0x10122:	mov rdi, rax                        
0x10125:	call 0x1e5b1                        
0x1012a:	mov eax, 0                          #    status_window = |w|indow_init();
0x1012f:	call 0xda70                         
0x10134:	mov qword ptr [rip + 0x212e5], rax  #    status_window |=| window_init();
MEMORY OFFSET:     0x212e5     135909  >>135917

0x1013b:	lea rax, [rip + 0x2131e]            #    |u|name(&u);
MEMORY OFFSET:     0x2131e     135966  >>135974

0x10142:	mov rdi, rax                        
0x10145:	call 0x49f0                         
0x1014a:	nop                                 #|}|
0x1014b:	leave                               
0x1014c:	ret                                 
0x1014d:	endbr64                             #|{|
0x10151:	push rbp                            
0x10152:	mov rbp, rsp                        
0x10155:	mov rax, qword ptr [rip + 0x212c4]  #    |w|indow_end(status_window);
MEMORY OFFSET:     0x212c4     135876  >>135884

0x1015c:	mov rdi, rax                        
0x1015f:	call 0xdab1                         
0x10164:	nop                                 #|}|
0x10165:	pop rbp                             
0x10166:	ret                                 
0x10167:	endbr64                             #|{|
0x1016b:	push rbp                            
0x1016c:	mov rbp, rsp                        
0x1016f:	sub rsp, 0x10                       
0x10173:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x10177:	mov qword ptr [rbp - 0x10], rsi     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1017b:	mov rax, qword ptr [rip + 0x212b6]  #    if (|s|tatus_buffer)
MEMORY OFFSET:     0x212b6     135862  >>135870

0x10182:	test rax, rax                       #    if |(|status_buffer)
0x10185:	je 0x10196                          
0x10187:	mov rax, qword ptr [rip + 0x212aa]  #	|x|free(status_buffer);
MEMORY OFFSET:     0x212aa     135850  >>135858

0x1018e:	mov rdi, rax                        
0x10191:	call 0x1eeae                        
0x10196:	mov rax, qword ptr [rbp - 8]        #    status_buffer = |x|malloc(columns * sizeof(char));
MEMORY OFFSET:     -0x8     -8  >>0

0x1019a:	mov rdi, rax                        
0x1019d:	call 0x24650                        
0x101a2:	mov qword ptr [rip + 0x2128f], rax  #    status_buffer |=| xmalloc(columns * sizeof(char));
MEMORY OFFSET:     0x2128f     135823  >>135831

0x101a9:	mov rax, qword ptr [rbp - 8]        #    |w|indow_resize(status_window, 0, line, 1, columns);
MEMORY OFFSET:     -0x8     -8  >>0

0x101ad:	mov ecx, eax                        
0x101af:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x101b3:	mov edx, eax                        
0x101b5:	mov rax, qword ptr [rip + 0x21264]  
MEMORY OFFSET:     0x21264     135780  >>135788

0x101bc:	mov r8d, ecx                        
0x101bf:	mov ecx, 1                          
0x101c4:	mov esi, 0                          
0x101c9:	mov rdi, rax                        
0x101cc:	call 0xdad7                         
0x101d1:	nop                                 #|}|
0x101d2:	leave                               
0x101d3:	ret                                 
0x101d4:	endbr64                             #|{|
0x101d8:	push rbp                            
0x101d9:	mov rbp, rsp                        
0x101dc:	sub rsp, 0x60                       
0x101e0:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x101e9:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x101ed:	xor eax, eax                        
0x101ef:	mov rax, qword ptr [rip + 0x2122a]  #    memset(status_buffer, ' ', status_window|-|>columns);
MEMORY OFFSET:     0x2122a     135722  >>135730

0x101f6:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x101f9:	movsxd rdx, eax                     #    |m|emset(status_buffer, ' ', status_window->columns);
0x101fc:	mov rax, qword ptr [rip + 0x21235]  
MEMORY OFFSET:     0x21235     135733  >>135741

0x10203:	mov esi, 0x20                       
0x10208:	mov rdi, rax                        
0x1020b:	call 0x4a10                         
0x10210:	mov rax, qword ptr [rip + 0x21211]  #    temp_msg = xmalloc(temp_msg_len = (|s|trlen(status_message) + 1));
MEMORY OFFSET:     0x21211     135697  >>135705

0x10217:	mov rdi, rax                        
0x1021a:	call 0x4960                         
0x1021f:	add rax, 1                          #    temp_msg = |x|malloc(temp_msg_len = (strlen(status_message) + 1));
0x10223:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x10227:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1022b:	mov rdi, rax                        
0x1022e:	call 0x24650                        
0x10233:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x10237:	mov dword ptr [rbp - 0x60], 0       #    for (i |=| 0, j = 0; status_message[i]; i++)
MEMORY OFFSET:     -0x60     -96  >>-88

0x1023e:	mov dword ptr [rbp - 0x5c], 0       #    for (i = 0, j |=| 0; status_message[i]; i++)
MEMORY OFFSET:     -0x5c     -92  >>-84

0x10245:	jmp 0x1059d                         #    |f|or (i = 0, j = 0; status_message[i]; i++)
0x1024a:	mov rdx, qword ptr [rip + 0x211d7]  #	if (status_message|[|i] == '\\')
MEMORY OFFSET:     0x211d7     135639  >>135647

0x10251:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x10254:	cdqe                                
0x10256:	add rax, rdx                        
0x10259:	movzx eax, byte ptr [rax]           
0x1025c:	cmp al, 0x5c                        #	if |(|status_message[i] == '\\')
0x1025e:	jne 0x10515                         
0x10264:	mov rdx, qword ptr [rip + 0x211bd]  #	    switch (status_message|[|i + 1])
MEMORY OFFSET:     0x211bd     135613  >>135621

0x1026b:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x1026e:	cdqe                                
0x10270:	add rax, 1                          
0x10274:	add rax, rdx                        
0x10277:	movzx eax, byte ptr [rax]           
0x1027a:	movsx eax, al                       
0x1027d:	test eax, eax                       #	    |s|witch (status_message[i + 1])
0x1027f:	je 0x104b3                          
0x10285:	test eax, eax                       
0x10287:	js 0x104ce                          
0x1028d:	cmp eax, 0x73                       
0x10290:	jg 0x104ce                          
0x10296:	cmp eax, 0x5c                       
0x10299:	jl 0x104ce                          
0x1029f:	sub eax, 0x5c                       
0x102a2:	cmp eax, 0x17                       
0x102a5:	ja 0x104ce                          
0x102ab:	mov eax, eax                        
0x102ad:	lea rdx, [rax*4]                    
0x102b5:	lea rax, [rip + 0x17e64]            
MEMORY OFFSET:     0x17e64     97892  >>97900

0x102bc:	mov eax, dword ptr [rdx + rax]      
0x102bf:	cdqe                                
0x102c1:	lea rdx, [rip + 0x17e58]            
MEMORY OFFSET:     0x17e58     97880  >>97888

0x102c8:	add rax, rdx                        
0x102cb:	jmp rax                             
0x102ce:	lea rax, [rip + 0x211cc]            #		    ptr |=| u.nodename;
MEMORY OFFSET:     0x211cc     135628  >>135636

0x102d5:	mov qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x102d9:	jmp 0x102f3                         #		    |g|oto get_system_info;
0x102db:	lea rax, [rip + 0x2117e]            #		    ptr |=| u.sysname;
MEMORY OFFSET:     0x2117e     135550  >>135558

0x102e2:	mov qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x102e6:	jmp 0x102f3                         #		    |g|oto get_system_info;
0x102e8:	lea rax, [rip + 0x21275]            #		    ptr |=| u.machine;
MEMORY OFFSET:     0x21275     135797  >>135805

0x102ef:	mov qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x102f3:	mov rax, qword ptr [rbp - 0x58]     #		    if (ptr|[|0])
MEMORY OFFSET:     -0x58     -88  >>-80

0x102f7:	movzx eax, byte ptr [rax]           
0x102fa:	test al, al                         #		    if |(|ptr[0])
0x102fc:	je 0x10350                          
0x102fe:	mov rax, qword ptr [rbp - 0x58]     #			len = |s|trlen(ptr);
MEMORY OFFSET:     -0x58     -88  >>-80

0x10302:	mov rdi, rax                        
0x10305:	call 0x4960                         
0x1030a:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1030e:	mov rax, qword ptr [rbp - 0x48]     #			temp_msg = |x|realloc(temp_msg, temp_msg_len += len);
MEMORY OFFSET:     -0x48     -72  >>-64

0x10312:	add qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x10316:	mov rdx, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1031a:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1031e:	mov rsi, rdx                        
0x10321:	mov rdi, rax                        
0x10324:	call 0x24670                        
0x10329:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1032d:	mov eax, dword ptr [rbp - 0x5c]     #			|m|emcpy(&temp_msg[j], ptr, len);
MEMORY OFFSET:     -0x5c     -92  >>-84

0x10330:	movsxd rdx, eax                     
0x10333:	mov rax, qword ptr [rbp - 0x50]     #			memcpy(|&|temp_msg[j], ptr, len);
MEMORY OFFSET:     -0x50     -80  >>-72

0x10337:	lea rcx, [rdx + rax]                
0x1033b:	mov rdx, qword ptr [rbp - 0x48]     #			|m|emcpy(&temp_msg[j], ptr, len);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1033f:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x10343:	mov rsi, rax                        
0x10346:	mov rdi, rcx                        
0x10349:	call 0x4b70                         
0x1034e:	jmp 0x1039e                         
0x10350:	mov qword ptr [rbp - 0x48], 6       #			len |=| 6;
MEMORY OFFSET:     -0x48     -72  >>-64

0x10358:	mov rax, qword ptr [rbp - 0x48]     #			temp_msg = |x|realloc(temp_msg, temp_msg_len += len);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1035c:	add qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x10360:	mov rdx, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x10364:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x10368:	mov rsi, rdx                        
0x1036b:	mov rdi, rax                        
0x1036e:	call 0x24670                        
0x10373:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x10377:	mov eax, dword ptr [rbp - 0x5c]     #			|m|emcpy(&temp_msg[j], "(none)", len);
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1037a:	movsxd rdx, eax                     
0x1037d:	mov rax, qword ptr [rbp - 0x50]     #			memcpy(|&|temp_msg[j], "(none)", len);
MEMORY OFFSET:     -0x50     -80  >>-72

0x10381:	lea rcx, [rdx + rax]                
0x10385:	mov rax, qword ptr [rbp - 0x48]     #			|m|emcpy(&temp_msg[j], "(none)", len);
MEMORY OFFSET:     -0x48     -72  >>-64

0x10389:	mov rdx, rax                        
0x1038c:	lea rax, [rip + 0x17d6e]            
MEMORY OFFSET:     0x17d6e     97646  >>97654

0x10393:	mov rsi, rax                        
0x10396:	mov rdi, rcx                        
0x10399:	call 0x4b70                         
0x1039e:	mov rax, qword ptr [rbp - 0x48]     #		    j |+|= len;
MEMORY OFFSET:     -0x48     -72  >>-64

0x103a2:	mov edx, eax                        
0x103a4:	mov eax, dword ptr [rbp - 0x5c]     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x103a7:	add eax, edx                        
0x103a9:	mov dword ptr [rbp - 0x5c], eax     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x103ac:	add dword ptr [rbp - 0x60], 1       #		    i|+|+;
MEMORY OFFSET:     -0x60     -96  >>-88

0x103b0:	jmp 0x10599                         #		    |b|reak;
0x103b5:	mov eax, 0                          #		    time = |g|et_local_time();
0x103ba:	call 0x1e4bf                        
0x103bf:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x103c3:	mov rax, qword ptr [rbp - 0x38]     #			    time->tm_mday, time|-|>tm_year + 1900);
MEMORY OFFSET:     -0x38     -56  >>-48

0x103c7:	mov eax, dword ptr [rax + 0x14]     
MEMORY OFFSET:     0x14     20  >>28

0x103ca:	lea edi, [rax + 0x76c]              #		    |s|printf(date_str, "%s %s %02d %d",
MEMORY OFFSET:     0x76c     1900  >>1908

0x103d0:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x103d4:	mov esi, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x103d7:	mov rax, qword ptr [rbp - 0x38]     #			    day_name[time->tm_wday], month_name[time|-|>tm_mon],
MEMORY OFFSET:     -0x38     -56  >>-48

0x103db:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x103de:	cdqe                                #		    |s|printf(date_str, "%s %s %02d %d",
0x103e0:	lea rdx, [rax*8]                    
0x103e8:	lea rax, [rip + 0x20391]            
MEMORY OFFSET:     0x20391     131985  >>131993

0x103ef:	mov rcx, qword ptr [rdx + rax]      
0x103f3:	mov rax, qword ptr [rbp - 0x38]     #			    day_name[time|-|>tm_wday], month_name[time->tm_mon],
MEMORY OFFSET:     -0x38     -56  >>-48

0x103f7:	mov eax, dword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x103fa:	cdqe                                #		    |s|printf(date_str, "%s %s %02d %d",
0x103fc:	lea rdx, [rax*8]                    
0x10404:	lea rax, [rip + 0x20335]            
MEMORY OFFSET:     0x20335     131893  >>131901

0x1040b:	mov rdx, qword ptr [rdx + rax]      
0x1040f:	lea rax, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x10413:	mov r9d, edi                        
0x10416:	mov r8d, esi                        
0x10419:	lea rsi, [rip + 0x17ce8]            
MEMORY OFFSET:     0x17ce8     97512  >>97520

0x10420:	mov rdi, rax                        
0x10423:	mov eax, 0                          
0x10428:	call 0x4dd0                         
0x1042d:	lea rax, [rbp - 0x30]               #		    len = |s|trlen(date_str);
MEMORY OFFSET:     -0x30     -48  >>-40

0x10431:	mov rdi, rax                        
0x10434:	call 0x4960                         
0x10439:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1043d:	mov rax, qword ptr [rbp - 0x48]     #		    temp_msg = |x|realloc(temp_msg, temp_msg_len += len);
MEMORY OFFSET:     -0x48     -72  >>-64

0x10441:	add qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x10445:	mov rdx, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x10449:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1044d:	mov rsi, rdx                        
0x10450:	mov rdi, rax                        
0x10453:	call 0x24670                        
0x10458:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1045c:	mov eax, dword ptr [rbp - 0x5c]     #		    |m|emcpy(&temp_msg[j], date_str, len);
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1045f:	movsxd rdx, eax                     
0x10462:	mov rax, qword ptr [rbp - 0x50]     #		    memcpy(|&|temp_msg[j], date_str, len);
MEMORY OFFSET:     -0x50     -80  >>-72

0x10466:	lea rcx, [rdx + rax]                
0x1046a:	mov rdx, qword ptr [rbp - 0x48]     #		    |m|emcpy(&temp_msg[j], date_str, len);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1046e:	lea rax, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x10472:	mov rsi, rax                        
0x10475:	mov rdi, rcx                        
0x10478:	call 0x4b70                         
0x1047d:	mov rax, qword ptr [rbp - 0x48]     #		    j |+|= len;
MEMORY OFFSET:     -0x48     -72  >>-64

0x10481:	mov edx, eax                        
0x10483:	mov eax, dword ptr [rbp - 0x5c]     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x10486:	add eax, edx                        
0x10488:	mov dword ptr [rbp - 0x5c], eax     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1048b:	add dword ptr [rbp - 0x60], 1       #		    i|+|+;
MEMORY OFFSET:     -0x60     -96  >>-88

0x1048f:	jmp 0x10599                         #		    |b|reak;
0x10494:	mov eax, dword ptr [rbp - 0x5c]     #		    temp_msg[j|+|+] = '\\';
MEMORY OFFSET:     -0x5c     -92  >>-84

0x10497:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1049a:	mov dword ptr [rbp - 0x5c], edx     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1049d:	movsxd rdx, eax                     
0x104a0:	mov rax, qword ptr [rbp - 0x50]     #		    temp_msg|[|j++] = '\\';
MEMORY OFFSET:     -0x50     -80  >>-72

0x104a4:	add rax, rdx                        
0x104a7:	mov byte ptr [rax], 0x5c            #		    temp_msg[j++] |=| '\\';
0x104aa:	add dword ptr [rbp - 0x60], 1       #		    i|+|+;
MEMORY OFFSET:     -0x60     -96  >>-88

0x104ae:	jmp 0x10599                         #		    |b|reak;
0x104b3:	mov eax, dword ptr [rbp - 0x5c]     #		    temp_msg[j|+|+] = '\\';
MEMORY OFFSET:     -0x5c     -92  >>-84

0x104b6:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x104b9:	mov dword ptr [rbp - 0x5c], edx     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x104bc:	movsxd rdx, eax                     
0x104bf:	mov rax, qword ptr [rbp - 0x50]     #		    temp_msg|[|j++] = '\\';
MEMORY OFFSET:     -0x50     -80  >>-72

0x104c3:	add rax, rdx                        
0x104c6:	mov byte ptr [rax], 0x5c            #		    temp_msg[j++] |=| '\\';
0x104c9:	jmp 0x10599                         #		    |b|reak;
0x104ce:	mov eax, dword ptr [rbp - 0x5c]     #		    temp_msg[j|+|+] = '\\';
MEMORY OFFSET:     -0x5c     -92  >>-84

0x104d1:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x104d4:	mov dword ptr [rbp - 0x5c], edx     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x104d7:	movsxd rdx, eax                     
0x104da:	mov rax, qword ptr [rbp - 0x50]     #		    temp_msg|[|j++] = '\\';
MEMORY OFFSET:     -0x50     -80  >>-72

0x104de:	add rax, rdx                        
0x104e1:	mov byte ptr [rax], 0x5c            #		    temp_msg[j++] |=| '\\';
0x104e4:	mov rdx, qword ptr [rip + 0x20f3d]  #		    temp_msg[j++] = status_message|[|++i];
MEMORY OFFSET:     0x20f3d     134973  >>134981

0x104eb:	add dword ptr [rbp - 0x60], 1       #		    temp_msg[j++] |=| status_message[++i];
MEMORY OFFSET:     -0x60     -96  >>-88

0x104ef:	mov eax, dword ptr [rbp - 0x60]     #		    temp_msg[j++] = status_message[|+|+i];
MEMORY OFFSET:     -0x60     -96  >>-88

0x104f2:	cdqe                                
0x104f4:	lea rcx, [rdx + rax]                #		    temp_msg[j++] = status_message|[|++i];
0x104f8:	mov eax, dword ptr [rbp - 0x5c]     #		    temp_msg[j|+|+] = status_message[++i];
MEMORY OFFSET:     -0x5c     -92  >>-84

0x104fb:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x104fe:	mov dword ptr [rbp - 0x5c], edx     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x10501:	movsxd rdx, eax                     
0x10504:	mov rax, qword ptr [rbp - 0x50]     #		    temp_msg|[|j++] = status_message[++i];
MEMORY OFFSET:     -0x50     -80  >>-72

0x10508:	add rdx, rax                        
0x1050b:	movzx eax, byte ptr [rcx]           #		    temp_msg[j++] = status_message|[|++i];
0x1050e:	mov byte ptr [rdx], al              #		    temp_msg[j++] |=| status_message[++i];
0x10510:	jmp 0x10599                         #		    |b|reak;
0x10515:	mov rdx, qword ptr [rip + 0x20f0c]  #	    if (status_message|[|i] == '\t')
MEMORY OFFSET:     0x20f0c     134924  >>134932

0x1051c:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x1051f:	cdqe                                
0x10521:	add rax, rdx                        
0x10524:	movzx eax, byte ptr [rax]           
0x10527:	cmp al, 9                           #	    if |(|status_message[i] == '\t')
0x10529:	jne 0x10571                         
0x1052b:	add qword ptr [rbp - 0x40], 8       #		temp_msg = |x|realloc(temp_msg, temp_msg_len += 8);
MEMORY OFFSET:     -0x40     -64  >>-56

0x10530:	mov rdx, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x10534:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x10538:	mov rsi, rdx                        
0x1053b:	mov rdi, rax                        
0x1053e:	call 0x24670                        
0x10543:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x10547:	mov eax, dword ptr [rbp - 0x5c]     #		|m|emcpy(&temp_msg[j], "        ", 8);
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1054a:	movsxd rdx, eax                     
0x1054d:	mov rax, qword ptr [rbp - 0x50]     #		memcpy(|&|temp_msg[j], "        ", 8);
MEMORY OFFSET:     -0x50     -80  >>-72

0x10551:	add rax, rdx                        
0x10554:	mov edx, 8                          #		|m|emcpy(&temp_msg[j], "        ", 8);
0x10559:	lea rcx, [rip + 0x17bb6]            
MEMORY OFFSET:     0x17bb6     97206  >>97214

0x10560:	mov rsi, rcx                        
0x10563:	mov rdi, rax                        
0x10566:	call 0x4b70                         
0x1056b:	add dword ptr [rbp - 0x5c], 8       #		j |+|= 8;
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1056f:	jmp 0x10599                         
0x10571:	mov rdx, qword ptr [rip + 0x20eb0]  #		temp_msg[j++] = status_message|[|i];
MEMORY OFFSET:     0x20eb0     134832  >>134840

0x10578:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x1057b:	cdqe                                
0x1057d:	lea rcx, [rdx + rax]                
0x10581:	mov eax, dword ptr [rbp - 0x5c]     #		temp_msg[j|+|+] = status_message[i];
MEMORY OFFSET:     -0x5c     -92  >>-84

0x10584:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x10587:	mov dword ptr [rbp - 0x5c], edx     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1058a:	movsxd rdx, eax                     
0x1058d:	mov rax, qword ptr [rbp - 0x50]     #		temp_msg|[|j++] = status_message[i];
MEMORY OFFSET:     -0x50     -80  >>-72

0x10591:	add rdx, rax                        
0x10594:	movzx eax, byte ptr [rcx]           #		temp_msg[j++] = status_message|[|i];
0x10597:	mov byte ptr [rdx], al              #		temp_msg[j++] |=| status_message[i];
0x10599:	add dword ptr [rbp - 0x60], 1       #    for (i = 0, j = 0; status_message[i]; i|+|+)
MEMORY OFFSET:     -0x60     -96  >>-88

0x1059d:	mov rdx, qword ptr [rip + 0x20e84]  #    for (i = 0, j = 0; status_message|[|i]; i++)
MEMORY OFFSET:     0x20e84     134788  >>134796

0x105a4:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x105a7:	cdqe                                
0x105a9:	add rax, rdx                        
0x105ac:	movzx eax, byte ptr [rax]           
0x105af:	test al, al                         #    for (i = 0, j = 0; |s|tatus_message[i]; i++)
0x105b1:	jne 0x1024a                         
0x105b7:	mov eax, dword ptr [rbp - 0x5c]     #    temp_msg|[|j] = 0;
MEMORY OFFSET:     -0x5c     -92  >>-84

0x105ba:	movsxd rdx, eax                     
0x105bd:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x105c1:	add rax, rdx                        
0x105c4:	mov byte ptr [rax], 0               #    temp_msg[j] |=| 0;
0x105c7:	mov rax, qword ptr [rbp - 0x50]     #    len = |s|trlen(temp_msg);
MEMORY OFFSET:     -0x50     -80  >>-72

0x105cb:	mov rdi, rax                        
0x105ce:	call 0x4960                         
0x105d3:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x105d7:	movzx eax, byte ptr [rip + 0x20e53] #    if (status_alignment |=|= STATUS_CENTERED &&
MEMORY OFFSET:     0x20e53     134739  >>134747

0x105de:	test al, al                         #    if |(|status_alignment == STATUS_CENTERED &&
0x105e0:	jne 0x10629                         
0x105e2:	mov rax, qword ptr [rbp - 0x48]     #	|(|int)len < status_window->columns)
MEMORY OFFSET:     -0x48     -72  >>-64

0x105e6:	mov edx, eax                        
0x105e8:	mov rax, qword ptr [rip + 0x20e31]  #	(int)len < status_window|-|>columns)
MEMORY OFFSET:     0x20e31     134705  >>134713

0x105ef:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x105f2:	cmp edx, eax                        #    if (status_alignment == STATUS_CENTERED |&|&
0x105f4:	jge 0x10629                         
0x105f6:	mov rdx, qword ptr [rip + 0x20e3b]  #	|m|emcpy(status_buffer + ((status_window->columns - len) >> 1),
MEMORY OFFSET:     0x20e3b     134715  >>134723

0x105fd:	mov rax, qword ptr [rip + 0x20e1c]  #	memcpy(status_buffer + ((status_window|-|>columns - len) >> 1),
MEMORY OFFSET:     0x20e1c     134684  >>134692

0x10604:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x10607:	cdqe                                
0x10609:	sub rax, qword ptr [rbp - 0x48]     #	memcpy(status_buffer + ((status_window->columns |-| len) >> 1),
MEMORY OFFSET:     -0x48     -72  >>-64

0x1060d:	shr rax, 1                          #	memcpy(status_buffer + ((status_window->columns - len) |>|> 1),
0x10610:	lea rcx, [rdx + rax]                #	memcpy(status_buffer |+| ((status_window->columns - len) >> 1),
0x10614:	mov rdx, qword ptr [rbp - 0x48]     #	|m|emcpy(status_buffer + ((status_window->columns - len) >> 1),
MEMORY OFFSET:     -0x48     -72  >>-64

0x10618:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1061c:	mov rsi, rax                        
0x1061f:	mov rdi, rcx                        
0x10622:	call 0x4b70                         
0x10627:	jmp 0x10657                         
0x10629:	mov rax, qword ptr [rbp - 0x48]     #	memcpy(status_buffer, temp_msg, |m|in((int)len, status_window->columns));
MEMORY OFFSET:     -0x48     -72  >>-64

0x1062d:	mov edx, eax                        
0x1062f:	mov rax, qword ptr [rip + 0x20dea]  
MEMORY OFFSET:     0x20dea     134634  >>134642

0x10636:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x10639:	cmp edx, eax                        
0x1063b:	cmovle eax, edx                     
0x1063e:	movsxd rdx, eax                     #	|m|emcpy(status_buffer, temp_msg, min((int)len, status_window->columns));
0x10641:	mov rax, qword ptr [rip + 0x20df0]  
MEMORY OFFSET:     0x20df0     134640  >>134648

0x10648:	mov rcx, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1064c:	mov rsi, rcx                        
0x1064f:	mov rdi, rax                        
0x10652:	call 0x4b70                         
0x10657:	mov rax, qword ptr [rbp - 0x50]     #    |x|free(temp_msg);
MEMORY OFFSET:     -0x50     -80  >>-72

0x1065b:	mov rdi, rax                        
0x1065e:	call 0x1eeae                        
0x10663:	mov dword ptr [rbp - 0x60], 0       #    for (i |=| 0; i < status_window->columns; i++)
MEMORY OFFSET:     -0x60     -96  >>-88

0x1066a:	jmp 0x106ae                         #    |f|or (i = 0; i < status_window->columns; i++)
0x1066c:	mov rdx, qword ptr [rip + 0x20dc5]  #	if (status_buffer|[|i] == '\r' || status_buffer[i] == '\n')
MEMORY OFFSET:     0x20dc5     134597  >>134605

0x10673:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x10676:	cdqe                                
0x10678:	add rax, rdx                        
0x1067b:	movzx eax, byte ptr [rax]           
0x1067e:	cmp al, 0xd                         #	if |(|status_buffer[i] == '\r' || status_buffer[i] == '\n')
0x10680:	je 0x10698                          
0x10682:	mov rdx, qword ptr [rip + 0x20daf]  #	if (status_buffer[i] == '\r' || status_buffer|[|i] == '\n')
MEMORY OFFSET:     0x20daf     134575  >>134583

0x10689:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x1068c:	cdqe                                
0x1068e:	add rax, rdx                        
0x10691:	movzx eax, byte ptr [rax]           
0x10694:	cmp al, 0xa                         #	if (status_buffer[i] == '\r' |||| status_buffer[i] == '\n')
0x10696:	jne 0x106aa                         
0x10698:	mov rdx, qword ptr [rip + 0x20d99]  #	    status_buffer|[|i] = ' ';
MEMORY OFFSET:     0x20d99     134553  >>134561

0x1069f:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x106a2:	cdqe                                
0x106a4:	add rax, rdx                        
0x106a7:	mov byte ptr [rax], 0x20            #	    status_buffer[i] |=| ' ';
0x106aa:	add dword ptr [rbp - 0x60], 1       #    for (i = 0; i < status_window->columns; i|+|+)
MEMORY OFFSET:     -0x60     -96  >>-88

0x106ae:	mov rax, qword ptr [rip + 0x20d6b]  #    for (i = 0; i < status_window|-|>columns; i++)
MEMORY OFFSET:     0x20d6b     134507  >>134515

0x106b5:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x106b8:	cmp dword ptr [rbp - 0x60], eax     #    for (i = 0; i |<| status_window->columns; i++)
MEMORY OFFSET:     -0x60     -96  >>-88

0x106bb:	jl 0x1066c                          
0x106bd:	nop                                 #|}|
0x106be:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x106c2:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x106cb:	je 0x106d2                          
0x106cd:	call 0x4980                         
0x106d2:	leave                               
0x106d3:	ret                                 
0x106d4:	endbr64                             #|{|
0x106d8:	push rbp                            
0x106d9:	mov rbp, rsp                        
0x106dc:	sub rsp, 0x10                       
0x106e0:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x106e9:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x106ed:	xor eax, eax                        
0x106ef:	lea rax, [rbp - 9]                  #    |t|ty_save(&status);
MEMORY OFFSET:     -0x9     -9  >>-1

0x106f3:	mov rdi, rax                        
0x106f6:	call 0xc04b                         
0x106fb:	mov eax, 0                          #    |b|uild_message();
0x10700:	call 0x101d4                        
0x10705:	movzx eax, byte ptr [rip + 0x20d24] #    |s|witch (status_type)
MEMORY OFFSET:     0x20d24     134436  >>134444

0x1070c:	movsx eax, al                       
0x1070f:	cmp eax, 1                          
0x10712:	je 0x1071b                          
0x10714:	cmp eax, 2                          
0x10717:	je 0x10738                          
0x10719:	jmp 0x10755                         
0x1071b:	mov edx, dword ptr [rip + 0x1fbef]  #	    |t|ty_colors(StatusBarWarningBrightness,
MEMORY OFFSET:     0x1fbef     130031  >>130039

0x10721:	mov ecx, dword ptr [rip + 0x1fbe5]  
MEMORY OFFSET:     0x1fbe5     130021  >>130029

0x10727:	mov eax, dword ptr [rip + 0x1fbe7]  
MEMORY OFFSET:     0x1fbe7     130023  >>130031

0x1072d:	mov esi, ecx                        
0x1072f:	mov edi, eax                        
0x10731:	call 0xbf89                         
0x10736:	jmp 0x10771                         #	    |b|reak;
0x10738:	mov edx, dword ptr [rip + 0x1fbde]  #	    |t|ty_colors(StatusBarErrorBrightness,
MEMORY OFFSET:     0x1fbde     130014  >>130022

0x1073e:	mov ecx, dword ptr [rip + 0x1fbd4]  
MEMORY OFFSET:     0x1fbd4     130004  >>130012

0x10744:	mov eax, dword ptr [rip + 0x1fbd6]  
MEMORY OFFSET:     0x1fbd6     130006  >>130014

0x1074a:	mov esi, ecx                        
0x1074c:	mov edi, eax                        
0x1074e:	call 0xbf89                         
0x10753:	jmp 0x10771                         #	    |b|reak;
0x10755:	mov edx, dword ptr [rip + 0x1fba9]  #	    |t|ty_colors(StatusBarBrightness,
MEMORY OFFSET:     0x1fba9     129961  >>129969

0x1075b:	mov ecx, dword ptr [rip + 0x1fb9f]  
MEMORY OFFSET:     0x1fb9f     129951  >>129959

0x10761:	mov eax, dword ptr [rip + 0x1fba1]  
MEMORY OFFSET:     0x1fba1     129953  >>129961

0x10767:	mov esi, ecx                        
0x10769:	mov edi, eax                        
0x1076b:	call 0xbf89                         
0x10770:	nop                                 #	    |b|reak;
0x10771:	mov rax, qword ptr [rip + 0x20ca8]  #    |w|indow_goto(status_window, 0, 0);
MEMORY OFFSET:     0x20ca8     134312  >>134320

0x10778:	mov edx, 0                          
0x1077d:	mov esi, 0                          
0x10782:	mov rdi, rax                        
0x10785:	call 0xdc1e                         
0x1078a:	mov rax, qword ptr [rip + 0x20c8f]  #    window_puts(status_window, status_buffer, status_window|-|>columns);
MEMORY OFFSET:     0x20c8f     134287  >>134295

0x10791:	mov edx, dword ptr [rax + 0xc]      #    |w|indow_puts(status_window, status_buffer, status_window->columns);
MEMORY OFFSET:     0xc     12  >>20

0x10794:	mov rcx, qword ptr [rip + 0x20c9d]  
MEMORY OFFSET:     0x20c9d     134301  >>134309

0x1079b:	mov rax, qword ptr [rip + 0x20c7e]  
MEMORY OFFSET:     0x20c7e     134270  >>134278

0x107a2:	mov rsi, rcx                        
0x107a5:	mov rdi, rax                        
0x107a8:	call 0xdb1a                         
0x107ad:	lea rax, [rbp - 9]                  #    |t|ty_restore(&status);
MEMORY OFFSET:     -0x9     -9  >>-1

0x107b1:	mov rdi, rax                        
0x107b4:	call 0xc067                         
0x107b9:	nop                                 #|}|
0x107ba:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x107be:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x107c7:	je 0x107ce                          
0x107c9:	call 0x4980                         
0x107ce:	leave                               
0x107cf:	ret                                 
0x107d0:	endbr64                             #|{|
0x107d4:	push rbp                            
0x107d5:	mov rbp, rsp                        
0x107d8:	sub rsp, 0x10                       
0x107dc:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x107e0:	mov dword ptr [rbp - 0xc], esi      
MEMORY OFFSET:     -0xc     -12  >>-4

0x107e3:	mov dword ptr [rbp - 0x10], edx     
MEMORY OFFSET:     -0x10     -16  >>-8

0x107e6:	mov rax, qword ptr [rip + 0x20c3b]  #    if (|s|tatus_message)
MEMORY OFFSET:     0x20c3b     134203  >>134211

0x107ed:	test rax, rax                       #    if |(|status_message)
0x107f0:	je 0x10801                          
0x107f2:	mov rax, qword ptr [rip + 0x20c2f]  #	|x|free(status_message);
MEMORY OFFSET:     0x20c2f     134191  >>134199

0x107f9:	mov rdi, rax                        
0x107fc:	call 0x1eeae                        
0x10801:	mov rax, qword ptr [rbp - 8]        #    status_message = |x|strdup(message);
MEMORY OFFSET:     -0x8     -8  >>0

0x10805:	mov rdi, rax                        
0x10808:	call 0x24780                        
0x1080d:	mov qword ptr [rip + 0x20c14], rax  #    status_message |=| xstrdup(message);
MEMORY OFFSET:     0x20c14     134164  >>134172

0x10814:	mov rax, qword ptr [rip + 0x20c0d]  #    |t|oprintable(status_message, strlen(status_message));
MEMORY OFFSET:     0x20c0d     134157  >>134165

0x1081b:	mov rdi, rax                        
0x1081e:	call 0x4960                         
0x10823:	mov rdx, rax                        
0x10826:	mov rax, qword ptr [rip + 0x20bfb]  
MEMORY OFFSET:     0x20bfb     134139  >>134147

0x1082d:	mov rsi, rdx                        
0x10830:	mov rdi, rax                        
0x10833:	call 0x1e5b1                        
0x10838:	mov eax, dword ptr [rbp - 0xc]      #    status_type |=| type;
MEMORY OFFSET:     -0xc     -12  >>-4

0x1083b:	mov byte ptr [rip + 0x20bef], al    
MEMORY OFFSET:     0x20bef     134127  >>134135

0x10841:	mov eax, dword ptr [rbp - 0x10]     #    status_alignment |=| alignment;
MEMORY OFFSET:     -0x10     -16  >>-8

0x10844:	mov byte ptr [rip + 0x20be7], al    
MEMORY OFFSET:     0x20be7     134119  >>134127

0x1084a:	mov eax, 0                          #    |s|tatus_update();
0x1084f:	call 0x106d4                        
0x10854:	nop                                 #|}|
0x10855:	leave                               
0x10856:	ret                                 
0x10857:	endbr64                             #|{|
0x1085b:	push rbp                            
0x1085c:	mov rbp, rsp                        
0x1085f:	mov rax, qword ptr [rip + 0x20bda]  #    |s|tatus(xstrdup(status_default_message), STATUS_OK, STATUS_CENTERED);
MEMORY OFFSET:     0x20bda     134106  >>134114

0x10866:	mov rdi, rax                        
0x10869:	call 0x24780                        
0x1086e:	mov edx, 0                          
0x10873:	mov esi, 0                          
0x10878:	mov rdi, rax                        
0x1087b:	call 0x107d0                        
0x10880:	nop                                 #|}|
0x10881:	pop rbp                             
0x10882:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/panel.c
####################################################################################################

0x10883:	endbr64                             #|{|
0x10887:	push rbp                            
0x10888:	mov rbp, rsp                        
0x1088b:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1088f:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x10893:	mov rax, qword ptr [rbp - 0x18]     #    int |t|mp = *a;
MEMORY OFFSET:     -0x18     -24  >>-16

0x10897:	mov eax, dword ptr [rax]            
0x10899:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x1089c:	mov rax, qword ptr [rbp - 0x20]     #    *a = |*|b;
MEMORY OFFSET:     -0x20     -32  >>-24

0x108a0:	mov edx, dword ptr [rax]            
0x108a2:	mov rax, qword ptr [rbp - 0x18]     #    *a |=| *b;
MEMORY OFFSET:     -0x18     -24  >>-16

0x108a6:	mov dword ptr [rax], edx            
0x108a8:	mov rax, qword ptr [rbp - 0x20]     #    *b |=| tmp;
MEMORY OFFSET:     -0x20     -32  >>-24

0x108ac:	mov edx, dword ptr [rbp - 4]        
MEMORY OFFSET:     -0x4     -4  >>4

0x108af:	mov dword ptr [rax], edx            
0x108b1:	nop                                 #|}|
0x108b2:	pop rbp                             
0x108b3:	ret                                 
0x108b4:	endbr64                             #|{|
0x108b8:	push rbp                            
0x108b9:	mov rbp, rsp                        
0x108bc:	sub rsp, 0x20                       
0x108c0:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x108c4:	mov edi, 0x98                       #    panel_t *this = (panel_t *)|x|malloc(sizeof(panel_t));
0x108c9:	call 0x24650                        
0x108ce:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x108d2:	mov rax, qword ptr [rbp - 8]        #    this->x		    |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x108d6:	mov dword ptr [rax + 0x58], 0       
MEMORY OFFSET:     0x58     88  >>96

0x108dd:	mov rax, qword ptr [rbp - 8]        #    this->y		    |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x108e1:	mov dword ptr [rax + 0x5c], 0       
MEMORY OFFSET:     0x5c     92  >>100

0x108e8:	mov rax, qword ptr [rbp - 8]        #    this->lines		    |=| 1;
MEMORY OFFSET:     -0x8     -8  >>0

0x108ec:	mov dword ptr [rax + 0x60], 1       
MEMORY OFFSET:     0x60     96  >>104

0x108f3:	mov rax, qword ptr [rbp - 8]        #    this->columns	    |=| 1;
MEMORY OFFSET:     -0x8     -8  >>0

0x108f7:	mov dword ptr [rax + 0x64], 1       
MEMORY OFFSET:     0x64     100  >>108

0x108fe:	mov rax, qword ptr [rbp - 8]        #    this->focus		    |=| OFF;
MEMORY OFFSET:     -0x8     -8  >>0

0x10902:	mov byte ptr [rax + 0x6c], 0        
MEMORY OFFSET:     0x6c     108  >>116

0x10906:	mov rax, qword ptr [rbp - 8]        #    this->entries	    |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x1090a:	mov dword ptr [rax + 0x68], 0       
MEMORY OFFSET:     0x68     104  >>112

0x10911:	mov rax, qword ptr [rbp - 8]        #    this->selected_entries  |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x10915:	mov dword ptr [rax + 0x70], 0       
MEMORY OFFSET:     0x70     112  >>120

0x1091c:	mov rax, qword ptr [rbp - 8]        #    this->last_index	    |=| -1;
MEMORY OFFSET:     -0x8     -8  >>0

0x10920:	mov dword ptr [rax + 0x50], 0xffffffff
MEMORY OFFSET:     0x50     80  >>88

0x10927:	mov rax, qword ptr [rbp - 8]        #    this->display_mode	    = this->sort_method |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x1092b:	mov dword ptr [rax + 0x84], 0       
MEMORY OFFSET:     0x84     132  >>140

0x10935:	mov rax, qword ptr [rbp - 8]        #    this->display_mode	    = this|-|>sort_method = 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x10939:	mov edx, dword ptr [rax + 0x84]     
MEMORY OFFSET:     0x84     132  >>140

0x1093f:	mov rax, qword ptr [rbp - 8]        #    this->display_mode	    |=| this->sort_method = 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x10943:	mov dword ptr [rax + 0x80], edx     
MEMORY OFFSET:     0x80     128  >>136

0x10949:	mov rax, qword ptr [rbp - 8]        #    this->current_entry	    |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x1094d:	mov dword ptr [rax + 0x28], 0       
MEMORY OFFSET:     0x28     40  >>48

0x10954:	mov rax, qword ptr [rbp - 8]        #    this->first_on_screen   |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x10958:	mov dword ptr [rax + 0x2c], 0       
MEMORY OFFSET:     0x2c     44  >>52

0x1095f:	mov rax, qword ptr [rbp - 8]        #    this->on_screen	    |=| INT_MAX / 2;
MEMORY OFFSET:     -0x8     -8  >>0

0x10963:	mov dword ptr [rax + 0x14], 0x3fffffff
MEMORY OFFSET:     0x14     20  >>28

0x1096a:	mov rax, qword ptr [rbp - 8]        #    this->temp		    |=| NULL;
MEMORY OFFSET:     -0x8     -8  >>0

0x1096e:	mov qword ptr [rax + 0x20], 0       
MEMORY OFFSET:     0x20     32  >>40

0x10976:	mov rax, qword ptr [rbp - 8]        #    this->dir		    |=| NULL;
MEMORY OFFSET:     -0x8     -8  >>0

0x1097a:	mov qword ptr [rax], 0              
0x10981:	mov rax, qword ptr [rbp - 8]        #    this->isearch_stack	    |=| NULL;
MEMORY OFFSET:     -0x8     -8  >>0

0x10985:	mov qword ptr [rax + 0x48], 0       
MEMORY OFFSET:     0x48     72  >>80

0x1098d:	mov rax, qword ptr [rbp - 8]        #    this->visible	    |=| 1;
MEMORY OFFSET:     -0x8     -8  >>0

0x10991:	mov byte ptr [rax + 0x6d], 1        
MEMORY OFFSET:     0x6d     109  >>117

0x10995:	mov rax, qword ptr [rbp - 8]        #    this->scroll_step       |=| 1;
MEMORY OFFSET:     -0x8     -8  >>0

0x10999:	mov dword ptr [rax + 0x88], 1       
MEMORY OFFSET:     0x88     136  >>144

0x109a3:	mov rax, qword ptr [rbp - 8]        #    this->thumb		    |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x109a7:	mov dword ptr [rax + 0x8c], 0       
MEMORY OFFSET:     0x8c     140  >>148

0x109b1:	mov rax, qword ptr [rbp - 8]        #    this->horizontal_offset |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x109b5:	mov dword ptr [rax + 0x74], 0       
MEMORY OFFSET:     0x74     116  >>124

0x109bc:	mov rax, qword ptr [rbp - 8]        #    this->msdosfs |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x109c0:	mov dword ptr [rax + 0x10], 0       
MEMORY OFFSET:     0x10     16  >>24

0x109c7:	mov rax, qword ptr [rbp - 8]        #    this->dir_entry |=| NULL;
MEMORY OFFSET:     -0x8     -8  >>0

0x109cb:	mov qword ptr [rax + 0x38], 0       
MEMORY OFFSET:     0x38     56  >>64

0x109d3:	mov rax, qword ptr [rbp - 0x18]     #    if (|c|hdir(path) == -1)
MEMORY OFFSET:     -0x18     -24  >>-16

0x109d7:	mov rdi, rax                        
0x109da:	call 0x4970                         
0x109df:	cmp eax, -1                         #    if |(|chdir(path) == -1)
0x109e2:	jne 0x109f3                         
0x109e4:	lea rax, [rip + 0x17ad5]            #	|f|atal("`chdir' failed: permission denied");
MEMORY OFFSET:     0x17ad5     96981  >>96989

0x109eb:	mov rdi, rax                        
0x109ee:	call 0x672c                         
0x109f3:	mov eax, 0                          #    this->path = |x|getcwd();
0x109f8:	call 0x1f18e                        
0x109fd:	mov rdx, qword ptr [rbp - 8]        #    this->path |=| xgetcwd();
MEMORY OFFSET:     -0x8     -8  >>0

0x10a01:	mov qword ptr [rdx + 0x18], rax     
MEMORY OFFSET:     0x18     24  >>32

0x10a05:	mov rax, qword ptr [rbp - 8]        #    if (this|-|>path == NULL)
MEMORY OFFSET:     -0x8     -8  >>0

0x10a09:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x10a0d:	test rax, rax                       #    if |(|this->path == NULL)
0x10a10:	jne 0x10a21                         
0x10a12:	lea rax, [rip + 0x17acf]            #	|f|atal("`getcwd' failed: permission denied");
MEMORY OFFSET:     0x17acf     96975  >>96983

0x10a19:	mov rdi, rax                        
0x10a1c:	call 0x672c                         
0x10a21:	mov rax, qword ptr [rbp - 8]        #    |m|inimize_path(this->path);
MEMORY OFFSET:     -0x8     -8  >>0

0x10a25:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x10a29:	mov rdi, rax                        
0x10a2c:	call 0x1e08b                        
0x10a31:	mov rax, qword ptr [rbp - 8]        #    this->pathlen = strlen(this|-|>path);
MEMORY OFFSET:     -0x8     -8  >>0

0x10a35:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x10a39:	mov rdi, rax                        #    this->pathlen = |s|trlen(this->path);
0x10a3c:	call 0x4960                         
0x10a41:	mov rdx, qword ptr [rbp - 8]        #    this->pathlen |=| strlen(this->path);
MEMORY OFFSET:     -0x8     -8  >>0

0x10a45:	mov qword ptr [rdx + 0x78], rax     
MEMORY OFFSET:     0x78     120  >>128

0x10a49:	mov eax, 0                          #    this->window = |w|indow_init();
0x10a4e:	call 0xda70                         
0x10a53:	mov rdx, qword ptr [rbp - 8]        #    this->window |=| window_init();
MEMORY OFFSET:     -0x8     -8  >>0

0x10a57:	mov qword ptr [rdx + 8], rax        
MEMORY OFFSET:     0x8     8  >>16

0x10a5b:	mov eax, dword ptr [rip + 0x20bb7]  #    if (|c|onfigured)
MEMORY OFFSET:     0x20bb7     134071  >>134079

0x10a61:	test eax, eax                       #    if |(|configured)
0x10a63:	je 0x10a8e                          
0x10a65:	mov edx, dword ptr [rip + 0x20b7d]  #	this->display_mode |=| StartupFileDisplayMode;
MEMORY OFFSET:     0x20b7d     134013  >>134021

0x10a6b:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x10a6f:	mov dword ptr [rax + 0x80], edx     
MEMORY OFFSET:     0x80     128  >>136

0x10a75:	mov edx, dword ptr [rip + 0x20b71]  #	this->sort_method  |=| StartupFileSortMethod;
MEMORY OFFSET:     0x20b71     134001  >>134009

0x10a7b:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x10a7f:	mov dword ptr [rax + 0x84], edx     
MEMORY OFFSET:     0x84     132  >>140

0x10a85:	mov rax, qword ptr [rbp - 8]        #	return |t|his;
MEMORY OFFSET:     -0x8     -8  >>0

0x10a89:	jmp 0x10bed                         
0x10a8e:	lea rax, [rip + 0x17a76]            #    |u|se_section("[Setup]");
MEMORY OFFSET:     0x17a76     96886  >>96894

0x10a95:	mov rdi, rax                        
0x10a98:	call 0x1dbc4                        
0x10a9d:	mov esi, 0                          #    StartupScrollStep = |g|et_int_var("StartupScrollStep", 0);
0x10aa2:	lea rax, [rip + 0x17a6a]            
MEMORY OFFSET:     0x17a6a     96874  >>96882

0x10aa9:	mov rdi, rax                        
0x10aac:	call 0x1dcfd                        
0x10ab1:	mov dword ptr [rip + 0x20b39], eax  #    StartupScrollStep |=| get_int_var("StartupScrollStep", 0);
MEMORY OFFSET:     0x20b39     133945  >>133953

0x10ab7:	lea rax, [rip + 0x17a67]            #    |u|se_section("[GITFM-Setup]");
MEMORY OFFSET:     0x17a67     96871  >>96879

0x10abe:	mov rdi, rax                        
0x10ac1:	call 0x1dbc4                        
0x10ac6:	mov ecx, 0                          #    StartupFileDisplayMode = |g|et_const_var("StartupFileDisplayMode",
0x10acb:	mov edx, 6                          
0x10ad0:	lea rax, [rip + 0x1f869]            
MEMORY OFFSET:     0x1f869     129129  >>129137

0x10ad7:	mov rsi, rax                        
0x10ada:	lea rax, [rip + 0x17a52]            
MEMORY OFFSET:     0x17a52     96850  >>96858

0x10ae1:	mov rdi, rax                        
0x10ae4:	call 0x1dd69                        
0x10ae9:	mov dword ptr [rip + 0x20af9], eax  #    StartupFileDisplayMode |=| get_const_var("StartupFileDisplayMode",
MEMORY OFFSET:     0x20af9     133881  >>133889

0x10aef:	mov edx, dword ptr [rip + 0x20af3]  #    this->display_mode |=| StartupFileDisplayMode;
MEMORY OFFSET:     0x20af3     133875  >>133883

0x10af5:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x10af9:	mov dword ptr [rax + 0x80], edx     
MEMORY OFFSET:     0x80     128  >>136

0x10aff:	mov ecx, 0                          #    StartupFileSortMethod = |g|et_const_var("StartupFileSortMethod",
0x10b04:	mov edx, 9                          
0x10b09:	lea rax, [rip + 0x1f870]            
MEMORY OFFSET:     0x1f870     129136  >>129144

0x10b10:	mov rsi, rax                        
0x10b13:	lea rax, [rip + 0x17a30]            
MEMORY OFFSET:     0x17a30     96816  >>96824

0x10b1a:	mov rdi, rax                        
0x10b1d:	call 0x1dd69                        
0x10b22:	mov dword ptr [rip + 0x20ac4], eax  #    StartupFileSortMethod |=| get_const_var("StartupFileSortMethod",
MEMORY OFFSET:     0x20ac4     133828  >>133836

0x10b28:	mov edx, dword ptr [rip + 0x20abe]  #    this->sort_method |=| StartupFileSortMethod;
MEMORY OFFSET:     0x20abe     133822  >>133830

0x10b2e:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x10b32:	mov dword ptr [rax + 0x84], edx     
MEMORY OFFSET:     0x84     132  >>140

0x10b38:	mov esi, 1                          #    InfoDisplay     = |g|et_flag_var("InfoDisplay",     ON);
0x10b3d:	lea rax, [rip + 0x17a1c]            
MEMORY OFFSET:     0x17a1c     96796  >>96804

0x10b44:	mov rdi, rax                        
0x10b47:	call 0x1de4c                        
0x10b4c:	mov dword ptr [rip + 0x20aaa], eax  #    InfoDisplay     |=| get_flag_var("InfoDisplay",     ON);
MEMORY OFFSET:     0x20aaa     133802  >>133810

0x10b52:	mov esi, 1                          #    LeadingDotMatch = |g|et_flag_var("LeadingDotMatch", ON);
0x10b57:	lea rax, [rip + 0x17a0e]            
MEMORY OFFSET:     0x17a0e     96782  >>96790

0x10b5e:	mov rdi, rax                        
0x10b61:	call 0x1de4c                        
0x10b66:	mov dword ptr [rip + 0x20a8c], eax  #    LeadingDotMatch |=| get_flag_var("LeadingDotMatch", ON);
MEMORY OFFSET:     0x20a8c     133772  >>133780

0x10b6c:	mov eax, dword ptr [rip + 0x1e4a6]  #    use_section(AnsiColors |?| color_section : monochrome_section);
MEMORY OFFSET:     0x1e4a6     124070  >>124078

0x10b72:	test eax, eax                       #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x10b74:	je 0x10b7f                          
0x10b76:	lea rax, [rip + 0x1e4b3]            #    |u|se_section(AnsiColors ? color_section : monochrome_section);
MEMORY OFFSET:     0x1e4b3     124083  >>124091

0x10b7d:	jmp 0x10b86                         
0x10b7f:	lea rax, [rip + 0x1e4ba]            #    |u|se_section(AnsiColors ? color_section : monochrome_section);
MEMORY OFFSET:     0x1e4ba     124090  >>124098

0x10b86:	mov rdi, rax                        #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x10b89:	call 0x1dbc4                        
0x10b8e:	mov edx, 0x14                       #    |g|et_colorset_var(PanelColors, PanelFields, PANEL_FIELDS);
0x10b93:	lea rax, [rip + 0x1f846]            
MEMORY OFFSET:     0x1f846     129094  >>129102

0x10b9a:	mov rsi, rax                        
0x10b9d:	lea rax, [rip + 0x1f8dc]            
MEMORY OFFSET:     0x1f8dc     129244  >>129252

0x10ba4:	mov rdi, rax                        
0x10ba7:	call 0x1df8c                        
0x10bac:	mov edi, 8                          #    copy_history  = |x|stack_init(sizeof(char *));
0x10bb1:	call 0x1f30c                        
0x10bb6:	mov qword ptr [rip + 0x20a43], rax  #    copy_history  |=| xstack_init(sizeof(char *));
MEMORY OFFSET:     0x20a43     133699  >>133707

0x10bbd:	mov edi, 8                          #    move_history  = |x|stack_init(sizeof(char *));
0x10bc2:	call 0x1f30c                        
0x10bc7:	mov qword ptr [rip + 0x20a3a], rax  #    move_history  |=| xstack_init(sizeof(char *));
MEMORY OFFSET:     0x20a3a     133690  >>133698

0x10bce:	mov edi, 8                          #    mkdir_history = |x|stack_init(sizeof(char *));
0x10bd3:	call 0x1f30c                        
0x10bd8:	mov qword ptr [rip + 0x20a31], rax  #    mkdir_history |=| xstack_init(sizeof(char *));
MEMORY OFFSET:     0x20a31     133681  >>133689

0x10bdf:	mov dword ptr [rip + 0x20a2f], 1    #    configured |=| 1;
MEMORY OFFSET:     0x20a2f     133679  >>133687

0x10be9:	mov rax, qword ptr [rbp - 8]        #    return |t|his;
MEMORY OFFSET:     -0x8     -8  >>0

0x10bed:	leave                               #|}|
0x10bee:	ret                                 
0x10bef:	endbr64                             #|{|
0x10bf3:	push rbp                            
0x10bf4:	mov rbp, rsp                        
0x10bf7:	sub rsp, 0x20                       
0x10bfb:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x10bff:	mov rax, qword ptr [rbp - 0x18]     #    if (this|-|>dir)
MEMORY OFFSET:     -0x18     -24  >>-16

0x10c03:	mov rax, qword ptr [rax]            
0x10c06:	test rax, rax                       #    if |(|this->dir)
0x10c09:	je 0x10c1a                          
0x10c0b:	mov rax, qword ptr [rbp - 0x18]     #	|c|losedir(this->dir);
MEMORY OFFSET:     -0x18     -24  >>-16

0x10c0f:	mov rax, qword ptr [rax]            
0x10c12:	mov rdi, rax                        
0x10c15:	call 0x4a80                         
0x10c1a:	mov dword ptr [rbp - 4], 0          #    for (i |=| 0; i < this->entries; i++)
MEMORY OFFSET:     -0x4     -4  >>4

0x10c21:	jmp 0x10c9e                         #    |f|or (i = 0; i < this->entries; i++)
0x10c23:	mov rax, qword ptr [rbp - 0x18]     #	if (this|-|>dir_entry[i].name)
MEMORY OFFSET:     -0x18     -24  >>-16

0x10c27:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x10c2b:	mov eax, dword ptr [rbp - 4]        #	if (this->dir_entry|[|i].name)
MEMORY OFFSET:     -0x4     -4  >>4

0x10c2e:	movsxd rdx, eax                     
0x10c31:	mov rax, rdx                        
0x10c34:	shl rax, 2                          
0x10c38:	add rax, rdx                        
0x10c3b:	shl rax, 4                          
0x10c3f:	add rax, rcx                        
0x10c42:	mov rax, qword ptr [rax]            #	if (this->dir_entry[i]|.|name)
0x10c45:	test rax, rax                       #	if |(|this->dir_entry[i].name)
0x10c48:	je 0x10c9a                          
0x10c4a:	mov rax, qword ptr [rbp - 0x18]     #	    xfree(this|-|>dir_entry[i].name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x10c4e:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x10c52:	mov eax, dword ptr [rbp - 4]        #	    xfree(this->dir_entry|[|i].name);
MEMORY OFFSET:     -0x4     -4  >>4

0x10c55:	movsxd rdx, eax                     
0x10c58:	mov rax, rdx                        
0x10c5b:	shl rax, 2                          
0x10c5f:	add rax, rdx                        
0x10c62:	shl rax, 4                          
0x10c66:	add rax, rcx                        
0x10c69:	mov rax, qword ptr [rax]            #	    xfree(this->dir_entry[i]|.|name);
0x10c6c:	mov rdi, rax                        #	    |x|free(this->dir_entry[i].name);
0x10c6f:	call 0x1eeae                        
0x10c74:	mov rax, qword ptr [rbp - 0x18]     #	    this|-|>dir_entry[i].name = NULL;
MEMORY OFFSET:     -0x18     -24  >>-16

0x10c78:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x10c7c:	mov eax, dword ptr [rbp - 4]        #	    this->dir_entry|[|i].name = NULL;
MEMORY OFFSET:     -0x4     -4  >>4

0x10c7f:	movsxd rdx, eax                     
0x10c82:	mov rax, rdx                        
0x10c85:	shl rax, 2                          
0x10c89:	add rax, rdx                        
0x10c8c:	shl rax, 4                          
0x10c90:	add rax, rcx                        
0x10c93:	mov qword ptr [rax], 0              #	    this->dir_entry[i].name |=| NULL;
0x10c9a:	add dword ptr [rbp - 4], 1          #    for (i = 0; i < this->entries; i|+|+)
MEMORY OFFSET:     -0x4     -4  >>4

0x10c9e:	mov rax, qword ptr [rbp - 0x18]     #    for (i = 0; i < this|-|>entries; i++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x10ca2:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x10ca5:	cmp dword ptr [rbp - 4], eax        #    for (i = 0; i |<| this->entries; i++)
MEMORY OFFSET:     -0x4     -4  >>4

0x10ca8:	jl 0x10c23                          
0x10cae:	mov rax, qword ptr [rbp - 0x18]     #    xfree(this|-|>dir_entry);
MEMORY OFFSET:     -0x18     -24  >>-16

0x10cb2:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x10cb6:	mov rdi, rax                        #    |x|free(this->dir_entry);
0x10cb9:	call 0x1eeae                        
0x10cbe:	mov rax, qword ptr [rbp - 0x18]     #    xfree(this|-|>temp);
MEMORY OFFSET:     -0x18     -24  >>-16

0x10cc2:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x10cc6:	mov rdi, rax                        #    |x|free(this->temp);
0x10cc9:	call 0x1eeae                        
0x10cce:	mov rax, qword ptr [rbp - 0x18]     #    |w|indow_end(this->window);
MEMORY OFFSET:     -0x18     -24  >>-16

0x10cd2:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x10cd6:	mov rdi, rax                        
0x10cd9:	call 0xdab1                         
0x10cde:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(this);
MEMORY OFFSET:     -0x18     -24  >>-16

0x10ce2:	mov rdi, rax                        
0x10ce5:	call 0x1eeae                        
0x10cea:	nop                                 #|}|
0x10ceb:	leave                               
0x10cec:	ret                                 
0x10ced:	endbr64                             #|{|
0x10cf1:	push rbp                            
0x10cf2:	mov rbp, rsp                        
0x10cf5:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x10cf9:	mov rax, qword ptr [rbp - 8]        #    return this|-|>window;
MEMORY OFFSET:     -0x8     -8  >>0

0x10cfd:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x10d01:	pop rbp                             #|}|
0x10d02:	ret                                 
0x10d03:	endbr64                             #|{|
0x10d07:	push rbp                            
0x10d08:	mov rbp, rsp                        
0x10d0b:	sub rsp, 0x10                       
0x10d0f:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x10d13:	mov dword ptr [rbp - 0xc], esi      
MEMORY OFFSET:     -0xc     -12  >>-4

0x10d16:	mov dword ptr [rbp - 0x10], edx     
MEMORY OFFSET:     -0x10     -16  >>-8

0x10d19:	cmp dword ptr [rbp - 0x10], 0       #    if |(|filled)
MEMORY OFFSET:     -0x10     -16  >>-8

0x10d1d:	je 0x10db1                          
0x10d23:	mov eax, dword ptr [rbp - 0xc]      #	memset(tname|[|which], ' ', 14);
MEMORY OFFSET:     -0xc     -12  >>-4

0x10d26:	cdqe                                
0x10d28:	shl rax, 4                          
0x10d2c:	mov rdx, rax                        
0x10d2f:	lea rax, [rip + 0x208ea]            
MEMORY OFFSET:     0x208ea     133354  >>133362

0x10d36:	add rax, rdx                        
0x10d39:	mov edx, 0xe                        #	|m|emset(tname[which], ' ', 14);
0x10d3e:	mov esi, 0x20                       
0x10d43:	mov rdi, rax                        
0x10d46:	call 0x4a10                         
0x10d4b:	mov eax, dword ptr [rbp - 0xc]      #	tname[which][14] |=| 0;
MEMORY OFFSET:     -0xc     -12  >>-4

0x10d4e:	cdqe                                
0x10d50:	shl rax, 4                          
0x10d54:	mov rdx, rax                        
0x10d57:	lea rax, [rip + 0x208d0]            
MEMORY OFFSET:     0x208d0     133328  >>133336

0x10d5e:	mov byte ptr [rdx + rax], 0         
0x10d62:	mov rax, qword ptr [rbp - 8]        #	return memcpy(tname[which], name, |m|in(strlen(name), 14));
MEMORY OFFSET:     -0x8     -8  >>0

0x10d66:	mov rdi, rax                        
0x10d69:	call 0x4960                         
0x10d6e:	cmp rax, 0xe                        #	return |m|emcpy(tname[which], name, min(strlen(name), 14));
0x10d72:	ja 0x10d85                          
0x10d74:	mov rax, qword ptr [rbp - 8]        #	return memcpy(tname[which], name, |m|in(strlen(name), 14));
MEMORY OFFSET:     -0x8     -8  >>0

0x10d78:	mov rdi, rax                        
0x10d7b:	call 0x4960                         
0x10d80:	mov rdx, rax                        
0x10d83:	jmp 0x10d8a                         
0x10d85:	mov edx, 0xe                        #	return |m|emcpy(tname[which], name, min(strlen(name), 14));
0x10d8a:	mov eax, dword ptr [rbp - 0xc]      #	return memcpy(tname|[|which], name, min(strlen(name), 14));
MEMORY OFFSET:     -0xc     -12  >>-4

0x10d8d:	cdqe                                
0x10d8f:	shl rax, 4                          
0x10d93:	mov rcx, rax                        
0x10d96:	lea rax, [rip + 0x20883]            
MEMORY OFFSET:     0x20883     133251  >>133259

0x10d9d:	add rcx, rax                        
0x10da0:	mov rax, qword ptr [rbp - 8]        #	return |m|emcpy(tname[which], name, min(strlen(name), 14));
MEMORY OFFSET:     -0x8     -8  >>0

0x10da4:	mov rsi, rax                        
0x10da7:	mov rdi, rcx                        
0x10daa:	call 0x4b70                         
0x10daf:	jmp 0x10ddc                         
0x10db1:	mov eax, dword ptr [rbp - 0xc]      #	return strncpy(tname|[|which], name, 14);
MEMORY OFFSET:     -0xc     -12  >>-4

0x10db4:	cdqe                                
0x10db6:	shl rax, 4                          
0x10dba:	mov rdx, rax                        
0x10dbd:	lea rax, [rip + 0x2085c]            
MEMORY OFFSET:     0x2085c     133212  >>133220

0x10dc4:	lea rcx, [rdx + rax]                
0x10dc8:	mov rax, qword ptr [rbp - 8]        #	return |s|trncpy(tname[which], name, 14);
MEMORY OFFSET:     -0x8     -8  >>0

0x10dcc:	mov edx, 0xe                        
0x10dd1:	mov rsi, rax                        
0x10dd4:	mov rdi, rcx                        
0x10dd7:	call 0x4840                         
0x10ddc:	leave                               #|}|
0x10ddd:	ret                                 
0x10dde:	endbr64                             #|{|
0x10de2:	push rbp                            
0x10de3:	mov rbp, rsp                        
0x10de6:	sub rsp, 0x40                       
0x10dea:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x10dee:	mov qword ptr [rbp - 0x40], rsi     
MEMORY OFFSET:     -0x40     -64  >>-56

0x10df2:	mov rax, qword ptr [rbp - 0x38]     #    const dir_entry_t *|f|irst  = (const dir_entry_t *)_first;
MEMORY OFFSET:     -0x38     -56  >>-48

0x10df6:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x10dfa:	mov rax, qword ptr [rbp - 0x40]     #    const dir_entry_t *|s|econd = (const dir_entry_t *)_second;
MEMORY OFFSET:     -0x40     -64  >>-56

0x10dfe:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x10e02:	mov rax, qword ptr [rbp - 0x20]     #    int first_is_dir  = first|-|>type  == DIR_ENTRY;
MEMORY OFFSET:     -0x20     -32  >>-24

0x10e06:	movzx eax, byte ptr [rax + 0x48]    
MEMORY OFFSET:     0x48     72  >>80

0x10e0a:	test al, al                         #    int first_is_dir  = first->type  |=|= DIR_ENTRY;
0x10e0c:	sete al                             
0x10e0f:	movzx eax, al                       #    int |f|irst_is_dir  = first->type  == DIR_ENTRY;
0x10e12:	mov dword ptr [rbp - 0x2c], eax     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x10e15:	mov rax, qword ptr [rbp - 0x18]     #    int second_is_dir = second|-|>type == DIR_ENTRY;
MEMORY OFFSET:     -0x18     -24  >>-16

0x10e19:	movzx eax, byte ptr [rax + 0x48]    
MEMORY OFFSET:     0x48     72  >>80

0x10e1d:	test al, al                         #    int second_is_dir = second->type |=|= DIR_ENTRY;
0x10e1f:	sete al                             
0x10e22:	movzx eax, al                       #    int |s|econd_is_dir = second->type == DIR_ENTRY;
0x10e25:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x10e28:	mov eax, dword ptr [rbp - 0x2c]     #    if |(|first_is_dir != second_is_dir)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x10e2b:	cmp eax, dword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x10e2e:	je 0x10e4a                          
0x10e30:	cmp dword ptr [rbp - 0x2c], 0       #	return first_is_dir ? -1 |:| 1;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x10e34:	je 0x10e40                          
0x10e36:	mov eax, 0xffffffff                 #	return first_is_dir ? -1 |:| 1;
0x10e3b:	jmp 0x110ae                         
0x10e40:	mov eax, 1                          #	return first_is_dir ? -1 |:| 1;
0x10e45:	jmp 0x110ae                         
0x10e4a:	mov eax, dword ptr [rip + 0x207a4]  #    |s|witch (CurrentSortMethod)
MEMORY OFFSET:     0x207a4     133028  >>133036

0x10e50:	cmp eax, 8                          
0x10e53:	ja 0x1106b                          
0x10e59:	mov eax, eax                        
0x10e5b:	lea rdx, [rax*4]                    
0x10e63:	lea rax, [rip + 0x17f7a]            
MEMORY OFFSET:     0x17f7a     98170  >>98178

0x10e6a:	mov eax, dword ptr [rdx + rax]      
0x10e6d:	cdqe                                
0x10e6f:	lea rdx, [rip + 0x17f6e]            
MEMORY OFFSET:     0x17f6e     98158  >>98166

0x10e76:	add rax, rdx                        
0x10e79:	jmp rax                             
0x10e7c:	mov rax, qword ptr [rbp - 0x20]     #	     pfirst  = strrchr(first|-|>name,  '.');
MEMORY OFFSET:     -0x20     -32  >>-24

0x10e80:	mov rax, qword ptr [rax]            
0x10e83:	mov esi, 0x2e                       #	     pfirst  = |s|trrchr(first->name,  '.');
0x10e88:	mov rdi, rax                        
0x10e8b:	call 0x49e0                         
0x10e90:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x10e94:	mov rax, qword ptr [rbp - 0x18]     #	     psecond = strrchr(second|-|>name, '.');
MEMORY OFFSET:     -0x18     -24  >>-16

0x10e98:	mov rax, qword ptr [rax]            
0x10e9b:	mov esi, 0x2e                       #	     psecond = |s|trrchr(second->name, '.');
0x10ea0:	mov rdi, rax                        
0x10ea3:	call 0x49e0                         
0x10ea8:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x10eac:	cmp qword ptr [rbp - 0x10], 0       #	     if |(|pfirst && psecond)
MEMORY OFFSET:     -0x10     -16  >>-8

0x10eb1:	je 0x10ee8                          
0x10eb3:	cmp qword ptr [rbp - 8], 0          #	     if (pfirst |&|& psecond)
MEMORY OFFSET:     -0x8     -8  >>0

0x10eb8:	je 0x10ee8                          
0x10eba:	add qword ptr [rbp - 8], 1          #		 retval |=| strcmp(++pfirst, ++psecond);
MEMORY OFFSET:     -0x8     -8  >>0

0x10ebf:	add qword ptr [rbp - 0x10], 1       
MEMORY OFFSET:     -0x10     -16  >>-8

0x10ec4:	mov rdx, qword ptr [rbp - 8]        #		 retval = |s|trcmp(++pfirst, ++psecond);
MEMORY OFFSET:     -0x8     -8  >>0

0x10ec8:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x10ecc:	mov rsi, rdx                        
0x10ecf:	mov rdi, rax                        
0x10ed2:	call 0x4af0                         
0x10ed7:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x10eda:	cmp dword ptr [rbp - 0x24], 0       #		 if |(|retval != 0)
MEMORY OFFSET:     -0x24     -36  >>-28

0x10ede:	je 0x10f15                          
0x10ee0:	mov eax, dword ptr [rbp - 0x24]     #		     return |r|etval;
MEMORY OFFSET:     -0x24     -36  >>-28

0x10ee3:	jmp 0x110ae                         
0x10ee8:	cmp qword ptr [rbp - 0x10], 0       #		 if |(|pfirst || psecond)
MEMORY OFFSET:     -0x10     -16  >>-8

0x10eed:	jne 0x10efa                         
0x10eef:	cmp qword ptr [rbp - 8], 0          #		 if (pfirst |||| psecond)
MEMORY OFFSET:     -0x8     -8  >>0

0x10ef4:	je 0x1107f                          
0x10efa:	cmp qword ptr [rbp - 0x10], 0       #		     return (pfirst ? -1 |:| 1);
MEMORY OFFSET:     -0x10     -16  >>-8

0x10eff:	je 0x10f0b                          
0x10f01:	mov eax, 0xffffffff                 #		     return (pfirst ? -1 |:| 1);
0x10f06:	jmp 0x110ae                         
0x10f0b:	mov eax, 1                          #		     return (pfirst ? -1 |:| 1);
0x10f10:	jmp 0x110ae                         
0x10f15:	jmp 0x1107f                         #	     |b|reak;
0x10f1a:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>size == second->size)
MEMORY OFFSET:     -0x20     -32  >>-24

0x10f1e:	mov rdx, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x10f22:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->size == second|-|>size)
MEMORY OFFSET:     -0x18     -24  >>-16

0x10f26:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x10f2a:	cmp rdx, rax                        #	     if |(|first->size == second->size)
0x10f2d:	je 0x11082                          
0x10f33:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>size - second->size;
MEMORY OFFSET:     -0x20     -32  >>-24

0x10f37:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x10f3b:	mov edx, eax                        #	     return first->size |-| second->size;
0x10f3d:	mov rax, qword ptr [rbp - 0x18]     #	     return first->size - second|-|>size;
MEMORY OFFSET:     -0x18     -24  >>-16

0x10f41:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x10f45:	mov ecx, eax                        #	     return first->size |-| second->size;
0x10f47:	mov eax, edx                        
0x10f49:	sub eax, ecx                        
0x10f4b:	jmp 0x110ae                         
0x10f50:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>mtime == second->mtime)
MEMORY OFFSET:     -0x20     -32  >>-24

0x10f54:	mov rdx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x10f58:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->mtime == second|-|>mtime)
MEMORY OFFSET:     -0x18     -24  >>-16

0x10f5c:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x10f60:	cmp rdx, rax                        #	     if |(|first->mtime == second->mtime)
0x10f63:	je 0x11085                          
0x10f69:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>mtime - second->mtime;
MEMORY OFFSET:     -0x20     -32  >>-24

0x10f6d:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x10f71:	mov edx, eax                        #	     return first->mtime |-| second->mtime;
0x10f73:	mov rax, qword ptr [rbp - 0x18]     #	     return first->mtime - second|-|>mtime;
MEMORY OFFSET:     -0x18     -24  >>-16

0x10f77:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x10f7b:	mov ecx, eax                        #	     return first->mtime |-| second->mtime;
0x10f7d:	mov eax, edx                        
0x10f7f:	sub eax, ecx                        
0x10f81:	jmp 0x110ae                         
0x10f86:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>mode == second->mode)
MEMORY OFFSET:     -0x20     -32  >>-24

0x10f8a:	mov edx, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x10f8d:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->mode == second|-|>mode)
MEMORY OFFSET:     -0x18     -24  >>-16

0x10f91:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x10f94:	cmp edx, eax                        #	     if |(|first->mode == second->mode)
0x10f96:	je 0x11088                          
0x10f9c:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>mode - second->mode;
MEMORY OFFSET:     -0x20     -32  >>-24

0x10fa0:	mov edx, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x10fa3:	mov rax, qword ptr [rbp - 0x18]     #	     return first->mode - second|-|>mode;
MEMORY OFFSET:     -0x18     -24  >>-16

0x10fa7:	mov ecx, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x10faa:	mov eax, edx                        #	     return first->mode |-| second->mode;
0x10fac:	sub eax, ecx                        
0x10fae:	jmp 0x110ae                         
0x10fb3:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>uid == second->uid)
MEMORY OFFSET:     -0x20     -32  >>-24

0x10fb7:	mov edx, dword ptr [rax + 0x14]     
MEMORY OFFSET:     0x14     20  >>28

0x10fba:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->uid == second|-|>uid)
MEMORY OFFSET:     -0x18     -24  >>-16

0x10fbe:	mov eax, dword ptr [rax + 0x14]     
MEMORY OFFSET:     0x14     20  >>28

0x10fc1:	cmp edx, eax                        #	     if |(|first->uid == second->uid)
0x10fc3:	je 0x1108b                          
0x10fc9:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>uid - second->uid;
MEMORY OFFSET:     -0x20     -32  >>-24

0x10fcd:	mov edx, dword ptr [rax + 0x14]     
MEMORY OFFSET:     0x14     20  >>28

0x10fd0:	mov rax, qword ptr [rbp - 0x18]     #	     return first->uid - second|-|>uid;
MEMORY OFFSET:     -0x18     -24  >>-16

0x10fd4:	mov ecx, dword ptr [rax + 0x14]     
MEMORY OFFSET:     0x14     20  >>28

0x10fd7:	mov eax, edx                        #	     return first->uid |-| second->uid;
0x10fd9:	sub eax, ecx                        
0x10fdb:	jmp 0x110ae                         
0x10fe0:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>gid == second->gid)
MEMORY OFFSET:     -0x20     -32  >>-24

0x10fe4:	mov edx, dword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x10fe7:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->gid == second|-|>gid)
MEMORY OFFSET:     -0x18     -24  >>-16

0x10feb:	mov eax, dword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x10fee:	cmp edx, eax                        #	     if |(|first->gid == second->gid)
0x10ff0:	je 0x1108e                          
0x10ff6:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>gid - second->gid;
MEMORY OFFSET:     -0x20     -32  >>-24

0x10ffa:	mov edx, dword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x10ffd:	mov rax, qword ptr [rbp - 0x18]     #	     return first->gid - second|-|>gid;
MEMORY OFFSET:     -0x18     -24  >>-16

0x11001:	mov ecx, dword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x11004:	mov eax, edx                        #	     return first->gid |-| second->gid;
0x11006:	sub eax, ecx                        
0x11008:	jmp 0x110ae                         
0x1100d:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>uid == second->uid)
MEMORY OFFSET:     -0x20     -32  >>-24

0x11011:	mov edx, dword ptr [rax + 0x14]     
MEMORY OFFSET:     0x14     20  >>28

0x11014:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->uid == second|-|>uid)
MEMORY OFFSET:     -0x18     -24  >>-16

0x11018:	mov eax, dword ptr [rax + 0x14]     
MEMORY OFFSET:     0x14     20  >>28

0x1101b:	cmp edx, eax                        #	     if |(|first->uid == second->uid)
0x1101d:	je 0x11091                          
0x1101f:	mov rax, qword ptr [rbp - 0x18]     #	     return strcmp(first->owner, second|-|>owner);
MEMORY OFFSET:     -0x18     -24  >>-16

0x11023:	mov rdx, qword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x11027:	mov rax, qword ptr [rbp - 0x20]     #	     return strcmp(first|-|>owner, second->owner);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1102b:	mov rax, qword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1102f:	mov rsi, rdx                        #	     return |s|trcmp(first->owner, second->owner);
0x11032:	mov rdi, rax                        
0x11035:	call 0x4af0                         
0x1103a:	jmp 0x110ae                         
0x1103c:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>gid == second->gid)
MEMORY OFFSET:     -0x20     -32  >>-24

0x11040:	mov edx, dword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x11043:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->gid == second|-|>gid)
MEMORY OFFSET:     -0x18     -24  >>-16

0x11047:	mov eax, dword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1104a:	cmp edx, eax                        #	     if |(|first->gid == second->gid)
0x1104c:	je 0x11094                          
0x1104e:	mov rax, qword ptr [rbp - 0x18]     #	     return strcmp(first->group, second|-|>group);
MEMORY OFFSET:     -0x18     -24  >>-16

0x11052:	mov rdx, qword ptr [rax + 0x30]     
MEMORY OFFSET:     0x30     48  >>56

0x11056:	mov rax, qword ptr [rbp - 0x20]     #	     return strcmp(first|-|>group, second->group);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1105a:	mov rax, qword ptr [rax + 0x30]     
MEMORY OFFSET:     0x30     48  >>56

0x1105e:	mov rsi, rdx                        #	     return |s|trcmp(first->group, second->group);
0x11061:	mov rdi, rax                        
0x11064:	call 0x4af0                         
0x11069:	jmp 0x110ae                         
0x1106b:	lea rax, [rip + 0x1750a]            #	     |f|atal("bad sort method");
MEMORY OFFSET:     0x1750a     95498  >>95506

0x11072:	mov rdi, rax                        
0x11075:	call 0x672c                         
0x1107a:	jmp 0x11095                         
0x1107c:	nop                                 #	     |b|reak;
0x1107d:	jmp 0x11095                         
0x1107f:	nop                                 #	     |b|reak;
0x11080:	jmp 0x11095                         
0x11082:	nop                                 #		 |b|reak;
0x11083:	jmp 0x11095                         
0x11085:	nop                                 #		 |b|reak;
0x11086:	jmp 0x11095                         
0x11088:	nop                                 #		 |b|reak;
0x11089:	jmp 0x11095                         
0x1108b:	nop                                 #		 |b|reak;
0x1108c:	jmp 0x11095                         
0x1108e:	nop                                 #		 |b|reak;
0x1108f:	jmp 0x11095                         
0x11091:	nop                                 #		 |b|reak;
0x11092:	jmp 0x11095                         
0x11094:	nop                                 #		 |b|reak;
0x11095:	mov rax, qword ptr [rbp - 0x18]     #    return strcmp(first->name, second|-|>name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x11099:	mov rdx, qword ptr [rax]            
0x1109c:	mov rax, qword ptr [rbp - 0x20]     #    return strcmp(first|-|>name, second->name);
MEMORY OFFSET:     -0x20     -32  >>-24

0x110a0:	mov rax, qword ptr [rax]            
0x110a3:	mov rsi, rdx                        #    return |s|trcmp(first->name, second->name);
0x110a6:	mov rdi, rax                        
0x110a9:	call 0x4af0                         
0x110ae:	leave                               #|}|
0x110af:	ret                                 
0x110b0:	endbr64                             #|{|
0x110b4:	push rbp                            
0x110b5:	mov rbp, rsp                        
0x110b8:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x110bc:	mov rax, qword ptr [rbp - 8]        #    this->on_screen |=| INT_MAX / 2;
MEMORY OFFSET:     -0x8     -8  >>0

0x110c0:	mov dword ptr [rax + 0x14], 0x3fffffff
MEMORY OFFSET:     0x14     20  >>28

0x110c7:	nop                                 #|}|
0x110c8:	pop rbp                             
0x110c9:	ret                                 
0x110ca:	endbr64                             #|{|
0x110ce:	push rbp                            
0x110cf:	mov rbp, rsp                        
0x110d2:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x110d6:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].name;
MEMORY OFFSET:     -0x8     -8  >>0

0x110da:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x110de:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].name;
MEMORY OFFSET:     -0x8     -8  >>0

0x110e2:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x110e5:	movsxd rdx, eax                     
0x110e8:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].name;
0x110eb:	shl rax, 2                          
0x110ef:	add rax, rdx                        
0x110f2:	shl rax, 4                          
0x110f6:	add rax, rcx                        
0x110f9:	mov rax, qword ptr [rax]            #    return this->dir_entry[this->current_entry]|.|name;
0x110fc:	pop rbp                             #|}|
0x110fd:	ret                                 
0x110fe:	endbr64                             #|{|
0x11102:	push rbp                            
0x11103:	mov rbp, rsp                        
0x11106:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1110a:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].uid;
MEMORY OFFSET:     -0x8     -8  >>0

0x1110e:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11112:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].uid;
MEMORY OFFSET:     -0x8     -8  >>0

0x11116:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x11119:	movsxd rdx, eax                     
0x1111c:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].uid;
0x1111f:	shl rax, 2                          
0x11123:	add rax, rdx                        
0x11126:	shl rax, 4                          
0x1112a:	add rax, rcx                        
0x1112d:	mov eax, dword ptr [rax + 0x14]     #    return this->dir_entry[this->current_entry]|.|uid;
MEMORY OFFSET:     0x14     20  >>28

0x11130:	pop rbp                             #|}|
0x11131:	ret                                 
0x11132:	endbr64                             #|{|
0x11136:	push rbp                            
0x11137:	mov rbp, rsp                        
0x1113a:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1113e:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].gid;
MEMORY OFFSET:     -0x8     -8  >>0

0x11142:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11146:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].gid;
MEMORY OFFSET:     -0x8     -8  >>0

0x1114a:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1114d:	movsxd rdx, eax                     
0x11150:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].gid;
0x11153:	shl rax, 2                          
0x11157:	add rax, rdx                        
0x1115a:	shl rax, 4                          
0x1115e:	add rax, rcx                        
0x11161:	mov eax, dword ptr [rax + 0x18]     #    return this->dir_entry[this->current_entry]|.|gid;
MEMORY OFFSET:     0x18     24  >>32

0x11164:	pop rbp                             #|}|
0x11165:	ret                                 
0x11166:	endbr64                             #|{|
0x1116a:	push rbp                            
0x1116b:	mov rbp, rsp                        
0x1116e:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x11172:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].mode;
MEMORY OFFSET:     -0x8     -8  >>0

0x11176:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1117a:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].mode;
MEMORY OFFSET:     -0x8     -8  >>0

0x1117e:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x11181:	movsxd rdx, eax                     
0x11184:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].mode;
0x11187:	shl rax, 2                          
0x1118b:	add rax, rdx                        
0x1118e:	shl rax, 4                          
0x11192:	add rax, rcx                        
0x11195:	mov eax, dword ptr [rax + 0x10]     #    return this->dir_entry[this->current_entry]|.|mode;
MEMORY OFFSET:     0x10     16  >>24

0x11198:	pop rbp                             #|}|
0x11199:	ret                                 
0x1119a:	endbr64                             #|{|
0x1119e:	push rbp                            
0x1119f:	mov rbp, rsp                        
0x111a2:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x111a6:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].type;
MEMORY OFFSET:     -0x8     -8  >>0

0x111aa:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x111ae:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].type;
MEMORY OFFSET:     -0x8     -8  >>0

0x111b2:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x111b5:	movsxd rdx, eax                     
0x111b8:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].type;
0x111bb:	shl rax, 2                          
0x111bf:	add rax, rdx                        
0x111c2:	shl rax, 4                          
0x111c6:	add rax, rcx                        
0x111c9:	movzx eax, byte ptr [rax + 0x48]    #    return this->dir_entry[this->current_entry]|.|type;
MEMORY OFFSET:     0x48     72  >>80

0x111cd:	movsx eax, al                       
0x111d0:	pop rbp                             #|}|
0x111d1:	ret                                 
0x111d2:	endbr64                             #|{|
0x111d6:	push rbp                            
0x111d7:	mov rbp, rsp                        
0x111da:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x111de:	mov rax, qword ptr [rbp - 0x18]     #    int lines = (this|-|>lines - 2);
MEMORY OFFSET:     -0x18     -24  >>-16

0x111e2:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x111e5:	sub eax, 2                          #    int |l|ines = (this->lines - 2);
0x111e8:	mov dword ptr [rbp - 8], eax        
MEMORY OFFSET:     -0x8     -8  >>0

0x111eb:	mov rax, qword ptr [rbp - 0x18]     #    int tmp = this|-|>current_entry - (lines / 2);
MEMORY OFFSET:     -0x18     -24  >>-16

0x111ef:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x111f2:	mov eax, dword ptr [rbp - 8]        #    int tmp = this->current_entry - (lines |/| 2);
MEMORY OFFSET:     -0x8     -8  >>0

0x111f5:	mov ecx, eax                        
0x111f7:	shr ecx, 0x1f                       
0x111fa:	add eax, ecx                        
0x111fc:	sar eax, 1                          
0x111fe:	neg eax                             
0x11200:	add eax, edx                        #    int |t|mp = this->current_entry - (lines / 2);
0x11202:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x11205:	mov edx, dword ptr [rbp - 4]        #    if (tmp |+| lines >= this->entries)
MEMORY OFFSET:     -0x4     -4  >>4

0x11208:	mov eax, dword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1120b:	add edx, eax                        
0x1120d:	mov rax, qword ptr [rbp - 0x18]     #    if (tmp + lines >= this|-|>entries)
MEMORY OFFSET:     -0x18     -24  >>-16

0x11211:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x11214:	cmp edx, eax                        #    if |(|tmp + lines >= this->entries)
0x11216:	jl 0x1122e                          
0x11218:	mov rax, qword ptr [rbp - 0x18]     #	return |m|ax(0, this->entries - lines);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1121c:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1121f:	sub eax, dword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x11222:	mov edx, 0                          
0x11227:	test eax, eax                       
0x11229:	cmovs eax, edx                      
0x1122c:	jmp 0x1123b                         
0x1122e:	mov eax, dword ptr [rbp - 4]        #	return |m|ax(0, tmp);
MEMORY OFFSET:     -0x4     -4  >>4

0x11231:	mov edx, 0                          
0x11236:	test eax, eax                       
0x11238:	cmovs eax, edx                      
0x1123b:	pop rbp                             #|}|
0x1123c:	ret                                 
0x1123d:	endbr64                             #|{|
0x11241:	push rbp                            
0x11242:	mov rbp, rsp                        
0x11245:	sub rsp, 8                          
0x11249:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1124d:	mov rax, qword ptr [rbp - 8]        #    if ((this|-|>first_on_screen <= this->current_entry) &&
MEMORY OFFSET:     -0x8     -8  >>0

0x11251:	mov edx, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x11254:	mov rax, qword ptr [rbp - 8]        #    if ((this->first_on_screen <= this|-|>current_entry) &&
MEMORY OFFSET:     -0x8     -8  >>0

0x11258:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1125b:	cmp edx, eax                        #    if |(|(this->first_on_screen <= this->current_entry) &&
0x1125d:	jg 0x112a4                          
0x1125f:	mov rax, qword ptr [rbp - 8]        #	(this|-|>first_on_screen + this->lines - 2 > this->current_entry) &&
MEMORY OFFSET:     -0x8     -8  >>0

0x11263:	mov edx, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x11266:	mov rax, qword ptr [rbp - 8]        #	(this->first_on_screen + this|-|>lines - 2 > this->current_entry) &&
MEMORY OFFSET:     -0x8     -8  >>0

0x1126a:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1126d:	add eax, edx                        #	(this->first_on_screen |+| this->lines - 2 > this->current_entry) &&
0x1126f:	lea edx, [rax - 2]                  #	(this->first_on_screen + this->lines |-| 2 > this->current_entry) &&
MEMORY OFFSET:     -0x2     -2  >>6

0x11272:	mov rax, qword ptr [rbp - 8]        #	(this->first_on_screen + this->lines - 2 > this|-|>current_entry) &&
MEMORY OFFSET:     -0x8     -8  >>0

0x11276:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x11279:	cmp edx, eax                        #    if ((this->first_on_screen <= this->current_entry) |&|&
0x1127b:	jle 0x112a4                         
0x1127d:	mov rax, qword ptr [rbp - 8]        #	(this|-|>first_on_screen + this->lines - 2 <= this->entries))
MEMORY OFFSET:     -0x8     -8  >>0

0x11281:	mov edx, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x11284:	mov rax, qword ptr [rbp - 8]        #	(this->first_on_screen + this|-|>lines - 2 <= this->entries))
MEMORY OFFSET:     -0x8     -8  >>0

0x11288:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1128b:	add eax, edx                        #	(this->first_on_screen |+| this->lines - 2 <= this->entries))
0x1128d:	lea edx, [rax - 2]                  #	(this->first_on_screen + this->lines |-| 2 <= this->entries))
MEMORY OFFSET:     -0x2     -2  >>6

0x11290:	mov rax, qword ptr [rbp - 8]        #	(this->first_on_screen + this->lines - 2 <= this|-|>entries))
MEMORY OFFSET:     -0x8     -8  >>0

0x11294:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x11297:	cmp edx, eax                        #	(this->first_on_screen + this->lines - 2 > this->current_entry) |&|&
0x11299:	jg 0x112a4                          
0x1129b:	mov rax, qword ptr [rbp - 8]        #	return this|-|>first_on_screen;
MEMORY OFFSET:     -0x8     -8  >>0

0x1129f:	mov eax, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x112a2:	jmp 0x112b5                         
0x112a4:	mov rax, qword ptr [rbp - 8]        #    return |p|anel_get_centered_fos(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x112a8:	mov rdi, rax                        
0x112ab:	mov eax, 0                          
0x112b0:	call 0x111d2                        
0x112b5:	leave                               #|}|
0x112b6:	ret                                 
0x112b7:	endbr64                             #|{|
0x112bb:	push rbp                            
0x112bc:	mov rbp, rsp                        
0x112bf:	sub rsp, 0x10                       
0x112c3:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x112c7:	mov dword ptr [rbp - 0xc], esi      
MEMORY OFFSET:     -0xc     -12  >>-4

0x112ca:	mov rax, qword ptr [rbp - 8]        #    this->current_entry |=| entry;
MEMORY OFFSET:     -0x8     -8  >>0

0x112ce:	mov edx, dword ptr [rbp - 0xc]      
MEMORY OFFSET:     -0xc     -12  >>-4

0x112d1:	mov dword ptr [rax + 0x28], edx     
MEMORY OFFSET:     0x28     40  >>48

0x112d4:	mov rax, qword ptr [rbp - 8]        #    this->first_on_screen = |p|anel_get_fos(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x112d8:	mov rdi, rax                        
0x112db:	mov eax, 0                          
0x112e0:	call 0x1123d                        
0x112e5:	mov rdx, qword ptr [rbp - 8]        #    this->first_on_screen |=| panel_get_fos(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x112e9:	mov dword ptr [rdx + 0x2c], eax     
MEMORY OFFSET:     0x2c     44  >>52

0x112ec:	nop                                 #|}|
0x112ed:	leave                               
0x112ee:	ret                                 
0x112ef:	endbr64                             #|{|
0x112f3:	push rbp                            
0x112f4:	mov rbp, rsp                        
0x112f7:	sub rsp, 8                          
0x112fb:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x112ff:	mov rax, qword ptr [rbp - 8]        #    this->first_on_screen = |p|anel_get_centered_fos(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x11303:	mov rdi, rax                        
0x11306:	mov eax, 0                          
0x1130b:	call 0x111d2                        
0x11310:	mov rdx, qword ptr [rbp - 8]        #    this->first_on_screen |=| panel_get_centered_fos(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x11314:	mov dword ptr [rdx + 0x2c], eax     
MEMORY OFFSET:     0x2c     44  >>52

0x11317:	nop                                 #|}|
0x11318:	leave                               
0x11319:	ret                                 
0x1131a:	endbr64                             #|{|
0x1131e:	push rbp                            
0x1131f:	mov rbp, rsp                        
0x11322:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x11326:	mov rax, qword ptr [rbp - 8]        #    this->visible |=| 1;
MEMORY OFFSET:     -0x8     -8  >>0

0x1132a:	mov byte ptr [rax + 0x6d], 1        
MEMORY OFFSET:     0x6d     109  >>117

0x1132e:	nop                                 #|}|
0x1132f:	pop rbp                             
0x11330:	ret                                 
0x11331:	endbr64                             #|{|
0x11335:	push rbp                            
0x11336:	mov rbp, rsp                        
0x11339:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1133d:	mov rax, qword ptr [rbp - 8]        #    this->visible |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x11341:	mov byte ptr [rax + 0x6d], 0        
MEMORY OFFSET:     0x6d     109  >>117

0x11345:	nop                                 #|}|
0x11346:	pop rbp                             
0x11347:	ret                                 
0x11348:	endbr64                             #|{|
0x1134c:	push rbp                            
0x1134d:	mov rbp, rsp                        
0x11350:	sub rsp, 0x30                       
0x11354:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x11358:	mov qword ptr [rbp - 0x10], rsi     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1135c:	mov qword ptr [rbp - 0x18], rdx     
MEMORY OFFSET:     -0x18     -24  >>-16

0x11360:	mov qword ptr [rbp - 0x20], rcx     
MEMORY OFFSET:     -0x20     -32  >>-24

0x11364:	mov qword ptr [rbp - 0x28], r8      
MEMORY OFFSET:     -0x28     -40  >>-32

0x11368:	mov rax, qword ptr [rbp - 0x10]     #    this->x |=| x;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1136c:	mov edx, eax                        
0x1136e:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x11372:	mov dword ptr [rax + 0x58], edx     
MEMORY OFFSET:     0x58     88  >>96

0x11375:	mov rax, qword ptr [rbp - 0x18]     #    this->y |=| y;
MEMORY OFFSET:     -0x18     -24  >>-16

0x11379:	mov edx, eax                        
0x1137b:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1137f:	mov dword ptr [rax + 0x5c], edx     
MEMORY OFFSET:     0x5c     92  >>100

0x11382:	mov rax, qword ptr [rbp - 0x20]     #    this->lines   |=| lines;
MEMORY OFFSET:     -0x20     -32  >>-24

0x11386:	mov edx, eax                        
0x11388:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1138c:	mov dword ptr [rax + 0x60], edx     
MEMORY OFFSET:     0x60     96  >>104

0x1138f:	mov rax, qword ptr [rbp - 0x28]     #    this->columns |=| columns;
MEMORY OFFSET:     -0x28     -40  >>-32

0x11393:	mov edx, eax                        
0x11395:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x11399:	mov dword ptr [rax + 0x64], edx     
MEMORY OFFSET:     0x64     100  >>108

0x1139c:	mov rax, qword ptr [rbp - 8]        #    this->thumb |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x113a0:	mov dword ptr [rax + 0x8c], 0       
MEMORY OFFSET:     0x8c     140  >>148

0x113aa:	mov eax, dword ptr [rip + 0x20240]  #    if (StartupScrollStep |<|= 0 || StartupScrollStep >= (this->lines - 1))
MEMORY OFFSET:     0x20240     131648  >>131656

0x113b0:	test eax, eax                       #    if |(|StartupScrollStep <= 0 || StartupScrollStep >= (this->lines - 1))
0x113b2:	jle 0x113c8                         
0x113b4:	mov rax, qword ptr [rbp - 8]        #    if (StartupScrollStep <= 0 || StartupScrollStep >= (this|-|>lines - 1))
MEMORY OFFSET:     -0x8     -8  >>0

0x113b8:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x113bb:	lea edx, [rax - 1]                  #    if (StartupScrollStep <= 0 || StartupScrollStep >= (this->lines |-| 1))
MEMORY OFFSET:     -0x1     -1  >>7

0x113be:	mov eax, dword ptr [rip + 0x2022c]  #    if (StartupScrollStep <= 0 || StartupScrollStep |>|= (this->lines - 1))
MEMORY OFFSET:     0x2022c     131628  >>131636

0x113c4:	cmp edx, eax                        #    if (StartupScrollStep <= 0 |||| StartupScrollStep >= (this->lines - 1))
0x113c6:	jg 0x113e6                          
0x113c8:	mov rax, qword ptr [rbp - 8]        #	this->scroll_step = this|-|>lines / 2;
MEMORY OFFSET:     -0x8     -8  >>0

0x113cc:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x113cf:	mov edx, eax                        #	this->scroll_step = this->lines |/| 2;
0x113d1:	shr edx, 0x1f                       
0x113d4:	add eax, edx                        
0x113d6:	sar eax, 1                          
0x113d8:	mov edx, eax                        
0x113da:	mov rax, qword ptr [rbp - 8]        #	this->scroll_step |=| this->lines / 2;
MEMORY OFFSET:     -0x8     -8  >>0

0x113de:	mov dword ptr [rax + 0x88], edx     
MEMORY OFFSET:     0x88     136  >>144

0x113e4:	jmp 0x113f6                         
0x113e6:	mov edx, dword ptr [rip + 0x20204]  #	this->scroll_step |=| StartupScrollStep;
MEMORY OFFSET:     0x20204     131588  >>131596

0x113ec:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x113f0:	mov dword ptr [rax + 0x88], edx     
MEMORY OFFSET:     0x88     136  >>144

0x113f6:	mov rax, qword ptr [rbp - 8]        #    this->temp = xrealloc(this->temp, this|-|>columns);
MEMORY OFFSET:     -0x8     -8  >>0

0x113fa:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x113fd:	movsxd rdx, eax                     #    this->temp = |x|realloc(this->temp, this->columns);
0x11400:	mov rax, qword ptr [rbp - 8]        #    this->temp = xrealloc(this|-|>temp, this->columns);
MEMORY OFFSET:     -0x8     -8  >>0

0x11404:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x11408:	mov rsi, rdx                        #    this->temp = |x|realloc(this->temp, this->columns);
0x1140b:	mov rdi, rax                        
0x1140e:	call 0x24670                        
0x11413:	mov rdx, qword ptr [rbp - 8]        #    this->temp |=| xrealloc(this->temp, this->columns);
MEMORY OFFSET:     -0x8     -8  >>0

0x11417:	mov qword ptr [rdx + 0x20], rax     
MEMORY OFFSET:     0x20     32  >>40

0x1141b:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_resize(this->window, x, y, lines, columns);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1141f:	mov edi, eax                        
0x11421:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x11425:	mov ecx, eax                        
0x11427:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1142b:	mov edx, eax                        
0x1142d:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x11431:	mov esi, eax                        
0x11433:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x11437:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1143b:	mov r8d, edi                        
0x1143e:	mov rdi, rax                        
0x11441:	call 0xdad7                         
0x11446:	mov rax, qword ptr [rbp - 8]        #    |p|anel_center_current_entry(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x1144a:	mov rdi, rax                        
0x1144d:	call 0x112ef                        
0x11452:	mov rax, qword ptr [rbp - 8]        #    this->horizontal_offset |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x11456:	mov dword ptr [rax + 0x74], 0       
MEMORY OFFSET:     0x74     116  >>124

0x1145d:	nop                                 #|}|
0x1145e:	leave                               
0x1145f:	ret                                 
0x11460:	endbr64                             #|{|
0x11464:	push rbp                            
0x11465:	mov rbp, rsp                        
0x11468:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1146c:	mov dword ptr [rbp - 0xc], esi      
MEMORY OFFSET:     -0xc     -12  >>-4

0x1146f:	mov eax, dword ptr [rbp - 0xc]      #    this->wrapped_isearch |=| value;
MEMORY OFFSET:     -0xc     -12  >>-4

0x11472:	mov edx, eax                        
0x11474:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x11478:	mov byte ptr [rax + 0x6e], dl       
MEMORY OFFSET:     0x6e     110  >>118

0x1147b:	nop                                 #|}|
0x1147c:	pop rbp                             
0x1147d:	ret                                 
0x1147e:	endbr64                             #|{|
0x11482:	push rbp                            
0x11483:	mov rbp, rsp                        
0x11486:	sub rsp, 0x30                       
0x1148a:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1148e:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x11492:	mov qword ptr [rbp - 0x28], rdx     
MEMORY OFFSET:     -0x28     -40  >>-32

0x11496:	mov dword ptr [rbp - 0x2c], ecx     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x11499:	mov eax, dword ptr [rbp - 0x2c]     #    for (i |=| start_entry; i >= 0; i--)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1149c:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x1149f:	jmp 0x114e3                         #    |f|or (i = start_entry; i >= 0; i--)
0x114a1:	mov rax, qword ptr [rbp - 0x18]     #	if (strncasecmp(string, this|-|>dir_entry[i].name, len) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x114a5:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x114a9:	mov eax, dword ptr [rbp - 4]        #	if (strncasecmp(string, this->dir_entry|[|i].name, len) == 0)
MEMORY OFFSET:     -0x4     -4  >>4

0x114ac:	movsxd rdx, eax                     
0x114af:	mov rax, rdx                        
0x114b2:	shl rax, 2                          
0x114b6:	add rax, rdx                        
0x114b9:	shl rax, 4                          
0x114bd:	add rax, rcx                        
0x114c0:	mov rcx, qword ptr [rax]            #	if (strncasecmp(string, this->dir_entry[i]|.|name, len) == 0)
0x114c3:	mov rdx, qword ptr [rbp - 0x28]     #	if (|s|trncasecmp(string, this->dir_entry[i].name, len) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x114c7:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x114cb:	mov rsi, rcx                        
0x114ce:	mov rdi, rax                        
0x114d1:	call 0x4c00                         
0x114d6:	test eax, eax                       #	if |(|strncasecmp(string, this->dir_entry[i].name, len) == 0)
0x114d8:	jne 0x114df                         
0x114da:	mov eax, dword ptr [rbp - 4]        #	    return |i|;
MEMORY OFFSET:     -0x4     -4  >>4

0x114dd:	jmp 0x114ee                         
0x114df:	sub dword ptr [rbp - 4], 1          #    for (i = start_entry; i >= 0; i|-|-)
MEMORY OFFSET:     -0x4     -4  >>4

0x114e3:	cmp dword ptr [rbp - 4], 0          #    for (i = start_entry; i |>|= 0; i--)
MEMORY OFFSET:     -0x4     -4  >>4

0x114e7:	jns 0x114a1                         
0x114e9:	mov eax, 0xffffffff                 #    return |-|1;
0x114ee:	leave                               #|}|
0x114ef:	ret                                 
0x114f0:	endbr64                             #|{|
0x114f4:	push rbp                            
0x114f5:	mov rbp, rsp                        
0x114f8:	sub rsp, 0x30                       
0x114fc:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x11500:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x11504:	mov qword ptr [rbp - 0x28], rdx     
MEMORY OFFSET:     -0x28     -40  >>-32

0x11508:	mov dword ptr [rbp - 0x2c], ecx     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1150b:	mov eax, dword ptr [rbp - 0x2c]     #    for (entry |=| start_entry; entry < this->entries; entry++)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1150e:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x11511:	jmp 0x11555                         #    |f|or (entry = start_entry; entry < this->entries; entry++)
0x11513:	mov rax, qword ptr [rbp - 0x18]     #	if (strncasecmp(string, this|-|>dir_entry[entry].name, len) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x11517:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1151b:	mov eax, dword ptr [rbp - 4]        #	if (strncasecmp(string, this->dir_entry|[|entry].name, len) == 0)
MEMORY OFFSET:     -0x4     -4  >>4

0x1151e:	movsxd rdx, eax                     
0x11521:	mov rax, rdx                        
0x11524:	shl rax, 2                          
0x11528:	add rax, rdx                        
0x1152b:	shl rax, 4                          
0x1152f:	add rax, rcx                        
0x11532:	mov rcx, qword ptr [rax]            #	if (strncasecmp(string, this->dir_entry[entry]|.|name, len) == 0)
0x11535:	mov rdx, qword ptr [rbp - 0x28]     #	if (|s|trncasecmp(string, this->dir_entry[entry].name, len) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x11539:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1153d:	mov rsi, rcx                        
0x11540:	mov rdi, rax                        
0x11543:	call 0x4c00                         
0x11548:	test eax, eax                       #	if |(|strncasecmp(string, this->dir_entry[entry].name, len) == 0)
0x1154a:	jne 0x11551                         
0x1154c:	mov eax, dword ptr [rbp - 4]        #	    return |e|ntry;
MEMORY OFFSET:     -0x4     -4  >>4

0x1154f:	jmp 0x11566                         
0x11551:	add dword ptr [rbp - 4], 1          #    for (entry = start_entry; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x4     -4  >>4

0x11555:	mov rax, qword ptr [rbp - 0x18]     #    for (entry = start_entry; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x11559:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1155c:	cmp dword ptr [rbp - 4], eax        #    for (entry = start_entry; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x4     -4  >>4

0x1155f:	jl 0x11513                          
0x11561:	mov eax, 0xffffffff                 #    return |-|1;
0x11566:	leave                               #|}|
0x11567:	ret                                 
0x11568:	endbr64                             #|{|
0x1156c:	push rbp                            
0x1156d:	mov rbp, rsp                        
0x11570:	push rbx                            
0x11571:	sub rsp, 0x38                       
0x11575:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x11579:	mov qword ptr [rbp - 0x30], rsi     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1157d:	mov qword ptr [rbp - 0x38], rdx     
MEMORY OFFSET:     -0x38     -56  >>-48

0x11581:	mov dword ptr [rbp - 0x3c], ecx     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x11584:	mov rax, qword ptr [rbp - 0x28]     #    char *message = xmalloc(|s|trlen(format) + strlen(string) + 1);
MEMORY OFFSET:     -0x28     -40  >>-32

0x11588:	mov rdi, rax                        
0x1158b:	call 0x4960                         
0x11590:	mov rbx, rax                        
0x11593:	mov rax, qword ptr [rbp - 0x30]     #    char *message = xmalloc(strlen(format) + |s|trlen(string) + 1);
MEMORY OFFSET:     -0x30     -48  >>-40

0x11597:	mov rdi, rax                        
0x1159a:	call 0x4960                         
0x1159f:	add rax, rbx                        #    char *message = xmalloc(strlen(format) |+| strlen(string) + 1);
0x115a2:	add rax, 1                          #    char *message = |x|malloc(strlen(format) + strlen(string) + 1);
0x115a6:	mov rdi, rax                        
0x115a9:	call 0x24650                        
0x115ae:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x115b2:	mov rdx, qword ptr [rbp - 0x30]     #    |s|printf(message, format, string);
MEMORY OFFSET:     -0x30     -48  >>-40

0x115b6:	mov rcx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x115ba:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x115be:	mov rsi, rcx                        
0x115c1:	mov rdi, rax                        
0x115c4:	mov eax, 0                          
0x115c9:	call 0x4dd0                         
0x115ce:	mov edx, dword ptr [rbp - 0x3c]     #    c = |p|anel_1s_message(message, options, flags);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x115d1:	mov rcx, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x115d5:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x115d9:	mov rsi, rcx                        
0x115dc:	mov rdi, rax                        
0x115df:	call 0x5c09                         
0x115e4:	mov byte ptr [rbp - 0x19], al       
MEMORY OFFSET:     -0x19     -25  >>-17

0x115e7:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(message);
MEMORY OFFSET:     -0x18     -24  >>-16

0x115eb:	mov rdi, rax                        
0x115ee:	call 0x1eeae                        
0x115f3:	movzx eax, byte ptr [rbp - 0x19]    #    return |c|;
MEMORY OFFSET:     -0x19     -25  >>-17

0x115f7:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x115fb:	leave                               
0x115fc:	ret                                 
0x115fd:	endbr64                             #|{|
0x11601:	push rbp                            
0x11602:	mov rbp, rsp                        
0x11605:	push rbx                            
0x11606:	sub rsp, 0x48                       
0x1160a:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1160e:	mov qword ptr [rbp - 0x30], rsi     
MEMORY OFFSET:     -0x30     -48  >>-40

0x11612:	mov qword ptr [rbp - 0x38], rdx     
MEMORY OFFSET:     -0x38     -56  >>-48

0x11616:	mov qword ptr [rbp - 0x40], rcx     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1161a:	mov dword ptr [rbp - 0x44], r8d     
MEMORY OFFSET:     -0x44     -68  >>-60

0x1161e:	mov rax, qword ptr [rbp - 0x28]     #    char *message = xmalloc(|s|trlen(format)+strlen(string1)+strlen(string2)+1);
MEMORY OFFSET:     -0x28     -40  >>-32

0x11622:	mov rdi, rax                        
0x11625:	call 0x4960                         
0x1162a:	mov rbx, rax                        
0x1162d:	mov rax, qword ptr [rbp - 0x30]     #    char *message = xmalloc(strlen(format)+|s|trlen(string1)+strlen(string2)+1);
MEMORY OFFSET:     -0x30     -48  >>-40

0x11631:	mov rdi, rax                        
0x11634:	call 0x4960                         
0x11639:	add rbx, rax                        #    char *message = xmalloc(strlen(format)|+|strlen(string1)+strlen(string2)+1);
0x1163c:	mov rax, qword ptr [rbp - 0x38]     #    char *message = xmalloc(strlen(format)+strlen(string1)+|s|trlen(string2)+1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x11640:	mov rdi, rax                        
0x11643:	call 0x4960                         
0x11648:	add rax, rbx                        #    char *message = xmalloc(strlen(format)+strlen(string1)|+|strlen(string2)+1);
0x1164b:	add rax, 1                          #    char *message = |x|malloc(strlen(format)+strlen(string1)+strlen(string2)+1);
0x1164f:	mov rdi, rax                        
0x11652:	call 0x24650                        
0x11657:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1165b:	mov rcx, qword ptr [rbp - 0x38]     #    |s|printf(message, format, string1, string2);
MEMORY OFFSET:     -0x38     -56  >>-48

0x1165f:	mov rdx, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x11663:	mov rsi, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x11667:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1166b:	mov rdi, rax                        
0x1166e:	mov eax, 0                          
0x11673:	call 0x4dd0                         
0x11678:	mov edx, dword ptr [rbp - 0x44]     #    c = |p|anel_1s_message(message, options, flags);
MEMORY OFFSET:     -0x44     -68  >>-60

0x1167b:	mov rcx, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1167f:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x11683:	mov rsi, rcx                        
0x11686:	mov rdi, rax                        
0x11689:	call 0x5c09                         
0x1168e:	mov byte ptr [rbp - 0x19], al       
MEMORY OFFSET:     -0x19     -25  >>-17

0x11691:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(message);
MEMORY OFFSET:     -0x18     -24  >>-16

0x11695:	mov rdi, rax                        
0x11698:	call 0x1eeae                        
0x1169d:	movzx eax, byte ptr [rbp - 0x19]    #    return |c|;
MEMORY OFFSET:     -0x19     -25  >>-17

0x116a1:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x116a5:	leave                               
0x116a6:	ret                                 
0x116a7:	endbr64                             #|{|
0x116ab:	push rbp                            
0x116ac:	mov rbp, rsp                        
0x116af:	sub rsp, 0x10                       
0x116b3:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x116b7:	mov rax, qword ptr [rbp - 8]        #    |p|anel_set_current_entry(this, 0);
MEMORY OFFSET:     -0x8     -8  >>0

0x116bb:	mov esi, 0                          
0x116c0:	mov rdi, rax                        
0x116c3:	mov eax, 0                          
0x116c8:	call 0x112b7                        
0x116cd:	mov rax, qword ptr [rbp - 8]        #    |p|anel_2s_message("%s/: Permission denied.",
MEMORY OFFSET:     -0x8     -8  >>0

0x116d1:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x116d5:	mov ecx, 0x1e                       
0x116da:	mov edx, 0                          
0x116df:	mov rsi, rax                        
0x116e2:	lea rax, [rip + 0x16ea3]            
MEMORY OFFSET:     0x16ea3     93859  >>93867

0x116e9:	mov rdi, rax                        
0x116ec:	mov eax, 0                          
0x116f1:	call 0x11568                        
0x116f6:	mov rax, qword ptr [rbp - 8]        #    if (strcmp(this|-|>path, "/") == 0)
MEMORY OFFSET:     -0x8     -8  >>0

0x116fa:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x116fe:	lea rdx, [rip + 0x16e9f]            #    if (|s|trcmp(this->path, "/") == 0)
MEMORY OFFSET:     0x16e9f     93855  >>93863

0x11705:	mov rsi, rdx                        
0x11708:	mov rdi, rax                        
0x1170b:	call 0x4af0                         
0x11710:	test eax, eax                       #    if |(|strcmp(this->path, "/") == 0)
0x11712:	jne 0x11723                         
0x11714:	lea rax, [rip + 0x16e8b]            #	|f|atal("/: Permission denied");
MEMORY OFFSET:     0x16e8b     93835  >>93843

0x1171b:	mov rdi, rax                        
0x1171e:	call 0x672c                         
0x11723:	mov rax, qword ptr [rbp - 8]        #    |s|trcpy(this->path, "/");
MEMORY OFFSET:     -0x8     -8  >>0

0x11727:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1172b:	mov word ptr [rax], 0x2f            
0x11730:	mov rax, qword ptr [rbp - 8]        #    this->pathlen |=| 1;
MEMORY OFFSET:     -0x8     -8  >>0

0x11734:	mov qword ptr [rax + 0x78], 1       
MEMORY OFFSET:     0x78     120  >>128

0x1173c:	mov rax, qword ptr [rbp - 8]        #    chdir(this|-|>path);
MEMORY OFFSET:     -0x8     -8  >>0

0x11740:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x11744:	mov rdi, rax                        #    |c|hdir(this->path);
0x11747:	call 0x4970                         
0x1174c:	mov rax, qword ptr [rbp - 8]        #    |p|anel_action(this, act_REGET, (panel_t *)NULL, (void *)NULL, 1);
MEMORY OFFSET:     -0x8     -8  >>0

0x11750:	mov r8d, 1                          
0x11756:	mov ecx, 0                          
0x1175b:	mov edx, 0                          
0x11760:	mov esi, 0x22                       
0x11765:	mov rdi, rax                        
0x11768:	call 0x1a89a                        
0x1176d:	nop                                 #|}|
0x1176e:	leave                               
0x1176f:	ret                                 
0x11770:	endbr64                             #|{|
0x11774:	push rbp                            
0x11775:	mov rbp, rsp                        
0x11778:	sub rsp, 0x30                       
0x1177c:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x11780:	mov dword ptr [rbp - 0x2c], esi     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x11783:	mov qword ptr [rbp - 0x20], 0       #    size_t |l|ongest_length = 0;
MEMORY OFFSET:     -0x20     -32  >>-24

0x1178b:	mov qword ptr [rbp - 0x10], 0       #    file_type_info_t *|l|ongest_fti = NULL;
MEMORY OFFSET:     -0x10     -16  >>-8

0x11793:	mov rax, qword ptr [rbp - 0x28]     #    this|-|>dir_entry[entry].fti_loaded = 1;
MEMORY OFFSET:     -0x28     -40  >>-32

0x11797:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1179b:	mov eax, dword ptr [rbp - 0x2c]     #    this->dir_entry|[|entry].fti_loaded = 1;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1179e:	movsxd rdx, eax                     
0x117a1:	mov rax, rdx                        
0x117a4:	shl rax, 2                          
0x117a8:	add rax, rdx                        
0x117ab:	shl rax, 4                          
0x117af:	add rax, rcx                        
0x117b2:	mov byte ptr [rax + 0x4b], 1        #    this->dir_entry[entry].fti_loaded |=| 1;
MEMORY OFFSET:     0x4b     75  >>83

0x117b6:	mov rax, qword ptr [rip + 0x202fb]  #    for (fti |=| fti_head; fti; fti = fti->next)
MEMORY OFFSET:     0x202fb     131835  >>131843

0x117bd:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x117c1:	jmp 0x11839                         #    |f|or (fti = fti_head; fti; fti = fti->next)
0x117c3:	mov rax, qword ptr [rbp - 0x28]     #	if (fnmatch(fti->pattern, this|-|>dir_entry[entry].name,
MEMORY OFFSET:     -0x28     -40  >>-32

0x117c7:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x117cb:	mov eax, dword ptr [rbp - 0x2c]     #	if (fnmatch(fti->pattern, this->dir_entry|[|entry].name,
MEMORY OFFSET:     -0x2c     -44  >>-36

0x117ce:	movsxd rdx, eax                     
0x117d1:	mov rax, rdx                        
0x117d4:	shl rax, 2                          
0x117d8:	add rax, rdx                        
0x117db:	shl rax, 4                          
0x117df:	add rax, rcx                        
0x117e2:	mov rcx, qword ptr [rax]            #	if (fnmatch(fti->pattern, this->dir_entry[entry]|.|name,
0x117e5:	mov rax, qword ptr [rbp - 0x18]     #	if (fnmatch(fti|-|>pattern, this->dir_entry[entry].name,
MEMORY OFFSET:     -0x18     -24  >>-16

0x117e9:	mov rax, qword ptr [rax]            
0x117ec:	mov edx, 0x15                       #	if (|f|nmatch(fti->pattern, this->dir_entry[entry].name,
0x117f1:	mov rsi, rcx                        
0x117f4:	mov rdi, rax                        
0x117f7:	call 0x4a00                         
0x117fc:	test eax, eax                       #	if |(|fnmatch(fti->pattern, this->dir_entry[entry].name,
0x117fe:	jne 0x1182d                         
0x11800:	mov rax, qword ptr [rbp - 0x18]     #	    length = strlen(fti|-|>pattern);
MEMORY OFFSET:     -0x18     -24  >>-16

0x11804:	mov rax, qword ptr [rax]            
0x11807:	mov rdi, rax                        #	    length = |s|trlen(fti->pattern);
0x1180a:	call 0x4960                         
0x1180f:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x11813:	mov rax, qword ptr [rbp - 8]        #	    if |(|length > longest_length)
MEMORY OFFSET:     -0x8     -8  >>0

0x11817:	cmp rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1181b:	jbe 0x1182d                         
0x1181d:	mov rax, qword ptr [rbp - 0x18]     #		longest_fti |=| fti;
MEMORY OFFSET:     -0x18     -24  >>-16

0x11821:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x11825:	mov rax, qword ptr [rbp - 8]        #		longest_length |=| length;
MEMORY OFFSET:     -0x8     -8  >>0

0x11829:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1182d:	mov rax, qword ptr [rbp - 0x18]     #    for (fti = fti_head; fti; fti |=| fti->next)
MEMORY OFFSET:     -0x18     -24  >>-16

0x11831:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x11835:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x11839:	cmp qword ptr [rbp - 0x18], 0       #    for (fti = fti_head; |f|ti; fti = fti->next)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1183e:	jne 0x117c3                         
0x11840:	mov rax, qword ptr [rbp - 0x10]     #    fti |=| longest_fti;
MEMORY OFFSET:     -0x10     -16  >>-8

0x11844:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x11848:	cmp qword ptr [rbp - 0x18], 0       #    if |(|fti)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1184d:	je 0x11915                          
0x11853:	mov rax, qword ptr [rbp - 0x18]     #	    (fti|-|>brightness == -1) ? OFF : fti->brightness;
MEMORY OFFSET:     -0x18     -24  >>-16

0x11857:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x1185a:	cmp eax, -1                         #	this->dir_entry[entry].brightness |=|
0x1185d:	je 0x1186a                          
0x1185f:	mov rax, qword ptr [rbp - 0x18]     #	    (fti->brightness == -1) ? OFF : fti|-|>brightness;
MEMORY OFFSET:     -0x18     -24  >>-16

0x11863:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x11866:	mov ecx, eax                        #	this->dir_entry[entry].brightness |=|
0x11868:	jmp 0x1186f                         
0x1186a:	mov ecx, 0                          #	this->dir_entry[entry].brightness |=|
0x1186f:	mov rax, qword ptr [rbp - 0x28]     #	this|-|>dir_entry[entry].brightness =
MEMORY OFFSET:     -0x28     -40  >>-32

0x11873:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11877:	mov eax, dword ptr [rbp - 0x2c]     #	this->dir_entry|[|entry].brightness =
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1187a:	movsxd rdx, eax                     
0x1187d:	mov rax, rdx                        
0x11880:	shl rax, 2                          
0x11884:	add rax, rdx                        
0x11887:	shl rax, 4                          
0x1188b:	add rax, rsi                        
0x1188e:	mov byte ptr [rax + 0x4e], cl       #	this->dir_entry[entry].brightness |=|
MEMORY OFFSET:     0x4e     78  >>86

0x11891:	mov rax, qword ptr [rbp - 0x18]     #	    (fti|-|>foreground == -1) ? PanelNotSelectedFile : fti->foreground;
MEMORY OFFSET:     -0x18     -24  >>-16

0x11895:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x11898:	cmp eax, -1                         #	this->dir_entry[entry].foreground |=|
0x1189b:	jne 0x118a7                         
0x1189d:	mov eax, dword ptr [rip + 0x1ebf9]  #	    (fti->foreground == -1) ? |P|anelNotSelectedFile : fti->foreground;
MEMORY OFFSET:     0x1ebf9     125945  >>125953

0x118a3:	mov ecx, eax                        #	this->dir_entry[entry].foreground |=|
0x118a5:	jmp 0x118b0                         
0x118a7:	mov rax, qword ptr [rbp - 0x18]     #	    (fti->foreground == -1) ? PanelNotSelectedFile : fti|-|>foreground;
MEMORY OFFSET:     -0x18     -24  >>-16

0x118ab:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x118ae:	mov ecx, eax                        #	this->dir_entry[entry].foreground |=|
0x118b0:	mov rax, qword ptr [rbp - 0x28]     #	this|-|>dir_entry[entry].foreground =
MEMORY OFFSET:     -0x28     -40  >>-32

0x118b4:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x118b8:	mov eax, dword ptr [rbp - 0x2c]     #	this->dir_entry|[|entry].foreground =
MEMORY OFFSET:     -0x2c     -44  >>-36

0x118bb:	movsxd rdx, eax                     
0x118be:	mov rax, rdx                        
0x118c1:	shl rax, 2                          
0x118c5:	add rax, rdx                        
0x118c8:	shl rax, 4                          
0x118cc:	add rax, rsi                        
0x118cf:	mov byte ptr [rax + 0x4c], cl       #	this->dir_entry[entry].foreground |=|
MEMORY OFFSET:     0x4c     76  >>84

0x118d2:	mov rax, qword ptr [rbp - 0x18]     #	    (fti|-|>background == -1) ? PanelBackground : fti->background;
MEMORY OFFSET:     -0x18     -24  >>-16

0x118d6:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x118d9:	cmp eax, -1                         #	this->dir_entry[entry].background |=|
0x118dc:	jne 0x118e8                         
0x118de:	mov eax, dword ptr [rip + 0x1eba0]  #	    (fti->background == -1) ? |P|anelBackground : fti->background;
MEMORY OFFSET:     0x1eba0     125856  >>125864

0x118e4:	mov ecx, eax                        #	this->dir_entry[entry].background |=|
0x118e6:	jmp 0x118f1                         
0x118e8:	mov rax, qword ptr [rbp - 0x18]     #	    (fti->background == -1) ? PanelBackground : fti|-|>background;
MEMORY OFFSET:     -0x18     -24  >>-16

0x118ec:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x118ef:	mov ecx, eax                        #	this->dir_entry[entry].background |=|
0x118f1:	mov rax, qword ptr [rbp - 0x28]     #	this|-|>dir_entry[entry].background =
MEMORY OFFSET:     -0x28     -40  >>-32

0x118f5:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x118f9:	mov eax, dword ptr [rbp - 0x2c]     #	this->dir_entry|[|entry].background =
MEMORY OFFSET:     -0x2c     -44  >>-36

0x118fc:	movsxd rdx, eax                     
0x118ff:	mov rax, rdx                        
0x11902:	shl rax, 2                          
0x11906:	add rax, rdx                        
0x11909:	shl rax, 4                          
0x1190d:	add rax, rsi                        
0x11910:	mov byte ptr [rax + 0x4d], cl       #	this->dir_entry[entry].background |=|
MEMORY OFFSET:     0x4d     77  >>85

0x11913:	jmp 0x11938                         #|}|
0x11915:	mov rax, qword ptr [rbp - 0x28]     #	this|-|>dir_entry[entry].brightness = 2;
MEMORY OFFSET:     -0x28     -40  >>-32

0x11919:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1191d:	mov eax, dword ptr [rbp - 0x2c]     #	this->dir_entry|[|entry].brightness = 2;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x11920:	movsxd rdx, eax                     
0x11923:	mov rax, rdx                        
0x11926:	shl rax, 2                          
0x1192a:	add rax, rdx                        
0x1192d:	shl rax, 4                          
0x11931:	add rax, rcx                        
0x11934:	mov byte ptr [rax + 0x4e], 2        #	this->dir_entry[entry].brightness |=| 2;
MEMORY OFFSET:     0x4e     78  >>86

0x11938:	nop                                 #|}|
0x11939:	leave                               
0x1193a:	ret                                 
0x1193b:	endbr64                             #|{|
0x1193f:	push rbp                            
0x11940:	mov rbp, rsp                        
0x11943:	push rbx                            
0x11944:	sub rsp, 0x178                      
0x1194b:	mov qword ptr [rbp - 0x178], rdi    
MEMORY OFFSET:     -0x178     -376  >>-368

0x11952:	mov dword ptr [rbp - 0x17c], esi    
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11958:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x11961:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x11965:	xor eax, eax                        
0x11967:	lea rax, [rbp - 0x140]              #    |m|emset(&s, 0, sizeof(s));
MEMORY OFFSET:     -0x140     -320  >>-312

0x1196e:	mov edx, 0x90                       
0x11973:	mov esi, 0                          
0x11978:	mov rdi, rax                        
0x1197b:	call 0x4a10                         
0x11980:	mov rax, qword ptr [rbp - 0x178]    #    xlstat(this|-|>dir_entry[entry].name, &s);
MEMORY OFFSET:     -0x178     -376  >>-368

0x11987:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1198b:	mov eax, dword ptr [rbp - 0x17c]    #    xlstat(this->dir_entry|[|entry].name, &s);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11991:	movsxd rdx, eax                     
0x11994:	mov rax, rdx                        
0x11997:	shl rax, 2                          
0x1199b:	add rax, rdx                        
0x1199e:	shl rax, 4                          
0x119a2:	add rax, rcx                        
0x119a5:	mov rax, qword ptr [rax]            #    xlstat(this->dir_entry[entry]|.|name, &s);
0x119a8:	lea rdx, [rbp - 0x140]              #    |x|lstat(this->dir_entry[entry].name, &s);
MEMORY OFFSET:     -0x140     -320  >>-312

0x119af:	mov rsi, rdx                        
0x119b2:	mov rdi, rax                        
0x119b5:	call 0x1f139                        
0x119ba:	mov rax, qword ptr [rbp - 0x178]    #    this|-|>dir_entry[entry].mode = s.st_mode;
MEMORY OFFSET:     -0x178     -376  >>-368

0x119c1:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x119c5:	mov eax, dword ptr [rbp - 0x17c]    #    this->dir_entry|[|entry].mode = s.st_mode;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x119cb:	movsxd rdx, eax                     
0x119ce:	mov rax, rdx                        
0x119d1:	shl rax, 2                          
0x119d5:	add rax, rdx                        
0x119d8:	shl rax, 4                          
0x119dc:	lea rdx, [rcx + rax]                
0x119e0:	mov eax, dword ptr [rbp - 0x128]    #    this->dir_entry[entry].mode = s|.|st_mode;
MEMORY OFFSET:     -0x128     -296  >>-288

0x119e6:	mov dword ptr [rdx + 0x10], eax     #    this->dir_entry[entry].mode |=| s.st_mode;
MEMORY OFFSET:     0x10     16  >>24

0x119e9:	mov rax, qword ptr [rbp - 0x178]    #    this|-|>dir_entry[entry].uid  = s.st_uid;
MEMORY OFFSET:     -0x178     -376  >>-368

0x119f0:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x119f4:	mov eax, dword ptr [rbp - 0x17c]    #    this->dir_entry|[|entry].uid  = s.st_uid;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x119fa:	movsxd rdx, eax                     
0x119fd:	mov rax, rdx                        
0x11a00:	shl rax, 2                          
0x11a04:	add rax, rdx                        
0x11a07:	shl rax, 4                          
0x11a0b:	lea rdx, [rcx + rax]                
0x11a0f:	mov eax, dword ptr [rbp - 0x124]    #    this->dir_entry[entry].uid  = s|.|st_uid;
MEMORY OFFSET:     -0x124     -292  >>-284

0x11a15:	mov dword ptr [rdx + 0x14], eax     #    this->dir_entry[entry].uid  |=| s.st_uid;
MEMORY OFFSET:     0x14     20  >>28

0x11a18:	mov rax, qword ptr [rbp - 0x178]    #    this|-|>dir_entry[entry].gid  = s.st_gid;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11a1f:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11a23:	mov eax, dword ptr [rbp - 0x17c]    #    this->dir_entry|[|entry].gid  = s.st_gid;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11a29:	movsxd rdx, eax                     
0x11a2c:	mov rax, rdx                        
0x11a2f:	shl rax, 2                          
0x11a33:	add rax, rdx                        
0x11a36:	shl rax, 4                          
0x11a3a:	lea rdx, [rcx + rax]                
0x11a3e:	mov eax, dword ptr [rbp - 0x120]    #    this->dir_entry[entry].gid  = s|.|st_gid;
MEMORY OFFSET:     -0x120     -288  >>-280

0x11a44:	mov dword ptr [rdx + 0x18], eax     #    this->dir_entry[entry].gid  |=| s.st_gid;
MEMORY OFFSET:     0x18     24  >>32

0x11a47:	mov rax, qword ptr [rbp - 0x138]    #    if (s|.|st_ino)
MEMORY OFFSET:     -0x138     -312  >>-304

0x11a4e:	test rax, rax                       #    if |(|s.st_ino)
0x11a51:	je 0x11d9a                          
0x11a57:	mov eax, dword ptr [rbp - 0x128]    #	if (|S|_ISDIR(s.st_mode))
MEMORY OFFSET:     -0x128     -296  >>-288

0x11a5d:	and eax, 0xf000                     
0x11a62:	cmp eax, 0x4000                     #	if |(|S_ISDIR(s.st_mode))
0x11a67:	jne 0x11a97                         
0x11a69:	mov rax, qword ptr [rbp - 0x178]    #	    this|-|>dir_entry[entry].type = DIR_ENTRY;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11a70:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11a74:	mov eax, dword ptr [rbp - 0x17c]    #	    this->dir_entry|[|entry].type = DIR_ENTRY;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11a7a:	movsxd rdx, eax                     
0x11a7d:	mov rax, rdx                        
0x11a80:	shl rax, 2                          
0x11a84:	add rax, rdx                        
0x11a87:	shl rax, 4                          
0x11a8b:	add rax, rcx                        
0x11a8e:	mov byte ptr [rax + 0x48], 0        #	    this->dir_entry[entry].type |=| DIR_ENTRY;
MEMORY OFFSET:     0x48     72  >>80

0x11a92:	jmp 0x11d64                         
0x11a97:	mov eax, dword ptr [rbp - 0x128]    #	    if (|S|_ISREG(s.st_mode))
MEMORY OFFSET:     -0x128     -296  >>-288

0x11a9d:	and eax, 0xf000                     
0x11aa2:	cmp eax, 0x8000                     #	    if |(|S_ISREG(s.st_mode))
0x11aa7:	jne 0x11b28                         
0x11aa9:	mov rax, qword ptr [rbp - 0x178]    #		this|-|>dir_entry[entry].type = FILE_ENTRY;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11ab0:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11ab4:	mov eax, dword ptr [rbp - 0x17c]    #		this->dir_entry|[|entry].type = FILE_ENTRY;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11aba:	movsxd rdx, eax                     
0x11abd:	mov rax, rdx                        
0x11ac0:	shl rax, 2                          
0x11ac4:	add rax, rdx                        
0x11ac7:	shl rax, 4                          
0x11acb:	add rax, rcx                        
0x11ace:	mov byte ptr [rax + 0x48], 1        #		this->dir_entry[entry].type |=| FILE_ENTRY;
MEMORY OFFSET:     0x48     72  >>80

0x11ad2:	mov eax, dword ptr [rbp - 0x128]    #		    ((s|.|st_mode & 0111) && !this->msdosfs) ? 1 : 0;
MEMORY OFFSET:     -0x128     -296  >>-288

0x11ad8:	and eax, 0x49                       #		    ((s.st_mode |&| 0111) && !this->msdosfs) ? 1 : 0;
0x11adb:	test eax, eax                       #		    ((s.st_mode & 0111) && !this->msdosfs) ? 1 |:| 0;
0x11add:	je 0x11af4                          
0x11adf:	mov rax, qword ptr [rbp - 0x178]    #		    ((s.st_mode & 0111) && !this|-|>msdosfs) ? 1 : 0;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11ae6:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x11ae9:	test eax, eax                       #		    ((s.st_mode & 0111) && !this->msdosfs) ? 1 |:| 0;
0x11aeb:	jne 0x11af4                         
0x11aed:	mov esi, 1                          #		    ((s.st_mode & 0111) && !this->msdosfs) ? 1 |:| 0;
0x11af2:	jmp 0x11af9                         
0x11af4:	mov esi, 0                          #		    ((s.st_mode & 0111) && !this->msdosfs) ? 1 |:| 0;
0x11af9:	mov rax, qword ptr [rbp - 0x178]    #		this|-|>dir_entry[entry].executable =
MEMORY OFFSET:     -0x178     -376  >>-368

0x11b00:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11b04:	mov eax, dword ptr [rbp - 0x17c]    #		this->dir_entry|[|entry].executable =
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11b0a:	movsxd rdx, eax                     
0x11b0d:	mov rax, rdx                        
0x11b10:	shl rax, 2                          
0x11b14:	add rax, rdx                        
0x11b17:	shl rax, 4                          
0x11b1b:	add rax, rcx                        
0x11b1e:	mov edx, esi                        #		this->dir_entry[entry].executable |=|
0x11b20:	mov byte ptr [rax + 0x4a], dl       
MEMORY OFFSET:     0x4a     74  >>82

0x11b23:	jmp 0x11d64                         
0x11b28:	mov rax, qword ptr [rbp - 0x178]    #		this|-|>dir_entry[entry].executable = 0;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11b2f:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11b33:	mov eax, dword ptr [rbp - 0x17c]    #		this->dir_entry|[|entry].executable = 0;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11b39:	movsxd rdx, eax                     
0x11b3c:	mov rax, rdx                        
0x11b3f:	shl rax, 2                          
0x11b43:	add rax, rdx                        
0x11b46:	shl rax, 4                          
0x11b4a:	add rax, rcx                        
0x11b4d:	mov byte ptr [rax + 0x4a], 0        #		this->dir_entry[entry].executable |=| 0;
MEMORY OFFSET:     0x4a     74  >>82

0x11b51:	mov eax, dword ptr [rbp - 0x128]    #		if (|S|_ISFIFO(s.st_mode))
MEMORY OFFSET:     -0x128     -296  >>-288

0x11b57:	and eax, 0xf000                     
0x11b5c:	cmp eax, 0x1000                     #		if |(|S_ISFIFO(s.st_mode))
0x11b61:	jne 0x11b91                         
0x11b63:	mov rax, qword ptr [rbp - 0x178]    #		    this|-|>dir_entry[entry].type = FIFO_ENTRY;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11b6a:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11b6e:	mov eax, dword ptr [rbp - 0x17c]    #		    this->dir_entry|[|entry].type = FIFO_ENTRY;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11b74:	movsxd rdx, eax                     
0x11b77:	mov rax, rdx                        
0x11b7a:	shl rax, 2                          
0x11b7e:	add rax, rdx                        
0x11b81:	shl rax, 4                          
0x11b85:	add rax, rcx                        
0x11b88:	mov byte ptr [rax + 0x48], 3        #		    this->dir_entry[entry].type |=| FIFO_ENTRY;
MEMORY OFFSET:     0x48     72  >>80

0x11b8c:	jmp 0x11d64                         
0x11b91:	mov eax, dword ptr [rbp - 0x128]    #		    if (|S|_ISSOCK(s.st_mode))
MEMORY OFFSET:     -0x128     -296  >>-288

0x11b97:	and eax, 0xf000                     
0x11b9c:	cmp eax, 0xc000                     #		    if |(|S_ISSOCK(s.st_mode))
0x11ba1:	jne 0x11bd1                         
0x11ba3:	mov rax, qword ptr [rbp - 0x178]    #			this|-|>dir_entry[entry].type = SOCKET_ENTRY;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11baa:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11bae:	mov eax, dword ptr [rbp - 0x17c]    #			this->dir_entry|[|entry].type = SOCKET_ENTRY;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11bb4:	movsxd rdx, eax                     
0x11bb7:	mov rax, rdx                        
0x11bba:	shl rax, 2                          
0x11bbe:	add rax, rdx                        
0x11bc1:	shl rax, 4                          
0x11bc5:	add rax, rcx                        
0x11bc8:	mov byte ptr [rax + 0x48], 4        #			this->dir_entry[entry].type |=| SOCKET_ENTRY;
MEMORY OFFSET:     0x48     72  >>80

0x11bcc:	jmp 0x11d64                         
0x11bd1:	mov eax, dword ptr [rbp - 0x128]    #			if (|S|_ISLNK(s.st_mode))
MEMORY OFFSET:     -0x128     -296  >>-288

0x11bd7:	and eax, 0xf000                     
0x11bdc:	cmp eax, 0xa000                     #			if |(|S_ISLNK(s.st_mode))
0x11be1:	jne 0x11d3b                         
0x11be7:	mov rax, qword ptr [rbp - 0x178]    #				xstat(this|-|>dir_entry[entry].name, &s_tmp);
MEMORY OFFSET:     -0x178     -376  >>-368

0x11bee:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11bf2:	mov eax, dword ptr [rbp - 0x17c]    #				xstat(this->dir_entry|[|entry].name, &s_tmp);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11bf8:	movsxd rdx, eax                     
0x11bfb:	mov rax, rdx                        
0x11bfe:	shl rax, 2                          
0x11c02:	add rax, rdx                        
0x11c05:	shl rax, 4                          
0x11c09:	add rax, rcx                        
0x11c0c:	mov rax, qword ptr [rax]            #				xstat(this->dir_entry[entry]|.|name, &s_tmp);
0x11c0f:	lea rdx, [rbp - 0xb0]               #				|x|stat(this->dir_entry[entry].name, &s_tmp);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x11c16:	mov rsi, rdx                        
0x11c19:	mov rdi, rax                        
0x11c1c:	call 0x1f0e4                        
0x11c21:	mov dword ptr [rbp - 0x15c], eax    
MEMORY OFFSET:     -0x15c     -348  >>-340

0x11c27:	cmp dword ptr [rbp - 0x15c], -1     #			    if |(|stat_error == -1)
MEMORY OFFSET:     -0x15c     -348  >>-340

0x11c2e:	jne 0x11cb7                         
0x11c34:	mov rax, qword ptr [rbp - 0x178]    #				this|-|>dir_entry[entry].type = SYMLINK_ENTRY;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11c3b:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11c3f:	mov eax, dword ptr [rbp - 0x17c]    #				this->dir_entry|[|entry].type = SYMLINK_ENTRY;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11c45:	movsxd rdx, eax                     
0x11c48:	mov rax, rdx                        
0x11c4b:	shl rax, 2                          
0x11c4f:	add rax, rdx                        
0x11c52:	shl rax, 4                          
0x11c56:	add rax, rcx                        
0x11c59:	mov byte ptr [rax + 0x48], 2        #				this->dir_entry[entry].type |=| SYMLINK_ENTRY;
MEMORY OFFSET:     0x48     72  >>80

0x11c5d:	mov rax, qword ptr [rbp - 0x178]    #				sz = xreadlink(this|-|>dir_entry[entry].name);
MEMORY OFFSET:     -0x178     -376  >>-368

0x11c64:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11c68:	mov eax, dword ptr [rbp - 0x17c]    #				sz = xreadlink(this->dir_entry|[|entry].name);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11c6e:	movsxd rdx, eax                     
0x11c71:	mov rax, rdx                        
0x11c74:	shl rax, 2                          
0x11c78:	add rax, rdx                        
0x11c7b:	shl rax, 4                          
0x11c7f:	add rax, rcx                        
0x11c82:	mov rax, qword ptr [rax]            #				sz = xreadlink(this->dir_entry[entry]|.|name);
0x11c85:	mov rdi, rax                        #				sz = |x|readlink(this->dir_entry[entry].name);
0x11c88:	call 0x1f01d                        
0x11c8d:	mov dword ptr [rbp - 0x160], eax    
MEMORY OFFSET:     -0x160     -352  >>-344

0x11c93:	cmp dword ptr [rbp - 0x160], -1     #				s.st_size = (sz == -1) ? 0 |:| sz;
MEMORY OFFSET:     -0x160     -352  >>-344

0x11c9a:	je 0x11ca6                          
0x11c9c:	mov eax, dword ptr [rbp - 0x160]    #				s.st_size = (sz == -1) ? 0 |:| sz;
MEMORY OFFSET:     -0x160     -352  >>-344

0x11ca2:	cdqe                                
0x11ca4:	jmp 0x11cab                         
0x11ca6:	mov eax, 0                          #				s.st_size = (sz == -1) ? 0 |:| sz;
0x11cab:	mov qword ptr [rbp - 0x110], rax    #				s.st_size |=| (sz == -1) ? 0 : sz;
MEMORY OFFSET:     -0x110     -272  >>-264

0x11cb2:	jmp 0x11d64                         
0x11cb7:	mov eax, dword ptr [rbp - 0x98]     #				    |S|_ISDIR(s_tmp.st_mode) ?  DIR_ENTRY :
MEMORY OFFSET:     -0x98     -152  >>-144

0x11cbd:	and eax, 0xf000                     
0x11cc2:	cmp eax, 0x4000                     #				    S_ISDIR(s_tmp.st_mode) ?  DIR_ENTRY |:|
0x11cc7:	setne sil                           
0x11ccb:	mov rax, qword ptr [rbp - 0x178]    #				this|-|>dir_entry[entry].type =
MEMORY OFFSET:     -0x178     -376  >>-368

0x11cd2:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11cd6:	mov eax, dword ptr [rbp - 0x17c]    #				this->dir_entry|[|entry].type =
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11cdc:	movsxd rdx, eax                     
0x11cdf:	mov rax, rdx                        
0x11ce2:	shl rax, 2                          
0x11ce6:	add rax, rdx                        
0x11ce9:	shl rax, 4                          
0x11ced:	add rax, rcx                        
0x11cf0:	mov edx, esi                        #				    S_ISDIR(s_tmp.st_mode) ?  DIR_ENTRY |:|
0x11cf2:	mov byte ptr [rax + 0x48], dl       #				this->dir_entry[entry].type |=|
MEMORY OFFSET:     0x48     72  >>80

0x11cf5:	mov rax, qword ptr [rbp - 0x80]     #				s.st_size = s_tmp|.|st_size;
MEMORY OFFSET:     -0x80     -128  >>-120

0x11cf9:	mov qword ptr [rbp - 0x110], rax    #				s.st_size |=| s_tmp.st_size;
MEMORY OFFSET:     -0x110     -272  >>-264

0x11d00:	mov eax, dword ptr [rbp - 0x98]     #				    (s_tmp|.|st_mode & 0111) ? 1 : 0;
MEMORY OFFSET:     -0x98     -152  >>-144

0x11d06:	and eax, 0x49                       #				    (s_tmp.st_mode |&| 0111) ? 1 : 0;
0x11d09:	test eax, eax                       #				    (s_tmp.st_mode & 0111) ? 1 |:| 0;
0x11d0b:	setne sil                           
0x11d0f:	mov rax, qword ptr [rbp - 0x178]    #				this|-|>dir_entry[entry].executable =
MEMORY OFFSET:     -0x178     -376  >>-368

0x11d16:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11d1a:	mov eax, dword ptr [rbp - 0x17c]    #				this->dir_entry|[|entry].executable =
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11d20:	movsxd rdx, eax                     
0x11d23:	mov rax, rdx                        
0x11d26:	shl rax, 2                          
0x11d2a:	add rax, rdx                        
0x11d2d:	shl rax, 4                          
0x11d31:	add rax, rcx                        
0x11d34:	mov edx, esi                        #				    (s_tmp.st_mode & 0111) ? 1 |:| 0;
0x11d36:	mov byte ptr [rax + 0x4a], dl       #				this->dir_entry[entry].executable |=|
MEMORY OFFSET:     0x4a     74  >>82

0x11d39:	jmp 0x11d64                         
0x11d3b:	mov rax, qword ptr [rbp - 0x178]    #			    this|-|>dir_entry[entry].type = FILE_ENTRY;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11d42:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11d46:	mov eax, dword ptr [rbp - 0x17c]    #			    this->dir_entry|[|entry].type = FILE_ENTRY;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11d4c:	movsxd rdx, eax                     
0x11d4f:	mov rax, rdx                        
0x11d52:	shl rax, 2                          
0x11d56:	add rax, rdx                        
0x11d59:	shl rax, 4                          
0x11d5d:	add rax, rcx                        
0x11d60:	mov byte ptr [rax + 0x48], 1        #			    this->dir_entry[entry].type |=| FILE_ENTRY;
MEMORY OFFSET:     0x48     72  >>80

0x11d64:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].size = s.st_size;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11d6b:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11d6f:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].size = s.st_size;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11d75:	movsxd rdx, eax                     
0x11d78:	mov rax, rdx                        
0x11d7b:	shl rax, 2                          
0x11d7f:	add rax, rdx                        
0x11d82:	shl rax, 4                          
0x11d86:	lea rdx, [rcx + rax]                
0x11d8a:	mov rax, qword ptr [rbp - 0x110]    #	this->dir_entry[entry].size = s|.|st_size;
MEMORY OFFSET:     -0x110     -272  >>-264

0x11d91:	mov qword ptr [rdx + 8], rax        #	this->dir_entry[entry].size |=| s.st_size;
MEMORY OFFSET:     0x8     8  >>16

0x11d95:	jmp 0x11e3b                         
0x11d9a:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].type = SYMLINK_ENTRY;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11da1:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11da5:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].type = SYMLINK_ENTRY;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11dab:	movsxd rdx, eax                     
0x11dae:	mov rax, rdx                        
0x11db1:	shl rax, 2                          
0x11db5:	add rax, rdx                        
0x11db8:	shl rax, 4                          
0x11dbc:	add rax, rcx                        
0x11dbf:	mov byte ptr [rax + 0x48], 2        #	this->dir_entry[entry].type |=| SYMLINK_ENTRY;
MEMORY OFFSET:     0x48     72  >>80

0x11dc3:	mov rax, qword ptr [rbp - 0x178]    #	sz = xreadlink(this|-|>dir_entry[entry].name);
MEMORY OFFSET:     -0x178     -376  >>-368

0x11dca:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11dce:	mov eax, dword ptr [rbp - 0x17c]    #	sz = xreadlink(this->dir_entry|[|entry].name);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11dd4:	movsxd rdx, eax                     
0x11dd7:	mov rax, rdx                        
0x11dda:	shl rax, 2                          
0x11dde:	add rax, rdx                        
0x11de1:	shl rax, 4                          
0x11de5:	add rax, rcx                        
0x11de8:	mov rax, qword ptr [rax]            #	sz = xreadlink(this->dir_entry[entry]|.|name);
0x11deb:	mov rdi, rax                        #	sz = |x|readlink(this->dir_entry[entry].name);
0x11dee:	call 0x1f01d                        
0x11df3:	mov dword ptr [rbp - 0x160], eax    
MEMORY OFFSET:     -0x160     -352  >>-344

0x11df9:	cmp dword ptr [rbp - 0x160], -1     #	this->dir_entry[entry].size = (sz == -1) ? 0 |:| sz;
MEMORY OFFSET:     -0x160     -352  >>-344

0x11e00:	je 0x11e0d                          
0x11e02:	mov eax, dword ptr [rbp - 0x160]    #	this->dir_entry[entry].size = (sz == -1) ? 0 |:| sz;
MEMORY OFFSET:     -0x160     -352  >>-344

0x11e08:	movsxd rdx, eax                     
0x11e0b:	jmp 0x11e12                         
0x11e0d:	mov edx, 0                          #	this->dir_entry[entry].size = (sz == -1) ? 0 |:| sz;
0x11e12:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].size = (sz == -1) ? 0 : sz;
MEMORY OFFSET:     -0x178     -376  >>-368

0x11e19:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11e1d:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].size = (sz == -1) ? 0 : sz;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11e23:	movsxd rcx, eax                     
0x11e26:	mov rax, rcx                        
0x11e29:	shl rax, 2                          
0x11e2d:	add rax, rcx                        
0x11e30:	shl rax, 4                          
0x11e34:	add rax, rsi                        
0x11e37:	mov qword ptr [rax + 8], rdx        #	this->dir_entry[entry].size |=| (sz == -1) ? 0 : sz;
MEMORY OFFSET:     0x8     8  >>16

0x11e3b:	mov eax, dword ptr [rbp - 0x124]    #    owner=|g|etuser(s.st_uid);
MEMORY OFFSET:     -0x124     -292  >>-284

0x11e41:	mov edi, eax                        
0x11e43:	call 0x242f0                        
0x11e48:	mov qword ptr [rbp - 0x158], rax    
MEMORY OFFSET:     -0x158     -344  >>-336

0x11e4f:	cmp qword ptr [rbp - 0x158], 0      #    if|(|owner)
MEMORY OFFSET:     -0x158     -344  >>-336

0x11e57:	je 0x11f07                          
0x11e5d:	mov rax, qword ptr [rbp - 0x158]    #	this->dir_entry[entry].owner=xmalloc(1 + |m|ax(strlen(owner),8));
MEMORY OFFSET:     -0x158     -344  >>-336

0x11e64:	mov rdi, rax                        
0x11e67:	call 0x4960                         
0x11e6c:	cmp rax, 7                          #	this->dir_entry[entry].owner=|x|malloc(1 + max(strlen(owner),8));
0x11e70:	jbe 0x11e87                         
0x11e72:	mov rax, qword ptr [rbp - 0x158]    #	this->dir_entry[entry].owner=xmalloc(1 + |m|ax(strlen(owner),8));
MEMORY OFFSET:     -0x158     -344  >>-336

0x11e79:	mov rdi, rax                        
0x11e7c:	call 0x4960                         
0x11e81:	lea rdx, [rax + 1]                  #	this->dir_entry[entry].owner=|x|malloc(1 + max(strlen(owner),8));
MEMORY OFFSET:     0x1     1  >>9

0x11e85:	jmp 0x11e8c                         
0x11e87:	mov edx, 9                          #	this->dir_entry[entry].owner=|x|malloc(1 + max(strlen(owner),8));
0x11e8c:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].owner=xmalloc(1 + max(strlen(owner),8));
MEMORY OFFSET:     -0x178     -376  >>-368

0x11e93:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11e97:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].owner=xmalloc(1 + max(strlen(owner),8));
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11e9d:	movsxd rcx, eax                     
0x11ea0:	mov rax, rcx                        
0x11ea3:	shl rax, 2                          
0x11ea7:	add rax, rcx                        
0x11eaa:	shl rax, 4                          
0x11eae:	lea rbx, [rsi + rax]                
0x11eb2:	mov rdi, rdx                        #	this->dir_entry[entry].owner=|x|malloc(1 + max(strlen(owner),8));
0x11eb5:	call 0x24650                        
0x11eba:	mov qword ptr [rbx + 0x28], rax     #	this->dir_entry[entry].owner|=|xmalloc(1 + max(strlen(owner),8));
MEMORY OFFSET:     0x28     40  >>48

0x11ebe:	mov rax, qword ptr [rbp - 0x178]    #	sprintf(this|-|>dir_entry[entry].owner,"%-7s", owner);
MEMORY OFFSET:     -0x178     -376  >>-368

0x11ec5:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11ec9:	mov eax, dword ptr [rbp - 0x17c]    #	sprintf(this->dir_entry|[|entry].owner,"%-7s", owner);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11ecf:	movsxd rdx, eax                     
0x11ed2:	mov rax, rdx                        
0x11ed5:	shl rax, 2                          
0x11ed9:	add rax, rdx                        
0x11edc:	shl rax, 4                          
0x11ee0:	add rax, rcx                        
0x11ee3:	mov rax, qword ptr [rax + 0x28]     #	|s|printf(this->dir_entry[entry].owner,"%-7s", owner);
MEMORY OFFSET:     0x28     40  >>48

0x11ee7:	mov rdx, qword ptr [rbp - 0x158]    
MEMORY OFFSET:     -0x158     -344  >>-336

0x11eee:	lea rcx, [rip + 0x166c6]            
MEMORY OFFSET:     0x166c6     91846  >>91854

0x11ef5:	mov rsi, rcx                        
0x11ef8:	mov rdi, rax                        
0x11efb:	mov eax, 0                          
0x11f00:	call 0x4dd0                         
0x11f05:	jmp 0x11f81                         
0x11f07:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].owner=xmalloc(32);
MEMORY OFFSET:     -0x178     -376  >>-368

0x11f0e:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11f12:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].owner=xmalloc(32);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11f18:	movsxd rdx, eax                     
0x11f1b:	mov rax, rdx                        
0x11f1e:	shl rax, 2                          
0x11f22:	add rax, rdx                        
0x11f25:	shl rax, 4                          
0x11f29:	lea rbx, [rcx + rax]                
0x11f2d:	mov edi, 0x20                       #	this->dir_entry[entry].owner=|x|malloc(32);
0x11f32:	call 0x24650                        
0x11f37:	mov qword ptr [rbx + 0x28], rax     #	this->dir_entry[entry].owner|=|xmalloc(32);
MEMORY OFFSET:     0x28     40  >>48

0x11f3b:	mov edx, dword ptr [rbp - 0x124]    #	|s|printf(this->dir_entry[entry].owner,"%-7u",s.st_uid);
MEMORY OFFSET:     -0x124     -292  >>-284

0x11f41:	mov rax, qword ptr [rbp - 0x178]    #	sprintf(this|-|>dir_entry[entry].owner,"%-7u",s.st_uid);
MEMORY OFFSET:     -0x178     -376  >>-368

0x11f48:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11f4c:	mov eax, dword ptr [rbp - 0x17c]    #	sprintf(this->dir_entry|[|entry].owner,"%-7u",s.st_uid);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11f52:	movsxd rcx, eax                     
0x11f55:	mov rax, rcx                        
0x11f58:	shl rax, 2                          
0x11f5c:	add rax, rcx                        
0x11f5f:	shl rax, 4                          
0x11f63:	add rax, rsi                        
0x11f66:	mov rax, qword ptr [rax + 0x28]     #	|s|printf(this->dir_entry[entry].owner,"%-7u",s.st_uid);
MEMORY OFFSET:     0x28     40  >>48

0x11f6a:	lea rcx, [rip + 0x1664f]            
MEMORY OFFSET:     0x1664f     91727  >>91735

0x11f71:	mov rsi, rcx                        
0x11f74:	mov rdi, rax                        
0x11f77:	mov eax, 0                          
0x11f7c:	call 0x4dd0                         
0x11f81:	mov eax, dword ptr [rbp - 0x120]    #    group=|g|etgroup(s.st_gid);
MEMORY OFFSET:     -0x120     -288  >>-280

0x11f87:	mov edi, eax                        
0x11f89:	call 0x244a0                        
0x11f8e:	mov qword ptr [rbp - 0x150], rax    
MEMORY OFFSET:     -0x150     -336  >>-328

0x11f95:	cmp qword ptr [rbp - 0x150], 0      #    if|(|group)
MEMORY OFFSET:     -0x150     -336  >>-328

0x11f9d:	je 0x1204d                          
0x11fa3:	mov rax, qword ptr [rbp - 0x150]    #	this->dir_entry[entry].group=xmalloc(1 + |m|ax(strlen(group),8));
MEMORY OFFSET:     -0x150     -336  >>-328

0x11faa:	mov rdi, rax                        
0x11fad:	call 0x4960                         
0x11fb2:	cmp rax, 7                          #	this->dir_entry[entry].group=|x|malloc(1 + max(strlen(group),8));
0x11fb6:	jbe 0x11fcd                         
0x11fb8:	mov rax, qword ptr [rbp - 0x150]    #	this->dir_entry[entry].group=xmalloc(1 + |m|ax(strlen(group),8));
MEMORY OFFSET:     -0x150     -336  >>-328

0x11fbf:	mov rdi, rax                        
0x11fc2:	call 0x4960                         
0x11fc7:	lea rdx, [rax + 1]                  #	this->dir_entry[entry].group=|x|malloc(1 + max(strlen(group),8));
MEMORY OFFSET:     0x1     1  >>9

0x11fcb:	jmp 0x11fd2                         
0x11fcd:	mov edx, 9                          #	this->dir_entry[entry].group=|x|malloc(1 + max(strlen(group),8));
0x11fd2:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].group=xmalloc(1 + max(strlen(group),8));
MEMORY OFFSET:     -0x178     -376  >>-368

0x11fd9:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x11fdd:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].group=xmalloc(1 + max(strlen(group),8));
MEMORY OFFSET:     -0x17c     -380  >>-372

0x11fe3:	movsxd rcx, eax                     
0x11fe6:	mov rax, rcx                        
0x11fe9:	shl rax, 2                          
0x11fed:	add rax, rcx                        
0x11ff0:	shl rax, 4                          
0x11ff4:	lea rbx, [rsi + rax]                
0x11ff8:	mov rdi, rdx                        #	this->dir_entry[entry].group=|x|malloc(1 + max(strlen(group),8));
0x11ffb:	call 0x24650                        
0x12000:	mov qword ptr [rbx + 0x30], rax     #	this->dir_entry[entry].group|=|xmalloc(1 + max(strlen(group),8));
MEMORY OFFSET:     0x30     48  >>56

0x12004:	mov rax, qword ptr [rbp - 0x178]    #	sprintf(this|-|>dir_entry[entry].group,"%-7s", group);
MEMORY OFFSET:     -0x178     -376  >>-368

0x1200b:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1200f:	mov eax, dword ptr [rbp - 0x17c]    #	sprintf(this->dir_entry|[|entry].group,"%-7s", group);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x12015:	movsxd rdx, eax                     
0x12018:	mov rax, rdx                        
0x1201b:	shl rax, 2                          
0x1201f:	add rax, rdx                        
0x12022:	shl rax, 4                          
0x12026:	add rax, rcx                        
0x12029:	mov rax, qword ptr [rax + 0x30]     #	|s|printf(this->dir_entry[entry].group,"%-7s", group);
MEMORY OFFSET:     0x30     48  >>56

0x1202d:	mov rdx, qword ptr [rbp - 0x150]    
MEMORY OFFSET:     -0x150     -336  >>-328

0x12034:	lea rcx, [rip + 0x16580]            
MEMORY OFFSET:     0x16580     91520  >>91528

0x1203b:	mov rsi, rcx                        
0x1203e:	mov rdi, rax                        
0x12041:	mov eax, 0                          
0x12046:	call 0x4dd0                         
0x1204b:	jmp 0x120c7                         
0x1204d:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].group=xmalloc(32);
MEMORY OFFSET:     -0x178     -376  >>-368

0x12054:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12058:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].group=xmalloc(32);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x1205e:	movsxd rdx, eax                     
0x12061:	mov rax, rdx                        
0x12064:	shl rax, 2                          
0x12068:	add rax, rdx                        
0x1206b:	shl rax, 4                          
0x1206f:	lea rbx, [rcx + rax]                
0x12073:	mov edi, 0x20                       #	this->dir_entry[entry].group=|x|malloc(32);
0x12078:	call 0x24650                        
0x1207d:	mov qword ptr [rbx + 0x30], rax     #	this->dir_entry[entry].group|=|xmalloc(32);
MEMORY OFFSET:     0x30     48  >>56

0x12081:	mov edx, dword ptr [rbp - 0x120]    #	|s|printf(this->dir_entry[entry].group,"%-7u",s.st_gid);
MEMORY OFFSET:     -0x120     -288  >>-280

0x12087:	mov rax, qword ptr [rbp - 0x178]    #	sprintf(this|-|>dir_entry[entry].group,"%-7u",s.st_gid);
MEMORY OFFSET:     -0x178     -376  >>-368

0x1208e:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12092:	mov eax, dword ptr [rbp - 0x17c]    #	sprintf(this->dir_entry|[|entry].group,"%-7u",s.st_gid);
MEMORY OFFSET:     -0x17c     -380  >>-372

0x12098:	movsxd rcx, eax                     
0x1209b:	mov rax, rcx                        
0x1209e:	shl rax, 2                          
0x120a2:	add rax, rcx                        
0x120a5:	shl rax, 4                          
0x120a9:	add rax, rsi                        
0x120ac:	mov rax, qword ptr [rax + 0x30]     #	|s|printf(this->dir_entry[entry].group,"%-7u",s.st_gid);
MEMORY OFFSET:     0x30     48  >>56

0x120b0:	lea rcx, [rip + 0x16509]            
MEMORY OFFSET:     0x16509     91401  >>91409

0x120b7:	mov rsi, rcx                        
0x120ba:	mov rdi, rax                        
0x120bd:	mov eax, 0                          
0x120c2:	call 0x4dd0                         
0x120c7:	mov rax, qword ptr [rbp - 0x178]    #    this|-|>dir_entry[entry].mtime = s.st_mtime;
MEMORY OFFSET:     -0x178     -376  >>-368

0x120ce:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x120d2:	mov eax, dword ptr [rbp - 0x17c]    #    this->dir_entry|[|entry].mtime = s.st_mtime;
MEMORY OFFSET:     -0x17c     -380  >>-372

0x120d8:	movsxd rdx, eax                     
0x120db:	mov rax, rdx                        
0x120de:	shl rax, 2                          
0x120e2:	add rax, rdx                        
0x120e5:	shl rax, 4                          
0x120e9:	lea rdx, [rcx + rax]                
0x120ed:	mov rax, qword ptr [rbp - 0xe8]     #    this->dir_entry[entry].mtime = s.|s|t_mtime;
MEMORY OFFSET:     -0xe8     -232  >>-224

0x120f4:	mov qword ptr [rdx + 0x20], rax     #    this->dir_entry[entry].mtime |=| s.st_mtime;
MEMORY OFFSET:     0x20     32  >>40

0x120f8:	lea rax, [rbp - 0x140]              #    time = |l|ocaltime(&s.st_mtime);
MEMORY OFFSET:     -0x140     -320  >>-312

0x120ff:	add rax, 0x58                       
0x12103:	mov rdi, rax                        
0x12106:	call 0x4800                         
0x1210b:	mov qword ptr [rbp - 0x148], rax    
MEMORY OFFSET:     -0x148     -328  >>-320

0x12112:	mov rax, qword ptr [rbp - 0x148]    #    if ((hour = time|-|>tm_hour % 12) == 0)
MEMORY OFFSET:     -0x148     -328  >>-320

0x12119:	mov edx, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1211c:	movsxd rax, edx                     #    if ((hour |=| time->tm_hour % 12) == 0)
0x1211f:	imul rax, rax, 0x2aaaaaab           
0x12126:	shr rax, 0x20                       
0x1212a:	sar eax, 1                          
0x1212c:	mov ecx, edx                        
0x1212e:	sar ecx, 0x1f                       
0x12131:	sub eax, ecx                        
0x12133:	mov dword ptr [rbp - 0x164], eax    
MEMORY OFFSET:     -0x164     -356  >>-348

0x12139:	mov ecx, dword ptr [rbp - 0x164]    
MEMORY OFFSET:     -0x164     -356  >>-348

0x1213f:	mov eax, ecx                        
0x12141:	add eax, eax                        
0x12143:	add eax, ecx                        
0x12145:	shl eax, 2                          
0x12148:	sub edx, eax                        
0x1214a:	mov dword ptr [rbp - 0x164], edx    
MEMORY OFFSET:     -0x164     -356  >>-348

0x12150:	cmp dword ptr [rbp - 0x164], 0      #    if |(|(hour = time->tm_hour % 12) == 0)
MEMORY OFFSET:     -0x164     -356  >>-348

0x12157:	jne 0x12163                         
0x12159:	mov dword ptr [rbp - 0x164], 0xc    #	hour |=| 12;
MEMORY OFFSET:     -0x164     -356  >>-348

0x12163:	mov rax, qword ptr [rbp - 0x148]    #	    hour, time->tm_min, (time|-|>tm_hour < 12) ? 'a' : 'p');
MEMORY OFFSET:     -0x148     -328  >>-320

0x1216a:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1216d:	cmp eax, 0xb                        #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x12170:	jg 0x1217a                          
0x12172:	mov r9d, 0x61                       #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x12178:	jmp 0x12180                         
0x1217a:	mov r9d, 0x70                       #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x12180:	mov rax, qword ptr [rbp - 0x148]    #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
MEMORY OFFSET:     -0x148     -328  >>-320

0x12187:	mov edi, dword ptr [rax + 4]        
MEMORY OFFSET:     0x4     4  >>12

0x1218a:	mov rax, qword ptr [rbp - 0x148]    #	    time->tm_mon + 1, time->tm_mday, time|-|>tm_year % 100,
MEMORY OFFSET:     -0x148     -328  >>-320

0x12191:	mov eax, dword ptr [rax + 0x14]     
MEMORY OFFSET:     0x14     20  >>28

0x12194:	movsxd rdx, eax                     #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x12197:	imul rdx, rdx, 0x51eb851f           
0x1219e:	shr rdx, 0x20                       
0x121a2:	sar edx, 5                          
0x121a5:	mov ecx, eax                        
0x121a7:	sar ecx, 0x1f                       
0x121aa:	sub edx, ecx                        
0x121ac:	imul ecx, edx, 0x64                 
0x121af:	sub eax, ecx                        
0x121b1:	mov edx, eax                        
0x121b3:	mov rax, qword ptr [rbp - 0x148]    
MEMORY OFFSET:     -0x148     -328  >>-320

0x121ba:	mov ecx, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x121bd:	mov rax, qword ptr [rbp - 0x148]    #	    time|-|>tm_mon + 1, time->tm_mday, time->tm_year % 100,
MEMORY OFFSET:     -0x148     -328  >>-320

0x121c4:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x121c7:	lea esi, [rax + 1]                  #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
MEMORY OFFSET:     0x1     1  >>9

0x121ca:	mov rax, qword ptr [rbp - 0x178]    #    sprintf(this|-|>dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
MEMORY OFFSET:     -0x178     -376  >>-368

0x121d1:	mov r10, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x121d5:	mov eax, dword ptr [rbp - 0x17c]    #    sprintf(this->dir_entry|[|entry].date,"%2d-%02d-%02d %2d:%02d%c",
MEMORY OFFSET:     -0x17c     -380  >>-372

0x121db:	movsxd r8, eax                      
0x121de:	mov rax, r8                         
0x121e1:	shl rax, 2                          
0x121e5:	add rax, r8                         
0x121e8:	shl rax, 4                          
0x121ec:	add rax, r10                        
0x121ef:	add rax, 0x38                       #    sprintf(this->dir_entry[entry]|.|date,"%2d-%02d-%02d %2d:%02d%c",
0x121f3:	mov r8d, dword ptr [rbp - 0x164]    #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
MEMORY OFFSET:     -0x164     -356  >>-348

0x121fa:	push r9                             
0x121fc:	push rdi                            
0x121fd:	mov r9d, r8d                        
0x12200:	mov r8d, edx                        
0x12203:	mov edx, esi                        
0x12205:	lea rsi, [rip + 0x163b9]            
MEMORY OFFSET:     0x163b9     91065  >>91073

0x1220c:	mov rdi, rax                        
0x1220f:	mov eax, 0                          
0x12214:	call 0x4dd0                         
0x12219:	add rsp, 0x10                       
0x1221d:	nop                                 #|}|
0x1221e:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x12222:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1222b:	je 0x12232                          
0x1222d:	call 0x4980                         #|}|
0x12232:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x12236:	leave                               
0x12237:	ret                                 
0x12238:	endbr64                             #|{|
0x1223c:	push rbp                            
0x1223d:	mov rbp, rsp                        
0x12240:	push rbx                            
0x12241:	sub rsp, 0x1e8                      
0x12248:	mov qword ptr [rbp - 0x1d8], rdi    
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1224f:	mov qword ptr [rbp - 0x1e0], rsi    
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x12256:	mov dword ptr [rbp - 0x1e4], edx    
MEMORY OFFSET:     -0x1e4     -484  >>-476

0x1225c:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x12265:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x12269:	xor eax, eax                        
0x1226b:	mov dword ptr [rbp - 0x1cc], 0      #    int |d|otdot_found = 0;
MEMORY OFFSET:     -0x1cc     -460  >>-452

0x12275:	mov qword ptr [rbp - 0x1b0], 0      #    dir_entry_t *|o|ld_dir_entry = NULL, tmp;
MEMORY OFFSET:     -0x1b0     -432  >>-424

0x12280:	mov dword ptr [rbp - 0x1c4], 0      #    int entry, |o|ld_entries = 0, backdir_index = -1;
MEMORY OFFSET:     -0x1c4     -452  >>-444

0x1228a:	mov dword ptr [rbp - 0x1c0], 0xffffffff#    int entry, old_entries = 0, |b|ackdir_index = -1;
MEMORY OFFSET:     -0x1c0     -448  >>-440

0x12294:	mov rax, qword ptr [rbp - 0x1e0]    #    tmpdir = |o|pendir(directory);
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x1229b:	mov rdi, rax                        
0x1229e:	call 0x4910                         
0x122a3:	mov qword ptr [rbp - 0x1b8], rax    
MEMORY OFFSET:     -0x1b8     -440  >>-432

0x122aa:	cmp qword ptr [rbp - 0x1b8], 0      #    if |(|tmpdir == NULL)
MEMORY OFFSET:     -0x1b8     -440  >>-432

0x122b2:	jne 0x1238b                         
0x122b8:	mov rax, qword ptr [rbp - 0x1e0]    #	if (|s|trcmp(directory, "..") != 0)
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x122bf:	lea rdx, [rip + 0x16318]            
MEMORY OFFSET:     0x16318     90904  >>90912

0x122c6:	mov rsi, rdx                        
0x122c9:	mov rdi, rax                        
0x122cc:	call 0x4af0                         
0x122d1:	test eax, eax                       #	if |(|strcmp(directory, "..") != 0)
0x122d3:	je 0x122df                          
0x122d5:	mov eax, 0                          #	    return |0|;
0x122da:	jmp 0x13107                         
0x122df:	mov eax, 0                          #	directory = |x|getcwd();
0x122e4:	call 0x1f18e                        
0x122e9:	mov qword ptr [rbp - 0x1e0], rax    
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x122f0:	cmp qword ptr [rbp - 0x1e0], 0      #	if |(|directory == NULL)
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x122f8:	jne 0x12352                         
0x122fa:	mov rax, qword ptr [rbp - 0x1d8]    #	    directory = xstrdup(this|-|>path);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12301:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x12305:	mov rdi, rax                        #	    directory = |x|strdup(this->path);
0x12308:	call 0x24780                        
0x1230d:	mov qword ptr [rbp - 0x1e0], rax    
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x12314:	mov rax, qword ptr [rbp - 0x1e0]    #	    ptr = |s|trrchr(directory, '/');
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x1231b:	mov esi, 0x2f                       
0x12320:	mov rdi, rax                        
0x12323:	call 0x49e0                         
0x12328:	mov qword ptr [rbp - 0x1a8], rax    
MEMORY OFFSET:     -0x1a8     -424  >>-416

0x1232f:	cmp qword ptr [rbp - 0x1a8], 0      #	    if |(|ptr == NULL)
MEMORY OFFSET:     -0x1a8     -424  >>-416

0x12337:	jne 0x12348                         
0x12339:	lea rax, [rip + 0x162a1]            #		|f|atal("bad directory");
MEMORY OFFSET:     0x162a1     90785  >>90793

0x12340:	mov rdi, rax                        
0x12343:	call 0x672c                         
0x12348:	mov rax, qword ptr [rbp - 0x1a8]    #	    *ptr |=| 0;
MEMORY OFFSET:     -0x1a8     -424  >>-416

0x1234f:	mov byte ptr [rax], 0               
0x12352:	mov rax, qword ptr [rbp - 0x1e0]    #	tmpdir = |o|pendir(directory);
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x12359:	mov rdi, rax                        
0x1235c:	call 0x4910                         
0x12361:	mov qword ptr [rbp - 0x1b8], rax    
MEMORY OFFSET:     -0x1b8     -440  >>-432

0x12368:	cmp qword ptr [rbp - 0x1b8], 0      #	if |(|tmpdir == NULL)
MEMORY OFFSET:     -0x1b8     -440  >>-432

0x12370:	jne 0x1238b                         
0x12372:	mov rax, qword ptr [rbp - 0x1e0]    #	    |x|free(directory);
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x12379:	mov rdi, rax                        
0x1237c:	call 0x1eeae                        
0x12381:	mov eax, 0                          #	    return |0|;
0x12386:	jmp 0x13107                         
0x1238b:	mov rax, qword ptr [rbp - 0x1e0]    #    if (|c|hdir(directory) == -1)
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x12392:	mov rdi, rax                        
0x12395:	call 0x4970                         
0x1239a:	cmp eax, -1                         #    if |(|chdir(directory) == -1)
0x1239d:	jne 0x123b8                         
0x1239f:	mov rax, qword ptr [rbp - 0x1b8]    #	|c|losedir(tmpdir);
MEMORY OFFSET:     -0x1b8     -440  >>-432

0x123a6:	mov rdi, rax                        
0x123a9:	call 0x4a80                         
0x123ae:	mov eax, 0                          #	return |0|;
0x123b3:	jmp 0x13107                         
0x123b8:	mov rax, qword ptr [rbp - 0x1d8]    #    if (this|-|>dir)
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x123bf:	mov rax, qword ptr [rax]            
0x123c2:	test rax, rax                       #    if |(|this->dir)
0x123c5:	je 0x123d9                          
0x123c7:	mov rax, qword ptr [rbp - 0x1d8]    #	|c|losedir(this->dir);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x123ce:	mov rax, qword ptr [rax]            
0x123d1:	mov rdi, rax                        
0x123d4:	call 0x4a80                         
0x123d9:	mov rax, qword ptr [rbp - 0x1d8]    #    this->dir |=| tmpdir;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x123e0:	mov rdx, qword ptr [rbp - 0x1b8]    
MEMORY OFFSET:     -0x1b8     -440  >>-432

0x123e7:	mov qword ptr [rax], rdx            
0x123ea:	mov rax, qword ptr [rbp - 0x1d8]    #    old_path = xmalloc(this|-|>pathlen + 1);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x123f1:	mov rax, qword ptr [rax + 0x78]     
MEMORY OFFSET:     0x78     120  >>128

0x123f5:	add rax, 1                          #    old_path = |x|malloc(this->pathlen + 1);
0x123f9:	mov rdi, rax                        
0x123fc:	call 0x24650                        
0x12401:	mov qword ptr [rbp - 0x1a0], rax    
MEMORY OFFSET:     -0x1a0     -416  >>-408

0x12408:	mov rax, qword ptr [rbp - 0x1d8]    #    strcpy(old_path, this|-|>path);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1240f:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x12413:	mov rax, qword ptr [rbp - 0x1a0]    #    |s|trcpy(old_path, this->path);
MEMORY OFFSET:     -0x1a0     -416  >>-408

0x1241a:	mov rsi, rdx                        
0x1241d:	mov rdi, rax                        
0x12420:	call 0x4870                         
0x12425:	mov rax, qword ptr [rbp - 0x1e0]    #    if (directory|[|0] == '/')
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x1242c:	movzx eax, byte ptr [rax]           
0x1242f:	cmp al, 0x2f                        #    if |(|directory[0] == '/')
0x12431:	jne 0x12452                         
0x12433:	mov rax, qword ptr [rbp - 0x1e0]    #	this->path = |x|strdup(directory);
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x1243a:	mov rdi, rax                        
0x1243d:	call 0x24780                        
0x12442:	mov rdx, qword ptr [rbp - 0x1d8]    #	this->path |=| xstrdup(directory);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12449:	mov qword ptr [rdx + 0x18], rax     
MEMORY OFFSET:     0x18     24  >>32

0x1244d:	jmp 0x12590                         
0x12452:	mov eax, 0                          #	char *path = |x|getcwd();
0x12457:	call 0x1f18e                        
0x1245c:	mov qword ptr [rbp - 0x198], rax    
MEMORY OFFSET:     -0x198     -408  >>-400

0x12463:	cmp qword ptr [rbp - 0x198], 0      #	if |(|path)
MEMORY OFFSET:     -0x198     -408  >>-400

0x1246b:	je 0x12497                          
0x1246d:	mov rax, qword ptr [rbp - 0x1d8]    #	    xfree(this|-|>path);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12474:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x12478:	mov rdi, rax                        #	    |x|free(this->path);
0x1247b:	call 0x1eeae                        
0x12480:	mov rax, qword ptr [rbp - 0x1d8]    #	    this->path |=| path;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12487:	mov rdx, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x1248e:	mov qword ptr [rax + 0x18], rdx     
MEMORY OFFSET:     0x18     24  >>32

0x12492:	jmp 0x12590                         
0x12497:	mov rax, qword ptr [rbp - 0x1d8]    #	    this->pathlen = strlen(this|-|>path);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1249e:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x124a2:	mov rdi, rax                        #	    this->pathlen = |s|trlen(this->path);
0x124a5:	call 0x4960                         
0x124aa:	mov rdx, qword ptr [rbp - 0x1d8]    #	    this->pathlen |=| strlen(this->path);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x124b1:	mov qword ptr [rdx + 0x78], rax     
MEMORY OFFSET:     0x78     120  >>128

0x124b5:	mov rax, qword ptr [rbp - 0x1e0]    #	    if (|s|trcmp(directory, "..") == 0)
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x124bc:	lea rdx, [rip + 0x1611b]            
MEMORY OFFSET:     0x1611b     90395  >>90403

0x124c3:	mov rsi, rdx                        
0x124c6:	mov rdi, rax                        
0x124c9:	call 0x4af0                         
0x124ce:	test eax, eax                       #	    if |(|strcmp(directory, "..") == 0)
0x124d0:	jne 0x12516                         
0x124d2:	mov rax, qword ptr [rbp - 0x1d8]    #		char *ptr = strrchr(this|-|>path, '/');
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x124d9:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x124dd:	mov esi, 0x2f                       #		char *ptr = |s|trrchr(this->path, '/');
0x124e2:	mov rdi, rax                        
0x124e5:	call 0x49e0                         
0x124ea:	mov qword ptr [rbp - 0x190], rax    
MEMORY OFFSET:     -0x190     -400  >>-392

0x124f1:	cmp qword ptr [rbp - 0x190], 0      #		if |(|ptr == NULL)
MEMORY OFFSET:     -0x190     -400  >>-392

0x124f9:	jne 0x1250a                         
0x124fb:	lea rax, [rip + 0x160ed]            #		    |f|atal("bad path");
MEMORY OFFSET:     0x160ed     90349  >>90357

0x12502:	mov rdi, rax                        
0x12505:	call 0x672c                         
0x1250a:	mov rax, qword ptr [rbp - 0x190]    #		*ptr |=| 0;
MEMORY OFFSET:     -0x190     -400  >>-392

0x12511:	mov byte ptr [rax], 0               
0x12514:	jmp 0x12590                         
0x12516:	mov rax, qword ptr [rbp - 0x1d8]    #		this->path = xrealloc(this->path, this|-|>pathlen + 1 + 1 +
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1251d:	mov rbx, qword ptr [rax + 0x78]     
MEMORY OFFSET:     0x78     120  >>128

0x12521:	mov rax, qword ptr [rbp - 0x1e0]    #				      |s|trlen(directory));
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x12528:	mov rdi, rax                        
0x1252b:	call 0x4960                         
0x12530:	add rax, rbx                        #		this->path = xrealloc(this->path, this->pathlen + 1 + 1 |+|
0x12533:	lea rdx, [rax + 2]                  #		this->path = |x|realloc(this->path, this->pathlen + 1 + 1 +
MEMORY OFFSET:     0x2     2  >>10

0x12537:	mov rax, qword ptr [rbp - 0x1d8]    #		this->path = xrealloc(this|-|>path, this->pathlen + 1 + 1 +
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1253e:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x12542:	mov rsi, rdx                        #		this->path = |x|realloc(this->path, this->pathlen + 1 + 1 +
0x12545:	mov rdi, rax                        
0x12548:	call 0x24670                        
0x1254d:	mov rdx, qword ptr [rbp - 0x1d8]    #		this->path |=| xrealloc(this->path, this->pathlen + 1 + 1 +
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12554:	mov qword ptr [rdx + 0x18], rax     
MEMORY OFFSET:     0x18     24  >>32

0x12558:	mov rax, qword ptr [rbp - 0x1d8]    #		|s|trcat(this->path, "/");
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1255f:	mov rbx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x12563:	mov rdi, rbx                        
0x12566:	call 0x4960                         
0x1256b:	add rax, rbx                        
0x1256e:	mov word ptr [rax], 0x2f            
0x12573:	mov rax, qword ptr [rbp - 0x1d8]    #		|s|trcat(this->path, directory);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1257a:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1257e:	mov rdx, qword ptr [rbp - 0x1e0]    
MEMORY OFFSET:     -0x1e0     -480  >>-472

0x12585:	mov rsi, rdx                        
0x12588:	mov rdi, rax                        
0x1258b:	call 0x4db0                         
0x12590:	mov rax, qword ptr [rbp - 0x1d8]    #    |m|inimize_path(this->path);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12597:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1259b:	mov rdi, rax                        
0x1259e:	call 0x1e08b                        
0x125a3:	mov rax, qword ptr [rbp - 0x1d8]    #    this->pathlen = strlen(this|-|>path);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x125aa:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x125ae:	mov rdi, rax                        #    this->pathlen = |s|trlen(this->path);
0x125b1:	call 0x4960                         
0x125b6:	mov rdx, qword ptr [rbp - 0x1d8]    #    this->pathlen |=| strlen(this->path);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x125bd:	mov qword ptr [rdx + 0x78], rax     
MEMORY OFFSET:     0x78     120  >>128

0x125c1:	mov rax, qword ptr [rbp - 0x1d8]    #    xstat(this|-|>path, &s);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x125c8:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x125cc:	lea rdx, [rbp - 0xb0]               #    |x|stat(this->path, &s);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x125d3:	mov rsi, rdx                        
0x125d6:	mov rdi, rax                        
0x125d9:	call 0x1f0e4                        
0x125de:	mov rax, qword ptr [rbp - 0x80]     #    if (s|.|st_size >= 2048)
MEMORY OFFSET:     -0x80     -128  >>-120

0x125e2:	cmp rax, 0x7ff                      #    if |(|s.st_size >= 2048)
0x125e8:	jle 0x12603                         
0x125ea:	mov rax, qword ptr [rip + 0x1deef]  #	|i|l_message(PANEL_READ_DIR_MSG);
MEMORY OFFSET:     0x1deef     122607  >>122615

0x125f1:	mov rdi, rax                        
0x125f4:	call 0xfcbe                         
0x125f9:	mov eax, 0                          #	|t|ty_update();
0x125fe:	call 0xb4b7                         
0x12603:	lea rax, [rbp - 0x130]              #    |s|tatfs(".", &fstat);
MEMORY OFFSET:     -0x130     -304  >>-296

0x1260a:	mov rsi, rax                        
0x1260d:	lea rax, [rip + 0x15fe4]            
MEMORY OFFSET:     0x15fe4     90084  >>90092

0x12614:	mov rdi, rax                        
0x12617:	call 0x4bc0                         
0x1261c:	mov rax, qword ptr [rbp - 0x130]    #    this->msdosfs = fstat|.|f_type == 0x4d44;
MEMORY OFFSET:     -0x130     -304  >>-296

0x12623:	cmp rax, 0x4d44                     #    this->msdosfs = fstat.f_type |=|= 0x4d44;
0x12629:	sete al                             
0x1262c:	movzx edx, al                       
0x1262f:	mov rax, qword ptr [rbp - 0x1d8]    #    this->msdosfs |=| fstat.f_type == 0x4d44;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12636:	mov dword ptr [rax + 0x10], edx     
MEMORY OFFSET:     0x10     16  >>24

0x12639:	cmp dword ptr [rbp - 0x1e4], 0      #	     this->selected_entries |&|&
MEMORY OFFSET:     -0x1e4     -484  >>-476

0x12640:	je 0x12678                          
0x12642:	mov rax, qword ptr [rbp - 0x1d8]    #	     this|-|>selected_entries &&
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12649:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1264c:	test eax, eax                       #    verify = verify |&|&
0x1264e:	je 0x12678                          
0x12650:	mov rax, qword ptr [rbp - 0x1d8]    #	     (strcmp(old_path, this|-|>path) == 0);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12657:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1265b:	mov rax, qword ptr [rbp - 0x1a0]    #	     (|s|trcmp(old_path, this->path) == 0);
MEMORY OFFSET:     -0x1a0     -416  >>-408

0x12662:	mov rsi, rdx                        
0x12665:	mov rdi, rax                        
0x12668:	call 0x4af0                         
0x1266d:	test eax, eax                       #	     this->selected_entries |&|&
0x1266f:	jne 0x12678                         
0x12671:	mov eax, 1                          #	     this->selected_entries |&|&
0x12676:	jmp 0x1267d                         
0x12678:	mov eax, 0                          #	     this->selected_entries |&|&
0x1267d:	mov dword ptr [rbp - 0x1e4], eax    #    verify |=| verify &&
MEMORY OFFSET:     -0x1e4     -484  >>-476

0x12683:	cmp dword ptr [rbp - 0x1e4], 0      #    if |(|verify)
MEMORY OFFSET:     -0x1e4     -484  >>-476

0x1268a:	je 0x126c2                          
0x1268c:	mov rax, qword ptr [rbp - 0x1d8]    #	old_dir_entry |=| this->dir_entry;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12693:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12697:	mov qword ptr [rbp - 0x1b0], rax    
MEMORY OFFSET:     -0x1b0     -432  >>-424

0x1269e:	mov rax, qword ptr [rbp - 0x1d8]    #	old_entries |=| this->entries;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x126a5:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x126a8:	mov dword ptr [rbp - 0x1c4], eax    
MEMORY OFFSET:     -0x1c4     -452  >>-444

0x126ae:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry |=| NULL;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x126b5:	mov qword ptr [rax + 0x38], 0       
MEMORY OFFSET:     0x38     56  >>64

0x126bd:	jmp 0x127ad                         
0x126c2:	mov rax, qword ptr [rbp - 0x1d8]    #	if (this|-|>dir_entry)
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x126c9:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x126cd:	test rax, rax                       #	if |(|this->dir_entry)
0x126d0:	je 0x127ad                          
0x126d6:	mov dword ptr [rbp - 0x1c8], 0      #	    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x126e0:	jmp 0x12775                         #	    |f|or (entry = 0; entry < this->entries; entry++)
0x126e5:	mov rax, qword ptr [rbp - 0x1d8]    #		if (this|-|>dir_entry[entry].name)
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x126ec:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x126f0:	mov eax, dword ptr [rbp - 0x1c8]    #		if (this->dir_entry|[|entry].name)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x126f6:	movsxd rdx, eax                     
0x126f9:	mov rax, rdx                        
0x126fc:	shl rax, 2                          
0x12700:	add rax, rdx                        
0x12703:	shl rax, 4                          
0x12707:	add rax, rcx                        
0x1270a:	mov rax, qword ptr [rax]            #		if (this->dir_entry[entry]|.|name)
0x1270d:	test rax, rax                       #		if |(|this->dir_entry[entry].name)
0x12710:	je 0x1276e                          
0x12712:	mov rax, qword ptr [rbp - 0x1d8]    #		    xfree(this|-|>dir_entry[entry].name);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12719:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1271d:	mov eax, dword ptr [rbp - 0x1c8]    #		    xfree(this->dir_entry|[|entry].name);
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12723:	movsxd rdx, eax                     
0x12726:	mov rax, rdx                        
0x12729:	shl rax, 2                          
0x1272d:	add rax, rdx                        
0x12730:	shl rax, 4                          
0x12734:	add rax, rcx                        
0x12737:	mov rax, qword ptr [rax]            #		    xfree(this->dir_entry[entry]|.|name);
0x1273a:	mov rdi, rax                        #		    |x|free(this->dir_entry[entry].name);
0x1273d:	call 0x1eeae                        
0x12742:	mov rax, qword ptr [rbp - 0x1d8]    #		    this|-|>dir_entry[entry].name = NULL;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12749:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1274d:	mov eax, dword ptr [rbp - 0x1c8]    #		    this->dir_entry|[|entry].name = NULL;
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12753:	movsxd rdx, eax                     
0x12756:	mov rax, rdx                        
0x12759:	shl rax, 2                          
0x1275d:	add rax, rdx                        
0x12760:	shl rax, 4                          
0x12764:	add rax, rcx                        
0x12767:	mov qword ptr [rax], 0              #		    this->dir_entry[entry].name |=| NULL;
0x1276e:	add dword ptr [rbp - 0x1c8], 1      #	    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12775:	mov rax, qword ptr [rbp - 0x1d8]    #	    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1277c:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1277f:	cmp dword ptr [rbp - 0x1c8], eax    #	    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12785:	jl 0x126e5                          
0x1278b:	mov rax, qword ptr [rbp - 0x1d8]    #	    xfree(this|-|>dir_entry);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12792:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12796:	mov rdi, rax                        #	    |x|free(this->dir_entry);
0x12799:	call 0x1eeae                        
0x1279e:	mov rax, qword ptr [rbp - 0x1d8]    #	    this->dir_entry |=| NULL;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x127a5:	mov qword ptr [rax + 0x38], 0       
MEMORY OFFSET:     0x38     56  >>64

0x127ad:	mov edi, 0x50                       #    this->dir_entry = (dir_entry_t *)|x|malloc(sizeof(dir_entry_t));
0x127b2:	call 0x24650                        
0x127b7:	mov rdx, qword ptr [rbp - 0x1d8]    #    this->dir_entry |=| (dir_entry_t *)xmalloc(sizeof(dir_entry_t));
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x127be:	mov qword ptr [rdx + 0x38], rax     
MEMORY OFFSET:     0x38     56  >>64

0x127c2:	mov rax, qword ptr [rbp - 0x1d8]    #    this->selected_entries |=| 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x127c9:	mov dword ptr [rax + 0x70], 0       
MEMORY OFFSET:     0x70     112  >>120

0x127d0:	mov rax, qword ptr [rbp - 0x1d8]    #    this->maxname |=| 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x127d7:	mov dword ptr [rax + 0x30], 0       
MEMORY OFFSET:     0x30     48  >>56

0x127de:	mov rax, qword ptr [rbp - 0x1d8]    #    for (this->entries |=| 0; (d = readdir(this->dir)); this->entries++)
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x127e5:	mov dword ptr [rax + 0x68], 0       
MEMORY OFFSET:     0x68     104  >>112

0x127ec:	jmp 0x12b50                         #    |f|or (this->entries = 0; (d = readdir(this->dir)); this->entries++)
0x127f1:	mov rax, qword ptr [rbp - 0x188]    #	if (d->d_name|[|0] == '.' && d->d_name[1] == 0)
MEMORY OFFSET:     -0x188     -392  >>-384

0x127f8:	movzx eax, byte ptr [rax + 0x13]    
MEMORY OFFSET:     0x13     19  >>27

0x127fc:	cmp al, 0x2e                        #	if |(|d->d_name[0] == '.' && d->d_name[1] == 0)
0x127fe:	jne 0x1282b                         
0x12800:	mov rax, qword ptr [rbp - 0x188]    #	if (d->d_name[0] == '.' && d->d_name|[|1] == 0)
MEMORY OFFSET:     -0x188     -392  >>-384

0x12807:	movzx eax, byte ptr [rax + 0x14]    
MEMORY OFFSET:     0x14     20  >>28

0x1280b:	test al, al                         #	if (d->d_name[0] == '.' |&|& d->d_name[1] == 0)
0x1280d:	jne 0x1282b                         
0x1280f:	mov rax, qword ptr [rbp - 0x1d8]    #	    this|-|>entries--;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12816:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12819:	lea edx, [rax - 1]                  #	    this->entries|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x1281c:	mov rax, qword ptr [rbp - 0x1d8]    
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12823:	mov dword ptr [rax + 0x68], edx     
MEMORY OFFSET:     0x68     104  >>112

0x12826:	jmp 0x12b39                         #	    |c|ontinue;
0x1282b:	mov rax, qword ptr [rbp - 0x188]    #	if (strcmp(d|-|>d_name, "..") == 0)
MEMORY OFFSET:     -0x188     -392  >>-384

0x12832:	add rax, 0x13                       
0x12836:	lea rdx, [rip + 0x15da1]            #	if (|s|trcmp(d->d_name, "..") == 0)
MEMORY OFFSET:     0x15da1     89505  >>89513

0x1283d:	mov rsi, rdx                        
0x12840:	mov rdi, rax                        
0x12843:	call 0x4af0                         
0x12848:	test eax, eax                       #	if |(|strcmp(d->d_name, "..") == 0)
0x1284a:	jne 0x1289a                         
0x1284c:	mov dword ptr [rbp - 0x1cc], 1      #	    dotdot_found |=| 1;
MEMORY OFFSET:     -0x1cc     -460  >>-452

0x12856:	mov rax, qword ptr [rbp - 0x1d8]    #	    if (this|-|>path[1])
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1285d:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x12861:	add rax, 1                          #	    if (this->path|[|1])
0x12865:	movzx eax, byte ptr [rax]           
0x12868:	test al, al                         #	    if |(|this->path[1])
0x1286a:	je 0x1287e                          
0x1286c:	mov rax, qword ptr [rbp - 0x1d8]    #		backdir_index |=| this->entries;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12873:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12876:	mov dword ptr [rbp - 0x1c0], eax    
MEMORY OFFSET:     -0x1c0     -448  >>-440

0x1287c:	jmp 0x1289a                         
0x1287e:	mov rax, qword ptr [rbp - 0x1d8]    #		this|-|>entries--;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12885:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12888:	lea edx, [rax - 1]                  #		this->entries|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x1288b:	mov rax, qword ptr [rbp - 0x1d8]    
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12892:	mov dword ptr [rax + 0x68], edx     
MEMORY OFFSET:     0x68     104  >>112

0x12895:	jmp 0x12b39                         #		|c|ontinue;
0x1289a:	mov rax, qword ptr [rbp - 0x1d8]    #						  (this|-|>entries + 1) *
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x128a1:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x128a4:	add eax, 1                          #						  (this->entries |+| 1) *
0x128a7:	movsxd rdx, eax                     
0x128aa:	mov rax, rdx                        #	this->dir_entry = (dir_entry_t *)|x|realloc(this->dir_entry,
0x128ad:	shl rax, 2                          
0x128b1:	add rax, rdx                        
0x128b4:	shl rax, 4                          
0x128b8:	mov rdx, rax                        
0x128bb:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry = (dir_entry_t *)xrealloc(this|-|>dir_entry,
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x128c2:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x128c6:	mov rsi, rdx                        #	this->dir_entry = (dir_entry_t *)|x|realloc(this->dir_entry,
0x128c9:	mov rdi, rax                        
0x128cc:	call 0x24670                        
0x128d1:	mov rdx, qword ptr [rbp - 0x1d8]    #	this->dir_entry |=| (dir_entry_t *)xrealloc(this->dir_entry,
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x128d8:	mov qword ptr [rdx + 0x38], rax     
MEMORY OFFSET:     0x38     56  >>64

0x128dc:	cmp dword ptr [rbp - 0x1e4], 0      #	if |(|verify)
MEMORY OFFSET:     -0x1e4     -484  >>-476

0x128e3:	je 0x12a04                          
0x128e9:	mov dword ptr [rbp - 0x1c8], 0      #	    for (entry |=| 0; entry < old_entries; entry++)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x128f3:	jmp 0x129b5                         #	    |f|or (entry = 0; entry < old_entries; entry++)
0x128f8:	mov eax, dword ptr [rbp - 0x1c8]    #		if (strcmp(d->d_name, old_dir_entry|[|entry].name) == 0)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x128fe:	movsxd rdx, eax                     
0x12901:	mov rax, rdx                        
0x12904:	shl rax, 2                          
0x12908:	add rax, rdx                        
0x1290b:	shl rax, 4                          
0x1290f:	mov rdx, rax                        
0x12912:	mov rax, qword ptr [rbp - 0x1b0]    
MEMORY OFFSET:     -0x1b0     -432  >>-424

0x12919:	add rax, rdx                        
0x1291c:	mov rax, qword ptr [rax]            #		if (strcmp(d->d_name, old_dir_entry[entry]|.|name) == 0)
0x1291f:	mov rdx, qword ptr [rbp - 0x188]    #		if (strcmp(d|-|>d_name, old_dir_entry[entry].name) == 0)
MEMORY OFFSET:     -0x188     -392  >>-384

0x12926:	add rdx, 0x13                       
0x1292a:	mov rsi, rax                        #		if (|s|trcmp(d->d_name, old_dir_entry[entry].name) == 0)
0x1292d:	mov rdi, rdx                        
0x12930:	call 0x4af0                         
0x12935:	test eax, eax                       #		if |(|strcmp(d->d_name, old_dir_entry[entry].name) == 0)
0x12937:	jne 0x129ae                         
0x12939:	mov eax, dword ptr [rbp - 0x1c8]    #			 old_dir_entry|[|entry].selected);
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x1293f:	movsxd rdx, eax                     
0x12942:	mov rax, rdx                        
0x12945:	shl rax, 2                          
0x12949:	add rax, rdx                        
0x1294c:	shl rax, 4                          
0x12950:	mov rdx, rax                        
0x12953:	mov rax, qword ptr [rbp - 0x1b0]    
MEMORY OFFSET:     -0x1b0     -432  >>-424

0x1295a:	lea rcx, [rdx + rax]                
0x1295e:	mov rax, qword ptr [rbp - 0x1d8]    #			(this|-|>dir_entry[this->entries].selected =
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12965:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12969:	mov rax, qword ptr [rbp - 0x1d8]    #			(this->dir_entry[this|-|>entries].selected =
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12970:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12973:	movsxd rdx, eax                     
0x12976:	mov rax, rdx                        #			(this->dir_entry|[|this->entries].selected =
0x12979:	shl rax, 2                          
0x1297d:	add rax, rdx                        
0x12980:	shl rax, 4                          
0x12984:	add rax, rsi                        
0x12987:	movzx edx, byte ptr [rcx + 0x49]    #			 old_dir_entry[entry]|.|selected);
MEMORY OFFSET:     0x49     73  >>81

0x1298b:	mov byte ptr [rax + 0x49], dl       #			(this->dir_entry[this->entries].selected |=|
MEMORY OFFSET:     0x49     73  >>81

0x1298e:	movzx edx, byte ptr [rax + 0x49]    #			(this->dir_entry[this->entries]|.|selected =
MEMORY OFFSET:     0x49     73  >>81

0x12992:	mov rax, qword ptr [rbp - 0x1d8]    #		    this->selected_entries |+|=
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12999:	mov ecx, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1299c:	movsx eax, dl                       #			(this->dir_entry[this->entries].selected |=|
0x1299f:	lea edx, [rcx + rax]                #		    this->selected_entries |+|=
0x129a2:	mov rax, qword ptr [rbp - 0x1d8]    
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x129a9:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x129ac:	jmp 0x129c7                         #		    |b|reak;
0x129ae:	add dword ptr [rbp - 0x1c8], 1      #	    for (entry = 0; entry < old_entries; entry|+|+)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x129b5:	mov eax, dword ptr [rbp - 0x1c8]    #	    for (entry = 0; entry |<| old_entries; entry++)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x129bb:	cmp eax, dword ptr [rbp - 0x1c4]    
MEMORY OFFSET:     -0x1c4     -452  >>-444

0x129c1:	jl 0x128f8                          
0x129c7:	mov eax, dword ptr [rbp - 0x1c8]    #	    if |(|entry == old_entries)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x129cd:	cmp eax, dword ptr [rbp - 0x1c4]    
MEMORY OFFSET:     -0x1c4     -452  >>-444

0x129d3:	jne 0x12a31                         
0x129d5:	mov rax, qword ptr [rbp - 0x1d8]    #		this|-|>dir_entry[this->entries].selected = 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x129dc:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x129e0:	mov rax, qword ptr [rbp - 0x1d8]    #		this->dir_entry[this|-|>entries].selected = 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x129e7:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x129ea:	movsxd rdx, eax                     
0x129ed:	mov rax, rdx                        #		this->dir_entry|[|this->entries].selected = 0;
0x129f0:	shl rax, 2                          
0x129f4:	add rax, rdx                        
0x129f7:	shl rax, 4                          
0x129fb:	add rax, rcx                        
0x129fe:	mov byte ptr [rax + 0x49], 0        #		this->dir_entry[this->entries].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x12a02:	jmp 0x12a31                         
0x12a04:	mov rax, qword ptr [rbp - 0x1d8]    #	    this|-|>dir_entry[this->entries].selected = 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12a0b:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12a0f:	mov rax, qword ptr [rbp - 0x1d8]    #	    this->dir_entry[this|-|>entries].selected = 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12a16:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12a19:	movsxd rdx, eax                     
0x12a1c:	mov rax, rdx                        #	    this->dir_entry|[|this->entries].selected = 0;
0x12a1f:	shl rax, 2                          
0x12a23:	add rax, rdx                        
0x12a26:	shl rax, 4                          
0x12a2a:	add rax, rcx                        
0x12a2d:	mov byte ptr [rax + 0x49], 0        #	    this->dir_entry[this->entries].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x12a31:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].fti_loaded = 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12a38:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12a3c:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].fti_loaded = 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12a43:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12a46:	movsxd rdx, eax                     
0x12a49:	mov rax, rdx                        #	this->dir_entry|[|this->entries].fti_loaded = 0;
0x12a4c:	shl rax, 2                          
0x12a50:	add rax, rdx                        
0x12a53:	shl rax, 4                          
0x12a57:	add rax, rcx                        
0x12a5a:	mov byte ptr [rax + 0x4b], 0        #	this->dir_entry[this->entries].fti_loaded |=| 0;
MEMORY OFFSET:     0x4b     75  >>83

0x12a5e:	mov rax, qword ptr [rbp - 0x188]    #	namelen = strlen(d|-|>d_name);
MEMORY OFFSET:     -0x188     -392  >>-384

0x12a65:	add rax, 0x13                       
0x12a69:	mov rdi, rax                        #	namelen = |s|trlen(d->d_name);
0x12a6c:	call 0x4960                         
0x12a71:	mov dword ptr [rbp - 0x1bc], eax    #	namelen |=| strlen(d->d_name);
MEMORY OFFSET:     -0x1bc     -444  >>-436

0x12a77:	mov eax, dword ptr [rbp - 0x1bc]    #	this->dir_entry[this->entries].name = xmalloc(namelen |+| 1);
MEMORY OFFSET:     -0x1bc     -444  >>-436

0x12a7d:	add eax, 1                          
0x12a80:	movsxd rdx, eax                     #	this->dir_entry[this->entries].name = |x|malloc(namelen + 1);
0x12a83:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].name = xmalloc(namelen + 1);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12a8a:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12a8e:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].name = xmalloc(namelen + 1);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12a95:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12a98:	movsxd rcx, eax                     
0x12a9b:	mov rax, rcx                        #	this->dir_entry|[|this->entries].name = xmalloc(namelen + 1);
0x12a9e:	shl rax, 2                          
0x12aa2:	add rax, rcx                        
0x12aa5:	shl rax, 4                          
0x12aa9:	lea rbx, [rsi + rax]                
0x12aad:	mov rdi, rdx                        #	this->dir_entry[this->entries].name = |x|malloc(namelen + 1);
0x12ab0:	call 0x24650                        
0x12ab5:	mov qword ptr [rbx], rax            #	this->dir_entry[this->entries].name |=| xmalloc(namelen + 1);
0x12ab8:	mov rax, qword ptr [rbp - 0x188]    #	strcpy(this->dir_entry[this->entries].name, d|-|>d_name);
MEMORY OFFSET:     -0x188     -392  >>-384

0x12abf:	lea rdx, [rax + 0x13]               
MEMORY OFFSET:     0x13     19  >>27

0x12ac3:	mov rax, qword ptr [rbp - 0x1d8]    #	strcpy(this|-|>dir_entry[this->entries].name, d->d_name);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12aca:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12ace:	mov rax, qword ptr [rbp - 0x1d8]    #	strcpy(this->dir_entry[this|-|>entries].name, d->d_name);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12ad5:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12ad8:	movsxd rcx, eax                     
0x12adb:	mov rax, rcx                        #	strcpy(this->dir_entry|[|this->entries].name, d->d_name);
0x12ade:	shl rax, 2                          
0x12ae2:	add rax, rcx                        
0x12ae5:	shl rax, 4                          
0x12ae9:	add rax, rsi                        
0x12aec:	mov rax, qword ptr [rax]            #	|s|trcpy(this->dir_entry[this->entries].name, d->d_name);
0x12aef:	mov rsi, rdx                        
0x12af2:	mov rdi, rax                        
0x12af5:	call 0x4870                         
0x12afa:	mov rax, qword ptr [rbp - 0x1d8]    #	this->maxname = |m|ax(this->maxname, namelen);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12b01:	mov edx, dword ptr [rax + 0x30]     
MEMORY OFFSET:     0x30     48  >>56

0x12b04:	mov eax, dword ptr [rbp - 0x1bc]    
MEMORY OFFSET:     -0x1bc     -444  >>-436

0x12b0a:	cmp edx, eax                        
0x12b0c:	cmovl edx, eax                      
0x12b0f:	mov rax, qword ptr [rbp - 0x1d8]    #	this->maxname |=| max(this->maxname, namelen);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12b16:	mov dword ptr [rax + 0x30], edx     
MEMORY OFFSET:     0x30     48  >>56

0x12b19:	mov rax, qword ptr [rbp - 0x1d8]    #	|p|anel_load_inode(this, this->entries);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12b20:	mov edx, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12b23:	mov rax, qword ptr [rbp - 0x1d8]    
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12b2a:	mov esi, edx                        
0x12b2c:	mov rdi, rax                        
0x12b2f:	mov eax, 0                          
0x12b34:	call 0x1193b                        
0x12b39:	mov rax, qword ptr [rbp - 0x1d8]    #    for (this->entries = 0; (d = readdir(this->dir)); this|-|>entries++)
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12b40:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12b43:	lea edx, [rax + 1]                  #    for (this->entries = 0; (d = readdir(this->dir)); this->entries|+|+)
MEMORY OFFSET:     0x1     1  >>9

0x12b46:	mov rax, qword ptr [rbp - 0x1d8]    
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12b4d:	mov dword ptr [rax + 0x68], edx     
MEMORY OFFSET:     0x68     104  >>112

0x12b50:	mov rax, qword ptr [rbp - 0x1d8]    #    for (this->entries = 0; (d = |r|eaddir(this->dir)); this->entries++)
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12b57:	mov rax, qword ptr [rax]            
0x12b5a:	mov rdi, rax                        
0x12b5d:	call 0x4bd0                         
0x12b62:	mov qword ptr [rbp - 0x188], rax    
MEMORY OFFSET:     -0x188     -392  >>-384

0x12b69:	cmp qword ptr [rbp - 0x188], 0      #    for (this->entries = 0; |(|d = readdir(this->dir)); this->entries++)
MEMORY OFFSET:     -0x188     -392  >>-384

0x12b71:	jne 0x127f1                         
0x12b77:	cmp dword ptr [rbp - 0x1cc], 0      #    if |(|dotdot_found)
MEMORY OFFSET:     -0x1cc     -460  >>-452

0x12b7e:	je 0x12bf6                          
0x12b80:	cmp dword ptr [rbp - 0x1c0], -1     #	if |(|backdir_index != -1)
MEMORY OFFSET:     -0x1c0     -448  >>-440

0x12b87:	je 0x12dc5                          
0x12b8d:	mov rax, qword ptr [rbp - 0x1d8]    #	    if (!|S|_ISDIR(this->dir_entry[backdir_index].mode))
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12b94:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12b98:	mov eax, dword ptr [rbp - 0x1c0]    
MEMORY OFFSET:     -0x1c0     -448  >>-440

0x12b9e:	movsxd rdx, eax                     
0x12ba1:	mov rax, rdx                        
0x12ba4:	shl rax, 2                          
0x12ba8:	add rax, rdx                        
0x12bab:	shl rax, 4                          
0x12baf:	add rax, rcx                        
0x12bb2:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x12bb5:	and eax, 0xf000                     
0x12bba:	cmp eax, 0x4000                     #	    if |(|!S_ISDIR(this->dir_entry[backdir_index].mode))
0x12bbf:	je 0x12dc5                          
0x12bc5:	mov rax, qword ptr [rbp - 0x1d8]    #		this|-|>dir_entry[backdir_index].mode = S_IFDIR;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12bcc:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12bd0:	mov eax, dword ptr [rbp - 0x1c0]    #		this->dir_entry|[|backdir_index].mode = S_IFDIR;
MEMORY OFFSET:     -0x1c0     -448  >>-440

0x12bd6:	movsxd rdx, eax                     
0x12bd9:	mov rax, rdx                        
0x12bdc:	shl rax, 2                          
0x12be0:	add rax, rdx                        
0x12be3:	shl rax, 4                          
0x12be7:	add rax, rcx                        
0x12bea:	mov dword ptr [rax + 0x10], 0x4000  #		this->dir_entry[backdir_index].mode |=| S_IFDIR;
MEMORY OFFSET:     0x10     16  >>24

0x12bf1:	jmp 0x12dc5                         
0x12bf6:	mov rax, qword ptr [rbp - 0x1d8]    #						  (this|-|>entries + 1) *
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12bfd:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12c00:	add eax, 1                          #						  (this->entries |+| 1) *
0x12c03:	movsxd rdx, eax                     
0x12c06:	mov rax, rdx                        #	this->dir_entry = (dir_entry_t *)|x|realloc(this->dir_entry,
0x12c09:	shl rax, 2                          
0x12c0d:	add rax, rdx                        
0x12c10:	shl rax, 4                          
0x12c14:	mov rdx, rax                        
0x12c17:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry = (dir_entry_t *)xrealloc(this|-|>dir_entry,
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12c1e:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12c22:	mov rsi, rdx                        #	this->dir_entry = (dir_entry_t *)|x|realloc(this->dir_entry,
0x12c25:	mov rdi, rax                        
0x12c28:	call 0x24670                        
0x12c2d:	mov rdx, qword ptr [rbp - 0x1d8]    #	this->dir_entry |=| (dir_entry_t *)xrealloc(this->dir_entry,
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12c34:	mov qword ptr [rdx + 0x38], rax     
MEMORY OFFSET:     0x38     56  >>64

0x12c38:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].selected = 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12c3f:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12c43:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].selected = 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12c4a:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12c4d:	movsxd rdx, eax                     
0x12c50:	mov rax, rdx                        #	this->dir_entry|[|this->entries].selected = 0;
0x12c53:	shl rax, 2                          
0x12c57:	add rax, rdx                        
0x12c5a:	shl rax, 4                          
0x12c5e:	add rax, rcx                        
0x12c61:	mov byte ptr [rax + 0x49], 0        #	this->dir_entry[this->entries].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x12c65:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].fti_loaded = 1;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12c6c:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12c70:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].fti_loaded = 1;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12c77:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12c7a:	movsxd rdx, eax                     
0x12c7d:	mov rax, rdx                        #	this->dir_entry|[|this->entries].fti_loaded = 1;
0x12c80:	shl rax, 2                          
0x12c84:	add rax, rdx                        
0x12c87:	shl rax, 4                          
0x12c8b:	add rax, rcx                        
0x12c8e:	mov byte ptr [rax + 0x4b], 1        #	this->dir_entry[this->entries].fti_loaded |=| 1;
MEMORY OFFSET:     0x4b     75  >>83

0x12c92:	mov dword ptr [rbp - 0x1bc], 2      #	namelen |=| strlen("..");
MEMORY OFFSET:     -0x1bc     -444  >>-436

0x12c9c:	mov eax, dword ptr [rbp - 0x1bc]    #	this->dir_entry[this->entries].name = xmalloc(namelen |+| 1);
MEMORY OFFSET:     -0x1bc     -444  >>-436

0x12ca2:	add eax, 1                          
0x12ca5:	movsxd rdx, eax                     #	this->dir_entry[this->entries].name = |x|malloc(namelen + 1);
0x12ca8:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].name = xmalloc(namelen + 1);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12caf:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12cb3:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].name = xmalloc(namelen + 1);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12cba:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12cbd:	movsxd rcx, eax                     
0x12cc0:	mov rax, rcx                        #	this->dir_entry|[|this->entries].name = xmalloc(namelen + 1);
0x12cc3:	shl rax, 2                          
0x12cc7:	add rax, rcx                        
0x12cca:	shl rax, 4                          
0x12cce:	lea rbx, [rsi + rax]                
0x12cd2:	mov rdi, rdx                        #	this->dir_entry[this->entries].name = |x|malloc(namelen + 1);
0x12cd5:	call 0x24650                        
0x12cda:	mov qword ptr [rbx], rax            #	this->dir_entry[this->entries].name |=| xmalloc(namelen + 1);
0x12cdd:	mov rax, qword ptr [rbp - 0x1d8]    #	strcpy(this|-|>dir_entry[this->entries].name, "..");
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12ce4:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12ce8:	mov rax, qword ptr [rbp - 0x1d8]    #	strcpy(this->dir_entry[this|-|>entries].name, "..");
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12cef:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12cf2:	movsxd rdx, eax                     
0x12cf5:	mov rax, rdx                        #	strcpy(this->dir_entry|[|this->entries].name, "..");
0x12cf8:	shl rax, 2                          
0x12cfc:	add rax, rdx                        
0x12cff:	shl rax, 4                          
0x12d03:	add rax, rcx                        
0x12d06:	mov rax, qword ptr [rax]            #	|s|trcpy(this->dir_entry[this->entries].name, "..");
0x12d09:	mov word ptr [rax], 0x2e2e          
0x12d0e:	mov byte ptr [rax + 2], 0           
MEMORY OFFSET:     0x2     2  >>10

0x12d12:	mov rax, qword ptr [rbp - 0x1d8]    #	this->maxname = |m|ax(this->maxname, namelen);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12d19:	mov edx, dword ptr [rax + 0x30]     
MEMORY OFFSET:     0x30     48  >>56

0x12d1c:	mov eax, dword ptr [rbp - 0x1bc]    
MEMORY OFFSET:     -0x1bc     -444  >>-436

0x12d22:	cmp edx, eax                        
0x12d24:	cmovl edx, eax                      
0x12d27:	mov rax, qword ptr [rbp - 0x1d8]    #	this->maxname |=| max(this->maxname, namelen);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12d2e:	mov dword ptr [rax + 0x30], edx     
MEMORY OFFSET:     0x30     48  >>56

0x12d31:	mov rax, qword ptr [rbp - 0x1d8]    #	|p|anel_load_inode(this, this->entries);
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12d38:	mov edx, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12d3b:	mov rax, qword ptr [rbp - 0x1d8]    
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12d42:	mov esi, edx                        
0x12d44:	mov rdi, rax                        
0x12d47:	mov eax, 0                          
0x12d4c:	call 0x1193b                        
0x12d51:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].mode = S_IFDIR;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12d58:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12d5c:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].mode = S_IFDIR;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12d63:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12d66:	movsxd rdx, eax                     
0x12d69:	mov rax, rdx                        #	this->dir_entry|[|this->entries].mode = S_IFDIR;
0x12d6c:	shl rax, 2                          
0x12d70:	add rax, rdx                        
0x12d73:	shl rax, 4                          
0x12d77:	add rax, rcx                        
0x12d7a:	mov dword ptr [rax + 0x10], 0x4000  #	this->dir_entry[this->entries].mode |=| S_IFDIR;
MEMORY OFFSET:     0x10     16  >>24

0x12d81:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].type = DIR_ENTRY;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12d88:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12d8c:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].type = DIR_ENTRY;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12d93:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12d96:	movsxd rdx, eax                     
0x12d99:	mov rax, rdx                        #	this->dir_entry|[|this->entries].type = DIR_ENTRY;
0x12d9c:	shl rax, 2                          
0x12da0:	add rax, rdx                        
0x12da3:	shl rax, 4                          
0x12da7:	add rax, rcx                        
0x12daa:	mov byte ptr [rax + 0x48], 0        #	this->dir_entry[this->entries].type |=| DIR_ENTRY;
MEMORY OFFSET:     0x48     72  >>80

0x12dae:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>entries++;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12db5:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x12db8:	lea edx, [rax + 1]                  #	this->entries|+|+;
MEMORY OFFSET:     0x1     1  >>9

0x12dbb:	mov rax, qword ptr [rbp - 0x1d8]    
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12dc2:	mov dword ptr [rax + 0x68], edx     
MEMORY OFFSET:     0x68     104  >>112

0x12dc5:	cmp dword ptr [rbp - 0x1e4], 0      #    if |(|verify)
MEMORY OFFSET:     -0x1e4     -484  >>-476

0x12dcc:	je 0x12e8f                          
0x12dd2:	mov dword ptr [rbp - 0x1c8], 0      #	for (entry |=| 0; entry < old_entries; entry++)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12ddc:	jmp 0x12e6e                         #	|f|or (entry = 0; entry < old_entries; entry++)
0x12de1:	mov eax, dword ptr [rbp - 0x1c8]    #	    if (old_dir_entry|[|entry].name)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12de7:	movsxd rdx, eax                     
0x12dea:	mov rax, rdx                        
0x12ded:	shl rax, 2                          
0x12df1:	add rax, rdx                        
0x12df4:	shl rax, 4                          
0x12df8:	mov rdx, rax                        
0x12dfb:	mov rax, qword ptr [rbp - 0x1b0]    
MEMORY OFFSET:     -0x1b0     -432  >>-424

0x12e02:	add rax, rdx                        
0x12e05:	mov rax, qword ptr [rax]            #	    if (old_dir_entry[entry]|.|name)
0x12e08:	test rax, rax                       #	    if |(|old_dir_entry[entry].name)
0x12e0b:	je 0x12e67                          
0x12e0d:	mov eax, dword ptr [rbp - 0x1c8]    #		xfree(old_dir_entry|[|entry].name);
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12e13:	movsxd rdx, eax                     
0x12e16:	mov rax, rdx                        
0x12e19:	shl rax, 2                          
0x12e1d:	add rax, rdx                        
0x12e20:	shl rax, 4                          
0x12e24:	mov rdx, rax                        
0x12e27:	mov rax, qword ptr [rbp - 0x1b0]    
MEMORY OFFSET:     -0x1b0     -432  >>-424

0x12e2e:	add rax, rdx                        
0x12e31:	mov rax, qword ptr [rax]            #		xfree(old_dir_entry[entry]|.|name);
0x12e34:	mov rdi, rax                        #		|x|free(old_dir_entry[entry].name);
0x12e37:	call 0x1eeae                        
0x12e3c:	mov eax, dword ptr [rbp - 0x1c8]    #		old_dir_entry|[|entry].name = NULL;
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12e42:	movsxd rdx, eax                     
0x12e45:	mov rax, rdx                        
0x12e48:	shl rax, 2                          
0x12e4c:	add rax, rdx                        
0x12e4f:	shl rax, 4                          
0x12e53:	mov rdx, rax                        
0x12e56:	mov rax, qword ptr [rbp - 0x1b0]    
MEMORY OFFSET:     -0x1b0     -432  >>-424

0x12e5d:	add rax, rdx                        
0x12e60:	mov qword ptr [rax], 0              #		old_dir_entry[entry].name |=| NULL;
0x12e67:	add dword ptr [rbp - 0x1c8], 1      #	for (entry = 0; entry < old_entries; entry|+|+)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12e6e:	mov eax, dword ptr [rbp - 0x1c8]    #	for (entry = 0; entry |<| old_entries; entry++)
MEMORY OFFSET:     -0x1c8     -456  >>-448

0x12e74:	cmp eax, dword ptr [rbp - 0x1c4]    
MEMORY OFFSET:     -0x1c4     -452  >>-444

0x12e7a:	jl 0x12de1                          
0x12e80:	mov rax, qword ptr [rbp - 0x1b0]    #	|x|free(old_dir_entry);
MEMORY OFFSET:     -0x1b0     -432  >>-424

0x12e87:	mov rdi, rax                        
0x12e8a:	call 0x1eeae                        
0x12e8f:	mov rax, qword ptr [rbp - 0x1d8]    #    CurrentSortMethod = this|-|>sort_method;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12e96:	mov eax, dword ptr [rax + 0x84]     
MEMORY OFFSET:     0x84     132  >>140

0x12e9c:	mov dword ptr [rip + 0x1e752], eax  #    CurrentSortMethod |=| this->sort_method;
MEMORY OFFSET:     0x1e752     124754  >>124762

0x12ea2:	mov rax, qword ptr [rbp - 0x1d8]    #    this->horizontal_offset |=| 0;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12ea9:	mov dword ptr [rax + 0x74], 0       
MEMORY OFFSET:     0x74     116  >>124

0x12eb0:	cmp dword ptr [rbp - 0x1c0], -1     #    if |(|backdir_index != -1)
MEMORY OFFSET:     -0x1c0     -448  >>-440

0x12eb7:	je 0x1307d                          
0x12ebd:	mov rax, qword ptr [rbp - 0x1d8]    #	tmp = this|-|>dir_entry[0];
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12ec4:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12ec8:	mov rcx, qword ptr [rax]            #	tmp |=| this->dir_entry[0];
0x12ecb:	mov rbx, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x12ecf:	mov qword ptr [rbp - 0x180], rcx    
MEMORY OFFSET:     -0x180     -384  >>-376

0x12ed6:	mov qword ptr [rbp - 0x178], rbx    
MEMORY OFFSET:     -0x178     -376  >>-368

0x12edd:	mov rcx, qword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x12ee1:	mov rbx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x12ee5:	mov qword ptr [rbp - 0x170], rcx    
MEMORY OFFSET:     -0x170     -368  >>-360

0x12eec:	mov qword ptr [rbp - 0x168], rbx    
MEMORY OFFSET:     -0x168     -360  >>-352

0x12ef3:	mov rcx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x12ef7:	mov rbx, qword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x12efb:	mov qword ptr [rbp - 0x160], rcx    
MEMORY OFFSET:     -0x160     -352  >>-344

0x12f02:	mov qword ptr [rbp - 0x158], rbx    
MEMORY OFFSET:     -0x158     -344  >>-336

0x12f09:	mov rcx, qword ptr [rax + 0x30]     
MEMORY OFFSET:     0x30     48  >>56

0x12f0d:	mov rbx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12f11:	mov qword ptr [rbp - 0x150], rcx    
MEMORY OFFSET:     -0x150     -336  >>-328

0x12f18:	mov qword ptr [rbp - 0x148], rbx    
MEMORY OFFSET:     -0x148     -328  >>-320

0x12f1f:	mov rdx, qword ptr [rax + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x12f23:	mov rax, qword ptr [rax + 0x40]     
MEMORY OFFSET:     0x40     64  >>72

0x12f27:	mov qword ptr [rbp - 0x140], rax    
MEMORY OFFSET:     -0x140     -320  >>-312

0x12f2e:	mov qword ptr [rbp - 0x138], rdx    
MEMORY OFFSET:     -0x138     -312  >>-304

0x12f35:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[0] = this|-|>dir_entry[backdir_index];
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12f3c:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12f40:	mov eax, dword ptr [rbp - 0x1c0]    #	this->dir_entry[0] = this->dir_entry|[|backdir_index];
MEMORY OFFSET:     -0x1c0     -448  >>-440

0x12f46:	movsxd rdx, eax                     
0x12f49:	mov rax, rdx                        
0x12f4c:	shl rax, 2                          
0x12f50:	add rax, rdx                        
0x12f53:	shl rax, 4                          
0x12f57:	lea rdx, [rcx + rax]                
0x12f5b:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[0] = this->dir_entry[backdir_index];
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12f62:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12f66:	mov rcx, qword ptr [rdx]            #	this->dir_entry[0] |=| this->dir_entry[backdir_index];
0x12f69:	mov rbx, qword ptr [rdx + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x12f6d:	mov qword ptr [rax], rcx            
0x12f70:	mov qword ptr [rax + 8], rbx        
MEMORY OFFSET:     0x8     8  >>16

0x12f74:	mov rcx, qword ptr [rdx + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x12f78:	mov rbx, qword ptr [rdx + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x12f7c:	mov qword ptr [rax + 0x10], rcx     
MEMORY OFFSET:     0x10     16  >>24

0x12f80:	mov qword ptr [rax + 0x18], rbx     
MEMORY OFFSET:     0x18     24  >>32

0x12f84:	mov rcx, qword ptr [rdx + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x12f88:	mov rbx, qword ptr [rdx + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x12f8c:	mov qword ptr [rax + 0x20], rcx     
MEMORY OFFSET:     0x20     32  >>40

0x12f90:	mov qword ptr [rax + 0x28], rbx     
MEMORY OFFSET:     0x28     40  >>48

0x12f94:	mov rcx, qword ptr [rdx + 0x30]     
MEMORY OFFSET:     0x30     48  >>56

0x12f98:	mov rbx, qword ptr [rdx + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12f9c:	mov qword ptr [rax + 0x30], rcx     
MEMORY OFFSET:     0x30     48  >>56

0x12fa0:	mov qword ptr [rax + 0x38], rbx     
MEMORY OFFSET:     0x38     56  >>64

0x12fa4:	mov rcx, qword ptr [rdx + 0x40]     
MEMORY OFFSET:     0x40     64  >>72

0x12fa8:	mov rbx, qword ptr [rdx + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x12fac:	mov qword ptr [rax + 0x40], rcx     
MEMORY OFFSET:     0x40     64  >>72

0x12fb0:	mov qword ptr [rax + 0x48], rbx     
MEMORY OFFSET:     0x48     72  >>80

0x12fb4:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[backdir_index] = tmp;
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x12fbb:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x12fbf:	mov eax, dword ptr [rbp - 0x1c0]    #	this->dir_entry|[|backdir_index] = tmp;
MEMORY OFFSET:     -0x1c0     -448  >>-440

0x12fc5:	movsxd rdx, eax                     
0x12fc8:	mov rax, rdx                        
0x12fcb:	shl rax, 2                          
0x12fcf:	add rax, rdx                        
0x12fd2:	shl rax, 4                          
0x12fd6:	add rax, rcx                        
0x12fd9:	mov rcx, qword ptr [rbp - 0x180]    #	this->dir_entry[backdir_index] |=| tmp;
MEMORY OFFSET:     -0x180     -384  >>-376

0x12fe0:	mov rbx, qword ptr [rbp - 0x178]    
MEMORY OFFSET:     -0x178     -376  >>-368

0x12fe7:	mov qword ptr [rax], rcx            
0x12fea:	mov qword ptr [rax + 8], rbx        
MEMORY OFFSET:     0x8     8  >>16

0x12fee:	mov rcx, qword ptr [rbp - 0x170]    
MEMORY OFFSET:     -0x170     -368  >>-360

0x12ff5:	mov rbx, qword ptr [rbp - 0x168]    
MEMORY OFFSET:     -0x168     -360  >>-352

0x12ffc:	mov qword ptr [rax + 0x10], rcx     
MEMORY OFFSET:     0x10     16  >>24

0x13000:	mov qword ptr [rax + 0x18], rbx     
MEMORY OFFSET:     0x18     24  >>32

0x13004:	mov rcx, qword ptr [rbp - 0x160]    
MEMORY OFFSET:     -0x160     -352  >>-344

0x1300b:	mov rbx, qword ptr [rbp - 0x158]    
MEMORY OFFSET:     -0x158     -344  >>-336

0x13012:	mov qword ptr [rax + 0x20], rcx     
MEMORY OFFSET:     0x20     32  >>40

0x13016:	mov qword ptr [rax + 0x28], rbx     
MEMORY OFFSET:     0x28     40  >>48

0x1301a:	mov rcx, qword ptr [rbp - 0x150]    
MEMORY OFFSET:     -0x150     -336  >>-328

0x13021:	mov rbx, qword ptr [rbp - 0x148]    
MEMORY OFFSET:     -0x148     -328  >>-320

0x13028:	mov qword ptr [rax + 0x30], rcx     
MEMORY OFFSET:     0x30     48  >>56

0x1302c:	mov qword ptr [rax + 0x38], rbx     
MEMORY OFFSET:     0x38     56  >>64

0x13030:	mov rcx, qword ptr [rbp - 0x140]    
MEMORY OFFSET:     -0x140     -320  >>-312

0x13037:	mov rbx, qword ptr [rbp - 0x138]    
MEMORY OFFSET:     -0x138     -312  >>-304

0x1303e:	mov qword ptr [rax + 0x40], rcx     
MEMORY OFFSET:     0x40     64  >>72

0x13042:	mov qword ptr [rax + 0x48], rbx     
MEMORY OFFSET:     0x48     72  >>80

0x13046:	mov rax, qword ptr [rbp - 0x1d8]    #	qsort(this->dir_entry + 1, this|-|>entries - 1,
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1304d:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x13050:	sub eax, 1                          #	qsort(this->dir_entry + 1, this->entries |-| 1,
0x13053:	cdqe                                #	|q|sort(this->dir_entry + 1, this->entries - 1,
0x13055:	mov rdx, qword ptr [rbp - 0x1d8]    #	qsort(this|-|>dir_entry + 1, this->entries - 1,
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x1305c:	mov rdx, qword ptr [rdx + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13060:	lea rdi, [rdx + 0x50]               #	qsort(this->dir_entry |+| 1, this->entries - 1,
MEMORY OFFSET:     0x50     80  >>88

0x13064:	lea rdx, [rip - 0x228d]             #	|q|sort(this->dir_entry + 1, this->entries - 1,
MEMORY OFFSET:     -0x228d     -8845  >>-8837

0x1306b:	mov rcx, rdx                        
0x1306e:	mov edx, 0x50                       
0x13073:	mov rsi, rax                        
0x13076:	call 0x48b0                         
0x1307b:	jmp 0x130ac                         
0x1307d:	mov rax, qword ptr [rbp - 0x1d8]    #	qsort(this->dir_entry, this|-|>entries,
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x13084:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x13087:	movsxd rsi, eax                     #	|q|sort(this->dir_entry, this->entries,
0x1308a:	mov rax, qword ptr [rbp - 0x1d8]    #	qsort(this|-|>dir_entry, this->entries,
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x13091:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13095:	lea rdx, [rip - 0x22be]             #	|q|sort(this->dir_entry, this->entries,
MEMORY OFFSET:     -0x22be     -8894  >>-8886

0x1309c:	mov rcx, rdx                        
0x1309f:	mov edx, 0x50                       
0x130a4:	mov rdi, rax                        
0x130a7:	call 0x48b0                         
0x130ac:	mov rax, qword ptr [rbp - 0x1d8]    #    panel_set_current_entry(this, |m|in(this->current_entry, this->entries - 1));
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x130b3:	mov edx, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x130b6:	mov rax, qword ptr [rbp - 0x1d8]    
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x130bd:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x130c0:	cmp edx, eax                        #    |p|anel_set_current_entry(this, min(this->current_entry, this->entries - 1));
0x130c2:	jle 0x130d0                         
0x130c4:	mov rax, qword ptr [rbp - 0x1d8]    #    |p|anel_set_current_entry(this, min(this->current_entry, this->entries - 1));
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x130cb:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x130ce:	jmp 0x130dd                         
0x130d0:	mov rax, qword ptr [rbp - 0x1d8]    #    panel_set_current_entry(this, |m|in(this->current_entry, this->entries - 1));
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x130d7:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x130da:	sub eax, 1                          #    |p|anel_set_current_entry(this, min(this->current_entry, this->entries - 1));
0x130dd:	mov rdx, qword ptr [rbp - 0x1d8]    #    |p|anel_set_current_entry(this, min(this->current_entry, this->entries - 1));
MEMORY OFFSET:     -0x1d8     -472  >>-464

0x130e4:	mov esi, eax                        
0x130e6:	mov rdi, rdx                        
0x130e9:	mov eax, 0                          
0x130ee:	call 0x112b7                        
0x130f3:	mov rax, qword ptr [rbp - 0x1a0]    #    |x|free(old_path);
MEMORY OFFSET:     -0x1a0     -416  >>-408

0x130fa:	mov rdi, rax                        
0x130fd:	call 0x1eeae                        
0x13102:	mov eax, 1                          #    return |1|;
0x13107:	mov rdx, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x1310b:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x13114:	je 0x1311b                          
0x13116:	call 0x4980                         #|}|
0x1311b:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1311f:	leave                               
0x13120:	ret                                 
0x13121:	endbr64                             #|{|
0x13125:	push rbp                            
0x13126:	mov rbp, rsp                        
0x13129:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1312d:	mov rax, qword ptr [rbp - 8]        #    this->last_index |=| -1;
MEMORY OFFSET:     -0x8     -8  >>0

0x13131:	mov dword ptr [rax + 0x50], 0xffffffff
MEMORY OFFSET:     0x50     80  >>88

0x13138:	mov rax, qword ptr [rbp - 8]        #    this->multiple_files = this|-|>selected_entries;
MEMORY OFFSET:     -0x8     -8  >>0

0x1313c:	mov edx, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1313f:	mov rax, qword ptr [rbp - 8]        #    this->multiple_files |=| this->selected_entries;
MEMORY OFFSET:     -0x8     -8  >>0

0x13143:	mov dword ptr [rax + 0x54], edx     
MEMORY OFFSET:     0x54     84  >>92

0x13146:	nop                                 #|}|
0x13147:	pop rbp                             
0x13148:	ret                                 
0x13149:	endbr64                             #|{|
0x1314d:	push rbp                            
0x1314e:	mov rbp, rsp                        
0x13151:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x13155:	mov rax, qword ptr [rbp - 0x18]     #    if (this|-|>multiple_files)
MEMORY OFFSET:     -0x18     -24  >>-16

0x13159:	mov eax, dword ptr [rax + 0x54]     
MEMORY OFFSET:     0x54     84  >>92

0x1315c:	test eax, eax                       #    if |(|this->multiple_files)
0x1315e:	je 0x131c0                          
0x13160:	mov rax, qword ptr [rbp - 0x18]     #	for (i = this|-|>last_index + 1; i < this->entries; i++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x13164:	mov eax, dword ptr [rax + 0x50]     
MEMORY OFFSET:     0x50     80  >>88

0x13167:	add eax, 1                          #	for (i |=| this->last_index + 1; i < this->entries; i++)
0x1316a:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x1316d:	jmp 0x131ad                         #	|f|or (i = this->last_index + 1; i < this->entries; i++)
0x1316f:	mov rax, qword ptr [rbp - 0x18]     #	    if (this|-|>dir_entry[i].selected)
MEMORY OFFSET:     -0x18     -24  >>-16

0x13173:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13177:	mov eax, dword ptr [rbp - 4]        #	    if (this->dir_entry|[|i].selected)
MEMORY OFFSET:     -0x4     -4  >>4

0x1317a:	movsxd rdx, eax                     
0x1317d:	mov rax, rdx                        
0x13180:	shl rax, 2                          
0x13184:	add rax, rdx                        
0x13187:	shl rax, 4                          
0x1318b:	add rax, rcx                        
0x1318e:	movzx eax, byte ptr [rax + 0x49]    #	    if (this->dir_entry[i]|.|selected)
MEMORY OFFSET:     0x49     73  >>81

0x13192:	test al, al                         #	    if |(|this->dir_entry[i].selected)
0x13194:	je 0x131a9                          
0x13196:	mov rax, qword ptr [rbp - 0x18]     #		return this->last_index |=| i;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1319a:	mov edx, dword ptr [rbp - 4]        
MEMORY OFFSET:     -0x4     -4  >>4

0x1319d:	mov dword ptr [rax + 0x50], edx     
MEMORY OFFSET:     0x50     80  >>88

0x131a0:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x131a4:	mov eax, dword ptr [rax + 0x50]     
MEMORY OFFSET:     0x50     80  >>88

0x131a7:	jmp 0x13221                         
0x131a9:	add dword ptr [rbp - 4], 1          #	for (i = this->last_index + 1; i < this->entries; i|+|+)
MEMORY OFFSET:     -0x4     -4  >>4

0x131ad:	mov rax, qword ptr [rbp - 0x18]     #	for (i = this->last_index + 1; i < this|-|>entries; i++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x131b1:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x131b4:	cmp dword ptr [rbp - 4], eax        #	for (i = this->last_index + 1; i |<| this->entries; i++)
MEMORY OFFSET:     -0x4     -4  >>4

0x131b7:	jl 0x1316f                          
0x131b9:	mov eax, 0xffffffff                 #	return |-|1;
0x131be:	jmp 0x13221                         
0x131c0:	mov rax, qword ptr [rbp - 0x18]     #	if (this|-|>last_index == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x131c4:	mov eax, dword ptr [rax + 0x50]     
MEMORY OFFSET:     0x50     80  >>88

0x131c7:	test eax, eax                       #	if |(|this->last_index == 0)
0x131c9:	jne 0x131d2                         
0x131cb:	mov eax, 0xffffffff                 #	    return |-|1;
0x131d0:	jmp 0x13221                         
0x131d2:	mov rax, qword ptr [rbp - 0x18]     #	this->last_index |=| 0;
MEMORY OFFSET:     -0x18     -24  >>-16

0x131d6:	mov dword ptr [rax + 0x50], 0       
MEMORY OFFSET:     0x50     80  >>88

0x131dd:	mov rax, qword ptr [rbp - 0x18]     #	if (|r|ootdir())
MEMORY OFFSET:     -0x18     -24  >>-16

0x131e1:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x131e5:	movzx eax, byte ptr [rax]           
0x131e8:	cmp al, 0x2f                        #	if |(|rootdir())
0x131ea:	jne 0x13208                         
0x131ec:	mov rax, qword ptr [rbp - 0x18]     #	if (|r|ootdir())
MEMORY OFFSET:     -0x18     -24  >>-16

0x131f0:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x131f4:	add rax, 1                          
0x131f8:	movzx eax, byte ptr [rax]           
0x131fb:	test al, al                         
0x131fd:	jne 0x13208                         
0x131ff:	mov rax, qword ptr [rbp - 0x18]     #	    return this|-|>current_entry;
MEMORY OFFSET:     -0x18     -24  >>-16

0x13203:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13206:	jmp 0x13221                         
0x13208:	mov rax, qword ptr [rbp - 0x18]     #	    return (this|-|>current_entry != 0) ? this->current_entry : -1;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1320c:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1320f:	test eax, eax                       #	    return (this->current_entry != 0) ? this->current_entry |:| -1;
0x13211:	je 0x1321c                          
0x13213:	mov rax, qword ptr [rbp - 0x18]     #	    return (this->current_entry != 0) ? this->current_entry |:| -1;
MEMORY OFFSET:     -0x18     -24  >>-16

0x13217:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1321a:	jmp 0x13221                         
0x1321c:	mov eax, 0xffffffff                 #	    return (this->current_entry != 0) ? this->current_entry |:| -1;
0x13221:	pop rbp                             #|}|
0x13222:	ret                                 
0x13223:	endbr64                             #|{|
0x13227:	push rbp                            
0x13228:	mov rbp, rsp                        
0x1322b:	sub rsp, 0x30                       
0x1322f:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x13233:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1323c:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x13240:	xor eax, eax                        
0x13242:	mov rax, qword ptr [rbp - 0x28]     #    if (!this|-|>visible)
MEMORY OFFSET:     -0x28     -40  >>-32

0x13246:	movzx eax, byte ptr [rax + 0x6d]    
MEMORY OFFSET:     0x6d     109  >>117

0x1324a:	test al, al                         #    if |(|!this->visible)
0x1324c:	je 0x1336b                          
0x13252:	lea rax, [rbp - 0x11]               #    |t|ty_save(&status);
MEMORY OFFSET:     -0x11     -17  >>-9

0x13256:	mov rdi, rax                        
0x13259:	call 0xc04b                         
0x1325e:	mov rax, qword ptr [rbp - 0x28]     #    for (i |=| this->first_on_screen;
MEMORY OFFSET:     -0x28     -40  >>-32

0x13262:	mov eax, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x13265:	mov dword ptr [rbp - 0x10], eax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x13268:	jmp 0x1327f                         #    |f|or (i = this->first_on_screen;
0x1326a:	mov edx, dword ptr [rbp - 0x10]     #	|p|anel_update_entry(this, i);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1326d:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x13271:	mov esi, edx                        
0x13273:	mov rdi, rax                        
0x13276:	call 0x14445                        
0x1327b:	add dword ptr [rbp - 0x10], 1       #	 i|+|+)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1327f:	mov rax, qword ptr [rbp - 0x28]     #	 (i < this|-|>entries) && (i - this->first_on_screen < this->lines - 2);
MEMORY OFFSET:     -0x28     -40  >>-32

0x13283:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x13286:	cmp dword ptr [rbp - 0x10], eax     #	 (i < this->entries) |&|& (i - this->first_on_screen < this->lines - 2);
MEMORY OFFSET:     -0x10     -16  >>-8

0x13289:	jge 0x132a7                         
0x1328b:	mov rax, qword ptr [rbp - 0x28]     #	 (i < this->entries) && (i - this|-|>first_on_screen < this->lines - 2);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1328f:	mov ecx, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x13292:	mov eax, dword ptr [rbp - 0x10]     #	 (i < this->entries) && (i |-| this->first_on_screen < this->lines - 2);
MEMORY OFFSET:     -0x10     -16  >>-8

0x13295:	sub eax, ecx                        
0x13297:	mov edx, eax                        
0x13299:	mov rax, qword ptr [rbp - 0x28]     #	 (i < this->entries) && (i - this->first_on_screen < this|-|>lines - 2);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1329d:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x132a0:	sub eax, 2                          #	 (i < this->entries) && (i - this->first_on_screen < this->lines |-| 2);
0x132a3:	cmp edx, eax                        #	 (i < this->entries) |&|& (i - this->first_on_screen < this->lines - 2);
0x132a5:	jl 0x1326a                          
0x132a7:	mov eax, dword ptr [rip + 0x1d1d7]  #    |t|ty_colors(OFF, WHITE, PanelBackground);
MEMORY OFFSET:     0x1d1d7     119255  >>119263

0x132ad:	mov edx, eax                        
0x132af:	mov esi, 7                          
0x132b4:	mov edi, 0                          
0x132b9:	call 0xbf89                         
0x132be:	mov rax, qword ptr [rbp - 0x28]     #    memset(this->temp, ' ', this|-|>columns);
MEMORY OFFSET:     -0x28     -40  >>-32

0x132c2:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x132c5:	movsxd rdx, eax                     #    |m|emset(this->temp, ' ', this->columns);
0x132c8:	mov rax, qword ptr [rbp - 0x28]     #    memset(this|-|>temp, ' ', this->columns);
MEMORY OFFSET:     -0x28     -40  >>-32

0x132cc:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x132d0:	mov esi, 0x20                       #    |m|emset(this->temp, ' ', this->columns);
0x132d5:	mov rdi, rax                        
0x132d8:	call 0x4a10                         
0x132dd:	mov rax, qword ptr [rbp - 0x28]     #    limit = |m|in(this->lines - 2, this->on_screen);
MEMORY OFFSET:     -0x28     -40  >>-32

0x132e1:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x132e4:	lea edx, [rax - 2]                  
MEMORY OFFSET:     -0x2     -2  >>6

0x132e7:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x132eb:	mov eax, dword ptr [rax + 0x14]     
MEMORY OFFSET:     0x14     20  >>28

0x132ee:	cmp edx, eax                        #    limit |=| min(this->lines - 2, this->on_screen);
0x132f0:	cmovle eax, edx                     
0x132f3:	mov dword ptr [rbp - 0xc], eax      
MEMORY OFFSET:     -0xc     -12  >>-4

0x132f6:	jmp 0x13347                         #    |f|or (; i < limit; i++)
0x132f8:	mov rax, qword ptr [rbp - 0x28]     #	window_goto(this->window, i - this|-|>first_on_screen + 1, 1);
MEMORY OFFSET:     -0x28     -40  >>-32

0x132fc:	mov edx, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x132ff:	mov eax, dword ptr [rbp - 0x10]     #	window_goto(this->window, i |-| this->first_on_screen + 1, 1);
MEMORY OFFSET:     -0x10     -16  >>-8

0x13302:	sub eax, edx                        
0x13304:	lea ecx, [rax + 1]                  #	|w|indow_goto(this->window, i - this->first_on_screen + 1, 1);
MEMORY OFFSET:     0x1     1  >>9

0x13307:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1330b:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1330f:	mov edx, 1                          
0x13314:	mov esi, ecx                        
0x13316:	mov rdi, rax                        
0x13319:	call 0xdc1e                         
0x1331e:	mov rax, qword ptr [rbp - 0x28]     #	window_puts(this->window, this->temp, this|-|>columns - 2);
MEMORY OFFSET:     -0x28     -40  >>-32

0x13322:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x13325:	lea edx, [rax - 2]                  #	|w|indow_puts(this->window, this->temp, this->columns - 2);
MEMORY OFFSET:     -0x2     -2  >>6

0x13328:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1332c:	mov rcx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x13330:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x13334:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x13338:	mov rsi, rcx                        
0x1333b:	mov rdi, rax                        
0x1333e:	call 0xdb1a                         
0x13343:	add dword ptr [rbp - 0x10], 1       #    for (; i < limit; i|+|+)
MEMORY OFFSET:     -0x10     -16  >>-8

0x13347:	mov eax, dword ptr [rbp - 0x10]     #    for (; i |<| limit; i++)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1334a:	cmp eax, dword ptr [rbp - 0xc]      
MEMORY OFFSET:     -0xc     -12  >>-4

0x1334d:	jl 0x132f8                          
0x1334f:	mov rax, qword ptr [rbp - 0x28]     #    this->on_screen = this|-|>entries;
MEMORY OFFSET:     -0x28     -40  >>-32

0x13353:	mov edx, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x13356:	mov rax, qword ptr [rbp - 0x28]     #    this->on_screen |=| this->entries;
MEMORY OFFSET:     -0x28     -40  >>-32

0x1335a:	mov dword ptr [rax + 0x14], edx     
MEMORY OFFSET:     0x14     20  >>28

0x1335d:	lea rax, [rbp - 0x11]               #    |t|ty_restore(&status);
MEMORY OFFSET:     -0x11     -17  >>-9

0x13361:	mov rdi, rax                        
0x13364:	call 0xc067                         
0x13369:	jmp 0x1336c                         
0x1336b:	nop                                 #	|r|eturn;
0x1336c:	mov rax, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x13370:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x13379:	je 0x13380                          
0x1337b:	call 0x4980                         
0x13380:	leave                               
0x13381:	ret                                 
0x13382:	endbr64                             #|{|
0x13386:	push rbp                            
0x13387:	mov rbp, rsp                        
0x1338a:	sub rsp, 0x30                       
0x1338e:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x13392:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1339b:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1339f:	xor eax, eax                        
0x133a1:	mov rax, qword ptr [rbp - 0x28]     #    if (this|-|>columns < (1 + 1 + 1 + 1 + 14 + 1 + 1))
MEMORY OFFSET:     -0x28     -40  >>-32

0x133a5:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x133a8:	cmp eax, 0x13                       #    if |(|this->columns < (1 + 1 + 1 + 1 + 14 + 1 + 1))
0x133ab:	jle 0x1349b                         
0x133b1:	mov rax, qword ptr [rbp - 0x28]     #    if (!this|-|>visible)
MEMORY OFFSET:     -0x28     -40  >>-32

0x133b5:	movzx eax, byte ptr [rax + 0x6d]    
MEMORY OFFSET:     0x6d     109  >>117

0x133b9:	test al, al                         #    if |(|!this->visible)
0x133bb:	je 0x1349e                          
0x133c1:	lea rax, [rbp - 0x11]               #    |t|ty_save(&status);
MEMORY OFFSET:     -0x11     -17  >>-9

0x133c5:	mov rdi, rax                        
0x133c8:	call 0xc04b                         
0x133cd:	mov rax, qword ptr [rbp - 0x28]     #    len = this|-|>columns - (1 + 1 + 1 + 14 + 1 + 1);
MEMORY OFFSET:     -0x28     -40  >>-32

0x133d1:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x133d4:	sub eax, 0x13                       #    len = this->columns |-| (1 + 1 + 1 + 14 + 1 + 1);
0x133d7:	cdqe                                #    len |=| this->columns - (1 + 1 + 1 + 14 + 1 + 1);
0x133d9:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x133dd:	mov rax, qword ptr [rbp - 0x28]     #    memset(this->temp, ' ', this|-|>columns);
MEMORY OFFSET:     -0x28     -40  >>-32

0x133e1:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x133e4:	movsxd rdx, eax                     #    |m|emset(this->temp, ' ', this->columns);
0x133e7:	mov rax, qword ptr [rbp - 0x28]     #    memset(this|-|>temp, ' ', this->columns);
MEMORY OFFSET:     -0x28     -40  >>-32

0x133eb:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x133ef:	mov esi, 0x20                       #    |m|emset(this->temp, ' ', this->columns);
0x133f4:	mov rdi, rax                        
0x133f7:	call 0x4a10                         
0x133fc:	mov rax, qword ptr [rbp - 0x10]     #    |t|runcate_long_name(this->path, this->temp, len);
MEMORY OFFSET:     -0x10     -16  >>-8

0x13400:	mov edx, eax                        
0x13402:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x13406:	mov rcx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1340a:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1340e:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x13412:	mov rsi, rcx                        
0x13415:	mov rdi, rax                        
0x13418:	call 0x1e2d8                        
0x1341d:	mov rax, qword ptr [rbp - 0x28]     #    |t|oprintable(this->temp, len);
MEMORY OFFSET:     -0x28     -40  >>-32

0x13421:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x13425:	mov rdx, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x13429:	mov rsi, rdx                        
0x1342c:	mov rdi, rax                        
0x1342f:	call 0x1e5b1                        
0x13434:	mov edx, dword ptr [rip + 0x1d046]  #    |t|ty_colors(PanelPathBrightness, PanelPath, PanelFrame);
MEMORY OFFSET:     0x1d046     118854  >>118862

0x1343a:	mov ecx, dword ptr [rip + 0x1d070]  
MEMORY OFFSET:     0x1d070     118896  >>118904

0x13440:	mov eax, dword ptr [rip + 0x1d06e]  
MEMORY OFFSET:     0x1d06e     118894  >>118902

0x13446:	mov esi, ecx                        
0x13448:	mov edi, eax                        
0x1344a:	call 0xbf89                         
0x1344f:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_goto(this->window, 0, 2);
MEMORY OFFSET:     -0x28     -40  >>-32

0x13453:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x13457:	mov edx, 2                          
0x1345c:	mov esi, 0                          
0x13461:	mov rdi, rax                        
0x13464:	call 0xdc1e                         
0x13469:	mov rax, qword ptr [rbp - 0x10]     #    window_puts(this->window, this->temp, len |+| 1);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1346d:	add eax, 1                          
0x13470:	mov edx, eax                        #    |w|indow_puts(this->window, this->temp, len + 1);
0x13472:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x13476:	mov rcx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1347a:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1347e:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x13482:	mov rsi, rcx                        
0x13485:	mov rdi, rax                        
0x13488:	call 0xdb1a                         
0x1348d:	lea rax, [rbp - 0x11]               #    |t|ty_restore(&status);
MEMORY OFFSET:     -0x11     -17  >>-9

0x13491:	mov rdi, rax                        
0x13494:	call 0xc067                         
0x13499:	jmp 0x1349f                         
0x1349b:	nop                                 #	|r|eturn;
0x1349c:	jmp 0x1349f                         
0x1349e:	nop                                 #	|r|eturn;
0x1349f:	mov rax, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x134a3:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x134ac:	je 0x134b3                          
0x134ae:	call 0x4980                         
0x134b3:	leave                               
0x134b4:	ret                                 
0x134b5:	endbr64                             #|{|
0x134b9:	push rbp                            
0x134ba:	mov rbp, rsp                        
0x134bd:	sub rsp, 0x30                       
0x134c1:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x134c5:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x134c9:	mov dword ptr [rbp - 0x24], edx     
MEMORY OFFSET:     -0x24     -36  >>-28

0x134cc:	mov eax, dword ptr [rbp - 0x24]     #    int |f|lags = ( inflags | human_ceiling | human_group_digits | human_suppress_point_zero );
MEMORY OFFSET:     -0x24     -36  >>-28

0x134cf:	or eax, 0xc                         
0x134d2:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x134d5:	cmp qword ptr [rbp - 0x20], 0x270f  #    if |(|number > 9999)
MEMORY OFFSET:     -0x20     -32  >>-24

0x134dd:	jle 0x134e6                         
0x134df:	or dword ptr [rbp - 4], 0x90        #	flags |||= (human_autoscale | human_SI);
MEMORY OFFSET:     -0x4     -4  >>4

0x134e6:	mov rax, qword ptr [rbp - 0x20]     #    return |h|uman_readable(number, buf, flags, 1, 1);
MEMORY OFFSET:     -0x20     -32  >>-24

0x134ea:	mov edx, dword ptr [rbp - 4]        
MEMORY OFFSET:     -0x4     -4  >>4

0x134ed:	mov rsi, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x134f1:	mov r8d, 1                          
0x134f7:	mov ecx, 1                          
0x134fc:	mov rdi, rax                        
0x134ff:	call 0x23500                        
0x13504:	leave                               #|}|
0x13505:	ret                                 
0x13506:	endbr64                             #|{|
0x1350a:	push rbp                            
0x1350b:	mov rbp, rsp                        
0x1350e:	push rbx                            
0x1350f:	sub rsp, 0x318                      
0x13516:	mov qword ptr [rbp - 0x318], rdi    
MEMORY OFFSET:     -0x318     -792  >>-784

0x1351d:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x13526:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1352a:	xor eax, eax                        
0x1352c:	mov rax, qword ptr [rbp - 0x318]    #    int viewable = this|-|>columns - (1 + 1 + 1 + 1);
MEMORY OFFSET:     -0x318     -792  >>-784

0x13533:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x13536:	sub eax, 4                          #    int |v|iewable = this->columns - (1 + 1 + 1 + 1);
0x13539:	mov dword ptr [rbp - 0x30c], eax    
MEMORY OFFSET:     -0x30c     -780  >>-772

0x1353f:	mov rax, qword ptr [rbp - 0x318]    #    if (!this|-|>visible)
MEMORY OFFSET:     -0x318     -792  >>-784

0x13546:	movzx eax, byte ptr [rax + 0x6d]    
MEMORY OFFSET:     0x6d     109  >>117

0x1354a:	test al, al                         #    if |(|!this->visible)
0x1354c:	je 0x1374b                          
0x13552:	lea rax, [rbp - 0x30d]              #    |t|ty_save(&status);
MEMORY OFFSET:     -0x30d     -781  >>-773

0x13559:	mov rdi, rax                        
0x1355c:	call 0xc04b                         
0x13561:	mov qword ptr [rbp - 0x2e8], -1     #    fsu.fsu_blocks |=| (uintmax_t) -1;
MEMORY OFFSET:     -0x2e8     -744  >>-736

0x1356c:	cmp dword ptr [rbp - 0x30c], 5      #    if |(|viewable < 6 ||
MEMORY OFFSET:     -0x30c     -780  >>-772

0x13573:	jle 0x135a5                         
0x13575:	mov rax, qword ptr [rbp - 0x318]    #	get_fs_usage(this|-|>path, NULL, &fsu) < 0 ||
MEMORY OFFSET:     -0x318     -792  >>-784

0x1357c:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x13580:	lea rdx, [rbp - 0x2f0]              #	|g|et_fs_usage(this->path, NULL, &fsu) < 0 ||
MEMORY OFFSET:     -0x2f0     -752  >>-744

0x13587:	mov esi, 0                          
0x1358c:	mov rdi, rax                        
0x1358f:	call 0x23470                        
0x13594:	test eax, eax                       #    if (viewable < 6 ||||
0x13596:	js 0x135a5                          
0x13598:	mov rax, qword ptr [rbp - 0x2e8]    #	fsu|.|fsu_blocks == (uintmax_t) -1)
MEMORY OFFSET:     -0x2e8     -744  >>-736

0x1359f:	cmp rax, -1                         #	get_fs_usage(this->path, NULL, &fsu) < 0 ||||
0x135a3:	jne 0x135e8                         
0x135a5:	lea rax, [rbp - 0x2b0]              #	|m|emset(buf, ' ', sizeof(buf));
MEMORY OFFSET:     -0x2b0     -688  >>-680

0x135ac:	mov edx, 0x28b                      
0x135b1:	mov esi, 0x20                       
0x135b6:	mov rdi, rax                        
0x135b9:	call 0x4a10                         
0x135be:	lea rax, [rbp - 0x2b0]              #	sz|=|buf;
MEMORY OFFSET:     -0x2b0     -688  >>-680

0x135c5:	mov qword ptr [rbp - 0x308], rax    
MEMORY OFFSET:     -0x308     -776  >>-768

0x135cc:	mov edi, 0                          #	|t|ty_brightness(OFF);
0x135d1:	call 0xbf36                         
0x135d6:	mov eax, dword ptr [rip + 0x1cea4]  #	|t|ty_foreground(PanelFrame);
MEMORY OFFSET:     0x1cea4     118436  >>118444

0x135dc:	mov edi, eax                        
0x135de:	call 0xbee3                         
0x135e3:	jmp 0x1367a                         
0x135e8:	call 0x4a20                         #            (|g|eteuid() == 0) ? fsu.fsu_bfree : fsu.fsu_bavail;
0x135ed:	test eax, eax                       #            (geteuid() == 0) ? fsu.fsu_bfree |:| fsu.fsu_bavail;
0x135ef:	jne 0x135fa                         
0x135f1:	mov rax, qword ptr [rbp - 0x2e0]    #            (geteuid() == 0) ? fsu|.|fsu_bfree : fsu.fsu_bavail;
MEMORY OFFSET:     -0x2e0     -736  >>-728

0x135f8:	jmp 0x13601                         
0x135fa:	mov rax, qword ptr [rbp - 0x2d8]    #            (geteuid() == 0) ? fsu.fsu_bfree : fsu|.|fsu_bavail;
MEMORY OFFSET:     -0x2d8     -728  >>-720

0x13601:	mov qword ptr [rbp - 0x300], rax    #	off64_t |f|ree_blocks =
MEMORY OFFSET:     -0x300     -768  >>-760

0x13608:	cmp qword ptr [rbp - 0x300], 0      #	if |(|free_blocks < 0)
MEMORY OFFSET:     -0x300     -768  >>-760

0x13610:	jns 0x1361d                         
0x13612:	mov qword ptr [rbp - 0x300], 0      #	    free_blocks |=| 0;
MEMORY OFFSET:     -0x300     -768  >>-760

0x1361d:	mov rdx, qword ptr [rbp - 0x2f0]    #	n = free_blocks * fsu|.|fsu_blocksize;
MEMORY OFFSET:     -0x2f0     -752  >>-744

0x13624:	mov rax, qword ptr [rbp - 0x300]    #	n = free_blocks |*| fsu.fsu_blocksize;
MEMORY OFFSET:     -0x300     -768  >>-760

0x1362b:	imul rax, rdx                       
0x1362f:	mov qword ptr [rbp - 0x2f8], rax    #	n |=| free_blocks * fsu.fsu_blocksize;
MEMORY OFFSET:     -0x2f8     -760  >>-752

0x13636:	mov rcx, qword ptr [rbp - 0x2f8]    #	sz=|p|anel_beautify_number(buf, n, 0);
MEMORY OFFSET:     -0x2f8     -760  >>-752

0x1363d:	lea rax, [rbp - 0x2b0]              
MEMORY OFFSET:     -0x2b0     -688  >>-680

0x13644:	mov edx, 0                          
0x13649:	mov rsi, rcx                        
0x1364c:	mov rdi, rax                        
0x1364f:	mov eax, 0                          
0x13654:	call 0x134b5                        
0x13659:	mov qword ptr [rbp - 0x308], rax    
MEMORY OFFSET:     -0x308     -776  >>-768

0x13660:	mov eax, dword ptr [rip + 0x1ce56]  #	|t|ty_brightness(PanelDeviceFreeSpaceBrightness);
MEMORY OFFSET:     0x1ce56     118358  >>118366

0x13666:	mov edi, eax                        
0x13668:	call 0xbf36                         
0x1366d:	mov eax, dword ptr [rip + 0x1ce45]  #	|t|ty_foreground(PanelDeviceFreeSpace);
MEMORY OFFSET:     0x1ce45     118341  >>118349

0x13673:	mov edi, eax                        
0x13675:	call 0xbee3                         
0x1367a:	mov eax, dword ptr [rip + 0x1ce00]  #    |t|ty_background(PanelFrame);
MEMORY OFFSET:     0x1ce00     118272  >>118280

0x13680:	mov edi, eax                        
0x13682:	call 0xbf0b                         
0x13687:	mov rax, qword ptr [rbp - 0x318]    #    window_goto(this->window, 0, this|-|>columns - 2 - min(strlen(sz), viewable));
MEMORY OFFSET:     -0x318     -792  >>-784

0x1368e:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x13691:	mov ebx, eax                        #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
0x13693:	mov rax, qword ptr [rbp - 0x308]    #    window_goto(this->window, 0, this->columns - 2 - |m|in(strlen(sz), viewable));
MEMORY OFFSET:     -0x308     -776  >>-768

0x1369a:	mov rdi, rax                        
0x1369d:	call 0x4960                         
0x136a2:	mov edx, dword ptr [rbp - 0x30c]    
MEMORY OFFSET:     -0x30c     -780  >>-772

0x136a8:	movsxd rdx, edx                     
0x136ab:	cmp rax, rdx                        #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
0x136ae:	ja 0x136c3                          
0x136b0:	mov rax, qword ptr [rbp - 0x308]    #    window_goto(this->window, 0, this->columns - 2 - |m|in(strlen(sz), viewable));
MEMORY OFFSET:     -0x308     -776  >>-768

0x136b7:	mov rdi, rax                        
0x136ba:	call 0x4960                         
0x136bf:	mov edx, eax                        #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
0x136c1:	jmp 0x136c9                         
0x136c3:	mov edx, dword ptr [rbp - 0x30c]    #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
MEMORY OFFSET:     -0x30c     -780  >>-772

0x136c9:	mov eax, ebx                        #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
0x136cb:	sub eax, edx                        
0x136cd:	sub eax, 2                          
0x136d0:	mov edx, eax                        #    |w|indow_goto(this->window, 0, this->columns - 2 - min(strlen(sz), viewable));
0x136d2:	mov rax, qword ptr [rbp - 0x318]    
MEMORY OFFSET:     -0x318     -792  >>-784

0x136d9:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x136dd:	mov esi, 0                          
0x136e2:	mov rdi, rax                        
0x136e5:	call 0xdc1e                         
0x136ea:	mov rax, qword ptr [rbp - 0x308]    #    window_puts(this->window, sz, |m|in(strlen(sz), viewable));
MEMORY OFFSET:     -0x308     -776  >>-768

0x136f1:	mov rdi, rax                        
0x136f4:	call 0x4960                         
0x136f9:	mov edx, dword ptr [rbp - 0x30c]    
MEMORY OFFSET:     -0x30c     -780  >>-772

0x136ff:	movsxd rdx, edx                     
0x13702:	cmp rax, rdx                        #    |w|indow_puts(this->window, sz, min(strlen(sz), viewable));
0x13705:	ja 0x13718                          
0x13707:	mov rax, qword ptr [rbp - 0x308]    #    window_puts(this->window, sz, |m|in(strlen(sz), viewable));
MEMORY OFFSET:     -0x308     -776  >>-768

0x1370e:	mov rdi, rax                        
0x13711:	call 0x4960                         
0x13716:	jmp 0x1371e                         
0x13718:	mov eax, dword ptr [rbp - 0x30c]    #    |w|indow_puts(this->window, sz, min(strlen(sz), viewable));
MEMORY OFFSET:     -0x30c     -780  >>-772

0x1371e:	mov rdx, qword ptr [rbp - 0x318]    #    |w|indow_puts(this->window, sz, min(strlen(sz), viewable));
MEMORY OFFSET:     -0x318     -792  >>-784

0x13725:	mov rcx, qword ptr [rdx + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x13729:	mov rsi, qword ptr [rbp - 0x308]    
MEMORY OFFSET:     -0x308     -776  >>-768

0x13730:	mov edx, eax                        
0x13732:	mov rdi, rcx                        
0x13735:	call 0xdb1a                         
0x1373a:	lea rax, [rbp - 0x30d]              #    |t|ty_restore(&status);
MEMORY OFFSET:     -0x30d     -781  >>-773

0x13741:	mov rdi, rax                        
0x13744:	call 0xc067                         
0x13749:	jmp 0x1374c                         
0x1374b:	nop                                 #	|r|eturn;
0x1374c:	mov rax, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x13750:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x13759:	je 0x13760                          
0x1375b:	call 0x4980                         
0x13760:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x13764:	leave                               
0x13765:	ret                                 
0x13766:	endbr64                             #|{|
0x1376a:	push rbp                            
0x1376b:	mov rbp, rsp                        
0x1376e:	sub rsp, 0x30                       
0x13772:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x13776:	mov dword ptr [rbp - 0x1c], esi     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x13779:	mov qword ptr [rbp - 0x28], rdx     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1377d:	mov rax, qword ptr [rbp - 0x28]     #    |s|trcpy(string, rights);
MEMORY OFFSET:     -0x28     -40  >>-32

0x13781:	lea rdx, [rip + 0x1cba8]            
MEMORY OFFSET:     0x1cba8     117672  >>117680

0x13788:	mov rsi, rdx                        
0x1378b:	mov rdi, rax                        
0x1378e:	call 0x4870                         
0x13793:	mov rax, qword ptr [rbp - 0x18]     #    mode = this|-|>dir_entry[entry].mode;
MEMORY OFFSET:     -0x18     -24  >>-16

0x13797:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1379b:	mov eax, dword ptr [rbp - 0x1c]     #    mode = this->dir_entry|[|entry].mode;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1379e:	movsxd rdx, eax                     
0x137a1:	mov rax, rdx                        
0x137a4:	shl rax, 2                          
0x137a8:	add rax, rdx                        
0x137ab:	shl rax, 4                          
0x137af:	add rax, rcx                        
0x137b2:	mov eax, dword ptr [rax + 0x10]     #    mode |=| this->dir_entry[entry].mode;
MEMORY OFFSET:     0x10     16  >>24

0x137b5:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x137b8:	mov eax, dword ptr [rbp - 4]        #    if (|S|_ISREG(mode))
MEMORY OFFSET:     -0x4     -4  >>4

0x137bb:	and eax, 0xf000                     
0x137c0:	cmp eax, 0x8000                     #    if |(|S_ISREG(mode))
0x137c5:	jne 0x137d3                         
0x137c7:	mov rax, qword ptr [rbp - 0x28]     #	string[0] |=| '-';
MEMORY OFFSET:     -0x28     -40  >>-32

0x137cb:	mov byte ptr [rax], 0x2d            
0x137ce:	jmp 0x1386a                         
0x137d3:	mov eax, dword ptr [rbp - 4]        #	if (|S|_ISDIR(mode))
MEMORY OFFSET:     -0x4     -4  >>4

0x137d6:	and eax, 0xf000                     
0x137db:	cmp eax, 0x4000                     #	if |(|S_ISDIR(mode))
0x137e0:	jne 0x137eb                         
0x137e2:	mov rax, qword ptr [rbp - 0x28]     #	    string[0] |=| 'd';
MEMORY OFFSET:     -0x28     -40  >>-32

0x137e6:	mov byte ptr [rax], 0x64            
0x137e9:	jmp 0x1386a                         
0x137eb:	mov eax, dword ptr [rbp - 4]        #	    if (|S|_ISCHR(mode))
MEMORY OFFSET:     -0x4     -4  >>4

0x137ee:	and eax, 0xf000                     
0x137f3:	cmp eax, 0x2000                     #	    if |(|S_ISCHR(mode))
0x137f8:	jne 0x13803                         
0x137fa:	mov rax, qword ptr [rbp - 0x28]     #		string[0] |=| 'c';
MEMORY OFFSET:     -0x28     -40  >>-32

0x137fe:	mov byte ptr [rax], 0x63            
0x13801:	jmp 0x1386a                         
0x13803:	mov eax, dword ptr [rbp - 4]        #		if (|S|_ISBLK(mode))
MEMORY OFFSET:     -0x4     -4  >>4

0x13806:	and eax, 0xf000                     
0x1380b:	cmp eax, 0x6000                     #		if |(|S_ISBLK(mode))
0x13810:	jne 0x1381b                         
0x13812:	mov rax, qword ptr [rbp - 0x28]     #		    string[0] |=| 'b';
MEMORY OFFSET:     -0x28     -40  >>-32

0x13816:	mov byte ptr [rax], 0x62            
0x13819:	jmp 0x1386a                         
0x1381b:	mov eax, dword ptr [rbp - 4]        #		    if (|S|_ISFIFO(mode))
MEMORY OFFSET:     -0x4     -4  >>4

0x1381e:	and eax, 0xf000                     
0x13823:	cmp eax, 0x1000                     #		    if |(|S_ISFIFO(mode))
0x13828:	jne 0x13833                         
0x1382a:	mov rax, qword ptr [rbp - 0x28]     #			string[0] |=| 'p';
MEMORY OFFSET:     -0x28     -40  >>-32

0x1382e:	mov byte ptr [rax], 0x70            
0x13831:	jmp 0x1386a                         
0x13833:	mov eax, dword ptr [rbp - 4]        #			if (|S|_ISSOCK(mode))
MEMORY OFFSET:     -0x4     -4  >>4

0x13836:	and eax, 0xf000                     
0x1383b:	cmp eax, 0xc000                     #			if |(|S_ISSOCK(mode))
0x13840:	jne 0x1384b                         
0x13842:	mov rax, qword ptr [rbp - 0x28]     #			    string[0] |=| 's';
MEMORY OFFSET:     -0x28     -40  >>-32

0x13846:	mov byte ptr [rax], 0x73            
0x13849:	jmp 0x1386a                         
0x1384b:	mov eax, dword ptr [rbp - 4]        #			    if (|S|_ISLNK(mode))
MEMORY OFFSET:     -0x4     -4  >>4

0x1384e:	and eax, 0xf000                     
0x13853:	cmp eax, 0xa000                     #			    if |(|S_ISLNK(mode))
0x13858:	jne 0x13863                         
0x1385a:	mov rax, qword ptr [rbp - 0x28]     #				string[0] |=| 'l';
MEMORY OFFSET:     -0x28     -40  >>-32

0x1385e:	mov byte ptr [rax], 0x6c            
0x13861:	jmp 0x1386a                         
0x13863:	mov rax, qword ptr [rbp - 0x28]     #				string[0] |=| '?';
MEMORY OFFSET:     -0x28     -40  >>-32

0x13867:	mov byte ptr [rax], 0x3f            
0x1386a:	mov dword ptr [rbp - 8], 0          #    for (i |=| 0; i < 9; mode >>= 1, i++)
MEMORY OFFSET:     -0x8     -8  >>0

0x13871:	jmp 0x13899                         #    |f|or (i = 0; i < 9; mode >>= 1, i++)
0x13873:	mov eax, dword ptr [rbp - 4]        #	if ((mode |&| 1) == 0)
MEMORY OFFSET:     -0x4     -4  >>4

0x13876:	and eax, 1                          
0x13879:	test eax, eax                       #	if |(|(mode & 1) == 0)
0x1387b:	jne 0x13892                         
0x1387d:	mov eax, 9                          #	    string[9 |-| i] = '-';
0x13882:	sub eax, dword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x13885:	movsxd rdx, eax                     
0x13888:	mov rax, qword ptr [rbp - 0x28]     #	    string|[|9 - i] = '-';
MEMORY OFFSET:     -0x28     -40  >>-32

0x1388c:	add rax, rdx                        
0x1388f:	mov byte ptr [rax], 0x2d            #	    string[9 - i] |=| '-';
0x13892:	shr dword ptr [rbp - 4], 1          #    for (i = 0; i < 9; mode |>|>= 1, i++)
MEMORY OFFSET:     -0x4     -4  >>4

0x13895:	add dword ptr [rbp - 8], 1          #    for (i = 0; i < 9; mode >>= 1, i|+|+)
MEMORY OFFSET:     -0x8     -8  >>0

0x13899:	cmp dword ptr [rbp - 8], 8          #    for (i = 0; i |<| 9; mode >>= 1, i++)
MEMORY OFFSET:     -0x8     -8  >>0

0x1389d:	jle 0x13873                         
0x1389f:	mov rax, qword ptr [rbp - 0x18]     #    mode = this|-|>dir_entry[entry].mode;
MEMORY OFFSET:     -0x18     -24  >>-16

0x138a3:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x138a7:	mov eax, dword ptr [rbp - 0x1c]     #    mode = this->dir_entry|[|entry].mode;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x138aa:	movsxd rdx, eax                     
0x138ad:	mov rax, rdx                        
0x138b0:	shl rax, 2                          
0x138b4:	add rax, rdx                        
0x138b7:	shl rax, 4                          
0x138bb:	add rax, rcx                        
0x138be:	mov eax, dword ptr [rax + 0x10]     #    mode |=| this->dir_entry[entry].mode;
MEMORY OFFSET:     0x10     16  >>24

0x138c1:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x138c4:	mov eax, dword ptr [rbp - 4]        #    if (mode |&| S_ISUID)
MEMORY OFFSET:     -0x4     -4  >>4

0x138c7:	and eax, 0x800                      
0x138cc:	test eax, eax                       #    if |(|mode & S_ISUID)
0x138ce:	je 0x138f5                          
0x138d0:	mov rax, qword ptr [rbp - 0x28]     #	string[3] = (string|[|3] == 'x') ? 's' : 'S';
MEMORY OFFSET:     -0x28     -40  >>-32

0x138d4:	add rax, 3                          
0x138d8:	movzx eax, byte ptr [rax]           
0x138db:	cmp al, 0x78                        #	string[3] |=| (string[3] == 'x') ? 's' : 'S';
0x138dd:	jne 0x138e6                         
0x138df:	mov edx, 0x73                       #	string[3] |=| (string[3] == 'x') ? 's' : 'S';
0x138e4:	jmp 0x138eb                         
0x138e6:	mov edx, 0x53                       #	string[3] |=| (string[3] == 'x') ? 's' : 'S';
0x138eb:	mov rax, qword ptr [rbp - 0x28]     #	string|[|3] = (string[3] == 'x') ? 's' : 'S';
MEMORY OFFSET:     -0x28     -40  >>-32

0x138ef:	add rax, 3                          
0x138f3:	mov byte ptr [rax], dl              #	string[3] |=| (string[3] == 'x') ? 's' : 'S';
0x138f5:	mov eax, dword ptr [rbp - 4]        #    if (mode |&| S_ISGID)
MEMORY OFFSET:     -0x4     -4  >>4

0x138f8:	and eax, 0x400                      
0x138fd:	test eax, eax                       #    if |(|mode & S_ISGID)
0x138ff:	je 0x13926                          
0x13901:	mov rax, qword ptr [rbp - 0x28]     #	string[6] = (string|[|6] == 'x') ? 's' : 'S';
MEMORY OFFSET:     -0x28     -40  >>-32

0x13905:	add rax, 6                          
0x13909:	movzx eax, byte ptr [rax]           
0x1390c:	cmp al, 0x78                        #	string[6] |=| (string[6] == 'x') ? 's' : 'S';
0x1390e:	jne 0x13917                         
0x13910:	mov edx, 0x73                       #	string[6] |=| (string[6] == 'x') ? 's' : 'S';
0x13915:	jmp 0x1391c                         
0x13917:	mov edx, 0x53                       #	string[6] |=| (string[6] == 'x') ? 's' : 'S';
0x1391c:	mov rax, qword ptr [rbp - 0x28]     #	string|[|6] = (string[6] == 'x') ? 's' : 'S';
MEMORY OFFSET:     -0x28     -40  >>-32

0x13920:	add rax, 6                          
0x13924:	mov byte ptr [rax], dl              #	string[6] |=| (string[6] == 'x') ? 's' : 'S';
0x13926:	mov eax, dword ptr [rbp - 4]        #    if (mode |&| S_ISVTX)
MEMORY OFFSET:     -0x4     -4  >>4

0x13929:	and eax, 0x200                      
0x1392e:	test eax, eax                       #    if |(|mode & S_ISVTX)
0x13930:	je 0x13957                          
0x13932:	mov rax, qword ptr [rbp - 0x28]     #	string[9] = (string|[|9] == 'x') ? 't' : 'T';
MEMORY OFFSET:     -0x28     -40  >>-32

0x13936:	add rax, 9                          
0x1393a:	movzx eax, byte ptr [rax]           
0x1393d:	cmp al, 0x78                        #	string[9] |=| (string[9] == 'x') ? 't' : 'T';
0x1393f:	jne 0x13948                         
0x13941:	mov edx, 0x74                       #	string[9] |=| (string[9] == 'x') ? 't' : 'T';
0x13946:	jmp 0x1394d                         
0x13948:	mov edx, 0x54                       #	string[9] |=| (string[9] == 'x') ? 't' : 'T';
0x1394d:	mov rax, qword ptr [rbp - 0x28]     #	string|[|9] = (string[9] == 'x') ? 't' : 'T';
MEMORY OFFSET:     -0x28     -40  >>-32

0x13951:	add rax, 9                          
0x13955:	mov byte ptr [rax], dl              #	string[9] |=| (string[9] == 'x') ? 't' : 'T';
0x13957:	nop                                 #|}|
0x13958:	leave                               
0x13959:	ret                                 
0x1395a:	endbr64                             #|{|
0x1395e:	push rbp                            
0x1395f:	mov rbp, rsp                        
0x13962:	sub rsp, 0x6e0                      
0x13969:	mov qword ptr [rbp - 0x6d8], rdi    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13970:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x13979:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1397d:	xor eax, eax                        
0x1397f:	mov qword ptr [rbp - 0x6c0], 0      #    off64_t |t|otal_size = 0;
MEMORY OFFSET:     -0x6c0     -1728  >>-1720

0x1398a:	mov rax, qword ptr [rbp - 0x6d8]    #    if (!this|-|>visible)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13991:	movzx eax, byte ptr [rax + 0x6d]    
MEMORY OFFSET:     0x6d     109  >>117

0x13995:	test al, al                         #    if |(|!this->visible)
0x13997:	je 0x14092                          
0x1399d:	lea rax, [rbp - 0x6c9]              #    |t|ty_save(&status);
MEMORY OFFSET:     -0x6c9     -1737  >>-1729

0x139a4:	mov rdi, rax                        
0x139a7:	call 0xc04b                         
0x139ac:	mov rax, qword ptr [rbp - 0x6d8]    #    if (this|-|>lines >= 3)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x139b3:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x139b6:	cmp eax, 2                          #    if |(|this->lines >= 3)
0x139b9:	jle 0x13adb                         
0x139bf:	mov edx, dword ptr [rip + 0x1cabb]  #	|t|ty_colors(OFF, PanelFrame, PanelFrame);
MEMORY OFFSET:     0x1cabb     117435  >>117443

0x139c5:	mov eax, dword ptr [rip + 0x1cab5]  
MEMORY OFFSET:     0x1cab5     117429  >>117437

0x139cb:	mov esi, eax                        
0x139cd:	mov edi, 0                          
0x139d2:	call 0xbf89                         
0x139d7:	mov rax, qword ptr [rbp - 0x6d8]    #	window_goto(this->window, this->thumb + 1, this|-|>columns - 1);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x139de:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x139e1:	lea edx, [rax - 1]                  #	|w|indow_goto(this->window, this->thumb + 1, this->columns - 1);
MEMORY OFFSET:     -0x1     -1  >>7

0x139e4:	mov rax, qword ptr [rbp - 0x6d8]    #	window_goto(this->window, this|-|>thumb + 1, this->columns - 1);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x139eb:	mov eax, dword ptr [rax + 0x8c]     
MEMORY OFFSET:     0x8c     140  >>148

0x139f1:	lea ecx, [rax + 1]                  #	|w|indow_goto(this->window, this->thumb + 1, this->columns - 1);
MEMORY OFFSET:     0x1     1  >>9

0x139f4:	mov rax, qword ptr [rbp - 0x6d8]    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x139fb:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x139ff:	mov esi, ecx                        
0x13a01:	mov rdi, rax                        
0x13a04:	call 0xdc1e                         
0x13a09:	mov rax, qword ptr [rbp - 0x6d8]    #	|w|indow_putc(this->window, ' ');
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13a10:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x13a14:	mov esi, 0x20                       
0x13a19:	mov rdi, rax                        
0x13a1c:	call 0xdbbc                         
0x13a21:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this->entries > this|-|>lines-2)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13a28:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x13a2b:	lea edx, [rax - 1]                  #	if (this->entries |>| this->lines-2)
MEMORY OFFSET:     -0x1     -1  >>7

0x13a2e:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this|-|>entries > this->lines-2)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13a35:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x13a38:	cmp edx, eax                        #	if |(|this->entries > this->lines-2)
0x13a3a:	jg 0x13adb                          
0x13a40:	mov rax, qword ptr [rbp - 0x6d8]    #	    this->thumb = ((this|-|>current_entry * (this->lines-2)) /
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13a47:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13a4a:	mov rax, qword ptr [rbp - 0x6d8]    #	    this->thumb = ((this->current_entry * (this|-|>lines-2)) /
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13a51:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x13a54:	sub eax, 2                          #	    this->thumb = ((this->current_entry * (this->lines|-|2)) /
0x13a57:	imul eax, edx                       #	    this->thumb = ((this->current_entry |*| (this->lines-2)) /
0x13a5a:	mov rdx, qword ptr [rbp - 0x6d8]    #			   this|-|>entries);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13a61:	mov esi, dword ptr [rdx + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x13a64:	cdq                                 #	    this->thumb = ((this->current_entry * (this->lines-2)) |/|
0x13a65:	idiv esi                            
0x13a67:	mov edx, eax                        
0x13a69:	mov rax, qword ptr [rbp - 0x6d8]    #	    this->thumb |=| ((this->current_entry * (this->lines-2)) /
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13a70:	mov dword ptr [rax + 0x8c], edx     
MEMORY OFFSET:     0x8c     140  >>148

0x13a76:	mov edx, dword ptr [rip + 0x1ca10]  #	    |t|ty_colors(PanelThumbBrightness,
MEMORY OFFSET:     0x1ca10     117264  >>117272

0x13a7c:	mov ecx, dword ptr [rip + 0x1ca06]  
MEMORY OFFSET:     0x1ca06     117254  >>117262

0x13a82:	mov eax, dword ptr [rip + 0x1ca08]  
MEMORY OFFSET:     0x1ca08     117256  >>117264

0x13a88:	mov esi, ecx                        
0x13a8a:	mov edi, eax                        
0x13a8c:	call 0xbf89                         
0x13a91:	mov rax, qword ptr [rbp - 0x6d8]    #	    window_goto(this->window, this->thumb+1, this|-|>columns-1);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13a98:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x13a9b:	lea edx, [rax - 1]                  #	    |w|indow_goto(this->window, this->thumb+1, this->columns-1);
MEMORY OFFSET:     -0x1     -1  >>7

0x13a9e:	mov rax, qword ptr [rbp - 0x6d8]    #	    window_goto(this->window, this|-|>thumb+1, this->columns-1);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13aa5:	mov eax, dword ptr [rax + 0x8c]     
MEMORY OFFSET:     0x8c     140  >>148

0x13aab:	lea ecx, [rax + 1]                  #	    |w|indow_goto(this->window, this->thumb+1, this->columns-1);
MEMORY OFFSET:     0x1     1  >>9

0x13aae:	mov rax, qword ptr [rbp - 0x6d8]    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13ab5:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x13ab9:	mov esi, ecx                        
0x13abb:	mov rdi, rax                        
0x13abe:	call 0xdc1e                         
0x13ac3:	mov rax, qword ptr [rbp - 0x6d8]    #	    |w|indow_putc(this->window, '#');
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13aca:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x13ace:	mov esi, 0x23                       
0x13ad3:	mov rdi, rax                        
0x13ad6:	call 0xdbbc                         
0x13adb:	mov rax, qword ptr [rbp - 0x6d8]    #    if (this|-|>columns < 40)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13ae2:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x13ae5:	cmp eax, 0x27                       #    if |(|this->columns < 40)
0x13ae8:	jg 0x13b56                          
0x13aea:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this|-|>columns < (1 + 1 + 10 + 1 + 1))
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13af1:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x13af4:	cmp eax, 0xd                        #	if |(|this->columns < (1 + 1 + 10 + 1 + 1))
0x13af7:	jg 0x13b05                          
0x13af9:	mov byte ptr [rbp - 0x410], 0       #	    *str |=| '\0';
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13b00:	jmp 0x13f57                         #	|g|oto skip_info_display;
0x13b05:	mov rax, qword ptr [rbp - 0x6d8]    #	    |p|anel_mode2string(this, this->current_entry, temp_rights);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13b0c:	mov ecx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13b0f:	lea rdx, [rbp - 0x6a0]              
MEMORY OFFSET:     -0x6a0     -1696  >>-1688

0x13b16:	mov rax, qword ptr [rbp - 0x6d8]    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13b1d:	mov esi, ecx                        
0x13b1f:	mov rdi, rax                        
0x13b22:	mov eax, 0                          
0x13b27:	call 0x13766                        
0x13b2c:	lea rdx, [rbp - 0x6a0]              #	    |s|printf(str, "%10s", temp_rights);
MEMORY OFFSET:     -0x6a0     -1696  >>-1688

0x13b33:	lea rax, [rbp - 0x410]              
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13b3a:	lea rcx, [rip + 0x14ab9]            
MEMORY OFFSET:     0x14ab9     84665  >>84673

0x13b41:	mov rsi, rcx                        
0x13b44:	mov rdi, rax                        
0x13b47:	mov eax, 0                          
0x13b4c:	call 0x4dd0                         
0x13b51:	jmp 0x13f57                         #	|g|oto skip_info_display;
0x13b56:	mov rax, qword ptr [rbp - 0x6d8]    #    if (this|-|>selected_entries)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13b5d:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x13b60:	test eax, eax                       #    if |(|this->selected_entries)
0x13b62:	je 0x13cf3                          
0x13b68:	mov dword ptr [rbp - 0x6c8], 0      #	for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x6c8     -1736  >>-1728

0x13b72:	jmp 0x13c08                         #	|f|or (entry = 0; entry < this->entries; entry++)
0x13b77:	mov rax, qword ptr [rbp - 0x6d8]    #	    if (this|-|>dir_entry[entry].selected &&
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13b7e:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13b82:	mov eax, dword ptr [rbp - 0x6c8]    #	    if (this->dir_entry|[|entry].selected &&
MEMORY OFFSET:     -0x6c8     -1736  >>-1728

0x13b88:	movsxd rdx, eax                     
0x13b8b:	mov rax, rdx                        
0x13b8e:	shl rax, 2                          
0x13b92:	add rax, rdx                        
0x13b95:	shl rax, 4                          
0x13b99:	add rax, rcx                        
0x13b9c:	movzx eax, byte ptr [rax + 0x49]    #	    if (this->dir_entry[entry]|.|selected &&
MEMORY OFFSET:     0x49     73  >>81

0x13ba0:	test al, al                         #	    if |(|this->dir_entry[entry].selected &&
0x13ba2:	je 0x13c01                          
0x13ba4:	mov rax, qword ptr [rbp - 0x6d8]    #		this|-|>dir_entry[entry].type == FILE_ENTRY)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13bab:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13baf:	mov eax, dword ptr [rbp - 0x6c8]    #		this->dir_entry|[|entry].type == FILE_ENTRY)
MEMORY OFFSET:     -0x6c8     -1736  >>-1728

0x13bb5:	movsxd rdx, eax                     
0x13bb8:	mov rax, rdx                        
0x13bbb:	shl rax, 2                          
0x13bbf:	add rax, rdx                        
0x13bc2:	shl rax, 4                          
0x13bc6:	add rax, rcx                        
0x13bc9:	movzx eax, byte ptr [rax + 0x48]    #		this->dir_entry[entry]|.|type == FILE_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x13bcd:	cmp al, 1                           #	    if (this->dir_entry[entry].selected |&|&
0x13bcf:	jne 0x13c01                         
0x13bd1:	mov rax, qword ptr [rbp - 0x6d8]    #		total_size += this|-|>dir_entry[entry].size;
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13bd8:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13bdc:	mov eax, dword ptr [rbp - 0x6c8]    #		total_size += this->dir_entry|[|entry].size;
MEMORY OFFSET:     -0x6c8     -1736  >>-1728

0x13be2:	movsxd rdx, eax                     
0x13be5:	mov rax, rdx                        
0x13be8:	shl rax, 2                          
0x13bec:	add rax, rdx                        
0x13bef:	shl rax, 4                          
0x13bf3:	add rax, rcx                        
0x13bf6:	mov rax, qword ptr [rax + 8]        #		total_size += this->dir_entry[entry]|.|size;
MEMORY OFFSET:     0x8     8  >>16

0x13bfa:	add qword ptr [rbp - 0x6c0], rax    #		total_size |+|= this->dir_entry[entry].size;
MEMORY OFFSET:     -0x6c0     -1728  >>-1720

0x13c01:	add dword ptr [rbp - 0x6c8], 1      #	for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x6c8     -1736  >>-1728

0x13c08:	mov rax, qword ptr [rbp - 0x6d8]    #	for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13c0f:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x13c12:	cmp dword ptr [rbp - 0x6c8], eax    #	for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x6c8     -1736  >>-1728

0x13c18:	jl 0x13b77                          
0x13c1e:	mov rcx, qword ptr [rbp - 0x6c0]    #	sz=|p|anel_beautify_number(buf, total_size, (human_SI|human_autoscale|human_B));
MEMORY OFFSET:     -0x6c0     -1728  >>-1720

0x13c25:	lea rax, [rbp - 0x6a0]              
MEMORY OFFSET:     -0x6a0     -1696  >>-1688

0x13c2c:	mov edx, 0x190                      
0x13c31:	mov rsi, rcx                        
0x13c34:	mov rdi, rax                        
0x13c37:	mov eax, 0                          
0x13c3c:	call 0x134b5                        
0x13c41:	mov qword ptr [rbp - 0x6a8], rax    
MEMORY OFFSET:     -0x6a8     -1704  >>-1696

0x13c48:	mov dword ptr [rbp - 0x6c4], 0      #	for (offset |=| 0; sz[offset] == ' '; offset++)
MEMORY OFFSET:     -0x6c4     -1732  >>-1724

0x13c52:	jmp 0x13c5b                         #	|f|or (offset = 0; sz[offset] == ' '; offset++)
0x13c54:	add dword ptr [rbp - 0x6c4], 1      #	for (offset = 0; sz[offset] == ' '; offset|+|+)
MEMORY OFFSET:     -0x6c4     -1732  >>-1724

0x13c5b:	mov eax, dword ptr [rbp - 0x6c4]    #	for (offset = 0; sz|[|offset] == ' '; offset++)
MEMORY OFFSET:     -0x6c4     -1732  >>-1724

0x13c61:	movsxd rdx, eax                     
0x13c64:	mov rax, qword ptr [rbp - 0x6a8]    
MEMORY OFFSET:     -0x6a8     -1704  >>-1696

0x13c6b:	add rax, rdx                        
0x13c6e:	movzx eax, byte ptr [rax]           
0x13c71:	cmp al, 0x20                        #	for (offset = 0; sz[offset] |=|= ' '; offset++)
0x13c73:	je 0x13c54                          
0x13c75:	mov rax, qword ptr [rbp - 0x6d8]    #		(this|-|>selected_entries > 1) ? "s" : "");
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13c7c:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x13c7f:	cmp eax, 1                          #	|s|printf(str, "%s in %d file%s",
0x13c82:	jle 0x13c8d                         
0x13c84:	lea rax, [rip + 0x14974]            #	|s|printf(str, "%s in %d file%s",
MEMORY OFFSET:     0x14974     84340  >>84348

0x13c8b:	jmp 0x13c94                         
0x13c8d:	lea rax, [rip + 0x1496d]            #	|s|printf(str, "%s in %d file%s",
MEMORY OFFSET:     0x1496d     84333  >>84341

0x13c94:	mov rdx, qword ptr [rbp - 0x6d8]    #	|s|printf(str, "%s in %d file%s",
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13c9b:	mov edx, dword ptr [rdx + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x13c9e:	mov ecx, dword ptr [rbp - 0x6c4]    
MEMORY OFFSET:     -0x6c4     -1732  >>-1724

0x13ca4:	movsxd rsi, ecx                     
0x13ca7:	mov rcx, qword ptr [rbp - 0x6a8]    
MEMORY OFFSET:     -0x6a8     -1704  >>-1696

0x13cae:	add rsi, rcx                        
0x13cb1:	lea rdi, [rbp - 0x410]              
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13cb8:	mov r8, rax                         
0x13cbb:	mov ecx, edx                        
0x13cbd:	mov rdx, rsi                        
0x13cc0:	lea rax, [rip + 0x1493b]            
MEMORY OFFSET:     0x1493b     84283  >>84291

0x13cc7:	mov rsi, rax                        
0x13cca:	mov eax, 0                          
0x13ccf:	call 0x4dd0                         
0x13cd4:	mov eax, dword ptr [rip + 0x1c7f2]  #	|t|ty_brightness(PanelFilesInfoBrightness);
MEMORY OFFSET:     0x1c7f2     116722  >>116730

0x13cda:	mov edi, eax                        
0x13cdc:	call 0xbf36                         
0x13ce1:	mov eax, dword ptr [rip + 0x1c7e1]  #	|t|ty_foreground(PanelFilesInfo);
MEMORY OFFSET:     0x1c7e1     116705  >>116713

0x13ce7:	mov edi, eax                        
0x13ce9:	call 0xbee3                         
0x13cee:	jmp 0x13f71                         
0x13cf3:	mov eax, dword ptr [rip + 0x1d903]  #	if (InfoDisplay |=|= OFF)
MEMORY OFFSET:     0x1d903     121091  >>121099

0x13cf9:	test eax, eax                       #	if |(|InfoDisplay == OFF)
0x13cfb:	jne 0x13d09                         
0x13cfd:	mov byte ptr [rbp - 0x410], 0       #	    *str |=| '\0';
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13d04:	jmp 0x13f57                         #	    |g|oto skip_info_display;
0x13d09:	mov rax, qword ptr [rbp - 0x6d8]    #	|p|anel_mode2string(this, this->current_entry, temp_rights);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13d10:	mov ecx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13d13:	lea rdx, [rbp - 0x6a0]              
MEMORY OFFSET:     -0x6a0     -1696  >>-1688

0x13d1a:	mov rax, qword ptr [rbp - 0x6d8]    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13d21:	mov esi, ecx                        
0x13d23:	mov rdi, rax                        
0x13d26:	mov eax, 0                          
0x13d2b:	call 0x13766                        
0x13d30:	mov rax, qword ptr [rbp - 0x6d8]    #	maxname = this|-|>columns - 26;  /* FIXME: Huh?  */
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13d37:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x13d3a:	sub eax, 0x1a                       #	maxname = this->columns |-| 26;  /* FIXME: Huh?  */
0x13d3d:	cdqe                                #	maxname |=| this->columns - 26;  /* FIXME: Huh?  */
0x13d3f:	mov qword ptr [rbp - 0x6b8], rax    
MEMORY OFFSET:     -0x6b8     -1720  >>-1712

0x13d46:	mov rax, qword ptr [rbp - 0x6d8]    #	len = |m|in(strlen(this->dir_entry[this->current_entry].name), maxname);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13d4d:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13d51:	mov rax, qword ptr [rbp - 0x6d8]    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13d58:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13d5b:	movsxd rdx, eax                     
0x13d5e:	mov rax, rdx                        
0x13d61:	shl rax, 2                          
0x13d65:	add rax, rdx                        
0x13d68:	shl rax, 4                          
0x13d6c:	add rax, rcx                        
0x13d6f:	mov rax, qword ptr [rax]            
0x13d72:	mov rdi, rax                        
0x13d75:	call 0x4960                         
0x13d7a:	cmp qword ptr [rbp - 0x6b8], rax    
MEMORY OFFSET:     -0x6b8     -1720  >>-1712

0x13d81:	jb 0x13db9                          
0x13d83:	mov rax, qword ptr [rbp - 0x6d8]    #	len = |m|in(strlen(this->dir_entry[this->current_entry].name), maxname);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13d8a:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13d8e:	mov rax, qword ptr [rbp - 0x6d8]    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13d95:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13d98:	movsxd rdx, eax                     
0x13d9b:	mov rax, rdx                        
0x13d9e:	shl rax, 2                          
0x13da2:	add rax, rdx                        
0x13da5:	shl rax, 4                          
0x13da9:	add rax, rcx                        
0x13dac:	mov rax, qword ptr [rax]            
0x13daf:	mov rdi, rax                        
0x13db2:	call 0x4960                         
0x13db7:	jmp 0x13dc0                         
0x13db9:	mov rax, qword ptr [rbp - 0x6b8]    #	len = |m|in(strlen(this->dir_entry[this->current_entry].name), maxname);
MEMORY OFFSET:     -0x6b8     -1720  >>-1712

0x13dc0:	mov qword ptr [rbp - 0x6b0], rax    #	len |=| min(strlen(this->dir_entry[this->current_entry].name), maxname);
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x13dc7:	mov rax, qword ptr [rbp - 0x6d8]    #	memcpy(str, this|-|>dir_entry[this->current_entry].name, len);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13dce:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13dd2:	mov rax, qword ptr [rbp - 0x6d8]    #	memcpy(str, this->dir_entry[this|-|>current_entry].name, len);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13dd9:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13ddc:	movsxd rdx, eax                     
0x13ddf:	mov rax, rdx                        #	memcpy(str, this->dir_entry|[|this->current_entry].name, len);
0x13de2:	shl rax, 2                          
0x13de6:	add rax, rdx                        
0x13de9:	shl rax, 4                          
0x13ded:	add rax, rcx                        
0x13df0:	mov rcx, qword ptr [rax]            #	memcpy(str, this->dir_entry[this->current_entry]|.|name, len);
0x13df3:	mov rdx, qword ptr [rbp - 0x6b0]    #	|m|emcpy(str, this->dir_entry[this->current_entry].name, len);
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x13dfa:	lea rax, [rbp - 0x410]              
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13e01:	mov rsi, rcx                        
0x13e04:	mov rdi, rax                        
0x13e07:	call 0x4b70                         
0x13e0c:	mov rax, qword ptr [rbp - 0x6b8]    #	|m|emset(str + len, ' ', maxname - len);
MEMORY OFFSET:     -0x6b8     -1720  >>-1712

0x13e13:	sub rax, qword ptr [rbp - 0x6b0]    
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x13e1a:	lea rcx, [rbp - 0x410]              
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13e21:	mov rdx, qword ptr [rbp - 0x6b0]    
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x13e28:	add rcx, rdx                        
0x13e2b:	mov rdx, rax                        
0x13e2e:	mov esi, 0x20                       
0x13e33:	mov rdi, rcx                        
0x13e36:	call 0x4a10                         
0x13e3b:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this|-|>dir_entry[this->current_entry].type == DIR_ENTRY)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13e42:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13e46:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this->dir_entry[this|-|>current_entry].type == DIR_ENTRY)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13e4d:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13e50:	movsxd rdx, eax                     
0x13e53:	mov rax, rdx                        #	if (this->dir_entry|[|this->current_entry].type == DIR_ENTRY)
0x13e56:	shl rax, 2                          
0x13e5a:	add rax, rdx                        
0x13e5d:	shl rax, 4                          
0x13e61:	add rax, rcx                        
0x13e64:	movzx eax, byte ptr [rax + 0x48]    #	if (this->dir_entry[this->current_entry]|.|type == DIR_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x13e68:	test al, al                         #	if |(|this->dir_entry[this->current_entry].type == DIR_ENTRY)
0x13e6a:	jne 0x13ef7                         
0x13e70:	mov rax, qword ptr [rbp - 0x6d8]    #		    (strcmp(this|-|>dir_entry[this->current_entry].name, "..") ==
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13e77:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13e7b:	mov rax, qword ptr [rbp - 0x6d8]    #		    (strcmp(this->dir_entry[this|-|>current_entry].name, "..") ==
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13e82:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13e85:	movsxd rdx, eax                     
0x13e88:	mov rax, rdx                        #		    (strcmp(this->dir_entry|[|this->current_entry].name, "..") ==
0x13e8b:	shl rax, 2                          
0x13e8f:	add rax, rdx                        
0x13e92:	shl rax, 4                          
0x13e96:	add rax, rcx                        
0x13e99:	mov rax, qword ptr [rax]            #		    (strcmp(this->dir_entry[this->current_entry]|.|name, "..") ==
0x13e9c:	lea rdx, [rip + 0x1473b]            #		    (|s|trcmp(this->dir_entry[this->current_entry].name, "..") ==
MEMORY OFFSET:     0x1473b     83771  >>83779

0x13ea3:	mov rsi, rdx                        
0x13ea6:	mov rdi, rax                        
0x13ea9:	call 0x4af0                         
0x13eae:	test eax, eax                       #	    |s|printf(str + maxname, " %10s %10s",
0x13eb0:	jne 0x13ebb                         
0x13eb2:	lea rax, [rip + 0x14759]            #	    |s|printf(str + maxname, " %10s %10s",
MEMORY OFFSET:     0x14759     83801  >>83809

0x13eb9:	jmp 0x13ec2                         
0x13ebb:	lea rax, [rip + 0x14758]            #	    |s|printf(str + maxname, " %10s %10s",
MEMORY OFFSET:     0x14758     83800  >>83808

0x13ec2:	lea rcx, [rbp - 0x410]              #	    |s|printf(str + maxname, " %10s %10s",
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13ec9:	mov rdx, qword ptr [rbp - 0x6b8]    
MEMORY OFFSET:     -0x6b8     -1720  >>-1712

0x13ed0:	lea rdi, [rcx + rdx]                
0x13ed4:	lea rdx, [rbp - 0x6a0]              
MEMORY OFFSET:     -0x6a0     -1696  >>-1688

0x13edb:	mov rcx, rdx                        
0x13ede:	mov rdx, rax                        
0x13ee1:	lea rax, [rip + 0x1473a]            
MEMORY OFFSET:     0x1473a     83770  >>83778

0x13ee8:	mov rsi, rax                        
0x13eeb:	mov eax, 0                          
0x13ef0:	call 0x4dd0                         
0x13ef5:	jmp 0x13f57                         
0x13ef7:	mov rax, qword ptr [rbp - 0x6d8]    #		    (long)this|-|>dir_entry[this->current_entry].size,
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13efe:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x13f02:	mov rax, qword ptr [rbp - 0x6d8]    #		    (long)this->dir_entry[this|-|>current_entry].size,
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13f09:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x13f0c:	movsxd rdx, eax                     
0x13f0f:	mov rax, rdx                        #		    (long)this->dir_entry|[|this->current_entry].size,
0x13f12:	shl rax, 2                          
0x13f16:	add rax, rdx                        
0x13f19:	shl rax, 4                          
0x13f1d:	add rax, rcx                        
0x13f20:	mov rax, qword ptr [rax + 8]        #		    (long)this->dir_entry[this->current_entry]|.|size,
MEMORY OFFSET:     0x8     8  >>16

0x13f24:	lea rcx, [rbp - 0x410]              #	    |s|printf(str + maxname, " %10ld %10s",
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13f2b:	mov rdx, qword ptr [rbp - 0x6b8]    
MEMORY OFFSET:     -0x6b8     -1720  >>-1712

0x13f32:	lea rdi, [rcx + rdx]                
0x13f36:	lea rdx, [rbp - 0x6a0]              
MEMORY OFFSET:     -0x6a0     -1696  >>-1688

0x13f3d:	mov rcx, rdx                        
0x13f40:	mov rdx, rax                        
0x13f43:	lea rax, [rip + 0x146e3]            
MEMORY OFFSET:     0x146e3     83683  >>83691

0x13f4a:	mov rsi, rax                        
0x13f4d:	mov eax, 0                          
0x13f52:	call 0x4dd0                         
0x13f57:	mov eax, dword ptr [rip + 0x1c567]  #	|t|ty_brightness(PanelFileInfoBrightness);
MEMORY OFFSET:     0x1c567     116071  >>116079

0x13f5d:	mov edi, eax                        
0x13f5f:	call 0xbf36                         
0x13f64:	mov eax, dword ptr [rip + 0x1c556]  #	|t|ty_foreground(PanelFileInfo);
MEMORY OFFSET:     0x1c556     116054  >>116062

0x13f6a:	mov edi, eax                        
0x13f6c:	call 0xbee3                         
0x13f71:	lea rax, [rbp - 0x410]              #    memcpy(this->temp, str, len = |s|trlen(str));
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13f78:	mov rdi, rax                        
0x13f7b:	call 0x4960                         
0x13f80:	mov qword ptr [rbp - 0x6b0], rax    
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x13f87:	mov rax, qword ptr [rbp - 0x6d8]    #    memcpy(this|-|>temp, str, len = strlen(str));
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13f8e:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x13f92:	mov rdx, qword ptr [rbp - 0x6b0]    #    |m|emcpy(this->temp, str, len = strlen(str));
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x13f99:	lea rcx, [rbp - 0x410]              
MEMORY OFFSET:     -0x410     -1040  >>-1032

0x13fa0:	mov rsi, rcx                        
0x13fa3:	mov rdi, rax                        
0x13fa6:	call 0x4b70                         
0x13fab:	mov rax, qword ptr [rbp - 0x6b0]    #    if( (len|+|2) < this->columns)
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x13fb2:	lea rdx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x13fb6:	mov rax, qword ptr [rbp - 0x6d8]    #    if( (len+2) < this|-|>columns)
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13fbd:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x13fc0:	cdqe                                
0x13fc2:	cmp rdx, rax                        #    if|(| (len+2) < this->columns)
0x13fc5:	jae 0x14002                         
0x13fc7:	mov rax, qword ptr [rbp - 0x6d8]    #	memset(this->temp + len, ' ', this|-|>columns - 2 - len);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13fce:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x13fd1:	sub eax, 2                          #	memset(this->temp + len, ' ', this->columns |-| 2 - len);
0x13fd4:	cdqe                                
0x13fd6:	sub rax, qword ptr [rbp - 0x6b0]    #	|m|emset(this->temp + len, ' ', this->columns - 2 - len);
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x13fdd:	mov rdx, qword ptr [rbp - 0x6d8]    #	memset(this|-|>temp + len, ' ', this->columns - 2 - len);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x13fe4:	mov rcx, qword ptr [rdx + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x13fe8:	mov rdx, qword ptr [rbp - 0x6b0]    #	memset(this->temp |+| len, ' ', this->columns - 2 - len);
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x13fef:	add rcx, rdx                        
0x13ff2:	mov rdx, rax                        #	|m|emset(this->temp + len, ' ', this->columns - 2 - len);
0x13ff5:	mov esi, 0x20                       
0x13ffa:	mov rdi, rcx                        
0x13ffd:	call 0x4a10                         
0x14002:	mov rax, qword ptr [rbp - 0x6d8]    #    |t|oprintable(this->temp, len);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x14009:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1400d:	mov rdx, qword ptr [rbp - 0x6b0]    
MEMORY OFFSET:     -0x6b0     -1712  >>-1704

0x14014:	mov rsi, rdx                        
0x14017:	mov rdi, rax                        
0x1401a:	call 0x1e5b1                        
0x1401f:	mov eax, dword ptr [rip + 0x1c45b]  #    |t|ty_background(PanelFrame);
MEMORY OFFSET:     0x1c45b     115803  >>115811

0x14025:	mov edi, eax                        
0x14027:	call 0xbf0b                         
0x1402c:	mov rax, qword ptr [rbp - 0x6d8]    #    window_goto(this->window, this|-|>lines - 1, 2);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x14033:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x14036:	lea ecx, [rax - 1]                  #    |w|indow_goto(this->window, this->lines - 1, 2);
MEMORY OFFSET:     -0x1     -1  >>7

0x14039:	mov rax, qword ptr [rbp - 0x6d8]    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x14040:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14044:	mov edx, 2                          
0x14049:	mov esi, ecx                        
0x1404b:	mov rdi, rax                        
0x1404e:	call 0xdc1e                         
0x14053:	mov rax, qword ptr [rbp - 0x6d8]    #    window_puts(this->window, this->temp, this|-|>columns - 4);
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x1405a:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x1405d:	lea edx, [rax - 4]                  #    |w|indow_puts(this->window, this->temp, this->columns - 4);
MEMORY OFFSET:     -0x4     -4  >>4

0x14060:	mov rax, qword ptr [rbp - 0x6d8]    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x14067:	mov rcx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1406b:	mov rax, qword ptr [rbp - 0x6d8]    
MEMORY OFFSET:     -0x6d8     -1752  >>-1744

0x14072:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14076:	mov rsi, rcx                        
0x14079:	mov rdi, rax                        
0x1407c:	call 0xdb1a                         
0x14081:	lea rax, [rbp - 0x6c9]              #    |t|ty_restore(&status);
MEMORY OFFSET:     -0x6c9     -1737  >>-1729

0x14088:	mov rdi, rax                        
0x1408b:	call 0xc067                         
0x14090:	jmp 0x14093                         
0x14092:	nop                                 #	|r|eturn;
0x14093:	mov rax, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x14097:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x140a0:	je 0x140a7                          
0x140a2:	call 0x4980                         
0x140a7:	leave                               
0x140a8:	ret                                 
0x140a9:	endbr64                             #|{|
0x140ad:	push rbp                            
0x140ae:	mov rbp, rsp                        
0x140b1:	sub rsp, 0x2e0                      
0x140b8:	mov qword ptr [rbp - 0x2c8], rdi    
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x140bf:	mov dword ptr [rbp - 0x2cc], esi    
MEMORY OFFSET:     -0x2cc     -716  >>-708

0x140c5:	mov dword ptr [rbp - 0x2d0], edx    
MEMORY OFFSET:     -0x2d0     -720  >>-712

0x140cb:	mov dword ptr [rbp - 0x2d4], ecx    
MEMORY OFFSET:     -0x2d4     -724  >>-716

0x140d1:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x140da:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x140de:	xor eax, eax                        
0x140e0:	cmp dword ptr [rbp - 0x2d0], 5      #    |s|witch (display_mode)
MEMORY OFFSET:     -0x2d0     -720  >>-712

0x140e7:	ja 0x143c2                          
0x140ed:	mov eax, dword ptr [rbp - 0x2d0]    
MEMORY OFFSET:     -0x2d0     -720  >>-712

0x140f3:	lea rdx, [rax*4]                    
0x140fb:	lea rax, [rip + 0x14d06]            
MEMORY OFFSET:     0x14d06     85254  >>85262

0x14102:	mov eax, dword ptr [rdx + rax]      
0x14105:	cdqe                                
0x14107:	lea rdx, [rip + 0x14cfa]            
MEMORY OFFSET:     0x14cfa     85242  >>85250

0x1410e:	add rax, rdx                        
0x14111:	jmp rax                             
0x14114:	mov rax, qword ptr [rbp - 0x2c8]    #		   this|-|>dir_entry[entry].owner, 7);
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x1411b:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1411f:	mov eax, dword ptr [rbp - 0x2cc]    #		   this->dir_entry|[|entry].owner, 7);
MEMORY OFFSET:     -0x2cc     -716  >>-708

0x14125:	movsxd rdx, eax                     
0x14128:	mov rax, rdx                        
0x1412b:	shl rax, 2                          
0x1412f:	add rax, rdx                        
0x14132:	shl rax, 4                          
0x14136:	add rax, rcx                        
0x14139:	mov rax, qword ptr [rax + 0x28]     #		   this->dir_entry[entry]|.|owner, 7);
MEMORY OFFSET:     0x28     40  >>48

0x1413d:	mov rdx, qword ptr [rbp - 0x2c8]    #	    memcpy(this|-|>temp + this->columns - 2 - offset,
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x14144:	mov rsi, qword ptr [rdx + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x14148:	mov rdx, qword ptr [rbp - 0x2c8]    #	    memcpy(this->temp + this|-|>columns - 2 - offset,
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x1414f:	mov edx, dword ptr [rdx + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14152:	movsxd rdx, edx                     
0x14155:	mov ecx, dword ptr [rbp - 0x2d4]    #	    memcpy(this->temp + this->columns - 2 |-| offset,
MEMORY OFFSET:     -0x2d4     -724  >>-716

0x1415b:	movsxd rcx, ecx                     
0x1415e:	sub rdx, rcx                        
0x14161:	sub rdx, 2                          
0x14165:	lea rcx, [rsi + rdx]                
0x14169:	mov edx, 7                          #	    |m|emcpy(this->temp + this->columns - 2 - offset,
0x1416e:	mov rsi, rax                        
0x14171:	mov rdi, rcx                        
0x14174:	call 0x4b70                         
0x14179:	mov rax, qword ptr [rbp - 0x2c8]    #		   this|-|>dir_entry[entry].group, 7);
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x14180:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14184:	mov eax, dword ptr [rbp - 0x2cc]    #		   this->dir_entry|[|entry].group, 7);
MEMORY OFFSET:     -0x2cc     -716  >>-708

0x1418a:	movsxd rdx, eax                     
0x1418d:	mov rax, rdx                        
0x14190:	shl rax, 2                          
0x14194:	add rax, rdx                        
0x14197:	shl rax, 4                          
0x1419b:	add rax, rcx                        
0x1419e:	mov rax, qword ptr [rax + 0x30]     #		   this->dir_entry[entry]|.|group, 7);
MEMORY OFFSET:     0x30     48  >>56

0x141a2:	mov rdx, qword ptr [rbp - 0x2c8]    #	    memcpy(this|-|>temp + this->columns - 2 - offset + 8,
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x141a9:	mov rsi, qword ptr [rdx + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x141ad:	mov rdx, qword ptr [rbp - 0x2c8]    #	    memcpy(this->temp + this|-|>columns - 2 - offset + 8,
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x141b4:	mov edx, dword ptr [rdx + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x141b7:	movsxd rdx, edx                     
0x141ba:	mov ecx, dword ptr [rbp - 0x2d4]    #	    memcpy(this->temp + this->columns - 2 |-| offset + 8,
MEMORY OFFSET:     -0x2d4     -724  >>-716

0x141c0:	movsxd rcx, ecx                     
0x141c3:	sub rdx, rcx                        
0x141c6:	add rdx, 6                          #	    memcpy(this->temp + this->columns - 2 - offset |+| 8,
0x141ca:	lea rcx, [rsi + rdx]                
0x141ce:	mov edx, 7                          #	    |m|emcpy(this->temp + this->columns - 2 - offset + 8,
0x141d3:	mov rsi, rax                        
0x141d6:	mov rdi, rcx                        
0x141d9:	call 0x4b70                         
0x141de:	jmp 0x143d4                         #	    |b|reak;
0x141e3:	mov rax, qword ptr [rbp - 0x2c8]    #		   this|-|>dir_entry[entry].date, 15);
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x141ea:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x141ee:	mov eax, dword ptr [rbp - 0x2cc]    #		   this->dir_entry|[|entry].date, 15);
MEMORY OFFSET:     -0x2cc     -716  >>-708

0x141f4:	movsxd rdx, eax                     
0x141f7:	mov rax, rdx                        
0x141fa:	shl rax, 2                          
0x141fe:	add rax, rdx                        
0x14201:	shl rax, 4                          
0x14205:	add rax, rcx                        
0x14208:	lea rcx, [rax + 0x38]               #		   this->dir_entry[entry]|.|date, 15);
MEMORY OFFSET:     0x38     56  >>64

0x1420c:	mov rax, qword ptr [rbp - 0x2c8]    #	    memcpy(this|-|>temp + this->columns - 2 - offset,
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x14213:	mov rsi, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x14217:	mov rax, qword ptr [rbp - 0x2c8]    #	    memcpy(this->temp + this|-|>columns - 2 - offset,
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x1421e:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14221:	cdqe                                
0x14223:	mov edx, dword ptr [rbp - 0x2d4]    #	    memcpy(this->temp + this->columns - 2 |-| offset,
MEMORY OFFSET:     -0x2d4     -724  >>-716

0x14229:	movsxd rdx, edx                     
0x1422c:	sub rax, rdx                        
0x1422f:	sub rax, 2                          
0x14233:	add rax, rsi                        
0x14236:	mov edx, 0xf                        #	    |m|emcpy(this->temp + this->columns - 2 - offset,
0x1423b:	mov rsi, rcx                        
0x1423e:	mov rdi, rax                        
0x14241:	call 0x4b70                         
0x14246:	jmp 0x143d4                         #	    |b|reak;
0x1424b:	mov rax, qword ptr [rbp - 0x2c8]    #	    sz=panel_beautify_number(hbuf,this|-|>dir_entry[entry].size,0);
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x14252:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14256:	mov eax, dword ptr [rbp - 0x2cc]    #	    sz=panel_beautify_number(hbuf,this->dir_entry|[|entry].size,0);
MEMORY OFFSET:     -0x2cc     -716  >>-708

0x1425c:	movsxd rdx, eax                     
0x1425f:	mov rax, rdx                        
0x14262:	shl rax, 2                          
0x14266:	add rax, rdx                        
0x14269:	shl rax, 4                          
0x1426d:	add rax, rcx                        
0x14270:	mov rcx, qword ptr [rax + 8]        #	    sz=|p|anel_beautify_number(hbuf,this->dir_entry[entry].size,0);
MEMORY OFFSET:     0x8     8  >>16

0x14274:	lea rax, [rbp - 0x2a0]              
MEMORY OFFSET:     -0x2a0     -672  >>-664

0x1427b:	mov edx, 0                          
0x14280:	mov rsi, rcx                        
0x14283:	mov rdi, rax                        
0x14286:	mov eax, 0                          
0x1428b:	call 0x134b5                        
0x14290:	mov qword ptr [rbp - 0x2a8], rax    
MEMORY OFFSET:     -0x2a8     -680  >>-672

0x14297:	mov rax, qword ptr [rbp - 0x2a8]    #	    szlen=|m|in(strlen(sz),10);
MEMORY OFFSET:     -0x2a8     -680  >>-672

0x1429e:	mov rdi, rax                        
0x142a1:	call 0x4960                         
0x142a6:	cmp rax, 0xa                        #	    szlen|=|min(strlen(sz),10);
0x142aa:	ja 0x142bd                          
0x142ac:	mov rax, qword ptr [rbp - 0x2a8]    #	    szlen=|m|in(strlen(sz),10);
MEMORY OFFSET:     -0x2a8     -680  >>-672

0x142b3:	mov rdi, rax                        
0x142b6:	call 0x4960                         
0x142bb:	jmp 0x142c2                         
0x142bd:	mov eax, 0xa                        #	    szlen|=|min(strlen(sz),10);
0x142c2:	mov dword ptr [rbp - 0x2b4], eax    #	    szlen|=|min(strlen(sz),10);
MEMORY OFFSET:     -0x2b4     -692  >>-684

0x142c8:	mov rax, qword ptr [rbp - 0x2c8]    #	    ptr=this|-|>temp + this->columns - 2 - offset;
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x142cf:	mov rcx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x142d3:	mov rax, qword ptr [rbp - 0x2c8]    #	    ptr=this->temp + this|-|>columns - 2 - offset;
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x142da:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x142dd:	cdqe                                
0x142df:	mov edx, dword ptr [rbp - 0x2d4]    #	    ptr=this->temp + this->columns - 2 |-| offset;
MEMORY OFFSET:     -0x2d4     -724  >>-716

0x142e5:	movsxd rdx, edx                     
0x142e8:	sub rax, rdx                        
0x142eb:	sub rax, 2                          
0x142ef:	add rax, rcx                        #	    ptr|=|this->temp + this->columns - 2 - offset;
0x142f2:	mov qword ptr [rbp - 0x2b0], rax    
MEMORY OFFSET:     -0x2b0     -688  >>-680

0x142f9:	cmp dword ptr [rbp - 0x2b4], 9      #	    if|(|szlen < 10)
MEMORY OFFSET:     -0x2b4     -692  >>-684

0x14300:	jg 0x14338                          
0x14302:	mov eax, 0xa                        #		memset(ptr,' ',10|-|szlen);
0x14307:	sub eax, dword ptr [rbp - 0x2b4]    
MEMORY OFFSET:     -0x2b4     -692  >>-684

0x1430d:	movsxd rdx, eax                     #		|m|emset(ptr,' ',10-szlen);
0x14310:	mov rax, qword ptr [rbp - 0x2b0]    
MEMORY OFFSET:     -0x2b0     -688  >>-680

0x14317:	mov esi, 0x20                       
0x1431c:	mov rdi, rax                        
0x1431f:	call 0x4a10                         
0x14324:	mov eax, 0xa                        #		ptr += (10|-|szlen);
0x14329:	sub eax, dword ptr [rbp - 0x2b4]    
MEMORY OFFSET:     -0x2b4     -692  >>-684

0x1432f:	cdqe                                
0x14331:	add qword ptr [rbp - 0x2b0], rax    #		ptr |+|= (10-szlen);
MEMORY OFFSET:     -0x2b0     -688  >>-680

0x14338:	mov eax, dword ptr [rbp - 0x2b4]    #	    |m|emcpy(ptr, sz, szlen);
MEMORY OFFSET:     -0x2b4     -692  >>-684

0x1433e:	movsxd rdx, eax                     
0x14341:	mov rcx, qword ptr [rbp - 0x2a8]    
MEMORY OFFSET:     -0x2a8     -680  >>-672

0x14348:	mov rax, qword ptr [rbp - 0x2b0]    
MEMORY OFFSET:     -0x2b0     -688  >>-680

0x1434f:	mov rsi, rcx                        
0x14352:	mov rdi, rax                        
0x14355:	call 0x4b70                         
0x1435a:	jmp 0x143d4                         #	    |b|reak;
0x1435c:	lea rdx, [rbp - 0x2a0]              #	    |p|anel_mode2string(this, entry, temp_rights);
MEMORY OFFSET:     -0x2a0     -672  >>-664

0x14363:	mov ecx, dword ptr [rbp - 0x2cc]    
MEMORY OFFSET:     -0x2cc     -716  >>-708

0x14369:	mov rax, qword ptr [rbp - 0x2c8]    
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x14370:	mov esi, ecx                        
0x14372:	mov rdi, rax                        
0x14375:	mov eax, 0                          
0x1437a:	call 0x13766                        
0x1437f:	mov rax, qword ptr [rbp - 0x2c8]    #	    memcpy(this|-|>temp + this->columns - 2 - offset, temp_rights, 10);
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x14386:	mov rcx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1438a:	mov rax, qword ptr [rbp - 0x2c8]    #	    memcpy(this->temp + this|-|>columns - 2 - offset, temp_rights, 10);
MEMORY OFFSET:     -0x2c8     -712  >>-704

0x14391:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14394:	cdqe                                
0x14396:	mov edx, dword ptr [rbp - 0x2d4]    #	    memcpy(this->temp + this->columns - 2 |-| offset, temp_rights, 10);
MEMORY OFFSET:     -0x2d4     -724  >>-716

0x1439c:	movsxd rdx, edx                     
0x1439f:	sub rax, rdx                        
0x143a2:	sub rax, 2                          
0x143a6:	add rcx, rax                        
0x143a9:	lea rax, [rbp - 0x2a0]              #	    |m|emcpy(this->temp + this->columns - 2 - offset, temp_rights, 10);
MEMORY OFFSET:     -0x2a0     -672  >>-664

0x143b0:	mov edx, 0xa                        
0x143b5:	mov rsi, rax                        
0x143b8:	mov rdi, rcx                        
0x143bb:	call 0x4b70                         
0x143c0:	jmp 0x143d4                         #	    |b|reak;
0x143c2:	lea rax, [rip + 0x14270]            #	    |f|atal("invalid mode");
MEMORY OFFSET:     0x14270     82544  >>82552

0x143c9:	mov rdi, rax                        
0x143cc:	call 0x672c                         
0x143d1:	jmp 0x143d4                         #|}|
0x143d3:	nop                                 #	    |b|reak;
0x143d4:	nop                                 #|}|
0x143d5:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x143d9:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x143e2:	je 0x143e9                          
0x143e4:	call 0x4980                         
0x143e9:	leave                               
0x143ea:	ret                                 
0x143eb:	endbr64                             #|{|
0x143ef:	push rbp                            
0x143f0:	mov rbp, rsp                        
0x143f3:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x143f7:	mov rax, qword ptr [rbp - 8]        #    if ((this|-|>columns < 40) ||
MEMORY OFFSET:     -0x8     -8  >>0

0x143fb:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x143fe:	cmp eax, 0x27                       #    if |(|(this->columns < 40) ||
0x14401:	jle 0x1441e                         
0x14403:	mov rax, qword ptr [rbp - 8]        #	((this|-|>columns < 20 + 16 + 16 + 11 + 11) &&
MEMORY OFFSET:     -0x8     -8  >>0

0x14407:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x1440a:	cmp eax, 0x49                       #    if ((this->columns < 40) ||||
0x1440d:	jg 0x14425                          
0x1440f:	mov rax, qword ptr [rbp - 8]        #	 (this|-|>display_mode == ENABLE_ALL)))
MEMORY OFFSET:     -0x8     -8  >>0

0x14413:	mov eax, dword ptr [rax + 0x80]     
MEMORY OFFSET:     0x80     128  >>136

0x14419:	cmp eax, 5                          #	((this->columns < 20 + 16 + 16 + 11 + 11) |&|&
0x1441c:	jne 0x14425                         
0x1441e:	mov eax, 4                          #	return |1| + 1 + 1 + 1;
0x14423:	jmp 0x14443                         
0x14425:	mov rax, qword ptr [rbp - 8]        #	return reserved_characters[this|-|>display_mode];
MEMORY OFFSET:     -0x8     -8  >>0

0x14429:	mov eax, dword ptr [rax + 0x80]     
MEMORY OFFSET:     0x80     128  >>136

0x1442f:	cdqe                                #	return reserved_characters|[|this->display_mode];
0x14431:	lea rdx, [rax*4]                    
0x14439:	lea rax, [rip + 0x1c120]            
MEMORY OFFSET:     0x1c120     114976  >>114984

0x14440:	mov eax, dword ptr [rdx + rax]      
0x14443:	pop rbp                             #|}|
0x14444:	ret                                 
0x14445:	endbr64                             #|{|
0x14449:	push rbp                            
0x1444a:	mov rbp, rsp                        
0x1444d:	sub rsp, 0x40                       
0x14451:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x14455:	mov dword ptr [rbp - 0x3c], esi     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14458:	mov byte ptr [rbp - 0x2d], 0        #    char |c| = '\0';
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1445c:	mov rax, qword ptr [rbp - 0x38]     #    if (!this|-|>visible)
MEMORY OFFSET:     -0x38     -56  >>-48

0x14460:	movzx eax, byte ptr [rax + 0x6d]    
MEMORY OFFSET:     0x6d     109  >>117

0x14464:	test al, al                         #    if |(|!this->visible)
0x14466:	je 0x14ca1                          
0x1446c:	mov rax, qword ptr [rbp - 0x38]     #    memset(this->temp, ' ', this|-|>columns);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14470:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14473:	movsxd rdx, eax                     #    |m|emset(this->temp, ' ', this->columns);
0x14476:	mov rax, qword ptr [rbp - 0x38]     #    memset(this|-|>temp, ' ', this->columns);
MEMORY OFFSET:     -0x38     -56  >>-48

0x1447a:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1447e:	mov esi, 0x20                       #    |m|emset(this->temp, ' ', this->columns);
0x14483:	mov rdi, rax                        
0x14486:	call 0x4a10                         
0x1448b:	mov rax, qword ptr [rbp - 0x38]     #    reserved = |p|anel_get_reserved_characters(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x1448f:	mov rdi, rax                        
0x14492:	mov eax, 0                          
0x14497:	call 0x143eb                        
0x1449c:	cdqe                                #    reserved |=| panel_get_reserved_characters(this);
0x1449e:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x144a2:	cmp dword ptr [rbp - 0x3c], 0       #    if |(|(entry > 0) || rootdir())
MEMORY OFFSET:     -0x3c     -60  >>-52

0x144a6:	jg 0x144d2                          
0x144a8:	mov rax, qword ptr [rbp - 0x38]     #    if ((entry > 0) || |r|ootdir())
MEMORY OFFSET:     -0x38     -56  >>-48

0x144ac:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x144b0:	movzx eax, byte ptr [rax]           
0x144b3:	cmp al, 0x2f                        #    if ((entry > 0) |||| rootdir())
0x144b5:	jne 0x14566                         
0x144bb:	mov rax, qword ptr [rbp - 0x38]     #    if ((entry > 0) || |r|ootdir())
MEMORY OFFSET:     -0x38     -56  >>-48

0x144bf:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x144c3:	add rax, 1                          
0x144c7:	movzx eax, byte ptr [rax]           
0x144ca:	test al, al                         
0x144cc:	jne 0x14566                         
0x144d2:	mov rax, qword ptr [rbp - 0x38]     #	switch (this|-|>dir_entry[entry].type)
MEMORY OFFSET:     -0x38     -56  >>-48

0x144d6:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x144da:	mov eax, dword ptr [rbp - 0x3c]     #	switch (this->dir_entry|[|entry].type)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x144dd:	movsxd rdx, eax                     
0x144e0:	mov rax, rdx                        
0x144e3:	shl rax, 2                          
0x144e7:	add rax, rdx                        
0x144ea:	shl rax, 4                          
0x144ee:	add rax, rcx                        
0x144f1:	movzx eax, byte ptr [rax + 0x48]    #	switch (this->dir_entry[entry]|.|type)
MEMORY OFFSET:     0x48     72  >>80

0x144f5:	movsx eax, al                       
0x144f8:	cmp eax, 4                          #	|s|witch (this->dir_entry[entry].type)
0x144fb:	ja 0x14566                          
0x144fd:	mov eax, eax                        
0x144ff:	lea rdx, [rax*4]                    
0x14507:	lea rax, [rip + 0x14912]            
MEMORY OFFSET:     0x14912     84242  >>84250

0x1450e:	mov eax, dword ptr [rdx + rax]      
0x14511:	cdqe                                
0x14513:	lea rdx, [rip + 0x14906]            
MEMORY OFFSET:     0x14906     84230  >>84238

0x1451a:	add rax, rdx                        
0x1451d:	jmp rax                             
0x14520:	mov rax, qword ptr [rbp - 0x38]     #		if (this|-|>dir_entry[entry].executable)
MEMORY OFFSET:     -0x38     -56  >>-48

0x14524:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14528:	mov eax, dword ptr [rbp - 0x3c]     #		if (this->dir_entry|[|entry].executable)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1452b:	movsxd rdx, eax                     
0x1452e:	mov rax, rdx                        
0x14531:	shl rax, 2                          
0x14535:	add rax, rdx                        
0x14538:	shl rax, 4                          
0x1453c:	add rax, rcx                        
0x1453f:	movzx eax, byte ptr [rax + 0x4a]    #		if (this->dir_entry[entry]|.|executable)
MEMORY OFFSET:     0x4a     74  >>82

0x14543:	test al, al                         #		if |(|this->dir_entry[entry].executable)
0x14545:	je 0x14565                          
0x14547:	mov byte ptr [rbp - 0x2d], 0x2a     #		    c |=| '*';
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1454b:	jmp 0x14565                         #		|b|reak;
0x1454d:	mov byte ptr [rbp - 0x2d], 0x2f     #	    case DIR_ENTRY:     c |=| '/'; break;
MEMORY OFFSET:     -0x2d     -45  >>-37

0x14551:	jmp 0x14566                         #	    case DIR_ENTRY:     c = '/'; |b|reak;
0x14553:	mov byte ptr [rbp - 0x2d], 0x40     #	    case SYMLINK_ENTRY: c |=| '@'; break;
MEMORY OFFSET:     -0x2d     -45  >>-37

0x14557:	jmp 0x14566                         #	    case SYMLINK_ENTRY: c = '@'; |b|reak;
0x14559:	mov byte ptr [rbp - 0x2d], 0x7c     #	    case FIFO_ENTRY:    c |=| '|'; break;
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1455d:	jmp 0x14566                         #	    case FIFO_ENTRY:    c = '|'; |b|reak;
0x1455f:	mov byte ptr [rbp - 0x2d], 0x3d     #	    case SOCKET_ENTRY:  c |=| '='; break;
MEMORY OFFSET:     -0x2d     -45  >>-37

0x14563:	jmp 0x14566                         #	    case SOCKET_ENTRY:  c = '='; |b|reak;
0x14565:	nop                                 #		|b|reak;
0x14566:	cmp byte ptr [rbp - 0x2d], 0        #    if |(|c != '\0')
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1456a:	je 0x14571                          
0x1456c:	add qword ptr [rbp - 0x20], 1       #	reserved|+|+;
MEMORY OFFSET:     -0x20     -32  >>-24

0x14571:	mov rax, qword ptr [rbp - 0x38]     #    entry_length = strlen(this|-|>dir_entry[entry].name);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14575:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14579:	mov eax, dword ptr [rbp - 0x3c]     #    entry_length = strlen(this->dir_entry|[|entry].name);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1457c:	movsxd rdx, eax                     
0x1457f:	mov rax, rdx                        
0x14582:	shl rax, 2                          
0x14586:	add rax, rdx                        
0x14589:	shl rax, 4                          
0x1458d:	add rax, rcx                        
0x14590:	mov rax, qword ptr [rax]            #    entry_length = strlen(this->dir_entry[entry]|.|name);
0x14593:	mov rdi, rax                        #    entry_length = |s|trlen(this->dir_entry[entry].name);
0x14596:	call 0x4960                         
0x1459b:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1459f:	mov rax, qword ptr [rbp - 0x38]     #    if (this|-|>columns - reserved >= entry_length)
MEMORY OFFSET:     -0x38     -56  >>-48

0x145a3:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x145a6:	cdqe                                
0x145a8:	sub rax, qword ptr [rbp - 0x20]     #    if (this->columns |-| reserved >= entry_length)
MEMORY OFFSET:     -0x20     -32  >>-24

0x145ac:	cmp qword ptr [rbp - 0x10], rax     #    if |(|this->columns - reserved >= entry_length)
MEMORY OFFSET:     -0x10     -16  >>-8

0x145b0:	ja 0x145bc                          
0x145b2:	mov qword ptr [rbp - 0x18], 0       #	offset |=| 0;
MEMORY OFFSET:     -0x18     -24  >>-16

0x145ba:	jmp 0x1460c                         
0x145bc:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>columns - reserved + this->horizontal_offset > entry_length)
MEMORY OFFSET:     -0x38     -56  >>-48

0x145c0:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x145c3:	cdqe                                
0x145c5:	sub rax, qword ptr [rbp - 0x20]     #	if (this->columns |-| reserved + this->horizontal_offset > entry_length)
MEMORY OFFSET:     -0x20     -32  >>-24

0x145c9:	mov rdx, rax                        
0x145cc:	mov rax, qword ptr [rbp - 0x38]     #	if (this->columns - reserved + this|-|>horizontal_offset > entry_length)
MEMORY OFFSET:     -0x38     -56  >>-48

0x145d0:	mov eax, dword ptr [rax + 0x74]     
MEMORY OFFSET:     0x74     116  >>124

0x145d3:	cdqe                                
0x145d5:	add rax, rdx                        #	if (this->columns - reserved |+| this->horizontal_offset > entry_length)
0x145d8:	cmp qword ptr [rbp - 0x10], rax     #	if |(|this->columns - reserved + this->horizontal_offset > entry_length)
MEMORY OFFSET:     -0x10     -16  >>-8

0x145dc:	jae 0x145ff                         
0x145de:	mov rax, qword ptr [rbp - 0x38]     #	    offset = entry_length - (this|-|>columns - reserved);
MEMORY OFFSET:     -0x38     -56  >>-48

0x145e2:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x145e5:	movsxd rdx, eax                     
0x145e8:	mov rax, qword ptr [rbp - 0x20]     #	    offset = entry_length |-| (this->columns - reserved);
MEMORY OFFSET:     -0x20     -32  >>-24

0x145ec:	sub rax, rdx                        
0x145ef:	mov rcx, rax                        
0x145f2:	mov rax, qword ptr [rbp - 0x10]     #	    offset |=| entry_length - (this->columns - reserved);
MEMORY OFFSET:     -0x10     -16  >>-8

0x145f6:	add rax, rcx                        
0x145f9:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x145fd:	jmp 0x1460c                         
0x145ff:	mov rax, qword ptr [rbp - 0x38]     #	    offset = this|-|>horizontal_offset;
MEMORY OFFSET:     -0x38     -56  >>-48

0x14603:	mov eax, dword ptr [rax + 0x74]     
MEMORY OFFSET:     0x74     116  >>124

0x14606:	cdqe                                #	    offset |=| this->horizontal_offset;
0x14608:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1460c:	mov rax, qword ptr [rbp - 0x10]     #    len = |m|in(entry_length - offset, this->columns - reserved);
MEMORY OFFSET:     -0x10     -16  >>-8

0x14610:	sub rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x14614:	mov rdx, rax                        
0x14617:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1461b:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x1461e:	cdqe                                
0x14620:	sub rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x14624:	cmp rdx, rax                        #    len |=| min(entry_length - offset, this->columns - reserved);
0x14627:	cmovbe rax, rdx                     
0x1462b:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1462f:	mov rax, qword ptr [rbp - 0x38]     #    memcpy(&this->temp[1], this|-|>dir_entry[entry].name + offset, len);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14633:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14637:	mov eax, dword ptr [rbp - 0x3c]     #    memcpy(&this->temp[1], this->dir_entry|[|entry].name + offset, len);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1463a:	movsxd rdx, eax                     
0x1463d:	mov rax, rdx                        
0x14640:	shl rax, 2                          
0x14644:	add rax, rdx                        
0x14647:	shl rax, 4                          
0x1464b:	add rax, rcx                        
0x1464e:	mov rdx, qword ptr [rax]            #    memcpy(&this->temp[1], this->dir_entry[entry]|.|name + offset, len);
0x14651:	mov rax, qword ptr [rbp - 0x18]     #    memcpy(&this->temp[1], this->dir_entry[entry].name |+| offset, len);
MEMORY OFFSET:     -0x18     -24  >>-16

0x14655:	lea rsi, [rdx + rax]                
0x14659:	mov rax, qword ptr [rbp - 0x38]     #    memcpy(&this|-|>temp[1], this->dir_entry[entry].name + offset, len);
MEMORY OFFSET:     -0x38     -56  >>-48

0x1465d:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x14661:	lea rcx, [rax + 1]                  #    memcpy(|&|this->temp[1], this->dir_entry[entry].name + offset, len);
MEMORY OFFSET:     0x1     1  >>9

0x14665:	mov rax, qword ptr [rbp - 8]        #    |m|emcpy(&this->temp[1], this->dir_entry[entry].name + offset, len);
MEMORY OFFSET:     -0x8     -8  >>0

0x14669:	mov rdx, rax                        
0x1466c:	mov rdi, rcx                        
0x1466f:	call 0x4b70                         
0x14674:	mov rax, qword ptr [rbp - 0x38]     #    toprintable(&this|-|>temp[1], len);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14678:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1467c:	lea rdx, [rax + 1]                  #    |t|oprintable(&this->temp[1], len);
MEMORY OFFSET:     0x1     1  >>9

0x14680:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x14684:	mov rsi, rax                        
0x14687:	mov rdi, rdx                        
0x1468a:	call 0x1e5b1                        
0x1468f:	cmp byte ptr [rbp - 0x2d], 0        #    if |(|c != '\0')
MEMORY OFFSET:     -0x2d     -45  >>-37

0x14693:	je 0x146ae                          
0x14695:	mov rax, qword ptr [rbp - 0x38]     #	this|-|>temp[len + 1] = c;
MEMORY OFFSET:     -0x38     -56  >>-48

0x14699:	mov rdx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1469d:	mov rax, qword ptr [rbp - 8]        #	this->temp|[|len + 1] = c;
MEMORY OFFSET:     -0x8     -8  >>0

0x146a1:	add rax, 1                          
0x146a5:	add rdx, rax                        
0x146a8:	movzx eax, byte ptr [rbp - 0x2d]    #	this->temp[len + 1] |=| c;
MEMORY OFFSET:     -0x2d     -45  >>-37

0x146ac:	mov byte ptr [rdx], al              
0x146ae:	mov rax, qword ptr [rbp - 0x38]     #    if (this|-|>columns >= 40)
MEMORY OFFSET:     -0x38     -56  >>-48

0x146b2:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x146b5:	cmp eax, 0x27                       #    if |(|this->columns >= 40)
0x146b8:	jle 0x147f7                         
0x146be:	mov rax, qword ptr [rbp - 0x38]     #	switch (this|-|>display_mode)
MEMORY OFFSET:     -0x38     -56  >>-48

0x146c2:	mov eax, dword ptr [rax + 0x80]     
MEMORY OFFSET:     0x80     128  >>136

0x146c8:	cmp eax, 5                          #	|s|witch (this->display_mode)
0x146cb:	je 0x14758                          
0x146d1:	cmp eax, 5                          
0x146d4:	jg 0x147e2                          
0x146da:	cmp eax, 4                          
0x146dd:	je 0x147f3                          
0x146e3:	cmp eax, 4                          
0x146e6:	jg 0x147e2                          
0x146ec:	cmp eax, 1                          
0x146ef:	jg 0x146fa                          
0x146f1:	test eax, eax                       
0x146f3:	jns 0x14708                         
0x146f5:	jmp 0x147e2                         
0x146fa:	sub eax, 2                          
0x146fd:	cmp eax, 1                          
0x14700:	ja 0x147e2                          
0x14706:	jmp 0x14730                         
0x14708:	mov rax, qword ptr [rbp - 0x38]     #		|p|anel_build_entry_field(this, entry, this->display_mode, 16);
MEMORY OFFSET:     -0x38     -56  >>-48

0x1470c:	mov edx, dword ptr [rax + 0x80]     
MEMORY OFFSET:     0x80     128  >>136

0x14712:	mov esi, dword ptr [rbp - 0x3c]     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14715:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x14719:	mov ecx, 0x10                       
0x1471e:	mov rdi, rax                        
0x14721:	mov eax, 0                          
0x14726:	call 0x140a9                        
0x1472b:	jmp 0x147f7                         #		|b|reak;
0x14730:	mov rax, qword ptr [rbp - 0x38]     #		|p|anel_build_entry_field(this, entry, this->display_mode, 11);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14734:	mov edx, dword ptr [rax + 0x80]     
MEMORY OFFSET:     0x80     128  >>136

0x1473a:	mov esi, dword ptr [rbp - 0x3c]     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1473d:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x14741:	mov ecx, 0xb                        
0x14746:	mov rdi, rax                        
0x14749:	mov eax, 0                          
0x1474e:	call 0x140a9                        
0x14753:	jmp 0x147f7                         #		|b|reak;
0x14758:	mov rax, qword ptr [rbp - 0x38]     #		if (this|-|>columns < 20 + 16 + 16 + 11 + 11)
MEMORY OFFSET:     -0x38     -56  >>-48

0x1475c:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x1475f:	cmp eax, 0x49                       #		if |(|this->columns < 20 + 16 + 16 + 11 + 11)
0x14762:	jle 0x147f6                         
0x14768:	mov esi, dword ptr [rbp - 0x3c]     #		|p|anel_build_entry_field(this, entry, ENABLE_OWNER_GROUP,
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1476b:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1476f:	mov ecx, 0x36                       
0x14774:	mov edx, 0                          
0x14779:	mov rdi, rax                        
0x1477c:	mov eax, 0                          
0x14781:	call 0x140a9                        
0x14786:	mov esi, dword ptr [rbp - 0x3c]     #		|p|anel_build_entry_field(this, entry, ENABLE_DATE_TIME,
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14789:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1478d:	mov ecx, 0x26                       
0x14792:	mov edx, 1                          
0x14797:	mov rdi, rax                        
0x1479a:	mov eax, 0                          
0x1479f:	call 0x140a9                        
0x147a4:	mov esi, dword ptr [rbp - 0x3c]     #		|p|anel_build_entry_field(this, entry, ENABLE_SIZE,
MEMORY OFFSET:     -0x3c     -60  >>-52

0x147a7:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x147ab:	mov ecx, 0x16                       
0x147b0:	mov edx, 2                          
0x147b5:	mov rdi, rax                        
0x147b8:	mov eax, 0                          
0x147bd:	call 0x140a9                        
0x147c2:	mov esi, dword ptr [rbp - 0x3c]     #		|p|anel_build_entry_field(this, entry, ENABLE_MODE,
MEMORY OFFSET:     -0x3c     -60  >>-52

0x147c5:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x147c9:	mov ecx, 0xb                        
0x147ce:	mov edx, 3                          
0x147d3:	mov rdi, rax                        
0x147d6:	mov eax, 0                          
0x147db:	call 0x140a9                        
0x147e0:	jmp 0x147f7                         #		|b|reak;
0x147e2:	lea rax, [rip + 0x13e50]            #		|f|atal("invalid mode");
MEMORY OFFSET:     0x13e50     81488  >>81496

0x147e9:	mov rdi, rax                        
0x147ec:	call 0x672c                         
0x147f1:	jmp 0x147f7                         
0x147f3:	nop                                 #		|b|reak;
0x147f4:	jmp 0x147f7                         
0x147f6:	nop                                 #		    |b|reak;
0x147f7:	mov rax, qword ptr [rbp - 0x38]     #    if (this|-|>dir_entry[entry].selected)
MEMORY OFFSET:     -0x38     -56  >>-48

0x147fb:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x147ff:	mov eax, dword ptr [rbp - 0x3c]     #    if (this->dir_entry|[|entry].selected)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14802:	movsxd rdx, eax                     
0x14805:	mov rax, rdx                        
0x14808:	shl rax, 2                          
0x1480c:	add rax, rdx                        
0x1480f:	shl rax, 4                          
0x14813:	add rax, rcx                        
0x14816:	movzx eax, byte ptr [rax + 0x49]    #    if (this->dir_entry[entry]|.|selected)
MEMORY OFFSET:     0x49     73  >>81

0x1481a:	test al, al                         #    if |(|this->dir_entry[entry].selected)
0x1481c:	je 0x14839                          
0x1481e:	mov rax, qword ptr [rbp - 0x38]     #	this|-|>temp[this->columns - 3] = '*';
MEMORY OFFSET:     -0x38     -56  >>-48

0x14822:	mov rdx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x14826:	mov rax, qword ptr [rbp - 0x38]     #	this->temp[this|-|>columns - 3] = '*';
MEMORY OFFSET:     -0x38     -56  >>-48

0x1482a:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x1482d:	cdqe                                
0x1482f:	sub rax, 3                          #	this->temp|[|this->columns - 3] = '*';
0x14833:	add rax, rdx                        
0x14836:	mov byte ptr [rax], 0x2a            #	this->temp[this->columns - 3] |=| '*';
0x14839:	mov rax, qword ptr [rbp - 0x38]     #    if (entry == this|-|>current_entry)
MEMORY OFFSET:     -0x38     -56  >>-48

0x1483d:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x14840:	cmp dword ptr [rbp - 0x3c], eax     #    if |(|entry == this->current_entry)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14843:	jne 0x14867                         
0x14845:	mov rax, qword ptr [rbp - 0x38]     #	this->temp[0] = this|-|>focus ?
MEMORY OFFSET:     -0x38     -56  >>-48

0x14849:	movzx eax, byte ptr [rax + 0x6c]    
MEMORY OFFSET:     0x6c     108  >>116

0x1484d:	test al, al                         #	this->temp[0] |=| this->focus ?
0x1484f:	je 0x14858                          
0x14851:	mov edx, 0x3e                       #	this->temp[0] |=| this->focus ?
0x14856:	jmp 0x1485d                         
0x14858:	mov edx, 0x2a                       #	this->temp[0] |=| this->focus ?
0x1485d:	mov rax, qword ptr [rbp - 0x38]     #	this|-|>temp[0] = this->focus ?
MEMORY OFFSET:     -0x38     -56  >>-48

0x14861:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x14865:	mov byte ptr [rax], dl              #	this->temp[0] |=| this->focus ?
0x14867:	mov eax, dword ptr [rip + 0x1a7af]  #    if (|T|ypeSensitivity && this->dir_entry[entry].type != DIR_ENTRY &&
MEMORY OFFSET:     0x1a7af     108463  >>108471

0x1486d:	test eax, eax                       #    if |(|TypeSensitivity && this->dir_entry[entry].type != DIR_ENTRY &&
0x1486f:	je 0x14b6e                          
0x14875:	mov rax, qword ptr [rbp - 0x38]     #    if (TypeSensitivity && this|-|>dir_entry[entry].type != DIR_ENTRY &&
MEMORY OFFSET:     -0x38     -56  >>-48

0x14879:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1487d:	mov eax, dword ptr [rbp - 0x3c]     #    if (TypeSensitivity && this->dir_entry|[|entry].type != DIR_ENTRY &&
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14880:	movsxd rdx, eax                     
0x14883:	mov rax, rdx                        
0x14886:	shl rax, 2                          
0x1488a:	add rax, rdx                        
0x1488d:	shl rax, 4                          
0x14891:	add rax, rcx                        
0x14894:	movzx eax, byte ptr [rax + 0x48]    #    if (TypeSensitivity && this->dir_entry[entry]|.|type != DIR_ENTRY &&
MEMORY OFFSET:     0x48     72  >>80

0x14898:	test al, al                         #    if (TypeSensitivity |&|& this->dir_entry[entry].type != DIR_ENTRY &&
0x1489a:	je 0x14b6e                          
0x148a0:	mov rax, qword ptr [rbp - 0x38]     #	!this|-|>dir_entry[entry].selected)
MEMORY OFFSET:     -0x38     -56  >>-48

0x148a4:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x148a8:	mov eax, dword ptr [rbp - 0x3c]     #	!this->dir_entry|[|entry].selected)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x148ab:	movsxd rdx, eax                     
0x148ae:	mov rax, rdx                        
0x148b1:	shl rax, 2                          
0x148b5:	add rax, rdx                        
0x148b8:	shl rax, 4                          
0x148bc:	add rax, rcx                        
0x148bf:	movzx eax, byte ptr [rax + 0x49]    #	!this->dir_entry[entry]|.|selected)
MEMORY OFFSET:     0x49     73  >>81

0x148c3:	test al, al                         #    if (TypeSensitivity && this->dir_entry[entry].type != DIR_ENTRY |&|&
0x148c5:	jne 0x14b6e                         
0x148cb:	mov rax, qword ptr [rbp - 0x38]     #	window_goto(this->window, entry - this|-|>first_on_screen + 1, 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x148cf:	mov edx, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x148d2:	mov eax, dword ptr [rbp - 0x3c]     #	window_goto(this->window, entry |-| this->first_on_screen + 1, 1);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x148d5:	sub eax, edx                        
0x148d7:	lea ecx, [rax + 1]                  #	|w|indow_goto(this->window, entry - this->first_on_screen + 1, 1);
MEMORY OFFSET:     0x1     1  >>9

0x148da:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x148de:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x148e2:	mov edx, 1                          
0x148e7:	mov esi, ecx                        
0x148e9:	mov rdi, rax                        
0x148ec:	call 0xdc1e                         
0x148f1:	mov rax, qword ptr [rbp - 0x38]     #	brightness = this|-|>dir_entry[entry].selected ?
MEMORY OFFSET:     -0x38     -56  >>-48

0x148f5:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x148f9:	mov eax, dword ptr [rbp - 0x3c]     #	brightness = this->dir_entry|[|entry].selected ?
MEMORY OFFSET:     -0x3c     -60  >>-52

0x148fc:	movsxd rdx, eax                     
0x148ff:	mov rax, rdx                        
0x14902:	shl rax, 2                          
0x14906:	add rax, rdx                        
0x14909:	shl rax, 4                          
0x1490d:	add rax, rcx                        
0x14910:	movzx eax, byte ptr [rax + 0x49]    #	brightness = this->dir_entry[entry]|.|selected ?
MEMORY OFFSET:     0x49     73  >>81

0x14914:	test al, al                         #			 PanelSelectedFileBrightness |:|
0x14916:	je 0x14920                          
0x14918:	mov eax, dword ptr [rip + 0x1bb7a]  #			 PanelSelectedFileBrightness |:|
MEMORY OFFSET:     0x1bb7a     113530  >>113538

0x1491e:	jmp 0x14926                         
0x14920:	mov eax, dword ptr [rip + 0x1bb7a]  #			 PanelSelectedFileBrightness |:|
MEMORY OFFSET:     0x1bb7a     113530  >>113538

0x14926:	mov dword ptr [rbp - 0x24], eax     #	brightness |=| this->dir_entry[entry].selected ?
MEMORY OFFSET:     -0x24     -36  >>-28

0x14929:	mov rax, qword ptr [rbp - 0x38]     #	foreground = this|-|>dir_entry[entry].selected ?
MEMORY OFFSET:     -0x38     -56  >>-48

0x1492d:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14931:	mov eax, dword ptr [rbp - 0x3c]     #	foreground = this->dir_entry|[|entry].selected ?
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14934:	movsxd rdx, eax                     
0x14937:	mov rax, rdx                        
0x1493a:	shl rax, 2                          
0x1493e:	add rax, rdx                        
0x14941:	shl rax, 4                          
0x14945:	add rax, rcx                        
0x14948:	movzx eax, byte ptr [rax + 0x49]    #	foreground = this->dir_entry[entry]|.|selected ?
MEMORY OFFSET:     0x49     73  >>81

0x1494c:	test al, al                         #			 PanelSelectedFile |:|
0x1494e:	je 0x14958                          
0x14950:	mov eax, dword ptr [rip + 0x1bb3e]  #			 PanelSelectedFile |:|
MEMORY OFFSET:     0x1bb3e     113470  >>113478

0x14956:	jmp 0x1495e                         
0x14958:	mov eax, dword ptr [rip + 0x1bb3e]  #			 PanelSelectedFile |:|
MEMORY OFFSET:     0x1bb3e     113470  >>113478

0x1495e:	mov dword ptr [rbp - 0x2c], eax     #	foreground |=| this->dir_entry[entry].selected ?
MEMORY OFFSET:     -0x2c     -44  >>-36

0x14961:	mov rax, qword ptr [rbp - 0x38]     #	if (entry == this|-|>current_entry && this->focus == ON)
MEMORY OFFSET:     -0x38     -56  >>-48

0x14965:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x14968:	cmp dword ptr [rbp - 0x3c], eax     #	if |(|entry == this->current_entry && this->focus == ON)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1496b:	jne 0x14984                         
0x1496d:	mov rax, qword ptr [rbp - 0x38]     #	if (entry == this->current_entry && this|-|>focus == ON)
MEMORY OFFSET:     -0x38     -56  >>-48

0x14971:	movzx eax, byte ptr [rax + 0x6c]    
MEMORY OFFSET:     0x6c     108  >>116

0x14975:	cmp al, 1                           #	if (entry == this->current_entry |&|& this->focus == ON)
0x14977:	jne 0x14984                         
0x14979:	mov eax, dword ptr [rip + 0x1bb2d]  #	    background |=| PanelCurrentFile;
MEMORY OFFSET:     0x1bb2d     113453  >>113461

0x1497f:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x14982:	jmp 0x1498d                         
0x14984:	mov eax, dword ptr [rip + 0x1bafa]  #	    background |=| PanelBackground;
MEMORY OFFSET:     0x1bafa     113402  >>113410

0x1498a:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1498d:	mov edx, dword ptr [rbp - 0x28]     #	|t|ty_colors(brightness, foreground, background);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14990:	mov ecx, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x14993:	mov eax, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x14996:	mov esi, ecx                        
0x14998:	mov edi, eax                        
0x1499a:	call 0xbf89                         
0x1499f:	mov rax, qword ptr [rbp - 0x38]     #	window_putc(this->window, *this|-|>temp);
MEMORY OFFSET:     -0x38     -56  >>-48

0x149a3:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x149a7:	movzx eax, byte ptr [rax]           #	window_putc(this->window, |*|this->temp);
0x149aa:	movsx edx, al                       #	|w|indow_putc(this->window, *this->temp);
0x149ad:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x149b1:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x149b5:	mov esi, edx                        
0x149b7:	mov rdi, rax                        
0x149ba:	call 0xdbbc                         
0x149bf:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>dir_entry[entry].fti_loaded == 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x149c3:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x149c7:	mov eax, dword ptr [rbp - 0x3c]     #	if (this->dir_entry|[|entry].fti_loaded == 0)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x149ca:	movsxd rdx, eax                     
0x149cd:	mov rax, rdx                        
0x149d0:	shl rax, 2                          
0x149d4:	add rax, rdx                        
0x149d7:	shl rax, 4                          
0x149db:	add rax, rcx                        
0x149de:	movzx eax, byte ptr [rax + 0x4b]    #	if (this->dir_entry[entry]|.|fti_loaded == 0)
MEMORY OFFSET:     0x4b     75  >>83

0x149e2:	test al, al                         #	if |(|this->dir_entry[entry].fti_loaded == 0)
0x149e4:	jne 0x149fc                         
0x149e6:	mov edx, dword ptr [rbp - 0x3c]     #	    |p|anel_load_fti(this, entry);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x149e9:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x149ed:	mov esi, edx                        
0x149ef:	mov rdi, rax                        
0x149f2:	mov eax, 0                          
0x149f7:	call 0x11770                        
0x149fc:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>dir_entry[entry].brightness != 2)
MEMORY OFFSET:     -0x38     -56  >>-48

0x14a00:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14a04:	mov eax, dword ptr [rbp - 0x3c]     #	if (this->dir_entry|[|entry].brightness != 2)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14a07:	movsxd rdx, eax                     
0x14a0a:	mov rax, rdx                        
0x14a0d:	shl rax, 2                          
0x14a11:	add rax, rdx                        
0x14a14:	shl rax, 4                          
0x14a18:	add rax, rcx                        
0x14a1b:	movzx eax, byte ptr [rax + 0x4e]    #	if (this->dir_entry[entry]|.|brightness != 2)
MEMORY OFFSET:     0x4e     78  >>86

0x14a1f:	cmp al, 2                           #	if |(|this->dir_entry[entry].brightness != 2)
0x14a21:	je 0x14af1                          
0x14a27:	mov rax, qword ptr [rbp - 0x38]     #	    if (entry == this|-|>current_entry && this->focus == ON)
MEMORY OFFSET:     -0x38     -56  >>-48

0x14a2b:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x14a2e:	cmp dword ptr [rbp - 0x3c], eax     #	    if |(|entry == this->current_entry && this->focus == ON)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14a31:	jne 0x14a76                         
0x14a33:	mov rax, qword ptr [rbp - 0x38]     #	    if (entry == this->current_entry && this|-|>focus == ON)
MEMORY OFFSET:     -0x38     -56  >>-48

0x14a37:	movzx eax, byte ptr [rax + 0x6c]    
MEMORY OFFSET:     0x6c     108  >>116

0x14a3b:	cmp al, 1                           #	    if (entry == this->current_entry |&|& this->focus == ON)
0x14a3d:	jne 0x14a76                         
0x14a3f:	mov rax, qword ptr [rbp - 0x38]     #			   this|-|>dir_entry[entry].foreground,
MEMORY OFFSET:     -0x38     -56  >>-48

0x14a43:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14a47:	mov eax, dword ptr [rbp - 0x3c]     #			   this->dir_entry|[|entry].foreground,
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14a4a:	movsxd rdx, eax                     
0x14a4d:	mov rax, rdx                        
0x14a50:	shl rax, 2                          
0x14a54:	add rax, rdx                        
0x14a57:	shl rax, 4                          
0x14a5b:	add rax, rcx                        
0x14a5e:	movzx eax, byte ptr [rax + 0x4c]    #			   this->dir_entry[entry]|.|foreground,
MEMORY OFFSET:     0x4c     76  >>84

0x14a62:	movsx ecx, al                       #		|t|ty_colors(brightness,
0x14a65:	mov edx, dword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x14a68:	mov eax, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x14a6b:	mov esi, ecx                        
0x14a6d:	mov edi, eax                        
0x14a6f:	call 0xbf89                         
0x14a74:	jmp 0x14af1                         
0x14a76:	mov rax, qword ptr [rbp - 0x38]     #			   this|-|>dir_entry[entry].background);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14a7a:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14a7e:	mov eax, dword ptr [rbp - 0x3c]     #			   this->dir_entry|[|entry].background);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14a81:	movsxd rdx, eax                     
0x14a84:	mov rax, rdx                        
0x14a87:	shl rax, 2                          
0x14a8b:	add rax, rdx                        
0x14a8e:	shl rax, 4                          
0x14a92:	add rax, rcx                        
0x14a95:	movzx eax, byte ptr [rax + 0x4d]    #			   this->dir_entry[entry]|.|background);
MEMORY OFFSET:     0x4d     77  >>85

0x14a99:	movsx edx, al                       #		|t|ty_colors(this->dir_entry[entry].brightness,
0x14a9c:	mov rax, qword ptr [rbp - 0x38]     #			   this|-|>dir_entry[entry].foreground,
MEMORY OFFSET:     -0x38     -56  >>-48

0x14aa0:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14aa4:	mov eax, dword ptr [rbp - 0x3c]     #			   this->dir_entry|[|entry].foreground,
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14aa7:	movsxd rcx, eax                     
0x14aaa:	mov rax, rcx                        
0x14aad:	shl rax, 2                          
0x14ab1:	add rax, rcx                        
0x14ab4:	shl rax, 4                          
0x14ab8:	add rax, rsi                        
0x14abb:	movzx eax, byte ptr [rax + 0x4c]    #			   this->dir_entry[entry]|.|foreground,
MEMORY OFFSET:     0x4c     76  >>84

0x14abf:	movsx ecx, al                       #		|t|ty_colors(this->dir_entry[entry].brightness,
0x14ac2:	mov rax, qword ptr [rbp - 0x38]     #		tty_colors(this|-|>dir_entry[entry].brightness,
MEMORY OFFSET:     -0x38     -56  >>-48

0x14ac6:	mov rdi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14aca:	mov eax, dword ptr [rbp - 0x3c]     #		tty_colors(this->dir_entry|[|entry].brightness,
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14acd:	movsxd rsi, eax                     
0x14ad0:	mov rax, rsi                        
0x14ad3:	shl rax, 2                          
0x14ad7:	add rax, rsi                        
0x14ada:	shl rax, 4                          
0x14ade:	add rax, rdi                        
0x14ae1:	movzx eax, byte ptr [rax + 0x4e]    #		tty_colors(this->dir_entry[entry]|.|brightness,
MEMORY OFFSET:     0x4e     78  >>86

0x14ae5:	movsx eax, al                       #		|t|ty_colors(this->dir_entry[entry].brightness,
0x14ae8:	mov esi, ecx                        
0x14aea:	mov edi, eax                        
0x14aec:	call 0xbf89                         
0x14af1:	mov rax, qword ptr [rbp - 8]        #	window_puts(this->window, this->temp + 1, len |+| 1);
MEMORY OFFSET:     -0x8     -8  >>0

0x14af5:	add eax, 1                          
0x14af8:	mov edx, eax                        #	|w|indow_puts(this->window, this->temp + 1, len + 1);
0x14afa:	mov rax, qword ptr [rbp - 0x38]     #	window_puts(this->window, this|-|>temp + 1, len + 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14afe:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x14b02:	lea rcx, [rax + 1]                  #	|w|indow_puts(this->window, this->temp + 1, len + 1);
MEMORY OFFSET:     0x1     1  >>9

0x14b06:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x14b0a:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14b0e:	mov rsi, rcx                        
0x14b11:	mov rdi, rax                        
0x14b14:	call 0xdb1a                         
0x14b19:	mov rax, qword ptr [rbp - 0x38]     #		    this|-|>columns - len - 2 - 2);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14b1d:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14b20:	mov edx, eax                        
0x14b22:	mov rax, qword ptr [rbp - 8]        #		    this->columns |-| len - 2 - 2);
MEMORY OFFSET:     -0x8     -8  >>0

0x14b26:	mov ecx, eax                        
0x14b28:	mov eax, edx                        
0x14b2a:	sub eax, ecx                        
0x14b2c:	sub eax, 4                          #		    this->columns - len - 2 |-| 2);
0x14b2f:	mov edx, eax                        #	|w|indow_puts(this->window,
0x14b31:	mov rax, qword ptr [rbp - 0x38]     #		    this|-|>temp + 1 + len + 1,
MEMORY OFFSET:     -0x38     -56  >>-48

0x14b35:	mov rcx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x14b39:	mov rax, qword ptr [rbp - 8]        #		    this->temp + 1 + len |+| 1,
MEMORY OFFSET:     -0x8     -8  >>0

0x14b3d:	add rax, 2                          
0x14b41:	add rcx, rax                        #	|w|indow_puts(this->window,
0x14b44:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x14b48:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14b4c:	mov rsi, rcx                        
0x14b4f:	mov rdi, rax                        
0x14b52:	call 0xdb1a                         
0x14b57:	mov edx, dword ptr [rbp - 0x28]     #	|t|ty_colors(brightness, foreground, background);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14b5a:	mov ecx, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x14b5d:	mov eax, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x14b60:	mov esi, ecx                        
0x14b62:	mov edi, eax                        
0x14b64:	call 0xbf89                         
0x14b69:	jmp 0x14ca2                         
0x14b6e:	mov rax, qword ptr [rbp - 0x38]     #	if (entry == this|-|>current_entry && this->focus == ON)
MEMORY OFFSET:     -0x38     -56  >>-48

0x14b72:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x14b75:	cmp dword ptr [rbp - 0x3c], eax     #	if |(|entry == this->current_entry && this->focus == ON)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14b78:	jne 0x14bc9                         
0x14b7a:	mov rax, qword ptr [rbp - 0x38]     #	if (entry == this->current_entry && this|-|>focus == ON)
MEMORY OFFSET:     -0x38     -56  >>-48

0x14b7e:	movzx eax, byte ptr [rax + 0x6c]    
MEMORY OFFSET:     0x6c     108  >>116

0x14b82:	cmp al, 1                           #	if (entry == this->current_entry |&|& this->focus == ON)
0x14b84:	jne 0x14bc9                         
0x14b86:	mov rax, qword ptr [rbp - 0x38]     #	    foreground = this|-|>dir_entry[entry].selected ?
MEMORY OFFSET:     -0x38     -56  >>-48

0x14b8a:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14b8e:	mov eax, dword ptr [rbp - 0x3c]     #	    foreground = this->dir_entry|[|entry].selected ?
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14b91:	movsxd rdx, eax                     
0x14b94:	mov rax, rdx                        
0x14b97:	shl rax, 2                          
0x14b9b:	add rax, rdx                        
0x14b9e:	shl rax, 4                          
0x14ba2:	add rax, rcx                        
0x14ba5:	movzx eax, byte ptr [rax + 0x49]    #	    foreground = this->dir_entry[entry]|.|selected ?
MEMORY OFFSET:     0x49     73  >>81

0x14ba9:	test al, al                         #			     PanelCurrentSelectedFile |:|
0x14bab:	je 0x14bb5                          
0x14bad:	mov eax, dword ptr [rip + 0x1b8f1]  #			     PanelCurrentSelectedFile |:|
MEMORY OFFSET:     0x1b8f1     112881  >>112889

0x14bb3:	jmp 0x14bbb                         
0x14bb5:	mov eax, dword ptr [rip + 0x1b8ed]  #			     PanelCurrentSelectedFile |:|
MEMORY OFFSET:     0x1b8ed     112877  >>112885

0x14bbb:	mov dword ptr [rbp - 0x2c], eax     #	    foreground |=| this->dir_entry[entry].selected ?
MEMORY OFFSET:     -0x2c     -44  >>-36

0x14bbe:	mov eax, dword ptr [rip + 0x1b8e8]  #	    background |=| PanelCurrentFile;
MEMORY OFFSET:     0x1b8e8     112872  >>112880

0x14bc4:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x14bc7:	jmp 0x14c0a                         
0x14bc9:	mov rax, qword ptr [rbp - 0x38]     #	    foreground = this|-|>dir_entry[entry].selected ?
MEMORY OFFSET:     -0x38     -56  >>-48

0x14bcd:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14bd1:	mov eax, dword ptr [rbp - 0x3c]     #	    foreground = this->dir_entry|[|entry].selected ?
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14bd4:	movsxd rdx, eax                     
0x14bd7:	mov rax, rdx                        
0x14bda:	shl rax, 2                          
0x14bde:	add rax, rdx                        
0x14be1:	shl rax, 4                          
0x14be5:	add rax, rcx                        
0x14be8:	movzx eax, byte ptr [rax + 0x49]    #	    foreground = this->dir_entry[entry]|.|selected ?
MEMORY OFFSET:     0x49     73  >>81

0x14bec:	test al, al                         #			     PanelSelectedFile |:|
0x14bee:	je 0x14bf8                          
0x14bf0:	mov eax, dword ptr [rip + 0x1b89e]  #			     PanelSelectedFile |:|
MEMORY OFFSET:     0x1b89e     112798  >>112806

0x14bf6:	jmp 0x14bfe                         
0x14bf8:	mov eax, dword ptr [rip + 0x1b89e]  #			     PanelSelectedFile |:|
MEMORY OFFSET:     0x1b89e     112798  >>112806

0x14bfe:	mov dword ptr [rbp - 0x2c], eax     #	    foreground |=| this->dir_entry[entry].selected ?
MEMORY OFFSET:     -0x2c     -44  >>-36

0x14c01:	mov eax, dword ptr [rip + 0x1b87d]  #	    background |=| PanelBackground;
MEMORY OFFSET:     0x1b87d     112765  >>112773

0x14c07:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x14c0a:	mov rax, qword ptr [rbp - 0x38]     #	brightness = this|-|>dir_entry[entry].selected ?
MEMORY OFFSET:     -0x38     -56  >>-48

0x14c0e:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14c12:	mov eax, dword ptr [rbp - 0x3c]     #	brightness = this->dir_entry|[|entry].selected ?
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14c15:	movsxd rdx, eax                     
0x14c18:	mov rax, rdx                        
0x14c1b:	shl rax, 2                          
0x14c1f:	add rax, rdx                        
0x14c22:	shl rax, 4                          
0x14c26:	add rax, rcx                        
0x14c29:	movzx eax, byte ptr [rax + 0x49]    #	brightness = this->dir_entry[entry]|.|selected ?
MEMORY OFFSET:     0x49     73  >>81

0x14c2d:	test al, al                         #			 PanelSelectedFileBrightness |:|
0x14c2f:	je 0x14c39                          
0x14c31:	mov eax, dword ptr [rip + 0x1b861]  #			 PanelSelectedFileBrightness |:|
MEMORY OFFSET:     0x1b861     112737  >>112745

0x14c37:	jmp 0x14c3f                         
0x14c39:	mov eax, dword ptr [rip + 0x1b861]  #			 PanelSelectedFileBrightness |:|
MEMORY OFFSET:     0x1b861     112737  >>112745

0x14c3f:	mov dword ptr [rbp - 0x24], eax     #	brightness |=| this->dir_entry[entry].selected ?
MEMORY OFFSET:     -0x24     -36  >>-28

0x14c42:	mov edx, dword ptr [rbp - 0x28]     #	|t|ty_colors(brightness, foreground, background);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14c45:	mov ecx, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x14c48:	mov eax, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x14c4b:	mov esi, ecx                        
0x14c4d:	mov edi, eax                        
0x14c4f:	call 0xbf89                         
0x14c54:	mov rax, qword ptr [rbp - 0x38]     #	window_goto(this->window, entry - this|-|>first_on_screen + 1, 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14c58:	mov edx, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x14c5b:	mov eax, dword ptr [rbp - 0x3c]     #	window_goto(this->window, entry |-| this->first_on_screen + 1, 1);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x14c5e:	sub eax, edx                        
0x14c60:	lea ecx, [rax + 1]                  #	|w|indow_goto(this->window, entry - this->first_on_screen + 1, 1);
MEMORY OFFSET:     0x1     1  >>9

0x14c63:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x14c67:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14c6b:	mov edx, 1                          
0x14c70:	mov esi, ecx                        
0x14c72:	mov rdi, rax                        
0x14c75:	call 0xdc1e                         
0x14c7a:	mov rax, qword ptr [rbp - 0x38]     #	window_puts(this->window, this->temp, this|-|>columns - 2);
MEMORY OFFSET:     -0x38     -56  >>-48

0x14c7e:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14c81:	lea edx, [rax - 2]                  #	|w|indow_puts(this->window, this->temp, this->columns - 2);
MEMORY OFFSET:     -0x2     -2  >>6

0x14c84:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x14c88:	mov rcx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x14c8c:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x14c90:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14c94:	mov rsi, rcx                        
0x14c97:	mov rdi, rax                        
0x14c9a:	call 0xdb1a                         
0x14c9f:	jmp 0x14ca2                         
0x14ca1:	nop                                 #	|r|eturn;
0x14ca2:	leave                               #|}|
0x14ca3:	ret                                 
0x14ca4:	endbr64                             #|{|
0x14ca8:	push rbp                            
0x14ca9:	mov rbp, rsp                        
0x14cac:	sub rsp, 0x30                       
0x14cb0:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x14cb4:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x14cbd:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x14cc1:	xor eax, eax                        
0x14cc3:	mov rax, qword ptr [rbp - 0x28]     #    char *buf = xmalloc(this|-|>columns);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14cc7:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14cca:	cdqe                                #    char *buf = |x|malloc(this->columns);
0x14ccc:	mov rdi, rax                        
0x14ccf:	call 0x24650                        
0x14cd4:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x14cd8:	mov rax, qword ptr [rbp - 0x28]     #    if (!this|-|>visible)
MEMORY OFFSET:     -0x28     -40  >>-32

0x14cdc:	movzx eax, byte ptr [rax + 0x6d]    
MEMORY OFFSET:     0x6d     109  >>117

0x14ce0:	test al, al                         #    if |(|!this->visible)
0x14ce2:	je 0x14e53                          
0x14ce8:	lea rax, [rbp - 0x15]               #    |t|ty_save(&status);
MEMORY OFFSET:     -0x15     -21  >>-13

0x14cec:	mov rdi, rax                        
0x14cef:	call 0xc04b                         
0x14cf4:	mov edx, dword ptr [rip + 0x1b786]  #    |t|ty_colors(OFF, PanelFrame, PanelFrame);
MEMORY OFFSET:     0x1b786     112518  >>112526

0x14cfa:	mov eax, dword ptr [rip + 0x1b780]  
MEMORY OFFSET:     0x1b780     112512  >>112520

0x14d00:	mov esi, eax                        
0x14d02:	mov edi, 0                          
0x14d07:	call 0xbf89                         
0x14d0c:	mov dword ptr [rbp - 0x14], 1       #    for (line |=| 1; line < this->lines - 1; line++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x14d13:	jmp 0x14d48                         #    |f|or (line = 1; line < this->lines - 1; line++)
0x14d15:	mov rax, qword ptr [rbp - 0x28]     #	|w|indow_goto(this->window, line, 0);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14d19:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14d1d:	mov ecx, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x14d20:	mov edx, 0                          
0x14d25:	mov esi, ecx                        
0x14d27:	mov rdi, rax                        
0x14d2a:	call 0xdc1e                         
0x14d2f:	mov rax, qword ptr [rbp - 0x28]     #	|w|indow_putc(this->window, ' ');
MEMORY OFFSET:     -0x28     -40  >>-32

0x14d33:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14d37:	mov esi, 0x20                       
0x14d3c:	mov rdi, rax                        
0x14d3f:	call 0xdbbc                         
0x14d44:	add dword ptr [rbp - 0x14], 1       #    for (line = 1; line < this->lines - 1; line|+|+)
MEMORY OFFSET:     -0x14     -20  >>-12

0x14d48:	mov rax, qword ptr [rbp - 0x28]     #    for (line = 1; line < this|-|>lines - 1; line++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x14d4c:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x14d4f:	sub eax, 1                          #    for (line = 1; line < this->lines |-| 1; line++)
0x14d52:	cmp dword ptr [rbp - 0x14], eax     #    for (line = 1; line |<| this->lines - 1; line++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x14d55:	jl 0x14d15                          
0x14d57:	mov dword ptr [rbp - 0x14], 1       #    for (line |=| 1; line < this->lines - 1; line++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x14d5e:	jmp 0x14d98                         #    |f|or (line = 1; line < this->lines - 1; line++)
0x14d60:	mov rax, qword ptr [rbp - 0x28]     #	window_goto(this->window, line, this|-|>columns - 1);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14d64:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14d67:	lea edx, [rax - 1]                  #	|w|indow_goto(this->window, line, this->columns - 1);
MEMORY OFFSET:     -0x1     -1  >>7

0x14d6a:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x14d6e:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14d72:	mov ecx, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x14d75:	mov esi, ecx                        
0x14d77:	mov rdi, rax                        
0x14d7a:	call 0xdc1e                         
0x14d7f:	mov rax, qword ptr [rbp - 0x28]     #	|w|indow_putc(this->window, ' ');
MEMORY OFFSET:     -0x28     -40  >>-32

0x14d83:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14d87:	mov esi, 0x20                       
0x14d8c:	mov rdi, rax                        
0x14d8f:	call 0xdbbc                         
0x14d94:	add dword ptr [rbp - 0x14], 1       #    for (line = 1; line < this->lines - 1; line|+|+)
MEMORY OFFSET:     -0x14     -20  >>-12

0x14d98:	mov rax, qword ptr [rbp - 0x28]     #    for (line = 1; line < this|-|>lines - 1; line++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x14d9c:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x14d9f:	sub eax, 1                          #    for (line = 1; line < this->lines |-| 1; line++)
0x14da2:	cmp dword ptr [rbp - 0x14], eax     #    for (line = 1; line |<| this->lines - 1; line++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x14da5:	jl 0x14d60                          
0x14da7:	mov rax, qword ptr [rbp - 0x28]     #    memset(buf, ' ', this|-|>columns);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14dab:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14dae:	movsxd rdx, eax                     #    |m|emset(buf, ' ', this->columns);
0x14db1:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x14db5:	mov esi, 0x20                       
0x14dba:	mov rdi, rax                        
0x14dbd:	call 0x4a10                         
0x14dc2:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_goto(this->window, 0, 0);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14dc6:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14dca:	mov edx, 0                          
0x14dcf:	mov esi, 0                          
0x14dd4:	mov rdi, rax                        
0x14dd7:	call 0xdc1e                         
0x14ddc:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_puts(this->window, buf, this->columns);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14de0:	mov edx, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14de3:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x14de7:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14deb:	mov rcx, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x14def:	mov rsi, rcx                        
0x14df2:	mov rdi, rax                        
0x14df5:	call 0xdb1a                         
0x14dfa:	mov rax, qword ptr [rbp - 0x28]     #    window_goto(this->window, this|-|>lines - 1, 0);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14dfe:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x14e01:	lea ecx, [rax - 1]                  #    |w|indow_goto(this->window, this->lines - 1, 0);
MEMORY OFFSET:     -0x1     -1  >>7

0x14e04:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x14e08:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14e0c:	mov edx, 0                          
0x14e11:	mov esi, ecx                        
0x14e13:	mov rdi, rax                        
0x14e16:	call 0xdc1e                         
0x14e1b:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_puts(this->window, buf, this->columns);
MEMORY OFFSET:     -0x28     -40  >>-32

0x14e1f:	mov edx, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x14e22:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x14e26:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x14e2a:	mov rcx, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x14e2e:	mov rsi, rcx                        
0x14e31:	mov rdi, rax                        
0x14e34:	call 0xdb1a                         
0x14e39:	mov rax, qword ptr [rbp - 0x10]     #    |x|free(buf);
MEMORY OFFSET:     -0x10     -16  >>-8

0x14e3d:	mov rdi, rax                        
0x14e40:	call 0x1eeae                        
0x14e45:	lea rax, [rbp - 0x15]               #    |t|ty_restore(&status);
MEMORY OFFSET:     -0x15     -21  >>-13

0x14e49:	mov rdi, rax                        
0x14e4c:	call 0xc067                         
0x14e51:	jmp 0x14e54                         
0x14e53:	nop                                 #	|r|eturn;
0x14e54:	mov rax, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x14e58:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x14e61:	je 0x14e68                          
0x14e63:	call 0x4980                         
0x14e68:	leave                               
0x14e69:	ret                                 
0x14e6a:	endbr64                             #|{|
0x14e6e:	push rbp                            
0x14e6f:	mov rbp, rsp                        
0x14e72:	sub rsp, 0x10                       
0x14e76:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x14e7a:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_frame(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x14e7e:	mov rdi, rax                        
0x14e81:	mov eax, 0                          
0x14e86:	call 0x14ca4                        
0x14e8b:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_path(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x14e8f:	mov rdi, rax                        
0x14e92:	mov eax, 0                          
0x14e97:	call 0x13382                        
0x14e9c:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_info(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x14ea0:	mov rdi, rax                        
0x14ea3:	mov eax, 0                          
0x14ea8:	call 0x1395a                        
0x14ead:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_size(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x14eb1:	mov rdi, rax                        
0x14eb4:	mov eax, 0                          
0x14eb9:	call 0x13506                        
0x14ebe:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_entries(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x14ec2:	mov rdi, rax                        
0x14ec5:	mov eax, 0                          
0x14eca:	call 0x13223                        
0x14ecf:	nop                                 #|}|
0x14ed0:	leave                               
0x14ed1:	ret                                 
0x14ed2:	endbr64                             #|{|
0x14ed6:	push rbp                            
0x14ed7:	mov rbp, rsp                        
0x14eda:	sub rsp, 0x10                       
0x14ede:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x14ee2:	mov dword ptr [rbp - 0xc], esi      
MEMORY OFFSET:     -0xc     -12  >>-4

0x14ee5:	mov eax, dword ptr [rbp - 0xc]      #    this->focus |=| status;
MEMORY OFFSET:     -0xc     -12  >>-4

0x14ee8:	mov edx, eax                        
0x14eea:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x14eee:	mov byte ptr [rax + 0x6c], dl       
MEMORY OFFSET:     0x6c     108  >>116

0x14ef1:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_entry(this, this->current_entry);
MEMORY OFFSET:     -0x8     -8  >>0

0x14ef5:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x14ef8:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x14efc:	mov esi, edx                        
0x14efe:	mov rdi, rax                        
0x14f01:	call 0x14445                        
0x14f06:	mov rax, qword ptr [rbp - 8]        #    if (this|-|>focus)
MEMORY OFFSET:     -0x8     -8  >>0

0x14f0a:	movzx eax, byte ptr [rax + 0x6c]    
MEMORY OFFSET:     0x6c     108  >>116

0x14f0e:	test al, al                         #    if |(|this->focus)
0x14f10:	je 0x14f44                          
0x14f12:	mov rax, qword ptr [rbp - 8]        #	if (chdir(this|-|>path) == -1)
MEMORY OFFSET:     -0x8     -8  >>0

0x14f16:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x14f1a:	mov rdi, rax                        #	if (|c|hdir(this->path) == -1)
0x14f1d:	call 0x4970                         
0x14f22:	cmp eax, -1                         #	if |(|chdir(this->path) == -1)
0x14f25:	jne 0x14f44                         
0x14f27:	mov rax, qword ptr [rbp - 8]        #	    |p|anel_recover(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x14f2b:	mov rdi, rax                        
0x14f2e:	mov eax, 0                          
0x14f33:	call 0x116a7                        
0x14f38:	mov rax, qword ptr [rbp - 8]        #	    |p|anel_update(this);
MEMORY OFFSET:     -0x8     -8  >>0

0x14f3c:	mov rdi, rax                        
0x14f3f:	call 0x14e6a                        
0x14f44:	nop                                 #|}|
0x14f45:	leave                               
0x14f46:	ret                                 
0x14f47:	endbr64                             #|{|
0x14f4b:	push rbp                            
0x14f4c:	mov rbp, rsp                        
0x14f4f:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x14f53:	mov dword ptr [rbp - 4], 0          #    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x4     -4  >>4

0x14f5a:	jmp 0x14fe5                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x14f5f:	mov rax, qword ptr [rbp - 0x18]     #	if (this|-|>dir_entry[entry].selected == 0 &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x14f63:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14f67:	mov eax, dword ptr [rbp - 4]        #	if (this->dir_entry|[|entry].selected == 0 &&
MEMORY OFFSET:     -0x4     -4  >>4

0x14f6a:	movsxd rdx, eax                     
0x14f6d:	mov rax, rdx                        
0x14f70:	shl rax, 2                          
0x14f74:	add rax, rdx                        
0x14f77:	shl rax, 4                          
0x14f7b:	add rax, rcx                        
0x14f7e:	movzx eax, byte ptr [rax + 0x49]    #	if (this->dir_entry[entry]|.|selected == 0 &&
MEMORY OFFSET:     0x49     73  >>81

0x14f82:	test al, al                         #	if |(|this->dir_entry[entry].selected == 0 &&
0x14f84:	jne 0x14fe1                         
0x14f86:	mov rax, qword ptr [rbp - 0x18]     #	    this|-|>dir_entry[entry].type != DIR_ENTRY)
MEMORY OFFSET:     -0x18     -24  >>-16

0x14f8a:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14f8e:	mov eax, dword ptr [rbp - 4]        #	    this->dir_entry|[|entry].type != DIR_ENTRY)
MEMORY OFFSET:     -0x4     -4  >>4

0x14f91:	movsxd rdx, eax                     
0x14f94:	mov rax, rdx                        
0x14f97:	shl rax, 2                          
0x14f9b:	add rax, rdx                        
0x14f9e:	shl rax, 4                          
0x14fa2:	add rax, rcx                        
0x14fa5:	movzx eax, byte ptr [rax + 0x48]    #	    this->dir_entry[entry]|.|type != DIR_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x14fa9:	test al, al                         #	if (this->dir_entry[entry].selected == 0 |&|&
0x14fab:	je 0x14fe1                          
0x14fad:	mov rax, qword ptr [rbp - 0x18]     #	    this|-|>dir_entry[entry].selected = 1;
MEMORY OFFSET:     -0x18     -24  >>-16

0x14fb1:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x14fb5:	mov eax, dword ptr [rbp - 4]        #	    this->dir_entry|[|entry].selected = 1;
MEMORY OFFSET:     -0x4     -4  >>4

0x14fb8:	movsxd rdx, eax                     
0x14fbb:	mov rax, rdx                        
0x14fbe:	shl rax, 2                          
0x14fc2:	add rax, rdx                        
0x14fc5:	shl rax, 4                          
0x14fc9:	add rax, rcx                        
0x14fcc:	mov byte ptr [rax + 0x49], 1        #	    this->dir_entry[entry].selected |=| 1;
MEMORY OFFSET:     0x49     73  >>81

0x14fd0:	mov rax, qword ptr [rbp - 0x18]     #	    this|-|>selected_entries++;
MEMORY OFFSET:     -0x18     -24  >>-16

0x14fd4:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x14fd7:	lea edx, [rax + 1]                  #	    this->selected_entries|+|+;
MEMORY OFFSET:     0x1     1  >>9

0x14fda:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x14fde:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x14fe1:	add dword ptr [rbp - 4], 1          #    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x4     -4  >>4

0x14fe5:	mov rax, qword ptr [rbp - 0x18]     #    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x14fe9:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x14fec:	cmp dword ptr [rbp - 4], eax        #    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x4     -4  >>4

0x14fef:	jl 0x14f5f                          
0x14ff5:	nop                                 #|}|
0x14ff6:	nop                                 
0x14ff7:	pop rbp                             
0x14ff8:	ret                                 
0x14ff9:	endbr64                             #|{|
0x14ffd:	push rbp                            
0x14ffe:	mov rbp, rsp                        
0x15001:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x15005:	mov dword ptr [rbp - 4], 0          #    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x4     -4  >>4

0x1500c:	jmp 0x15035                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x1500e:	mov rax, qword ptr [rbp - 0x18]     #	this|-|>dir_entry[entry].selected = 0;
MEMORY OFFSET:     -0x18     -24  >>-16

0x15012:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x15016:	mov eax, dword ptr [rbp - 4]        #	this->dir_entry|[|entry].selected = 0;
MEMORY OFFSET:     -0x4     -4  >>4

0x15019:	movsxd rdx, eax                     
0x1501c:	mov rax, rdx                        
0x1501f:	shl rax, 2                          
0x15023:	add rax, rdx                        
0x15026:	shl rax, 4                          
0x1502a:	add rax, rcx                        
0x1502d:	mov byte ptr [rax + 0x49], 0        #	this->dir_entry[entry].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x15031:	add dword ptr [rbp - 4], 1          #    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x4     -4  >>4

0x15035:	mov rax, qword ptr [rbp - 0x18]     #    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x15039:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1503c:	cmp dword ptr [rbp - 4], eax        #    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x4     -4  >>4

0x1503f:	jl 0x1500e                          
0x15041:	mov rax, qword ptr [rbp - 0x18]     #    this->selected_entries |=| 0;
MEMORY OFFSET:     -0x18     -24  >>-16

0x15045:	mov dword ptr [rax + 0x70], 0       
MEMORY OFFSET:     0x70     112  >>120

0x1504c:	nop                                 #|}|
0x1504d:	pop rbp                             
0x1504e:	ret                                 
0x1504f:	endbr64                             #|{|
0x15053:	push rbp                            
0x15054:	mov rbp, rsp                        
0x15057:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1505b:	mov rax, qword ptr [rbp - 8]        #    return this|-|>path;
MEMORY OFFSET:     -0x8     -8  >>0

0x1505f:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x15063:	pop rbp                             #|}|
0x15064:	ret                                 
0x15065:	endbr64                             #|{|
0x15069:	push rbp                            
0x1506a:	mov rbp, rsp                        
0x1506d:	sub rsp, 0x10                       
0x15071:	mov eax, dword ptr [rip + 0x1ca49]  #    if (|u|ser_heart_attack)
MEMORY OFFSET:     0x1ca49     117321  >>117329

0x15077:	test eax, eax                       #    if |(|user_heart_attack)
0x15079:	je 0x150ff                          
0x1507f:	mov dword ptr [rip + 0x1ca37], 0    #	user_heart_attack |=| 0;
MEMORY OFFSET:     0x1ca37     117303  >>117311

0x15089:	mov eax, 0                          #	saved_il = |i|l_save();
0x1508e:	call 0xe205                         
0x15093:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x15097:	mov edx, 4                          #	key = |p|anel_1s_message("Abort current operation? ", "yn",
0x1509c:	lea rax, [rip + 0x135a3]            
MEMORY OFFSET:     0x135a3     79267  >>79275

0x150a3:	mov rsi, rax                        
0x150a6:	lea rax, [rip + 0x1359c]            
MEMORY OFFSET:     0x1359c     79260  >>79268

0x150ad:	mov rdi, rax                        
0x150b0:	call 0x5c09                         
0x150b5:	movsx eax, al                       #	key |=| panel_1s_message("Abort current operation? ", "yn",
0x150b8:	mov dword ptr [rbp - 0xc], eax      
MEMORY OFFSET:     -0xc     -12  >>-4

0x150bb:	mov rax, qword ptr [rbp - 8]        #	|i|l_restore(saved_il);
MEMORY OFFSET:     -0x8     -8  >>0

0x150bf:	mov rdi, rax                        
0x150c2:	call 0xe319                         
0x150c7:	mov eax, 0                          #	|i|l_update();
0x150cc:	call 0xf8eb                         
0x150d1:	mov eax, 0                          #	|i|l_update_point();
0x150d6:	call 0xf768                         
0x150db:	mov eax, 0                          #	|t|ty_update();
0x150e0:	call 0xb4b7                         
0x150e5:	cmp dword ptr [rbp - 0xc], 0x6e     #	return (key == 'n' || key == 'N') ? 0 |:| 1;
MEMORY OFFSET:     -0xc     -12  >>-4

0x150e9:	je 0x150f8                          
0x150eb:	cmp dword ptr [rbp - 0xc], 0x4e     #	return (key == 'n' || key == 'N') ? 0 |:| 1;
MEMORY OFFSET:     -0xc     -12  >>-4

0x150ef:	je 0x150f8                          
0x150f1:	mov eax, 1                          #	return (key == 'n' || key == 'N') ? 0 |:| 1;
0x150f6:	jmp 0x15104                         
0x150f8:	mov eax, 0                          #	return (key == 'n' || key == 'N') ? 0 |:| 1;
0x150fd:	jmp 0x15104                         
0x150ff:	mov eax, 0                          #    return |0|;
0x15104:	leave                               #|}|
0x15105:	ret                                 
0x15106:	endbr64                             #|{|
0x1510a:	push rbp                            
0x1510b:	mov rbp, rsp                        
0x1510e:	sub rsp, 0x140                      
0x15115:	mov qword ptr [rbp - 0x138], rdi    
MEMORY OFFSET:     -0x138     -312  >>-304

0x1511c:	mov qword ptr [rbp - 0x140], rsi    
MEMORY OFFSET:     -0x140     -320  >>-312

0x15123:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1512c:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x15130:	xor eax, eax                        
0x15132:	lea rdx, [rbp - 0x130]              #    if (|x|stat(file1, &s1) == 0 &&
MEMORY OFFSET:     -0x130     -304  >>-296

0x15139:	mov rax, qword ptr [rbp - 0x138]    
MEMORY OFFSET:     -0x138     -312  >>-304

0x15140:	mov rsi, rdx                        
0x15143:	mov rdi, rax                        
0x15146:	call 0x1f0e4                        
0x1514b:	test eax, eax                       #    if |(|xstat(file1, &s1) == 0 &&
0x1514d:	jne 0x15199                         
0x1514f:	lea rdx, [rbp - 0xa0]               #	|x|stat(file2, &s2) == 0 &&
MEMORY OFFSET:     -0xa0     -160  >>-152

0x15156:	mov rax, qword ptr [rbp - 0x140]    
MEMORY OFFSET:     -0x140     -320  >>-312

0x1515d:	mov rsi, rdx                        
0x15160:	mov rdi, rax                        
0x15163:	call 0x1f0e4                        
0x15168:	test eax, eax                       #    if (xstat(file1, &s1) == 0 |&|&
0x1516a:	jne 0x15199                         
0x1516c:	mov rdx, qword ptr [rbp - 0x130]    #	s1|.|st_dev == s2.st_dev &&
MEMORY OFFSET:     -0x130     -304  >>-296

0x15173:	mov rax, qword ptr [rbp - 0xa0]     #	s1.st_dev == s2|.|st_dev &&
MEMORY OFFSET:     -0xa0     -160  >>-152

0x1517a:	cmp rdx, rax                        #	xstat(file2, &s2) == 0 |&|&
0x1517d:	jne 0x15199                         
0x1517f:	mov rdx, qword ptr [rbp - 0x128]    #	s1|.|st_ino == s2.st_ino)
MEMORY OFFSET:     -0x128     -296  >>-288

0x15186:	mov rax, qword ptr [rbp - 0x98]     #	s1.st_ino == s2|.|st_ino)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1518d:	cmp rdx, rax                        #	s1.st_dev == s2.st_dev |&|&
0x15190:	jne 0x15199                         
0x15192:	mov eax, 1                          #	return |1|;
0x15197:	jmp 0x1519e                         
0x15199:	mov eax, 0                          #    return |0|;
0x1519e:	mov rdx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x151a2:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x151ab:	je 0x151b2                          
0x151ad:	call 0x4980                         #|}|
0x151b2:	leave                               
0x151b3:	ret                                 
0x151b4:	endbr64                             #|{|
0x151b8:	push rbp                            
0x151b9:	mov rbp, rsp                        
0x151bc:	sub rsp, 0x20                       
0x151c0:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x151c4:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x151c8:	mov rax, qword ptr [rbp - 0x18]     #    if (this|-|>selected_entries)
MEMORY OFFSET:     -0x18     -24  >>-16

0x151cc:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x151cf:	test eax, eax                       #    if |(|this->selected_entries)
0x151d1:	je 0x151ff                          
0x151d3:	mov rax, qword ptr [rbp - 0x20]     #	c = |p|anel_2s_message("%s: File exists. Overwrite/Skip/All/Cancel? ",
MEMORY OFFSET:     -0x20     -32  >>-24

0x151d7:	mov ecx, 0x1e                       
0x151dc:	lea rdx, [rip + 0x13480]            
MEMORY OFFSET:     0x13480     78976  >>78984

0x151e3:	mov rsi, rax                        
0x151e6:	lea rax, [rip + 0x1347b]            
MEMORY OFFSET:     0x1347b     78971  >>78979

0x151ed:	mov rdi, rax                        
0x151f0:	mov eax, 0                          
0x151f5:	call 0x11568                        
0x151fa:	mov byte ptr [rbp - 1], al          
MEMORY OFFSET:     -0x1     -1  >>7

0x151fd:	jmp 0x15229                         
0x151ff:	mov rax, qword ptr [rbp - 0x20]     #	c = |p|anel_2s_message("%s: File exists. Overwrite/Cancel? ",
MEMORY OFFSET:     -0x20     -32  >>-24

0x15203:	mov ecx, 0x1e                       
0x15208:	lea rdx, [rip + 0x13486]            
MEMORY OFFSET:     0x13486     78982  >>78990

0x1520f:	mov rsi, rax                        
0x15212:	lea rax, [rip + 0x1347f]            
MEMORY OFFSET:     0x1347f     78975  >>78983

0x15219:	mov rdi, rax                        
0x1521c:	mov eax, 0                          
0x15221:	call 0x11568                        
0x15226:	mov byte ptr [rbp - 1], al          
MEMORY OFFSET:     -0x1     -1  >>7

0x15229:	movsx eax, byte ptr [rbp - 1]       #    |s|witch (c)
MEMORY OFFSET:     -0x1     -1  >>7

0x1522d:	cmp eax, 0x73                       
0x15230:	je 0x15268                          
0x15232:	cmp eax, 0x73                       
0x15235:	jg 0x1527a                          
0x15237:	cmp eax, 0x61                       
0x1523a:	je 0x15248                          
0x1523c:	cmp eax, 0x6f                       
0x1523f:	jne 0x1527a                         
0x15241:	mov eax, 0                          #	    return |W|ARN_OVERWRITE;
0x15246:	jmp 0x15283                         
0x15248:	mov rax, qword ptr [rbp - 0x18]     #	    if (this|-|>selected_entries)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1524c:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1524f:	test eax, eax                       #	    if |(|this->selected_entries)
0x15251:	je 0x1527d                          
0x15253:	mov rax, qword ptr [rbp - 0x18]     #		this->chkdest |=| OFF;
MEMORY OFFSET:     -0x18     -24  >>-16

0x15257:	mov dword ptr [rax + 0x90], 0       
MEMORY OFFSET:     0x90     144  >>152

0x15261:	mov eax, 0                          #		return |W|ARN_OVERWRITE;
0x15266:	jmp 0x15283                         
0x15268:	mov rax, qword ptr [rbp - 0x18]     #	    if (this|-|>selected_entries)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1526c:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1526f:	test eax, eax                       #	    if |(|this->selected_entries)
0x15271:	je 0x1527a                          
0x15273:	mov eax, 3                          #		return |W|ARN_SKIP;
0x15278:	jmp 0x15283                         
0x1527a:	nop                                 #	    |b|reak;
0x1527b:	jmp 0x1527e                         
0x1527d:	nop                                 #	    |b|reak;
0x1527e:	mov eax, 2                          #    return |W|ARN_CANCEL;
0x15283:	leave                               #|}|
0x15284:	ret                                 
0x15285:	endbr64                             #|{|
0x15289:	push rbp                            
0x1528a:	mov rbp, rsp                        
0x1528d:	sub rsp, 0xb0                       
0x15294:	mov qword ptr [rbp - 0xa8], rdi     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1529b:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x152a4:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x152a8:	xor eax, eax                        
0x152aa:	lea rdx, [rbp - 0xa0]               #    if (|x|stat(name, &statbuf) == 0 && S_ISREG(statbuf.st_mode))
MEMORY OFFSET:     -0xa0     -160  >>-152

0x152b1:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x152b8:	mov rsi, rdx                        
0x152bb:	mov rdi, rax                        
0x152be:	call 0x1f0e4                        
0x152c3:	test eax, eax                       #    if |(|xstat(name, &statbuf) == 0 && S_ISREG(statbuf.st_mode))
0x152c5:	jne 0x152e8                         
0x152c7:	mov eax, dword ptr [rbp - 0x88]     #    if (xstat(name, &statbuf) == 0 && |S|_ISREG(statbuf.st_mode))
MEMORY OFFSET:     -0x88     -136  >>-128

0x152cd:	and eax, 0xf000                     
0x152d2:	cmp eax, 0x8000                     #    if (xstat(name, &statbuf) == 0 |&|& S_ISREG(statbuf.st_mode))
0x152d7:	jne 0x152e8                         
0x152d9:	mov rax, qword ptr [rbp - 0xa8]     #	|u|nlink(name);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x152e0:	mov rdi, rax                        
0x152e3:	call 0x4830                         
0x152e8:	nop                                 #|}|
0x152e9:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x152ed:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x152f6:	je 0x152fd                          
0x152f8:	call 0x4980                         
0x152fd:	leave                               
0x152fe:	ret                                 
0x152ff:	endbr64                             #|{|
0x15303:	push rbp                            
0x15304:	mov rbp, rsp                        
0x15307:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1530b:	mov qword ptr [rbp - 0x10], rsi     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1530f:	cmp qword ptr [rbp - 0x10], 0       #    if |(|total == 0)
MEMORY OFFSET:     -0x10     -16  >>-8

0x15314:	jne 0x1531d                         
0x15316:	mov eax, 0                          #	return |0|;
0x1531b:	jmp 0x1537b                         
0x1531d:	cmp qword ptr [rbp - 0x10], 0x1869f #    return (total >= 100000) ? (x / (total / 100)) |:| ((x * 100) / total);
MEMORY OFFSET:     -0x10     -16  >>-8

0x15325:	jle 0x15358                         
0x15327:	mov rcx, qword ptr [rbp - 0x10]     #    return (total >= 100000) ? (x / (total |/| 100)) : ((x * 100) / total);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1532b:	movabs rdx, 0xa3d70a3d70a3d70b      
0x15335:	mov rax, rcx                        
0x15338:	imul rdx                            
0x1533b:	lea rax, [rdx + rcx]                
0x1533f:	sar rax, 6                          
0x15343:	sar rcx, 0x3f                       
0x15347:	sub rax, rcx                        
0x1534a:	mov rsi, rax                        
0x1534d:	mov rax, qword ptr [rbp - 8]        #    return (total >= 100000) ? (x |/| (total / 100)) : ((x * 100) / total);
MEMORY OFFSET:     -0x8     -8  >>0

0x15351:	cqo                                 
0x15353:	idiv rsi                            
0x15356:	jmp 0x1537b                         #    return (total >= 100000) ? (x / (total / 100)) |:| ((x * 100) / total);
0x15358:	mov rdx, qword ptr [rbp - 8]        #    return (total >= 100000) ? (x / (total / 100)) : ((x |*| 100) / total);
MEMORY OFFSET:     -0x8     -8  >>0

0x1535c:	mov rax, rdx                        
0x1535f:	shl rax, 2                          
0x15363:	add rax, rdx                        
0x15366:	lea rdx, [rax*4]                    
0x1536e:	add rax, rdx                        
0x15371:	shl rax, 2                          
0x15375:	cqo                                 #    return (total >= 100000) ? (x / (total / 100)) : ((x * 100) |/| total);
0x15377:	idiv qword ptr [rbp - 0x10]         
MEMORY OFFSET:     -0x10     -16  >>-8

0x1537b:	pop rbp                             #|}|
0x1537c:	ret                                 
0x1537d:	endbr64                             #|{|
0x15381:	push rbp                            
0x15382:	mov rbp, rsp                        
0x15385:	push rbx                            
0x15386:	sub rsp, 0x138                      
0x1538d:	mov qword ptr [rbp - 0x118], rdi    
MEMORY OFFSET:     -0x118     -280  >>-272

0x15394:	mov qword ptr [rbp - 0x120], rsi    
MEMORY OFFSET:     -0x120     -288  >>-280

0x1539b:	mov qword ptr [rbp - 0x128], rdx    
MEMORY OFFSET:     -0x128     -296  >>-288

0x153a2:	mov dword ptr [rbp - 0x12c], ecx    
MEMORY OFFSET:     -0x12c     -300  >>-292

0x153a8:	mov dword ptr [rbp - 0x130], r8d    
MEMORY OFFSET:     -0x130     -304  >>-296

0x153af:	mov dword ptr [rbp - 0x134], r9d    
MEMORY OFFSET:     -0x134     -308  >>-300

0x153b6:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x153bf:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x153c3:	xor eax, eax                        
0x153c5:	mov eax, dword ptr [rbp - 0x12c]    #    if (|S|_ISLNK(mode))
MEMORY OFFSET:     -0x12c     -300  >>-292

0x153cb:	and eax, 0xf000                     
0x153d0:	cmp eax, 0xa000                     #    if |(|S_ISLNK(mode))
0x153d5:	jne 0x15401                         
0x153d7:	lea rdx, [rbp - 0xb0]               #	if(|x|stat(src,&s_tmp) != -1)
MEMORY OFFSET:     -0xb0     -176  >>-168

0x153de:	mov rax, qword ptr [rbp - 0x120]    
MEMORY OFFSET:     -0x120     -288  >>-280

0x153e5:	mov rsi, rdx                        
0x153e8:	mov rdi, rax                        
0x153eb:	call 0x1f0e4                        
0x153f0:	cmp eax, -1                         #	if|(|xstat(src,&s_tmp) != -1)
0x153f3:	je 0x15401                          
0x153f5:	mov eax, dword ptr [rbp - 0x98]     #	    mode|=|s_tmp.st_mode;
MEMORY OFFSET:     -0x98     -152  >>-144

0x153fb:	mov dword ptr [rbp - 0x12c], eax    
MEMORY OFFSET:     -0x12c     -300  >>-292

0x15401:	mov eax, dword ptr [rbp - 0x12c]    #    if (|S|_ISDIR(mode))
MEMORY OFFSET:     -0x12c     -300  >>-292

0x15407:	and eax, 0xf000                     
0x1540c:	cmp eax, 0x4000                     #    if |(|S_ISDIR(mode))
0x15411:	jne 0x156ff                         
0x15417:	lea rdx, [rbp - 0xb0]               #	if (|x|stat(dest, &dest_statbuf) == 0)
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1541e:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15425:	mov rsi, rdx                        
0x15428:	mov rdi, rax                        
0x1542b:	call 0x1f0e4                        
0x15430:	test eax, eax                       #	if |(|xstat(dest, &dest_statbuf) == 0)
0x15432:	jne 0x15547                         
0x15438:	mov eax, dword ptr [rbp - 0x98]     #	    if (!|S|_ISDIR(dest_statbuf.st_mode))
MEMORY OFFSET:     -0x98     -152  >>-144

0x1543e:	and eax, 0xf000                     
0x15443:	cmp eax, 0x4000                     #	    if |(|!S_ISDIR(dest_statbuf.st_mode))
0x15448:	je 0x15454                          
0x1544a:	mov eax, 0xb                        #		return |S|D_INVAL;
0x1544f:	jmp 0x15f50                         
0x15454:	mov rax, qword ptr [rbp - 0x128]    #	    temp = xmalloc(|s|trlen(dest) + 1 + strlen(src) + 1);
MEMORY OFFSET:     -0x128     -296  >>-288

0x1545b:	mov rdi, rax                        
0x1545e:	call 0x4960                         
0x15463:	mov rbx, rax                        
0x15466:	mov rax, qword ptr [rbp - 0x120]    #	    temp = xmalloc(strlen(dest) + 1 + |s|trlen(src) + 1);
MEMORY OFFSET:     -0x120     -288  >>-280

0x1546d:	mov rdi, rax                        
0x15470:	call 0x4960                         
0x15475:	add rax, rbx                        #	    temp = xmalloc(strlen(dest) + 1 |+| strlen(src) + 1);
0x15478:	add rax, 2                          #	    temp = |x|malloc(strlen(dest) + 1 + strlen(src) + 1);
0x1547c:	mov rdi, rax                        
0x1547f:	call 0x24650                        
0x15484:	mov qword ptr [rbp - 0xb8], rax     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1548b:	mov rcx, qword ptr [rbp - 0x120]    #	    |s|printf(temp, "%s/%s", dest, src);
MEMORY OFFSET:     -0x120     -288  >>-280

0x15492:	mov rdx, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15499:	mov rax, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x154a0:	lea rsi, [rip + 0x13328]            
MEMORY OFFSET:     0x13328     78632  >>78640

0x154a7:	mov rdi, rax                        
0x154aa:	mov eax, 0                          
0x154af:	call 0x4dd0                         
0x154b4:	mov rax, qword ptr [rbp - 0x118]    #	    if (this|-|>chkdest && access(temp, 0) == 0)
MEMORY OFFSET:     -0x118     -280  >>-272

0x154bb:	mov eax, dword ptr [rax + 0x90]     
MEMORY OFFSET:     0x90     144  >>152

0x154c1:	test eax, eax                       #	    if |(|this->chkdest && access(temp, 0) == 0)
0x154c3:	je 0x15538                          
0x154c5:	mov rax, qword ptr [rbp - 0xb8]     #	    if (this->chkdest && |a|ccess(temp, 0) == 0)
MEMORY OFFSET:     -0xb8     -184  >>-176

0x154cc:	mov esi, 0                          
0x154d1:	mov rdi, rax                        
0x154d4:	call 0x4d40                         
0x154d9:	test eax, eax                       #	    if (this->chkdest |&|& access(temp, 0) == 0)
0x154db:	jne 0x15538                         
0x154dd:	mov eax, 0                          #		|s|tatus_default();
0x154e2:	call 0x10857                        
0x154e7:	mov rdx, qword ptr [rbp - 0xb8]     #		error = |p|anel_warning(this, temp);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x154ee:	mov rax, qword ptr [rbp - 0x118]    
MEMORY OFFSET:     -0x118     -280  >>-272

0x154f5:	mov rsi, rdx                        
0x154f8:	mov rdi, rax                        
0x154fb:	mov eax, 0                          
0x15500:	call 0x151b4                        
0x15505:	mov dword ptr [rbp - 0x108], eax    
MEMORY OFFSET:     -0x108     -264  >>-256

0x1550b:	mov eax, 0                          #		|t|ty_update();
0x15510:	call 0xb4b7                         
0x15515:	mov rax, qword ptr [rbp - 0xb8]     #		|x|free(temp);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1551c:	mov rdi, rax                        
0x1551f:	call 0x1eeae                        
0x15524:	cmp dword ptr [rbp - 0x108], 0      #		if |(|error)
MEMORY OFFSET:     -0x108     -264  >>-256

0x1552b:	je 0x15547                          
0x1552d:	mov eax, dword ptr [rbp - 0x108]    #		    return |e|rror;
MEMORY OFFSET:     -0x108     -264  >>-256

0x15533:	jmp 0x15f50                         
0x15538:	mov rax, qword ptr [rbp - 0xb8]     #		|x|free(temp);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1553f:	mov rdi, rax                        
0x15542:	call 0x1eeae                        
0x15547:	mov rax, qword ptr [rbp - 0x120]    #	temp = xmalloc(32 + |s|trlen(src) + strlen(dest) + 1);
MEMORY OFFSET:     -0x120     -288  >>-280

0x1554e:	mov rdi, rax                        
0x15551:	call 0x4960                         
0x15556:	mov rbx, rax                        
0x15559:	mov rax, qword ptr [rbp - 0x128]    #	temp = xmalloc(32 + strlen(src) + |s|trlen(dest) + 1);
MEMORY OFFSET:     -0x128     -296  >>-288

0x15560:	mov rdi, rax                        
0x15563:	call 0x4960                         
0x15568:	add rax, rbx                        #	temp = xmalloc(32 + strlen(src) |+| strlen(dest) + 1);
0x1556b:	add rax, 0x21                       #	temp = |x|malloc(32 + strlen(src) + strlen(dest) + 1);
0x1556f:	mov rdi, rax                        
0x15572:	call 0x24650                        
0x15577:	mov qword ptr [rbp - 0xb8], rax     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1557e:	mov rax, qword ptr [rbp - 0x128]    #	dest_file = |x|basename(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x15585:	mov rdi, rax                        
0x15588:	call 0x1f298                        
0x1558d:	mov qword ptr [rbp - 0xd0], rax     
MEMORY OFFSET:     -0xd0     -208  >>-200

0x15594:	mov rax, qword ptr [rbp - 0xd0]     #	if (|*|dest_file == '\0')
MEMORY OFFSET:     -0xd0     -208  >>-200

0x1559b:	movzx eax, byte ptr [rax]           
0x1559e:	test al, al                         #	if |(|*dest_file == '\0')
0x155a0:	jne 0x155ac                         
0x155a2:	mov eax, 6                          #	    return |D|_CREATERR;
0x155a7:	jmp 0x15f50                         
0x155ac:	mov rax, qword ptr [rbp - 0x120]    #	msg = xmalloc(32 + |s|trlen(src) + strlen(dest));
MEMORY OFFSET:     -0x120     -288  >>-280

0x155b3:	mov rdi, rax                        
0x155b6:	call 0x4960                         
0x155bb:	mov rbx, rax                        
0x155be:	mov rax, qword ptr [rbp - 0x128]    #	msg = xmalloc(32 + strlen(src) + |s|trlen(dest));
MEMORY OFFSET:     -0x128     -296  >>-288

0x155c5:	mov rdi, rax                        
0x155c8:	call 0x4960                         
0x155cd:	add rax, rbx                        #	msg = xmalloc(32 + strlen(src) |+| strlen(dest));
0x155d0:	add rax, 0x20                       #	msg = |x|malloc(32 + strlen(src) + strlen(dest));
0x155d4:	mov rdi, rax                        
0x155d7:	call 0x24650                        
0x155dc:	mov qword ptr [rbp - 0xc8], rax     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x155e3:	mov rcx, qword ptr [rbp - 0x128]    #	|s|printf(msg, "(COPY) cp -r \"%s\" \"%s\"", src, dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x155ea:	mov rdx, qword ptr [rbp - 0x120]    
MEMORY OFFSET:     -0x120     -288  >>-280

0x155f1:	mov rax, qword ptr [rbp - 0xc8]     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x155f8:	lea rsi, [rip + 0x131d6]            
MEMORY OFFSET:     0x131d6     78294  >>78302

0x155ff:	mov rdi, rax                        
0x15602:	mov eax, 0                          
0x15607:	call 0x4dd0                         
0x1560c:	mov rax, qword ptr [rbp - 0xc8]     #	|s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x15613:	mov edx, 1                          
0x15618:	mov esi, 1                          
0x1561d:	mov rdi, rax                        
0x15620:	call 0x107d0                        
0x15625:	mov eax, 0                          #	|t|ty_update();
0x1562a:	call 0xb4b7                         
0x1562f:	mov rax, qword ptr [rbp - 0xc8]     #	|x|free(msg);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x15636:	mov rdi, rax                        
0x15639:	call 0x1eeae                        
0x1563e:	mov rcx, qword ptr [rbp - 0x128]    #	|s|printf(temp, "cp -r \"%s\" \"%s\"", src, dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x15645:	mov rdx, qword ptr [rbp - 0x120]    
MEMORY OFFSET:     -0x120     -288  >>-280

0x1564c:	mov rax, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x15653:	lea rsi, [rip + 0x13192]            
MEMORY OFFSET:     0x13192     78226  >>78234

0x1565a:	mov rdi, rax                        
0x1565d:	mov eax, 0                          
0x15662:	call 0x4dd0                         
0x15667:	mov rax, qword ptr [rbp - 0xb8]     #	result = |s|tart(temp, 1);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1566e:	mov esi, 1                          
0x15673:	mov rdi, rax                        
0x15676:	call 0x1f6f0                        
0x1567b:	mov dword ptr [rbp - 0xf4], eax     
MEMORY OFFSET:     -0xf4     -244  >>-236

0x15681:	mov rax, qword ptr [rbp - 0xb8]     #	|x|free(temp);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x15688:	mov rdi, rax                        
0x1568b:	call 0x1eeae                        
0x15690:	mov rax, qword ptr [rbp - 0x118]    #	|t|ty_update_title(this->path);
MEMORY OFFSET:     -0x118     -280  >>-272

0x15697:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1569b:	mov rdi, rax                        
0x1569e:	call 0xd875                         
0x156a3:	mov eax, dword ptr [rbp - 0xf4]     #	if (|W|IFSIGNALED(result))
MEMORY OFFSET:     -0xf4     -244  >>-236

0x156a9:	and eax, 0x7f                       
0x156ac:	add eax, 1                          
0x156af:	sar al, 1                           
0x156b1:	test al, al                         #	if |(|WIFSIGNALED(result))
0x156b3:	jle 0x156bf                         
0x156b5:	mov eax, 0xc                        #	    return |S|D_INTERRUPTED;
0x156ba:	jmp 0x15f50                         
0x156bf:	mov eax, dword ptr [rbp - 0xf4]     #	if(|W|IFEXITED(result) && (WEXITSTATUS(result) != 0))
MEMORY OFFSET:     -0xf4     -244  >>-236

0x156c5:	and eax, 0x7f                       
0x156c8:	test eax, eax                       #	if|(|WIFEXITED(result) && (WEXITSTATUS(result) != 0))
0x156ca:	jne 0x156f5                         
0x156cc:	mov eax, dword ptr [rbp - 0xf4]     #	if(WIFEXITED(result) && (|W|EXITSTATUS(result) != 0))
MEMORY OFFSET:     -0xf4     -244  >>-236

0x156d2:	sar eax, 8                          
0x156d5:	movzx eax, al                       
0x156d8:	test eax, eax                       #	if(WIFEXITED(result) |&|& (WEXITSTATUS(result) != 0))
0x156da:	je 0x156f5                          
0x156dc:	lea rax, [rip + 0x13119]            #	    |d|isplay_errors("cp");
MEMORY OFFSET:     0x13119     78105  >>78113

0x156e3:	mov rdi, rax                        
0x156e6:	call 0x1f808                        
0x156eb:	mov eax, 9                          #	    return |S|D_UNKNOWN;
0x156f0:	jmp 0x15f50                         
0x156f5:	mov eax, 1                          #	return |S|D_OK;
0x156fa:	jmp 0x15f50                         
0x156ff:	mov rax, qword ptr [rbp - 0x128]    #    len = |s|trlen(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x15706:	mov rdi, rax                        
0x15709:	call 0x4960                         
0x1570e:	mov qword ptr [rbp - 0xd8], rax     
MEMORY OFFSET:     -0xd8     -216  >>-208

0x15715:	mov rax, qword ptr [rbp - 0x128]    #    dest = |x|strdup(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x1571c:	mov rdi, rax                        
0x1571f:	call 0x24780                        
0x15724:	mov qword ptr [rbp - 0x128], rax    
MEMORY OFFSET:     -0x128     -296  >>-288

0x1572b:	lea rdx, [rbp - 0xb0]               #    if (|x|stat(dest, &dest_statbuf) == 0 && S_ISDIR(dest_statbuf.st_mode))
MEMORY OFFSET:     -0xb0     -176  >>-168

0x15732:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15739:	mov rsi, rdx                        
0x1573c:	mov rdi, rax                        
0x1573f:	call 0x1f0e4                        
0x15744:	test eax, eax                       #    if |(|xstat(dest, &dest_statbuf) == 0 && S_ISDIR(dest_statbuf.st_mode))
0x15746:	jne 0x157ce                         
0x1574c:	mov eax, dword ptr [rbp - 0x98]     #    if (xstat(dest, &dest_statbuf) == 0 && |S|_ISDIR(dest_statbuf.st_mode))
MEMORY OFFSET:     -0x98     -152  >>-144

0x15752:	and eax, 0xf000                     
0x15757:	cmp eax, 0x4000                     #    if (xstat(dest, &dest_statbuf) == 0 |&|& S_ISDIR(dest_statbuf.st_mode))
0x1575c:	jne 0x157ce                         
0x1575e:	mov rax, qword ptr [rbp - 0x120]    #	dest = xrealloc(dest, len + 1 + |s|trlen(src) + 1);
MEMORY OFFSET:     -0x120     -288  >>-280

0x15765:	mov rdi, rax                        
0x15768:	call 0x4960                         
0x1576d:	mov rdx, qword ptr [rbp - 0xd8]     #	dest = xrealloc(dest, len + 1 |+| strlen(src) + 1);
MEMORY OFFSET:     -0xd8     -216  >>-208

0x15774:	add rax, rdx                        
0x15777:	lea rdx, [rax + 2]                  #	dest = |x|realloc(dest, len + 1 + strlen(src) + 1);
MEMORY OFFSET:     0x2     2  >>10

0x1577b:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15782:	mov rsi, rdx                        
0x15785:	mov rdi, rax                        
0x15788:	call 0x24670                        
0x1578d:	mov qword ptr [rbp - 0x128], rax    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15794:	mov rax, qword ptr [rbp - 0x128]    #	|s|trcat(dest, "/");
MEMORY OFFSET:     -0x128     -296  >>-288

0x1579b:	mov rdi, rax                        
0x1579e:	call 0x4960                         
0x157a3:	mov rdx, rax                        
0x157a6:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x157ad:	add rax, rdx                        
0x157b0:	mov word ptr [rax], 0x2f            
0x157b5:	mov rdx, qword ptr [rbp - 0x120]    #	|s|trcat(dest, src);
MEMORY OFFSET:     -0x120     -288  >>-280

0x157bc:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x157c3:	mov rsi, rdx                        
0x157c6:	mov rdi, rax                        
0x157c9:	call 0x4db0                         
0x157ce:	mov rax, qword ptr [rbp - 0x128]    #    dest_file = |x|basename(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x157d5:	mov rdi, rax                        
0x157d8:	call 0x1f298                        
0x157dd:	mov qword ptr [rbp - 0xd0], rax     
MEMORY OFFSET:     -0xd0     -208  >>-200

0x157e4:	mov rax, qword ptr [rbp - 0xd0]     #    if (|*|dest_file == '\0')
MEMORY OFFSET:     -0xd0     -208  >>-200

0x157eb:	movzx eax, byte ptr [rax]           
0x157ee:	test al, al                         #    if |(|*dest_file == '\0')
0x157f0:	jne 0x1580b                         
0x157f2:	mov rax, qword ptr [rbp - 0x128]    #	|x|free(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x157f9:	mov rdi, rax                        
0x157fc:	call 0x1eeae                        
0x15801:	mov eax, 6                          #	return |D|_CREATERR;
0x15806:	jmp 0x15f50                         
0x1580b:	mov rax, qword ptr [rbp - 0x118]    #    if (this|-|>chkdest && (access(dest, 0) == 0))
MEMORY OFFSET:     -0x118     -280  >>-272

0x15812:	mov eax, dword ptr [rax + 0x90]     
MEMORY OFFSET:     0x90     144  >>152

0x15818:	test eax, eax                       #    if |(|this->chkdest && (access(dest, 0) == 0))
0x1581a:	je 0x15880                          
0x1581c:	mov rax, qword ptr [rbp - 0x128]    #    if (this->chkdest && (|a|ccess(dest, 0) == 0))
MEMORY OFFSET:     -0x128     -296  >>-288

0x15823:	mov esi, 0                          
0x15828:	mov rdi, rax                        
0x1582b:	call 0x4d40                         
0x15830:	test eax, eax                       #    if (this->chkdest |&|& (access(dest, 0) == 0))
0x15832:	jne 0x15880                         
0x15834:	mov eax, 0                          #	|s|tatus_default();
0x15839:	call 0x10857                        
0x1583e:	mov rdx, qword ptr [rbp - 0xd0]     #	error = |p|anel_warning(this, dest_file);
MEMORY OFFSET:     -0xd0     -208  >>-200

0x15845:	mov rax, qword ptr [rbp - 0x118]    
MEMORY OFFSET:     -0x118     -280  >>-272

0x1584c:	mov rsi, rdx                        
0x1584f:	mov rdi, rax                        
0x15852:	mov eax, 0                          
0x15857:	call 0x151b4                        
0x1585c:	mov dword ptr [rbp - 0x108], eax    
MEMORY OFFSET:     -0x108     -264  >>-256

0x15862:	mov eax, 0                          #	|t|ty_update();
0x15867:	call 0xb4b7                         
0x1586c:	cmp dword ptr [rbp - 0x108], 0      #	if |(|error)
MEMORY OFFSET:     -0x108     -264  >>-256

0x15873:	je 0x15880                          
0x15875:	mov eax, dword ptr [rbp - 0x108]    #	    return |e|rror;
MEMORY OFFSET:     -0x108     -264  >>-256

0x1587b:	jmp 0x15f50                         
0x15880:	mov rax, qword ptr [rbp - 0x120]    #    msg = xmalloc(32 + |s|trlen(src));
MEMORY OFFSET:     -0x120     -288  >>-280

0x15887:	mov rdi, rax                        
0x1588a:	call 0x4960                         
0x1588f:	add rax, 0x20                       #    msg = |x|malloc(32 + strlen(src));
0x15893:	mov rdi, rax                        
0x15896:	call 0x24650                        
0x1589b:	mov qword ptr [rbp - 0xc8], rax     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x158a2:	mov eax, dword ptr [rbp - 0x12c]    #    if (|S|_ISREG(mode))
MEMORY OFFSET:     -0x12c     -300  >>-292

0x158a8:	and eax, 0xf000                     
0x158ad:	cmp eax, 0x8000                     #    if |(|S_ISREG(mode))
0x158b2:	jne 0x158db                         
0x158b4:	mov rdx, qword ptr [rbp - 0x120]    #	|s|printf(msg, "(COPY) [  0%%] %s", src);
MEMORY OFFSET:     -0x120     -288  >>-280

0x158bb:	mov rax, qword ptr [rbp - 0xc8]     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x158c2:	lea rcx, [rip + 0x12f36]            
MEMORY OFFSET:     0x12f36     77622  >>77630

0x158c9:	mov rsi, rcx                        
0x158cc:	mov rdi, rax                        
0x158cf:	mov eax, 0                          
0x158d4:	call 0x4dd0                         
0x158d9:	jmp 0x15900                         
0x158db:	mov rdx, qword ptr [rbp - 0x120]    #	|s|printf(msg, "(COPY) [0 bytes] %s", src);
MEMORY OFFSET:     -0x120     -288  >>-280

0x158e2:	mov rax, qword ptr [rbp - 0xc8]     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x158e9:	lea rcx, [rip + 0x12f21]            
MEMORY OFFSET:     0x12f21     77601  >>77609

0x158f0:	mov rsi, rcx                        
0x158f3:	mov rdi, rax                        
0x158f6:	mov eax, 0                          
0x158fb:	call 0x4dd0                         
0x15900:	mov rax, qword ptr [rbp - 0xc8]     #    |s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x15907:	mov edx, 1                          
0x1590c:	mov esi, 1                          
0x15911:	mov rdi, rax                        
0x15914:	call 0x107d0                        
0x15919:	mov eax, 0                          #    |t|ty_update();
0x1591e:	call 0xb4b7                         
0x15923:	mov rax, qword ptr [rbp - 0xc8]     #    |x|free(msg);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x1592a:	mov rdi, rax                        
0x1592d:	call 0x1eeae                        
0x15932:	mov rax, qword ptr [rbp - 0x120]    #    if ((sfd = |o|pen64(src, O_RDONLY | O_BINARY)) == -1)
MEMORY OFFSET:     -0x120     -288  >>-280

0x15939:	mov esi, 0                          
0x1593e:	mov rdi, rax                        
0x15941:	mov eax, 0                          
0x15946:	call 0x4ce0                         
0x1594b:	mov dword ptr [rbp - 0x104], eax    
MEMORY OFFSET:     -0x104     -260  >>-252

0x15951:	cmp dword ptr [rbp - 0x104], -1     #    if |(|(sfd = open64(src, O_RDONLY | O_BINARY)) == -1)
MEMORY OFFSET:     -0x104     -260  >>-252

0x15958:	jne 0x15964                         
0x1595a:	mov eax, 4                          #	return |S|_OPENERR;
0x1595f:	jmp 0x15f50                         
0x15964:	mov rax, qword ptr [rbp - 0x118]    #    if (this|-|>msdosfs)
MEMORY OFFSET:     -0x118     -280  >>-272

0x1596b:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x1596e:	test eax, eax                       #    if |(|this->msdosfs)
0x15970:	je 0x15979                          
0x15972:	and dword ptr [rbp - 0x12c], 0xffffffb6#	mode |&|= ~0111;
MEMORY OFFSET:     -0x12c     -300  >>-292

0x15979:	mov edx, dword ptr [rbp - 0x12c]    #    if ((dfd = |c|reat(dest, mode)) == -1)
MEMORY OFFSET:     -0x12c     -300  >>-292

0x1597f:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15986:	mov esi, edx                        
0x15988:	mov rdi, rax                        
0x1598b:	call 0x4dc0                         
0x15990:	mov dword ptr [rbp - 0x100], eax    
MEMORY OFFSET:     -0x100     -256  >>-248

0x15996:	cmp dword ptr [rbp - 0x100], -1     #    if |(|(dfd = creat(dest, mode)) == -1)
MEMORY OFFSET:     -0x100     -256  >>-248

0x1599d:	jne 0x159c5                         
0x1599f:	mov eax, dword ptr [rbp - 0x104]    #	|c|lose(sfd);
MEMORY OFFSET:     -0x104     -260  >>-252

0x159a5:	mov edi, eax                        
0x159a7:	call 0x4a70                         
0x159ac:	mov rax, qword ptr [rbp - 0x128]    #	|x|free(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x159b3:	mov rdi, rax                        
0x159b6:	call 0x1eeae                        
0x159bb:	mov eax, 6                          #	return |D|_CREATERR;
0x159c0:	jmp 0x15f50                         
0x159c5:	mov eax, dword ptr [rbp - 0x104]    #    memsize = |m|in(flen = get_file_length(sfd), COPY_BUFFER_SIZE);
MEMORY OFFSET:     -0x104     -260  >>-252

0x159cb:	mov edi, eax                        
0x159cd:	call 0x1e464                        
0x159d2:	mov qword ptr [rbp - 0xf0], rax     
MEMORY OFFSET:     -0xf0     -240  >>-232

0x159d9:	cmp qword ptr [rbp - 0xf0], 0x8000  
MEMORY OFFSET:     -0xf0     -240  >>-232

0x159e4:	jg 0x15a03                          
0x159e6:	mov eax, dword ptr [rbp - 0x104]    #    memsize = |m|in(flen = get_file_length(sfd), COPY_BUFFER_SIZE);
MEMORY OFFSET:     -0x104     -260  >>-252

0x159ec:	mov edi, eax                        
0x159ee:	call 0x1e464                        
0x159f3:	mov qword ptr [rbp - 0xf0], rax     
MEMORY OFFSET:     -0xf0     -240  >>-232

0x159fa:	mov rax, qword ptr [rbp - 0xf0]     
MEMORY OFFSET:     -0xf0     -240  >>-232

0x15a01:	jmp 0x15a08                         
0x15a03:	mov eax, 0x8000                     #    memsize = |m|in(flen = get_file_length(sfd), COPY_BUFFER_SIZE);
0x15a08:	mov qword ptr [rbp - 0xe0], rax     #    memsize |=| min(flen = get_file_length(sfd), COPY_BUFFER_SIZE);
MEMORY OFFSET:     -0xe0     -224  >>-216

0x15a0f:	mov eax, dword ptr [rbp - 0x12c]    #    if (|S|_ISBLK(mode) || S_ISCHR(mode))
MEMORY OFFSET:     -0x12c     -300  >>-292

0x15a15:	and eax, 0xf000                     
0x15a1a:	cmp eax, 0x6000                     #    if |(|S_ISBLK(mode) || S_ISCHR(mode))
0x15a1f:	je 0x15a33                          
0x15a21:	mov eax, dword ptr [rbp - 0x12c]    #    if (S_ISBLK(mode) || |S|_ISCHR(mode))
MEMORY OFFSET:     -0x12c     -300  >>-292

0x15a27:	and eax, 0xf000                     
0x15a2c:	cmp eax, 0x2000                     #    if (S_ISBLK(mode) |||| S_ISCHR(mode))
0x15a31:	jne 0x15a4f                         
0x15a33:	movabs rax, 0x7fffffffffffffff      #	flen |=| MAXFILESIZE;
0x15a3d:	mov qword ptr [rbp - 0xf0], rax     
MEMORY OFFSET:     -0xf0     -240  >>-232

0x15a44:	mov qword ptr [rbp - 0xe0], 0x8000  #	memsize |=| COPY_BUFFER_SIZE;
MEMORY OFFSET:     -0xe0     -224  >>-216

0x15a4f:	cmp qword ptr [rbp - 0xf0], 0       #    if |(|flen == 0)
MEMORY OFFSET:     -0xf0     -240  >>-232

0x15a57:	jne 0x15ab2                         
0x15a59:	call 0x4990                         #	if (|g|etuid() == 0)
0x15a5e:	test eax, eax                       #	if |(|getuid() == 0)
0x15a60:	jne 0x15a7f                         
0x15a62:	mov edx, dword ptr [rbp - 0x134]    #	    |c|hown(dest, uid, gid);
MEMORY OFFSET:     -0x134     -308  >>-300

0x15a68:	mov ecx, dword ptr [rbp - 0x130]    
MEMORY OFFSET:     -0x130     -304  >>-296

0x15a6e:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15a75:	mov esi, ecx                        
0x15a77:	mov rdi, rax                        
0x15a7a:	call 0x4c90                         
0x15a7f:	mov eax, dword ptr [rbp - 0x104]    #	|c|lose2(sfd, dfd);
MEMORY OFFSET:     -0x104     -260  >>-252

0x15a85:	mov edi, eax                        
0x15a87:	call 0x4a70                         
0x15a8c:	mov eax, dword ptr [rbp - 0x100]    
MEMORY OFFSET:     -0x100     -256  >>-248

0x15a92:	mov edi, eax                        
0x15a94:	call 0x4a70                         
0x15a99:	mov rax, qword ptr [rbp - 0x128]    #	|x|free(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x15aa0:	mov rdi, rax                        
0x15aa3:	call 0x1eeae                        
0x15aa8:	mov eax, 1                          #	return |S|D_OK;
0x15aad:	jmp 0x15f50                         
0x15ab2:	mov rax, qword ptr [rbp - 0xe0]     #    buf = |x|malloc(memsize);
MEMORY OFFSET:     -0xe0     -224  >>-216

0x15ab9:	mov rdi, rax                        
0x15abc:	call 0x24650                        
0x15ac1:	mov qword ptr [rbp - 0xc0], rax     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x15ac8:	mov qword ptr [rbp - 0xe8], 0       #    for (n |=| 0; n < flen; n += COPY_BUFFER_SIZE)
MEMORY OFFSET:     -0xe8     -232  >>-224

0x15ad3:	jmp 0x15ed9                         #    |f|or (n = 0; n < flen; n += COPY_BUFFER_SIZE)
0x15ad8:	mov rax, qword ptr [rbp - 0xf0]     #	bytes_to_transfer = |m|in(flen - n, memsize);
MEMORY OFFSET:     -0xf0     -240  >>-232

0x15adf:	sub rax, qword ptr [rbp - 0xe8]     
MEMORY OFFSET:     -0xe8     -232  >>-224

0x15ae6:	mov rdx, rax                        
0x15ae9:	mov rax, qword ptr [rbp - 0xe0]     
MEMORY OFFSET:     -0xe0     -224  >>-216

0x15af0:	cmp rdx, rax                        
0x15af3:	cmovle rax, rdx                     
0x15af7:	mov dword ptr [rbp - 0x10c], eax    #	bytes_to_transfer |=| min(flen - n, memsize);
MEMORY OFFSET:     -0x10c     -268  >>-260

0x15afd:	mov eax, 0                          #	if (|c|anceled())
0x15b02:	call 0x15065                        
0x15b07:	test eax, eax                       #	if |(|canceled())
0x15b09:	je 0x15b61                          
0x15b0b:	mov eax, dword ptr [rbp - 0x104]    #	    |c|lose2(sfd, dfd);
MEMORY OFFSET:     -0x104     -260  >>-252

0x15b11:	mov edi, eax                        
0x15b13:	call 0x4a70                         
0x15b18:	mov eax, dword ptr [rbp - 0x100]    
MEMORY OFFSET:     -0x100     -256  >>-248

0x15b1e:	mov edi, eax                        
0x15b20:	call 0x4a70                         
0x15b25:	mov rax, qword ptr [rbp - 0x128]    #	    |p|anel_unlink(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x15b2c:	mov rdi, rax                        
0x15b2f:	mov eax, 0                          
0x15b34:	call 0x15285                        
0x15b39:	mov rax, qword ptr [rbp - 0xc0]     #	    |x|free2(buf, dest);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x15b40:	mov rdi, rax                        
0x15b43:	call 0x1eeae                        
0x15b48:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15b4f:	mov rdi, rax                        
0x15b52:	call 0x1eeae                        
0x15b57:	mov eax, 2                          #	    return |S|D_CANCEL;
0x15b5c:	jmp 0x15f50                         
0x15b61:	mov edi, 1                          #	|s|ignals(ON);
0x15b66:	call 0x1eaed                        
0x15b6b:	mov eax, dword ptr [rbp - 0x10c]    #	bytes_transferred = |x|read(sfd, buf, bytes_to_transfer);
MEMORY OFFSET:     -0x10c     -268  >>-260

0x15b71:	movsxd rdx, eax                     
0x15b74:	mov rcx, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x15b7b:	mov eax, dword ptr [rbp - 0x104]    
MEMORY OFFSET:     -0x104     -260  >>-252

0x15b81:	mov rsi, rcx                        
0x15b84:	mov edi, eax                        
0x15b86:	call 0x1eee5                        
0x15b8b:	mov dword ptr [rbp - 0xfc], eax     
MEMORY OFFSET:     -0xfc     -252  >>-244

0x15b91:	mov edi, 0                          #	|s|ignals(OFF);
0x15b96:	call 0x1eaed                        
0x15b9b:	mov eax, dword ptr [rbp - 0xfc]     #	if |(|bytes_transferred != bytes_to_transfer)
MEMORY OFFSET:     -0xfc     -252  >>-244

0x15ba1:	cmp eax, dword ptr [rbp - 0x10c]    
MEMORY OFFSET:     -0x10c     -268  >>-260

0x15ba7:	je 0x15c92                          
0x15bad:	cmp dword ptr [rbp - 0xfc], 0       #	    if |(|bytes_transferred >= 0)
MEMORY OFFSET:     -0xfc     -252  >>-244

0x15bb4:	js 0x15c3c                          
0x15bba:	cmp dword ptr [rbp - 0xfc], 0       #		if |(|bytes_transferred)
MEMORY OFFSET:     -0xfc     -252  >>-244

0x15bc1:	je 0x15bd4                          
0x15bc3:	mov eax, dword ptr [rbp - 0xfc]     #		    bytes_to_transfer |=| bytes_transferred;
MEMORY OFFSET:     -0xfc     -252  >>-244

0x15bc9:	mov dword ptr [rbp - 0x10c], eax    
MEMORY OFFSET:     -0x10c     -268  >>-260

0x15bcf:	jmp 0x15c92                         
0x15bd4:	call 0x4990                         #		    if (|g|etuid() == 0)
0x15bd9:	test eax, eax                       #		    if |(|getuid() == 0)
0x15bdb:	jne 0x15bfa                         
0x15bdd:	mov edx, dword ptr [rbp - 0x134]    #			|c|hown(dest, uid, gid);
MEMORY OFFSET:     -0x134     -308  >>-300

0x15be3:	mov ecx, dword ptr [rbp - 0x130]    
MEMORY OFFSET:     -0x130     -304  >>-296

0x15be9:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15bf0:	mov esi, ecx                        
0x15bf2:	mov rdi, rax                        
0x15bf5:	call 0x4c90                         
0x15bfa:	mov eax, dword ptr [rbp - 0x104]    #		    |c|lose2(sfd, dfd);
MEMORY OFFSET:     -0x104     -260  >>-252

0x15c00:	mov edi, eax                        
0x15c02:	call 0x4a70                         
0x15c07:	mov eax, dword ptr [rbp - 0x100]    
MEMORY OFFSET:     -0x100     -256  >>-248

0x15c0d:	mov edi, eax                        
0x15c0f:	call 0x4a70                         
0x15c14:	mov rax, qword ptr [rbp - 0xc0]     #		    |x|free2(buf, dest);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x15c1b:	mov rdi, rax                        
0x15c1e:	call 0x1eeae                        
0x15c23:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15c2a:	mov rdi, rax                        
0x15c2d:	call 0x1eeae                        
0x15c32:	mov eax, 1                          #		    return |S|D_OK;
0x15c37:	jmp 0x15f50                         
0x15c3c:	mov eax, dword ptr [rbp - 0x104]    #		|c|lose2(sfd, dfd);
MEMORY OFFSET:     -0x104     -260  >>-252

0x15c42:	mov edi, eax                        
0x15c44:	call 0x4a70                         
0x15c49:	mov eax, dword ptr [rbp - 0x100]    
MEMORY OFFSET:     -0x100     -256  >>-248

0x15c4f:	mov edi, eax                        
0x15c51:	call 0x4a70                         
0x15c56:	mov rax, qword ptr [rbp - 0x128]    #		|p|anel_unlink(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x15c5d:	mov rdi, rax                        
0x15c60:	mov eax, 0                          
0x15c65:	call 0x15285                        
0x15c6a:	mov rax, qword ptr [rbp - 0xc0]     #		|x|free2(buf, dest);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x15c71:	mov rdi, rax                        
0x15c74:	call 0x1eeae                        
0x15c79:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15c80:	mov rdi, rax                        
0x15c83:	call 0x1eeae                        
0x15c88:	mov eax, 5                          #		return |S|_READERR;
0x15c8d:	jmp 0x15f50                         
0x15c92:	mov eax, 0                          #	if (|c|anceled())
0x15c97:	call 0x15065                        
0x15c9c:	test eax, eax                       #	if |(|canceled())
0x15c9e:	je 0x15cf6                          
0x15ca0:	mov eax, dword ptr [rbp - 0x104]    #	    |c|lose2(sfd, dfd);
MEMORY OFFSET:     -0x104     -260  >>-252

0x15ca6:	mov edi, eax                        
0x15ca8:	call 0x4a70                         
0x15cad:	mov eax, dword ptr [rbp - 0x100]    
MEMORY OFFSET:     -0x100     -256  >>-248

0x15cb3:	mov edi, eax                        
0x15cb5:	call 0x4a70                         
0x15cba:	mov rax, qword ptr [rbp - 0x128]    #	    |p|anel_unlink(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x15cc1:	mov rdi, rax                        
0x15cc4:	mov eax, 0                          
0x15cc9:	call 0x15285                        
0x15cce:	mov rax, qword ptr [rbp - 0xc0]     #	    |x|free2(buf, dest);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x15cd5:	mov rdi, rax                        
0x15cd8:	call 0x1eeae                        
0x15cdd:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15ce4:	mov rdi, rax                        
0x15ce7:	call 0x1eeae                        
0x15cec:	mov eax, 2                          #	    return |S|D_CANCEL;
0x15cf1:	jmp 0x15f50                         
0x15cf6:	mov eax, dword ptr [rbp - 0x10c]    #	bytes_transferred = |x|write(dfd, buf, bytes_to_transfer);
MEMORY OFFSET:     -0x10c     -268  >>-260

0x15cfc:	movsxd rdx, eax                     
0x15cff:	mov rcx, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x15d06:	mov eax, dword ptr [rbp - 0x100]    
MEMORY OFFSET:     -0x100     -256  >>-248

0x15d0c:	mov rsi, rcx                        
0x15d0f:	mov edi, eax                        
0x15d11:	call 0x1ef4c                        
0x15d16:	mov dword ptr [rbp - 0xfc], eax     
MEMORY OFFSET:     -0xfc     -252  >>-244

0x15d1c:	mov eax, dword ptr [rbp - 0xfc]     #	if |(|bytes_transferred != bytes_to_transfer)
MEMORY OFFSET:     -0xfc     -252  >>-244

0x15d22:	cmp eax, dword ptr [rbp - 0x10c]    
MEMORY OFFSET:     -0x10c     -268  >>-260

0x15d28:	je 0x15db7                          
0x15d2e:	call 0x4820                         #	    int safe_errno = |e|rrno;
0x15d33:	mov eax, dword ptr [rax]            #	    int |s|afe_errno = errno;
0x15d35:	mov dword ptr [rbp - 0xf8], eax     
MEMORY OFFSET:     -0xf8     -248  >>-240

0x15d3b:	mov eax, dword ptr [rbp - 0x104]    #	    |c|lose2(sfd, dfd);
MEMORY OFFSET:     -0x104     -260  >>-252

0x15d41:	mov edi, eax                        
0x15d43:	call 0x4a70                         
0x15d48:	mov eax, dword ptr [rbp - 0x100]    
MEMORY OFFSET:     -0x100     -256  >>-248

0x15d4e:	mov edi, eax                        
0x15d50:	call 0x4a70                         
0x15d55:	mov rax, qword ptr [rbp - 0x128]    #	    |p|anel_unlink(dest);
MEMORY OFFSET:     -0x128     -296  >>-288

0x15d5c:	mov rdi, rax                        
0x15d5f:	mov eax, 0                          
0x15d64:	call 0x15285                        
0x15d69:	mov rax, qword ptr [rbp - 0xc0]     #	    |x|free2(buf, dest);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x15d70:	mov rdi, rax                        
0x15d73:	call 0x1eeae                        
0x15d78:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15d7f:	mov rdi, rax                        
0x15d82:	call 0x1eeae                        
0x15d87:	cmp dword ptr [rbp - 0xfc], 0       #	    return (bytes_transferred > 0) ? SD_NOSPACE |:|
MEMORY OFFSET:     -0xfc     -252  >>-244

0x15d8e:	jg 0x15dad                          
0x15d90:	cmp dword ptr [rbp - 0xf8], 0x1c    #		((safe_errno == ENOSPC) ? SD_NOSPACE |:| D_WRITEERR);
MEMORY OFFSET:     -0xf8     -248  >>-240

0x15d97:	jne 0x15da3                         
0x15d99:	mov eax, 8                          #		((safe_errno == ENOSPC) ? SD_NOSPACE |:| D_WRITEERR);
0x15d9e:	jmp 0x15f50                         #	    return (bytes_transferred > 0) ? SD_NOSPACE |:|
0x15da3:	mov eax, 7                          #		((safe_errno == ENOSPC) ? SD_NOSPACE |:| D_WRITEERR);
0x15da8:	jmp 0x15f50                         #	    return (bytes_transferred > 0) ? SD_NOSPACE |:|
0x15dad:	mov eax, 8                          #	    return (bytes_transferred > 0) ? SD_NOSPACE |:|
0x15db2:	jmp 0x15f50                         
0x15db7:	mov eax, dword ptr [rbp - 0x10c]    #	if (n |+| bytes_to_transfer <= flen)
MEMORY OFFSET:     -0x10c     -268  >>-260

0x15dbd:	movsxd rdx, eax                     
0x15dc0:	mov rax, qword ptr [rbp - 0xe8]     
MEMORY OFFSET:     -0xe8     -232  >>-224

0x15dc7:	add rax, rdx                        
0x15dca:	cmp qword ptr [rbp - 0xf0], rax     #	if |(|n + bytes_to_transfer <= flen)
MEMORY OFFSET:     -0xf0     -240  >>-232

0x15dd1:	jl 0x15ece                          
0x15dd7:	mov rax, qword ptr [rbp - 0x120]    #	    msg = xmalloc(32 + |s|trlen(src));
MEMORY OFFSET:     -0x120     -288  >>-280

0x15dde:	mov rdi, rax                        
0x15de1:	call 0x4960                         
0x15de6:	add rax, 0x20                       #	    msg = |x|malloc(32 + strlen(src));
0x15dea:	mov rdi, rax                        
0x15ded:	call 0x24650                        
0x15df2:	mov qword ptr [rbp - 0xc8], rax     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x15df9:	mov eax, dword ptr [rbp - 0x12c]    #	    if (|S|_ISREG(mode))
MEMORY OFFSET:     -0x12c     -300  >>-292

0x15dff:	and eax, 0xf000                     
0x15e04:	cmp eax, 0x8000                     #	    if |(|S_ISREG(mode))
0x15e09:	jne 0x15e60                         
0x15e0b:	mov eax, dword ptr [rbp - 0x10c]    #		|s|printf(msg, "(COPY) [%3d%%] %s",
MEMORY OFFSET:     -0x10c     -268  >>-260

0x15e11:	movsxd rdx, eax                     
0x15e14:	mov rax, qword ptr [rbp - 0xe8]     
MEMORY OFFSET:     -0xe8     -232  >>-224

0x15e1b:	add rdx, rax                        
0x15e1e:	mov rax, qword ptr [rbp - 0xf0]     
MEMORY OFFSET:     -0xf0     -240  >>-232

0x15e25:	mov rsi, rax                        
0x15e28:	mov rdi, rdx                        
0x15e2b:	mov eax, 0                          
0x15e30:	call 0x152ff                        
0x15e35:	mov esi, eax                        
0x15e37:	mov rdx, qword ptr [rbp - 0x120]    
MEMORY OFFSET:     -0x120     -288  >>-280

0x15e3e:	mov rax, qword ptr [rbp - 0xc8]     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x15e45:	mov rcx, rdx                        
0x15e48:	mov edx, esi                        
0x15e4a:	lea rsi, [rip + 0x129d4]            
MEMORY OFFSET:     0x129d4     76244  >>76252

0x15e51:	mov rdi, rax                        
0x15e54:	mov eax, 0                          
0x15e59:	call 0x4dd0                         
0x15e5e:	jmp 0x15e9c                         
0x15e60:	mov eax, dword ptr [rbp - 0x10c]    #		|s|printf(msg, "(COPY) [%Ld bytes] %s",
MEMORY OFFSET:     -0x10c     -268  >>-260

0x15e66:	movsxd rdx, eax                     
0x15e69:	mov rax, qword ptr [rbp - 0xe8]     #			(long long)(n |+| bytes_to_transfer), src);
MEMORY OFFSET:     -0xe8     -232  >>-224

0x15e70:	lea rsi, [rdx + rax]                
0x15e74:	mov rdx, qword ptr [rbp - 0x120]    #		|s|printf(msg, "(COPY) [%Ld bytes] %s",
MEMORY OFFSET:     -0x120     -288  >>-280

0x15e7b:	mov rax, qword ptr [rbp - 0xc8]     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x15e82:	mov rcx, rdx                        
0x15e85:	mov rdx, rsi                        
0x15e88:	lea rsi, [rip + 0x129a8]            
MEMORY OFFSET:     0x129a8     76200  >>76208

0x15e8f:	mov rdi, rax                        
0x15e92:	mov eax, 0                          
0x15e97:	call 0x4dd0                         
0x15e9c:	mov rax, qword ptr [rbp - 0xc8]     #	    |s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x15ea3:	mov edx, 1                          
0x15ea8:	mov esi, 1                          
0x15ead:	mov rdi, rax                        
0x15eb0:	call 0x107d0                        
0x15eb5:	mov eax, 0                          #	    |t|ty_update();
0x15eba:	call 0xb4b7                         
0x15ebf:	mov rax, qword ptr [rbp - 0xc8]     #	    |x|free(msg);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x15ec6:	mov rdi, rax                        
0x15ec9:	call 0x1eeae                        
0x15ece:	add qword ptr [rbp - 0xe8], 0x8000  #    for (n = 0; n < flen; n |+|= COPY_BUFFER_SIZE)
MEMORY OFFSET:     -0xe8     -232  >>-224

0x15ed9:	mov rax, qword ptr [rbp - 0xe8]     #    for (n = 0; n |<| flen; n += COPY_BUFFER_SIZE)
MEMORY OFFSET:     -0xe8     -232  >>-224

0x15ee0:	cmp rax, qword ptr [rbp - 0xf0]     
MEMORY OFFSET:     -0xf0     -240  >>-232

0x15ee7:	jl 0x15ad8                          
0x15eed:	call 0x4990                         #    if (|g|etuid() == 0)
0x15ef2:	test eax, eax                       #    if |(|getuid() == 0)
0x15ef4:	jne 0x15f13                         
0x15ef6:	mov edx, dword ptr [rbp - 0x134]    #	|c|hown(dest, uid, gid);
MEMORY OFFSET:     -0x134     -308  >>-300

0x15efc:	mov ecx, dword ptr [rbp - 0x130]    
MEMORY OFFSET:     -0x130     -304  >>-296

0x15f02:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15f09:	mov esi, ecx                        
0x15f0b:	mov rdi, rax                        
0x15f0e:	call 0x4c90                         
0x15f13:	mov eax, dword ptr [rbp - 0x104]    #    |c|lose2(sfd, dfd);
MEMORY OFFSET:     -0x104     -260  >>-252

0x15f19:	mov edi, eax                        
0x15f1b:	call 0x4a70                         
0x15f20:	mov eax, dword ptr [rbp - 0x100]    
MEMORY OFFSET:     -0x100     -256  >>-248

0x15f26:	mov edi, eax                        
0x15f28:	call 0x4a70                         
0x15f2d:	mov rax, qword ptr [rbp - 0xc0]     #    |x|free2(buf, dest);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x15f34:	mov rdi, rax                        
0x15f37:	call 0x1eeae                        
0x15f3c:	mov rax, qword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x15f43:	mov rdi, rax                        
0x15f46:	call 0x1eeae                        
0x15f4b:	mov eax, 1                          #    return |S|D_OK;
0x15f50:	mov rdx, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x15f54:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x15f5d:	je 0x15f64                          
0x15f5f:	call 0x4980                         #|}|
0x15f64:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x15f68:	leave                               
0x15f69:	ret                                 
0x15f6a:	endbr64                             #|{|
0x15f6e:	push rbp                            
0x15f6f:	mov rbp, rsp                        
0x15f72:	push rbx                            
0x15f73:	sub rsp, 0x198                      
0x15f7a:	mov qword ptr [rbp - 0x188], rdi    
MEMORY OFFSET:     -0x188     -392  >>-384

0x15f81:	mov qword ptr [rbp - 0x190], rsi    
MEMORY OFFSET:     -0x190     -400  >>-392

0x15f88:	mov qword ptr [rbp - 0x198], rdx    
MEMORY OFFSET:     -0x198     -408  >>-400

0x15f8f:	mov dword ptr [rbp - 0x19c], ecx    
MEMORY OFFSET:     -0x19c     -412  >>-404

0x15f95:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x15f9e:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x15fa2:	xor eax, eax                        
0x15fa4:	mov eax, dword ptr [rbp - 0x19c]    #    if (|S|_ISDIR(mode))
MEMORY OFFSET:     -0x19c     -412  >>-404

0x15faa:	and eax, 0xf000                     
0x15faf:	cmp eax, 0x4000                     #    if |(|S_ISDIR(mode))
0x15fb4:	jne 0x162ac                         
0x15fba:	lea rdx, [rbp - 0x140]              #	if (|x|stat(to, &to_statbuf) == 0)
MEMORY OFFSET:     -0x140     -320  >>-312

0x15fc1:	mov rax, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x15fc8:	mov rsi, rdx                        
0x15fcb:	mov rdi, rax                        
0x15fce:	call 0x1f0e4                        
0x15fd3:	test eax, eax                       #	if |(|xstat(to, &to_statbuf) == 0)
0x15fd5:	jne 0x160ea                         
0x15fdb:	mov eax, dword ptr [rbp - 0x128]    #	    if (!|S|_ISDIR(to_statbuf.st_mode))
MEMORY OFFSET:     -0x128     -296  >>-288

0x15fe1:	and eax, 0xf000                     
0x15fe6:	cmp eax, 0x4000                     #	    if |(|!S_ISDIR(to_statbuf.st_mode))
0x15feb:	je 0x15ff7                          
0x15fed:	mov eax, 9                          #		return |F|T_INVAL;
0x15ff2:	jmp 0x167c6                         
0x15ff7:	mov rax, qword ptr [rbp - 0x198]    #	    temp = xmalloc(|s|trlen(to) + 1 + strlen(from) + 1);
MEMORY OFFSET:     -0x198     -408  >>-400

0x15ffe:	mov rdi, rax                        
0x16001:	call 0x4960                         
0x16006:	mov rbx, rax                        
0x16009:	mov rax, qword ptr [rbp - 0x190]    #	    temp = xmalloc(strlen(to) + 1 + |s|trlen(from) + 1);
MEMORY OFFSET:     -0x190     -400  >>-392

0x16010:	mov rdi, rax                        
0x16013:	call 0x4960                         
0x16018:	add rax, rbx                        #	    temp = xmalloc(strlen(to) + 1 |+| strlen(from) + 1);
0x1601b:	add rax, 2                          #	    temp = |x|malloc(strlen(to) + 1 + strlen(from) + 1);
0x1601f:	mov rdi, rax                        
0x16022:	call 0x24650                        
0x16027:	mov qword ptr [rbp - 0x148], rax    
MEMORY OFFSET:     -0x148     -328  >>-320

0x1602e:	mov rcx, qword ptr [rbp - 0x190]    #	    |s|printf(temp, "%s/%s", to, from);
MEMORY OFFSET:     -0x190     -400  >>-392

0x16035:	mov rdx, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x1603c:	mov rax, qword ptr [rbp - 0x148]    
MEMORY OFFSET:     -0x148     -328  >>-320

0x16043:	lea rsi, [rip + 0x12785]            
MEMORY OFFSET:     0x12785     75653  >>75661

0x1604a:	mov rdi, rax                        
0x1604d:	mov eax, 0                          
0x16052:	call 0x4dd0                         
0x16057:	mov rax, qword ptr [rbp - 0x188]    #	    if (this|-|>chkdest && access(temp, 0) == 0)
MEMORY OFFSET:     -0x188     -392  >>-384

0x1605e:	mov eax, dword ptr [rax + 0x90]     
MEMORY OFFSET:     0x90     144  >>152

0x16064:	test eax, eax                       #	    if |(|this->chkdest && access(temp, 0) == 0)
0x16066:	je 0x160db                          
0x16068:	mov rax, qword ptr [rbp - 0x148]    #	    if (this->chkdest && |a|ccess(temp, 0) == 0)
MEMORY OFFSET:     -0x148     -328  >>-320

0x1606f:	mov esi, 0                          
0x16074:	mov rdi, rax                        
0x16077:	call 0x4d40                         
0x1607c:	test eax, eax                       #	    if (this->chkdest |&|& access(temp, 0) == 0)
0x1607e:	jne 0x160db                         
0x16080:	mov eax, 0                          #		|s|tatus_default();
0x16085:	call 0x10857                        
0x1608a:	mov rdx, qword ptr [rbp - 0x148]    #		error = |p|anel_warning(this, temp);
MEMORY OFFSET:     -0x148     -328  >>-320

0x16091:	mov rax, qword ptr [rbp - 0x188]    
MEMORY OFFSET:     -0x188     -392  >>-384

0x16098:	mov rsi, rdx                        
0x1609b:	mov rdi, rax                        
0x1609e:	mov eax, 0                          
0x160a3:	call 0x151b4                        
0x160a8:	mov dword ptr [rbp - 0x170], eax    
MEMORY OFFSET:     -0x170     -368  >>-360

0x160ae:	mov eax, 0                          #		|t|ty_update();
0x160b3:	call 0xb4b7                         
0x160b8:	mov rax, qword ptr [rbp - 0x148]    #		|x|free(temp);
MEMORY OFFSET:     -0x148     -328  >>-320

0x160bf:	mov rdi, rax                        
0x160c2:	call 0x1eeae                        
0x160c7:	cmp dword ptr [rbp - 0x170], 0      #		if |(|error)
MEMORY OFFSET:     -0x170     -368  >>-360

0x160ce:	je 0x160ea                          
0x160d0:	mov eax, dword ptr [rbp - 0x170]    #		    return |e|rror;
MEMORY OFFSET:     -0x170     -368  >>-360

0x160d6:	jmp 0x167c6                         
0x160db:	mov rax, qword ptr [rbp - 0x148]    #		|x|free(temp);
MEMORY OFFSET:     -0x148     -328  >>-320

0x160e2:	mov rdi, rax                        
0x160e5:	call 0x1eeae                        
0x160ea:	mov rax, qword ptr [rbp - 0x190]    #	temp = xmalloc(32 + |s|trlen(from) + strlen(to) + 1);
MEMORY OFFSET:     -0x190     -400  >>-392

0x160f1:	mov rdi, rax                        
0x160f4:	call 0x4960                         
0x160f9:	mov rbx, rax                        
0x160fc:	mov rax, qword ptr [rbp - 0x198]    #	temp = xmalloc(32 + strlen(from) + |s|trlen(to) + 1);
MEMORY OFFSET:     -0x198     -408  >>-400

0x16103:	mov rdi, rax                        
0x16106:	call 0x4960                         
0x1610b:	add rax, rbx                        #	temp = xmalloc(32 + strlen(from) |+| strlen(to) + 1);
0x1610e:	add rax, 0x21                       #	temp = |x|malloc(32 + strlen(from) + strlen(to) + 1);
0x16112:	mov rdi, rax                        
0x16115:	call 0x24650                        
0x1611a:	mov qword ptr [rbp - 0x148], rax    
MEMORY OFFSET:     -0x148     -328  >>-320

0x16121:	mov rax, qword ptr [rbp - 0x198]    #	to_file = |x|basename(to);
MEMORY OFFSET:     -0x198     -408  >>-400

0x16128:	mov rdi, rax                        
0x1612b:	call 0x1f298                        
0x16130:	mov qword ptr [rbp - 0x168], rax    
MEMORY OFFSET:     -0x168     -360  >>-352

0x16137:	mov rax, qword ptr [rbp - 0x168]    #	if (|*|to_file == '\0')
MEMORY OFFSET:     -0x168     -360  >>-352

0x1613e:	movzx eax, byte ptr [rax]           
0x16141:	test al, al                         #	if |(|*to_file == '\0')
0x16143:	jne 0x1614f                         
0x16145:	mov eax, 4                          #	    return |T|_CREATERR;
0x1614a:	jmp 0x167c6                         
0x1614f:	mov rax, qword ptr [rbp - 0x190]    #	msg = xmalloc(32 + |s|trlen(from) + strlen(to));
MEMORY OFFSET:     -0x190     -400  >>-392

0x16156:	mov rdi, rax                        
0x16159:	call 0x4960                         
0x1615e:	mov rbx, rax                        
0x16161:	mov rax, qword ptr [rbp - 0x198]    #	msg = xmalloc(32 + strlen(from) + |s|trlen(to));
MEMORY OFFSET:     -0x198     -408  >>-400

0x16168:	mov rdi, rax                        
0x1616b:	call 0x4960                         
0x16170:	add rax, rbx                        #	msg = xmalloc(32 + strlen(from) |+| strlen(to));
0x16173:	add rax, 0x20                       #	msg = |x|malloc(32 + strlen(from) + strlen(to));
0x16177:	mov rdi, rax                        
0x1617a:	call 0x24650                        
0x1617f:	mov qword ptr [rbp - 0x150], rax    
MEMORY OFFSET:     -0x150     -336  >>-328

0x16186:	mov rcx, qword ptr [rbp - 0x198]    #	|s|printf(msg, "(MOVE) mv -f \"%s\" \"%s\"", from, to);
MEMORY OFFSET:     -0x198     -408  >>-400

0x1618d:	mov rdx, qword ptr [rbp - 0x190]    
MEMORY OFFSET:     -0x190     -400  >>-392

0x16194:	mov rax, qword ptr [rbp - 0x150]    
MEMORY OFFSET:     -0x150     -336  >>-328

0x1619b:	lea rsi, [rip + 0x12735]            
MEMORY OFFSET:     0x12735     75573  >>75581

0x161a2:	mov rdi, rax                        
0x161a5:	mov eax, 0                          
0x161aa:	call 0x4dd0                         
0x161af:	mov rax, qword ptr [rbp - 0x150]    #	|s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
MEMORY OFFSET:     -0x150     -336  >>-328

0x161b6:	mov edx, 1                          
0x161bb:	mov esi, 1                          
0x161c0:	mov rdi, rax                        
0x161c3:	call 0x107d0                        
0x161c8:	mov eax, 0                          #	|t|ty_update();
0x161cd:	call 0xb4b7                         
0x161d2:	mov rax, qword ptr [rbp - 0x150]    #	|x|free(msg);
MEMORY OFFSET:     -0x150     -336  >>-328

0x161d9:	mov rdi, rax                        
0x161dc:	call 0x1eeae                        
0x161e1:	mov rcx, qword ptr [rbp - 0x198]    #	|s|printf(temp, "mv -f \"%s\" \"%s\"", from, to);
MEMORY OFFSET:     -0x198     -408  >>-400

0x161e8:	mov rdx, qword ptr [rbp - 0x190]    
MEMORY OFFSET:     -0x190     -400  >>-392

0x161ef:	mov rax, qword ptr [rbp - 0x148]    
MEMORY OFFSET:     -0x148     -328  >>-320

0x161f6:	lea rsi, [rip + 0x126f1]            
MEMORY OFFSET:     0x126f1     75505  >>75513

0x161fd:	mov rdi, rax                        
0x16200:	mov eax, 0                          
0x16205:	call 0x4dd0                         
0x1620a:	mov rax, qword ptr [rbp - 0x148]    #	result = |s|tart(temp, 1);
MEMORY OFFSET:     -0x148     -328  >>-320

0x16211:	mov esi, 1                          
0x16216:	mov rdi, rax                        
0x16219:	call 0x1f6f0                        
0x1621e:	mov dword ptr [rbp - 0x16c], eax    
MEMORY OFFSET:     -0x16c     -364  >>-356

0x16224:	mov rax, qword ptr [rbp - 0x148]    #	|x|free(temp);
MEMORY OFFSET:     -0x148     -328  >>-320

0x1622b:	mov rdi, rax                        
0x1622e:	call 0x1eeae                        
0x16233:	mov rax, qword ptr [rbp - 0x188]    #	|t|ty_update_title(this->path);
MEMORY OFFSET:     -0x188     -392  >>-384

0x1623a:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1623e:	mov rdi, rax                        
0x16241:	call 0xd875                         
0x16246:	mov eax, dword ptr [rbp - 0x16c]    #	if (|W|IFSIGNALED(result))
MEMORY OFFSET:     -0x16c     -364  >>-356

0x1624c:	and eax, 0x7f                       
0x1624f:	add eax, 1                          
0x16252:	sar al, 1                           
0x16254:	test al, al                         #	if |(|WIFSIGNALED(result))
0x16256:	jle 0x16262                         
0x16258:	mov eax, 0xc                        #	    return |F|T_INTERRUPTED;
0x1625d:	jmp 0x167c6                         
0x16262:	mov eax, dword ptr [rbp - 0x16c]    #	if(|W|IFEXITED(result))
MEMORY OFFSET:     -0x16c     -364  >>-356

0x16268:	and eax, 0x7f                       
0x1626b:	test eax, eax                       #	if|(|WIFEXITED(result))
0x1626d:	jne 0x162a2                         
0x1626f:	mov eax, dword ptr [rbp - 0x16c]    #	    if(|W|EXITSTATUS(result) != 0)
MEMORY OFFSET:     -0x16c     -364  >>-356

0x16275:	sar eax, 8                          
0x16278:	movzx eax, al                       
0x1627b:	test eax, eax                       #	    if|(|WEXITSTATUS(result) != 0)
0x1627d:	je 0x16298                          
0x1627f:	lea rax, [rip + 0x12678]            #		|d|isplay_errors("mv");
MEMORY OFFSET:     0x12678     75384  >>75392

0x16286:	mov rdi, rax                        
0x16289:	call 0x1f808                        
0x1628e:	mov eax, 8                          #		return |F|T_UNKNOWN;
0x16293:	jmp 0x167c6                         
0x16298:	mov eax, 1                          #	    return |F|T_OK;
0x1629d:	jmp 0x167c6                         
0x162a2:	mov eax, 8                          #	return |F|T_UNKNOWN;
0x162a7:	jmp 0x167c6                         
0x162ac:	mov rax, qword ptr [rbp - 0x198]    #    len = |s|trlen(to);
MEMORY OFFSET:     -0x198     -408  >>-400

0x162b3:	mov rdi, rax                        
0x162b6:	call 0x4960                         
0x162bb:	mov qword ptr [rbp - 0x160], rax    
MEMORY OFFSET:     -0x160     -352  >>-344

0x162c2:	mov rax, qword ptr [rbp - 0x198]    #    to  = |x|strdup(to);
MEMORY OFFSET:     -0x198     -408  >>-400

0x162c9:	mov rdi, rax                        
0x162cc:	call 0x24780                        
0x162d1:	mov qword ptr [rbp - 0x198], rax    
MEMORY OFFSET:     -0x198     -408  >>-400

0x162d8:	lea rdx, [rbp - 0x140]              #    if (|x|stat(to, &to_statbuf) == 0 && S_ISDIR(to_statbuf.st_mode))
MEMORY OFFSET:     -0x140     -320  >>-312

0x162df:	mov rax, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x162e6:	mov rsi, rdx                        
0x162e9:	mov rdi, rax                        
0x162ec:	call 0x1f0e4                        
0x162f1:	test eax, eax                       #    if |(|xstat(to, &to_statbuf) == 0 && S_ISDIR(to_statbuf.st_mode))
0x162f3:	jne 0x1637b                         
0x162f9:	mov eax, dword ptr [rbp - 0x128]    #    if (xstat(to, &to_statbuf) == 0 && |S|_ISDIR(to_statbuf.st_mode))
MEMORY OFFSET:     -0x128     -296  >>-288

0x162ff:	and eax, 0xf000                     
0x16304:	cmp eax, 0x4000                     #    if (xstat(to, &to_statbuf) == 0 |&|& S_ISDIR(to_statbuf.st_mode))
0x16309:	jne 0x1637b                         
0x1630b:	mov rax, qword ptr [rbp - 0x190]    #	to = xrealloc(to, len + 1 + |s|trlen(from) + 1);
MEMORY OFFSET:     -0x190     -400  >>-392

0x16312:	mov rdi, rax                        
0x16315:	call 0x4960                         
0x1631a:	mov rdx, qword ptr [rbp - 0x160]    #	to = xrealloc(to, len + 1 |+| strlen(from) + 1);
MEMORY OFFSET:     -0x160     -352  >>-344

0x16321:	add rax, rdx                        
0x16324:	lea rdx, [rax + 2]                  #	to = |x|realloc(to, len + 1 + strlen(from) + 1);
MEMORY OFFSET:     0x2     2  >>10

0x16328:	mov rax, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x1632f:	mov rsi, rdx                        
0x16332:	mov rdi, rax                        
0x16335:	call 0x24670                        
0x1633a:	mov qword ptr [rbp - 0x198], rax    
MEMORY OFFSET:     -0x198     -408  >>-400

0x16341:	mov rax, qword ptr [rbp - 0x198]    #	|s|trcat(to, "/");
MEMORY OFFSET:     -0x198     -408  >>-400

0x16348:	mov rdi, rax                        
0x1634b:	call 0x4960                         
0x16350:	mov rdx, rax                        
0x16353:	mov rax, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x1635a:	add rax, rdx                        
0x1635d:	mov word ptr [rax], 0x2f            
0x16362:	mov rdx, qword ptr [rbp - 0x190]    #	|s|trcat(to, from);
MEMORY OFFSET:     -0x190     -400  >>-392

0x16369:	mov rax, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x16370:	mov rsi, rdx                        
0x16373:	mov rdi, rax                        
0x16376:	call 0x4db0                         
0x1637b:	mov rax, qword ptr [rbp - 0x198]    #    to_file = |x|basename(to);
MEMORY OFFSET:     -0x198     -408  >>-400

0x16382:	mov rdi, rax                        
0x16385:	call 0x1f298                        
0x1638a:	mov qword ptr [rbp - 0x168], rax    
MEMORY OFFSET:     -0x168     -360  >>-352

0x16391:	mov rax, qword ptr [rbp - 0x168]    #    if (|*|to_file == '\0')
MEMORY OFFSET:     -0x168     -360  >>-352

0x16398:	movzx eax, byte ptr [rax]           
0x1639b:	test al, al                         #    if |(|*to_file == '\0')
0x1639d:	jne 0x163b8                         
0x1639f:	mov rax, qword ptr [rbp - 0x198]    #	|x|free(to);
MEMORY OFFSET:     -0x198     -408  >>-400

0x163a6:	mov rdi, rax                        
0x163a9:	call 0x1eeae                        
0x163ae:	mov eax, 4                          #	return |T|_CREATERR;
0x163b3:	jmp 0x167c6                         
0x163b8:	mov rax, qword ptr [rbp - 0x168]    #    if |(|to_file == to)
MEMORY OFFSET:     -0x168     -360  >>-352

0x163bf:	cmp rax, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x163c6:	jne 0x1646b                         
0x163cc:	mov rax, qword ptr [rbp - 0x198]    #	char *temp = xmalloc(2 + (len = |s|trlen(to)) + 1);
MEMORY OFFSET:     -0x198     -408  >>-400

0x163d3:	mov rdi, rax                        
0x163d6:	call 0x4960                         
0x163db:	mov qword ptr [rbp - 0x160], rax    
MEMORY OFFSET:     -0x160     -352  >>-344

0x163e2:	mov rax, qword ptr [rbp - 0x160]    #	char *temp = |x|malloc(2 + (len = strlen(to)) + 1);
MEMORY OFFSET:     -0x160     -352  >>-344

0x163e9:	add rax, 3                          
0x163ed:	mov rdi, rax                        
0x163f0:	call 0x24650                        
0x163f5:	mov qword ptr [rbp - 0x158], rax    
MEMORY OFFSET:     -0x158     -344  >>-336

0x163fc:	mov rax, qword ptr [rbp - 0x158]    #	temp[0] |=| '.';
MEMORY OFFSET:     -0x158     -344  >>-336

0x16403:	mov byte ptr [rax], 0x2e            
0x16406:	mov rax, qword ptr [rbp - 0x158]    #	temp|[|1] = '/';
MEMORY OFFSET:     -0x158     -344  >>-336

0x1640d:	add rax, 1                          
0x16411:	mov byte ptr [rax], 0x2f            #	temp[1] |=| '/';
0x16414:	mov rax, qword ptr [rbp - 0x160]    #	|m|emcpy(temp + 2, to, len + 1);
MEMORY OFFSET:     -0x160     -352  >>-344

0x1641b:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1641f:	mov rax, qword ptr [rbp - 0x158]    #	memcpy(temp |+| 2, to, len + 1);
MEMORY OFFSET:     -0x158     -344  >>-336

0x16426:	lea rcx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x1642a:	mov rax, qword ptr [rbp - 0x198]    #	|m|emcpy(temp + 2, to, len + 1);
MEMORY OFFSET:     -0x198     -408  >>-400

0x16431:	mov rsi, rax                        
0x16434:	mov rdi, rcx                        
0x16437:	call 0x4b70                         
0x1643c:	mov rax, qword ptr [rbp - 0x198]    #	|x|free(to);
MEMORY OFFSET:     -0x198     -408  >>-400

0x16443:	mov rdi, rax                        
0x16446:	call 0x1eeae                        
0x1644b:	mov rax, qword ptr [rbp - 0x158]    #	to |=| temp;
MEMORY OFFSET:     -0x158     -344  >>-336

0x16452:	mov qword ptr [rbp - 0x198], rax    
MEMORY OFFSET:     -0x198     -408  >>-400

0x16459:	mov rax, qword ptr [rbp - 0x198]    #	to_file |=| to + 2;
MEMORY OFFSET:     -0x198     -408  >>-400

0x16460:	add rax, 2                          
0x16464:	mov qword ptr [rbp - 0x168], rax    
MEMORY OFFSET:     -0x168     -360  >>-352

0x1646b:	mov rax, qword ptr [rbp - 0x188]    #    if (this|-|>chkdest && (access(to, 0) == 0))
MEMORY OFFSET:     -0x188     -392  >>-384

0x16472:	mov eax, dword ptr [rax + 0x90]     
MEMORY OFFSET:     0x90     144  >>152

0x16478:	test eax, eax                       #    if |(|this->chkdest && (access(to, 0) == 0))
0x1647a:	je 0x164e0                          
0x1647c:	mov rax, qword ptr [rbp - 0x198]    #    if (this->chkdest && (|a|ccess(to, 0) == 0))
MEMORY OFFSET:     -0x198     -408  >>-400

0x16483:	mov esi, 0                          
0x16488:	mov rdi, rax                        
0x1648b:	call 0x4d40                         
0x16490:	test eax, eax                       #    if (this->chkdest |&|& (access(to, 0) == 0))
0x16492:	jne 0x164e0                         
0x16494:	mov eax, 0                          #	|s|tatus_default();
0x16499:	call 0x10857                        
0x1649e:	mov rdx, qword ptr [rbp - 0x168]    #	error = |p|anel_warning(this, to_file);
MEMORY OFFSET:     -0x168     -360  >>-352

0x164a5:	mov rax, qword ptr [rbp - 0x188]    
MEMORY OFFSET:     -0x188     -392  >>-384

0x164ac:	mov rsi, rdx                        
0x164af:	mov rdi, rax                        
0x164b2:	mov eax, 0                          
0x164b7:	call 0x151b4                        
0x164bc:	mov dword ptr [rbp - 0x170], eax    
MEMORY OFFSET:     -0x170     -368  >>-360

0x164c2:	mov eax, 0                          #	|t|ty_update();
0x164c7:	call 0xb4b7                         
0x164cc:	cmp dword ptr [rbp - 0x170], 0      #	if |(|error)
MEMORY OFFSET:     -0x170     -368  >>-360

0x164d3:	je 0x164e0                          
0x164d5:	mov eax, dword ptr [rbp - 0x170]    #	    return |e|rror;
MEMORY OFFSET:     -0x170     -368  >>-360

0x164db:	jmp 0x167c6                         
0x164e0:	mov rax, qword ptr [rbp - 0x190]    #    msg = xmalloc(32 + |s|trlen(from));
MEMORY OFFSET:     -0x190     -400  >>-392

0x164e7:	mov rdi, rax                        
0x164ea:	call 0x4960                         
0x164ef:	add rax, 0x20                       #    msg = |x|malloc(32 + strlen(from));
0x164f3:	mov rdi, rax                        
0x164f6:	call 0x24650                        
0x164fb:	mov qword ptr [rbp - 0x150], rax    
MEMORY OFFSET:     -0x150     -336  >>-328

0x16502:	mov rdx, qword ptr [rbp - 0x190]    #    |s|printf(msg, "(MOVE) %s", from);
MEMORY OFFSET:     -0x190     -400  >>-392

0x16509:	mov rax, qword ptr [rbp - 0x150]    
MEMORY OFFSET:     -0x150     -336  >>-328

0x16510:	lea rcx, [rip + 0x123ea]            
MEMORY OFFSET:     0x123ea     74730  >>74738

0x16517:	mov rsi, rcx                        
0x1651a:	mov rdi, rax                        
0x1651d:	mov eax, 0                          
0x16522:	call 0x4dd0                         
0x16527:	mov rax, qword ptr [rbp - 0x150]    #    |s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
MEMORY OFFSET:     -0x150     -336  >>-328

0x1652e:	mov edx, 1                          
0x16533:	mov esi, 1                          
0x16538:	mov rdi, rax                        
0x1653b:	call 0x107d0                        
0x16540:	mov eax, 0                          #    |t|ty_update();
0x16545:	call 0xb4b7                         
0x1654a:	mov rax, qword ptr [rbp - 0x150]    #    |x|free(msg);
MEMORY OFFSET:     -0x150     -336  >>-328

0x16551:	mov rdi, rax                        
0x16554:	call 0x1eeae                        
0x16559:	lea rdx, [rbp - 0xb0]               #    if (|x|stat(from, &from_statbuf) == -1)
MEMORY OFFSET:     -0xb0     -176  >>-168

0x16560:	mov rax, qword ptr [rbp - 0x190]    
MEMORY OFFSET:     -0x190     -400  >>-392

0x16567:	mov rsi, rdx                        
0x1656a:	mov rdi, rax                        
0x1656d:	call 0x1f0e4                        
0x16572:	cmp eax, -1                         #    if |(|xstat(from, &from_statbuf) == -1)
0x16575:	jne 0x16581                         
0x16577:	mov eax, 6                          #	return |F|_STATERR;
0x1657c:	jmp 0x167c6                         
0x16581:	lea rdx, [rbp - 0x140]              #    if (|x|stat(to, &to_statbuf) == -1)
MEMORY OFFSET:     -0x140     -320  >>-312

0x16588:	mov rax, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x1658f:	mov rsi, rdx                        
0x16592:	mov rdi, rax                        
0x16595:	call 0x1f0e4                        
0x1659a:	cmp eax, -1                         #    if |(|xstat(to, &to_statbuf) == -1)
0x1659d:	jne 0x16631                         
0x165a3:	mov rax, qword ptr [rbp - 0x168]    #	char |c| = *(to_file - 1);
MEMORY OFFSET:     -0x168     -360  >>-352

0x165aa:	movzx eax, byte ptr [rax - 1]       
MEMORY OFFSET:     -0x1     -1  >>7

0x165ae:	mov byte ptr [rbp - 0x171], al      
MEMORY OFFSET:     -0x171     -369  >>-361

0x165b4:	mov rax, qword ptr [rbp - 0x168]    #	*(to_file |-| 1) = 0;
MEMORY OFFSET:     -0x168     -360  >>-352

0x165bb:	sub rax, 1                          
0x165bf:	mov byte ptr [rax], 0               #	*(to_file - 1) |=| 0;
0x165c2:	mov rax, qword ptr [rbp - 0x198]    #	error = (|*|to) ? xstat(to, &to_statbuf) : xstat("/", &to_statbuf);
MEMORY OFFSET:     -0x198     -408  >>-400

0x165c9:	movzx eax, byte ptr [rax]           
0x165cc:	test al, al                         #	error = (*to) ? xstat(to, &to_statbuf) |:| xstat("/", &to_statbuf);
0x165ce:	je 0x165eb                          
0x165d0:	lea rdx, [rbp - 0x140]              #	error = (*to) ? |x|stat(to, &to_statbuf) : xstat("/", &to_statbuf);
MEMORY OFFSET:     -0x140     -320  >>-312

0x165d7:	mov rax, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x165de:	mov rsi, rdx                        
0x165e1:	mov rdi, rax                        
0x165e4:	call 0x1f0e4                        
0x165e9:	jmp 0x16604                         
0x165eb:	lea rax, [rbp - 0x140]              #	error = (*to) ? xstat(to, &to_statbuf) : |x|stat("/", &to_statbuf);
MEMORY OFFSET:     -0x140     -320  >>-312

0x165f2:	mov rsi, rax                        
0x165f5:	lea rax, [rip + 0x11fa8]            
MEMORY OFFSET:     0x11fa8     73640  >>73648

0x165fc:	mov rdi, rax                        
0x165ff:	call 0x1f0e4                        
0x16604:	mov dword ptr [rbp - 0x170], eax    #	error |=| (*to) ? xstat(to, &to_statbuf) : xstat("/", &to_statbuf);
MEMORY OFFSET:     -0x170     -368  >>-360

0x1660a:	mov rax, qword ptr [rbp - 0x168]    #	*(to_file |-| 1) = c;
MEMORY OFFSET:     -0x168     -360  >>-352

0x16611:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x16615:	movzx eax, byte ptr [rbp - 0x171]   #	*(to_file - 1) |=| c;
MEMORY OFFSET:     -0x171     -369  >>-361

0x1661c:	mov byte ptr [rdx], al              
0x1661e:	cmp dword ptr [rbp - 0x170], -1     #	if |(|error == -1)
MEMORY OFFSET:     -0x170     -368  >>-360

0x16625:	jne 0x16631                         
0x16627:	mov eax, 7                          #	    return |T|_STATERR;
0x1662c:	jmp 0x167c6                         
0x16631:	mov rdx, qword ptr [rbp - 0x140]    #    if (to_statbuf|.|st_dev != from_statbuf.st_dev
MEMORY OFFSET:     -0x140     -320  >>-312

0x16638:	mov rax, qword ptr [rbp - 0xb0]     #    if (to_statbuf.st_dev != from_statbuf|.|st_dev
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1663f:	cmp rdx, rax                        #    if |(|to_statbuf.st_dev != from_statbuf.st_dev
0x16642:	jne 0x16656                         
0x16644:	mov rax, qword ptr [rbp - 0x188]    #	|| this|-|>msdosfs
MEMORY OFFSET:     -0x188     -392  >>-384

0x1664b:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x1664e:	test eax, eax                       #	|||| this->msdosfs
0x16650:	je 0x16740                          
0x16656:	mov r8d, dword ptr [rbp - 0x90]     #	error = |p|anel_copy(this, from, to,
MEMORY OFFSET:     -0x90     -144  >>-136

0x1665d:	mov edi, dword ptr [rbp - 0x94]     
MEMORY OFFSET:     -0x94     -148  >>-140

0x16663:	mov ecx, dword ptr [rbp - 0x98]     
MEMORY OFFSET:     -0x98     -152  >>-144

0x16669:	mov rdx, qword ptr [rbp - 0x198]    
MEMORY OFFSET:     -0x198     -408  >>-400

0x16670:	mov rsi, qword ptr [rbp - 0x190]    
MEMORY OFFSET:     -0x190     -400  >>-392

0x16677:	mov rax, qword ptr [rbp - 0x188]    
MEMORY OFFSET:     -0x188     -392  >>-384

0x1667e:	mov r9d, r8d                        
0x16681:	mov r8d, edi                        
0x16684:	mov rdi, rax                        
0x16687:	mov eax, 0                          
0x1668c:	call 0x1537d                        
0x16691:	mov dword ptr [rbp - 0x170], eax    
MEMORY OFFSET:     -0x170     -368  >>-360

0x16697:	cmp dword ptr [rbp - 0x170], 8      #	|s|witch (error)
MEMORY OFFSET:     -0x170     -368  >>-360

0x1669e:	je 0x166e5                          
0x166a0:	cmp dword ptr [rbp - 0x170], 8      
MEMORY OFFSET:     -0x170     -368  >>-360

0x166a7:	jg 0x166ef                          
0x166a9:	cmp dword ptr [rbp - 0x170], 3      
MEMORY OFFSET:     -0x170     -368  >>-360

0x166b0:	je 0x166db                          
0x166b2:	cmp dword ptr [rbp - 0x170], 3      
MEMORY OFFSET:     -0x170     -368  >>-360

0x166b9:	jg 0x166ef                          
0x166bb:	cmp dword ptr [rbp - 0x170], 1      
MEMORY OFFSET:     -0x170     -368  >>-360

0x166c2:	je 0x167a2                          
0x166c8:	cmp dword ptr [rbp - 0x170], 2      
MEMORY OFFSET:     -0x170     -368  >>-360

0x166cf:	jne 0x166ef                         
0x166d1:	mov eax, 2                          #	    case SD_CANCEL:	return |F|T_CANCEL;
0x166d6:	jmp 0x167c6                         
0x166db:	mov eax, 3                          #	    case SD_SKIP:	return |F|T_SKIP;
0x166e0:	jmp 0x167c6                         
0x166e5:	mov eax, 0xa                        #	    case SD_NOSPACE:	return |F|T_NOSPACE;
0x166ea:	jmp 0x167c6                         
0x166ef:	mov eax, dword ptr [rbp - 0x170]    #				 from, copyerr[error |-| 1],
MEMORY OFFSET:     -0x170     -368  >>-360

0x166f5:	sub eax, 1                          
0x166f8:	cdqe                                #		|p|anel_3s_message("%s: Copy failed, %s.",
0x166fa:	lea rdx, [rax*8]                    
0x16702:	lea rax, [rip + 0x19e77]            
MEMORY OFFSET:     0x19e77     106103  >>106111

0x16709:	mov rdx, qword ptr [rdx + rax]      
0x1670d:	mov rax, qword ptr [rbp - 0x190]    
MEMORY OFFSET:     -0x190     -400  >>-392

0x16714:	mov r8d, 0xe                        
0x1671a:	mov ecx, 0                          
0x1671f:	mov rsi, rax                        
0x16722:	lea rax, [rip + 0x121e2]            
MEMORY OFFSET:     0x121e2     74210  >>74218

0x16729:	mov rdi, rax                        
0x1672c:	mov eax, 0                          
0x16731:	call 0x115fd                        
0x16736:	mov eax, 0xb                        #		return |F|T_COPY;
0x1673b:	jmp 0x167c6                         
0x16740:	mov eax, 0                          #    |s|ervice_pending_signals();
0x16745:	call 0x1ea4b                        
0x1674a:	mov eax, dword ptr [rbp - 0x128]    #    if (|S|_ISREG(to_statbuf.st_mode) || S_ISDIR(to_statbuf.st_mode))
MEMORY OFFSET:     -0x128     -296  >>-288

0x16750:	and eax, 0xf000                     
0x16755:	cmp eax, 0x8000                     #    if |(|S_ISREG(to_statbuf.st_mode) || S_ISDIR(to_statbuf.st_mode))
0x1675a:	je 0x1676e                          
0x1675c:	mov eax, dword ptr [rbp - 0x128]    #    if (S_ISREG(to_statbuf.st_mode) || |S|_ISDIR(to_statbuf.st_mode))
MEMORY OFFSET:     -0x128     -296  >>-288

0x16762:	and eax, 0xf000                     
0x16767:	cmp eax, 0x4000                     #    if (S_ISREG(to_statbuf.st_mode) |||| S_ISDIR(to_statbuf.st_mode))
0x1676c:	jne 0x167a5                         
0x1676e:	mov rax, qword ptr [rbp - 0x198]    #	|u|nlink(to);
MEMORY OFFSET:     -0x198     -408  >>-400

0x16775:	mov rdi, rax                        
0x16778:	call 0x4830                         
0x1677d:	mov rdx, qword ptr [rbp - 0x198]    #	if (|l|ink(from, to) == -1)
MEMORY OFFSET:     -0x198     -408  >>-400

0x16784:	mov rax, qword ptr [rbp - 0x190]    
MEMORY OFFSET:     -0x190     -400  >>-392

0x1678b:	mov rsi, rdx                        
0x1678e:	mov rdi, rax                        
0x16791:	call 0x4de0                         
0x16796:	cmp eax, -1                         #	if |(|link(from, to) == -1)
0x16799:	jne 0x167a5                         
0x1679b:	mov eax, 4                          #	    return |T|_CREATERR;
0x167a0:	jmp 0x167c6                         
0x167a2:	nop                                 #	    case SD_OK:		|g|oto remove_from;
0x167a3:	jmp 0x167a6                         
0x167a5:	nop                                 #  |r|emove_from:
0x167a6:	mov rax, qword ptr [rbp - 0x190]    #    if (|u|nlink(from) == -1)
MEMORY OFFSET:     -0x190     -400  >>-392

0x167ad:	mov rdi, rax                        
0x167b0:	call 0x4830                         
0x167b5:	cmp eax, -1                         #    if |(|unlink(from) == -1)
0x167b8:	jne 0x167c1                         
0x167ba:	mov eax, 5                          #	return |F|_DELETERR;
0x167bf:	jmp 0x167c6                         
0x167c1:	mov eax, 1                          #    return |F|T_OK;
0x167c6:	mov rdx, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x167ca:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x167d3:	je 0x167da                          
0x167d5:	call 0x4980                         #|}|
0x167da:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x167de:	leave                               
0x167df:	ret                                 
0x167e0:	endbr64                             #|{|
0x167e4:	push rbp                            
0x167e5:	mov rbp, rsp                        
0x167e8:	sub rsp, 0x30                       
0x167ec:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x167f0:	mov qword ptr [rbp - 0x30], rsi     
MEMORY OFFSET:     -0x30     -48  >>-40

0x167f4:	mov rax, qword ptr [rbp - 0x30]     #    size_t len = |s|trlen(str);
MEMORY OFFSET:     -0x30     -48  >>-40

0x167f8:	mov rdi, rax                        
0x167fb:	call 0x4960                         
0x16800:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x16804:	mov rax, qword ptr [rbp - 0x10]     #    char *temp = |x|malloc(len + 1);
MEMORY OFFSET:     -0x10     -16  >>-8

0x16808:	add rax, 1                          
0x1680c:	mov rdi, rax                        
0x1680f:	call 0x24650                        
0x16814:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x16818:	mov rax, qword ptr [rbp - 0x28]     #    len = |m|in(len, (size_t)this->maxname);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1681c:	mov eax, dword ptr [rax + 0x30]     
MEMORY OFFSET:     0x30     48  >>56

0x1681f:	cdqe                                
0x16821:	mov rdx, qword ptr [rbp - 0x10]     #    len |=| min(len, (size_t)this->maxname);
MEMORY OFFSET:     -0x10     -16  >>-8

0x16825:	cmp rdx, rax                        
0x16828:	cmovbe rax, rdx                     
0x1682c:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x16830:	mov rdx, qword ptr [rbp - 0x10]     #    |s|trncpy(temp, str, len);
MEMORY OFFSET:     -0x10     -16  >>-8

0x16834:	mov rcx, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x16838:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1683c:	mov rsi, rcx                        
0x1683f:	mov rdi, rax                        
0x16842:	call 0x4840                         
0x16847:	mov rdx, qword ptr [rbp - 8]        #    temp|[|len] = 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x1684b:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1684f:	add rax, rdx                        
0x16852:	mov byte ptr [rax], 0               #    temp[len] |=| 0;
0x16855:	mov dword ptr [rbp - 0x14], 0       #    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1685c:	jmp 0x16897                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x1685e:	mov rax, qword ptr [rbp - 0x28]     #	if (strcmp(temp, this|-|>dir_entry[entry].name) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x16862:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x16866:	mov eax, dword ptr [rbp - 0x14]     #	if (strcmp(temp, this->dir_entry|[|entry].name) == 0)
MEMORY OFFSET:     -0x14     -20  >>-12

0x16869:	movsxd rdx, eax                     
0x1686c:	mov rax, rdx                        
0x1686f:	shl rax, 2                          
0x16873:	add rax, rdx                        
0x16876:	shl rax, 4                          
0x1687a:	add rax, rcx                        
0x1687d:	mov rdx, qword ptr [rax]            #	if (strcmp(temp, this->dir_entry[entry]|.|name) == 0)
0x16880:	mov rax, qword ptr [rbp - 8]        #	if (|s|trcmp(temp, this->dir_entry[entry].name) == 0)
MEMORY OFFSET:     -0x8     -8  >>0

0x16884:	mov rsi, rdx                        
0x16887:	mov rdi, rax                        
0x1688a:	call 0x4af0                         
0x1688f:	test eax, eax                       #	if |(|strcmp(temp, this->dir_entry[entry].name) == 0)
0x16891:	je 0x168a5                          
0x16893:	add dword ptr [rbp - 0x14], 1       #    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x14     -20  >>-12

0x16897:	mov rax, qword ptr [rbp - 0x28]     #    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1689b:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1689e:	cmp dword ptr [rbp - 0x14], eax     #    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x168a1:	jl 0x1685e                          
0x168a3:	jmp 0x168a6                         
0x168a5:	nop                                 #	    |b|reak;
0x168a6:	mov rax, qword ptr [rbp - 0x28]     #    if (entry != this|-|>entries)
MEMORY OFFSET:     -0x28     -40  >>-32

0x168aa:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x168ad:	cmp dword ptr [rbp - 0x14], eax     #    if |(|entry != this->entries)
MEMORY OFFSET:     -0x14     -20  >>-12

0x168b0:	jne 0x16ab2                         
0x168b6:	mov dword ptr [rbp - 0x14], 0       #    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x168bd:	jmp 0x168f8                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x168bf:	mov rax, qword ptr [rbp - 0x28]     #	if (strcasecmp(temp, this|-|>dir_entry[entry].name) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x168c3:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x168c7:	mov eax, dword ptr [rbp - 0x14]     #	if (strcasecmp(temp, this->dir_entry|[|entry].name) == 0)
MEMORY OFFSET:     -0x14     -20  >>-12

0x168ca:	movsxd rdx, eax                     
0x168cd:	mov rax, rdx                        
0x168d0:	shl rax, 2                          
0x168d4:	add rax, rdx                        
0x168d7:	shl rax, 4                          
0x168db:	add rax, rcx                        
0x168de:	mov rdx, qword ptr [rax]            #	if (strcasecmp(temp, this->dir_entry[entry]|.|name) == 0)
0x168e1:	mov rax, qword ptr [rbp - 8]        #	if (|s|trcasecmp(temp, this->dir_entry[entry].name) == 0)
MEMORY OFFSET:     -0x8     -8  >>0

0x168e5:	mov rsi, rdx                        
0x168e8:	mov rdi, rax                        
0x168eb:	call 0x47f0                         
0x168f0:	test eax, eax                       #	if |(|strcasecmp(temp, this->dir_entry[entry].name) == 0)
0x168f2:	je 0x16906                          
0x168f4:	add dword ptr [rbp - 0x14], 1       #    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x14     -20  >>-12

0x168f8:	mov rax, qword ptr [rbp - 0x28]     #    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x168fc:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x168ff:	cmp dword ptr [rbp - 0x14], eax     #    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x16902:	jl 0x168bf                          
0x16904:	jmp 0x16907                         
0x16906:	nop                                 #	    |b|reak;
0x16907:	mov rax, qword ptr [rbp - 0x28]     #    if (entry != this|-|>entries)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1690b:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1690e:	cmp dword ptr [rbp - 0x14], eax     #    if |(|entry != this->entries)
MEMORY OFFSET:     -0x14     -20  >>-12

0x16911:	jne 0x16ab5                         
0x16917:	mov dword ptr [rbp - 0x14], 0       #    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1691e:	jmp 0x169bf                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x16923:	mov rax, qword ptr [rbp - 0x28]     #		    |m|in(len, strlen(this->dir_entry[entry].name))) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x16927:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1692b:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1692e:	movsxd rdx, eax                     
0x16931:	mov rax, rdx                        
0x16934:	shl rax, 2                          
0x16938:	add rax, rdx                        
0x1693b:	shl rax, 4                          
0x1693f:	add rax, rcx                        
0x16942:	mov rax, qword ptr [rax]            
0x16945:	mov rdi, rax                        
0x16948:	call 0x4960                         
0x1694d:	cmp qword ptr [rbp - 0x10], rax     #	if (|s|trncmp(temp, this->dir_entry[entry].name,
MEMORY OFFSET:     -0x10     -16  >>-8

0x16951:	jbe 0x16982                         
0x16953:	mov rax, qword ptr [rbp - 0x28]     #		    |m|in(len, strlen(this->dir_entry[entry].name))) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x16957:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1695b:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1695e:	movsxd rdx, eax                     
0x16961:	mov rax, rdx                        
0x16964:	shl rax, 2                          
0x16968:	add rax, rdx                        
0x1696b:	shl rax, 4                          
0x1696f:	add rax, rcx                        
0x16972:	mov rax, qword ptr [rax]            
0x16975:	mov rdi, rax                        
0x16978:	call 0x4960                         
0x1697d:	mov rdx, rax                        
0x16980:	jmp 0x16986                         
0x16982:	mov rdx, qword ptr [rbp - 0x10]     #	if (|s|trncmp(temp, this->dir_entry[entry].name,
MEMORY OFFSET:     -0x10     -16  >>-8

0x16986:	mov rax, qword ptr [rbp - 0x28]     #	if (strncmp(temp, this|-|>dir_entry[entry].name,
MEMORY OFFSET:     -0x28     -40  >>-32

0x1698a:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1698e:	mov eax, dword ptr [rbp - 0x14]     #	if (strncmp(temp, this->dir_entry|[|entry].name,
MEMORY OFFSET:     -0x14     -20  >>-12

0x16991:	movsxd rcx, eax                     
0x16994:	mov rax, rcx                        
0x16997:	shl rax, 2                          
0x1699b:	add rax, rcx                        
0x1699e:	shl rax, 4                          
0x169a2:	add rax, rsi                        
0x169a5:	mov rcx, qword ptr [rax]            #	if (strncmp(temp, this->dir_entry[entry]|.|name,
0x169a8:	mov rax, qword ptr [rbp - 8]        #	if (|s|trncmp(temp, this->dir_entry[entry].name,
MEMORY OFFSET:     -0x8     -8  >>0

0x169ac:	mov rsi, rcx                        
0x169af:	mov rdi, rax                        
0x169b2:	call 0x4850                         
0x169b7:	test eax, eax                       #	if |(|strncmp(temp, this->dir_entry[entry].name,
0x169b9:	je 0x169d1                          
0x169bb:	add dword ptr [rbp - 0x14], 1       #    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x14     -20  >>-12

0x169bf:	mov rax, qword ptr [rbp - 0x28]     #    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x169c3:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x169c6:	cmp dword ptr [rbp - 0x14], eax     #    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x169c9:	jl 0x16923                          
0x169cf:	jmp 0x169d2                         
0x169d1:	nop                                 #	    |b|reak;
0x169d2:	mov rax, qword ptr [rbp - 0x28]     #    if (entry != this|-|>entries)
MEMORY OFFSET:     -0x28     -40  >>-32

0x169d6:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x169d9:	cmp dword ptr [rbp - 0x14], eax     #    if |(|entry != this->entries)
MEMORY OFFSET:     -0x14     -20  >>-12

0x169dc:	jne 0x16ab8                         
0x169e2:	mov dword ptr [rbp - 0x14], 0       #    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x169e9:	jmp 0x16a8a                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x169ee:	mov rax, qword ptr [rbp - 0x28]     #			|m|in(len, strlen(this->dir_entry[entry].name))) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x169f2:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x169f6:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x169f9:	movsxd rdx, eax                     
0x169fc:	mov rax, rdx                        
0x169ff:	shl rax, 2                          
0x16a03:	add rax, rdx                        
0x16a06:	shl rax, 4                          
0x16a0a:	add rax, rcx                        
0x16a0d:	mov rax, qword ptr [rax]            
0x16a10:	mov rdi, rax                        
0x16a13:	call 0x4960                         
0x16a18:	cmp qword ptr [rbp - 0x10], rax     #	if (|s|trncasecmp(temp, this->dir_entry[entry].name,
MEMORY OFFSET:     -0x10     -16  >>-8

0x16a1c:	jbe 0x16a4d                         
0x16a1e:	mov rax, qword ptr [rbp - 0x28]     #			|m|in(len, strlen(this->dir_entry[entry].name))) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x16a22:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x16a26:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x16a29:	movsxd rdx, eax                     
0x16a2c:	mov rax, rdx                        
0x16a2f:	shl rax, 2                          
0x16a33:	add rax, rdx                        
0x16a36:	shl rax, 4                          
0x16a3a:	add rax, rcx                        
0x16a3d:	mov rax, qword ptr [rax]            
0x16a40:	mov rdi, rax                        
0x16a43:	call 0x4960                         
0x16a48:	mov rdx, rax                        
0x16a4b:	jmp 0x16a51                         
0x16a4d:	mov rdx, qword ptr [rbp - 0x10]     #	if (|s|trncasecmp(temp, this->dir_entry[entry].name,
MEMORY OFFSET:     -0x10     -16  >>-8

0x16a51:	mov rax, qword ptr [rbp - 0x28]     #	if (strncasecmp(temp, this|-|>dir_entry[entry].name,
MEMORY OFFSET:     -0x28     -40  >>-32

0x16a55:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x16a59:	mov eax, dword ptr [rbp - 0x14]     #	if (strncasecmp(temp, this->dir_entry|[|entry].name,
MEMORY OFFSET:     -0x14     -20  >>-12

0x16a5c:	movsxd rcx, eax                     
0x16a5f:	mov rax, rcx                        
0x16a62:	shl rax, 2                          
0x16a66:	add rax, rcx                        
0x16a69:	shl rax, 4                          
0x16a6d:	add rax, rsi                        
0x16a70:	mov rcx, qword ptr [rax]            #	if (strncasecmp(temp, this->dir_entry[entry]|.|name,
0x16a73:	mov rax, qword ptr [rbp - 8]        #	if (|s|trncasecmp(temp, this->dir_entry[entry].name,
MEMORY OFFSET:     -0x8     -8  >>0

0x16a77:	mov rsi, rcx                        
0x16a7a:	mov rdi, rax                        
0x16a7d:	call 0x4c00                         
0x16a82:	test eax, eax                       #	if |(|strncasecmp(temp, this->dir_entry[entry].name,
0x16a84:	je 0x16a9c                          
0x16a86:	add dword ptr [rbp - 0x14], 1       #    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x14     -20  >>-12

0x16a8a:	mov rax, qword ptr [rbp - 0x28]     #    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x16a8e:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x16a91:	cmp dword ptr [rbp - 0x14], eax     #    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x16a94:	jl 0x169ee                          
0x16a9a:	jmp 0x16a9d                         
0x16a9c:	nop                                 #	    |b|reak;
0x16a9d:	mov rax, qword ptr [rbp - 0x28]     #    if (entry == this|-|>entries)
MEMORY OFFSET:     -0x28     -40  >>-32

0x16aa1:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x16aa4:	cmp dword ptr [rbp - 0x14], eax     #    if |(|entry == this->entries)
MEMORY OFFSET:     -0x14     -20  >>-12

0x16aa7:	jne 0x16abb                         
0x16aa9:	mov dword ptr [rbp - 0x14], 0       #	entry |=| 0;
MEMORY OFFSET:     -0x14     -20  >>-12

0x16ab0:	jmp 0x16abc                         
0x16ab2:	nop                                 #	|g|oto done;
0x16ab3:	jmp 0x16abc                         
0x16ab5:	nop                                 #	|g|oto done;
0x16ab6:	jmp 0x16abc                         
0x16ab8:	nop                                 #	|g|oto done;
0x16ab9:	jmp 0x16abc                         
0x16abb:	nop                                 #  |d|one:
0x16abc:	mov rax, qword ptr [rbp - 8]        #    |x|free(temp);
MEMORY OFFSET:     -0x8     -8  >>0

0x16ac0:	mov rdi, rax                        
0x16ac3:	call 0x1eeae                        
0x16ac8:	mov eax, dword ptr [rbp - 0x14]     #    return |e|ntry;
MEMORY OFFSET:     -0x14     -20  >>-12

0x16acb:	leave                               #|}|
0x16acc:	ret                                 
0x16acd:	endbr64                             #|{|
0x16ad1:	push rbp                            
0x16ad2:	mov rbp, rsp                        
0x16ad5:	sub rsp, 0x40                       
0x16ad9:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x16add:	mov qword ptr [rbp - 0x40], rsi     
MEMORY OFFSET:     -0x40     -64  >>-56

0x16ae1:	mov rax, qword ptr [rbp - 0x38]     #    char *name = this|-|>dir_entry[this->current_entry].name;
MEMORY OFFSET:     -0x38     -56  >>-48

0x16ae5:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x16ae9:	mov rax, qword ptr [rbp - 0x38]     #    char *name = this->dir_entry[this|-|>current_entry].name;
MEMORY OFFSET:     -0x38     -56  >>-48

0x16aed:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x16af0:	movsxd rdx, eax                     
0x16af3:	mov rax, rdx                        #    char *name = this->dir_entry|[|this->current_entry].name;
0x16af6:	shl rax, 2                          
0x16afa:	add rax, rdx                        
0x16afd:	shl rax, 4                          
0x16b01:	add rax, rcx                        
0x16b04:	mov rax, qword ptr [rax]            #    char *|n|ame = this->dir_entry[this->current_entry].name;
0x16b07:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x16b0b:	mov rax, qword ptr [rbp - 0x38]     #    switch (this|-|>dir_entry[this->current_entry].type)
MEMORY OFFSET:     -0x38     -56  >>-48

0x16b0f:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x16b13:	mov rax, qword ptr [rbp - 0x38]     #    switch (this->dir_entry[this|-|>current_entry].type)
MEMORY OFFSET:     -0x38     -56  >>-48

0x16b17:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x16b1a:	movsxd rdx, eax                     
0x16b1d:	mov rax, rdx                        #    switch (this->dir_entry|[|this->current_entry].type)
0x16b20:	shl rax, 2                          
0x16b24:	add rax, rdx                        
0x16b27:	shl rax, 4                          
0x16b2b:	add rax, rcx                        
0x16b2e:	movzx eax, byte ptr [rax + 0x48]    #    switch (this->dir_entry[this->current_entry]|.|type)
MEMORY OFFSET:     0x48     72  >>80

0x16b32:	movsx eax, al                       
0x16b35:	test eax, eax                       #    |s|witch (this->dir_entry[this->current_entry].type)
0x16b37:	je 0x16b47                          
0x16b39:	cmp eax, 1                          
0x16b3c:	je 0x16d2f                          
0x16b42:	jmp 0x16e18                         
0x16b47:	mov rax, qword ptr [rbp - 0x20]     #	    if (|s|trcmp(name, "..") == 0 && strcmp(this->path, "/") == 0)
MEMORY OFFSET:     -0x20     -32  >>-24

0x16b4b:	lea rdx, [rip + 0x11a8c]            
MEMORY OFFSET:     0x11a8c     72332  >>72340

0x16b52:	mov rsi, rdx                        
0x16b55:	mov rdi, rax                        
0x16b58:	call 0x4af0                         
0x16b5d:	test eax, eax                       #	    if |(|strcmp(name, "..") == 0 && strcmp(this->path, "/") == 0)
0x16b5f:	jne 0x16b83                         
0x16b61:	mov rax, qword ptr [rbp - 0x38]     #	    if (strcmp(name, "..") == 0 && strcmp(this|-|>path, "/") == 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x16b65:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x16b69:	lea rdx, [rip + 0x11a34]            #	    if (strcmp(name, "..") == 0 && |s|trcmp(this->path, "/") == 0)
MEMORY OFFSET:     0x11a34     72244  >>72252

0x16b70:	mov rsi, rdx                        
0x16b73:	mov rdi, rax                        
0x16b76:	call 0x4af0                         
0x16b7b:	test eax, eax                       #	    if (strcmp(name, "..") == 0 |&|& strcmp(this->path, "/") == 0)
0x16b7d:	je 0x16e14                          
0x16b83:	mov rax, qword ptr [rbp - 0x20]     #	    back = (|s|trcmp(name, "..") == 0) ? 1 : 0;
MEMORY OFFSET:     -0x20     -32  >>-24

0x16b87:	lea rdx, [rip + 0x11a50]            
MEMORY OFFSET:     0x11a50     72272  >>72280

0x16b8e:	mov rsi, rdx                        
0x16b91:	mov rdi, rax                        
0x16b94:	call 0x4af0                         
0x16b99:	test eax, eax                       #	    back = (strcmp(name, "..") == 0) ? 1 |:| 0;
0x16b9b:	sete al                             
0x16b9e:	movzx eax, al                       #	    back |=| (strcmp(name, "..") == 0) ? 1 : 0;
0x16ba1:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x16ba4:	mov rax, qword ptr [rbp - 0x38]     #	    old_path = xmalloc(this|-|>pathlen + 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16ba8:	mov rax, qword ptr [rax + 0x78]     
MEMORY OFFSET:     0x78     120  >>128

0x16bac:	add rax, 1                          #	    old_path = |x|malloc(this->pathlen + 1);
0x16bb0:	mov rdi, rax                        
0x16bb3:	call 0x24650                        
0x16bb8:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x16bbc:	mov rax, qword ptr [rbp - 0x38]     #	    strcpy(old_path, this|-|>path);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16bc0:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x16bc4:	mov rax, qword ptr [rbp - 0x10]     #	    |s|trcpy(old_path, this->path);
MEMORY OFFSET:     -0x10     -16  >>-8

0x16bc8:	mov rsi, rdx                        
0x16bcb:	mov rdi, rax                        
0x16bce:	call 0x4870                         
0x16bd3:	mov rcx, qword ptr [rbp - 0x20]     #	    if (!|p|anel_read_directory(this, name, ON))
MEMORY OFFSET:     -0x20     -32  >>-24

0x16bd7:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x16bdb:	mov edx, 1                          
0x16be0:	mov rsi, rcx                        
0x16be3:	mov rdi, rax                        
0x16be6:	mov eax, 0                          
0x16beb:	call 0x12238                        
0x16bf0:	test eax, eax                       #	    if |(|!panel_read_directory(this, name, ON))
0x16bf2:	jne 0x16c46                         
0x16bf4:	cmp dword ptr [rbp - 0x28], 0       #		if |(|back)
MEMORY OFFSET:     -0x28     -40  >>-32

0x16bf8:	je 0x16c1c                          
0x16bfa:	mov rax, qword ptr [rbp - 0x38]     #		    |p|anel_recover(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16bfe:	mov rdi, rax                        
0x16c01:	mov eax, 0                          
0x16c06:	call 0x116a7                        
0x16c0b:	mov rax, qword ptr [rbp - 0x38]     #		    |p|anel_update(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16c0f:	mov rdi, rax                        
0x16c12:	call 0x14e6a                        
0x16c17:	jmp 0x16e18                         #		|b|reak;
0x16c1c:	mov rax, qword ptr [rbp - 0x20]     #		    |p|anel_2s_message("%s/: Permission denied.",
MEMORY OFFSET:     -0x20     -32  >>-24

0x16c20:	mov ecx, 0x1c                       
0x16c25:	mov edx, 0                          
0x16c2a:	mov rsi, rax                        
0x16c2d:	lea rax, [rip + 0x11958]            
MEMORY OFFSET:     0x11958     72024  >>72032

0x16c34:	mov rdi, rax                        
0x16c37:	mov eax, 0                          
0x16c3c:	call 0x11568                        
0x16c41:	jmp 0x16e18                         #		|b|reak;
0x16c46:	cmp dword ptr [rbp - 0x28], 0       #	    if |(|back)
MEMORY OFFSET:     -0x28     -40  >>-32

0x16c4a:	je 0x16c99                          
0x16c4c:	mov rax, qword ptr [rbp - 0x10]     #		old_entry_name = |s|trrchr(old_path, '/');
MEMORY OFFSET:     -0x10     -16  >>-8

0x16c50:	mov esi, 0x2f                       
0x16c55:	mov rdi, rax                        
0x16c58:	call 0x49e0                         
0x16c5d:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x16c61:	add qword ptr [rbp - 8], 1          #		index |=| panel_find_index(this, ++old_entry_name);
MEMORY OFFSET:     -0x8     -8  >>0

0x16c66:	mov rdx, qword ptr [rbp - 8]        #		index = |p|anel_find_index(this, ++old_entry_name);
MEMORY OFFSET:     -0x8     -8  >>0

0x16c6a:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x16c6e:	mov rsi, rdx                        
0x16c71:	mov rdi, rax                        
0x16c74:	mov eax, 0                          
0x16c79:	call 0x167e0                        
0x16c7e:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x16c81:	mov edx, dword ptr [rbp - 0x24]     #		|p|anel_set_current_entry(this, index);
MEMORY OFFSET:     -0x24     -36  >>-28

0x16c84:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x16c88:	mov esi, edx                        
0x16c8a:	mov rdi, rax                        
0x16c8d:	mov eax, 0                          
0x16c92:	call 0x112b7                        
0x16c97:	jmp 0x16caf                         
0x16c99:	mov rax, qword ptr [rbp - 0x38]     #		|p|anel_set_current_entry(this, 0);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16c9d:	mov esi, 0                          
0x16ca2:	mov rdi, rax                        
0x16ca5:	mov eax, 0                          
0x16caa:	call 0x112b7                        
0x16caf:	mov rax, qword ptr [rbp - 0x10]     #	    |x|free(old_path);
MEMORY OFFSET:     -0x10     -16  >>-8

0x16cb3:	mov rdi, rax                        
0x16cb6:	call 0x1eeae                        
0x16cbb:	mov rax, qword ptr [rbp - 0x38]     #	    |p|anel_update(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16cbf:	mov rdi, rax                        
0x16cc2:	call 0x14e6a                        
0x16cc7:	mov rax, qword ptr [rbp - 0x40]     #	    if (strcmp(this->path, other|-|>path) == 0)
MEMORY OFFSET:     -0x40     -64  >>-56

0x16ccb:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x16ccf:	mov rax, qword ptr [rbp - 0x38]     #	    if (strcmp(this|-|>path, other->path) == 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x16cd3:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x16cd7:	mov rsi, rdx                        #	    if (|s|trcmp(this->path, other->path) == 0)
0x16cda:	mov rdi, rax                        
0x16cdd:	call 0x4af0                         
0x16ce2:	test eax, eax                       #	    if |(|strcmp(this->path, other->path) == 0)
0x16ce4:	jne 0x16d19                         
0x16ce6:	mov rdx, qword ptr [rbp - 0x38]     #		|p|anel_action(other, act_REGET, this, (void *)-1, 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16cea:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x16cee:	mov r8d, 1                          
0x16cf4:	mov rcx, -1                         
0x16cfb:	mov esi, 0x22                       
0x16d00:	mov rdi, rax                        
0x16d03:	call 0x1a89a                        
0x16d08:	mov rax, qword ptr [rbp - 0x40]     #		|p|anel_update(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x16d0c:	mov rdi, rax                        
0x16d0f:	call 0x14e6a                        
0x16d14:	jmp 0x16e18                         #	    |b|reak;
0x16d19:	mov rax, qword ptr [rbp - 0x40]     #		|p|anel_update_size(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x16d1d:	mov rdi, rax                        
0x16d20:	mov eax, 0                          
0x16d25:	call 0x13506                        
0x16d2a:	jmp 0x16e18                         #	    |b|reak;
0x16d2f:	mov rax, qword ptr [rbp - 0x38]     #	    if (this|-|>dir_entry[this->current_entry].executable)
MEMORY OFFSET:     -0x38     -56  >>-48

0x16d33:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x16d37:	mov rax, qword ptr [rbp - 0x38]     #	    if (this->dir_entry[this|-|>current_entry].executable)
MEMORY OFFSET:     -0x38     -56  >>-48

0x16d3b:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x16d3e:	movsxd rdx, eax                     
0x16d41:	mov rax, rdx                        #	    if (this->dir_entry|[|this->current_entry].executable)
0x16d44:	shl rax, 2                          
0x16d48:	add rax, rdx                        
0x16d4b:	shl rax, 4                          
0x16d4f:	add rax, rcx                        
0x16d52:	movzx eax, byte ptr [rax + 0x4a]    #	    if (this->dir_entry[this->current_entry]|.|executable)
MEMORY OFFSET:     0x4a     74  >>82

0x16d56:	test al, al                         #	    if |(|this->dir_entry[this->current_entry].executable)
0x16d58:	je 0x16e17                          
0x16d5e:	mov rax, qword ptr [rbp - 0x20]     #		cmd = xmalloc(32 + |s|trlen(name) + 1);
MEMORY OFFSET:     -0x20     -32  >>-24

0x16d62:	mov rdi, rax                        
0x16d65:	call 0x4960                         
0x16d6a:	add rax, 0x21                       #		cmd = |x|malloc(32 + strlen(name) + 1);
0x16d6e:	mov rdi, rax                        
0x16d71:	call 0x24650                        
0x16d76:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x16d7a:	mov rdx, qword ptr [rbp - 0x20]     #		|s|printf(cmd, "./\"%s\"", name);
MEMORY OFFSET:     -0x20     -32  >>-24

0x16d7e:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x16d82:	lea rcx, [rip + 0x11b97]            
MEMORY OFFSET:     0x11b97     72599  >>72607

0x16d89:	mov rsi, rcx                        
0x16d8c:	mov rdi, rax                        
0x16d8f:	mov eax, 0                          
0x16d94:	call 0x4dd0                         
0x16d99:	mov rax, qword ptr [rbp - 0x18]     #		|s|tart(cmd, 0);
MEMORY OFFSET:     -0x18     -24  >>-16

0x16d9d:	mov esi, 0                          
0x16da2:	mov rdi, rax                        
0x16da5:	call 0x1f6f0                        
0x16daa:	mov dword ptr [rip + 0x19b34], 1    #		wait_msg |=| 1;
MEMORY OFFSET:     0x19b34     105268  >>105276

0x16db4:	mov rax, qword ptr [rbp - 0x18]     #		|x|free(cmd);
MEMORY OFFSET:     -0x18     -24  >>-16

0x16db8:	mov rdi, rax                        
0x16dbb:	call 0x1eeae                        
0x16dc0:	mov eax, 0                          #		|t|ty_touch();
0x16dc5:	call 0xb9ce                         
0x16dca:	mov rax, qword ptr [rip + 0x19b27]  #		|t|ty_get_screen(screen);
MEMORY OFFSET:     0x19b27     105255  >>105263

0x16dd1:	mov rdi, rax                        
0x16dd4:	call 0xce1e                         
0x16dd9:	mov rax, qword ptr [rbp - 0x38]     #		|p|anel_no_optimizations(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16ddd:	mov rdi, rax                        
0x16de0:	call 0x110b0                        
0x16de5:	mov rax, qword ptr [rbp - 0x40]     #		|p|anel_no_optimizations(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x16de9:	mov rdi, rax                        
0x16dec:	call 0x110b0                        
0x16df1:	mov rax, qword ptr [rbp - 0x20]     #		|i|l_insert_text(name);
MEMORY OFFSET:     -0x20     -32  >>-24

0x16df5:	mov rdi, rax                        
0x16df8:	call 0xf433                         
0x16dfd:	mov rax, qword ptr [rbp - 0x38]     #		|t|ty_update_title(this->path);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16e01:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x16e05:	mov rdi, rax                        
0x16e08:	call 0xd875                         
0x16e0d:	mov eax, 1                          #		return |1|;
0x16e12:	jmp 0x16e1d                         
0x16e14:	nop                                 #		|b|reak;
0x16e15:	jmp 0x16e18                         
0x16e17:	nop                                 #	    |b|reak;
0x16e18:	mov eax, 0                          #    return |0|;
0x16e1d:	leave                               #|}|
0x16e1e:	ret                                 
0x16e1f:	endbr64                             #|{|
0x16e23:	push rbp                            
0x16e24:	mov rbp, rsp                        
0x16e27:	push rbx                            
0x16e28:	sub rsp, 0x78                       
0x16e2c:	mov qword ptr [rbp - 0x78], rdi     
MEMORY OFFSET:     -0x78     -120  >>-112

0x16e30:	mov qword ptr [rbp - 0x80], rsi     
MEMORY OFFSET:     -0x80     -128  >>-120

0x16e34:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x16e3d:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x16e41:	xor eax, eax                        
0x16e43:	mov qword ptr [rbp - 0x58], 0       #    char *file, *|d|ir = NULL, *msg, *input = NULL, *tmp_input;
MEMORY OFFSET:     -0x58     -88  >>-80

0x16e4b:	mov qword ptr [rbp - 0x50], 0       #    char *file, *dir = NULL, *msg, *|i|nput = NULL, *tmp_input;
MEMORY OFFSET:     -0x50     -80  >>-72

0x16e53:	mov rax, qword ptr [rbp - 0x78]     #    this->chkdest |=| ON;
MEMORY OFFSET:     -0x78     -120  >>-112

0x16e57:	mov dword ptr [rax + 0x90], 1       
MEMORY OFFSET:     0x90     144  >>152

0x16e61:	mov rax, qword ptr [rbp - 0x78]     #    if (this|-|>selected_entries == 0)
MEMORY OFFSET:     -0x78     -120  >>-112

0x16e65:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x16e68:	test eax, eax                       #    if |(|this->selected_entries == 0)
0x16e6a:	jne 0x17193                         
0x16e70:	mov rax, qword ptr [rbp - 0x78]     #	char *name = this|-|>dir_entry[this->current_entry].name;
MEMORY OFFSET:     -0x78     -120  >>-112

0x16e74:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x16e78:	mov rax, qword ptr [rbp - 0x78]     #	char *name = this->dir_entry[this|-|>current_entry].name;
MEMORY OFFSET:     -0x78     -120  >>-112

0x16e7c:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x16e7f:	movsxd rdx, eax                     
0x16e82:	mov rax, rdx                        #	char *name = this->dir_entry|[|this->current_entry].name;
0x16e85:	shl rax, 2                          
0x16e89:	add rax, rdx                        
0x16e8c:	shl rax, 4                          
0x16e90:	add rax, rcx                        
0x16e93:	mov rax, qword ptr [rax]            #	char *|n|ame = this->dir_entry[this->current_entry].name;
0x16e96:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x16e9a:	mov rax, qword ptr [rbp - 0x78]     #	if (this|-|>current_entry == 0 && !rootdir())
MEMORY OFFSET:     -0x78     -120  >>-112

0x16e9e:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x16ea1:	test eax, eax                       #	if |(|this->current_entry == 0 && !rootdir())
0x16ea3:	jne 0x16ecf                         
0x16ea5:	mov rax, qword ptr [rbp - 0x78]     #	if (this->current_entry == 0 && !|r|ootdir())
MEMORY OFFSET:     -0x78     -120  >>-112

0x16ea9:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x16ead:	movzx eax, byte ptr [rax]           
0x16eb0:	cmp al, 0x2f                        #	if (this->current_entry == 0 |&|& !rootdir())
0x16eb2:	jne 0x174ca                         
0x16eb8:	mov rax, qword ptr [rbp - 0x78]     #	if (this->current_entry == 0 && !|r|ootdir())
MEMORY OFFSET:     -0x78     -120  >>-112

0x16ebc:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x16ec0:	add rax, 1                          
0x16ec4:	movzx eax, byte ptr [rax]           
0x16ec7:	test al, al                         #	if (this->current_entry == 0 && |!|rootdir())
0x16ec9:	jne 0x174ca                         
0x16ecf:	mov rax, qword ptr [rbp - 0x38]     #	msg = xmalloc(16 + |s|trlen(name) + 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x16ed3:	mov rdi, rax                        
0x16ed6:	call 0x4960                         
0x16edb:	add rax, 0x11                       #	msg = |x|malloc(16 + strlen(name) + 1);
0x16edf:	mov rdi, rax                        
0x16ee2:	call 0x24650                        
0x16ee7:	mov qword ptr [rbp - 0x30], rax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x16eeb:	mov rax, qword ptr [rbp - 0x38]     #	|s|printf(msg, "Copy %s to: ", cutname(name, 0, 0));
MEMORY OFFSET:     -0x38     -56  >>-48

0x16eef:	mov edx, 0                          
0x16ef4:	mov esi, 0                          
0x16ef9:	mov rdi, rax                        
0x16efc:	mov eax, 0                          
0x16f01:	call 0x10d03                        
0x16f06:	mov rdx, rax                        
0x16f09:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x16f0d:	lea rcx, [rip + 0x11a13]            
MEMORY OFFSET:     0x11a13     72211  >>72219

0x16f14:	mov rsi, rcx                        
0x16f17:	mov rdi, rax                        
0x16f1a:	mov eax, 0                          
0x16f1f:	call 0x4dd0                         
0x16f24:	mov rax, qword ptr [rbp - 0x38]     #	len  = 1 + |s|trlen(name) + 1;
MEMORY OFFSET:     -0x38     -56  >>-48

0x16f28:	mov rdi, rax                        
0x16f2b:	call 0x4960                         
0x16f30:	add rax, 2                          #	len  |=| 1 + strlen(name) + 1;
0x16f34:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x16f38:	mov rax, qword ptr [rbp - 0x80]     #	file = xmalloc(strlen(other|-|>path) + len);
MEMORY OFFSET:     -0x80     -128  >>-120

0x16f3c:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x16f40:	mov rdi, rax                        #	file = xmalloc(|s|trlen(other->path) + len);
0x16f43:	call 0x4960                         
0x16f48:	mov rdx, qword ptr [rbp - 0x48]     #	file = |x|malloc(strlen(other->path) + len);
MEMORY OFFSET:     -0x48     -72  >>-64

0x16f4c:	add rax, rdx                        
0x16f4f:	mov rdi, rax                        
0x16f52:	call 0x24650                        
0x16f57:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x16f5b:	mov rax, qword ptr [rbp - 0x80]     #	|s|printf(file, "%s/%s", other->path, name);
MEMORY OFFSET:     -0x80     -128  >>-120

0x16f5f:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x16f63:	mov rcx, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x16f67:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x16f6b:	lea rsi, [rip + 0x1185d]            
MEMORY OFFSET:     0x1185d     71773  >>71781

0x16f72:	mov rdi, rax                        
0x16f75:	mov eax, 0                          
0x16f7a:	call 0x4dd0                         
0x16f7f:	mov rcx, qword ptr [rip + 0x1a67a]  #	if (!|i|l_read_line(msg, &input, file, copy_history))
MEMORY OFFSET:     0x1a67a     108154  >>108162

0x16f86:	mov rdx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x16f8a:	lea rsi, [rbp - 0x50]               
MEMORY OFFSET:     -0x50     -80  >>-72

0x16f8e:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x16f92:	mov rdi, rax                        
0x16f95:	call 0x5efb                         
0x16f9a:	test rax, rax                       #	if |(|!il_read_line(msg, &input, file, copy_history))
0x16f9d:	jne 0x16fb0                         
0x16f9f:	mov rax, qword ptr [rbp - 0x30]     #	    |x|free(msg);
MEMORY OFFSET:     -0x30     -48  >>-40

0x16fa3:	mov rdi, rax                        
0x16fa6:	call 0x1eeae                        
0x16fab:	jmp 0x174ce                         #	    |r|eturn;
0x16fb0:	mov rax, qword ptr [rbp - 0x30]     #	|x|free(msg);
MEMORY OFFSET:     -0x30     -48  >>-40

0x16fb4:	mov rdi, rax                        
0x16fb7:	call 0x1eeae                        
0x16fbc:	mov rax, qword ptr [rbp - 0x78]     #	if (|S|_ISDIR(this->dir_entry[this->current_entry].mode))
MEMORY OFFSET:     -0x78     -120  >>-112

0x16fc0:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x16fc4:	mov rax, qword ptr [rbp - 0x78]     
MEMORY OFFSET:     -0x78     -120  >>-112

0x16fc8:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x16fcb:	movsxd rdx, eax                     
0x16fce:	mov rax, rdx                        
0x16fd1:	shl rax, 2                          
0x16fd5:	add rax, rdx                        
0x16fd8:	shl rax, 4                          
0x16fdc:	add rax, rcx                        
0x16fdf:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x16fe2:	and eax, 0xf000                     
0x16fe7:	cmp eax, 0x4000                     #	if |(|S_ISDIR(this->dir_entry[this->current_entry].mode))
0x16fec:	jne 0x16fff                         
0x16fee:	mov rax, qword ptr [rip + 0x19503]  #	    |i|l_message(PANEL_COPY_DIR_MSG);
MEMORY OFFSET:     0x19503     103683  >>103691

0x16ff5:	mov rdi, rax                        
0x16ff8:	call 0xfcbe                         
0x16ffd:	jmp 0x1700e                         
0x16fff:	mov rax, qword ptr [rip + 0x194e2]  #	    |i|l_message(PANEL_COPY_FILE_MSG);
MEMORY OFFSET:     0x194e2     103650  >>103658

0x17006:	mov rdi, rax                        
0x17009:	call 0xfcbe                         
0x1700e:	mov eax, 0                          #	|t|ty_update();
0x17013:	call 0xb4b7                         
0x17018:	mov rax, qword ptr [rbp - 0x50]     #	tmp_input = |t|ilde_expand(input);
MEMORY OFFSET:     -0x50     -80  >>-72

0x1701c:	mov rdi, rax                        
0x1701f:	mov eax, 0                          
0x17024:	call 0x1fb51                        
0x17029:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1702d:	mov rax, qword ptr [rbp - 0x50]     #	|x|free(input);
MEMORY OFFSET:     -0x50     -80  >>-72

0x17031:	mov rdi, rax                        
0x17034:	call 0x1eeae                        
0x17039:	mov rax, qword ptr [rbp - 0x20]     #	input |=| tmp_input;
MEMORY OFFSET:     -0x20     -32  >>-24

0x1703d:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x17041:	mov rdx, qword ptr [rbp - 0x50]     #	error = |s|ame_file(name, input);
MEMORY OFFSET:     -0x50     -80  >>-72

0x17045:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x17049:	mov rsi, rdx                        
0x1704c:	mov rdi, rax                        
0x1704f:	mov eax, 0                          
0x17054:	call 0x15106                        
0x17059:	mov dword ptr [rbp - 0x5c], eax     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1705c:	mov rax, qword ptr [rbp - 0x28]     #	|x|free(file);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17060:	mov rdi, rax                        
0x17063:	call 0x1eeae                        
0x17068:	cmp dword ptr [rbp - 0x5c], 0       #	if |(|error)
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1706c:	je 0x170a9                          
0x1706e:	mov rdx, qword ptr [rbp - 0x50]     #	    |p|anel_3s_message("%s and %s point to the same file.",
MEMORY OFFSET:     -0x50     -80  >>-72

0x17072:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x17076:	mov r8d, 0x1e                       
0x1707c:	mov ecx, 0                          
0x17081:	mov rsi, rax                        
0x17084:	lea rax, [rip + 0x118ad]            
MEMORY OFFSET:     0x118ad     71853  >>71861

0x1708b:	mov rdi, rax                        
0x1708e:	mov eax, 0                          
0x17093:	call 0x115fd                        
0x17098:	mov rax, qword ptr [rbp - 0x50]     #	    |x|free(input);
MEMORY OFFSET:     -0x50     -80  >>-72

0x1709c:	mov rdi, rax                        
0x1709f:	call 0x1eeae                        
0x170a4:	jmp 0x174ce                         #	    |r|eturn;
0x170a9:	call 0x4bb0                         #	error = |p|anel_copy(this, name, input,
0x170ae:	mov ebx, eax                        
0x170b0:	call 0x4990                         
0x170b5:	mov edi, eax                        
0x170b7:	mov rax, qword ptr [rbp - 0x78]     #			   this|-|>dir_entry[this->current_entry].mode,
MEMORY OFFSET:     -0x78     -120  >>-112

0x170bb:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x170bf:	mov rax, qword ptr [rbp - 0x78]     #			   this->dir_entry[this|-|>current_entry].mode,
MEMORY OFFSET:     -0x78     -120  >>-112

0x170c3:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x170c6:	movsxd rdx, eax                     
0x170c9:	mov rax, rdx                        #			   this->dir_entry|[|this->current_entry].mode,
0x170cc:	shl rax, 2                          
0x170d0:	add rax, rdx                        
0x170d3:	shl rax, 4                          
0x170d7:	add rax, rcx                        
0x170da:	mov ecx, dword ptr [rax + 0x10]     #	error = |p|anel_copy(this, name, input,
MEMORY OFFSET:     0x10     16  >>24

0x170dd:	mov rdx, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x170e1:	mov rsi, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x170e5:	mov rax, qword ptr [rbp - 0x78]     
MEMORY OFFSET:     -0x78     -120  >>-112

0x170e9:	mov r9d, ebx                        
0x170ec:	mov r8d, edi                        
0x170ef:	mov rdi, rax                        
0x170f2:	mov eax, 0                          
0x170f7:	call 0x1537d                        
0x170fc:	mov dword ptr [rbp - 0x5c], eax     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x170ff:	mov rax, qword ptr [rbp - 0x50]     #	|x|free(input);
MEMORY OFFSET:     -0x50     -80  >>-72

0x17103:	mov rdi, rax                        
0x17106:	call 0x1eeae                        
0x1710b:	cmp dword ptr [rbp - 0x5c], 1       #	if |(|error != SD_OK && error != SD_CANCEL)
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1710f:	je 0x17158                          
0x17111:	cmp dword ptr [rbp - 0x5c], 2       #	if (error != SD_OK |&|& error != SD_CANCEL)
MEMORY OFFSET:     -0x5c     -92  >>-84

0x17115:	je 0x17158                          
0x17117:	mov eax, dword ptr [rbp - 0x5c]     #			     copyerr[error |-| 1], (char *)NULL,
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1711a:	sub eax, 1                          
0x1711d:	cdqe                                #	    |p|anel_3s_message("%s: Copy failed, %s.", name,
0x1711f:	lea rdx, [rax*8]                    
0x17127:	lea rax, [rip + 0x19452]            
MEMORY OFFSET:     0x19452     103506  >>103514

0x1712e:	mov rdx, qword ptr [rdx + rax]      
0x17132:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x17136:	mov r8d, 0x1e                       
0x1713c:	mov ecx, 0                          
0x17141:	mov rsi, rax                        
0x17144:	lea rax, [rip + 0x117c0]            
MEMORY OFFSET:     0x117c0     71616  >>71624

0x1714b:	mov rdi, rax                        
0x1714e:	mov eax, 0                          
0x17153:	call 0x115fd                        
0x17158:	mov eax, 0                          #	|s|tatus_default();
0x1715d:	call 0x10857                        
0x17162:	mov rax, qword ptr [rbp - 0x78]     #	|p|anel_update_size(this);
MEMORY OFFSET:     -0x78     -120  >>-112

0x17166:	mov rdi, rax                        
0x17169:	mov eax, 0                          
0x1716e:	call 0x13506                        
0x17173:	mov rax, qword ptr [rbp - 0x80]     #	|p|anel_update_size(other);
MEMORY OFFSET:     -0x80     -128  >>-120

0x17177:	mov rdi, rax                        
0x1717a:	mov eax, 0                          
0x1717f:	call 0x13506                        
0x17184:	mov eax, 0                          #	|t|ty_update();
0x17189:	call 0xb4b7                         
0x1718e:	jmp 0x17444                         
0x17193:	mov rcx, qword ptr [rip + 0x1a466]  #	if (!|i|l_read_line("Copy selected file(s) to: ", &dir,
MEMORY OFFSET:     0x1a466     107622  >>107630

0x1719a:	mov rax, qword ptr [rbp - 0x80]     
MEMORY OFFSET:     -0x80     -128  >>-120

0x1719e:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x171a2:	lea rax, [rbp - 0x58]               
MEMORY OFFSET:     -0x58     -88  >>-80

0x171a6:	mov rsi, rax                        
0x171a9:	lea rax, [rip + 0x117aa]            
MEMORY OFFSET:     0x117aa     71594  >>71602

0x171b0:	mov rdi, rax                        
0x171b3:	call 0x5efb                         
0x171b8:	test rax, rax                       #	if |(|!il_read_line("Copy selected file(s) to: ", &dir,
0x171bb:	je 0x174cd                          
0x171c1:	mov rdx, qword ptr [rbp - 0x58]     #	if (|s|ame_file(this->path, dir))
MEMORY OFFSET:     -0x58     -88  >>-80

0x171c5:	mov rax, qword ptr [rbp - 0x78]     
MEMORY OFFSET:     -0x78     -120  >>-112

0x171c9:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x171cd:	mov rsi, rdx                        
0x171d0:	mov rdi, rax                        
0x171d3:	mov eax, 0                          
0x171d8:	call 0x15106                        
0x171dd:	test eax, eax                       #	if |(|same_file(this->path, dir))
0x171df:	je 0x171ff                          
0x171e1:	mov edx, 0xc                        #	    |p|anel_1s_message(nice_try, (char *)NULL,
0x171e6:	mov esi, 0                          
0x171eb:	lea rax, [rip + 0x1934e]            
MEMORY OFFSET:     0x1934e     103246  >>103254

0x171f2:	mov rdi, rax                        
0x171f5:	call 0x5c09                         
0x171fa:	jmp 0x174ce                         #	    |r|eturn;
0x171ff:	mov rax, qword ptr [rbp - 0x58]     #	dir = xrealloc(dir, (len = |s|trlen(dir) + 1) + 1);
MEMORY OFFSET:     -0x58     -88  >>-80

0x17203:	mov rdi, rax                        
0x17206:	call 0x4960                         
0x1720b:	add rax, 1                          #	dir = xrealloc(dir, (len |=| strlen(dir) + 1) + 1);
0x1720f:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x17213:	mov rax, qword ptr [rbp - 0x48]     #	dir = |x|realloc(dir, (len = strlen(dir) + 1) + 1);
MEMORY OFFSET:     -0x48     -72  >>-64

0x17217:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1721b:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x1721f:	mov rsi, rdx                        
0x17222:	mov rdi, rax                        
0x17225:	call 0x24670                        
0x1722a:	mov qword ptr [rbp - 0x58], rax     #	dir |=| xrealloc(dir, (len = strlen(dir) + 1) + 1);
MEMORY OFFSET:     -0x58     -88  >>-80

0x1722e:	mov rdx, qword ptr [rbp - 0x58]     #	dir|[|len-1] = '/';
MEMORY OFFSET:     -0x58     -88  >>-80

0x17232:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x17236:	sub rax, 1                          
0x1723a:	add rax, rdx                        
0x1723d:	mov byte ptr [rax], 0x2f            #	dir[len-1] |=| '/';
0x17240:	mov rdx, qword ptr [rbp - 0x58]     #	dir|[|len  ] = '\0';
MEMORY OFFSET:     -0x58     -88  >>-80

0x17244:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x17248:	add rax, rdx                        
0x1724b:	mov byte ptr [rax], 0               #	dir[len  ] |=| '\0';
0x1724e:	mov rax, qword ptr [rbp - 0x78]     #	|p|anel_init_iterator(this);
MEMORY OFFSET:     -0x78     -120  >>-112

0x17252:	mov rdi, rax                        
0x17255:	call 0x13121                        
0x1725a:	jmp 0x173fc                         #	while |(|(entry = panel_get_next(this)) != -1)
0x1725f:	mov rax, qword ptr [rbp - 0x78]     #	    char *name  = this|-|>dir_entry[entry].name;
MEMORY OFFSET:     -0x78     -120  >>-112

0x17263:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x17267:	mov eax, dword ptr [rbp - 0x6c]     #	    char *name  = this->dir_entry|[|entry].name;
MEMORY OFFSET:     -0x6c     -108  >>-100

0x1726a:	movsxd rdx, eax                     
0x1726d:	mov rax, rdx                        
0x17270:	shl rax, 2                          
0x17274:	add rax, rdx                        
0x17277:	shl rax, 4                          
0x1727b:	add rax, rcx                        
0x1727e:	mov rax, qword ptr [rax]            #	    char *|n|ame  = this->dir_entry[entry].name;
0x17281:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x17285:	mov rax, qword ptr [rbp - 0x78]     #	    mode_t mode = this|-|>dir_entry[entry].mode;
MEMORY OFFSET:     -0x78     -120  >>-112

0x17289:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1728d:	mov eax, dword ptr [rbp - 0x6c]     #	    mode_t mode = this->dir_entry|[|entry].mode;
MEMORY OFFSET:     -0x6c     -108  >>-100

0x17290:	movsxd rdx, eax                     
0x17293:	mov rax, rdx                        
0x17296:	shl rax, 2                          
0x1729a:	add rax, rdx                        
0x1729d:	shl rax, 4                          
0x172a1:	add rax, rcx                        
0x172a4:	mov eax, dword ptr [rax + 0x10]     #	    mode_t |m|ode = this->dir_entry[entry].mode;
MEMORY OFFSET:     0x10     16  >>24

0x172a7:	mov dword ptr [rbp - 0x68], eax     
MEMORY OFFSET:     -0x68     -104  >>-96

0x172aa:	call 0x4990                         #	    uid_t uid = |g|etuid();
0x172af:	mov dword ptr [rbp - 0x64], eax     
MEMORY OFFSET:     -0x64     -100  >>-92

0x172b2:	call 0x4bb0                         #	    gid_t gid = |g|etgid();
0x172b7:	mov dword ptr [rbp - 0x60], eax     
MEMORY OFFSET:     -0x60     -96  >>-88

0x172ba:	mov rax, qword ptr [rbp - 0x40]     #	    dir = xrealloc(dir, len + |s|trlen(name) + 1);
MEMORY OFFSET:     -0x40     -64  >>-56

0x172be:	mov rdi, rax                        
0x172c1:	call 0x4960                         
0x172c6:	mov rdx, qword ptr [rbp - 0x48]     #	    dir = xrealloc(dir, len |+| strlen(name) + 1);
MEMORY OFFSET:     -0x48     -72  >>-64

0x172ca:	add rax, rdx                        
0x172cd:	lea rdx, [rax + 1]                  #	    dir = |x|realloc(dir, len + strlen(name) + 1);
MEMORY OFFSET:     0x1     1  >>9

0x172d1:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x172d5:	mov rsi, rdx                        
0x172d8:	mov rdi, rax                        
0x172db:	call 0x24670                        
0x172e0:	mov qword ptr [rbp - 0x58], rax     #	    dir |=| xrealloc(dir, len + strlen(name) + 1);
MEMORY OFFSET:     -0x58     -88  >>-80

0x172e4:	mov rdx, qword ptr [rbp - 0x58]     #	    |s|trcpy(dir + len, name);
MEMORY OFFSET:     -0x58     -88  >>-80

0x172e8:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x172ec:	add rdx, rax                        
0x172ef:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x172f3:	mov rsi, rax                        
0x172f6:	mov rdi, rdx                        
0x172f9:	call 0x4870                         
0x172fe:	mov eax, 0                          #	    if (|c|anceled())
0x17303:	call 0x15065                        
0x17308:	test eax, eax                       #	    if |(|canceled())
0x1730a:	jne 0x17417                         
0x17310:	mov rax, qword ptr [rip + 0x191d9]  #	    |i|l_message(PANEL_COPY_FILES_MSG);
MEMORY OFFSET:     0x191d9     102873  >>102881

0x17317:	mov rdi, rax                        
0x1731a:	call 0xfcbe                         
0x1731f:	mov eax, 0                          #	    |t|ty_update();
0x17324:	call 0xb4b7                         
0x17329:	mov rdx, qword ptr [rbp - 0x58]     #	    error = |p|anel_copy(this, name, dir, mode, uid, gid);
MEMORY OFFSET:     -0x58     -88  >>-80

0x1732d:	mov r8d, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x17331:	mov edi, dword ptr [rbp - 0x64]     
MEMORY OFFSET:     -0x64     -100  >>-92

0x17334:	mov ecx, dword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x17337:	mov rsi, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1733b:	mov rax, qword ptr [rbp - 0x78]     
MEMORY OFFSET:     -0x78     -120  >>-112

0x1733f:	mov r9d, r8d                        
0x17342:	mov r8d, edi                        
0x17345:	mov rdi, rax                        
0x17348:	mov eax, 0                          
0x1734d:	call 0x1537d                        
0x17352:	mov dword ptr [rbp - 0x5c], eax     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x17355:	cmp dword ptr [rbp - 0x5c], 1       #	    if |(|error != SD_OK)
MEMORY OFFSET:     -0x5c     -92  >>-84

0x17359:	je 0x173b7                          
0x1735b:	cmp dword ptr [rbp - 0x5c], 2       #		if |(|error == SD_CANCEL)
MEMORY OFFSET:     -0x5c     -92  >>-84

0x1735f:	je 0x1741a                          
0x17365:	cmp dword ptr [rbp - 0x5c], 3       #		if |(|error == SD_SKIP)
MEMORY OFFSET:     -0x5c     -92  >>-84

0x17369:	jne 0x17370                         
0x1736b:	jmp 0x173fc                         #		    |c|ontinue;
0x17370:	mov eax, dword ptr [rbp - 0x5c]     #				     name, copyerr[error |-| 1], (char *)NULL,
MEMORY OFFSET:     -0x5c     -92  >>-84

0x17373:	sub eax, 1                          
0x17376:	cdqe                                #		if (|p|anel_3s_message("%s: Copy failed, %s.",
0x17378:	lea rdx, [rax*8]                    
0x17380:	lea rax, [rip + 0x191f9]            
MEMORY OFFSET:     0x191f9     102905  >>102913

0x17387:	mov rdx, qword ptr [rdx + rax]      
0x1738b:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1738f:	mov r8d, 0xe                        
0x17395:	mov ecx, 0                          
0x1739a:	mov rsi, rax                        
0x1739d:	lea rax, [rip + 0x11567]            
MEMORY OFFSET:     0x11567     71015  >>71023

0x173a4:	mov rdi, rax                        
0x173a7:	mov eax, 0                          
0x173ac:	call 0x115fd                        
0x173b1:	test al, al                         #		if |(|panel_3s_message("%s: Copy failed, %s.",
0x173b3:	jne 0x173da                         
0x173b5:	jmp 0x1741b                         #		    |b|reak;
0x173b7:	mov rax, qword ptr [rbp - 0x78]     #		this|-|>dir_entry[entry].selected = 0;
MEMORY OFFSET:     -0x78     -120  >>-112

0x173bb:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x173bf:	mov eax, dword ptr [rbp - 0x6c]     #		this->dir_entry|[|entry].selected = 0;
MEMORY OFFSET:     -0x6c     -108  >>-100

0x173c2:	movsxd rdx, eax                     
0x173c5:	mov rax, rdx                        
0x173c8:	shl rax, 2                          
0x173cc:	add rax, rdx                        
0x173cf:	shl rax, 4                          
0x173d3:	add rax, rcx                        
0x173d6:	mov byte ptr [rax + 0x49], 0        #		this->dir_entry[entry].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x173da:	mov rax, qword ptr [rbp - 0x78]     #	    |p|anel_update_size(this);
MEMORY OFFSET:     -0x78     -120  >>-112

0x173de:	mov rdi, rax                        
0x173e1:	mov eax, 0                          
0x173e6:	call 0x13506                        
0x173eb:	mov rax, qword ptr [rbp - 0x80]     #	    |p|anel_update_size(other);
MEMORY OFFSET:     -0x80     -128  >>-120

0x173ef:	mov rdi, rax                        
0x173f2:	mov eax, 0                          
0x173f7:	call 0x13506                        
0x173fc:	mov rax, qword ptr [rbp - 0x78]     #	while ((entry = |p|anel_get_next(this)) != -1)
MEMORY OFFSET:     -0x78     -120  >>-112

0x17400:	mov rdi, rax                        
0x17403:	call 0x13149                        
0x17408:	mov dword ptr [rbp - 0x6c], eax     
MEMORY OFFSET:     -0x6c     -108  >>-100

0x1740b:	cmp dword ptr [rbp - 0x6c], -1      #	while ((entry = panel_get_next(this)) |!|= -1)
MEMORY OFFSET:     -0x6c     -108  >>-100

0x1740f:	jne 0x1725f                         
0x17415:	jmp 0x1741b                         
0x17417:	nop                                 #		|b|reak;
0x17418:	jmp 0x1741b                         
0x1741a:	nop                                 #		    |b|reak;
0x1741b:	mov rax, qword ptr [rbp - 0x58]     #	if (|d|ir)
MEMORY OFFSET:     -0x58     -88  >>-80

0x1741f:	test rax, rax                       #	if |(|dir)
0x17422:	je 0x17430                          
0x17424:	mov rax, qword ptr [rbp - 0x58]     #	    |x|free(dir);
MEMORY OFFSET:     -0x58     -88  >>-80

0x17428:	mov rdi, rax                        
0x1742b:	call 0x1eeae                        
0x17430:	mov eax, 0                          #	|s|tatus_default();
0x17435:	call 0x10857                        
0x1743a:	mov eax, 0                          #	|t|ty_update();
0x1743f:	call 0xb4b7                         
0x17444:	mov rax, qword ptr [rbp - 0x80]     #    if (!|p|anel_read_directory(other, other->path, ON))
MEMORY OFFSET:     -0x80     -128  >>-120

0x17448:	mov rcx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1744c:	mov rax, qword ptr [rbp - 0x80]     
MEMORY OFFSET:     -0x80     -128  >>-120

0x17450:	mov edx, 1                          
0x17455:	mov rsi, rcx                        
0x17458:	mov rdi, rax                        
0x1745b:	mov eax, 0                          
0x17460:	call 0x12238                        
0x17465:	test eax, eax                       #    if |(|!panel_read_directory(other, other->path, ON))
0x17467:	jne 0x1747a                         
0x17469:	mov rax, qword ptr [rbp - 0x80]     #	|p|anel_recover(other);
MEMORY OFFSET:     -0x80     -128  >>-120

0x1746d:	mov rdi, rax                        
0x17470:	mov eax, 0                          
0x17475:	call 0x116a7                        
0x1747a:	mov rax, qword ptr [rbp - 0x80]     #    |p|anel_update(other);
MEMORY OFFSET:     -0x80     -128  >>-120

0x1747e:	mov rdi, rax                        
0x17481:	call 0x14e6a                        
0x17486:	mov rax, qword ptr [rbp - 0x78]     #    if (!|p|anel_read_directory(this, this->path, ON))
MEMORY OFFSET:     -0x78     -120  >>-112

0x1748a:	mov rcx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1748e:	mov rax, qword ptr [rbp - 0x78]     
MEMORY OFFSET:     -0x78     -120  >>-112

0x17492:	mov edx, 1                          
0x17497:	mov rsi, rcx                        
0x1749a:	mov rdi, rax                        
0x1749d:	mov eax, 0                          
0x174a2:	call 0x12238                        
0x174a7:	test eax, eax                       #    if |(|!panel_read_directory(this, this->path, ON))
0x174a9:	jne 0x174bc                         
0x174ab:	mov rax, qword ptr [rbp - 0x78]     #	|p|anel_recover(this);
MEMORY OFFSET:     -0x78     -120  >>-112

0x174af:	mov rdi, rax                        
0x174b2:	mov eax, 0                          
0x174b7:	call 0x116a7                        
0x174bc:	mov rax, qword ptr [rbp - 0x78]     #    |p|anel_update(this);
MEMORY OFFSET:     -0x78     -120  >>-112

0x174c0:	mov rdi, rax                        
0x174c3:	call 0x14e6a                        
0x174c8:	jmp 0x174ce                         
0x174ca:	nop                                 #	    |r|eturn;
0x174cb:	jmp 0x174ce                         
0x174cd:	nop                                 #	    |r|eturn;
0x174ce:	mov rax, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x174d2:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x174db:	je 0x174e2                          
0x174dd:	call 0x4980                         
0x174e2:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x174e6:	leave                               
0x174e7:	ret                                 
0x174e8:	endbr64                             #|{|
0x174ec:	push rbp                            
0x174ed:	mov rbp, rsp                        
0x174f0:	sub rsp, 0x40                       
0x174f4:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x174f8:	mov qword ptr [rbp - 0x40], rsi     
MEMORY OFFSET:     -0x40     -64  >>-56

0x174fc:	mov dword ptr [rbp - 0x30], 1       #    int |k|eep_asking = 1;
MEMORY OFFSET:     -0x30     -48  >>-40

0x17503:	mov dword ptr [rbp - 0x28], 0       #    int first_entry, entry, |a|nswer = 0, result;
MEMORY OFFSET:     -0x28     -40  >>-32

0x1750a:	mov rax, qword ptr [rbp - 0x38]     #    if (this|-|>selected_entries == 0 &&
MEMORY OFFSET:     -0x38     -56  >>-48

0x1750e:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x17511:	test eax, eax                       #    if |(|this->selected_entries == 0 &&
0x17513:	jne 0x1754a                         
0x17515:	mov rax, qword ptr [rbp - 0x38]     #	(this|-|>current_entry == 0 && !rootdir()))
MEMORY OFFSET:     -0x38     -56  >>-48

0x17519:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1751c:	test eax, eax                       #    if (this->selected_entries == 0 |&|&
0x1751e:	jne 0x1754a                         
0x17520:	mov rax, qword ptr [rbp - 0x38]     #	(this->current_entry == 0 && !|r|ootdir()))
MEMORY OFFSET:     -0x38     -56  >>-48

0x17524:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x17528:	movzx eax, byte ptr [rax]           
0x1752b:	cmp al, 0x2f                        #	(this->current_entry == 0 |&|& !rootdir()))
0x1752d:	jne 0x17a0c                         
0x17533:	mov rax, qword ptr [rbp - 0x38]     #	(this->current_entry == 0 && !|r|ootdir()))
MEMORY OFFSET:     -0x38     -56  >>-48

0x17537:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1753b:	add rax, 1                          
0x1753f:	movzx eax, byte ptr [rax]           
0x17542:	test al, al                         #	(this->current_entry == 0 && |!|rootdir()))
0x17544:	jne 0x17a0c                         
0x1754a:	mov edx, 0                          #    if (|p|anel_1s_message("Delete selected entries? ","yn",IL_FREEZED) != 'y')
0x1754f:	lea rax, [rip + 0x110f0]            
MEMORY OFFSET:     0x110f0     69872  >>69880

0x17556:	mov rsi, rax                        
0x17559:	lea rax, [rip + 0x11415]            
MEMORY OFFSET:     0x11415     70677  >>70685

0x17560:	mov rdi, rax                        
0x17563:	call 0x5c09                         
0x17568:	cmp al, 0x79                        #    if |(|panel_1s_message("Delete selected entries? ","yn",IL_FREEZED) != 'y')
0x1756a:	jne 0x17a0f                         
0x17570:	mov dword ptr [rbp - 0x2c], 0       #    for (first_entry |=| 0; first_entry < this->entries; first_entry++)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x17577:	jmp 0x175a4                         #    |f|or (first_entry = 0; first_entry < this->entries; first_entry++)
0x17579:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>dir_entry[first_entry].selected)
MEMORY OFFSET:     -0x38     -56  >>-48

0x1757d:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x17581:	mov eax, dword ptr [rbp - 0x2c]     #	if (this->dir_entry|[|first_entry].selected)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x17584:	movsxd rdx, eax                     
0x17587:	mov rax, rdx                        
0x1758a:	shl rax, 2                          
0x1758e:	add rax, rdx                        
0x17591:	shl rax, 4                          
0x17595:	add rax, rcx                        
0x17598:	movzx eax, byte ptr [rax + 0x49]    #	if (this->dir_entry[first_entry]|.|selected)
MEMORY OFFSET:     0x49     73  >>81

0x1759c:	test al, al                         #	if |(|this->dir_entry[first_entry].selected)
0x1759e:	jne 0x175b2                         
0x175a0:	add dword ptr [rbp - 0x2c], 1       #    for (first_entry = 0; first_entry < this->entries; first_entry|+|+)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x175a4:	mov rax, qword ptr [rbp - 0x38]     #    for (first_entry = 0; first_entry < this|-|>entries; first_entry++)
MEMORY OFFSET:     -0x38     -56  >>-48

0x175a8:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x175ab:	cmp dword ptr [rbp - 0x2c], eax     #    for (first_entry = 0; first_entry |<| this->entries; first_entry++)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x175ae:	jl 0x17579                          
0x175b0:	jmp 0x175b3                         
0x175b2:	nop                                 #	    |b|reak;
0x175b3:	mov rax, qword ptr [rbp - 0x38]     #    |p|anel_init_iterator(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x175b7:	mov rdi, rax                        
0x175ba:	call 0x13121                        
0x175bf:	jmp 0x178ed                         #    while |(|(entry = panel_get_next(this)) != -1)
0x175c4:	mov rax, qword ptr [rbp - 0x38]     #	char *name = this|-|>dir_entry[entry].name;
MEMORY OFFSET:     -0x38     -56  >>-48

0x175c8:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x175cc:	mov eax, dword ptr [rbp - 0x1c]     #	char *name = this->dir_entry|[|entry].name;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x175cf:	movsxd rdx, eax                     
0x175d2:	mov rax, rdx                        
0x175d5:	shl rax, 2                          
0x175d9:	add rax, rdx                        
0x175dc:	shl rax, 4                          
0x175e0:	add rax, rcx                        
0x175e3:	mov rax, qword ptr [rax]            #	char *|n|ame = this->dir_entry[entry].name;
0x175e6:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x175ea:	mov dword ptr [rbp - 0x20], 0       #	int |i|nterrupted=0;
MEMORY OFFSET:     -0x20     -32  >>-24

0x175f1:	mov eax, 0                          #	|s|ervice_pending_signals();
0x175f6:	call 0x1ea4b                        
0x175fb:	mov rax, qword ptr [rbp - 0x18]     #	msg = xmalloc(32 + |s|trlen(name));
MEMORY OFFSET:     -0x18     -24  >>-16

0x175ff:	mov rdi, rax                        
0x17602:	call 0x4960                         
0x17607:	add rax, 0x20                       #	msg = |x|malloc(32 + strlen(name));
0x1760b:	mov rdi, rax                        
0x1760e:	call 0x24650                        
0x17613:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x17617:	mov rdx, qword ptr [rbp - 0x18]     #	|s|printf(msg, "(DELETE) %s", name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1761b:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1761f:	lea rcx, [rip + 0x11369]            
MEMORY OFFSET:     0x11369     70505  >>70513

0x17626:	mov rsi, rcx                        
0x17629:	mov rdi, rax                        
0x1762c:	mov eax, 0                          
0x17631:	call 0x4dd0                         
0x17636:	mov rax, qword ptr [rbp - 0x10]     #	|s|tatus(msg, STATUS_ERROR, STATUS_LEFT);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1763a:	mov edx, 1                          
0x1763f:	mov esi, 2                          
0x17644:	mov rdi, rax                        
0x17647:	call 0x107d0                        
0x1764c:	mov eax, 0                          #	|t|ty_update();
0x17651:	call 0xb4b7                         
0x17656:	mov rax, qword ptr [rbp - 0x10]     #	|x|free(msg);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1765a:	mov rdi, rax                        
0x1765d:	call 0x1eeae                        
0x17662:	mov eax, 0                          #	if (|c|anceled())
0x17667:	call 0x15065                        
0x1766c:	test eax, eax                       #	if |(|canceled())
0x1766e:	jne 0x17908                         
0x17674:	cmp dword ptr [rbp - 0x30], 0       #	if |(|keep_asking)
MEMORY OFFSET:     -0x30     -48  >>-40

0x17678:	je 0x176a7                          
0x1767a:	mov rax, qword ptr [rbp - 0x18]     #	    answer = |p|anel_2s_message("Delete %s? (Yes/Skip/All/Cancel) ",
MEMORY OFFSET:     -0x18     -24  >>-16

0x1767e:	mov ecx, 2                          
0x17683:	lea rdx, [rip + 0x11311]            
MEMORY OFFSET:     0x11311     70417  >>70425

0x1768a:	mov rsi, rax                        
0x1768d:	lea rax, [rip + 0x1130c]            
MEMORY OFFSET:     0x1130c     70412  >>70420

0x17694:	mov rdi, rax                        
0x17697:	mov eax, 0                          
0x1769c:	call 0x11568                        
0x176a1:	movsx eax, al                       #	    answer |=| panel_2s_message("Delete %s? (Yes/Skip/All/Cancel) ",
0x176a4:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x176a7:	mov rax, qword ptr [rip + 0x18e5a]  #	|i|l_message(PANEL_DELETE_FILES_MSG);
MEMORY OFFSET:     0x18e5a     101978  >>101986

0x176ae:	mov rdi, rax                        
0x176b1:	call 0xfcbe                         
0x176b6:	mov eax, 0                          #	|t|ty_update();
0x176bb:	call 0xb4b7                         
0x176c0:	cmp dword ptr [rbp - 0x28], 0x61    #	if |(|answer == 'a')
MEMORY OFFSET:     -0x28     -40  >>-32

0x176c4:	jne 0x176cf                         
0x176c6:	mov dword ptr [rbp - 0x30], 0       #	    keep_asking |=| 0;
MEMORY OFFSET:     -0x30     -48  >>-40

0x176cd:	jmp 0x176ee                         
0x176cf:	cmp dword ptr [rbp - 0x28], 0x73    #	else if |(|answer == 's')
MEMORY OFFSET:     -0x28     -40  >>-32

0x176d3:	jne 0x176da                         
0x176d5:	jmp 0x178ed                         #	    |c|ontinue;
0x176da:	cmp dword ptr [rbp - 0x28], 0x63    #	else if |(|answer == 'c')
MEMORY OFFSET:     -0x28     -40  >>-32

0x176de:	je 0x1790b                          
0x176e4:	cmp dword ptr [rbp - 0x28], 0x79    #	else if |(|answer != 'y')
MEMORY OFFSET:     -0x28     -40  >>-32

0x176e8:	jne 0x1790e                         
0x176ee:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>dir_entry[entry].type == DIR_ENTRY)
MEMORY OFFSET:     -0x38     -56  >>-48

0x176f2:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x176f6:	mov eax, dword ptr [rbp - 0x1c]     #	if (this->dir_entry|[|entry].type == DIR_ENTRY)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x176f9:	movsxd rdx, eax                     
0x176fc:	mov rax, rdx                        
0x176ff:	shl rax, 2                          
0x17703:	add rax, rdx                        
0x17706:	shl rax, 4                          
0x1770a:	add rax, rcx                        
0x1770d:	movzx eax, byte ptr [rax + 0x48]    #	if (this->dir_entry[entry]|.|type == DIR_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x17711:	test al, al                         #	if |(|this->dir_entry[entry].type == DIR_ENTRY)
0x17713:	jne 0x1784d                         
0x17719:	mov rax, qword ptr [rip + 0x18de0]  #	    |i|l_message(PANEL_DELETE_DIR_MSG);
MEMORY OFFSET:     0x18de0     101856  >>101864

0x17720:	mov rdi, rax                        
0x17723:	call 0xfcbe                         
0x17728:	mov eax, 0                          #	    |t|ty_update();
0x1772d:	call 0xb4b7                         
0x17732:	mov rax, qword ptr [rbp - 0x18]     #	    result = (|r|mdir(name) == 0);
MEMORY OFFSET:     -0x18     -24  >>-16

0x17736:	mov rdi, rax                        
0x17739:	call 0x4940                         
0x1773e:	test eax, eax                       #	    result = (rmdir(name) |=|= 0);
0x17740:	sete al                             
0x17743:	movzx eax, al                       #	    result |=| (rmdir(name) == 0);
0x17746:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x17749:	cmp dword ptr [rbp - 0x24], 0       #	    if |(|!result)
MEMORY OFFSET:     -0x24     -36  >>-28

0x1774d:	jne 0x17864                         
0x17753:	mov rax, qword ptr [rbp - 0x18]     #		if (|p|anel_2s_message(
MEMORY OFFSET:     -0x18     -24  >>-16

0x17757:	mov ecx, 0x12                       
0x1775c:	lea rdx, [rip + 0x10ee3]            
MEMORY OFFSET:     0x10ee3     69347  >>69355

0x17763:	mov rsi, rax                        
0x17766:	lea rax, [rip + 0x1125b]            
MEMORY OFFSET:     0x1125b     70235  >>70243

0x1776d:	mov rdi, rax                        
0x17770:	mov eax, 0                          
0x17775:	call 0x11568                        
0x1777a:	cmp al, 0x79                        #		if |(|panel_2s_message(
0x1777c:	jne 0x17864                         
0x17782:	mov rax, qword ptr [rbp - 0x18]     #		    command = xmalloc(32 + |s|trlen(name) + 1);
MEMORY OFFSET:     -0x18     -24  >>-16

0x17786:	mov rdi, rax                        
0x17789:	call 0x4960                         
0x1778e:	add rax, 0x21                       #		    command = |x|malloc(32 + strlen(name) + 1);
0x17792:	mov rdi, rax                        
0x17795:	call 0x24650                        
0x1779a:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1779e:	mov rdx, qword ptr [rbp - 0x18]     #		    |s|printf(command, "rm -r -f \"%s\"", name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x177a2:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x177a6:	lea rcx, [rip + 0x11249]            
MEMORY OFFSET:     0x11249     70217  >>70225

0x177ad:	mov rsi, rcx                        
0x177b0:	mov rdi, rax                        
0x177b3:	mov eax, 0                          
0x177b8:	call 0x4dd0                         
0x177bd:	mov rax, qword ptr [rbp - 8]        #		    result = |s|tart(command, 1);
MEMORY OFFSET:     -0x8     -8  >>0

0x177c1:	mov esi, 1                          
0x177c6:	mov rdi, rax                        
0x177c9:	call 0x1f6f0                        
0x177ce:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x177d1:	mov rax, qword ptr [rbp - 8]        #		    |x|free(command);
MEMORY OFFSET:     -0x8     -8  >>0

0x177d5:	mov rdi, rax                        
0x177d8:	call 0x1eeae                        
0x177dd:	mov rax, qword ptr [rbp - 0x38]     #		    |t|ty_update_title(this->path);
MEMORY OFFSET:     -0x38     -56  >>-48

0x177e1:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x177e5:	mov rdi, rax                        
0x177e8:	call 0xd875                         
0x177ed:	mov eax, dword ptr [rbp - 0x24]     #		    if(|W|IFSIGNALED(result))
MEMORY OFFSET:     -0x24     -36  >>-28

0x177f0:	and eax, 0x7f                       
0x177f3:	add eax, 1                          
0x177f6:	sar al, 1                           
0x177f8:	test al, al                         #		    if|(|WIFSIGNALED(result))
0x177fa:	jle 0x1780c                         
0x177fc:	mov dword ptr [rbp - 0x24], 0       #			result|=|0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x17803:	mov dword ptr [rbp - 0x20], 1       #			interrupted|=|1;
MEMORY OFFSET:     -0x20     -32  >>-24

0x1780a:	jmp 0x17864                         
0x1780c:	mov eax, dword ptr [rbp - 0x24]     #		    else if(|W|IFEXITED(result))
MEMORY OFFSET:     -0x24     -36  >>-28

0x1780f:	and eax, 0x7f                       
0x17812:	test eax, eax                       #		    else if|(|WIFEXITED(result))
0x17814:	jne 0x17844                         
0x17816:	mov eax, dword ptr [rbp - 0x24]     #			if(|W|EXITSTATUS(result) != 0)
MEMORY OFFSET:     -0x24     -36  >>-28

0x17819:	sar eax, 8                          
0x1781c:	movzx eax, al                       
0x1781f:	test eax, eax                       #			if|(|WEXITSTATUS(result) != 0)
0x17821:	je 0x1783b                          
0x17823:	lea rax, [rip + 0x111da]            #			    |d|isplay_errors("rm");
MEMORY OFFSET:     0x111da     70106  >>70114

0x1782a:	mov rdi, rax                        
0x1782d:	call 0x1f808                        
0x17832:	mov dword ptr [rbp - 0x24], 0       #			    result|=|0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x17839:	jmp 0x17864                         
0x1783b:	mov dword ptr [rbp - 0x24], 1       #			    result|=|1; /* ok */
MEMORY OFFSET:     -0x24     -36  >>-28

0x17842:	jmp 0x17864                         
0x17844:	mov dword ptr [rbp - 0x24], 0       #			result|=|0; /* unknown error */
MEMORY OFFSET:     -0x24     -36  >>-28

0x1784b:	jmp 0x17864                         
0x1784d:	mov rax, qword ptr [rbp - 0x18]     #	    result = |u|nlink(name) == 0;
MEMORY OFFSET:     -0x18     -24  >>-16

0x17851:	mov rdi, rax                        
0x17854:	call 0x4830                         
0x17859:	test eax, eax                       #	    result = unlink(name) |=|= 0;
0x1785b:	sete al                             
0x1785e:	movzx eax, al                       #	    result |=| unlink(name) == 0;
0x17861:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x17864:	cmp dword ptr [rbp - 0x20], 0       #	if |(|interrupted)
MEMORY OFFSET:     -0x20     -32  >>-24

0x17868:	je 0x17897                          
0x1786a:	mov rax, qword ptr [rbp - 0x18]     #	    if (|p|anel_2s_message("%s: Deletion interrupted.  Continue? ",
MEMORY OFFSET:     -0x18     -24  >>-16

0x1786e:	mov ecx, 0xe                        
0x17873:	lea rdx, [rip + 0x10dcc]            
MEMORY OFFSET:     0x10dcc     69068  >>69076

0x1787a:	mov rsi, rax                        
0x1787d:	lea rax, [rip + 0x11184]            
MEMORY OFFSET:     0x11184     70020  >>70028

0x17884:	mov rdi, rax                        
0x17887:	mov eax, 0                          
0x1788c:	call 0x11568                        
0x17891:	cmp al, 0x79                        #	    if |(|panel_2s_message("%s: Deletion interrupted.  Continue? ",
0x17893:	je 0x178ed                          
0x17895:	jmp 0x1790f                         #		|b|reak;
0x17897:	cmp dword ptr [rbp - 0x24], 0       #	else if |(|!result)
MEMORY OFFSET:     -0x24     -36  >>-28

0x1789b:	jne 0x178ca                         
0x1789d:	mov rax, qword ptr [rbp - 0x18]     #	    if (|p|anel_2s_message("%s: Deletion failed.  Continue? ",
MEMORY OFFSET:     -0x18     -24  >>-16

0x178a1:	mov ecx, 0xe                        
0x178a6:	lea rdx, [rip + 0x10d99]            
MEMORY OFFSET:     0x10d99     69017  >>69025

0x178ad:	mov rsi, rax                        
0x178b0:	lea rax, [rip + 0x11179]            
MEMORY OFFSET:     0x11179     70009  >>70017

0x178b7:	mov rdi, rax                        
0x178ba:	mov eax, 0                          
0x178bf:	call 0x11568                        
0x178c4:	cmp al, 0x79                        #	    if |(|panel_2s_message("%s: Deletion failed.  Continue? ",
0x178c6:	je 0x178ed                          
0x178c8:	jmp 0x1790f                         #		|b|reak;
0x178ca:	mov rax, qword ptr [rbp - 0x38]     #	    this|-|>dir_entry[entry].selected = 0;
MEMORY OFFSET:     -0x38     -56  >>-48

0x178ce:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x178d2:	mov eax, dword ptr [rbp - 0x1c]     #	    this->dir_entry|[|entry].selected = 0;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x178d5:	movsxd rdx, eax                     
0x178d8:	mov rax, rdx                        
0x178db:	shl rax, 2                          
0x178df:	add rax, rdx                        
0x178e2:	shl rax, 4                          
0x178e6:	add rax, rcx                        
0x178e9:	mov byte ptr [rax + 0x49], 0        #	    this->dir_entry[entry].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x178ed:	mov rax, qword ptr [rbp - 0x38]     #    while ((entry = |p|anel_get_next(this)) != -1)
MEMORY OFFSET:     -0x38     -56  >>-48

0x178f1:	mov rdi, rax                        
0x178f4:	call 0x13149                        
0x178f9:	mov dword ptr [rbp - 0x1c], eax     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x178fc:	cmp dword ptr [rbp - 0x1c], -1      #    while ((entry = panel_get_next(this)) |!|= -1)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x17900:	jne 0x175c4                         
0x17906:	jmp 0x1790f                         
0x17908:	nop                                 #	    |b|reak;
0x17909:	jmp 0x1790f                         
0x1790b:	nop                                 #	    |b|reak;
0x1790c:	jmp 0x1790f                         
0x1790e:	nop                                 #	    |b|reak;
0x1790f:	mov rax, qword ptr [rbp - 0x38]     #    if (first_entry != this|-|>entries)
MEMORY OFFSET:     -0x38     -56  >>-48

0x17913:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x17916:	cmp dword ptr [rbp - 0x2c], eax     #    if |(|first_entry != this->entries)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x17919:	je 0x17931                          
0x1791b:	mov edx, dword ptr [rbp - 0x2c]     #	|p|anel_set_current_entry(this, first_entry);
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1791e:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x17922:	mov esi, edx                        
0x17924:	mov rdi, rax                        
0x17927:	mov eax, 0                          
0x1792c:	call 0x112b7                        
0x17931:	mov rax, qword ptr [rbp - 0x38]     #    |p|anel_update_size(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17935:	mov rdi, rax                        
0x17938:	mov eax, 0                          
0x1793d:	call 0x13506                        
0x17942:	mov rax, qword ptr [rbp - 0x40]     #    |p|anel_update_size(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17946:	mov rdi, rax                        
0x17949:	mov eax, 0                          
0x1794e:	call 0x13506                        
0x17953:	mov eax, 0                          #    |s|tatus_default();
0x17958:	call 0x10857                        
0x1795d:	mov eax, 0                          #    |t|ty_update();
0x17962:	call 0xb4b7                         
0x17967:	mov rax, qword ptr [rbp - 0x38]     #    if (!|p|anel_read_directory(this, this->path, ON))
MEMORY OFFSET:     -0x38     -56  >>-48

0x1796b:	mov rcx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1796f:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x17973:	mov edx, 1                          
0x17978:	mov rsi, rcx                        
0x1797b:	mov rdi, rax                        
0x1797e:	mov eax, 0                          
0x17983:	call 0x12238                        
0x17988:	test eax, eax                       #    if |(|!panel_read_directory(this, this->path, ON))
0x1798a:	jne 0x1799d                         
0x1798c:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_recover(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17990:	mov rdi, rax                        
0x17993:	mov eax, 0                          
0x17998:	call 0x116a7                        
0x1799d:	mov rax, qword ptr [rbp - 0x38]     #    |p|anel_update(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x179a1:	mov rdi, rax                        
0x179a4:	call 0x14e6a                        
0x179a9:	mov rax, qword ptr [rbp - 0x40]     #    if (strcmp(this->path, other|-|>path) == 0)
MEMORY OFFSET:     -0x40     -64  >>-56

0x179ad:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x179b1:	mov rax, qword ptr [rbp - 0x38]     #    if (strcmp(this|-|>path, other->path) == 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x179b5:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x179b9:	mov rsi, rdx                        #    if (|s|trcmp(this->path, other->path) == 0)
0x179bc:	mov rdi, rax                        
0x179bf:	call 0x4af0                         
0x179c4:	test eax, eax                       #    if |(|strcmp(this->path, other->path) == 0)
0x179c6:	jne 0x17a10                         
0x179c8:	mov rax, qword ptr [rbp - 0x40]     #	if (!|p|anel_read_directory(other, other->path, ON))
MEMORY OFFSET:     -0x40     -64  >>-56

0x179cc:	mov rcx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x179d0:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x179d4:	mov edx, 1                          
0x179d9:	mov rsi, rcx                        
0x179dc:	mov rdi, rax                        
0x179df:	mov eax, 0                          
0x179e4:	call 0x12238                        
0x179e9:	test eax, eax                       #	if |(|!panel_read_directory(other, other->path, ON))
0x179eb:	jne 0x179fe                         
0x179ed:	mov rax, qword ptr [rbp - 0x40]     #	    |p|anel_recover(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x179f1:	mov rdi, rax                        
0x179f4:	mov eax, 0                          
0x179f9:	call 0x116a7                        
0x179fe:	mov rax, qword ptr [rbp - 0x40]     #	|p|anel_update(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17a02:	mov rdi, rax                        
0x17a05:	call 0x14e6a                        
0x17a0a:	jmp 0x17a10                         
0x17a0c:	nop                                 #	|r|eturn;
0x17a0d:	jmp 0x17a10                         
0x17a0f:	nop                                 #	|r|eturn;
0x17a10:	leave                               #|}|
0x17a11:	ret                                 
0x17a12:	endbr64                             #|{|
0x17a16:	push rbp                            
0x17a17:	mov rbp, rsp                        
0x17a1a:	sub rsp, 0xb0                       
0x17a21:	mov qword ptr [rbp - 0xa8], rdi     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x17a28:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x17a31:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x17a35:	xor eax, eax                        
0x17a37:	lea rdx, [rbp - 0xa0]               #    if (|s|tat(path, &s) < 0)
MEMORY OFFSET:     -0xa0     -160  >>-152

0x17a3e:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x17a45:	mov rsi, rdx                        
0x17a48:	mov rdi, rax                        
0x17a4b:	call 0x4b60                         
0x17a50:	test eax, eax                       #    if |(|stat(path, &s) < 0)
0x17a52:	jns 0x17a5b                         
0x17a54:	mov eax, 0                          #	return |0|;
0x17a59:	jmp 0x17a71                         
0x17a5b:	mov eax, dword ptr [rbp - 0x88]     #    return |S|_ISDIR(s.st_mode);
MEMORY OFFSET:     -0x88     -136  >>-128

0x17a61:	and eax, 0xf000                     
0x17a66:	cmp eax, 0x4000                     
0x17a6b:	sete al                             
0x17a6e:	movzx eax, al                       
0x17a71:	mov rdx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x17a75:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x17a7e:	je 0x17a85                          
0x17a80:	call 0x4980                         #|}|
0x17a85:	leave                               
0x17a86:	ret                                 
0x17a87:	endbr64                             #|{|
0x17a8b:	push rbp                            
0x17a8c:	mov rbp, rsp                        
0x17a8f:	sub rsp, 0x20                       
0x17a93:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x17a97:	mov dword ptr [rbp - 0x1c], esi     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x17a9a:	mov rax, qword ptr [rbp - 0x18]     #    char *copy = |x|strdup(path);
MEMORY OFFSET:     -0x18     -24  >>-16

0x17a9e:	mov rdi, rax                        
0x17aa1:	call 0x24780                        
0x17aa6:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x17aaa:	mov rax, qword ptr [rbp - 8]        #    char *|z| = copy;
MEMORY OFFSET:     -0x8     -8  >>0

0x17aae:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x17ab2:	jmp 0x17b19                         #    |f|or (; *z != '\0'; z++)
0x17ab4:	mov rax, qword ptr [rbp - 0x10]     #	if (|*|z == '/' && z != copy)
MEMORY OFFSET:     -0x10     -16  >>-8

0x17ab8:	movzx eax, byte ptr [rax]           
0x17abb:	cmp al, 0x2f                        #	if |(|*z == '/' && z != copy)
0x17abd:	jne 0x17b14                         
0x17abf:	mov rax, qword ptr [rbp - 0x10]     #	if (*z == '/' |&|& z != copy)
MEMORY OFFSET:     -0x10     -16  >>-8

0x17ac3:	cmp rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x17ac7:	je 0x17b14                          
0x17ac9:	mov rax, qword ptr [rbp - 0x10]     #	    *z |=| '\0';
MEMORY OFFSET:     -0x10     -16  >>-8

0x17acd:	mov byte ptr [rax], 0               
0x17ad0:	mov rax, qword ptr [rbp - 8]        #	    if (!|p|anel_isdir(copy))
MEMORY OFFSET:     -0x8     -8  >>0

0x17ad4:	mov rdi, rax                        
0x17ad7:	mov eax, 0                          
0x17adc:	call 0x17a12                        
0x17ae1:	test eax, eax                       #	    if |(|!panel_isdir(copy))
0x17ae3:	jne 0x17b0d                         
0x17ae5:	mov edx, dword ptr [rbp - 0x1c]     #		if (|m|kdir(copy, mode) != 0)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x17ae8:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x17aec:	mov esi, edx                        
0x17aee:	mov rdi, rax                        
0x17af1:	call 0x4880                         
0x17af6:	test eax, eax                       #		if |(|mkdir(copy, mode) != 0)
0x17af8:	je 0x17b0d                          
0x17afa:	mov rax, qword ptr [rbp - 8]        #		    |x|free(copy);
MEMORY OFFSET:     -0x8     -8  >>0

0x17afe:	mov rdi, rax                        
0x17b01:	call 0x1eeae                        
0x17b06:	mov eax, 0xffffffff                 #		    return |-|1;
0x17b0b:	jmp 0x17b35                         
0x17b0d:	mov rax, qword ptr [rbp - 0x10]     #	    *z |=| '/';
MEMORY OFFSET:     -0x10     -16  >>-8

0x17b11:	mov byte ptr [rax], 0x2f            
0x17b14:	add qword ptr [rbp - 0x10], 1       #    for (; *z != '\0'; z|+|+)
MEMORY OFFSET:     -0x10     -16  >>-8

0x17b19:	mov rax, qword ptr [rbp - 0x10]     #    for (; |*|z != '\0'; z++)
MEMORY OFFSET:     -0x10     -16  >>-8

0x17b1d:	movzx eax, byte ptr [rax]           
0x17b20:	test al, al                         #    for (; *z |!|= '\0'; z++)
0x17b22:	jne 0x17ab4                         
0x17b24:	mov rax, qword ptr [rbp - 8]        #    |x|free(copy);
MEMORY OFFSET:     -0x8     -8  >>0

0x17b28:	mov rdi, rax                        
0x17b2b:	call 0x1eeae                        
0x17b30:	mov eax, 0                          #    return |0|;
0x17b35:	leave                               #|}|
0x17b36:	ret                                 
0x17b37:	endbr64                             #|{|
0x17b3b:	push rbp                            
0x17b3c:	mov rbp, rsp                        
0x17b3f:	sub rsp, 0x40                       
0x17b43:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x17b47:	mov qword ptr [rbp - 0x40], rsi     
MEMORY OFFSET:     -0x40     -64  >>-56

0x17b4b:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x17b54:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x17b58:	xor eax, eax                        
0x17b5a:	mov qword ptr [rbp - 0x28], 0       #    char *|i|nput = NULL, *tmp_input;
MEMORY OFFSET:     -0x28     -40  >>-32

0x17b62:	mov rdx, qword ptr [rip + 0x19aa7]  #    if (!|i|l_read_line("New directory name: ", &input, NULL, mkdir_history))
MEMORY OFFSET:     0x19aa7     105127  >>105135

0x17b69:	lea rax, [rbp - 0x28]               
MEMORY OFFSET:     -0x28     -40  >>-32

0x17b6d:	mov rcx, rdx                        
0x17b70:	mov edx, 0                          
0x17b75:	mov rsi, rax                        
0x17b78:	lea rax, [rip + 0x10ed2]            
MEMORY OFFSET:     0x10ed2     69330  >>69338

0x17b7f:	mov rdi, rax                        
0x17b82:	call 0x5efb                         
0x17b87:	test rax, rax                       #    if |(|!il_read_line("New directory name: ", &input, NULL, mkdir_history))
0x17b8a:	je 0x17e24                          
0x17b90:	mov rax, qword ptr [rbp - 0x28]     #    if (input|[|0] == '\0')
MEMORY OFFSET:     -0x28     -40  >>-32

0x17b94:	movzx eax, byte ptr [rax]           
0x17b97:	test al, al                         #    if |(|input[0] == '\0')
0x17b99:	jne 0x17bac                         
0x17b9b:	mov rax, qword ptr [rbp - 0x28]     #	|x|free(input);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17b9f:	mov rdi, rax                        
0x17ba2:	call 0x1eeae                        
0x17ba7:	jmp 0x17e25                         #	|r|eturn;
0x17bac:	mov rax, qword ptr [rbp - 0x28]     #    tmp_input = |t|ilde_expand(input);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17bb0:	mov rdi, rax                        
0x17bb3:	mov eax, 0                          
0x17bb8:	call 0x1fb51                        
0x17bbd:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x17bc1:	mov rax, qword ptr [rbp - 0x28]     #    |x|free(input);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17bc5:	mov rdi, rax                        
0x17bc8:	call 0x1eeae                        
0x17bcd:	mov rax, qword ptr [rbp - 0x20]     #    input |=| tmp_input;
MEMORY OFFSET:     -0x20     -32  >>-24

0x17bd1:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x17bd5:	mov rax, qword ptr [rbp - 0x28]     #    len = |s|trlen(input);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17bd9:	mov rdi, rax                        
0x17bdc:	call 0x4960                         
0x17be1:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x17be5:	mov rax, qword ptr [rbp - 0x18]     #    input = |r|ealloc(input, len + 1 + 1);
MEMORY OFFSET:     -0x18     -24  >>-16

0x17be9:	lea rdx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x17bed:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x17bf1:	mov rsi, rdx                        
0x17bf4:	mov rdi, rax                        
0x17bf7:	call 0x4cb0                         
0x17bfc:	mov qword ptr [rbp - 0x28], rax     #    input |=| realloc(input, len + 1 + 1);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17c00:	mov rdx, qword ptr [rbp - 0x28]     #    input|[|len] = '/';
MEMORY OFFSET:     -0x28     -40  >>-32

0x17c04:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x17c08:	add rax, rdx                        
0x17c0b:	mov byte ptr [rax], 0x2f            #    input[len] |=| '/';
0x17c0e:	mov rdx, qword ptr [rbp - 0x28]     #    input|[|len + 1] = '\0';
MEMORY OFFSET:     -0x28     -40  >>-32

0x17c12:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x17c16:	add rax, 1                          
0x17c1a:	add rax, rdx                        
0x17c1d:	mov byte ptr [rax], 0               #    input[len + 1] |=| '\0';
0x17c20:	mov rax, qword ptr [rbp - 0x28]     #    if (|p|anel_mkdirs(input, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) == -1)
MEMORY OFFSET:     -0x28     -40  >>-32

0x17c24:	mov esi, 0x41ff                     
0x17c29:	mov rdi, rax                        
0x17c2c:	mov eax, 0                          
0x17c31:	call 0x17a87                        
0x17c36:	cmp eax, -1                         #    if |(|panel_mkdirs(input, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) == -1)
0x17c39:	jne 0x17c71                         
0x17c3b:	mov rax, qword ptr [rbp - 0x28]     #	|p|anel_2s_message("%s: Permission denied.", input,
MEMORY OFFSET:     -0x28     -40  >>-32

0x17c3f:	mov ecx, 0x1c                       
0x17c44:	mov edx, 0                          
0x17c49:	mov rsi, rax                        
0x17c4c:	lea rax, [rip + 0x10e13]            
MEMORY OFFSET:     0x10e13     69139  >>69147

0x17c53:	mov rdi, rax                        
0x17c56:	mov eax, 0                          
0x17c5b:	call 0x11568                        
0x17c60:	mov rax, qword ptr [rbp - 0x28]     #	|x|free(input);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17c64:	mov rdi, rax                        
0x17c67:	call 0x1eeae                        
0x17c6c:	jmp 0x17e25                         #	|r|eturn;
0x17c71:	mov rax, qword ptr [rbp - 0x38]     #    if (!|p|anel_read_directory(this, this->path, ON))
MEMORY OFFSET:     -0x38     -56  >>-48

0x17c75:	mov rcx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x17c79:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x17c7d:	mov edx, 1                          
0x17c82:	mov rsi, rcx                        
0x17c85:	mov rdi, rax                        
0x17c88:	mov eax, 0                          
0x17c8d:	call 0x12238                        
0x17c92:	test eax, eax                       #    if |(|!panel_read_directory(this, this->path, ON))
0x17c94:	jne 0x17ca9                         
0x17c96:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_recover(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17c9a:	mov rdi, rax                        
0x17c9d:	mov eax, 0                          
0x17ca2:	call 0x116a7                        
0x17ca7:	jmp 0x17d13                         
0x17ca9:	mov rdx, qword ptr [rbp - 0x28]     #	this->current_entry = |p|anel_find_index(this, input);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17cad:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x17cb1:	mov rsi, rdx                        
0x17cb4:	mov rdi, rax                        
0x17cb7:	mov eax, 0                          
0x17cbc:	call 0x167e0                        
0x17cc1:	mov rdx, qword ptr [rbp - 0x38]     #	this->current_entry |=| panel_find_index(this, input);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17cc5:	mov dword ptr [rdx + 0x28], eax     
MEMORY OFFSET:     0x28     40  >>48

0x17cc8:	mov rax, qword ptr [rbp - 0x38]     #	this->first_on_screen = |p|anel_get_centered_fos(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17ccc:	mov rdi, rax                        
0x17ccf:	mov eax, 0                          
0x17cd4:	call 0x111d2                        
0x17cd9:	mov rdx, qword ptr [rbp - 0x38]     #	this->first_on_screen |=| panel_get_centered_fos(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17cdd:	mov dword ptr [rdx + 0x2c], eax     
MEMORY OFFSET:     0x2c     44  >>52

0x17ce0:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_update_entries(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17ce4:	mov rdi, rax                        
0x17ce7:	mov eax, 0                          
0x17cec:	call 0x13223                        
0x17cf1:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_update_info(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17cf5:	mov rdi, rax                        
0x17cf8:	mov eax, 0                          
0x17cfd:	call 0x1395a                        
0x17d02:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_update_size(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17d06:	mov rdi, rax                        
0x17d09:	mov eax, 0                          
0x17d0e:	call 0x13506                        
0x17d13:	mov rax, qword ptr [rbp - 0x40]     #    if (strcmp(this->path, other|-|>path) == 0)
MEMORY OFFSET:     -0x40     -64  >>-56

0x17d17:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x17d1b:	mov rax, qword ptr [rbp - 0x38]     #    if (strcmp(this|-|>path, other->path) == 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x17d1f:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x17d23:	mov rsi, rdx                        #    if (|s|trcmp(this->path, other->path) == 0)
0x17d26:	mov rdi, rax                        
0x17d29:	call 0x4af0                         
0x17d2e:	test eax, eax                       #    if |(|strcmp(this->path, other->path) == 0)
0x17d30:	jne 0x17e05                         
0x17d36:	mov rax, qword ptr [rbp - 0x40]     #	char *old_entry = xstrdup(other|-|>dir_entry[other->current_entry].name);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17d3a:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x17d3e:	mov rax, qword ptr [rbp - 0x40]     #	char *old_entry = xstrdup(other->dir_entry[other|-|>current_entry].name);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17d42:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x17d45:	movsxd rdx, eax                     
0x17d48:	mov rax, rdx                        #	char *old_entry = xstrdup(other->dir_entry|[|other->current_entry].name);
0x17d4b:	shl rax, 2                          
0x17d4f:	add rax, rdx                        
0x17d52:	shl rax, 4                          
0x17d56:	add rax, rcx                        
0x17d59:	mov rax, qword ptr [rax]            #	char *old_entry = xstrdup(other->dir_entry[other->current_entry]|.|name);
0x17d5c:	mov rdi, rax                        #	char *old_entry = |x|strdup(other->dir_entry[other->current_entry].name);
0x17d5f:	call 0x24780                        
0x17d64:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x17d68:	mov rax, qword ptr [rbp - 0x40]     #	if (!|p|anel_read_directory(other, other->path, ON))
MEMORY OFFSET:     -0x40     -64  >>-56

0x17d6c:	mov rcx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x17d70:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x17d74:	mov edx, 1                          
0x17d79:	mov rsi, rcx                        
0x17d7c:	mov rdi, rax                        
0x17d7f:	mov eax, 0                          
0x17d84:	call 0x12238                        
0x17d89:	test eax, eax                       #	if |(|!panel_read_directory(other, other->path, ON))
0x17d8b:	jne 0x17da0                         
0x17d8d:	mov rax, qword ptr [rbp - 0x40]     #	    |p|anel_recover(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17d91:	mov rdi, rax                        
0x17d94:	mov eax, 0                          
0x17d99:	call 0x116a7                        
0x17d9e:	jmp 0x17df9                         
0x17da0:	mov rdx, qword ptr [rbp - 0x10]     #	    other->current_entry = |p|anel_find_index(other, old_entry);
MEMORY OFFSET:     -0x10     -16  >>-8

0x17da4:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x17da8:	mov rsi, rdx                        
0x17dab:	mov rdi, rax                        
0x17dae:	mov eax, 0                          
0x17db3:	call 0x167e0                        
0x17db8:	mov rdx, qword ptr [rbp - 0x40]     #	    other->current_entry |=| panel_find_index(other, old_entry);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17dbc:	mov dword ptr [rdx + 0x28], eax     
MEMORY OFFSET:     0x28     40  >>48

0x17dbf:	mov rax, qword ptr [rbp - 0x40]     #	    other->first_on_screen = |p|anel_get_centered_fos(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17dc3:	mov rdi, rax                        
0x17dc6:	mov eax, 0                          
0x17dcb:	call 0x111d2                        
0x17dd0:	mov rdx, qword ptr [rbp - 0x40]     #	    other->first_on_screen |=| panel_get_centered_fos(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17dd4:	mov dword ptr [rdx + 0x2c], eax     
MEMORY OFFSET:     0x2c     44  >>52

0x17dd7:	mov rax, qword ptr [rbp - 0x40]     #	    |p|anel_update_entries(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17ddb:	mov rdi, rax                        
0x17dde:	mov eax, 0                          
0x17de3:	call 0x13223                        
0x17de8:	mov rax, qword ptr [rbp - 0x40]     #	    |p|anel_update_info(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17dec:	mov rdi, rax                        
0x17def:	mov eax, 0                          
0x17df4:	call 0x1395a                        
0x17df9:	mov rax, qword ptr [rbp - 0x10]     #	|x|free(old_entry);
MEMORY OFFSET:     -0x10     -16  >>-8

0x17dfd:	mov rdi, rax                        
0x17e00:	call 0x1eeae                        
0x17e05:	mov rax, qword ptr [rbp - 0x40]     #    |p|anel_update_size(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x17e09:	mov rdi, rax                        
0x17e0c:	mov eax, 0                          
0x17e11:	call 0x13506                        
0x17e16:	mov rax, qword ptr [rbp - 0x28]     #    |x|free(input);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17e1a:	mov rdi, rax                        
0x17e1d:	call 0x1eeae                        
0x17e22:	jmp 0x17e25                         
0x17e24:	nop                                 #	|r|eturn;
0x17e25:	mov rax, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x17e29:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x17e32:	je 0x17e39                          
0x17e34:	call 0x4980                         
0x17e39:	leave                               
0x17e3a:	ret                                 
0x17e3b:	endbr64                             #|{|
0x17e3f:	push rbp                            
0x17e40:	mov rbp, rsp                        
0x17e43:	sub rsp, 0x70                       
0x17e47:	mov qword ptr [rbp - 0x68], rdi     
MEMORY OFFSET:     -0x68     -104  >>-96

0x17e4b:	mov qword ptr [rbp - 0x70], rsi     
MEMORY OFFSET:     -0x70     -112  >>-104

0x17e4f:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x17e58:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x17e5c:	xor eax, eax                        
0x17e5e:	mov qword ptr [rbp - 0x48], 0       #    char *file, *|d|ir = NULL, *msg, *input = NULL, *tmp_input;
MEMORY OFFSET:     -0x48     -72  >>-64

0x17e66:	mov qword ptr [rbp - 0x40], 0       #    char *file, *dir = NULL, *msg, *|i|nput = NULL, *tmp_input;
MEMORY OFFSET:     -0x40     -64  >>-56

0x17e6e:	mov rax, qword ptr [rbp - 0x68]     #    this->chkdest |=| ON;
MEMORY OFFSET:     -0x68     -104  >>-96

0x17e72:	mov dword ptr [rax + 0x90], 1       
MEMORY OFFSET:     0x90     144  >>152

0x17e7c:	mov rax, qword ptr [rbp - 0x68]     #    if (this|-|>selected_entries == 0)
MEMORY OFFSET:     -0x68     -104  >>-96

0x17e80:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x17e83:	test eax, eax                       #    if |(|this->selected_entries == 0)
0x17e85:	jne 0x181bf                         
0x17e8b:	mov rax, qword ptr [rbp - 0x68]     #	char *name = this|-|>dir_entry[this->current_entry].name;
MEMORY OFFSET:     -0x68     -104  >>-96

0x17e8f:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x17e93:	mov rax, qword ptr [rbp - 0x68]     #	char *name = this->dir_entry[this|-|>current_entry].name;
MEMORY OFFSET:     -0x68     -104  >>-96

0x17e97:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x17e9a:	movsxd rdx, eax                     
0x17e9d:	mov rax, rdx                        #	char *name = this->dir_entry|[|this->current_entry].name;
0x17ea0:	shl rax, 2                          
0x17ea4:	add rax, rdx                        
0x17ea7:	shl rax, 4                          
0x17eab:	add rax, rcx                        
0x17eae:	mov rax, qword ptr [rax]            #	char *|n|ame = this->dir_entry[this->current_entry].name;
0x17eb1:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x17eb5:	mov rax, qword ptr [rbp - 0x68]     #	if (this|-|>current_entry == 0 && !rootdir())
MEMORY OFFSET:     -0x68     -104  >>-96

0x17eb9:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x17ebc:	test eax, eax                       #	if |(|this->current_entry == 0 && !rootdir())
0x17ebe:	jne 0x17eea                         
0x17ec0:	mov rax, qword ptr [rbp - 0x68]     #	if (this->current_entry == 0 && !|r|ootdir())
MEMORY OFFSET:     -0x68     -104  >>-96

0x17ec4:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x17ec8:	movzx eax, byte ptr [rax]           
0x17ecb:	cmp al, 0x2f                        #	if (this->current_entry == 0 |&|& !rootdir())
0x17ecd:	jne 0x1851d                         
0x17ed3:	mov rax, qword ptr [rbp - 0x68]     #	if (this->current_entry == 0 && !|r|ootdir())
MEMORY OFFSET:     -0x68     -104  >>-96

0x17ed7:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x17edb:	add rax, 1                          
0x17edf:	movzx eax, byte ptr [rax]           
0x17ee2:	test al, al                         #	if (this->current_entry == 0 && |!|rootdir())
0x17ee4:	jne 0x1851d                         
0x17eea:	mov rax, qword ptr [rbp - 0x28]     #	msg = xmalloc(16 + |s|trlen(name) + 1);
MEMORY OFFSET:     -0x28     -40  >>-32

0x17eee:	mov rdi, rax                        
0x17ef1:	call 0x4960                         
0x17ef6:	add rax, 0x11                       #	msg = |x|malloc(16 + strlen(name) + 1);
0x17efa:	mov rdi, rax                        
0x17efd:	call 0x24650                        
0x17f02:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x17f06:	mov rax, qword ptr [rbp - 0x28]     #	|s|printf(msg, "Move %s to: ", cutname(name, 0, 0));
MEMORY OFFSET:     -0x28     -40  >>-32

0x17f0a:	mov edx, 0                          
0x17f0f:	mov esi, 0                          
0x17f14:	mov rdi, rax                        
0x17f17:	mov eax, 0                          
0x17f1c:	call 0x10d03                        
0x17f21:	mov rdx, rax                        
0x17f24:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x17f28:	lea rcx, [rip + 0x10b4e]            
MEMORY OFFSET:     0x10b4e     68430  >>68438

0x17f2f:	mov rsi, rcx                        
0x17f32:	mov rdi, rax                        
0x17f35:	mov eax, 0                          
0x17f3a:	call 0x4dd0                         
0x17f3f:	mov rax, qword ptr [rbp - 0x28]     #	len  = 1 + |s|trlen(name) + 1;
MEMORY OFFSET:     -0x28     -40  >>-32

0x17f43:	mov rdi, rax                        
0x17f46:	call 0x4960                         
0x17f4b:	add rax, 2                          #	len  |=| 1 + strlen(name) + 1;
0x17f4f:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x17f53:	mov rax, qword ptr [rbp - 0x70]     #	file = xmalloc(strlen(other|-|>path) + len);
MEMORY OFFSET:     -0x70     -112  >>-104

0x17f57:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x17f5b:	mov rdi, rax                        #	file = xmalloc(|s|trlen(other->path) + len);
0x17f5e:	call 0x4960                         
0x17f63:	mov rdx, qword ptr [rbp - 0x38]     #	file = |x|malloc(strlen(other->path) + len);
MEMORY OFFSET:     -0x38     -56  >>-48

0x17f67:	add rax, rdx                        
0x17f6a:	mov rdi, rax                        
0x17f6d:	call 0x24650                        
0x17f72:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x17f76:	mov rax, qword ptr [rbp - 0x70]     #	|s|printf(file, "%s/%s", other->path, name);
MEMORY OFFSET:     -0x70     -112  >>-104

0x17f7a:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x17f7e:	mov rcx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x17f82:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x17f86:	lea rsi, [rip + 0x10842]            
MEMORY OFFSET:     0x10842     67650  >>67658

0x17f8d:	mov rdi, rax                        
0x17f90:	mov eax, 0                          
0x17f95:	call 0x4dd0                         
0x17f9a:	mov rcx, qword ptr [rip + 0x19667]  #	if (!|i|l_read_line(msg, &input, file, move_history))
MEMORY OFFSET:     0x19667     104039  >>104047

0x17fa1:	mov rdx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x17fa5:	lea rsi, [rbp - 0x40]               
MEMORY OFFSET:     -0x40     -64  >>-56

0x17fa9:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x17fad:	mov rdi, rax                        
0x17fb0:	call 0x5efb                         
0x17fb5:	test rax, rax                       #	if |(|!il_read_line(msg, &input, file, move_history))
0x17fb8:	jne 0x17fcb                         
0x17fba:	mov rax, qword ptr [rbp - 0x20]     #	    |x|free(msg);
MEMORY OFFSET:     -0x20     -32  >>-24

0x17fbe:	mov rdi, rax                        
0x17fc1:	call 0x1eeae                        
0x17fc6:	jmp 0x18521                         #	    |r|eturn;
0x17fcb:	mov rax, qword ptr [rbp - 0x20]     #	|x|free(msg);
MEMORY OFFSET:     -0x20     -32  >>-24

0x17fcf:	mov rdi, rax                        
0x17fd2:	call 0x1eeae                        
0x17fd7:	mov rax, qword ptr [rbp - 0x68]     #	if (|S|_ISDIR(this->dir_entry[this->current_entry].mode))
MEMORY OFFSET:     -0x68     -104  >>-96

0x17fdb:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x17fdf:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x17fe3:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x17fe6:	movsxd rdx, eax                     
0x17fe9:	mov rax, rdx                        
0x17fec:	shl rax, 2                          
0x17ff0:	add rax, rdx                        
0x17ff3:	shl rax, 4                          
0x17ff7:	add rax, rcx                        
0x17ffa:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x17ffd:	and eax, 0xf000                     
0x18002:	cmp eax, 0x4000                     #	if |(|S_ISDIR(this->dir_entry[this->current_entry].mode))
0x18007:	jne 0x1801a                         
0x18009:	mov rax, qword ptr [rip + 0x18510]  #	    |i|l_message(PANEL_MOVE_DIR_MSG);
MEMORY OFFSET:     0x18510     99600  >>99608

0x18010:	mov rdi, rax                        
0x18013:	call 0xfcbe                         
0x18018:	jmp 0x18029                         
0x1801a:	mov rax, qword ptr [rip + 0x184ef]  #	    |i|l_message(PANEL_MOVE_FILE_MSG);
MEMORY OFFSET:     0x184ef     99567  >>99575

0x18021:	mov rdi, rax                        
0x18024:	call 0xfcbe                         
0x18029:	mov eax, 0                          #	|t|ty_update();
0x1802e:	call 0xb4b7                         
0x18033:	mov rax, qword ptr [rbp - 0x40]     #	tmp_input = |t|ilde_expand(input);
MEMORY OFFSET:     -0x40     -64  >>-56

0x18037:	mov rdi, rax                        
0x1803a:	mov eax, 0                          
0x1803f:	call 0x1fb51                        
0x18044:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x18048:	mov rax, qword ptr [rbp - 0x40]     #	|x|free(input);
MEMORY OFFSET:     -0x40     -64  >>-56

0x1804c:	mov rdi, rax                        
0x1804f:	call 0x1eeae                        
0x18054:	mov rax, qword ptr [rbp - 0x10]     #	input |=| tmp_input;
MEMORY OFFSET:     -0x10     -16  >>-8

0x18058:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1805c:	mov rdx, qword ptr [rbp - 0x40]     #	error = |s|ame_file(name, input);
MEMORY OFFSET:     -0x40     -64  >>-56

0x18060:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18064:	mov rsi, rdx                        
0x18067:	mov rdi, rax                        
0x1806a:	mov eax, 0                          
0x1806f:	call 0x15106                        
0x18074:	mov dword ptr [rbp - 0x4c], eax     
MEMORY OFFSET:     -0x4c     -76  >>-68

0x18077:	mov rax, qword ptr [rbp - 0x18]     #	|x|free(file);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1807b:	mov rdi, rax                        
0x1807e:	call 0x1eeae                        
0x18083:	cmp dword ptr [rbp - 0x4c], 0       #	if |(|error)
MEMORY OFFSET:     -0x4c     -76  >>-68

0x18087:	je 0x180c4                          
0x18089:	mov rdx, qword ptr [rbp - 0x40]     #	    |p|anel_3s_message("%s and %s point to the same file.",
MEMORY OFFSET:     -0x40     -64  >>-56

0x1808d:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18091:	mov r8d, 0x1e                       
0x18097:	mov ecx, 0                          
0x1809c:	mov rsi, rax                        
0x1809f:	lea rax, [rip + 0x10892]            
MEMORY OFFSET:     0x10892     67730  >>67738

0x180a6:	mov rdi, rax                        
0x180a9:	mov eax, 0                          
0x180ae:	call 0x115fd                        
0x180b3:	mov rax, qword ptr [rbp - 0x40]     #	    |x|free(input);
MEMORY OFFSET:     -0x40     -64  >>-56

0x180b7:	mov rdi, rax                        
0x180ba:	call 0x1eeae                        
0x180bf:	jmp 0x18521                         #	    |r|eturn;
0x180c4:	mov rax, qword ptr [rbp - 0x68]     #			   this|-|>dir_entry[this->current_entry].mode);
MEMORY OFFSET:     -0x68     -104  >>-96

0x180c8:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x180cc:	mov rax, qword ptr [rbp - 0x68]     #			   this->dir_entry[this|-|>current_entry].mode);
MEMORY OFFSET:     -0x68     -104  >>-96

0x180d0:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x180d3:	movsxd rdx, eax                     
0x180d6:	mov rax, rdx                        #			   this->dir_entry|[|this->current_entry].mode);
0x180d9:	shl rax, 2                          
0x180dd:	add rax, rdx                        
0x180e0:	shl rax, 4                          
0x180e4:	add rax, rcx                        
0x180e7:	mov ecx, dword ptr [rax + 0x10]     #	error = |p|anel_move(this, name, input,
MEMORY OFFSET:     0x10     16  >>24

0x180ea:	mov rdx, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x180ee:	mov rsi, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x180f2:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x180f6:	mov rdi, rax                        
0x180f9:	mov eax, 0                          
0x180fe:	call 0x15f6a                        
0x18103:	mov dword ptr [rbp - 0x4c], eax     
MEMORY OFFSET:     -0x4c     -76  >>-68

0x18106:	cmp dword ptr [rbp - 0x4c], 1       #	if |(|error != FT_OK)
MEMORY OFFSET:     -0x4c     -76  >>-68

0x1810a:	je 0x18178                          
0x1810c:	cmp dword ptr [rbp - 0x4c], 2       #	    if |(|error == FT_CANCEL)
MEMORY OFFSET:     -0x4c     -76  >>-68

0x18110:	jne 0x18137                         
0x18112:	mov rax, qword ptr [rbp - 0x40]     #		|x|free(input);
MEMORY OFFSET:     -0x40     -64  >>-56

0x18116:	mov rdi, rax                        
0x18119:	call 0x1eeae                        
0x1811e:	mov eax, 0                          #		|s|tatus_default();
0x18123:	call 0x10857                        
0x18128:	mov eax, 0                          #		|t|ty_update();
0x1812d:	call 0xb4b7                         
0x18132:	jmp 0x18521                         #		|r|eturn;
0x18137:	mov eax, dword ptr [rbp - 0x4c]     #	    panel_3s_message("%s: Move failed, %s.", name, moveerr[error |-| 1],
MEMORY OFFSET:     -0x4c     -76  >>-68

0x1813a:	sub eax, 1                          
0x1813d:	cdqe                                #	    |p|anel_3s_message("%s: Move failed, %s.", name, moveerr[error - 1],
0x1813f:	lea rdx, [rax*8]                    
0x18147:	lea rax, [rip + 0x18492]            
MEMORY OFFSET:     0x18492     99474  >>99482

0x1814e:	mov rdx, qword ptr [rdx + rax]      
0x18152:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18156:	mov r8d, 0xe                        
0x1815c:	mov ecx, 0                          
0x18161:	mov rsi, rax                        
0x18164:	lea rax, [rip + 0x1091f]            
MEMORY OFFSET:     0x1091f     67871  >>67879

0x1816b:	mov rdi, rax                        
0x1816e:	mov eax, 0                          
0x18173:	call 0x115fd                        
0x18178:	mov rax, qword ptr [rbp - 0x40]     #	|x|free(input);
MEMORY OFFSET:     -0x40     -64  >>-56

0x1817c:	mov rdi, rax                        
0x1817f:	call 0x1eeae                        
0x18184:	mov eax, 0                          #	|s|tatus_default();
0x18189:	call 0x10857                        
0x1818e:	mov rax, qword ptr [rbp - 0x68]     #	|p|anel_update_size(this);
MEMORY OFFSET:     -0x68     -104  >>-96

0x18192:	mov rdi, rax                        
0x18195:	mov eax, 0                          
0x1819a:	call 0x13506                        
0x1819f:	mov rax, qword ptr [rbp - 0x70]     #	|p|anel_update_size(other);
MEMORY OFFSET:     -0x70     -112  >>-104

0x181a3:	mov rdi, rax                        
0x181a6:	mov eax, 0                          
0x181ab:	call 0x13506                        
0x181b0:	mov eax, 0                          #	|t|ty_update();
0x181b5:	call 0xb4b7                         
0x181ba:	jmp 0x18497                         
0x181bf:	mov rcx, qword ptr [rip + 0x19442]  #	if (!|i|l_read_line("Move selected file(s) to: ", &dir,
MEMORY OFFSET:     0x19442     103490  >>103498

0x181c6:	mov rax, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x181ca:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x181ce:	lea rax, [rbp - 0x48]               
MEMORY OFFSET:     -0x48     -72  >>-64

0x181d2:	mov rsi, rax                        
0x181d5:	lea rax, [rip + 0x108c3]            
MEMORY OFFSET:     0x108c3     67779  >>67787

0x181dc:	mov rdi, rax                        
0x181df:	call 0x5efb                         
0x181e4:	test rax, rax                       #	if |(|!il_read_line("Move selected file(s) to: ", &dir,
0x181e7:	je 0x18520                          
0x181ed:	mov rdx, qword ptr [rbp - 0x48]     #	if (|s|ame_file(this->path, dir))
MEMORY OFFSET:     -0x48     -72  >>-64

0x181f1:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x181f5:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x181f9:	mov rsi, rdx                        
0x181fc:	mov rdi, rax                        
0x181ff:	mov eax, 0                          
0x18204:	call 0x15106                        
0x18209:	test eax, eax                       #	if |(|same_file(this->path, dir))
0x1820b:	je 0x1822b                          
0x1820d:	mov edx, 0xc                        #	    |p|anel_1s_message(nice_try, (char *)NULL,
0x18212:	mov esi, 0                          
0x18217:	lea rax, [rip + 0x18322]            
MEMORY OFFSET:     0x18322     99106  >>99114

0x1821e:	mov rdi, rax                        
0x18221:	call 0x5c09                         
0x18226:	jmp 0x18521                         #	    |r|eturn;
0x1822b:	mov rax, qword ptr [rbp - 0x48]     #	dir = xrealloc(dir, (len = |s|trlen(dir) + 1) + 1);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1822f:	mov rdi, rax                        
0x18232:	call 0x4960                         
0x18237:	add rax, 1                          #	dir = xrealloc(dir, (len |=| strlen(dir) + 1) + 1);
0x1823b:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1823f:	mov rax, qword ptr [rbp - 0x38]     #	dir = |x|realloc(dir, (len = strlen(dir) + 1) + 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x18243:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x18247:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1824b:	mov rsi, rdx                        
0x1824e:	mov rdi, rax                        
0x18251:	call 0x24670                        
0x18256:	mov qword ptr [rbp - 0x48], rax     #	dir |=| xrealloc(dir, (len = strlen(dir) + 1) + 1);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1825a:	mov rdx, qword ptr [rbp - 0x48]     #	dir|[|len-1] = '/';
MEMORY OFFSET:     -0x48     -72  >>-64

0x1825e:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x18262:	sub rax, 1                          
0x18266:	add rax, rdx                        
0x18269:	mov byte ptr [rax], 0x2f            #	dir[len-1] |=| '/';
0x1826c:	mov rdx, qword ptr [rbp - 0x48]     #	dir|[|len  ] = '\0';
MEMORY OFFSET:     -0x48     -72  >>-64

0x18270:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x18274:	add rax, rdx                        
0x18277:	mov byte ptr [rax], 0               #	dir[len  ] |=| '\0';
0x1827a:	mov dword ptr [rbp - 0x54], 0       #	for (first_entry |=| 0; first_entry < this->entries; first_entry++)
MEMORY OFFSET:     -0x54     -84  >>-76

0x18281:	jmp 0x182ae                         #	|f|or (first_entry = 0; first_entry < this->entries; first_entry++)
0x18283:	mov rax, qword ptr [rbp - 0x68]     #	    if (this|-|>dir_entry[first_entry].selected)
MEMORY OFFSET:     -0x68     -104  >>-96

0x18287:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1828b:	mov eax, dword ptr [rbp - 0x54]     #	    if (this->dir_entry|[|first_entry].selected)
MEMORY OFFSET:     -0x54     -84  >>-76

0x1828e:	movsxd rdx, eax                     
0x18291:	mov rax, rdx                        
0x18294:	shl rax, 2                          
0x18298:	add rax, rdx                        
0x1829b:	shl rax, 4                          
0x1829f:	add rax, rcx                        
0x182a2:	movzx eax, byte ptr [rax + 0x49]    #	    if (this->dir_entry[first_entry]|.|selected)
MEMORY OFFSET:     0x49     73  >>81

0x182a6:	test al, al                         #	    if |(|this->dir_entry[first_entry].selected)
0x182a8:	jne 0x182bc                         
0x182aa:	add dword ptr [rbp - 0x54], 1       #	for (first_entry = 0; first_entry < this->entries; first_entry|+|+)
MEMORY OFFSET:     -0x54     -84  >>-76

0x182ae:	mov rax, qword ptr [rbp - 0x68]     #	for (first_entry = 0; first_entry < this|-|>entries; first_entry++)
MEMORY OFFSET:     -0x68     -104  >>-96

0x182b2:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x182b5:	cmp dword ptr [rbp - 0x54], eax     #	for (first_entry = 0; first_entry |<| this->entries; first_entry++)
MEMORY OFFSET:     -0x54     -84  >>-76

0x182b8:	jl 0x18283                          
0x182ba:	jmp 0x182bd                         
0x182bc:	nop                                 #		|b|reak;
0x182bd:	mov rax, qword ptr [rbp - 0x68]     #	|p|anel_init_iterator(this);
MEMORY OFFSET:     -0x68     -104  >>-96

0x182c1:	mov rdi, rax                        
0x182c4:	call 0x13121                        
0x182c9:	jmp 0x1842d                         #	while |(|(entry = panel_get_next(this)) != -1)
0x182ce:	mov rax, qword ptr [rbp - 0x68]     #	    char *name = this|-|>dir_entry[entry].name;
MEMORY OFFSET:     -0x68     -104  >>-96

0x182d2:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x182d6:	mov eax, dword ptr [rbp - 0x50]     #	    char *name = this->dir_entry|[|entry].name;
MEMORY OFFSET:     -0x50     -80  >>-72

0x182d9:	movsxd rdx, eax                     
0x182dc:	mov rax, rdx                        
0x182df:	shl rax, 2                          
0x182e3:	add rax, rdx                        
0x182e6:	shl rax, 4                          
0x182ea:	add rax, rcx                        
0x182ed:	mov rax, qword ptr [rax]            #	    char *|n|ame = this->dir_entry[entry].name;
0x182f0:	mov qword ptr [rbp - 0x30], rax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x182f4:	mov eax, 0                          #	    |s|ervice_pending_signals();
0x182f9:	call 0x1ea4b                        
0x182fe:	mov rax, qword ptr [rbp - 0x30]     #	    dir = xrealloc(dir, len + |s|trlen(name) + 1);
MEMORY OFFSET:     -0x30     -48  >>-40

0x18302:	mov rdi, rax                        
0x18305:	call 0x4960                         
0x1830a:	mov rdx, qword ptr [rbp - 0x38]     #	    dir = xrealloc(dir, len |+| strlen(name) + 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x1830e:	add rax, rdx                        
0x18311:	lea rdx, [rax + 1]                  #	    dir = |x|realloc(dir, len + strlen(name) + 1);
MEMORY OFFSET:     0x1     1  >>9

0x18315:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x18319:	mov rsi, rdx                        
0x1831c:	mov rdi, rax                        
0x1831f:	call 0x24670                        
0x18324:	mov qword ptr [rbp - 0x48], rax     #	    dir |=| xrealloc(dir, len + strlen(name) + 1);
MEMORY OFFSET:     -0x48     -72  >>-64

0x18328:	mov rdx, qword ptr [rbp - 0x48]     #	    |s|trcpy(dir + len, name);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1832c:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x18330:	add rdx, rax                        
0x18333:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x18337:	mov rsi, rax                        
0x1833a:	mov rdi, rdx                        
0x1833d:	call 0x4870                         
0x18342:	mov eax, 0                          #	    if (|c|anceled())
0x18347:	call 0x15065                        
0x1834c:	test eax, eax                       #	    if |(|canceled())
0x1834e:	jne 0x18448                         
0x18354:	mov rax, qword ptr [rip + 0x181bd]  #	    |i|l_message(PANEL_MOVE_FILES_MSG);
MEMORY OFFSET:     0x181bd     98749  >>98757

0x1835b:	mov rdi, rax                        
0x1835e:	call 0xfcbe                         
0x18363:	mov eax, 0                          #	    |t|ty_update();
0x18368:	call 0xb4b7                         
0x1836d:	mov rax, qword ptr [rbp - 0x68]     #	    error = panel_move(this, name, dir, this|-|>dir_entry[entry].mode);
MEMORY OFFSET:     -0x68     -104  >>-96

0x18371:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18375:	mov eax, dword ptr [rbp - 0x50]     #	    error = panel_move(this, name, dir, this->dir_entry|[|entry].mode);
MEMORY OFFSET:     -0x50     -80  >>-72

0x18378:	movsxd rdx, eax                     
0x1837b:	mov rax, rdx                        
0x1837e:	shl rax, 2                          
0x18382:	add rax, rdx                        
0x18385:	shl rax, 4                          
0x18389:	add rax, rcx                        
0x1838c:	mov ecx, dword ptr [rax + 0x10]     #	    error = |p|anel_move(this, name, dir, this->dir_entry[entry].mode);
MEMORY OFFSET:     0x10     16  >>24

0x1838f:	mov rdx, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x18393:	mov rsi, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x18397:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x1839b:	mov rdi, rax                        
0x1839e:	mov eax, 0                          
0x183a3:	call 0x15f6a                        
0x183a8:	mov dword ptr [rbp - 0x4c], eax     
MEMORY OFFSET:     -0x4c     -76  >>-68

0x183ab:	cmp dword ptr [rbp - 0x4c], 1       #	    if |(|error != FT_OK)
MEMORY OFFSET:     -0x4c     -76  >>-68

0x183af:	je 0x1840a                          
0x183b1:	cmp dword ptr [rbp - 0x4c], 2       #		if |(|error == FT_CANCEL)
MEMORY OFFSET:     -0x4c     -76  >>-68

0x183b5:	je 0x1844b                          
0x183bb:	cmp dword ptr [rbp - 0x4c], 3       #		if |(|error == FT_SKIP)
MEMORY OFFSET:     -0x4c     -76  >>-68

0x183bf:	jne 0x183c3                         
0x183c1:	jmp 0x1842d                         #		    |c|ontinue;
0x183c3:	mov eax, dword ptr [rbp - 0x4c]     #				     moveerr[error |-| 1], (char *)NULL,
MEMORY OFFSET:     -0x4c     -76  >>-68

0x183c6:	sub eax, 1                          
0x183c9:	cdqe                                #		if (|p|anel_3s_message("%s: Move failed, %s.", name,
0x183cb:	lea rdx, [rax*8]                    
0x183d3:	lea rax, [rip + 0x18206]            
MEMORY OFFSET:     0x18206     98822  >>98830

0x183da:	mov rdx, qword ptr [rdx + rax]      
0x183de:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x183e2:	mov r8d, 0xe                        
0x183e8:	mov ecx, 0                          
0x183ed:	mov rsi, rax                        
0x183f0:	lea rax, [rip + 0x10693]            
MEMORY OFFSET:     0x10693     67219  >>67227

0x183f7:	mov rdi, rax                        
0x183fa:	mov eax, 0                          
0x183ff:	call 0x115fd                        
0x18404:	test al, al                         #		if |(|panel_3s_message("%s: Move failed, %s.", name,
0x18406:	jne 0x1842d                         
0x18408:	jmp 0x1844c                         #		    |b|reak;
0x1840a:	mov rax, qword ptr [rbp - 0x68]     #		this|-|>dir_entry[entry].selected = 0;
MEMORY OFFSET:     -0x68     -104  >>-96

0x1840e:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18412:	mov eax, dword ptr [rbp - 0x50]     #		this->dir_entry|[|entry].selected = 0;
MEMORY OFFSET:     -0x50     -80  >>-72

0x18415:	movsxd rdx, eax                     
0x18418:	mov rax, rdx                        
0x1841b:	shl rax, 2                          
0x1841f:	add rax, rdx                        
0x18422:	shl rax, 4                          
0x18426:	add rax, rcx                        
0x18429:	mov byte ptr [rax + 0x49], 0        #		this->dir_entry[entry].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x1842d:	mov rax, qword ptr [rbp - 0x68]     #	while ((entry = |p|anel_get_next(this)) != -1)
MEMORY OFFSET:     -0x68     -104  >>-96

0x18431:	mov rdi, rax                        
0x18434:	call 0x13149                        
0x18439:	mov dword ptr [rbp - 0x50], eax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1843c:	cmp dword ptr [rbp - 0x50], -1      #	while ((entry = panel_get_next(this)) |!|= -1)
MEMORY OFFSET:     -0x50     -80  >>-72

0x18440:	jne 0x182ce                         
0x18446:	jmp 0x1844c                         
0x18448:	nop                                 #		|b|reak;
0x18449:	jmp 0x1844c                         
0x1844b:	nop                                 #		    |b|reak;
0x1844c:	mov rax, qword ptr [rbp - 0x48]     #	if (|d|ir)
MEMORY OFFSET:     -0x48     -72  >>-64

0x18450:	test rax, rax                       #	if |(|dir)
0x18453:	je 0x18461                          
0x18455:	mov rax, qword ptr [rbp - 0x48]     #	    |x|free(dir);
MEMORY OFFSET:     -0x48     -72  >>-64

0x18459:	mov rdi, rax                        
0x1845c:	call 0x1eeae                        
0x18461:	mov rax, qword ptr [rbp - 0x68]     #	if (first_entry != this|-|>entries)
MEMORY OFFSET:     -0x68     -104  >>-96

0x18465:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x18468:	cmp dword ptr [rbp - 0x54], eax     #	if |(|first_entry != this->entries)
MEMORY OFFSET:     -0x54     -84  >>-76

0x1846b:	je 0x18483                          
0x1846d:	mov edx, dword ptr [rbp - 0x54]     #	    |p|anel_set_current_entry(this, first_entry);
MEMORY OFFSET:     -0x54     -84  >>-76

0x18470:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x18474:	mov esi, edx                        
0x18476:	mov rdi, rax                        
0x18479:	mov eax, 0                          
0x1847e:	call 0x112b7                        
0x18483:	mov eax, 0                          #	|s|tatus_default();
0x18488:	call 0x10857                        
0x1848d:	mov eax, 0                          #	|t|ty_update();
0x18492:	call 0xb4b7                         
0x18497:	mov rax, qword ptr [rbp - 0x70]     #    if (!|p|anel_read_directory(other, other->path, ON))
MEMORY OFFSET:     -0x70     -112  >>-104

0x1849b:	mov rcx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1849f:	mov rax, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x184a3:	mov edx, 1                          
0x184a8:	mov rsi, rcx                        
0x184ab:	mov rdi, rax                        
0x184ae:	mov eax, 0                          
0x184b3:	call 0x12238                        
0x184b8:	test eax, eax                       #    if |(|!panel_read_directory(other, other->path, ON))
0x184ba:	jne 0x184cd                         
0x184bc:	mov rax, qword ptr [rbp - 0x70]     #	|p|anel_recover(other);
MEMORY OFFSET:     -0x70     -112  >>-104

0x184c0:	mov rdi, rax                        
0x184c3:	mov eax, 0                          
0x184c8:	call 0x116a7                        
0x184cd:	mov rax, qword ptr [rbp - 0x70]     #    |p|anel_update(other);
MEMORY OFFSET:     -0x70     -112  >>-104

0x184d1:	mov rdi, rax                        
0x184d4:	call 0x14e6a                        
0x184d9:	mov rax, qword ptr [rbp - 0x68]     #    if (!|p|anel_read_directory(this, this->path, ON))
MEMORY OFFSET:     -0x68     -104  >>-96

0x184dd:	mov rcx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x184e1:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x184e5:	mov edx, 1                          
0x184ea:	mov rsi, rcx                        
0x184ed:	mov rdi, rax                        
0x184f0:	mov eax, 0                          
0x184f5:	call 0x12238                        
0x184fa:	test eax, eax                       #    if |(|!panel_read_directory(this, this->path, ON))
0x184fc:	jne 0x1850f                         
0x184fe:	mov rax, qword ptr [rbp - 0x68]     #	|p|anel_recover(this);
MEMORY OFFSET:     -0x68     -104  >>-96

0x18502:	mov rdi, rax                        
0x18505:	mov eax, 0                          
0x1850a:	call 0x116a7                        
0x1850f:	mov rax, qword ptr [rbp - 0x68]     #    |p|anel_update(this);
MEMORY OFFSET:     -0x68     -104  >>-96

0x18513:	mov rdi, rax                        
0x18516:	call 0x14e6a                        
0x1851b:	jmp 0x18521                         
0x1851d:	nop                                 #	    |r|eturn;
0x1851e:	jmp 0x18521                         
0x18520:	nop                                 #	    |r|eturn;
0x18521:	mov rax, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x18525:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1852e:	je 0x18535                          
0x18530:	call 0x4980                         
0x18535:	leave                               
0x18536:	ret                                 
0x18537:	endbr64                             #|{|
0x1853b:	push rbp                            
0x1853c:	mov rbp, rsp                        
0x1853f:	push rbx                            
0x18540:	sub rsp, 0x28                       
0x18544:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x18548:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1854c:	mov qword ptr [rbp - 0x28], rdx     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18550:	mov rax, qword ptr [rbp - 0x28]     #    if (new_dir|[|0] == '/')
MEMORY OFFSET:     -0x28     -40  >>-32

0x18554:	movzx eax, byte ptr [rax]           
0x18557:	cmp al, 0x2f                        #    if |(|new_dir[0] == '/')
0x18559:	jne 0x185b2                         
0x1855b:	mov rax, qword ptr [rbp - 0x28]     #	this->pathlen = |s|trlen(new_dir);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1855f:	mov rdi, rax                        
0x18562:	call 0x4960                         
0x18567:	mov rdx, qword ptr [rbp - 0x18]     #	this->pathlen |=| strlen(new_dir);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1856b:	mov qword ptr [rdx + 0x78], rax     
MEMORY OFFSET:     0x78     120  >>128

0x1856f:	mov rax, qword ptr [rbp - 0x18]     #	this->path = xrealloc(this->path, (this|-|>pathlen + 1) * sizeof(char));
MEMORY OFFSET:     -0x18     -24  >>-16

0x18573:	mov rax, qword ptr [rax + 0x78]     
MEMORY OFFSET:     0x78     120  >>128

0x18577:	lea rdx, [rax + 1]                  #	this->path = xrealloc(this->path, (this->pathlen |+| 1) * sizeof(char));
MEMORY OFFSET:     0x1     1  >>9

0x1857b:	mov rax, qword ptr [rbp - 0x18]     #	this->path = xrealloc(this|-|>path, (this->pathlen + 1) * sizeof(char));
MEMORY OFFSET:     -0x18     -24  >>-16

0x1857f:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x18583:	mov rsi, rdx                        #	this->path = |x|realloc(this->path, (this->pathlen + 1) * sizeof(char));
0x18586:	mov rdi, rax                        
0x18589:	call 0x24670                        
0x1858e:	mov rdx, qword ptr [rbp - 0x18]     #	this->path |=| xrealloc(this->path, (this->pathlen + 1) * sizeof(char));
MEMORY OFFSET:     -0x18     -24  >>-16

0x18592:	mov qword ptr [rdx + 0x18], rax     
MEMORY OFFSET:     0x18     24  >>32

0x18596:	mov rax, qword ptr [rbp - 0x18]     #	|s|trcpy(this->path, new_dir);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1859a:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1859e:	mov rdx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x185a2:	mov rsi, rdx                        
0x185a5:	mov rdi, rax                        
0x185a8:	call 0x4870                         
0x185ad:	jmp 0x1863b                         
0x185b2:	mov rax, qword ptr [rbp - 0x18]     #	this->pathlen |+|= 1 + strlen(new_dir);
MEMORY OFFSET:     -0x18     -24  >>-16

0x185b6:	mov rbx, qword ptr [rax + 0x78]     
MEMORY OFFSET:     0x78     120  >>128

0x185ba:	mov rax, qword ptr [rbp - 0x28]     #	this->pathlen += 1 + |s|trlen(new_dir);
MEMORY OFFSET:     -0x28     -40  >>-32

0x185be:	mov rdi, rax                        
0x185c1:	call 0x4960                         
0x185c6:	add rax, rbx                        #	this->pathlen |+|= 1 + strlen(new_dir);
0x185c9:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x185cd:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x185d1:	mov qword ptr [rax + 0x78], rdx     
MEMORY OFFSET:     0x78     120  >>128

0x185d5:	mov rax, qword ptr [rbp - 0x18]     #	this->path = xrealloc(this->path, (this|-|>pathlen + 1) * sizeof(char));
MEMORY OFFSET:     -0x18     -24  >>-16

0x185d9:	mov rax, qword ptr [rax + 0x78]     
MEMORY OFFSET:     0x78     120  >>128

0x185dd:	lea rdx, [rax + 1]                  #	this->path = xrealloc(this->path, (this->pathlen |+| 1) * sizeof(char));
MEMORY OFFSET:     0x1     1  >>9

0x185e1:	mov rax, qword ptr [rbp - 0x18]     #	this->path = xrealloc(this|-|>path, (this->pathlen + 1) * sizeof(char));
MEMORY OFFSET:     -0x18     -24  >>-16

0x185e5:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x185e9:	mov rsi, rdx                        #	this->path = |x|realloc(this->path, (this->pathlen + 1) * sizeof(char));
0x185ec:	mov rdi, rax                        
0x185ef:	call 0x24670                        
0x185f4:	mov rdx, qword ptr [rbp - 0x18]     #	this->path |=| xrealloc(this->path, (this->pathlen + 1) * sizeof(char));
MEMORY OFFSET:     -0x18     -24  >>-16

0x185f8:	mov qword ptr [rdx + 0x18], rax     
MEMORY OFFSET:     0x18     24  >>32

0x185fc:	mov rax, qword ptr [rbp - 0x18]     #	|s|trcat(this->path, "/");
MEMORY OFFSET:     -0x18     -24  >>-16

0x18600:	mov rbx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x18604:	mov rdi, rbx                        
0x18607:	call 0x4960                         
0x1860c:	add rax, rbx                        
0x1860f:	mov word ptr [rax], 0x2f            
0x18614:	mov rax, qword ptr [rbp - 0x18]     #	|s|trcat(this->path, new_dir);
MEMORY OFFSET:     -0x18     -24  >>-16

0x18618:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1861c:	mov rdx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18620:	mov rsi, rdx                        
0x18623:	mov rdi, rax                        
0x18626:	call 0x4db0                         
0x1862b:	mov rax, qword ptr [rbp - 0x18]     #	|m|inimize_path(this->path);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1862f:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x18633:	mov rdi, rax                        
0x18636:	call 0x1e08b                        
0x1863b:	mov rax, qword ptr [rbp - 0x18]     #    |p|anel_set_current_entry(this, 0);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1863f:	mov esi, 0                          
0x18644:	mov rdi, rax                        
0x18647:	mov eax, 0                          
0x1864c:	call 0x112b7                        
0x18651:	mov rax, qword ptr [rbp - 0x18]     #    |p|anel_action(this, act_REGET, (panel_t *)NULL, (void *)NULL, 1);
MEMORY OFFSET:     -0x18     -24  >>-16

0x18655:	mov r8d, 1                          
0x1865b:	mov ecx, 0                          
0x18660:	mov edx, 0                          
0x18665:	mov esi, 0x22                       
0x1866a:	mov rdi, rax                        
0x1866d:	call 0x1a89a                        
0x18672:	mov rax, qword ptr [rbp - 0x18]     #    |p|anel_update(this);
MEMORY OFFSET:     -0x18     -24  >>-16

0x18676:	mov rdi, rax                        
0x18679:	call 0x14e6a                        
0x1867e:	mov rax, qword ptr [rbp - 0x20]     #    if (strcmp(this->path, other|-|>path) == 0)
MEMORY OFFSET:     -0x20     -32  >>-24

0x18682:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x18686:	mov rax, qword ptr [rbp - 0x18]     #    if (strcmp(this|-|>path, other->path) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1868a:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1868e:	mov rsi, rdx                        #    if (|s|trcmp(this->path, other->path) == 0)
0x18691:	mov rdi, rax                        
0x18694:	call 0x4af0                         
0x18699:	test eax, eax                       #    if |(|strcmp(this->path, other->path) == 0)
0x1869b:	jne 0x186cc                         
0x1869d:	mov rax, qword ptr [rbp - 0x20]     #	|p|anel_action(other, act_REGET, (panel_t *)NULL, (void *)-1, 1);
MEMORY OFFSET:     -0x20     -32  >>-24

0x186a1:	mov r8d, 1                          
0x186a7:	mov rcx, -1                         
0x186ae:	mov edx, 0                          
0x186b3:	mov esi, 0x22                       
0x186b8:	mov rdi, rax                        
0x186bb:	call 0x1a89a                        
0x186c0:	mov rax, qword ptr [rbp - 0x20]     #	|p|anel_update(other);
MEMORY OFFSET:     -0x20     -32  >>-24

0x186c4:	mov rdi, rax                        
0x186c7:	call 0x14e6a                        
0x186cc:	nop                                 #|}|
0x186cd:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x186d1:	leave                               
0x186d2:	ret                                 
0x186d3:	endbr64                             #|{|
0x186d7:	push rbp                            
0x186d8:	mov rbp, rsp                        
0x186db:	sub rsp, 0x20                       
0x186df:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x186e3:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x186e7:	mov rax, qword ptr [rbp - 0x18]     #    if (this|-|>dir_entry && this->dir_entry[this->current_entry].name)
MEMORY OFFSET:     -0x18     -24  >>-16

0x186eb:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x186ef:	test rax, rax                       #    if |(|this->dir_entry && this->dir_entry[this->current_entry].name)
0x186f2:	je 0x1875a                          
0x186f4:	mov rax, qword ptr [rbp - 0x18]     #    if (this->dir_entry && this|-|>dir_entry[this->current_entry].name)
MEMORY OFFSET:     -0x18     -24  >>-16

0x186f8:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x186fc:	mov rax, qword ptr [rbp - 0x18]     #    if (this->dir_entry && this->dir_entry[this|-|>current_entry].name)
MEMORY OFFSET:     -0x18     -24  >>-16

0x18700:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x18703:	movsxd rdx, eax                     
0x18706:	mov rax, rdx                        #    if (this->dir_entry && this->dir_entry|[|this->current_entry].name)
0x18709:	shl rax, 2                          
0x1870d:	add rax, rdx                        
0x18710:	shl rax, 4                          
0x18714:	add rax, rcx                        
0x18717:	mov rax, qword ptr [rax]            #    if (this->dir_entry && this->dir_entry[this->current_entry]|.|name)
0x1871a:	test rax, rax                       #    if (this->dir_entry |&|& this->dir_entry[this->current_entry].name)
0x1871d:	je 0x1875a                          
0x1871f:	mov rax, qword ptr [rbp - 0x18]     #	old_entry = xstrdup(this|-|>dir_entry[this->current_entry].name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x18723:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18727:	mov rax, qword ptr [rbp - 0x18]     #	old_entry = xstrdup(this->dir_entry[this|-|>current_entry].name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1872b:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1872e:	movsxd rdx, eax                     
0x18731:	mov rax, rdx                        #	old_entry = xstrdup(this->dir_entry|[|this->current_entry].name);
0x18734:	shl rax, 2                          
0x18738:	add rax, rdx                        
0x1873b:	shl rax, 4                          
0x1873f:	add rax, rcx                        
0x18742:	mov rax, qword ptr [rax]            #	old_entry = xstrdup(this->dir_entry[this->current_entry]|.|name);
0x18745:	mov rdi, rax                        #	old_entry = |x|strdup(this->dir_entry[this->current_entry].name);
0x18748:	call 0x24780                        
0x1874d:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x18751:	mov dword ptr [rbp - 0x10], 1       #	flag |=| 1;
MEMORY OFFSET:     -0x10     -16  >>-8

0x18758:	jmp 0x1876c                         
0x1875a:	lea rax, [rip + 0xfea0]             #	old_entry |=| "", flag = 0;
MEMORY OFFSET:     0xfea0     65184  >>65192

0x18761:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x18765:	mov dword ptr [rbp - 0x10], 0       #	old_entry = "", flag |=| 0;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1876c:	cmp qword ptr [rbp - 0x20], -1      #    verify = aux_info |=|= (void *)-1;
MEMORY OFFSET:     -0x20     -32  >>-24

0x18771:	sete al                             
0x18774:	movzx eax, al                       #    verify |=| aux_info == (void *)-1;
0x18777:	mov dword ptr [rbp - 0xc], eax      
MEMORY OFFSET:     -0xc     -12  >>-4

0x1877a:	mov rax, qword ptr [rbp - 0x18]     #    if (|p|anel_read_directory(this, this->path, verify))
MEMORY OFFSET:     -0x18     -24  >>-16

0x1877e:	mov rcx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x18782:	mov edx, dword ptr [rbp - 0xc]      
MEMORY OFFSET:     -0xc     -12  >>-4

0x18785:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x18789:	mov rsi, rcx                        
0x1878c:	mov rdi, rax                        
0x1878f:	mov eax, 0                          
0x18794:	call 0x12238                        
0x18799:	test eax, eax                       #    if |(|panel_read_directory(this, this->path, verify))
0x1879b:	je 0x187ea                          
0x1879d:	cmp dword ptr [rbp - 0xc], 0        #	if |(|verify)
MEMORY OFFSET:     -0xc     -12  >>-4

0x187a1:	je 0x187d2                          
0x187a3:	mov rdx, qword ptr [rbp - 8]        #	    |p|anel_set_current_entry(this, panel_find_index(this, old_entry));
MEMORY OFFSET:     -0x8     -8  >>0

0x187a7:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x187ab:	mov rsi, rdx                        
0x187ae:	mov rdi, rax                        
0x187b1:	mov eax, 0                          
0x187b6:	call 0x167e0                        
0x187bb:	mov edx, eax                        
0x187bd:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x187c1:	mov esi, edx                        
0x187c3:	mov rdi, rax                        
0x187c6:	mov eax, 0                          
0x187cb:	call 0x112b7                        
0x187d0:	jmp 0x187fb                         
0x187d2:	mov rax, qword ptr [rbp - 0x18]     #	    |p|anel_set_current_entry(this, 0);
MEMORY OFFSET:     -0x18     -24  >>-16

0x187d6:	mov esi, 0                          
0x187db:	mov rdi, rax                        
0x187de:	mov eax, 0                          
0x187e3:	call 0x112b7                        
0x187e8:	jmp 0x187fb                         
0x187ea:	mov rax, qword ptr [rbp - 0x18]     #	|p|anel_recover(this);
MEMORY OFFSET:     -0x18     -24  >>-16

0x187ee:	mov rdi, rax                        
0x187f1:	mov eax, 0                          
0x187f6:	call 0x116a7                        
0x187fb:	cmp dword ptr [rbp - 0x10], 0       #    if |(|flag)
MEMORY OFFSET:     -0x10     -16  >>-8

0x187ff:	je 0x1880d                          
0x18801:	mov rax, qword ptr [rbp - 8]        #	|x|free(old_entry);
MEMORY OFFSET:     -0x8     -8  >>0

0x18805:	mov rdi, rax                        
0x18808:	call 0x1eeae                        
0x1880d:	nop                                 #|}|
0x1880e:	leave                               
0x1880f:	ret                                 
0x18810:	endbr64                             #|{|
0x18814:	push rbp                            
0x18815:	mov rbp, rsp                        
0x18818:	push rbx                            
0x18819:	sub rsp, 0xa8                       
0x18820:	mov qword ptr [rbp - 0x88], rdi     
MEMORY OFFSET:     -0x88     -136  >>-128

0x18827:	mov dword ptr [rbp - 0x8c], esi     
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1882d:	mov qword ptr [rbp - 0x98], rdx     
MEMORY OFFSET:     -0x98     -152  >>-144

0x18834:	mov qword ptr [rbp - 0xa0], rcx     
MEMORY OFFSET:     -0xa0     -160  >>-152

0x1883b:	mov dword ptr [rbp - 0x90], r8d     
MEMORY OFFSET:     -0x90     -144  >>-136

0x18842:	mov qword ptr [rbp - 0xa8], r9      
MEMORY OFFSET:     -0xa8     -168  >>-160

0x18849:	mov dword ptr [rbp - 0x80], 0       #    int |a|borted = 0;
MEMORY OFFSET:     -0x80     -128  >>-120

0x18850:	mov rax, qword ptr [rbp - 0x88]     #    char *name1 = this|-|>dir_entry[this_entry].name;
MEMORY OFFSET:     -0x88     -136  >>-128

0x18857:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1885b:	mov eax, dword ptr [rbp - 0x8c]     #    char *name1 = this->dir_entry|[|this_entry].name;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x18861:	movsxd rdx, eax                     
0x18864:	mov rax, rdx                        
0x18867:	shl rax, 2                          
0x1886b:	add rax, rdx                        
0x1886e:	shl rax, 4                          
0x18872:	add rax, rcx                        
0x18875:	mov rax, qword ptr [rax]            #    char *|n|ame1 = this->dir_entry[this_entry].name;
0x18878:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1887c:	mov rax, qword ptr [rbp - 0xa0]     #    char *name2 = other|-|>dir_entry[other_entry].name;
MEMORY OFFSET:     -0xa0     -160  >>-152

0x18883:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18887:	mov eax, dword ptr [rbp - 0x90]     #    char *name2 = other->dir_entry|[|other_entry].name;
MEMORY OFFSET:     -0x90     -144  >>-136

0x1888d:	movsxd rdx, eax                     
0x18890:	mov rax, rdx                        
0x18893:	shl rax, 2                          
0x18897:	add rax, rdx                        
0x1889a:	shl rax, 4                          
0x1889e:	add rax, rcx                        
0x188a1:	mov rax, qword ptr [rax]            #    char *|n|ame2 = other->dir_entry[other_entry].name;
0x188a4:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x188a8:	mov rax, qword ptr [rbp - 0x48]     #    char *|f|ile1 = name1;
MEMORY OFFSET:     -0x48     -72  >>-64

0x188ac:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x188b0:	mov dword ptr [rbp - 0x7c], 0       #    int |i|s_special1=0;
MEMORY OFFSET:     -0x7c     -124  >>-116

0x188b7:	mov dword ptr [rbp - 0x78], 0       #    int |i|s_special2=0;
MEMORY OFFSET:     -0x78     -120  >>-112

0x188be:	mov dword ptr [rbp - 0x74], 0       #    int |m|ismatch=0;
MEMORY OFFSET:     -0x74     -116  >>-108

0x188c5:	mov qword ptr [rbp - 0x50], 0       #    off64_t |s|ize=0;
MEMORY OFFSET:     -0x50     -80  >>-72

0x188cd:	mov rax, qword ptr [rbp - 0xa8]     #    *this_size = *other_size |=| 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x188d4:	mov qword ptr [rax], 0              
0x188db:	mov rax, qword ptr [rbp - 0xa8]     #    *this_size = |*|other_size = 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x188e2:	mov rdx, qword ptr [rax]            
0x188e5:	mov rax, qword ptr [rbp - 0x98]     #    *this_size |=| *other_size = 0;
MEMORY OFFSET:     -0x98     -152  >>-144

0x188ec:	mov qword ptr [rax], rdx            
0x188ef:	mov rax, qword ptr [rbp - 0x88]     #    if(|I|S_SPECIAL(this->dir_entry[this_entry].mode))
MEMORY OFFSET:     -0x88     -136  >>-128

0x188f6:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x188fa:	mov eax, dword ptr [rbp - 0x8c]     
MEMORY OFFSET:     -0x8c     -140  >>-132

0x18900:	movsxd rdx, eax                     
0x18903:	mov rax, rdx                        
0x18906:	shl rax, 2                          
0x1890a:	add rax, rdx                        
0x1890d:	shl rax, 4                          
0x18911:	add rax, rcx                        
0x18914:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x18917:	and eax, 0xf000                     
0x1891c:	cmp eax, 0xa000                     #    if|(|IS_SPECIAL(this->dir_entry[this_entry].mode))
0x18921:	je 0x18992                          
0x18923:	mov rax, qword ptr [rbp - 0x88]     #    if(|I|S_SPECIAL(this->dir_entry[this_entry].mode))
MEMORY OFFSET:     -0x88     -136  >>-128

0x1892a:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1892e:	mov eax, dword ptr [rbp - 0x8c]     
MEMORY OFFSET:     -0x8c     -140  >>-132

0x18934:	movsxd rdx, eax                     
0x18937:	mov rax, rdx                        
0x1893a:	shl rax, 2                          
0x1893e:	add rax, rdx                        
0x18941:	shl rax, 4                          
0x18945:	add rax, rcx                        
0x18948:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x1894b:	and eax, 0xf000                     
0x18950:	cmp eax, 0x4000                     
0x18955:	je 0x18992                          
0x18957:	mov rax, qword ptr [rbp - 0x88]     #    if(|I|S_SPECIAL(this->dir_entry[this_entry].mode))
MEMORY OFFSET:     -0x88     -136  >>-128

0x1895e:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18962:	mov eax, dword ptr [rbp - 0x8c]     
MEMORY OFFSET:     -0x8c     -140  >>-132

0x18968:	movsxd rdx, eax                     
0x1896b:	mov rax, rdx                        
0x1896e:	shl rax, 2                          
0x18972:	add rax, rdx                        
0x18975:	shl rax, 4                          
0x18979:	add rax, rcx                        
0x1897c:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x1897f:	and eax, 0xf000                     
0x18984:	cmp eax, 0x8000                     
0x18989:	je 0x18992                          
0x1898b:	mov dword ptr [rbp - 0x7c], 1       #	is_special1|=|1;
MEMORY OFFSET:     -0x7c     -124  >>-116

0x18992:	mov rax, qword ptr [rbp - 0xa0]     #    if(|I|S_SPECIAL(other->dir_entry[this_entry].mode))
MEMORY OFFSET:     -0xa0     -160  >>-152

0x18999:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1899d:	mov eax, dword ptr [rbp - 0x8c]     
MEMORY OFFSET:     -0x8c     -140  >>-132

0x189a3:	movsxd rdx, eax                     
0x189a6:	mov rax, rdx                        
0x189a9:	shl rax, 2                          
0x189ad:	add rax, rdx                        
0x189b0:	shl rax, 4                          
0x189b4:	add rax, rcx                        
0x189b7:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x189ba:	and eax, 0xf000                     
0x189bf:	cmp eax, 0xa000                     #    if|(|IS_SPECIAL(other->dir_entry[this_entry].mode))
0x189c4:	je 0x18a35                          
0x189c6:	mov rax, qword ptr [rbp - 0xa0]     #    if(|I|S_SPECIAL(other->dir_entry[this_entry].mode))
MEMORY OFFSET:     -0xa0     -160  >>-152

0x189cd:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x189d1:	mov eax, dword ptr [rbp - 0x8c]     
MEMORY OFFSET:     -0x8c     -140  >>-132

0x189d7:	movsxd rdx, eax                     
0x189da:	mov rax, rdx                        
0x189dd:	shl rax, 2                          
0x189e1:	add rax, rdx                        
0x189e4:	shl rax, 4                          
0x189e8:	add rax, rcx                        
0x189eb:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x189ee:	and eax, 0xf000                     
0x189f3:	cmp eax, 0x4000                     
0x189f8:	je 0x18a35                          
0x189fa:	mov rax, qword ptr [rbp - 0xa0]     #    if(|I|S_SPECIAL(other->dir_entry[this_entry].mode))
MEMORY OFFSET:     -0xa0     -160  >>-152

0x18a01:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18a05:	mov eax, dword ptr [rbp - 0x8c]     
MEMORY OFFSET:     -0x8c     -140  >>-132

0x18a0b:	movsxd rdx, eax                     
0x18a0e:	mov rax, rdx                        
0x18a11:	shl rax, 2                          
0x18a15:	add rax, rdx                        
0x18a18:	shl rax, 4                          
0x18a1c:	add rax, rcx                        
0x18a1f:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x18a22:	and eax, 0xf000                     
0x18a27:	cmp eax, 0x8000                     
0x18a2c:	je 0x18a35                          
0x18a2e:	mov dword ptr [rbp - 0x78], 1       #	is_special2|=|1;
MEMORY OFFSET:     -0x78     -120  >>-112

0x18a35:	cmp dword ptr [rbp - 0x7c], 0       #    if|(|is_special1 && is_special2)
MEMORY OFFSET:     -0x7c     -124  >>-116

0x18a39:	je 0x18a4e                          
0x18a3b:	cmp dword ptr [rbp - 0x78], 0       #    if(is_special1 |&|& is_special2)
MEMORY OFFSET:     -0x78     -120  >>-112

0x18a3f:	je 0x18a4e                          
0x18a41:	mov qword ptr [rbp - 0x50], 0       #	size|=|0;
MEMORY OFFSET:     -0x50     -80  >>-72

0x18a49:	jmp 0x18b18                         
0x18a4e:	cmp dword ptr [rbp - 0x7c], 0       #    else if|(|is_special1)
MEMORY OFFSET:     -0x7c     -124  >>-116

0x18a52:	je 0x18a86                          
0x18a54:	mov rax, qword ptr [rbp - 0xa0]     #	size=(off64_t)other|-|>dir_entry[other_entry].size;
MEMORY OFFSET:     -0xa0     -160  >>-152

0x18a5b:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18a5f:	mov eax, dword ptr [rbp - 0x90]     #	size=(off64_t)other->dir_entry|[|other_entry].size;
MEMORY OFFSET:     -0x90     -144  >>-136

0x18a65:	movsxd rdx, eax                     
0x18a68:	mov rax, rdx                        
0x18a6b:	shl rax, 2                          
0x18a6f:	add rax, rdx                        
0x18a72:	shl rax, 4                          
0x18a76:	add rax, rcx                        
0x18a79:	mov rax, qword ptr [rax + 8]        #	size|=|(off64_t)other->dir_entry[other_entry].size;
MEMORY OFFSET:     0x8     8  >>16

0x18a7d:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x18a81:	jmp 0x18b18                         
0x18a86:	cmp dword ptr [rbp - 0x78], 0       #    else if|(|is_special2)
MEMORY OFFSET:     -0x78     -120  >>-112

0x18a8a:	je 0x18abb                          
0x18a8c:	mov rax, qword ptr [rbp - 0x88]     #	size=(off64_t)this|-|>dir_entry[this_entry].size;
MEMORY OFFSET:     -0x88     -136  >>-128

0x18a93:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18a97:	mov eax, dword ptr [rbp - 0x8c]     #	size=(off64_t)this->dir_entry|[|this_entry].size;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x18a9d:	movsxd rdx, eax                     
0x18aa0:	mov rax, rdx                        
0x18aa3:	shl rax, 2                          
0x18aa7:	add rax, rdx                        
0x18aaa:	shl rax, 4                          
0x18aae:	add rax, rcx                        
0x18ab1:	mov rax, qword ptr [rax + 8]        #	size|=|(off64_t)this->dir_entry[this_entry].size;
MEMORY OFFSET:     0x8     8  >>16

0x18ab5:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x18ab9:	jmp 0x18b18                         
0x18abb:	mov rax, qword ptr [rbp - 0x88]     #	size=(off64_t)|m|ax(this->dir_entry[this_entry].size,
MEMORY OFFSET:     -0x88     -136  >>-128

0x18ac2:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18ac6:	mov eax, dword ptr [rbp - 0x8c]     
MEMORY OFFSET:     -0x8c     -140  >>-132

0x18acc:	movsxd rdx, eax                     
0x18acf:	mov rax, rdx                        
0x18ad2:	shl rax, 2                          
0x18ad6:	add rax, rdx                        
0x18ad9:	shl rax, 4                          
0x18add:	add rax, rcx                        
0x18ae0:	mov rdx, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x18ae4:	mov rax, qword ptr [rbp - 0xa0]     
MEMORY OFFSET:     -0xa0     -160  >>-152

0x18aeb:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18aef:	mov eax, dword ptr [rbp - 0x90]     
MEMORY OFFSET:     -0x90     -144  >>-136

0x18af5:	movsxd rcx, eax                     
0x18af8:	mov rax, rcx                        
0x18afb:	shl rax, 2                          
0x18aff:	add rax, rcx                        
0x18b02:	shl rax, 4                          
0x18b06:	add rax, rsi                        
0x18b09:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x18b0d:	cmp rdx, rax                        #	size|=|(off64_t)max(this->dir_entry[this_entry].size,
0x18b10:	cmovge rax, rdx                     
0x18b14:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x18b18:	cmp qword ptr [rbp - 0x50], 0       #    if |(|(size == 0) && !(is_special1&&is_special2))
MEMORY OFFSET:     -0x50     -80  >>-72

0x18b1d:	jne 0x18b35                         
0x18b1f:	cmp dword ptr [rbp - 0x7c], 0       #    if ((size == 0) |&|& !(is_special1&&is_special2))
MEMORY OFFSET:     -0x7c     -124  >>-116

0x18b23:	je 0x18b2b                          
0x18b25:	cmp dword ptr [rbp - 0x78], 0       #    if ((size == 0) && |!|(is_special1&&is_special2))
MEMORY OFFSET:     -0x78     -120  >>-112

0x18b29:	jne 0x18b35                         
0x18b2b:	mov eax, 0                          #	return |0|;
0x18b30:	jmp 0x1906f                         
0x18b35:	mov rax, qword ptr [rbp - 0xa0]     #    file2 = xmalloc(strlen(other|-|>path) + 1 + strlen(name2) + 1);
MEMORY OFFSET:     -0xa0     -160  >>-152

0x18b3c:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x18b40:	mov rdi, rax                        #    file2 = xmalloc(|s|trlen(other->path) + 1 + strlen(name2) + 1);
0x18b43:	call 0x4960                         
0x18b48:	mov rbx, rax                        
0x18b4b:	mov rax, qword ptr [rbp - 0x40]     #    file2 = xmalloc(strlen(other->path) + 1 + |s|trlen(name2) + 1);
MEMORY OFFSET:     -0x40     -64  >>-56

0x18b4f:	mov rdi, rax                        
0x18b52:	call 0x4960                         
0x18b57:	add rax, rbx                        #    file2 = xmalloc(strlen(other->path) + 1 |+| strlen(name2) + 1);
0x18b5a:	add rax, 2                          #    file2 = |x|malloc(strlen(other->path) + 1 + strlen(name2) + 1);
0x18b5e:	mov rdi, rax                        
0x18b61:	call 0x24650                        
0x18b66:	mov qword ptr [rbp - 0x30], rax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x18b6a:	mov rax, qword ptr [rbp - 0xa0]     #    |s|printf(file2, "%s/%s", other->path, name2);
MEMORY OFFSET:     -0xa0     -160  >>-152

0x18b71:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x18b75:	mov rcx, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x18b79:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x18b7d:	lea rsi, [rip + 0xfc4b]             
MEMORY OFFSET:     0xfc4b     64587  >>64595

0x18b84:	mov rdi, rax                        
0x18b87:	mov eax, 0                          
0x18b8c:	call 0x4dd0                         
0x18b91:	mov rax, qword ptr [rbp - 0x38]     #    msg = xmalloc(32 + |s|trlen(file1) + 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x18b95:	mov rdi, rax                        
0x18b98:	call 0x4960                         
0x18b9d:	add rax, 0x21                       #    msg = |x|malloc(32 + strlen(file1) + 1);
0x18ba1:	mov rdi, rax                        
0x18ba4:	call 0x24650                        
0x18ba9:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18bad:	cmp qword ptr [rbp - 0x50], 0       #    if|(|!size)
MEMORY OFFSET:     -0x50     -80  >>-72

0x18bb2:	jne 0x18bd5                         
0x18bb4:	mov rdx, qword ptr [rbp - 0x38]     #	|s|printf(msg, "(CMP) %s", file1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x18bb8:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18bbc:	lea rcx, [rip + 0xfef7]             
MEMORY OFFSET:     0xfef7     65271  >>65279

0x18bc3:	mov rsi, rcx                        
0x18bc6:	mov rdi, rax                        
0x18bc9:	mov eax, 0                          
0x18bce:	call 0x4dd0                         
0x18bd3:	jmp 0x18bf4                         
0x18bd5:	mov rdx, qword ptr [rbp - 0x38]     #	|s|printf(msg, "(CMP) [  0%%] %s", file1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x18bd9:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18bdd:	lea rcx, [rip + 0xfedf]             
MEMORY OFFSET:     0xfedf     65247  >>65255

0x18be4:	mov rsi, rcx                        
0x18be7:	mov rdi, rax                        
0x18bea:	mov eax, 0                          
0x18bef:	call 0x4dd0                         
0x18bf4:	mov rax, qword ptr [rbp - 0x28]     #    |s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
MEMORY OFFSET:     -0x28     -40  >>-32

0x18bf8:	mov edx, 1                          
0x18bfd:	mov esi, 1                          
0x18c02:	mov rdi, rax                        
0x18c05:	call 0x107d0                        
0x18c0a:	mov eax, 0                          #    |t|ty_update();
0x18c0f:	call 0xb4b7                         
0x18c14:	mov rax, qword ptr [rbp - 0x28]     #    |x|free(msg);
MEMORY OFFSET:     -0x28     -40  >>-32

0x18c18:	mov rdi, rax                        
0x18c1b:	call 0x1eeae                        
0x18c20:	mov rax, qword ptr [rbp - 0x38]     #    if ((fd1 = |o|pen64(file1, O_RDONLY | O_BINARY)) == -1)
MEMORY OFFSET:     -0x38     -56  >>-48

0x18c24:	mov esi, 0                          
0x18c29:	mov rdi, rax                        
0x18c2c:	mov eax, 0                          
0x18c31:	call 0x4ce0                         
0x18c36:	mov dword ptr [rbp - 0x6c], eax     
MEMORY OFFSET:     -0x6c     -108  >>-100

0x18c39:	cmp dword ptr [rbp - 0x6c], -1      #    if |(|(fd1 = open64(file1, O_RDONLY | O_BINARY)) == -1)
MEMORY OFFSET:     -0x6c     -108  >>-100

0x18c3d:	jne 0x18c4b                         
0x18c3f:	mov rax, -4                         #	return |C|F_OPEN1;
0x18c46:	jmp 0x1906f                         
0x18c4b:	mov rax, qword ptr [rbp - 0x30]     #    if ((fd2 = |o|pen64(file2, O_RDONLY | O_BINARY)) == -1)
MEMORY OFFSET:     -0x30     -48  >>-40

0x18c4f:	mov esi, 0                          
0x18c54:	mov rdi, rax                        
0x18c57:	mov eax, 0                          
0x18c5c:	call 0x4ce0                         
0x18c61:	mov dword ptr [rbp - 0x68], eax     
MEMORY OFFSET:     -0x68     -104  >>-96

0x18c64:	cmp dword ptr [rbp - 0x68], -1      #    if |(|(fd2 = open64(file2, O_RDONLY | O_BINARY)) == -1)
MEMORY OFFSET:     -0x68     -104  >>-96

0x18c68:	jne 0x18c8c                         
0x18c6a:	mov rax, qword ptr [rbp - 0x30]     #	|x|free(file2);
MEMORY OFFSET:     -0x30     -48  >>-40

0x18c6e:	mov rdi, rax                        
0x18c71:	call 0x1eeae                        
0x18c76:	mov eax, dword ptr [rbp - 0x6c]     #	|c|lose(fd1);
MEMORY OFFSET:     -0x6c     -108  >>-100

0x18c79:	mov edi, eax                        
0x18c7b:	call 0x4a70                         
0x18c80:	mov rax, -5                         #	return |C|F_OPEN2;
0x18c87:	jmp 0x1906f                         
0x18c8c:	mov rax, qword ptr [rbp - 0x30]     #    |x|free(file2);
MEMORY OFFSET:     -0x30     -48  >>-40

0x18c90:	mov rdi, rax                        
0x18c93:	call 0x1eeae                        
0x18c98:	mov edi, 0x8000                     #    buf1 = |x|malloc(CMP_BUFFER_SIZE);
0x18c9d:	call 0x24650                        
0x18ca2:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x18ca6:	mov edi, 0x8000                     #    buf2 = |x|malloc(CMP_BUFFER_SIZE);
0x18cab:	call 0x24650                        
0x18cb0:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x18cb4:	mov rax, qword ptr [rbp - 0x38]     #    msg = xmalloc(32 + |s|trlen(file1) + 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x18cb8:	mov rdi, rax                        
0x18cbb:	call 0x4960                         
0x18cc0:	add rax, 0x21                       #    msg = |x|malloc(32 + strlen(file1) + 1);
0x18cc4:	mov rdi, rax                        
0x18cc7:	call 0x24650                        
0x18ccc:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18cd0:	mov qword ptr [rbp - 0x58], 0       #    for(n|=|0 ; ; )
MEMORY OFFSET:     -0x58     -88  >>-80

0x18cd8:	mov eax, 0                          #	if (|c|anceled())
0x18cdd:	call 0x15065                        
0x18ce2:	test eax, eax                       #	if |(|canceled())
0x18ce4:	je 0x18cf2                          
0x18ce6:	mov dword ptr [rbp - 0x80], 1       #	    aborted |=| 1;
MEMORY OFFSET:     -0x80     -128  >>-120

0x18ced:	jmp 0x18ee8                         #	    |b|reak;
0x18cf2:	mov edi, 1                          #	|s|ignals(ON);
0x18cf7:	call 0x1eaed                        
0x18cfc:	mov rcx, qword ptr [rbp - 0x20]     #	read1 = |r|ead(fd1, buf1, CMP_BUFFER_SIZE);
MEMORY OFFSET:     -0x20     -32  >>-24

0x18d00:	mov eax, dword ptr [rbp - 0x6c]     
MEMORY OFFSET:     -0x6c     -108  >>-100

0x18d03:	mov edx, 0x8000                     
0x18d08:	mov rsi, rcx                        
0x18d0b:	mov edi, eax                        
0x18d0d:	call 0x4780                         
0x18d12:	mov dword ptr [rbp - 0x64], eax     #	read1 |=| read(fd1, buf1, CMP_BUFFER_SIZE);
MEMORY OFFSET:     -0x64     -100  >>-92

0x18d15:	mov edi, 0                          #	|s|ignals(OFF);
0x18d1a:	call 0x1eaed                        
0x18d1f:	cmp dword ptr [rbp - 0x64], 0       #	if |(|read1 < 0)
MEMORY OFFSET:     -0x64     -100  >>-92

0x18d23:	jns 0x18d45                         
0x18d25:	mov eax, dword ptr [rbp - 0x6c]     #	    |c|lose(fd1);
MEMORY OFFSET:     -0x6c     -108  >>-100

0x18d28:	mov edi, eax                        
0x18d2a:	call 0x4a70                         
0x18d2f:	mov eax, dword ptr [rbp - 0x68]     #	    |c|lose(fd2);
MEMORY OFFSET:     -0x68     -104  >>-96

0x18d32:	mov edi, eax                        
0x18d34:	call 0x4a70                         
0x18d39:	mov rax, -2                         #	    return |C|F_READ1;
0x18d40:	jmp 0x1906f                         
0x18d45:	mov rax, qword ptr [rbp - 0x98]     #	*this_size |+|= read1;
MEMORY OFFSET:     -0x98     -152  >>-144

0x18d4c:	mov rdx, qword ptr [rax]            
0x18d4f:	mov eax, dword ptr [rbp - 0x64]     
MEMORY OFFSET:     -0x64     -100  >>-92

0x18d52:	cdqe                                
0x18d54:	add rdx, rax                        
0x18d57:	mov rax, qword ptr [rbp - 0x98]     
MEMORY OFFSET:     -0x98     -152  >>-144

0x18d5e:	mov qword ptr [rax], rdx            
0x18d61:	mov edi, 1                          #	|s|ignals(ON);
0x18d66:	call 0x1eaed                        
0x18d6b:	mov rcx, qword ptr [rbp - 0x18]     #	read2 = |r|ead(fd2, buf2, CMP_BUFFER_SIZE);
MEMORY OFFSET:     -0x18     -24  >>-16

0x18d6f:	mov eax, dword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x18d72:	mov edx, 0x8000                     
0x18d77:	mov rsi, rcx                        
0x18d7a:	mov edi, eax                        
0x18d7c:	call 0x4780                         
0x18d81:	mov dword ptr [rbp - 0x60], eax     #	read2 |=| read(fd2, buf2, CMP_BUFFER_SIZE);
MEMORY OFFSET:     -0x60     -96  >>-88

0x18d84:	mov edi, 0                          #	|s|ignals(OFF);
0x18d89:	call 0x1eaed                        
0x18d8e:	cmp dword ptr [rbp - 0x60], 0       #	if |(|read2 < 0)
MEMORY OFFSET:     -0x60     -96  >>-88

0x18d92:	jns 0x18db4                         
0x18d94:	mov eax, dword ptr [rbp - 0x6c]     #	    |c|lose(fd1);
MEMORY OFFSET:     -0x6c     -108  >>-100

0x18d97:	mov edi, eax                        
0x18d99:	call 0x4a70                         
0x18d9e:	mov eax, dword ptr [rbp - 0x68]     #	    |c|lose(fd2);
MEMORY OFFSET:     -0x68     -104  >>-96

0x18da1:	mov edi, eax                        
0x18da3:	call 0x4a70                         
0x18da8:	mov rax, -3                         #	    return |C|F_READ2;
0x18daf:	jmp 0x1906f                         
0x18db4:	mov rax, qword ptr [rbp - 0xa8]     #	*other_size |+|= read2;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x18dbb:	mov rdx, qword ptr [rax]            
0x18dbe:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x18dc1:	cdqe                                
0x18dc3:	add rdx, rax                        
0x18dc6:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x18dcd:	mov qword ptr [rax], rdx            
0x18dd0:	mov edx, dword ptr [rbp - 0x64]     #	bytes_read |=| min(read1, read2);
MEMORY OFFSET:     -0x64     -100  >>-92

0x18dd3:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x18dd6:	cmp edx, eax                        
0x18dd8:	cmovle eax, edx                     
0x18ddb:	mov dword ptr [rbp - 0x5c], eax     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x18dde:	cmp dword ptr [rbp - 0x5c], 0       #	if|(|bytes_read == 0)
MEMORY OFFSET:     -0x5c     -92  >>-84

0x18de2:	je 0x18ee7                          
0x18de8:	mov eax, dword ptr [rbp - 0x5c]     #	if (|m|emcmp(buf1, buf2, bytes_read) != 0)
MEMORY OFFSET:     -0x5c     -92  >>-84

0x18deb:	movsxd rdx, eax                     
0x18dee:	mov rcx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x18df2:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x18df6:	mov rsi, rcx                        
0x18df9:	mov rdi, rax                        
0x18dfc:	call 0x4ab0                         
0x18e01:	test eax, eax                       #	if |(|memcmp(buf1, buf2, bytes_read) != 0)
0x18e03:	je 0x18e56                          
0x18e05:	mov dword ptr [rbp - 0x70], 0       #	    for (i |=| 0; i < bytes_read; i++)
MEMORY OFFSET:     -0x70     -112  >>-104

0x18e0c:	jmp 0x18e36                         #	    |f|or (i = 0; i < bytes_read; i++)
0x18e0e:	mov eax, dword ptr [rbp - 0x70]     #		if (buf1|[|i] != buf2[i])
MEMORY OFFSET:     -0x70     -112  >>-104

0x18e11:	movsxd rdx, eax                     
0x18e14:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x18e18:	add rax, rdx                        
0x18e1b:	movzx edx, byte ptr [rax]           
0x18e1e:	mov eax, dword ptr [rbp - 0x70]     #		if (buf1[i] != buf2|[|i])
MEMORY OFFSET:     -0x70     -112  >>-104

0x18e21:	movsxd rcx, eax                     
0x18e24:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x18e28:	add rax, rcx                        
0x18e2b:	movzx eax, byte ptr [rax]           
0x18e2e:	cmp dl, al                          #		if |(|buf1[i] != buf2[i])
0x18e30:	jne 0x18e40                         
0x18e32:	add dword ptr [rbp - 0x70], 1       #	    for (i = 0; i < bytes_read; i|+|+)
MEMORY OFFSET:     -0x70     -112  >>-104

0x18e36:	mov eax, dword ptr [rbp - 0x70]     #	    for (i = 0; i |<| bytes_read; i++)
MEMORY OFFSET:     -0x70     -112  >>-104

0x18e39:	cmp eax, dword ptr [rbp - 0x5c]     
MEMORY OFFSET:     -0x5c     -92  >>-84

0x18e3c:	jl 0x18e0e                          
0x18e3e:	jmp 0x18e41                         
0x18e40:	nop                                 #		    |b|reak;
0x18e41:	mov eax, dword ptr [rbp - 0x70]     #	    n |+|= i;
MEMORY OFFSET:     -0x70     -112  >>-104

0x18e44:	cdqe                                
0x18e46:	add qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x18e4a:	mov dword ptr [rbp - 0x74], 1       #	    mismatch|=|1;
MEMORY OFFSET:     -0x74     -116  >>-108

0x18e51:	jmp 0x18ee8                         #	    |b|reak;
0x18e56:	mov eax, dword ptr [rbp - 0x5c]     #	n |+|= bytes_read;
MEMORY OFFSET:     -0x5c     -92  >>-84

0x18e59:	cdqe                                
0x18e5b:	add qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x18e5f:	cmp qword ptr [rbp - 0x50], 0       #	if|(|!size)
MEMORY OFFSET:     -0x50     -80  >>-72

0x18e64:	jne 0x18e87                         
0x18e66:	mov rdx, qword ptr [rbp - 0x38]     #	    |s|printf(msg, "(CMP) %s", file1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x18e6a:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18e6e:	lea rcx, [rip + 0xfc45]             
MEMORY OFFSET:     0xfc45     64581  >>64589

0x18e75:	mov rsi, rcx                        
0x18e78:	mov rdi, rax                        
0x18e7b:	mov eax, 0                          
0x18e80:	call 0x4dd0                         
0x18e85:	jmp 0x18ec2                         
0x18e87:	mov rdx, qword ptr [rbp - 0x50]     #	    |s|printf(msg, "(CMP) [%3d%%] %s",
MEMORY OFFSET:     -0x50     -80  >>-72

0x18e8b:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x18e8f:	mov rsi, rdx                        
0x18e92:	mov rdi, rax                        
0x18e95:	mov eax, 0                          
0x18e9a:	call 0x152ff                        
0x18e9f:	mov esi, eax                        
0x18ea1:	mov rdx, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x18ea5:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x18ea9:	mov rcx, rdx                        
0x18eac:	mov edx, esi                        
0x18eae:	lea rsi, [rip + 0xfc1f]             
MEMORY OFFSET:     0xfc1f     64543  >>64551

0x18eb5:	mov rdi, rax                        
0x18eb8:	mov eax, 0                          
0x18ebd:	call 0x4dd0                         
0x18ec2:	mov rax, qword ptr [rbp - 0x28]     #	|s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
MEMORY OFFSET:     -0x28     -40  >>-32

0x18ec6:	mov edx, 1                          
0x18ecb:	mov esi, 1                          
0x18ed0:	mov rdi, rax                        
0x18ed3:	call 0x107d0                        
0x18ed8:	mov eax, 0                          #	|t|ty_update();
0x18edd:	call 0xb4b7                         
0x18ee2:	jmp 0x18cd8                         #    |{|
0x18ee7:	nop                                 #	    |b|reak;
0x18ee8:	cmp dword ptr [rbp - 0x74], 0       #    if|(|mismatch)
MEMORY OFFSET:     -0x74     -116  >>-108

0x18eec:	je 0x19024                          
0x18ef2:	cmp dword ptr [rbp - 0x7c], 0       #	if|(|is_special1)
MEMORY OFFSET:     -0x7c     -124  >>-116

0x18ef6:	je 0x18f58                          
0x18ef8:	mov edi, 1                          #	    |s|ignals(ON);
0x18efd:	call 0x1eaed                        
0x18f02:	mov rcx, qword ptr [rbp - 0x20]     #		read1 = |r|ead(fd1, buf1, CMP_BUFFER_SIZE);
MEMORY OFFSET:     -0x20     -32  >>-24

0x18f06:	mov eax, dword ptr [rbp - 0x6c]     
MEMORY OFFSET:     -0x6c     -108  >>-100

0x18f09:	mov edx, 0x8000                     
0x18f0e:	mov rsi, rcx                        
0x18f11:	mov edi, eax                        
0x18f13:	call 0x4780                         
0x18f18:	mov dword ptr [rbp - 0x64], eax     #		read1 |=| read(fd1, buf1, CMP_BUFFER_SIZE);
MEMORY OFFSET:     -0x64     -100  >>-92

0x18f1b:	cmp dword ptr [rbp - 0x64], 0       #	    } while((read1 > 0) |&|& (*this_size += read1));
MEMORY OFFSET:     -0x64     -100  >>-92

0x18f1f:	jle 0x18f4c                         
0x18f21:	mov rax, qword ptr [rbp - 0x98]     #	    } while((read1 > 0) && (*this_size |+|= read1));
MEMORY OFFSET:     -0x98     -152  >>-144

0x18f28:	mov rdx, qword ptr [rax]            
0x18f2b:	mov eax, dword ptr [rbp - 0x64]     
MEMORY OFFSET:     -0x64     -100  >>-92

0x18f2e:	cdqe                                
0x18f30:	add rdx, rax                        
0x18f33:	mov rax, qword ptr [rbp - 0x98]     
MEMORY OFFSET:     -0x98     -152  >>-144

0x18f3a:	mov qword ptr [rax], rdx            
0x18f3d:	mov rax, qword ptr [rbp - 0x98]     
MEMORY OFFSET:     -0x98     -152  >>-144

0x18f44:	mov rax, qword ptr [rax]            
0x18f47:	test rax, rax                       #	    } while((read1 > 0) |&|& (*this_size += read1));
0x18f4a:	jne 0x18f02                         
0x18f4c:	mov edi, 0                          #	    |s|ignals(OFF);
0x18f51:	call 0x1eaed                        
0x18f56:	jmp 0x18f8b                         
0x18f58:	mov rax, qword ptr [rbp - 0x88]     #	    *this_size=this|-|>dir_entry[this_entry].size;
MEMORY OFFSET:     -0x88     -136  >>-128

0x18f5f:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18f63:	mov eax, dword ptr [rbp - 0x8c]     #	    *this_size=this->dir_entry|[|this_entry].size;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x18f69:	movsxd rdx, eax                     
0x18f6c:	mov rax, rdx                        
0x18f6f:	shl rax, 2                          
0x18f73:	add rax, rdx                        
0x18f76:	shl rax, 4                          
0x18f7a:	add rax, rcx                        
0x18f7d:	mov rdx, qword ptr [rax + 8]        #	    *this_size=this->dir_entry[this_entry]|.|size;
MEMORY OFFSET:     0x8     8  >>16

0x18f81:	mov rax, qword ptr [rbp - 0x98]     #	    *this_size|=|this->dir_entry[this_entry].size;
MEMORY OFFSET:     -0x98     -152  >>-144

0x18f88:	mov qword ptr [rax], rdx            
0x18f8b:	cmp dword ptr [rbp - 0x78], 0       #	if|(|is_special2)
MEMORY OFFSET:     -0x78     -120  >>-112

0x18f8f:	je 0x18ff1                          
0x18f91:	mov edi, 1                          #	    |s|ignals(ON);
0x18f96:	call 0x1eaed                        
0x18f9b:	mov rcx, qword ptr [rbp - 0x18]     #		read2 = |r|ead(fd2, buf2, CMP_BUFFER_SIZE);
MEMORY OFFSET:     -0x18     -24  >>-16

0x18f9f:	mov eax, dword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x18fa2:	mov edx, 0x8000                     
0x18fa7:	mov rsi, rcx                        
0x18faa:	mov edi, eax                        
0x18fac:	call 0x4780                         
0x18fb1:	mov dword ptr [rbp - 0x60], eax     #		read2 |=| read(fd2, buf2, CMP_BUFFER_SIZE);
MEMORY OFFSET:     -0x60     -96  >>-88

0x18fb4:	cmp dword ptr [rbp - 0x60], 0       #	    } while((read2 > 0) |&|& (*other_size += read2));
MEMORY OFFSET:     -0x60     -96  >>-88

0x18fb8:	jle 0x18fe5                         
0x18fba:	mov rax, qword ptr [rbp - 0xa8]     #	    } while((read2 > 0) && (*other_size |+|= read2));
MEMORY OFFSET:     -0xa8     -168  >>-160

0x18fc1:	mov rdx, qword ptr [rax]            
0x18fc4:	mov eax, dword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x18fc7:	cdqe                                
0x18fc9:	add rdx, rax                        
0x18fcc:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x18fd3:	mov qword ptr [rax], rdx            
0x18fd6:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x18fdd:	mov rax, qword ptr [rax]            
0x18fe0:	test rax, rax                       #	    } while((read2 > 0) |&|& (*other_size += read2));
0x18fe3:	jne 0x18f9b                         
0x18fe5:	mov edi, 0                          #	    |s|ignals(OFF);
0x18fea:	call 0x1eaed                        
0x18fef:	jmp 0x19024                         
0x18ff1:	mov rax, qword ptr [rbp - 0xa0]     #	    *other_size=other|-|>dir_entry[other_entry].size;
MEMORY OFFSET:     -0xa0     -160  >>-152

0x18ff8:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x18ffc:	mov eax, dword ptr [rbp - 0x90]     #	    *other_size=other->dir_entry|[|other_entry].size;
MEMORY OFFSET:     -0x90     -144  >>-136

0x19002:	movsxd rdx, eax                     
0x19005:	mov rax, rdx                        
0x19008:	shl rax, 2                          
0x1900c:	add rax, rdx                        
0x1900f:	shl rax, 4                          
0x19013:	add rax, rcx                        
0x19016:	mov rdx, qword ptr [rax + 8]        #	    *other_size=other->dir_entry[other_entry]|.|size;
MEMORY OFFSET:     0x8     8  >>16

0x1901a:	mov rax, qword ptr [rbp - 0xa8]     #	    *other_size|=|other->dir_entry[other_entry].size;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x19021:	mov qword ptr [rax], rdx            
0x19024:	mov rax, qword ptr [rbp - 0x28]     #    |x|free(msg);
MEMORY OFFSET:     -0x28     -40  >>-32

0x19028:	mov rdi, rax                        
0x1902b:	call 0x1eeae                        
0x19030:	mov rax, qword ptr [rbp - 0x20]     #    |x|free(buf1);
MEMORY OFFSET:     -0x20     -32  >>-24

0x19034:	mov rdi, rax                        
0x19037:	call 0x1eeae                        
0x1903c:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(buf2);
MEMORY OFFSET:     -0x18     -24  >>-16

0x19040:	mov rdi, rax                        
0x19043:	call 0x1eeae                        
0x19048:	mov eax, dword ptr [rbp - 0x6c]     #    |c|lose(fd1);
MEMORY OFFSET:     -0x6c     -108  >>-100

0x1904b:	mov edi, eax                        
0x1904d:	call 0x4a70                         
0x19052:	mov eax, dword ptr [rbp - 0x68]     #    |c|lose(fd2);
MEMORY OFFSET:     -0x68     -104  >>-96

0x19055:	mov edi, eax                        
0x19057:	call 0x4a70                         
0x1905c:	cmp dword ptr [rbp - 0x80], 0       #    return aborted ? CF_ABORT |:| n;
MEMORY OFFSET:     -0x80     -128  >>-120

0x19060:	jne 0x19068                         
0x19062:	mov rax, qword ptr [rbp - 0x58]     #    return aborted ? CF_ABORT |:| n;
MEMORY OFFSET:     -0x58     -88  >>-80

0x19066:	jmp 0x1906f                         
0x19068:	mov rax, -1                         #    return aborted ? CF_ABORT |:| n;
0x1906f:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x19073:	leave                               
0x19074:	ret                                 
0x19075:	endbr64                             #|{|
0x19079:	push rbp                            
0x1907a:	mov rbp, rsp                        
0x1907d:	sub rsp, 0x50                       
0x19081:	mov qword ptr [rbp - 0x48], rdi     
MEMORY OFFSET:     -0x48     -72  >>-64

0x19085:	mov qword ptr [rbp - 0x50], rsi     
MEMORY OFFSET:     -0x50     -80  >>-72

0x19089:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x19092:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x19096:	xor eax, eax                        
0x19098:	mov dword ptr [rbp - 0x34], 1       #    int |p|ermission = 1;
MEMORY OFFSET:     -0x34     -52  >>-44

0x1909f:	mov rax, qword ptr [rbp - 0x48]     #    int |t|his_entry = this->current_entry;
MEMORY OFFSET:     -0x48     -72  >>-64

0x190a3:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x190a6:	mov dword ptr [rbp - 0x30], eax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x190a9:	mov rax, qword ptr [rbp - 0x50]     #    int |o|ther_entry = other->current_entry;
MEMORY OFFSET:     -0x50     -80  >>-72

0x190ad:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x190b0:	mov dword ptr [rbp - 0x2c], eax     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x190b3:	mov rax, qword ptr [rip + 0x17476]  #    |i|l_message(PANEL_COMPARE_FILES_MSG);
MEMORY OFFSET:     0x17476     95350  >>95358

0x190ba:	mov rdi, rax                        
0x190bd:	call 0xfcbe                         
0x190c2:	mov eax, 0                          #    |t|ty_update();
0x190c7:	call 0xb4b7                         
0x190cc:	mov rax, qword ptr [rbp - 0x50]     #    if ((strcmp(this->path, other|-|>path) == 0) &&
MEMORY OFFSET:     -0x50     -80  >>-72

0x190d0:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x190d4:	mov rax, qword ptr [rbp - 0x48]     #    if ((strcmp(this|-|>path, other->path) == 0) &&
MEMORY OFFSET:     -0x48     -72  >>-64

0x190d8:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x190dc:	mov rsi, rdx                        #    if ((|s|trcmp(this->path, other->path) == 0) &&
0x190df:	mov rdi, rax                        
0x190e2:	call 0x4af0                         
0x190e7:	test eax, eax                       #    if |(|(strcmp(this->path, other->path) == 0) &&
0x190e9:	jne 0x1915c                         
0x190eb:	mov rax, qword ptr [rbp - 0x50]     #		other|-|>dir_entry[other_entry].name) == 0))
MEMORY OFFSET:     -0x50     -80  >>-72

0x190ef:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x190f3:	mov eax, dword ptr [rbp - 0x2c]     #		other->dir_entry|[|other_entry].name) == 0))
MEMORY OFFSET:     -0x2c     -44  >>-36

0x190f6:	movsxd rdx, eax                     
0x190f9:	mov rax, rdx                        
0x190fc:	shl rax, 2                          
0x19100:	add rax, rdx                        
0x19103:	shl rax, 4                          
0x19107:	add rax, rcx                        
0x1910a:	mov rdx, qword ptr [rax]            #		other->dir_entry[other_entry]|.|name) == 0))
0x1910d:	mov rax, qword ptr [rbp - 0x48]     #	(strcmp(this|-|>dir_entry[this_entry].name,
MEMORY OFFSET:     -0x48     -72  >>-64

0x19111:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19115:	mov eax, dword ptr [rbp - 0x30]     #	(strcmp(this->dir_entry|[|this_entry].name,
MEMORY OFFSET:     -0x30     -48  >>-40

0x19118:	movsxd rcx, eax                     
0x1911b:	mov rax, rcx                        
0x1911e:	shl rax, 2                          
0x19122:	add rax, rcx                        
0x19125:	shl rax, 4                          
0x19129:	add rax, rsi                        
0x1912c:	mov rax, qword ptr [rax]            #	(strcmp(this->dir_entry[this_entry]|.|name,
0x1912f:	mov rsi, rdx                        #	(|s|trcmp(this->dir_entry[this_entry].name,
0x19132:	mov rdi, rax                        
0x19135:	call 0x4af0                         
0x1913a:	test eax, eax                       #    if ((strcmp(this->path, other->path) == 0) |&|&
0x1913c:	jne 0x1915c                         
0x1913e:	mov edx, 0x1c                       #	|p|anel_1s_message("There is no point in comparing a file with itself. ",
0x19143:	mov esi, 0                          
0x19148:	lea rax, [rip + 0xf999]             
MEMORY OFFSET:     0xf999     63897  >>63905

0x1914f:	mov rdi, rax                        
0x19152:	call 0x5c09                         
0x19157:	jmp 0x195d2                         #	|r|eturn;
0x1915c:	mov rax, qword ptr [rbp - 0x48]     #    if (this|-|>dir_entry[this_entry].type == FILE_ENTRY &&
MEMORY OFFSET:     -0x48     -72  >>-64

0x19160:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19164:	mov eax, dword ptr [rbp - 0x30]     #    if (this->dir_entry|[|this_entry].type == FILE_ENTRY &&
MEMORY OFFSET:     -0x30     -48  >>-40

0x19167:	movsxd rdx, eax                     
0x1916a:	mov rax, rdx                        
0x1916d:	shl rax, 2                          
0x19171:	add rax, rdx                        
0x19174:	shl rax, 4                          
0x19178:	add rax, rcx                        
0x1917b:	movzx eax, byte ptr [rax + 0x48]    #    if (this->dir_entry[this_entry]|.|type == FILE_ENTRY &&
MEMORY OFFSET:     0x48     72  >>80

0x1917f:	cmp al, 1                           #    if |(|this->dir_entry[this_entry].type == FILE_ENTRY &&
0x19181:	jne 0x19595                         
0x19187:	mov rax, qword ptr [rbp - 0x50]     #	other|-|>dir_entry[other_entry].type == FILE_ENTRY)
MEMORY OFFSET:     -0x50     -80  >>-72

0x1918b:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1918f:	mov eax, dword ptr [rbp - 0x2c]     #	other->dir_entry|[|other_entry].type == FILE_ENTRY)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x19192:	movsxd rdx, eax                     
0x19195:	mov rax, rdx                        
0x19198:	shl rax, 2                          
0x1919c:	add rax, rdx                        
0x1919f:	shl rax, 4                          
0x191a3:	add rax, rcx                        
0x191a6:	movzx eax, byte ptr [rax + 0x48]    #	other->dir_entry[other_entry]|.|type == FILE_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x191aa:	cmp al, 1                           #    if (this->dir_entry[this_entry].type == FILE_ENTRY |&|&
0x191ac:	jne 0x19595                         
0x191b2:	mov rax, qword ptr [rbp - 0x48]     #	if ((this|-|>dir_entry[this_entry].size !=
MEMORY OFFSET:     -0x48     -72  >>-64

0x191b6:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x191ba:	mov eax, dword ptr [rbp - 0x30]     #	if ((this->dir_entry|[|this_entry].size !=
MEMORY OFFSET:     -0x30     -48  >>-40

0x191bd:	movsxd rdx, eax                     
0x191c0:	mov rax, rdx                        
0x191c3:	shl rax, 2                          
0x191c7:	add rax, rdx                        
0x191ca:	shl rax, 4                          
0x191ce:	add rax, rcx                        
0x191d1:	mov rcx, qword ptr [rax + 8]        #	if ((this->dir_entry[this_entry]|.|size !=
MEMORY OFFSET:     0x8     8  >>16

0x191d5:	mov rax, qword ptr [rbp - 0x50]     #	     other|-|>dir_entry[other_entry].size) &&
MEMORY OFFSET:     -0x50     -80  >>-72

0x191d9:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x191dd:	mov eax, dword ptr [rbp - 0x2c]     #	     other->dir_entry|[|other_entry].size) &&
MEMORY OFFSET:     -0x2c     -44  >>-36

0x191e0:	movsxd rdx, eax                     
0x191e3:	mov rax, rdx                        
0x191e6:	shl rax, 2                          
0x191ea:	add rax, rdx                        
0x191ed:	shl rax, 4                          
0x191f1:	add rax, rsi                        
0x191f4:	mov rax, qword ptr [rax + 8]        #	     other->dir_entry[other_entry]|.|size) &&
MEMORY OFFSET:     0x8     8  >>16

0x191f8:	cmp rcx, rax                        #	if |(|(this->dir_entry[this_entry].size !=
0x191fb:	je 0x19342                          
0x19201:	mov rax, qword ptr [rbp - 0x48]     #	    (!(|I|S_SPECIAL(this->dir_entry[this_entry].mode) ||
MEMORY OFFSET:     -0x48     -72  >>-64

0x19205:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19209:	mov eax, dword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1920c:	movsxd rdx, eax                     
0x1920f:	mov rax, rdx                        
0x19212:	shl rax, 2                          
0x19216:	add rax, rdx                        
0x19219:	shl rax, 4                          
0x1921d:	add rax, rcx                        
0x19220:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x19223:	and eax, 0xf000                     
0x19228:	cmp eax, 0xa000                     #	     other->dir_entry[other_entry].size) |&|&
0x1922d:	je 0x1928f                          
0x1922f:	mov rax, qword ptr [rbp - 0x48]     #	    (!(|I|S_SPECIAL(this->dir_entry[this_entry].mode) ||
MEMORY OFFSET:     -0x48     -72  >>-64

0x19233:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19237:	mov eax, dword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1923a:	movsxd rdx, eax                     
0x1923d:	mov rax, rdx                        
0x19240:	shl rax, 2                          
0x19244:	add rax, rdx                        
0x19247:	shl rax, 4                          
0x1924b:	add rax, rcx                        
0x1924e:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x19251:	and eax, 0xf000                     
0x19256:	cmp eax, 0x4000                     
0x1925b:	je 0x1928f                          
0x1925d:	mov rax, qword ptr [rbp - 0x48]     #	    (!(|I|S_SPECIAL(this->dir_entry[this_entry].mode) ||
MEMORY OFFSET:     -0x48     -72  >>-64

0x19261:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19265:	mov eax, dword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x19268:	movsxd rdx, eax                     
0x1926b:	mov rax, rdx                        
0x1926e:	shl rax, 2                          
0x19272:	add rax, rdx                        
0x19275:	shl rax, 4                          
0x19279:	add rax, rcx                        
0x1927c:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x1927f:	and eax, 0xf000                     
0x19284:	cmp eax, 0x8000                     
0x19289:	jne 0x19342                         
0x1928f:	mov rax, qword ptr [rbp - 0x50]     #	       |I|S_SPECIAL(other->dir_entry[other_entry].mode))))
MEMORY OFFSET:     -0x50     -80  >>-72

0x19293:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19297:	mov eax, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1929a:	movsxd rdx, eax                     
0x1929d:	mov rax, rdx                        
0x192a0:	shl rax, 2                          
0x192a4:	add rax, rdx                        
0x192a7:	shl rax, 4                          
0x192ab:	add rax, rcx                        
0x192ae:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x192b1:	and eax, 0xf000                     
0x192b6:	cmp eax, 0xa000                     #	    (|!|(IS_SPECIAL(this->dir_entry[this_entry].mode) ||
0x192bb:	je 0x19319                          
0x192bd:	mov rax, qword ptr [rbp - 0x50]     #	       |I|S_SPECIAL(other->dir_entry[other_entry].mode))))
MEMORY OFFSET:     -0x50     -80  >>-72

0x192c1:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x192c5:	mov eax, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x192c8:	movsxd rdx, eax                     
0x192cb:	mov rax, rdx                        
0x192ce:	shl rax, 2                          
0x192d2:	add rax, rdx                        
0x192d5:	shl rax, 4                          
0x192d9:	add rax, rcx                        
0x192dc:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x192df:	and eax, 0xf000                     
0x192e4:	cmp eax, 0x4000                     
0x192e9:	je 0x19319                          
0x192eb:	mov rax, qword ptr [rbp - 0x50]     #	       |I|S_SPECIAL(other->dir_entry[other_entry].mode))))
MEMORY OFFSET:     -0x50     -80  >>-72

0x192ef:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x192f3:	mov eax, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x192f6:	movsxd rdx, eax                     
0x192f9:	mov rax, rdx                        
0x192fc:	shl rax, 2                          
0x19300:	add rax, rdx                        
0x19303:	shl rax, 4                          
0x19307:	add rax, rcx                        
0x1930a:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x1930d:	and eax, 0xf000                     
0x19312:	cmp eax, 0x8000                     
0x19317:	jne 0x19342                         
0x19319:	mov edx, 0xc                        #	    if (|p|anel_1s_message("Files have different size.  Continue? ",
0x1931e:	lea rax, [rip + 0xf321]             
MEMORY OFFSET:     0xf321     62241  >>62249

0x19325:	mov rsi, rax                        
0x19328:	lea rax, [rip + 0xf7f1]             
MEMORY OFFSET:     0xf7f1     63473  >>63481

0x1932f:	mov rdi, rax                        
0x19332:	call 0x5c09                         
0x19337:	cmp al, 0x79                        #	    if |(|panel_1s_message("Files have different size.  Continue? ",
0x19339:	je 0x19342                          
0x1933b:	mov dword ptr [rbp - 0x34], 0       #		permission |=| 0;
MEMORY OFFSET:     -0x34     -52  >>-44

0x19342:	cmp dword ptr [rbp - 0x34], 0       #	if |(|permission)
MEMORY OFFSET:     -0x34     -52  >>-44

0x19346:	je 0x195be                          
0x1934c:	lea r8, [rbp - 0x20]                #                |p|anel_compare(this, this_entry, &this_size, other, other_entry, &other_size);
MEMORY OFFSET:     -0x20     -32  >>-24

0x19350:	mov edi, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x19353:	mov rcx, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x19357:	lea rdx, [rbp - 0x28]               
MEMORY OFFSET:     -0x28     -40  >>-32

0x1935b:	mov esi, dword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1935e:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x19362:	mov r9, r8                          
0x19365:	mov r8d, edi                        
0x19368:	mov rdi, rax                        
0x1936b:	mov eax, 0                          
0x19370:	call 0x18810                        
0x19375:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x19379:	mov rax, qword ptr [rbp - 0x18]     #	    switch (|(|int)result)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1937d:	add eax, 5                          #	    |s|witch ((int)result)
0x19380:	cmp eax, 4                          
0x19383:	ja 0x194cc                          
0x19389:	mov eax, eax                        
0x1938b:	lea rdx, [rax*4]                    
0x19393:	lea rax, [rip + 0xfa9a]             
MEMORY OFFSET:     0xfa9a     64154  >>64162

0x1939a:	mov eax, dword ptr [rdx + rax]      
0x1939d:	cdqe                                
0x1939f:	lea rdx, [rip + 0xfa8e]             
MEMORY OFFSET:     0xfa8e     64142  >>64150

0x193a6:	add rax, rdx                        
0x193a9:	jmp rax                             
0x193ac:	mov rax, qword ptr [rbp - 0x48]     #				     this|-|>dir_entry[this_entry].name,
MEMORY OFFSET:     -0x48     -72  >>-64

0x193b0:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x193b4:	mov eax, dword ptr [rbp - 0x30]     #				     this->dir_entry|[|this_entry].name,
MEMORY OFFSET:     -0x30     -48  >>-40

0x193b7:	movsxd rdx, eax                     
0x193ba:	mov rax, rdx                        
0x193bd:	shl rax, 2                          
0x193c1:	add rax, rdx                        
0x193c4:	shl rax, 4                          
0x193c8:	add rax, rcx                        
0x193cb:	mov rax, qword ptr [rax]            #		    |p|anel_2s_message("Cannot open file %s. ",
0x193ce:	mov ecx, 0x1e                       
0x193d3:	mov edx, 0                          
0x193d8:	mov rsi, rax                        
0x193db:	lea rax, [rip + 0xf765]             
MEMORY OFFSET:     0xf765     63333  >>63341

0x193e2:	mov rdi, rax                        
0x193e5:	mov eax, 0                          
0x193ea:	call 0x11568                        
0x193ef:	jmp 0x19593                         #		    |b|reak;
0x193f4:	mov rax, qword ptr [rbp - 0x50]     #				     other|-|>dir_entry[other_entry].name,
MEMORY OFFSET:     -0x50     -80  >>-72

0x193f8:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x193fc:	mov eax, dword ptr [rbp - 0x2c]     #				     other->dir_entry|[|other_entry].name,
MEMORY OFFSET:     -0x2c     -44  >>-36

0x193ff:	movsxd rdx, eax                     
0x19402:	mov rax, rdx                        
0x19405:	shl rax, 2                          
0x19409:	add rax, rdx                        
0x1940c:	shl rax, 4                          
0x19410:	add rax, rcx                        
0x19413:	mov rax, qword ptr [rax]            #		    |p|anel_2s_message("Cannot open file %s. ",
0x19416:	mov ecx, 0x1e                       
0x1941b:	mov edx, 0                          
0x19420:	mov rsi, rax                        
0x19423:	lea rax, [rip + 0xf71d]             
MEMORY OFFSET:     0xf71d     63261  >>63269

0x1942a:	mov rdi, rax                        
0x1942d:	mov eax, 0                          
0x19432:	call 0x11568                        
0x19437:	jmp 0x19593                         #		    |b|reak;
0x1943c:	mov rax, qword ptr [rbp - 0x48]     #				     this|-|>dir_entry[this_entry].name,
MEMORY OFFSET:     -0x48     -72  >>-64

0x19440:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19444:	mov eax, dword ptr [rbp - 0x30]     #				     this->dir_entry|[|this_entry].name,
MEMORY OFFSET:     -0x30     -48  >>-40

0x19447:	movsxd rdx, eax                     
0x1944a:	mov rax, rdx                        
0x1944d:	shl rax, 2                          
0x19451:	add rax, rdx                        
0x19454:	shl rax, 4                          
0x19458:	add rax, rcx                        
0x1945b:	mov rax, qword ptr [rax]            #		    |p|anel_2s_message("I/O error reading from file %s. ",
0x1945e:	mov ecx, 0x1e                       
0x19463:	mov edx, 0                          
0x19468:	mov rsi, rax                        
0x1946b:	lea rax, [rip + 0xf6ee]             
MEMORY OFFSET:     0xf6ee     63214  >>63222

0x19472:	mov rdi, rax                        
0x19475:	mov eax, 0                          
0x1947a:	call 0x11568                        
0x1947f:	jmp 0x19593                         #		    |b|reak;
0x19484:	mov rax, qword ptr [rbp - 0x50]     #				     other|-|>dir_entry[other_entry].name,
MEMORY OFFSET:     -0x50     -80  >>-72

0x19488:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1948c:	mov eax, dword ptr [rbp - 0x2c]     #				     other->dir_entry|[|other_entry].name,
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1948f:	movsxd rdx, eax                     
0x19492:	mov rax, rdx                        
0x19495:	shl rax, 2                          
0x19499:	add rax, rdx                        
0x1949c:	shl rax, 4                          
0x194a0:	add rax, rcx                        
0x194a3:	mov rax, qword ptr [rax]            #		    |p|anel_2s_message("I/O error reading from file %s. ",
0x194a6:	mov ecx, 0x1e                       
0x194ab:	mov edx, 0                          
0x194b0:	mov rsi, rax                        
0x194b3:	lea rax, [rip + 0xf6a6]             
MEMORY OFFSET:     0xf6a6     63142  >>63150

0x194ba:	mov rdi, rax                        
0x194bd:	mov eax, 0                          
0x194c2:	call 0x11568                        
0x194c7:	jmp 0x19593                         #		    |b|reak;
0x194cc:	mov rax, qword ptr [rbp - 0x28]     #		    if ((result |=|= this_size) && (this_size == other_size))
MEMORY OFFSET:     -0x28     -40  >>-32

0x194d0:	cmp qword ptr [rbp - 0x18], rax     #		    if |(|(result == this_size) && (this_size == other_size))
MEMORY OFFSET:     -0x18     -24  >>-16

0x194d4:	jne 0x19501                         
0x194d6:	mov rdx, qword ptr [rbp - 0x28]     #		    if ((result == this_size) && (this_size |=|= other_size))
MEMORY OFFSET:     -0x28     -40  >>-32

0x194da:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x194de:	cmp rdx, rax                        #		    if ((result == this_size) |&|& (this_size == other_size))
0x194e1:	jne 0x19501                         
0x194e3:	mov edx, 0x14                       #			|p|anel_1s_message("Compare OK. ", (char *)NULL,
0x194e8:	mov esi, 0                          
0x194ed:	lea rax, [rip + 0xf68d]             
MEMORY OFFSET:     0xf68d     63117  >>63125

0x194f4:	mov rdi, rax                        
0x194f7:	call 0x5c09                         
0x194fc:	jmp 0x19593                         #		    |b|reak;
0x19501:	mov rdx, qword ptr [rbp - 0x28]     #		    else if (result == |m|in(this_size, other_size))
MEMORY OFFSET:     -0x28     -40  >>-32

0x19505:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x19509:	cmp rdx, rax                        
0x1950c:	cmovle rax, rdx                     
0x19510:	cmp qword ptr [rbp - 0x18], rax     #		    else if |(|result == min(this_size, other_size))
MEMORY OFFSET:     -0x18     -24  >>-16

0x19514:	jne 0x19531                         
0x19516:	mov edx, 0x14                       #			|p|anel_1s_message("Files are different sizes but are identical up to the size of the smallest.",
0x1951b:	mov esi, 0                          
0x19520:	lea rax, [rip + 0xf669]             
MEMORY OFFSET:     0xf669     63081  >>63089

0x19527:	mov rdi, rax                        
0x1952a:	call 0x5c09                         
0x1952f:	jmp 0x19593                         #		    |b|reak;
0x19531:	mov edi, 0x80                       #			char *msg = |x|malloc(128);
0x19536:	call 0x24650                        
0x1953b:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1953f:	mov rcx, qword ptr [rbp - 0x18]     #			|s|printf(msg, "%Ld (0x%Lx)", result, result);
MEMORY OFFSET:     -0x18     -24  >>-16

0x19543:	mov rdx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x19547:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1954b:	lea rsi, [rip + 0xf68a]             
MEMORY OFFSET:     0xf68a     63114  >>63122

0x19552:	mov rdi, rax                        
0x19555:	mov eax, 0                          
0x1955a:	call 0x4dd0                         
0x1955f:	mov rax, qword ptr [rbp - 0x10]     #			|p|anel_2s_message("Files differ at offset %s. ",
MEMORY OFFSET:     -0x10     -16  >>-8

0x19563:	mov ecx, 0x14                       
0x19568:	mov edx, 0                          
0x1956d:	mov rsi, rax                        
0x19570:	lea rax, [rip + 0xf671]             
MEMORY OFFSET:     0xf671     63089  >>63097

0x19577:	mov rdi, rax                        
0x1957a:	mov eax, 0                          
0x1957f:	call 0x11568                        
0x19584:	mov rax, qword ptr [rbp - 0x10]     #			|x|free(msg);
MEMORY OFFSET:     -0x10     -16  >>-8

0x19588:	mov rdi, rax                        
0x1958b:	call 0x1eeae                        
0x19590:	jmp 0x19593                         #		    |b|reak;
0x19592:	nop                                 #		    |b|reak;
0x19593:	jmp 0x195be                         #	if |(|permission)
0x19595:	mov rax, qword ptr [rbp - 0x48]     #	|p|anel_2s_message("Only regular files can be compared. ",
MEMORY OFFSET:     -0x48     -72  >>-64

0x19599:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1959d:	mov ecx, 0x1e                       
0x195a2:	mov edx, 0                          
0x195a7:	mov rsi, rax                        
0x195aa:	lea rax, [rip + 0xf657]             
MEMORY OFFSET:     0xf657     63063  >>63071

0x195b1:	mov rdi, rax                        
0x195b4:	mov eax, 0                          
0x195b9:	call 0x11568                        
0x195be:	mov eax, 0                          #    |s|tatus_default();
0x195c3:	call 0x10857                        
0x195c8:	mov eax, 0                          #    |t|ty_update();
0x195cd:	call 0xb4b7                         
0x195d2:	mov rax, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x195d6:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x195df:	je 0x195e6                          
0x195e1:	call 0x4980                         
0x195e6:	leave                               
0x195e7:	ret                                 
0x195e8:	endbr64                             #|{|
0x195ec:	push rbp                            
0x195ed:	mov rbp, rsp                        
0x195f0:	sub rsp, 0x50                       
0x195f4:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x195f8:	mov qword ptr [rbp - 0x40], rsi     
MEMORY OFFSET:     -0x40     -64  >>-56

0x195fc:	mov dword ptr [rbp - 0x44], edx     
MEMORY OFFSET:     -0x44     -68  >>-60

0x195ff:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x19608:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1960c:	xor eax, eax                        
0x1960e:	mov rax, qword ptr [rip + 0x16f13]  #    |i|l_message(PANEL_COMPARE_DIR_MSG);
MEMORY OFFSET:     0x16f13     93971  >>93979

0x19615:	mov rdi, rax                        
0x19618:	call 0xfcbe                         
0x1961d:	mov eax, 0                          #    |t|ty_update();
0x19622:	call 0xb4b7                         
0x19627:	mov rax, qword ptr [rbp - 0x40]     #    if (strcmp(this->path, other|-|>path) == 0)
MEMORY OFFSET:     -0x40     -64  >>-56

0x1962b:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1962f:	mov rax, qword ptr [rbp - 0x38]     #    if (strcmp(this|-|>path, other->path) == 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x19633:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x19637:	mov rsi, rdx                        #    if (|s|trcmp(this->path, other->path) == 0)
0x1963a:	mov rdi, rax                        
0x1963d:	call 0x4af0                         
0x19642:	test eax, eax                       #    if |(|strcmp(this->path, other->path) == 0)
0x19644:	jne 0x19694                         
0x19646:	mov edx, 0x1c                       #	|p|anel_1s_message("No point in comparing a directory with itself. ",
0x1964b:	mov esi, 0                          
0x19650:	lea rax, [rip + 0xf5d9]             
MEMORY OFFSET:     0xf5d9     62937  >>62945

0x19657:	mov rdi, rax                        
0x1965a:	call 0x5c09                         
0x1965f:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_unselect_all(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x19663:	mov rdi, rax                        
0x19666:	call 0x14ff9                        
0x1966b:	mov rax, qword ptr [rbp - 0x40]     #	|p|anel_unselect_all(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x1966f:	mov rdi, rax                        
0x19672:	call 0x14ff9                        
0x19677:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_update(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x1967b:	mov rdi, rax                        
0x1967e:	call 0x14e6a                        
0x19683:	mov rax, qword ptr [rbp - 0x40]     #	|p|anel_update(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x19687:	mov rdi, rax                        
0x1968a:	call 0x14e6a                        
0x1968f:	jmp 0x19a16                         #	|r|eturn;
0x19694:	mov rax, qword ptr [rbp - 0x38]     #    |p|anel_select_all(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x19698:	mov rdi, rax                        
0x1969b:	call 0x14f47                        
0x196a0:	mov rax, qword ptr [rbp - 0x40]     #    |p|anel_select_all(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x196a4:	mov rdi, rax                        
0x196a7:	call 0x14f47                        
0x196ac:	mov dword ptr [rbp - 0x28], 1       #    for (i |=| 1; i < this->entries; i++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x196b3:	jmp 0x199b7                         #    |f|or (i = 1; i < this->entries; i++)
0x196b8:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>dir_entry[i].type == FILE_ENTRY)
MEMORY OFFSET:     -0x38     -56  >>-48

0x196bc:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x196c0:	mov eax, dword ptr [rbp - 0x28]     #	if (this->dir_entry|[|i].type == FILE_ENTRY)
MEMORY OFFSET:     -0x28     -40  >>-32

0x196c3:	movsxd rdx, eax                     
0x196c6:	mov rax, rdx                        
0x196c9:	shl rax, 2                          
0x196cd:	add rax, rdx                        
0x196d0:	shl rax, 4                          
0x196d4:	add rax, rcx                        
0x196d7:	movzx eax, byte ptr [rax + 0x48]    #	if (this->dir_entry[i]|.|type == FILE_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x196db:	cmp al, 1                           #	if |(|this->dir_entry[i].type == FILE_ENTRY)
0x196dd:	jne 0x199b3                         
0x196e3:	mov dword ptr [rbp - 0x24], 1       #	    for (j |=| 1; j < other->entries; j++)
MEMORY OFFSET:     -0x24     -36  >>-28

0x196ea:	jmp 0x199a3                         #	    |f|or (j = 1; j < other->entries; j++)
0x196ef:	mov eax, 0                          #		|s|ervice_pending_signals();
0x196f4:	call 0x1ea4b                        
0x196f9:	mov rax, qword ptr [rbp - 0x40]     #		if (other|-|>dir_entry[j].type == FILE_ENTRY &&
MEMORY OFFSET:     -0x40     -64  >>-56

0x196fd:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19701:	mov eax, dword ptr [rbp - 0x24]     #		if (other->dir_entry|[|j].type == FILE_ENTRY &&
MEMORY OFFSET:     -0x24     -36  >>-28

0x19704:	movsxd rdx, eax                     
0x19707:	mov rax, rdx                        
0x1970a:	shl rax, 2                          
0x1970e:	add rax, rdx                        
0x19711:	shl rax, 4                          
0x19715:	add rax, rcx                        
0x19718:	movzx eax, byte ptr [rax + 0x48]    #		if (other->dir_entry[j]|.|type == FILE_ENTRY &&
MEMORY OFFSET:     0x48     72  >>80

0x1971c:	cmp al, 1                           #		if |(|other->dir_entry[j].type == FILE_ENTRY &&
0x1971e:	jne 0x1999f                         
0x19724:	mov rax, qword ptr [rbp - 0x40]     #			   other|-|>dir_entry[j].name) == 0)
MEMORY OFFSET:     -0x40     -64  >>-56

0x19728:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1972c:	mov eax, dword ptr [rbp - 0x24]     #			   other->dir_entry|[|j].name) == 0)
MEMORY OFFSET:     -0x24     -36  >>-28

0x1972f:	movsxd rdx, eax                     
0x19732:	mov rax, rdx                        
0x19735:	shl rax, 2                          
0x19739:	add rax, rdx                        
0x1973c:	shl rax, 4                          
0x19740:	add rax, rcx                        
0x19743:	mov rdx, qword ptr [rax]            #			   other->dir_entry[j]|.|name) == 0)
0x19746:	mov rax, qword ptr [rbp - 0x38]     #		    strcmp(this|-|>dir_entry[i].name,
MEMORY OFFSET:     -0x38     -56  >>-48

0x1974a:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1974e:	mov eax, dword ptr [rbp - 0x28]     #		    strcmp(this->dir_entry|[|i].name,
MEMORY OFFSET:     -0x28     -40  >>-32

0x19751:	movsxd rcx, eax                     
0x19754:	mov rax, rcx                        
0x19757:	shl rax, 2                          
0x1975b:	add rax, rcx                        
0x1975e:	shl rax, 4                          
0x19762:	add rax, rsi                        
0x19765:	mov rax, qword ptr [rax]            #		    strcmp(this->dir_entry[i]|.|name,
0x19768:	mov rsi, rdx                        #		    |s|trcmp(this->dir_entry[i].name,
0x1976b:	mov rdi, rax                        
0x1976e:	call 0x4af0                         
0x19773:	test eax, eax                       #		if (other->dir_entry[j].type == FILE_ENTRY |&|&
0x19775:	jne 0x1999f                         
0x1977b:	mov rax, qword ptr [rbp - 0x38]     #		    if (this|-|>dir_entry[i].size == other->dir_entry[j].size)
MEMORY OFFSET:     -0x38     -56  >>-48

0x1977f:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19783:	mov eax, dword ptr [rbp - 0x28]     #		    if (this->dir_entry|[|i].size == other->dir_entry[j].size)
MEMORY OFFSET:     -0x28     -40  >>-32

0x19786:	movsxd rdx, eax                     
0x19789:	mov rax, rdx                        
0x1978c:	shl rax, 2                          
0x19790:	add rax, rdx                        
0x19793:	shl rax, 4                          
0x19797:	add rax, rcx                        
0x1979a:	mov rcx, qword ptr [rax + 8]        #		    if (this->dir_entry[i]|.|size == other->dir_entry[j].size)
MEMORY OFFSET:     0x8     8  >>16

0x1979e:	mov rax, qword ptr [rbp - 0x40]     #		    if (this->dir_entry[i].size == other|-|>dir_entry[j].size)
MEMORY OFFSET:     -0x40     -64  >>-56

0x197a2:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x197a6:	mov eax, dword ptr [rbp - 0x24]     #		    if (this->dir_entry[i].size == other->dir_entry|[|j].size)
MEMORY OFFSET:     -0x24     -36  >>-28

0x197a9:	movsxd rdx, eax                     
0x197ac:	mov rax, rdx                        
0x197af:	shl rax, 2                          
0x197b3:	add rax, rdx                        
0x197b6:	shl rax, 4                          
0x197ba:	add rax, rsi                        
0x197bd:	mov rax, qword ptr [rax + 8]        #		    if (this->dir_entry[i].size == other->dir_entry[j]|.|size)
MEMORY OFFSET:     0x8     8  >>16

0x197c1:	cmp rcx, rax                        #		    if |(|this->dir_entry[i].size == other->dir_entry[j].size)
0x197c4:	jne 0x19873                         
0x197ca:	cmp dword ptr [rbp - 0x44], 0       #			if |(|quick)
MEMORY OFFSET:     -0x44     -68  >>-60

0x197ce:	je 0x19821                          
0x197d0:	mov rax, qword ptr [rbp - 0x38]     #			    if (this|-|>dir_entry[i].mtime !=
MEMORY OFFSET:     -0x38     -56  >>-48

0x197d4:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x197d8:	mov eax, dword ptr [rbp - 0x28]     #			    if (this->dir_entry|[|i].mtime !=
MEMORY OFFSET:     -0x28     -40  >>-32

0x197db:	movsxd rdx, eax                     
0x197de:	mov rax, rdx                        
0x197e1:	shl rax, 2                          
0x197e5:	add rax, rdx                        
0x197e8:	shl rax, 4                          
0x197ec:	add rax, rcx                        
0x197ef:	mov rcx, qword ptr [rax + 0x20]     #			    if (this->dir_entry[i]|.|mtime !=
MEMORY OFFSET:     0x20     32  >>40

0x197f3:	mov rax, qword ptr [rbp - 0x40]     #				other|-|>dir_entry[j].mtime)
MEMORY OFFSET:     -0x40     -64  >>-56

0x197f7:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x197fb:	mov eax, dword ptr [rbp - 0x24]     #				other->dir_entry|[|j].mtime)
MEMORY OFFSET:     -0x24     -36  >>-28

0x197fe:	movsxd rdx, eax                     
0x19801:	mov rax, rdx                        
0x19804:	shl rax, 2                          
0x19808:	add rax, rdx                        
0x1980b:	shl rax, 4                          
0x1980f:	add rax, rsi                        
0x19812:	mov rax, qword ptr [rax + 0x20]     #				other->dir_entry[j]|.|mtime)
MEMORY OFFSET:     0x20     32  >>40

0x19816:	cmp rcx, rax                        #			    if |(|this->dir_entry[i].mtime !=
0x19819:	je 0x19931                          
0x1981f:	jmp 0x19874                         #				|g|oto hilight_the_newer_one;
0x19821:	lea r8, [rbp - 0x18]                #			    off64_t result = |p|anel_compare(this,  i, &this_size,
MEMORY OFFSET:     -0x18     -24  >>-16

0x19825:	mov edi, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x19828:	mov rcx, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1982c:	lea rdx, [rbp - 0x20]               
MEMORY OFFSET:     -0x20     -32  >>-24

0x19830:	mov esi, dword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x19833:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x19837:	mov r9, r8                          
0x1983a:	mov r8d, edi                        
0x1983d:	mov rdi, rax                        
0x19840:	mov eax, 0                          
0x19845:	call 0x18810                        
0x1984a:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1984e:	cmp qword ptr [rbp - 0x10], -1      #			    if |(|result == CF_ABORT)
MEMORY OFFSET:     -0x10     -16  >>-8

0x19853:	je 0x199c9                          
0x19859:	mov rax, qword ptr [rbp - 0x20]     #			    if ((result |=|= this_size) &&
MEMORY OFFSET:     -0x20     -32  >>-24

0x1985d:	cmp qword ptr [rbp - 0x10], rax     #			    if |(|(result == this_size) &&
MEMORY OFFSET:     -0x10     -16  >>-8

0x19861:	jne 0x19874                         
0x19863:	mov rax, qword ptr [rbp - 0x18]     #				(result |=|= other_size))
MEMORY OFFSET:     -0x18     -24  >>-16

0x19867:	cmp qword ptr [rbp - 0x10], rax     #			    if ((result == this_size) |&|&
MEMORY OFFSET:     -0x10     -16  >>-8

0x1986b:	je 0x19934                          
0x19871:	jmp 0x19874                         
0x19873:	nop                                 #		  |h|ilight_the_newer_one:
0x19874:	mov rax, qword ptr [rbp - 0x38]     #		    if (this|-|>dir_entry[i].mtime >= other->dir_entry[j].mtime)
MEMORY OFFSET:     -0x38     -56  >>-48

0x19878:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1987c:	mov eax, dword ptr [rbp - 0x28]     #		    if (this->dir_entry|[|i].mtime >= other->dir_entry[j].mtime)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1987f:	movsxd rdx, eax                     
0x19882:	mov rax, rdx                        
0x19885:	shl rax, 2                          
0x19889:	add rax, rdx                        
0x1988c:	shl rax, 4                          
0x19890:	add rax, rcx                        
0x19893:	mov rcx, qword ptr [rax + 0x20]     #		    if (this->dir_entry[i]|.|mtime >= other->dir_entry[j].mtime)
MEMORY OFFSET:     0x20     32  >>40

0x19897:	mov rax, qword ptr [rbp - 0x40]     #		    if (this->dir_entry[i].mtime >= other|-|>dir_entry[j].mtime)
MEMORY OFFSET:     -0x40     -64  >>-56

0x1989b:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1989f:	mov eax, dword ptr [rbp - 0x24]     #		    if (this->dir_entry[i].mtime >= other->dir_entry|[|j].mtime)
MEMORY OFFSET:     -0x24     -36  >>-28

0x198a2:	movsxd rdx, eax                     
0x198a5:	mov rax, rdx                        
0x198a8:	shl rax, 2                          
0x198ac:	add rax, rdx                        
0x198af:	shl rax, 4                          
0x198b3:	add rax, rsi                        
0x198b6:	mov rax, qword ptr [rax + 0x20]     #		    if (this->dir_entry[i].mtime >= other->dir_entry[j]|.|mtime)
MEMORY OFFSET:     0x20     32  >>40

0x198ba:	cmp rcx, rax                        #		    if |(|this->dir_entry[i].mtime >= other->dir_entry[j].mtime)
0x198bd:	jl 0x198f8                          
0x198bf:	mov rax, qword ptr [rbp - 0x40]     #			other|-|>dir_entry[j].selected = 0;
MEMORY OFFSET:     -0x40     -64  >>-56

0x198c3:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x198c7:	mov eax, dword ptr [rbp - 0x24]     #			other->dir_entry|[|j].selected = 0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x198ca:	movsxd rdx, eax                     
0x198cd:	mov rax, rdx                        
0x198d0:	shl rax, 2                          
0x198d4:	add rax, rdx                        
0x198d7:	shl rax, 4                          
0x198db:	add rax, rcx                        
0x198de:	mov byte ptr [rax + 0x49], 0        #			other->dir_entry[j].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x198e2:	mov rax, qword ptr [rbp - 0x40]     #			other|-|>selected_entries--;
MEMORY OFFSET:     -0x40     -64  >>-56

0x198e6:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x198e9:	lea edx, [rax - 1]                  #			other->selected_entries|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x198ec:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x198f0:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x198f3:	jmp 0x199b3                         #		    |b|reak;
0x198f8:	mov rax, qword ptr [rbp - 0x38]     #			this|-|>dir_entry[i].selected = 0;
MEMORY OFFSET:     -0x38     -56  >>-48

0x198fc:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19900:	mov eax, dword ptr [rbp - 0x28]     #			this->dir_entry|[|i].selected = 0;
MEMORY OFFSET:     -0x28     -40  >>-32

0x19903:	movsxd rdx, eax                     
0x19906:	mov rax, rdx                        
0x19909:	shl rax, 2                          
0x1990d:	add rax, rdx                        
0x19910:	shl rax, 4                          
0x19914:	add rax, rcx                        
0x19917:	mov byte ptr [rax + 0x49], 0        #			this->dir_entry[i].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x1991b:	mov rax, qword ptr [rbp - 0x38]     #			this|-|>selected_entries--;
MEMORY OFFSET:     -0x38     -56  >>-48

0x1991f:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x19922:	lea edx, [rax - 1]                  #			this->selected_entries|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x19925:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x19929:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1992c:	jmp 0x199b3                         #		    |b|reak;
0x19931:	nop                                 #				|g|oto unhilight_both;
0x19932:	jmp 0x19935                         
0x19934:	nop                                 #				|g|oto unhilight_both;
0x19935:	mov rax, qword ptr [rbp - 0x38]     #		    this|-|>dir_entry[i].selected = 0;
MEMORY OFFSET:     -0x38     -56  >>-48

0x19939:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1993d:	mov eax, dword ptr [rbp - 0x28]     #		    this->dir_entry|[|i].selected = 0;
MEMORY OFFSET:     -0x28     -40  >>-32

0x19940:	movsxd rdx, eax                     
0x19943:	mov rax, rdx                        
0x19946:	shl rax, 2                          
0x1994a:	add rax, rdx                        
0x1994d:	shl rax, 4                          
0x19951:	add rax, rcx                        
0x19954:	mov byte ptr [rax + 0x49], 0        #		    this->dir_entry[i].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x19958:	mov rax, qword ptr [rbp - 0x38]     #		    this|-|>selected_entries--;
MEMORY OFFSET:     -0x38     -56  >>-48

0x1995c:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1995f:	lea edx, [rax - 1]                  #		    this->selected_entries|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x19962:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x19966:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x19969:	mov rax, qword ptr [rbp - 0x40]     #		    other|-|>dir_entry[j].selected = 0;
MEMORY OFFSET:     -0x40     -64  >>-56

0x1996d:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19971:	mov eax, dword ptr [rbp - 0x24]     #		    other->dir_entry|[|j].selected = 0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x19974:	movsxd rdx, eax                     
0x19977:	mov rax, rdx                        
0x1997a:	shl rax, 2                          
0x1997e:	add rax, rdx                        
0x19981:	shl rax, 4                          
0x19985:	add rax, rcx                        
0x19988:	mov byte ptr [rax + 0x49], 0        #		    other->dir_entry[j].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x1998c:	mov rax, qword ptr [rbp - 0x40]     #		    other|-|>selected_entries--;
MEMORY OFFSET:     -0x40     -64  >>-56

0x19990:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x19993:	lea edx, [rax - 1]                  #		    other->selected_entries|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x19996:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1999a:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1999d:	jmp 0x199b3                         #		    |b|reak;
0x1999f:	add dword ptr [rbp - 0x24], 1       #	    for (j = 1; j < other->entries; j|+|+)
MEMORY OFFSET:     -0x24     -36  >>-28

0x199a3:	mov rax, qword ptr [rbp - 0x40]     #	    for (j = 1; j < other|-|>entries; j++)
MEMORY OFFSET:     -0x40     -64  >>-56

0x199a7:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x199aa:	cmp dword ptr [rbp - 0x24], eax     #	    for (j = 1; j |<| other->entries; j++)
MEMORY OFFSET:     -0x24     -36  >>-28

0x199ad:	jl 0x196ef                          
0x199b3:	add dword ptr [rbp - 0x28], 1       #    for (i = 1; i < this->entries; i|+|+)
MEMORY OFFSET:     -0x28     -40  >>-32

0x199b7:	mov rax, qword ptr [rbp - 0x38]     #    for (i = 1; i < this|-|>entries; i++)
MEMORY OFFSET:     -0x38     -56  >>-48

0x199bb:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x199be:	cmp dword ptr [rbp - 0x28], eax     #    for (i = 1; i |<| this->entries; i++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x199c1:	jl 0x196b8                          
0x199c7:	jmp 0x199ca                         #  |d|one:
0x199c9:	nop                                 #				|g|oto done;
0x199ca:	mov eax, 0                          #    |s|tatus_default();
0x199cf:	call 0x10857                        
0x199d4:	mov rax, qword ptr [rbp - 0x38]     #    |p|anel_update(this);
MEMORY OFFSET:     -0x38     -56  >>-48

0x199d8:	mov rdi, rax                        
0x199db:	call 0x14e6a                        
0x199e0:	mov rax, qword ptr [rbp - 0x40]     #    |p|anel_update(other);
MEMORY OFFSET:     -0x40     -64  >>-56

0x199e4:	mov rdi, rax                        
0x199e7:	call 0x14e6a                        
0x199ec:	mov eax, 0                          #    |t|ty_update();
0x199f1:	call 0xb4b7                         
0x199f6:	mov rax, qword ptr [rbp - 0x38]     #    if (this|-|>selected_entries || other->selected_entries)
MEMORY OFFSET:     -0x38     -56  >>-48

0x199fa:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x199fd:	test eax, eax                       #    if |(|this->selected_entries || other->selected_entries)
0x199ff:	jne 0x19a0c                         
0x19a01:	mov rax, qword ptr [rbp - 0x40]     #    if (this->selected_entries || other|-|>selected_entries)
MEMORY OFFSET:     -0x40     -64  >>-56

0x19a05:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x19a08:	test eax, eax                       #    if (this->selected_entries |||| other->selected_entries)
0x19a0a:	je 0x19a16                          
0x19a0c:	mov eax, 0                          #	|t|ty_beep();
0x19a11:	call 0xbfbf                         
0x19a16:	mov rax, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x19a1a:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x19a23:	je 0x19a2a                          
0x19a25:	call 0x4980                         
0x19a2a:	leave                               
0x19a2b:	ret                                 
0x19a2c:	endbr64                             #|{|
0x19a30:	push rbp                            
0x19a31:	mov rbp, rsp                        
0x19a34:	sub rsp, 0x50                       
0x19a38:	mov qword ptr [rbp - 0x48], rdi     
MEMORY OFFSET:     -0x48     -72  >>-64

0x19a3c:	mov dword ptr [rbp - 0x4c], esi     
MEMORY OFFSET:     -0x4c     -76  >>-68

0x19a3f:	mov dword ptr [rbp - 0x50], edx     
MEMORY OFFSET:     -0x50     -80  >>-72

0x19a42:	mov dword ptr [rbp - 0x38], 0       #    int |n| = 0, error, first_time = 1, len;
MEMORY OFFSET:     -0x38     -56  >>-48

0x19a49:	mov dword ptr [rbp - 0x30], 1       #    int n = 0, error, |f|irst_time = 1, len;
MEMORY OFFSET:     -0x30     -48  >>-40

0x19a50:	mov rax, qword ptr [rbp - 0x48]     #    char *name = this|-|>dir_entry[entry].name;
MEMORY OFFSET:     -0x48     -72  >>-64

0x19a54:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19a58:	mov eax, dword ptr [rbp - 0x4c]     #    char *name = this->dir_entry|[|entry].name;
MEMORY OFFSET:     -0x4c     -76  >>-68

0x19a5b:	movsxd rdx, eax                     
0x19a5e:	mov rax, rdx                        
0x19a61:	shl rax, 2                          
0x19a65:	add rax, rdx                        
0x19a68:	shl rax, 4                          
0x19a6c:	add rax, rcx                        
0x19a6f:	mov rax, qword ptr [rax]            #    char *|n|ame = this->dir_entry[entry].name;
0x19a72:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x19a76:	mov rax, qword ptr [rbp - 0x20]     #    new_name = |x|strdup(name);
MEMORY OFFSET:     -0x20     -32  >>-24

0x19a7a:	mov rdi, rax                        
0x19a7d:	call 0x24780                        
0x19a82:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x19a86:	mov rax, qword ptr [rbp - 0x20]     #    len = |s|trlen(name);
MEMORY OFFSET:     -0x20     -32  >>-24

0x19a8a:	mov rdi, rax                        
0x19a8d:	call 0x4960                         
0x19a92:	mov dword ptr [rbp - 0x2c], eax     #    len |=| strlen(name);
MEMORY OFFSET:     -0x2c     -44  >>-36

0x19a95:	cmp dword ptr [rbp - 0x50], 0       #    if |(|upcase)
MEMORY OFFSET:     -0x50     -80  >>-72

0x19a99:	je 0x19add                          
0x19a9b:	mov dword ptr [rbp - 0x38], 0       #	for (n |=| 0; n < len; n++)
MEMORY OFFSET:     -0x38     -56  >>-48

0x19aa2:	jmp 0x19ad3                         #	|f|or (n = 0; n < len; n++)
0x19aa4:	mov eax, dword ptr [rbp - 0x38]     #	    new_name[n] = toupper((int)name|[|n]);
MEMORY OFFSET:     -0x38     -56  >>-48

0x19aa7:	movsxd rdx, eax                     
0x19aaa:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x19aae:	add rax, rdx                        
0x19ab1:	movzx eax, byte ptr [rax]           
0x19ab4:	movsx eax, al                       #	    new_name[n] = |t|oupper((int)name[n]);
0x19ab7:	mov edi, eax                        
0x19ab9:	call 0x4890                         
0x19abe:	mov edx, eax                        
0x19ac0:	mov eax, dword ptr [rbp - 0x38]     #	    new_name|[|n] = toupper((int)name[n]);
MEMORY OFFSET:     -0x38     -56  >>-48

0x19ac3:	movsxd rcx, eax                     
0x19ac6:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x19aca:	add rax, rcx                        
0x19acd:	mov byte ptr [rax], dl              #	    new_name[n] |=| toupper((int)name[n]);
0x19acf:	add dword ptr [rbp - 0x38], 1       #	for (n = 0; n < len; n|+|+)
MEMORY OFFSET:     -0x38     -56  >>-48

0x19ad3:	mov eax, dword ptr [rbp - 0x38]     #	for (n = 0; n |<| len; n++)
MEMORY OFFSET:     -0x38     -56  >>-48

0x19ad6:	cmp eax, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x19ad9:	jl 0x19aa4                          
0x19adb:	jmp 0x19b1d                         
0x19add:	mov dword ptr [rbp - 0x38], 0       #	for (n |=| 0; n < len; n++)
MEMORY OFFSET:     -0x38     -56  >>-48

0x19ae4:	jmp 0x19b15                         #	|f|or (n = 0; n < len; n++)
0x19ae6:	mov eax, dword ptr [rbp - 0x38]     #	    new_name[n] = tolower((int)name|[|n]);
MEMORY OFFSET:     -0x38     -56  >>-48

0x19ae9:	movsxd rdx, eax                     
0x19aec:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x19af0:	add rax, rdx                        
0x19af3:	movzx eax, byte ptr [rax]           
0x19af6:	movsx eax, al                       #	    new_name[n] = |t|olower((int)name[n]);
0x19af9:	mov edi, eax                        
0x19afb:	call 0x4be0                         
0x19b00:	mov edx, eax                        
0x19b02:	mov eax, dword ptr [rbp - 0x38]     #	    new_name|[|n] = tolower((int)name[n]);
MEMORY OFFSET:     -0x38     -56  >>-48

0x19b05:	movsxd rcx, eax                     
0x19b08:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x19b0c:	add rax, rcx                        
0x19b0f:	mov byte ptr [rax], dl              #	    new_name[n] |=| tolower((int)name[n]);
0x19b11:	add dword ptr [rbp - 0x38], 1       #	for (n = 0; n < len; n|+|+)
MEMORY OFFSET:     -0x38     -56  >>-48

0x19b15:	mov eax, dword ptr [rbp - 0x38]     #	for (n = 0; n |<| len; n++)
MEMORY OFFSET:     -0x38     -56  >>-48

0x19b18:	cmp eax, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x19b1b:	jl 0x19ae6                          
0x19b1d:	mov rdx, qword ptr [rbp - 0x18]     #    if (|s|trcmp(name, new_name) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x19b21:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x19b25:	mov rsi, rdx                        
0x19b28:	mov rdi, rax                        
0x19b2b:	call 0x4af0                         
0x19b30:	test eax, eax                       #    if |(|strcmp(name, new_name) == 0)
0x19b32:	je 0x19de0                          
0x19b38:	mov eax, dword ptr [rbp - 0x2c]     #    msg = xmalloc(32 + len |+| 1);
MEMORY OFFSET:     -0x2c     -44  >>-36

0x19b3b:	add eax, 0x21                       
0x19b3e:	cdqe                                #    msg = |x|malloc(32 + len + 1);
0x19b40:	mov rdi, rax                        
0x19b43:	call 0x24650                        
0x19b48:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x19b4c:	mov rdx, qword ptr [rbp - 0x20]     #    |s|printf(msg, "(CASE) Renaming %s", name);
MEMORY OFFSET:     -0x20     -32  >>-24

0x19b50:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x19b54:	lea rcx, [rip + 0xf169]             
MEMORY OFFSET:     0xf169     61801  >>61809

0x19b5b:	mov rsi, rcx                        
0x19b5e:	mov rdi, rax                        
0x19b61:	mov eax, 0                          
0x19b66:	call 0x4dd0                         
0x19b6b:	mov rax, qword ptr [rbp - 0x10]     #    |s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
MEMORY OFFSET:     -0x10     -16  >>-8

0x19b6f:	mov edx, 1                          
0x19b74:	mov esi, 1                          
0x19b79:	mov rdi, rax                        
0x19b7c:	call 0x107d0                        
0x19b81:	mov eax, 0                          #    |t|ty_update();
0x19b86:	call 0xb4b7                         
0x19b8b:	mov rax, qword ptr [rbp - 0x10]     #    |x|free(msg);
MEMORY OFFSET:     -0x10     -16  >>-8

0x19b8f:	mov rdi, rax                        
0x19b92:	call 0x1eeae                        
0x19b97:	mov rax, qword ptr [rbp - 0x48]     #    if (this|-|>dir_entry[entry].type == DIR_ENTRY)
MEMORY OFFSET:     -0x48     -72  >>-64

0x19b9b:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19b9f:	mov eax, dword ptr [rbp - 0x4c]     #    if (this->dir_entry|[|entry].type == DIR_ENTRY)
MEMORY OFFSET:     -0x4c     -76  >>-68

0x19ba2:	movsxd rdx, eax                     
0x19ba5:	mov rax, rdx                        
0x19ba8:	shl rax, 2                          
0x19bac:	add rax, rdx                        
0x19baf:	shl rax, 4                          
0x19bb3:	add rax, rcx                        
0x19bb6:	movzx eax, byte ptr [rax + 0x48]    #    if (this->dir_entry[entry]|.|type == DIR_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x19bba:	test al, al                         #    if |(|this->dir_entry[entry].type == DIR_ENTRY)
0x19bbc:	jne 0x19cff                         
0x19bc2:	mov rax, qword ptr [rbp - 0x18]     #	if (|a|ccess(new_name, F_OK) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x19bc6:	mov esi, 0                          
0x19bcb:	mov rdi, rax                        
0x19bce:	call 0x4d40                         
0x19bd3:	test eax, eax                       #	if |(|access(new_name, F_OK) == 0)
0x19bd5:	jne 0x19cda                         
0x19bdb:	mov rax, qword ptr [rbp - 0x48]     #	    if (this|-|>chkdest == ON)
MEMORY OFFSET:     -0x48     -72  >>-64

0x19bdf:	mov eax, dword ptr [rax + 0x90]     
MEMORY OFFSET:     0x90     144  >>152

0x19be5:	cmp eax, 1                          #	    if |(|this->chkdest == ON)
0x19be8:	jne 0x19c07                         
0x19bea:	mov rdx, qword ptr [rbp - 0x18]     #		error = |p|anel_warning(this, new_name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x19bee:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x19bf2:	mov rsi, rdx                        
0x19bf5:	mov rdi, rax                        
0x19bf8:	mov eax, 0                          
0x19bfd:	call 0x151b4                        
0x19c02:	mov dword ptr [rbp - 0x34], eax     
MEMORY OFFSET:     -0x34     -52  >>-44

0x19c05:	jmp 0x19c0e                         
0x19c07:	mov dword ptr [rbp - 0x34], 0       #		error |=| WARN_OVERWRITE;
MEMORY OFFSET:     -0x34     -52  >>-44

0x19c0e:	cmp dword ptr [rbp - 0x34], 0       #	    if |(|error)
MEMORY OFFSET:     -0x34     -52  >>-44

0x19c12:	je 0x19c1c                          
0x19c14:	mov eax, dword ptr [rbp - 0x34]     #		return |e|rror;
MEMORY OFFSET:     -0x34     -52  >>-44

0x19c17:	jmp 0x19e23                         
0x19c1c:	mov rax, qword ptr [rbp - 0x18]     #	    command = xmalloc(32 + |s|trlen(new_name) + 1);
MEMORY OFFSET:     -0x18     -24  >>-16

0x19c20:	mov rdi, rax                        
0x19c23:	call 0x4960                         
0x19c28:	add rax, 0x21                       #	    command = |x|malloc(32 + strlen(new_name) + 1);
0x19c2c:	mov rdi, rax                        
0x19c2f:	call 0x24650                        
0x19c34:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x19c38:	mov rdx, qword ptr [rbp - 0x18]     #	    |s|printf(command, "rm -r -f \"%s\"", new_name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x19c3c:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x19c40:	lea rcx, [rip + 0xedaf]             
MEMORY OFFSET:     0xedaf     60847  >>60855

0x19c47:	mov rsi, rcx                        
0x19c4a:	mov rdi, rax                        
0x19c4d:	mov eax, 0                          
0x19c52:	call 0x4dd0                         
0x19c57:	mov rax, qword ptr [rbp - 8]        #	    result = |s|tart(command, 1);
MEMORY OFFSET:     -0x8     -8  >>0

0x19c5b:	mov esi, 1                          
0x19c60:	mov rdi, rax                        
0x19c63:	call 0x1f6f0                        
0x19c68:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x19c6b:	mov rax, qword ptr [rbp - 8]        #	    |x|free(command);
MEMORY OFFSET:     -0x8     -8  >>0

0x19c6f:	mov rdi, rax                        
0x19c72:	call 0x1eeae                        
0x19c77:	mov rax, qword ptr [rbp - 0x48]     #	    |t|ty_update_title(this->path);
MEMORY OFFSET:     -0x48     -72  >>-64

0x19c7b:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x19c7f:	mov rdi, rax                        
0x19c82:	call 0xd875                         
0x19c87:	mov eax, dword ptr [rbp - 0x24]     #	    if (|W|IFSIGNALED(result))
MEMORY OFFSET:     -0x24     -36  >>-28

0x19c8a:	and eax, 0x7f                       
0x19c8d:	add eax, 1                          
0x19c90:	sar al, 1                           
0x19c92:	test al, al                         #	    if |(|WIFSIGNALED(result))
0x19c94:	jle 0x19ca0                         
0x19c96:	mov eax, 7                          #		return |O|N_INTERRUPTED;
0x19c9b:	jmp 0x19e23                         
0x19ca0:	mov eax, dword ptr [rbp - 0x24]     #	    if(|W|IFEXITED(result))
MEMORY OFFSET:     -0x24     -36  >>-28

0x19ca3:	and eax, 0x7f                       
0x19ca6:	test eax, eax                       #	    if|(|WIFEXITED(result))
0x19ca8:	jne 0x19cd0                         
0x19caa:	mov eax, dword ptr [rbp - 0x24]     #		if(|W|EXITSTATUS(result) != 0)
MEMORY OFFSET:     -0x24     -36  >>-28

0x19cad:	sar eax, 8                          
0x19cb0:	movzx eax, al                       
0x19cb3:	test eax, eax                       #		if|(|WEXITSTATUS(result) != 0)
0x19cb5:	je 0x19cda                          
0x19cb7:	lea rax, [rip + 0xed46]             #		    |d|isplay_errors("rm");
MEMORY OFFSET:     0xed46     60742  >>60750

0x19cbe:	mov rdi, rax                        
0x19cc1:	call 0x1f808                        
0x19cc6:	mov eax, 5                          #		    return |N|_RMERR;
0x19ccb:	jmp 0x19e23                         
0x19cd0:	mov eax, 5                          #		return |N|_RMERR;
0x19cd5:	jmp 0x19e23                         
0x19cda:	mov rdx, qword ptr [rbp - 0x18]     #	if (|r|ename(name, new_name) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x19cde:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x19ce2:	mov rsi, rdx                        
0x19ce5:	mov rdi, rax                        
0x19ce8:	call 0x4d70                         
0x19ced:	test eax, eax                       #	if |(|rename(name, new_name) == 0)
0x19cef:	je 0x19de3                          
0x19cf5:	mov eax, 6                          #	    return |O|N_RENERR;
0x19cfa:	jmp 0x19e23                         
0x19cff:	nop                                 #  |r|etry:
0x19d00:	mov rdx, qword ptr [rbp - 0x18]     #    if (|l|ink(name, new_name) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x19d04:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x19d08:	mov rsi, rdx                        
0x19d0b:	mov rdi, rax                        
0x19d0e:	call 0x4de0                         
0x19d13:	test eax, eax                       #    if |(|link(name, new_name) == 0)
0x19d15:	jne 0x19d35                         
0x19d17:	mov rax, qword ptr [rbp - 0x20]     #	if (|u|nlink(name) == 0)
MEMORY OFFSET:     -0x20     -32  >>-24

0x19d1b:	mov rdi, rax                        
0x19d1e:	call 0x4830                         
0x19d23:	test eax, eax                       #	if |(|unlink(name) == 0)
0x19d25:	je 0x19de6                          
0x19d2b:	mov eax, 4                          #	    return |O|_RMERR;
0x19d30:	jmp 0x19e23                         
0x19d35:	call 0x4820                         #	int safe_errno = |e|rrno;
0x19d3a:	mov eax, dword ptr [rax]            #	int |s|afe_errno = errno;
0x19d3c:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x19d3f:	mov eax, 0                          #	|s|tatus_default();
0x19d44:	call 0x10857                        
0x19d49:	mov eax, 0                          #	|t|ty_update();
0x19d4e:	call 0xb4b7                         
0x19d53:	cmp dword ptr [rbp - 0x28], 1       #	if |(|safe_errno == EPERM || safe_errno == EACCES)
MEMORY OFFSET:     -0x28     -40  >>-32

0x19d57:	je 0x19d5f                          
0x19d59:	cmp dword ptr [rbp - 0x28], 0xd     #	if (safe_errno == EPERM |||| safe_errno == EACCES)
MEMORY OFFSET:     -0x28     -40  >>-32

0x19d5d:	jne 0x19d69                         
0x19d5f:	mov eax, 6                          #	    return |O|N_RENERR;
0x19d64:	jmp 0x19e23                         
0x19d69:	cmp dword ptr [rbp - 0x30], 0       #	if |(|!first_time)
MEMORY OFFSET:     -0x30     -48  >>-40

0x19d6d:	jne 0x19d79                         
0x19d6f:	mov eax, 6                          #	    return |O|N_RENERR;
0x19d74:	jmp 0x19e23                         
0x19d79:	mov rax, qword ptr [rbp - 0x48]     #	if (this|-|>chkdest == ON)
MEMORY OFFSET:     -0x48     -72  >>-64

0x19d7d:	mov eax, dword ptr [rax + 0x90]     
MEMORY OFFSET:     0x90     144  >>152

0x19d83:	cmp eax, 1                          #	if |(|this->chkdest == ON)
0x19d86:	jne 0x19da5                         
0x19d88:	mov rdx, qword ptr [rbp - 0x18]     #	    error = |p|anel_warning(this, new_name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x19d8c:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x19d90:	mov rsi, rdx                        
0x19d93:	mov rdi, rax                        
0x19d96:	mov eax, 0                          
0x19d9b:	call 0x151b4                        
0x19da0:	mov dword ptr [rbp - 0x34], eax     
MEMORY OFFSET:     -0x34     -52  >>-44

0x19da3:	jmp 0x19dac                         
0x19da5:	mov dword ptr [rbp - 0x34], 0       #	    error |=| WARN_OVERWRITE;
MEMORY OFFSET:     -0x34     -52  >>-44

0x19dac:	cmp dword ptr [rbp - 0x34], 0       #	if |(|error)
MEMORY OFFSET:     -0x34     -52  >>-44

0x19db0:	je 0x19db7                          
0x19db2:	mov eax, dword ptr [rbp - 0x34]     #	    return |e|rror;
MEMORY OFFSET:     -0x34     -52  >>-44

0x19db5:	jmp 0x19e23                         
0x19db7:	mov rax, qword ptr [rbp - 0x18]     #	if (|u|nlink(new_name) != 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x19dbb:	mov rdi, rax                        
0x19dbe:	call 0x4830                         
0x19dc3:	test eax, eax                       #	if |(|unlink(new_name) != 0)
0x19dc5:	je 0x19dce                          
0x19dc7:	mov eax, 5                          #	    return |N|_RMERR;
0x19dcc:	jmp 0x19e23                         
0x19dce:	cmp dword ptr [rbp - 0x30], 0       #	if |(|first_time)
MEMORY OFFSET:     -0x30     -48  >>-40

0x19dd2:	je 0x19de9                          
0x19dd4:	mov dword ptr [rbp - 0x30], 0       #	    first_time |=| 0;
MEMORY OFFSET:     -0x30     -48  >>-40

0x19ddb:	jmp 0x19d00                         #	    |g|oto retry;
0x19de0:	nop                                 #	|g|oto done;
0x19de1:	jmp 0x19dea                         
0x19de3:	nop                                 #	    |g|oto done;
0x19de4:	jmp 0x19dea                         
0x19de6:	nop                                 #	    |g|oto done;
0x19de7:	jmp 0x19dea                         
0x19de9:	nop                                 #  |d|one:
0x19dea:	mov rax, qword ptr [rbp - 0x48]     #    this|-|>dir_entry[entry].selected = 0;
MEMORY OFFSET:     -0x48     -72  >>-64

0x19dee:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19df2:	mov eax, dword ptr [rbp - 0x4c]     #    this->dir_entry|[|entry].selected = 0;
MEMORY OFFSET:     -0x4c     -76  >>-68

0x19df5:	movsxd rdx, eax                     
0x19df8:	mov rax, rdx                        
0x19dfb:	shl rax, 2                          
0x19dff:	add rax, rdx                        
0x19e02:	shl rax, 4                          
0x19e06:	add rax, rcx                        
0x19e09:	mov byte ptr [rax + 0x49], 0        #    this->dir_entry[entry].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x19e0d:	mov rax, qword ptr [rbp - 0x48]     #    this|-|>selected_entries--;
MEMORY OFFSET:     -0x48     -72  >>-64

0x19e11:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x19e14:	lea edx, [rax - 1]                  #    this->selected_entries|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x19e17:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x19e1b:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x19e1e:	mov eax, 1                          #    return |O|N_OK;
0x19e23:	leave                               #|}|
0x19e24:	ret                                 
0x19e25:	endbr64                             #|{|
0x19e29:	push rbp                            
0x19e2a:	mov rbp, rsp                        
0x19e2d:	sub rsp, 0x30                       
0x19e31:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x19e35:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x19e39:	mov dword ptr [rbp - 0x24], edx     
MEMORY OFFSET:     -0x24     -36  >>-28

0x19e3c:	mov rax, qword ptr [rip + 0x166f5]  #    |i|l_message(PANEL_RENAME_FILES_MSG);
MEMORY OFFSET:     0x166f5     91893  >>91901

0x19e43:	mov rdi, rax                        
0x19e46:	call 0xfcbe                         
0x19e4b:	mov eax, 0                          #    |t|ty_update();
0x19e50:	call 0xb4b7                         
0x19e55:	mov rax, qword ptr [rbp - 0x18]     #    this->chkdest |=| ON;
MEMORY OFFSET:     -0x18     -24  >>-16

0x19e59:	mov dword ptr [rax + 0x90], 1       
MEMORY OFFSET:     0x90     144  >>152

0x19e63:	mov rax, qword ptr [rbp - 0x18]     #    |p|anel_init_iterator(this);
MEMORY OFFSET:     -0x18     -24  >>-16

0x19e67:	mov rdi, rax                        
0x19e6a:	call 0x13121                        
0x19e6f:	jmp 0x19f51                         #    while |(|(entry = panel_get_next(this)) != -1)
0x19e74:	mov eax, 0                          #	|s|ervice_pending_signals();
0x19e79:	call 0x1ea4b                        
0x19e7e:	mov edx, dword ptr [rbp - 0x24]     #	error = |p|anel_case_rename(this, entry, upcase);
MEMORY OFFSET:     -0x24     -36  >>-28

0x19e81:	mov ecx, dword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x19e84:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x19e88:	mov esi, ecx                        
0x19e8a:	mov rdi, rax                        
0x19e8d:	mov eax, 0                          
0x19e92:	call 0x19a2c                        
0x19e97:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x19e9a:	cmp dword ptr [rbp - 4], 1          #	if |(|error != ON_OK)
MEMORY OFFSET:     -0x4     -4  >>4

0x19e9e:	je 0x19f2e                          
0x19ea4:	cmp dword ptr [rbp - 4], 2          #	    if |(|error == ON_CANCEL)
MEMORY OFFSET:     -0x4     -4  >>4

0x19ea8:	je 0x19f6c                          
0x19eae:	cmp dword ptr [rbp - 4], 3          #	    if |(|error == ON_SKIP)
MEMORY OFFSET:     -0x4     -4  >>4

0x19eb2:	jne 0x19eb9                         
0x19eb4:	jmp 0x19f51                         #		|c|ontinue;
0x19eb9:	cmp dword ptr [rbp - 4], 1          #	    if |(|error != ON_OK && error != ON_CANCEL)
MEMORY OFFSET:     -0x4     -4  >>4

0x19ebd:	je 0x19f51                          
0x19ec3:	cmp dword ptr [rbp - 4], 2          #	    if (error != ON_OK |&|& error != ON_CANCEL)
MEMORY OFFSET:     -0x4     -4  >>4

0x19ec7:	je 0x19f51                          
0x19ecd:	mov eax, dword ptr [rbp - 4]        #				 renerr[error |-| 1], (char *)NULL,
MEMORY OFFSET:     -0x4     -4  >>4

0x19ed0:	sub eax, 1                          
0x19ed3:	cdqe                                #		|p|anel_3s_message("%s: Rename failed, %s.",
0x19ed5:	lea rdx, [rax*8]                    
0x19edd:	lea rax, [rip + 0x1675c]            
MEMORY OFFSET:     0x1675c     91996  >>92004

0x19ee4:	mov rdx, qword ptr [rdx + rax]      
0x19ee8:	mov rax, qword ptr [rbp - 0x18]     #				 this|-|>dir_entry[entry].name,
MEMORY OFFSET:     -0x18     -24  >>-16

0x19eec:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19ef0:	mov eax, dword ptr [rbp - 8]        #				 this->dir_entry|[|entry].name,
MEMORY OFFSET:     -0x8     -8  >>0

0x19ef3:	movsxd rcx, eax                     
0x19ef6:	mov rax, rcx                        
0x19ef9:	shl rax, 2                          
0x19efd:	add rax, rcx                        
0x19f00:	shl rax, 4                          
0x19f04:	add rax, rsi                        
0x19f07:	mov rax, qword ptr [rax]            #		|p|anel_3s_message("%s: Rename failed, %s.",
0x19f0a:	mov r8d, 0x1e                       
0x19f10:	mov ecx, 0                          
0x19f15:	mov rsi, rax                        
0x19f18:	lea rax, [rip + 0xedb8]             
MEMORY OFFSET:     0xedb8     60856  >>60864

0x19f1f:	mov rdi, rax                        
0x19f22:	mov eax, 0                          
0x19f27:	call 0x115fd                        
0x19f2c:	jmp 0x19f51                         
0x19f2e:	mov rax, qword ptr [rbp - 0x18]     #	    this|-|>dir_entry[entry].selected = 0;
MEMORY OFFSET:     -0x18     -24  >>-16

0x19f32:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x19f36:	mov eax, dword ptr [rbp - 8]        #	    this->dir_entry|[|entry].selected = 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x19f39:	movsxd rdx, eax                     
0x19f3c:	mov rax, rdx                        
0x19f3f:	shl rax, 2                          
0x19f43:	add rax, rdx                        
0x19f46:	shl rax, 4                          
0x19f4a:	add rax, rcx                        
0x19f4d:	mov byte ptr [rax + 0x49], 0        #	    this->dir_entry[entry].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x19f51:	mov rax, qword ptr [rbp - 0x18]     #    while ((entry = |p|anel_get_next(this)) != -1)
MEMORY OFFSET:     -0x18     -24  >>-16

0x19f55:	mov rdi, rax                        
0x19f58:	call 0x13149                        
0x19f5d:	mov dword ptr [rbp - 8], eax        
MEMORY OFFSET:     -0x8     -8  >>0

0x19f60:	cmp dword ptr [rbp - 8], -1         #    while ((entry = panel_get_next(this)) |!|= -1)
MEMORY OFFSET:     -0x8     -8  >>0

0x19f64:	jne 0x19e74                         
0x19f6a:	jmp 0x19f6d                         
0x19f6c:	nop                                 #		|b|reak;
0x19f6d:	mov eax, 0                          #    |s|tatus_default();
0x19f72:	call 0x10857                        
0x19f77:	mov eax, 0                          #    |t|ty_update();
0x19f7c:	call 0xb4b7                         
0x19f81:	mov rax, qword ptr [rbp - 0x18]     #    |p|anel_action(this, act_REGET, (panel_t *)NULL, (void *)NULL, 1);
MEMORY OFFSET:     -0x18     -24  >>-16

0x19f85:	mov r8d, 1                          
0x19f8b:	mov ecx, 0                          
0x19f90:	mov edx, 0                          
0x19f95:	mov esi, 0x22                       
0x19f9a:	mov rdi, rax                        
0x19f9d:	call 0x1a89a                        
0x19fa2:	mov rax, qword ptr [rbp - 0x18]     #    |p|anel_update(this);
MEMORY OFFSET:     -0x18     -24  >>-16

0x19fa6:	mov rdi, rax                        
0x19fa9:	call 0x14e6a                        
0x19fae:	mov rax, qword ptr [rbp - 0x20]     #    if (strcmp(this->path, other|-|>path) == 0)
MEMORY OFFSET:     -0x20     -32  >>-24

0x19fb2:	mov rdx, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x19fb6:	mov rax, qword ptr [rbp - 0x18]     #    if (strcmp(this|-|>path, other->path) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x19fba:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x19fbe:	mov rsi, rdx                        #    if (|s|trcmp(this->path, other->path) == 0)
0x19fc1:	mov rdi, rax                        
0x19fc4:	call 0x4af0                         
0x19fc9:	test eax, eax                       #    if |(|strcmp(this->path, other->path) == 0)
0x19fcb:	jne 0x19ffa                         
0x19fcd:	mov rax, qword ptr [rbp - 0x20]     #	|p|anel_action(other, act_REGET, (panel_t *)NULL, (void *)NULL, 1);
MEMORY OFFSET:     -0x20     -32  >>-24

0x19fd1:	mov r8d, 1                          
0x19fd7:	mov ecx, 0                          
0x19fdc:	mov edx, 0                          
0x19fe1:	mov esi, 0x22                       
0x19fe6:	mov rdi, rax                        
0x19fe9:	call 0x1a89a                        
0x19fee:	mov rax, qword ptr [rbp - 0x20]     #	|p|anel_update(other);
MEMORY OFFSET:     -0x20     -32  >>-24

0x19ff2:	mov rdi, rax                        
0x19ff5:	call 0x14e6a                        
0x19ffa:	nop                                 #|}|
0x19ffb:	leave                               
0x19ffc:	ret                                 
0x19ffd:	endbr64                             #|{|
0x1a001:	push rbp                            
0x1a002:	mov rbp, rsp                        
0x1a005:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1a009:	mov qword ptr [rbp - 0x10], rsi     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1a00d:	mov rax, qword ptr [rbp - 0x10]     #    return (|*|(const dir_entry_t * const *)second)->size -
MEMORY OFFSET:     -0x10     -16  >>-8

0x1a011:	mov rax, qword ptr [rax]            
0x1a014:	mov rax, qword ptr [rax + 8]        #    return (*(const dir_entry_t * const *)second)|-|>size -
MEMORY OFFSET:     0x8     8  >>16

0x1a018:	mov edx, eax                        #    return (*(const dir_entry_t * const *)second)->size |-|
0x1a01a:	mov rax, qword ptr [rbp - 8]        #	   (|*|(const dir_entry_t * const *)first)->size;
MEMORY OFFSET:     -0x8     -8  >>0

0x1a01e:	mov rax, qword ptr [rax]            
0x1a021:	mov rax, qword ptr [rax + 8]        #	   (*(const dir_entry_t * const *)first)|-|>size;
MEMORY OFFSET:     0x8     8  >>16

0x1a025:	mov ecx, eax                        #    return (*(const dir_entry_t * const *)second)->size |-|
0x1a027:	mov eax, edx                        
0x1a029:	sub eax, ecx                        
0x1a02b:	pop rbp                             #|}|
0x1a02c:	ret                                 
0x1a02d:	endbr64                             #|{|
0x1a031:	push rbp                            
0x1a032:	mov rbp, rsp                        
0x1a035:	sub rsp, 0x150                      
0x1a03c:	mov qword ptr [rbp - 0x138], rdi    
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a043:	mov qword ptr [rbp - 0x140], rsi    
MEMORY OFFSET:     -0x140     -320  >>-312

0x1a04a:	mov qword ptr [rbp - 0x148], rdx    
MEMORY OFFSET:     -0x148     -328  >>-320

0x1a051:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1a05a:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1a05e:	xor eax, eax                        
0x1a060:	mov qword ptr [rbp - 0x110], 0      #    off64_t *|b|ins = NULL;
MEMORY OFFSET:     -0x110     -272  >>-264

0x1a06b:	lea rax, [rip + 0xec7c]             #    char *|f|n = "BIN PACKING";
MEMORY OFFSET:     0xec7c     60540  >>60548

0x1a072:	mov qword ptr [rbp - 0x108], rax    
MEMORY OFFSET:     -0x108     -264  >>-256

0x1a079:	mov dword ptr [rbp - 0x130], 0      #    int |m|ax_bins = 0, used_bins = 0;
MEMORY OFFSET:     -0x130     -304  >>-296

0x1a083:	mov dword ptr [rbp - 0x12c], 0      #    int max_bins = 0, |u|sed_bins = 0;
MEMORY OFFSET:     -0x12c     -300  >>-292

0x1a08d:	mov dword ptr [rbp - 0x124], 0      #    int entry, |c|andidates = 0, big_files = 0;
MEMORY OFFSET:     -0x124     -292  >>-284

0x1a097:	mov dword ptr [rbp - 0x120], 0      #    int entry, candidates = 0, |b|ig_files = 0;
MEMORY OFFSET:     -0x120     -288  >>-280

0x1a0a1:	cmp qword ptr [rbp - 0x148], 0      #    if |(|bin_size == 0)
MEMORY OFFSET:     -0x148     -328  >>-320

0x1a0a9:	jne 0x1a123                         
0x1a0ab:	mov qword ptr [rbp - 0xe8], -1      #	fsu.fsu_blocks |=| (uintmax_t) -1;
MEMORY OFFSET:     -0xe8     -232  >>-224

0x1a0b6:	mov rax, qword ptr [rbp - 0x140]    #	if (get_fs_usage(other|-|>path, NULL, &fsu) >= 0 && fsu.fsu_blocks != (uintmax_t) -1)
MEMORY OFFSET:     -0x140     -320  >>-312

0x1a0bd:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1a0c1:	lea rdx, [rbp - 0xf0]               #	if (|g|et_fs_usage(other->path, NULL, &fsu) >= 0 && fsu.fsu_blocks != (uintmax_t) -1)
MEMORY OFFSET:     -0xf0     -240  >>-232

0x1a0c8:	mov esi, 0                          
0x1a0cd:	mov rdi, rax                        
0x1a0d0:	call 0x23470                        
0x1a0d5:	test eax, eax                       #	if |(|get_fs_usage(other->path, NULL, &fsu) >= 0 && fsu.fsu_blocks != (uintmax_t) -1)
0x1a0d7:	js 0x1a123                          
0x1a0d9:	mov rax, qword ptr [rbp - 0xe8]     #	if (get_fs_usage(other->path, NULL, &fsu) >= 0 && fsu|.|fsu_blocks != (uintmax_t) -1)
MEMORY OFFSET:     -0xe8     -232  >>-224

0x1a0e0:	cmp rax, -1                         #	if (get_fs_usage(other->path, NULL, &fsu) >= 0 |&|& fsu.fsu_blocks != (uintmax_t) -1)
0x1a0e4:	je 0x1a123                          
0x1a0e6:	call 0x4a20                         #	    free_blocks = ((|g|eteuid() == 0) ? fsu.fsu_bfree : fsu.fsu_bavail);
0x1a0eb:	test eax, eax                       #	    free_blocks = ((geteuid() == 0) ? fsu.fsu_bfree |:| fsu.fsu_bavail);
0x1a0ed:	jne 0x1a0f8                         
0x1a0ef:	mov rax, qword ptr [rbp - 0xe0]     #	    free_blocks = ((geteuid() == 0) ? fsu|.|fsu_bfree : fsu.fsu_bavail);
MEMORY OFFSET:     -0xe0     -224  >>-216

0x1a0f6:	jmp 0x1a0ff                         
0x1a0f8:	mov rax, qword ptr [rbp - 0xd8]     #	    free_blocks = ((geteuid() == 0) ? fsu.fsu_bfree : fsu|.|fsu_bavail);
MEMORY OFFSET:     -0xd8     -216  >>-208

0x1a0ff:	mov qword ptr [rbp - 0x100], rax    #	    free_blocks |=| ((geteuid() == 0) ? fsu.fsu_bfree : fsu.fsu_bavail);
MEMORY OFFSET:     -0x100     -256  >>-248

0x1a106:	mov rdx, qword ptr [rbp - 0xf0]     #	    bin_size = (free_blocks * fsu|.|fsu_blocksize) / 1024;
MEMORY OFFSET:     -0xf0     -240  >>-232

0x1a10d:	mov rax, qword ptr [rbp - 0x100]    #	    bin_size = (free_blocks |*| fsu.fsu_blocksize) / 1024;
MEMORY OFFSET:     -0x100     -256  >>-248

0x1a114:	imul rax, rdx                       
0x1a118:	shr rax, 0xa                        #	    bin_size = (free_blocks * fsu.fsu_blocksize) |/| 1024;
0x1a11c:	mov qword ptr [rbp - 0x148], rax    #	    bin_size |=| (free_blocks * fsu.fsu_blocksize) / 1024;
MEMORY OFFSET:     -0x148     -328  >>-320

0x1a123:	mov rax, qword ptr [rbp - 0x138]    #    |p|anel_unselect_all(this);
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a12a:	mov rdi, rax                        
0x1a12d:	call 0x14ff9                        
0x1a132:	mov rax, qword ptr [rbp - 0x138]    #    buffer = (dir_entry_t **)xmalloc(this|-|>entries * sizeof(dir_entry_t *));
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a139:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1a13c:	cdqe                                
0x1a13e:	shl rax, 3                          #    buffer = (dir_entry_t **)|x|malloc(this->entries * sizeof(dir_entry_t *));
0x1a142:	mov rdi, rax                        
0x1a145:	call 0x24650                        
0x1a14a:	mov qword ptr [rbp - 0xf8], rax     
MEMORY OFFSET:     -0xf8     -248  >>-240

0x1a151:	mov dword ptr [rbp - 0x128], 0      #    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a15b:	jmp 0x1a292                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x1a160:	mov rax, qword ptr [rbp - 0x138]    #	if (|S|_ISREG(this->dir_entry[entry].mode))
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a167:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1a16b:	mov eax, dword ptr [rbp - 0x128]    
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a171:	movsxd rdx, eax                     
0x1a174:	mov rax, rdx                        
0x1a177:	shl rax, 2                          
0x1a17b:	add rax, rdx                        
0x1a17e:	shl rax, 4                          
0x1a182:	add rax, rcx                        
0x1a185:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x1a188:	and eax, 0xf000                     
0x1a18d:	cmp eax, 0x8000                     #	if |(|S_ISREG(this->dir_entry[entry].mode))
0x1a192:	jne 0x1a28b                         
0x1a198:	mov rax, qword ptr [rbp - 0x138]    #	    file_size = this|-|>dir_entry[entry].size;
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a19f:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1a1a3:	mov eax, dword ptr [rbp - 0x128]    #	    file_size = this->dir_entry|[|entry].size;
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a1a9:	movsxd rdx, eax                     
0x1a1ac:	mov rax, rdx                        
0x1a1af:	shl rax, 2                          
0x1a1b3:	add rax, rdx                        
0x1a1b6:	shl rax, 4                          
0x1a1ba:	add rax, rcx                        
0x1a1bd:	mov rax, qword ptr [rax + 8]        #	    file_size |=| this->dir_entry[entry].size;
MEMORY OFFSET:     0x8     8  >>16

0x1a1c1:	mov qword ptr [rbp - 0x118], rax    
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a1c8:	mov rax, qword ptr [rbp - 0x118]    #	    if (|f|ile_size % 1024)
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a1cf:	and eax, 0x3ff                      
0x1a1d4:	test rax, rax                       #	    if |(|file_size % 1024)
0x1a1d7:	je 0x1a203                          
0x1a1d9:	mov rax, qword ptr [rbp - 0x118]    #		file_size += 1024 - file_size |%| 1024;
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a1e0:	cqo                                 
0x1a1e2:	shr rdx, 0x36                       
0x1a1e6:	add rax, rdx                        
0x1a1e9:	and eax, 0x3ff                      
0x1a1ee:	sub rax, rdx                        
0x1a1f1:	mov rdx, rax                        
0x1a1f4:	mov eax, 0x400                      #		file_size += 1024 |-| file_size % 1024;
0x1a1f9:	sub rax, rdx                        
0x1a1fc:	add qword ptr [rbp - 0x118], rax    #		file_size |+|= 1024 - file_size % 1024;
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a203:	mov rax, qword ptr [rbp - 0x118]    #	    file_size |/|= 1024;
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a20a:	lea rdx, [rax + 0x3ff]              
MEMORY OFFSET:     0x3ff     1023  >>1031

0x1a211:	test rax, rax                       
0x1a214:	cmovs rax, rdx                      
0x1a218:	sar rax, 0xa                        
0x1a21c:	mov qword ptr [rbp - 0x118], rax    
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a223:	mov rax, qword ptr [rbp - 0x118]    #	    if |(|file_size <= bin_size)
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a22a:	cmp rax, qword ptr [rbp - 0x148]    
MEMORY OFFSET:     -0x148     -328  >>-320

0x1a231:	jg 0x1a284                          
0x1a233:	mov rax, qword ptr [rbp - 0x138]    #		buffer[candidates++] = &this|-|>dir_entry[entry];
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a23a:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1a23e:	mov eax, dword ptr [rbp - 0x128]    #		buffer[candidates++] = &this->dir_entry|[|entry];
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a244:	movsxd rdx, eax                     
0x1a247:	mov rax, rdx                        
0x1a24a:	shl rax, 2                          
0x1a24e:	add rax, rdx                        
0x1a251:	shl rax, 4                          
0x1a255:	mov rsi, rax                        
0x1a258:	mov eax, dword ptr [rbp - 0x124]    #		buffer[candidates|+|+] = &this->dir_entry[entry];
MEMORY OFFSET:     -0x124     -292  >>-284

0x1a25e:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1a261:	mov dword ptr [rbp - 0x124], edx    
MEMORY OFFSET:     -0x124     -292  >>-284

0x1a267:	cdqe                                
0x1a269:	lea rdx, [rax*8]                    #		buffer|[|candidates++] = &this->dir_entry[entry];
0x1a271:	mov rax, qword ptr [rbp - 0xf8]     
MEMORY OFFSET:     -0xf8     -248  >>-240

0x1a278:	add rax, rdx                        
0x1a27b:	lea rdx, [rcx + rsi]                #		buffer[candidates++] = |&|this->dir_entry[entry];
0x1a27f:	mov qword ptr [rax], rdx            #		buffer[candidates++] |=| &this->dir_entry[entry];
0x1a282:	jmp 0x1a28b                         
0x1a284:	add dword ptr [rbp - 0x120], 1      #		big_files|+|+;
MEMORY OFFSET:     -0x120     -288  >>-280

0x1a28b:	add dword ptr [rbp - 0x128], 1      #    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a292:	mov rax, qword ptr [rbp - 0x138]    #    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a299:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1a29c:	cmp dword ptr [rbp - 0x128], eax    #    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a2a2:	jl 0x1a160                          
0x1a2a8:	mov eax, dword ptr [rbp - 0x124]    #    |q|sort(buffer, candidates, sizeof(dir_entry_t *), pack_compare_fn);
MEMORY OFFSET:     -0x124     -292  >>-284

0x1a2ae:	movsxd rsi, eax                     
0x1a2b1:	mov rax, qword ptr [rbp - 0xf8]     
MEMORY OFFSET:     -0xf8     -248  >>-240

0x1a2b8:	lea rdx, [rip - 0x2c2]              
MEMORY OFFSET:     -0x2c2     -706  >>-698

0x1a2bf:	mov rcx, rdx                        
0x1a2c2:	mov edx, 8                          
0x1a2c7:	mov rdi, rax                        
0x1a2ca:	call 0x48b0                         
0x1a2cf:	mov dword ptr [rbp - 0x128], 0      #    for (entry |=| 0; entry < candidates; entry++)
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a2d9:	jmp 0x1a507                         #    |f|or (entry = 0; entry < candidates; entry++)
0x1a2de:	mov eax, dword ptr [rbp - 0x128]    #	file_size = buffer|[|entry]->size;
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a2e4:	cdqe                                
0x1a2e6:	lea rdx, [rax*8]                    
0x1a2ee:	mov rax, qword ptr [rbp - 0xf8]     
MEMORY OFFSET:     -0xf8     -248  >>-240

0x1a2f5:	add rax, rdx                        
0x1a2f8:	mov rax, qword ptr [rax]            
0x1a2fb:	mov rax, qword ptr [rax + 8]        #	file_size |=| buffer[entry]->size;
MEMORY OFFSET:     0x8     8  >>16

0x1a2ff:	mov qword ptr [rbp - 0x118], rax    
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a306:	mov rax, qword ptr [rbp - 0x118]    #	if (|f|ile_size % 1024)
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a30d:	and eax, 0x3ff                      
0x1a312:	test rax, rax                       #	if |(|file_size % 1024)
0x1a315:	je 0x1a341                          
0x1a317:	mov rax, qword ptr [rbp - 0x118]    #	    file_size += 1024 - file_size |%| 1024;
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a31e:	cqo                                 
0x1a320:	shr rdx, 0x36                       
0x1a324:	add rax, rdx                        
0x1a327:	and eax, 0x3ff                      
0x1a32c:	sub rax, rdx                        
0x1a32f:	mov rdx, rax                        
0x1a332:	mov eax, 0x400                      #	    file_size += 1024 |-| file_size % 1024;
0x1a337:	sub rax, rdx                        
0x1a33a:	add qword ptr [rbp - 0x118], rax    #	    file_size |+|= 1024 - file_size % 1024;
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a341:	mov rax, qword ptr [rbp - 0x118]    #	file_size |/|= 1024;
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a348:	lea rdx, [rax + 0x3ff]              
MEMORY OFFSET:     0x3ff     1023  >>1031

0x1a34f:	test rax, rax                       
0x1a352:	cmovs rax, rdx                      
0x1a356:	sar rax, 0xa                        
0x1a35a:	mov qword ptr [rbp - 0x118], rax    
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a361:	mov dword ptr [rbp - 0x11c], 0      #	for (current_bin |=| 0; current_bin < used_bins; current_bin++)
MEMORY OFFSET:     -0x11c     -284  >>-276

0x1a36b:	jmp 0x1a426                         #	|f|or (current_bin = 0; current_bin < used_bins; current_bin++)
0x1a370:	mov eax, dword ptr [rbp - 0x11c]    #	    if (bins|[|current_bin] >= file_size)
MEMORY OFFSET:     -0x11c     -284  >>-276

0x1a376:	cdqe                                
0x1a378:	lea rdx, [rax*8]                    
0x1a380:	mov rax, qword ptr [rbp - 0x110]    
MEMORY OFFSET:     -0x110     -272  >>-264

0x1a387:	add rax, rdx                        
0x1a38a:	mov rax, qword ptr [rax]            
0x1a38d:	cmp qword ptr [rbp - 0x118], rax    #	    if |(|bins[current_bin] >= file_size)
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a394:	jg 0x1a41f                          
0x1a39a:	mov eax, dword ptr [rbp - 0x11c]    #		bins[current_bin] |-|= file_size;
MEMORY OFFSET:     -0x11c     -284  >>-276

0x1a3a0:	cdqe                                
0x1a3a2:	lea rdx, [rax*8]                    
0x1a3aa:	mov rax, qword ptr [rbp - 0x110]    
MEMORY OFFSET:     -0x110     -272  >>-264

0x1a3b1:	add rax, rdx                        
0x1a3b4:	mov rax, qword ptr [rax]            
0x1a3b7:	mov edx, dword ptr [rbp - 0x11c]    
MEMORY OFFSET:     -0x11c     -284  >>-276

0x1a3bd:	movsxd rdx, edx                     
0x1a3c0:	lea rcx, [rdx*8]                    
0x1a3c8:	mov rdx, qword ptr [rbp - 0x110]    
MEMORY OFFSET:     -0x110     -272  >>-264

0x1a3cf:	add rdx, rcx                        
0x1a3d2:	sub rax, qword ptr [rbp - 0x118]    
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a3d9:	mov qword ptr [rdx], rax            
0x1a3dc:	cmp dword ptr [rbp - 0x11c], 0      #		if |(|current_bin == 0)
MEMORY OFFSET:     -0x11c     -284  >>-276

0x1a3e3:	jne 0x1a43a                         
0x1a3e5:	mov eax, dword ptr [rbp - 0x128]    #		    buffer|[|entry]->selected = 1;
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a3eb:	cdqe                                
0x1a3ed:	lea rdx, [rax*8]                    
0x1a3f5:	mov rax, qword ptr [rbp - 0xf8]     
MEMORY OFFSET:     -0xf8     -248  >>-240

0x1a3fc:	add rax, rdx                        
0x1a3ff:	mov rax, qword ptr [rax]            
0x1a402:	mov byte ptr [rax + 0x49], 1        #		    buffer[entry]->selected |=| 1;
MEMORY OFFSET:     0x49     73  >>81

0x1a406:	mov rax, qword ptr [rbp - 0x138]    #		    this|-|>selected_entries++;
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a40d:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1a410:	lea edx, [rax + 1]                  #		    this->selected_entries|+|+;
MEMORY OFFSET:     0x1     1  >>9

0x1a413:	mov rax, qword ptr [rbp - 0x138]    
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a41a:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1a41d:	jmp 0x1a43a                         #		|b|reak;
0x1a41f:	add dword ptr [rbp - 0x11c], 1      #	for (current_bin = 0; current_bin < used_bins; current_bin|+|+)
MEMORY OFFSET:     -0x11c     -284  >>-276

0x1a426:	mov eax, dword ptr [rbp - 0x11c]    #	for (current_bin = 0; current_bin |<| used_bins; current_bin++)
MEMORY OFFSET:     -0x11c     -284  >>-276

0x1a42c:	cmp eax, dword ptr [rbp - 0x12c]    
MEMORY OFFSET:     -0x12c     -300  >>-292

0x1a432:	jl 0x1a370                          
0x1a438:	jmp 0x1a43b                         
0x1a43a:	nop                                 #		|b|reak;
0x1a43b:	mov eax, dword ptr [rbp - 0x11c]    #	if |(|current_bin == used_bins)
MEMORY OFFSET:     -0x11c     -284  >>-276

0x1a441:	cmp eax, dword ptr [rbp - 0x12c]    
MEMORY OFFSET:     -0x12c     -300  >>-292

0x1a447:	jne 0x1a500                         
0x1a44d:	mov eax, dword ptr [rbp - 0x12c]    #	    if |(|used_bins == max_bins)
MEMORY OFFSET:     -0x12c     -300  >>-292

0x1a453:	cmp eax, dword ptr [rbp - 0x130]    
MEMORY OFFSET:     -0x130     -304  >>-296

0x1a459:	jne 0x1a48b                         
0x1a45b:	add dword ptr [rbp - 0x130], 0x10   #		max_bins |+|= 16;
MEMORY OFFSET:     -0x130     -304  >>-296

0x1a462:	mov eax, dword ptr [rbp - 0x130]    #		bins = (off64_t *)|x|realloc(bins, max_bins * sizeof(off64_t));
MEMORY OFFSET:     -0x130     -304  >>-296

0x1a468:	cdqe                                
0x1a46a:	lea rdx, [rax*8]                    
0x1a472:	mov rax, qword ptr [rbp - 0x110]    
MEMORY OFFSET:     -0x110     -272  >>-264

0x1a479:	mov rsi, rdx                        
0x1a47c:	mov rdi, rax                        
0x1a47f:	call 0x24670                        
0x1a484:	mov qword ptr [rbp - 0x110], rax    
MEMORY OFFSET:     -0x110     -272  >>-264

0x1a48b:	mov eax, dword ptr [rbp - 0x12c]    #	    bins[used_bins|+|+] = bin_size - file_size;
MEMORY OFFSET:     -0x12c     -300  >>-292

0x1a491:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1a494:	mov dword ptr [rbp - 0x12c], edx    
MEMORY OFFSET:     -0x12c     -300  >>-292

0x1a49a:	cdqe                                
0x1a49c:	lea rdx, [rax*8]                    #	    bins|[|used_bins++] = bin_size - file_size;
0x1a4a4:	mov rax, qword ptr [rbp - 0x110]    
MEMORY OFFSET:     -0x110     -272  >>-264

0x1a4ab:	add rdx, rax                        
0x1a4ae:	mov rax, qword ptr [rbp - 0x148]    #	    bins[used_bins++] = bin_size |-| file_size;
MEMORY OFFSET:     -0x148     -328  >>-320

0x1a4b5:	sub rax, qword ptr [rbp - 0x118]    
MEMORY OFFSET:     -0x118     -280  >>-272

0x1a4bc:	mov qword ptr [rdx], rax            #	    bins[used_bins++] |=| bin_size - file_size;
0x1a4bf:	cmp dword ptr [rbp - 0x11c], 0      #	    if |(|current_bin == 0)
MEMORY OFFSET:     -0x11c     -284  >>-276

0x1a4c6:	jne 0x1a500                         
0x1a4c8:	mov eax, dword ptr [rbp - 0x128]    #		buffer|[|entry]->selected = 1;
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a4ce:	cdqe                                
0x1a4d0:	lea rdx, [rax*8]                    
0x1a4d8:	mov rax, qword ptr [rbp - 0xf8]     
MEMORY OFFSET:     -0xf8     -248  >>-240

0x1a4df:	add rax, rdx                        
0x1a4e2:	mov rax, qword ptr [rax]            
0x1a4e5:	mov byte ptr [rax + 0x49], 1        #		buffer[entry]->selected |=| 1;
MEMORY OFFSET:     0x49     73  >>81

0x1a4e9:	mov rax, qword ptr [rbp - 0x138]    #		this|-|>selected_entries++;
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a4f0:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1a4f3:	lea edx, [rax + 1]                  #		this->selected_entries|+|+;
MEMORY OFFSET:     0x1     1  >>9

0x1a4f6:	mov rax, qword ptr [rbp - 0x138]    
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a4fd:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1a500:	add dword ptr [rbp - 0x128], 1      #    for (entry = 0; entry < candidates; entry|+|+)
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a507:	mov eax, dword ptr [rbp - 0x128]    #    for (entry = 0; entry |<| candidates; entry++)
MEMORY OFFSET:     -0x128     -296  >>-288

0x1a50d:	cmp eax, dword ptr [rbp - 0x124]    
MEMORY OFFSET:     -0x124     -292  >>-284

0x1a513:	jl 0x1a2de                          
0x1a519:	mov rax, qword ptr [rbp - 0x138]    #    |p|anel_update(this);
MEMORY OFFSET:     -0x138     -312  >>-304

0x1a520:	mov rdi, rax                        
0x1a523:	call 0x14e6a                        
0x1a528:	cmp qword ptr [rbp - 0x110], 0      #    if |(|bins)
MEMORY OFFSET:     -0x110     -272  >>-264

0x1a530:	je 0x1a541                          
0x1a532:	mov rax, qword ptr [rbp - 0x110]    #	|x|free(bins);
MEMORY OFFSET:     -0x110     -272  >>-264

0x1a539:	mov rdi, rax                        
0x1a53c:	call 0x1eeae                        
0x1a541:	mov rax, qword ptr [rbp - 0xf8]     #    |x|free(buffer);
MEMORY OFFSET:     -0xf8     -248  >>-240

0x1a548:	mov rdi, rax                        
0x1a54b:	call 0x1eeae                        
0x1a550:	cmp dword ptr [rbp - 0x124], 0      #    if |(|candidates > 0)
MEMORY OFFSET:     -0x124     -292  >>-284

0x1a557:	jle 0x1a5e5                         
0x1a55d:	cmp dword ptr [rbp - 0x120], 0      #	if |(|big_files > 0)
MEMORY OFFSET:     -0x120     -288  >>-280

0x1a564:	jle 0x1a5b2                         
0x1a566:	mov edi, dword ptr [rbp - 0x12c]    #	    |s|printf(msg,
MEMORY OFFSET:     -0x12c     -300  >>-292

0x1a56c:	mov ecx, dword ptr [rbp - 0x124]    
MEMORY OFFSET:     -0x124     -292  >>-284

0x1a572:	mov rdx, qword ptr [rbp - 0x108]    
MEMORY OFFSET:     -0x108     -264  >>-256

0x1a579:	lea rax, [rbp - 0xb0]               
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1a580:	sub rsp, 8                          
0x1a584:	mov esi, dword ptr [rbp - 0x120]    
MEMORY OFFSET:     -0x120     -288  >>-280

0x1a58a:	push rsi                            
0x1a58b:	mov r9d, edi                        
0x1a58e:	lea r8, [rip + 0xe765]              
MEMORY OFFSET:     0xe765     59237  >>59245

0x1a595:	lea rsi, [rip + 0xe77c]             
MEMORY OFFSET:     0xe77c     59260  >>59268

0x1a59c:	mov rdi, rax                        
0x1a59f:	mov eax, 0                          
0x1a5a4:	call 0x4dd0                         
0x1a5a9:	add rsp, 0x10                       
0x1a5ad:	jmp 0x1a63e                         
0x1a5b2:	mov esi, dword ptr [rbp - 0x12c]    #	    |s|printf(msg,
MEMORY OFFSET:     -0x12c     -300  >>-292

0x1a5b8:	mov ecx, dword ptr [rbp - 0x124]    
MEMORY OFFSET:     -0x124     -292  >>-284

0x1a5be:	mov rdx, qword ptr [rbp - 0x108]    
MEMORY OFFSET:     -0x108     -264  >>-256

0x1a5c5:	lea rax, [rbp - 0xb0]               
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1a5cc:	mov r8d, esi                        
0x1a5cf:	lea rsi, [rip + 0xe77a]             
MEMORY OFFSET:     0xe77a     59258  >>59266

0x1a5d6:	mov rdi, rax                        
0x1a5d9:	mov eax, 0                          
0x1a5de:	call 0x4dd0                         
0x1a5e3:	jmp 0x1a63e                         
0x1a5e5:	cmp dword ptr [rbp - 0x120], 0      #	if |(|big_files > 0)
MEMORY OFFSET:     -0x120     -288  >>-280

0x1a5ec:	jle 0x1a619                         
0x1a5ee:	mov rcx, qword ptr [rbp - 0x148]    #	    |s|printf(msg, "%s: No suitable files found (smaller than %ldKb).",
MEMORY OFFSET:     -0x148     -328  >>-320

0x1a5f5:	mov rdx, qword ptr [rbp - 0x108]    
MEMORY OFFSET:     -0x108     -264  >>-256

0x1a5fc:	lea rax, [rbp - 0xb0]               
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1a603:	lea rsi, [rip + 0xe77e]             
MEMORY OFFSET:     0xe77e     59262  >>59270

0x1a60a:	mov rdi, rax                        
0x1a60d:	mov eax, 0                          
0x1a612:	call 0x4dd0                         
0x1a617:	jmp 0x1a63e                         
0x1a619:	mov rdx, qword ptr [rbp - 0x108]    #	    |s|printf(msg, "%s: No regular files found.", fn);
MEMORY OFFSET:     -0x108     -264  >>-256

0x1a620:	lea rax, [rbp - 0xb0]               
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1a627:	lea rcx, [rip + 0xe78c]             
MEMORY OFFSET:     0xe78c     59276  >>59284

0x1a62e:	mov rsi, rcx                        
0x1a631:	mov rdi, rax                        
0x1a634:	mov eax, 0                          
0x1a639:	call 0x4dd0                         
0x1a63e:	lea rax, [rbp - 0xb0]               #    |p|anel_1s_message(msg, (char *)NULL,
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1a645:	mov edx, 0x36                       
0x1a64a:	mov esi, 0                          
0x1a64f:	mov rdi, rax                        
0x1a652:	call 0x5c09                         
0x1a657:	nop                                 #|}|
0x1a658:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1a65c:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1a665:	je 0x1a66c                          
0x1a667:	call 0x4980                         
0x1a66c:	leave                               
0x1a66d:	ret                                 
0x1a66e:	endbr64                             #|{|
0x1a672:	push rbp                            
0x1a673:	mov rbp, rsp                        
0x1a676:	push rbx                            
0x1a677:	sub rsp, 0x38                       
0x1a67b:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1a67f:	mov dword ptr [rbp - 0x2c], 0       #    int |i| = 0;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a686:	mov dword ptr [rbp - 0x28], 0       #    int |i|ndex = 0;
MEMORY OFFSET:     -0x28     -40  >>-32

0x1a68d:	mov dword ptr [rbp - 0x24], 0       #    int |e|scaping = 0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x1a694:	mov rax, qword ptr [rbp - 0x38]     #    char *pattern = xmalloc(|s|trlen(string) + 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x1a698:	mov rdi, rax                        
0x1a69b:	call 0x4960                         
0x1a6a0:	add rax, 1                          #    char *pattern = |x|malloc(strlen(string) + 1);
0x1a6a4:	mov rdi, rax                        
0x1a6a7:	call 0x24650                        
0x1a6ac:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a6b0:	mov esi, 8                          #    char **patterns = (char **)|x|calloc(2, sizeof(char *));
0x1a6b5:	mov edi, 2                          
0x1a6ba:	call 0x24720                        
0x1a6bf:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1a6c3:	mov rax, qword ptr [rbp - 0x38]     #	switch ((c = *string|+|+))
MEMORY OFFSET:     -0x38     -56  >>-48

0x1a6c7:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1a6cb:	mov qword ptr [rbp - 0x38], rdx     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1a6cf:	movzx eax, byte ptr [rax]           #	switch ((c |=| *string++))
0x1a6d2:	mov byte ptr [rbp - 0x2d], al       
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1a6d5:	movsx eax, byte ptr [rbp - 0x2d]    
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1a6d9:	cmp eax, 0x5c                       #	|s|witch ((c = *string++))
0x1a6dc:	je 0x1a7c7                          
0x1a6e2:	cmp eax, 0x5c                       
0x1a6e5:	jg 0x1a7f5                          
0x1a6eb:	cmp eax, 0x20                       
0x1a6ee:	je 0x1a706                          
0x1a6f0:	cmp eax, 0x20                       
0x1a6f3:	jg 0x1a7f5                          
0x1a6f9:	test eax, eax                       
0x1a6fb:	je 0x1a706                          
0x1a6fd:	cmp eax, 9                          
0x1a700:	jne 0x1a7f5                         
0x1a706:	cmp dword ptr [rbp - 0x24], 0       #	    case '\t': if |(|escaping && c != '\0')
MEMORY OFFSET:     -0x24     -36  >>-28

0x1a70a:	je 0x1a730                          
0x1a70c:	cmp byte ptr [rbp - 0x2d], 0        #	    case '\t': if (escaping |&|& c != '\0')
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1a710:	je 0x1a730                          
0x1a712:	mov eax, dword ptr [rbp - 0x2c]     #			   pattern[i|+|+] = c;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a715:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1a718:	mov dword ptr [rbp - 0x2c], edx     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a71b:	movsxd rdx, eax                     
0x1a71e:	mov rax, qword ptr [rbp - 0x18]     #			   pattern|[|i++] = c;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a722:	add rdx, rax                        
0x1a725:	movzx eax, byte ptr [rbp - 0x2d]    #			   pattern[i++] |=| c;
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1a729:	mov byte ptr [rdx], al              
0x1a72b:	jmp 0x1a832                         #		       |b|reak;
0x1a730:	cmp dword ptr [rbp - 0x2c], 0       #			   if |(|i > 0)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a734:	jle 0x1a791                         
0x1a736:	mov eax, dword ptr [rbp - 0x2c]     #			       pattern[i|+|+] = '\0';
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a739:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1a73c:	mov dword ptr [rbp - 0x2c], edx     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a73f:	movsxd rdx, eax                     
0x1a742:	mov rax, qword ptr [rbp - 0x18]     #			       pattern|[|i++] = '\0';
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a746:	add rax, rdx                        
0x1a749:	mov byte ptr [rax], 0               #			       pattern[i++] |=| '\0';
0x1a74c:	mov eax, dword ptr [rbp - 0x28]     #			       patterns[index|+|+] = xstrdup(pattern);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1a74f:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1a752:	mov dword ptr [rbp - 0x28], edx     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1a755:	cdqe                                
0x1a757:	lea rdx, [rax*8]                    #			       patterns|[|index++] = xstrdup(pattern);
0x1a75f:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1a763:	lea rbx, [rdx + rax]                
0x1a767:	mov rax, qword ptr [rbp - 0x18]     #			       patterns[index++] = |x|strdup(pattern);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a76b:	mov rdi, rax                        
0x1a76e:	call 0x24780                        
0x1a773:	mov qword ptr [rbx], rax            #			       patterns[index++] |=| xstrdup(pattern);
0x1a776:	mov eax, dword ptr [rbp - 0x28]     #			       patterns|[|index] = NULL;
MEMORY OFFSET:     -0x28     -40  >>-32

0x1a779:	cdqe                                
0x1a77b:	lea rdx, [rax*8]                    
0x1a783:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1a787:	add rax, rdx                        
0x1a78a:	mov qword ptr [rax], 0              #			       patterns[index] |=| NULL;
0x1a791:	cmp byte ptr [rbp - 0x2d], 0        #			   if |(|c == '\0')
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1a795:	je 0x1a837                          
0x1a79b:	mov eax, dword ptr [rbp - 0x28]     #							(index |+| 2) *
MEMORY OFFSET:     -0x28     -40  >>-32

0x1a79e:	add eax, 2                          
0x1a7a1:	cdqe                                
0x1a7a3:	lea rdx, [rax*8]                    #			   patterns = (char **)|x|realloc(patterns,
0x1a7ab:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1a7af:	mov rsi, rdx                        
0x1a7b2:	mov rdi, rax                        
0x1a7b5:	call 0x24670                        
0x1a7ba:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1a7be:	mov dword ptr [rbp - 0x2c], 0       #			   i |=| 0;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a7c5:	jmp 0x1a832                         #		       |b|reak;
0x1a7c7:	cmp dword ptr [rbp - 0x24], 0       #	    case '\\': if |(|escaping)
MEMORY OFFSET:     -0x24     -36  >>-28

0x1a7cb:	je 0x1a7e6                          
0x1a7cd:	mov eax, dword ptr [rbp - 0x2c]     #			   pattern[i|+|+] = c;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a7d0:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1a7d3:	mov dword ptr [rbp - 0x2c], edx     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a7d6:	movsxd rdx, eax                     
0x1a7d9:	mov rax, qword ptr [rbp - 0x18]     #			   pattern|[|i++] = c;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a7dd:	add rdx, rax                        
0x1a7e0:	movzx eax, byte ptr [rbp - 0x2d]    #			   pattern[i++] |=| c;
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1a7e4:	mov byte ptr [rdx], al              
0x1a7e6:	cmp dword ptr [rbp - 0x24], 0       #		       escaping = |!|escaping;
MEMORY OFFSET:     -0x24     -36  >>-28

0x1a7ea:	sete al                             
0x1a7ed:	movzx eax, al                       #		       escaping |=| !escaping;
0x1a7f0:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x1a7f3:	jmp 0x1a832                         #		       |b|reak;
0x1a7f5:	cmp dword ptr [rbp - 0x24], 0       #	    default:   if |(|escaping)
MEMORY OFFSET:     -0x24     -36  >>-28

0x1a7f9:	je 0x1a811                          
0x1a7fb:	mov eax, dword ptr [rbp - 0x2c]     #			   pattern[i|+|+] = '\\';
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a7fe:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1a801:	mov dword ptr [rbp - 0x2c], edx     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a804:	movsxd rdx, eax                     
0x1a807:	mov rax, qword ptr [rbp - 0x18]     #			   pattern|[|i++] = '\\';
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a80b:	add rax, rdx                        
0x1a80e:	mov byte ptr [rax], 0x5c            #			   pattern[i++] |=| '\\';
0x1a811:	mov eax, dword ptr [rbp - 0x2c]     #		       pattern[i|+|+] = c;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a814:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1a817:	mov dword ptr [rbp - 0x2c], edx     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1a81a:	movsxd rdx, eax                     
0x1a81d:	mov rax, qword ptr [rbp - 0x18]     #		       pattern|[|i++] = c;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a821:	add rdx, rax                        
0x1a824:	movzx eax, byte ptr [rbp - 0x2d]    #		       pattern[i++] |=| c;
MEMORY OFFSET:     -0x2d     -45  >>-37

0x1a828:	mov byte ptr [rdx], al              
0x1a82a:	mov dword ptr [rbp - 0x24], 0       #		       escaping |=| 0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x1a831:	nop                                 #		       |b|reak;
0x1a832:	jmp 0x1a6c3                         #	|s|witch ((c = *string++))
0x1a837:	nop                                 #			       |g|oto done;
0x1a838:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(pattern);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a83c:	mov rdi, rax                        
0x1a83f:	call 0x1eeae                        
0x1a844:	mov rax, qword ptr [rbp - 0x20]     #    return |p|atterns;
MEMORY OFFSET:     -0x20     -32  >>-24

0x1a848:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1a84c:	leave                               
0x1a84d:	ret                                 
0x1a84e:	endbr64                             #|{|
0x1a852:	push rbp                            
0x1a853:	mov rbp, rsp                        
0x1a856:	sub rsp, 0x20                       
0x1a85a:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a85e:	mov rax, qword ptr [rbp - 0x18]     #    char **|s|afe_patterns = patterns;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a862:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1a866:	jmp 0x1a87f                         #    while |(|*patterns)
0x1a868:	mov rax, qword ptr [rbp - 0x18]     #	xfree(*patterns|+|+);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a86c:	lea rdx, [rax + 8]                  
MEMORY OFFSET:     0x8     8  >>16

0x1a870:	mov qword ptr [rbp - 0x18], rdx     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a874:	mov rax, qword ptr [rax]            #	|x|free(*patterns++);
0x1a877:	mov rdi, rax                        
0x1a87a:	call 0x1eeae                        
0x1a87f:	mov rax, qword ptr [rbp - 0x18]     #    while (|*|patterns)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a883:	mov rax, qword ptr [rax]            
0x1a886:	test rax, rax                       
0x1a889:	jne 0x1a868                         
0x1a88b:	mov rax, qword ptr [rbp - 8]        #    |x|free(safe_patterns);
MEMORY OFFSET:     -0x8     -8  >>0

0x1a88f:	mov rdi, rax                        
0x1a892:	call 0x1eeae                        
0x1a897:	nop                                 #|}|
0x1a898:	leave                               
0x1a899:	ret                                 
0x1a89a:	endbr64                             #|{|
0x1a89e:	push rbp                            
0x1a89f:	mov rbp, rsp                        
0x1a8a2:	push r12                            
0x1a8a4:	push rbx                            
0x1a8a5:	sub rsp, 0xb0                       
0x1a8ac:	mov qword ptr [rbp - 0xa8], rdi     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a8b3:	mov dword ptr [rbp - 0xac], esi     
MEMORY OFFSET:     -0xac     -172  >>-164

0x1a8b9:	mov qword ptr [rbp - 0xb8], rdx     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1a8c0:	mov qword ptr [rbp - 0xc0], rcx     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1a8c7:	mov dword ptr [rbp - 0xb0], r8d     
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1a8ce:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1a8d7:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1a8db:	xor eax, eax                        
0x1a8dd:	cmp dword ptr [rbp - 0xac], 0x33    #    |s|witch (action)
MEMORY OFFSET:     -0xac     -172  >>-164

0x1a8e4:	ja 0x1c31d                          
0x1a8ea:	mov eax, dword ptr [rbp - 0xac]     
MEMORY OFFSET:     -0xac     -172  >>-164

0x1a8f0:	lea rdx, [rax*4]                    
0x1a8f8:	lea rax, [rip + 0xe549]             
MEMORY OFFSET:     0xe549     58697  >>58705

0x1a8ff:	mov eax, dword ptr [rdx + rax]      
0x1a902:	cdqe                                
0x1a904:	lea rdx, [rip + 0xe53d]             
MEMORY OFFSET:     0xe53d     58685  >>58693

0x1a90b:	add rax, rdx                        
0x1a90e:	jmp rax                             
0x1a911:	mov rdx, qword ptr [rbp - 0xb8]     #	    return |p|anel_act_ENTER(this, other);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1a918:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a91f:	mov rsi, rdx                        
0x1a922:	mov rdi, rax                        
0x1a925:	mov eax, 0                          
0x1a92a:	call 0x16acd                        
0x1a92f:	jmp 0x1c343                         
0x1a934:	mov rdx, qword ptr [rbp - 0xb8]     #	    |p|anel_act_COPY(this, other);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1a93b:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a942:	mov rsi, rdx                        
0x1a945:	mov rdi, rax                        
0x1a948:	mov eax, 0                          
0x1a94d:	call 0x16e1f                        
0x1a952:	jmp 0x1c33e                         #	    |b|reak;
0x1a957:	mov rdx, qword ptr [rbp - 0xb8]     #	    |p|anel_act_DELETE(this, other);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1a95e:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a965:	mov rsi, rdx                        
0x1a968:	mov rdi, rax                        
0x1a96b:	mov eax, 0                          
0x1a970:	call 0x174e8                        
0x1a975:	jmp 0x1c33e                         #	    |b|reak;
0x1a97a:	mov rax, qword ptr [rbp - 0xa8]     #	    if (|r|ootdir() || this->current_entry != 0)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a981:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1a985:	movzx eax, byte ptr [rax]           
0x1a988:	cmp al, 0x2f                        #	    if |(|rootdir() || this->current_entry != 0)
0x1a98a:	jne 0x1a9a2                         
0x1a98c:	mov rax, qword ptr [rbp - 0xa8]     #	    if (|r|ootdir() || this->current_entry != 0)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a993:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1a997:	add rax, 1                          
0x1a99b:	movzx eax, byte ptr [rax]           
0x1a99e:	test al, al                         
0x1a9a0:	je 0x1a9b4                          
0x1a9a2:	mov rax, qword ptr [rbp - 0xa8]     #	    if (rootdir() || this|-|>current_entry != 0)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a9a9:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1a9ac:	test eax, eax                       #	    if (rootdir() |||| this->current_entry != 0)
0x1a9ae:	je 0x1aa84                          
0x1a9b4:	mov rax, qword ptr [rbp - 0xa8]     #		    !this|-|>dir_entry[this->current_entry].selected;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a9bb:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1a9bf:	mov rax, qword ptr [rbp - 0xa8]     #		    !this->dir_entry[this|-|>current_entry].selected;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a9c6:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1a9c9:	movsxd rdx, eax                     
0x1a9cc:	mov rax, rdx                        #		    !this->dir_entry|[|this->current_entry].selected;
0x1a9cf:	shl rax, 2                          
0x1a9d3:	add rax, rdx                        
0x1a9d6:	shl rax, 4                          
0x1a9da:	add rax, rcx                        
0x1a9dd:	movzx eax, byte ptr [rax + 0x49]    #		    !this->dir_entry[this->current_entry]|.|selected;
MEMORY OFFSET:     0x49     73  >>81

0x1a9e1:	test al, al                         #		    |!|this->dir_entry[this->current_entry].selected;
0x1a9e3:	sete sil                            
0x1a9e7:	mov rax, qword ptr [rbp - 0xa8]     #		this|-|>dir_entry[this->current_entry].selected =
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a9ee:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1a9f2:	mov rax, qword ptr [rbp - 0xa8]     #		this->dir_entry[this|-|>current_entry].selected =
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1a9f9:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1a9fc:	movsxd rdx, eax                     
0x1a9ff:	mov rax, rdx                        #		this->dir_entry|[|this->current_entry].selected =
0x1aa02:	shl rax, 2                          
0x1aa06:	add rax, rdx                        
0x1aa09:	shl rax, 4                          
0x1aa0d:	add rax, rcx                        
0x1aa10:	mov edx, esi                        #		    |!|this->dir_entry[this->current_entry].selected;
0x1aa12:	mov byte ptr [rax + 0x49], dl       #		this->dir_entry[this->current_entry].selected |=|
MEMORY OFFSET:     0x49     73  >>81

0x1aa15:	mov rax, qword ptr [rbp - 0xa8]     #		this->selected_entries |+|=
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aa1c:	mov ecx, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1aa1f:	mov rax, qword ptr [rbp - 0xa8]     #		    this|-|>dir_entry[this->current_entry].selected ? 1 : -1;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aa26:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1aa2a:	mov rax, qword ptr [rbp - 0xa8]     #		    this->dir_entry[this|-|>current_entry].selected ? 1 : -1;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aa31:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1aa34:	movsxd rdx, eax                     
0x1aa37:	mov rax, rdx                        #		    this->dir_entry|[|this->current_entry].selected ? 1 : -1;
0x1aa3a:	shl rax, 2                          
0x1aa3e:	add rax, rdx                        
0x1aa41:	shl rax, 4                          
0x1aa45:	add rax, rsi                        
0x1aa48:	movzx eax, byte ptr [rax + 0x49]    #		    this->dir_entry[this->current_entry]|.|selected ? 1 : -1;
MEMORY OFFSET:     0x49     73  >>81

0x1aa4c:	test al, al                         #		    this->dir_entry[this->current_entry].selected ? 1 |:| -1;
0x1aa4e:	je 0x1aa57                          
0x1aa50:	mov eax, 1                          #		    this->dir_entry[this->current_entry].selected ? 1 |:| -1;
0x1aa55:	jmp 0x1aa5c                         
0x1aa57:	mov eax, 0xffffffff                 #		    this->dir_entry[this->current_entry].selected ? 1 |:| -1;
0x1aa5c:	lea edx, [rax + rcx]                #		this->selected_entries |+|=
0x1aa5f:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aa66:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1aa69:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_entry(this, this->current_entry);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aa70:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1aa73:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aa7a:	mov esi, edx                        
0x1aa7c:	mov rdi, rax                        
0x1aa7f:	call 0x14445                        
0x1aa84:	mov ecx, dword ptr [rbp - 0xb0]     #	    |p|anel_action(this, act_DOWN, other, (void *)NULL, repeat_count);
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1aa8a:	mov rdx, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1aa91:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aa98:	mov r8d, ecx                        
0x1aa9b:	mov ecx, 0                          
0x1aaa0:	mov esi, 0x1c                       
0x1aaa5:	mov rdi, rax                        
0x1aaa8:	call 0x1a89a                        
0x1aaad:	jmp 0x1c33e                         #	    |b|reak;
0x1aab2:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_select_all(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aab9:	mov rdi, rax                        
0x1aabc:	call 0x14f47                        
0x1aac1:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aac8:	mov rdi, rax                        
0x1aacb:	mov eax, 0                          
0x1aad0:	call 0x13223                        
0x1aad5:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aadc:	mov rdi, rax                        
0x1aadf:	mov eax, 0                          
0x1aae4:	call 0x1395a                        
0x1aae9:	jmp 0x1c33e                         #	    |b|reak;
0x1aaee:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_unselect_all(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aaf5:	mov rdi, rax                        
0x1aaf8:	call 0x14ff9                        
0x1aafd:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ab04:	mov rdi, rax                        
0x1ab07:	mov eax, 0                          
0x1ab0c:	call 0x13223                        
0x1ab11:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ab18:	mov rdi, rax                        
0x1ab1b:	mov eax, 0                          
0x1ab20:	call 0x1395a                        
0x1ab25:	jmp 0x1c33e                         #	    |b|reak;
0x1ab2a:	mov rax, qword ptr [rbp - 0xa8]     #	    this->selected_entries |=| 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ab31:	mov dword ptr [rax + 0x70], 0       
MEMORY OFFSET:     0x70     112  >>120

0x1ab38:	mov dword ptr [rbp - 0x98], 0       #	    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1ab42:	jmp 0x1ac1b                         #	    |f|or (entry = 0; entry < this->entries; entry++)
0x1ab47:	mov rax, qword ptr [rbp - 0xa8]     #		if (this|-|>dir_entry[entry].type != DIR_ENTRY)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ab4e:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1ab52:	mov eax, dword ptr [rbp - 0x98]     #		if (this->dir_entry|[|entry].type != DIR_ENTRY)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1ab58:	movsxd rdx, eax                     
0x1ab5b:	mov rax, rdx                        
0x1ab5e:	shl rax, 2                          
0x1ab62:	add rax, rdx                        
0x1ab65:	shl rax, 4                          
0x1ab69:	add rax, rcx                        
0x1ab6c:	movzx eax, byte ptr [rax + 0x48]    #		if (this->dir_entry[entry]|.|type != DIR_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x1ab70:	test al, al                         #		if |(|this->dir_entry[entry].type != DIR_ENTRY)
0x1ab72:	je 0x1ac14                          
0x1ab78:	mov rax, qword ptr [rbp - 0xa8]     #			!this|-|>dir_entry[entry].selected;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ab7f:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1ab83:	mov eax, dword ptr [rbp - 0x98]     #			!this->dir_entry|[|entry].selected;
MEMORY OFFSET:     -0x98     -152  >>-144

0x1ab89:	movsxd rdx, eax                     
0x1ab8c:	mov rax, rdx                        
0x1ab8f:	shl rax, 2                          
0x1ab93:	add rax, rdx                        
0x1ab96:	shl rax, 4                          
0x1ab9a:	add rax, rcx                        
0x1ab9d:	movzx eax, byte ptr [rax + 0x49]    #			!this->dir_entry[entry]|.|selected;
MEMORY OFFSET:     0x49     73  >>81

0x1aba1:	test al, al                         #			|!|this->dir_entry[entry].selected;
0x1aba3:	sete sil                            
0x1aba7:	mov rax, qword ptr [rbp - 0xa8]     #		    this|-|>dir_entry[entry].selected =
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1abae:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1abb2:	mov eax, dword ptr [rbp - 0x98]     #		    this->dir_entry|[|entry].selected =
MEMORY OFFSET:     -0x98     -152  >>-144

0x1abb8:	movsxd rdx, eax                     
0x1abbb:	mov rax, rdx                        
0x1abbe:	shl rax, 2                          
0x1abc2:	add rax, rdx                        
0x1abc5:	shl rax, 4                          
0x1abc9:	add rax, rcx                        
0x1abcc:	mov edx, esi                        #			|!|this->dir_entry[entry].selected;
0x1abce:	mov byte ptr [rax + 0x49], dl       #		    this->dir_entry[entry].selected |=|
MEMORY OFFSET:     0x49     73  >>81

0x1abd1:	mov rax, qword ptr [rbp - 0xa8]     #		    this->selected_entries |+|= this->dir_entry[entry].selected;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1abd8:	mov ecx, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1abdb:	mov rax, qword ptr [rbp - 0xa8]     #		    this->selected_entries += this|-|>dir_entry[entry].selected;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1abe2:	mov rsi, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1abe6:	mov eax, dword ptr [rbp - 0x98]     #		    this->selected_entries += this->dir_entry|[|entry].selected;
MEMORY OFFSET:     -0x98     -152  >>-144

0x1abec:	movsxd rdx, eax                     
0x1abef:	mov rax, rdx                        
0x1abf2:	shl rax, 2                          
0x1abf6:	add rax, rdx                        
0x1abf9:	shl rax, 4                          
0x1abfd:	add rax, rsi                        
0x1ac00:	movzx eax, byte ptr [rax + 0x49]    #		    this->selected_entries += this->dir_entry[entry]|.|selected;
MEMORY OFFSET:     0x49     73  >>81

0x1ac04:	movsx eax, al                       
0x1ac07:	lea edx, [rcx + rax]                #		    this->selected_entries |+|= this->dir_entry[entry].selected;
0x1ac0a:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ac11:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1ac14:	add dword ptr [rbp - 0x98], 1       #	    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1ac1b:	mov rax, qword ptr [rbp - 0xa8]     #	    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ac22:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1ac25:	cmp dword ptr [rbp - 0x98], eax     #	    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1ac2b:	jl 0x1ab47                          
0x1ac31:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ac38:	mov rdi, rax                        
0x1ac3b:	mov eax, 0                          
0x1ac40:	call 0x13223                        
0x1ac45:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ac4c:	mov rdi, rax                        
0x1ac4f:	mov eax, 0                          
0x1ac54:	call 0x1395a                        
0x1ac59:	jmp 0x1c33e                         #	    |b|reak;
0x1ac5e:	mov rdx, qword ptr [rbp - 0xb8]     #	    |p|anel_act_MKDIR(this, other);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1ac65:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ac6c:	mov rsi, rdx                        
0x1ac6f:	mov rdi, rax                        
0x1ac72:	mov eax, 0                          
0x1ac77:	call 0x17b37                        
0x1ac7c:	jmp 0x1c33e                         #	    |b|reak;
0x1ac81:	mov rdx, qword ptr [rbp - 0xb8]     #	    |p|anel_act_MOVE(this, other);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1ac88:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ac8f:	mov rsi, rdx                        
0x1ac92:	mov rdi, rax                        
0x1ac95:	mov eax, 0                          
0x1ac9a:	call 0x17e3b                        
0x1ac9f:	jmp 0x1c33e                         #	    |b|reak;
0x1aca4:	mov dword ptr [rbp - 0x8c], 0       #	    need_update_all = need_update |=| 0;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1acae:	mov eax, dword ptr [rbp - 0x8c]     #	    need_update_all |=| need_update = 0;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1acb4:	mov dword ptr [rbp - 0x88], eax     
MEMORY OFFSET:     -0x88     -136  >>-128

0x1acba:	jmp 0x1ad6f                         #	    while |(|repeat_count--)
0x1acbf:	mov rax, qword ptr [rbp - 0xa8]     #		if (this|-|>current_entry != 0)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1acc6:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1acc9:	test eax, eax                       #		if |(|this->current_entry != 0)
0x1accb:	je 0x1ad88                          
0x1acd1:	mov rax, qword ptr [rbp - 0xa8]     #		    this|-|>current_entry--;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1acd8:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1acdb:	lea edx, [rax - 1]                  #		    this->current_entry|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x1acde:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ace5:	mov dword ptr [rax + 0x28], edx     
MEMORY OFFSET:     0x28     40  >>48

0x1ace8:	mov rax, qword ptr [rbp - 0xa8]     #		if (this|-|>current_entry + 1 == this->first_on_screen)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1acef:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1acf2:	lea edx, [rax + 1]                  #		if (this->current_entry |+| 1 == this->first_on_screen)
MEMORY OFFSET:     0x1     1  >>9

0x1acf5:	mov rax, qword ptr [rbp - 0xa8]     #		if (this->current_entry + 1 == this|-|>first_on_screen)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1acfc:	mov eax, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x1acff:	cmp edx, eax                        #		if |(|this->current_entry + 1 == this->first_on_screen)
0x1ad01:	jne 0x1ad3e                         
0x1ad03:	mov rax, qword ptr [rbp - 0xa8]     #			|m|ax(0, this->first_on_screen - this->scroll_step);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ad0a:	mov edx, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x1ad0d:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ad14:	mov ecx, dword ptr [rax + 0x88]     
MEMORY OFFSET:     0x88     136  >>144

0x1ad1a:	mov eax, edx                        
0x1ad1c:	sub eax, ecx                        
0x1ad1e:	mov edx, 0                          
0x1ad23:	test eax, eax                       
0x1ad25:	cmovns edx, eax                     
0x1ad28:	mov rax, qword ptr [rbp - 0xa8]     #		    this->first_on_screen |=|
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ad2f:	mov dword ptr [rax + 0x2c], edx     
MEMORY OFFSET:     0x2c     44  >>52

0x1ad32:	mov dword ptr [rbp - 0x88], 1       #		    need_update_all |=| 1;
MEMORY OFFSET:     -0x88     -136  >>-128

0x1ad3c:	jmp 0x1ad6f                         
0x1ad3e:	cmp dword ptr [rbp - 0x8c], 0       #		    if |(|!need_update)
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1ad45:	jne 0x1ad65                         
0x1ad47:	mov rax, qword ptr [rbp - 0xa8]     #			panel_update_entry(this, this|-|>current_entry + 1);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ad4e:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1ad51:	lea edx, [rax + 1]                  #			|p|anel_update_entry(this, this->current_entry + 1);
MEMORY OFFSET:     0x1     1  >>9

0x1ad54:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ad5b:	mov esi, edx                        
0x1ad5d:	mov rdi, rax                        
0x1ad60:	call 0x14445                        
0x1ad65:	mov dword ptr [rbp - 0x8c], 1       #		    need_update |=| 1;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1ad6f:	mov eax, dword ptr [rbp - 0xb0]     #	    while (repeat_count|-|-)
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1ad75:	lea edx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1ad78:	mov dword ptr [rbp - 0xb0], edx     
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1ad7e:	test eax, eax                       #	    while (|r|epeat_count--)
0x1ad80:	jne 0x1acbf                         
0x1ad86:	jmp 0x1ad89                         
0x1ad88:	nop                                 #		    |b|reak;
0x1ad89:	cmp dword ptr [rbp - 0x88], 0       #	    if |(|need_update_all)
MEMORY OFFSET:     -0x88     -136  >>-128

0x1ad90:	je 0x1ada8                          
0x1ad92:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ad99:	mov rdi, rax                        
0x1ad9c:	mov eax, 0                          
0x1ada1:	call 0x13223                        
0x1ada6:	jmp 0x1adcc                         
0x1ada8:	cmp dword ptr [rbp - 0x8c], 0       #		if |(|need_update)
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1adaf:	je 0x1adcc                          
0x1adb1:	mov rax, qword ptr [rbp - 0xa8]     #		    |p|anel_update_entry(this, this->current_entry);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1adb8:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1adbb:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1adc2:	mov esi, edx                        
0x1adc4:	mov rdi, rax                        
0x1adc7:	call 0x14445                        
0x1adcc:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1add3:	mov rdi, rax                        
0x1add6:	mov eax, 0                          
0x1addb:	call 0x1395a                        
0x1ade0:	jmp 0x1c33e                         #	    |b|reak;
0x1ade5:	mov dword ptr [rbp - 0x8c], 0       #	    need_update_all = need_update |=| 0;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1adef:	mov eax, dword ptr [rbp - 0x8c]     #	    need_update_all |=| need_update = 0;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1adf5:	mov dword ptr [rbp - 0x88], eax     
MEMORY OFFSET:     -0x88     -136  >>-128

0x1adfb:	jmp 0x1aee3                         #	    while |(|repeat_count--)
0x1ae00:	mov rax, qword ptr [rbp - 0xa8]     #		if (this|-|>current_entry < this->entries - 1)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae07:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1ae0a:	mov rax, qword ptr [rbp - 0xa8]     #		if (this->current_entry < this|-|>entries - 1)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae11:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1ae14:	sub eax, 1                          #		if (this->current_entry < this->entries |-| 1)
0x1ae17:	cmp edx, eax                        #		if |(|this->current_entry < this->entries - 1)
0x1ae19:	jge 0x1aefc                         
0x1ae1f:	mov rax, qword ptr [rbp - 0xa8]     #		    this|-|>current_entry++;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae26:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1ae29:	lea edx, [rax + 1]                  #		    this->current_entry|+|+;
MEMORY OFFSET:     0x1     1  >>9

0x1ae2c:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae33:	mov dword ptr [rax + 0x28], edx     
MEMORY OFFSET:     0x28     40  >>48

0x1ae36:	mov rax, qword ptr [rbp - 0xa8]     #		if (this|-|>current_entry - this->first_on_screen >=
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae3d:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1ae40:	mov rax, qword ptr [rbp - 0xa8]     #		if (this->current_entry - this|-|>first_on_screen >=
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae47:	mov eax, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x1ae4a:	sub edx, eax                        #		if (this->current_entry |-| this->first_on_screen >=
0x1ae4c:	mov rax, qword ptr [rbp - 0xa8]     #		    this|-|>lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae53:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1ae56:	sub eax, 2                          #		    this->lines |-| 2)
0x1ae59:	cmp edx, eax                        #		if |(|this->current_entry - this->first_on_screen >=
0x1ae5b:	jl 0x1aeb2                          
0x1ae5d:	mov rax, qword ptr [rbp - 0xa8]     #		    this->first_on_screen = |m|in(this->first_on_screen +
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae64:	mov edx, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x1ae67:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae6e:	mov eax, dword ptr [rax + 0x88]     
MEMORY OFFSET:     0x88     136  >>144

0x1ae74:	add edx, eax                        
0x1ae76:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae7d:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1ae80:	lea ecx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1ae83:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ae8a:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1ae8d:	lea esi, [rax - 2]                  
MEMORY OFFSET:     -0x2     -2  >>6

0x1ae90:	mov eax, ecx                        
0x1ae92:	sub eax, esi                        
0x1ae94:	add eax, 1                          
0x1ae97:	cmp edx, eax                        
0x1ae99:	cmovg edx, eax                      
0x1ae9c:	mov rax, qword ptr [rbp - 0xa8]     #		    this->first_on_screen |=| min(this->first_on_screen +
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aea3:	mov dword ptr [rax + 0x2c], edx     
MEMORY OFFSET:     0x2c     44  >>52

0x1aea6:	mov dword ptr [rbp - 0x88], 1       #		    need_update_all |=| 1;
MEMORY OFFSET:     -0x88     -136  >>-128

0x1aeb0:	jmp 0x1aee3                         #		    |c|ontinue;
0x1aeb2:	cmp dword ptr [rbp - 0x8c], 0       #		if |(|!need_update)
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1aeb9:	jne 0x1aed9                         
0x1aebb:	mov rax, qword ptr [rbp - 0xa8]     #		    panel_update_entry(this, this|-|>current_entry - 1);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aec2:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1aec5:	lea edx, [rax - 1]                  #		    |p|anel_update_entry(this, this->current_entry - 1);
MEMORY OFFSET:     -0x1     -1  >>7

0x1aec8:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aecf:	mov esi, edx                        
0x1aed1:	mov rdi, rax                        
0x1aed4:	call 0x14445                        
0x1aed9:	mov dword ptr [rbp - 0x8c], 1       #		need_update |=| 1;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1aee3:	mov eax, dword ptr [rbp - 0xb0]     #	    while (repeat_count|-|-)
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1aee9:	lea edx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1aeec:	mov dword ptr [rbp - 0xb0], edx     
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1aef2:	test eax, eax                       #	    while (|r|epeat_count--)
0x1aef4:	jne 0x1ae00                         
0x1aefa:	jmp 0x1aefd                         
0x1aefc:	nop                                 #		    |b|reak;
0x1aefd:	cmp dword ptr [rbp - 0x88], 0       #	    if |(|need_update_all)
MEMORY OFFSET:     -0x88     -136  >>-128

0x1af04:	je 0x1af1c                          
0x1af06:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1af0d:	mov rdi, rax                        
0x1af10:	mov eax, 0                          
0x1af15:	call 0x13223                        
0x1af1a:	jmp 0x1af40                         
0x1af1c:	cmp dword ptr [rbp - 0x8c], 0       #		if |(|need_update)
MEMORY OFFSET:     -0x8c     -140  >>-132

0x1af23:	je 0x1af40                          
0x1af25:	mov rax, qword ptr [rbp - 0xa8]     #		    |p|anel_update_entry(this, this->current_entry);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1af2c:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1af2f:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1af36:	mov esi, edx                        
0x1af38:	mov rdi, rax                        
0x1af3b:	call 0x14445                        
0x1af40:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1af47:	mov rdi, rax                        
0x1af4a:	mov eax, 0                          
0x1af4f:	call 0x1395a                        
0x1af54:	jmp 0x1c33e                         #	    |b|reak;
0x1af59:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>current_entry == 0)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1af60:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1af63:	test eax, eax                       #	    if |(|this->current_entry == 0)
0x1af65:	je 0x1c32e                          
0x1af6b:	mov rax, qword ptr [rbp - 0xa8]     #	    old_current_entry |=| this->current_entry;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1af72:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1af75:	mov dword ptr [rbp - 0x74], eax     
MEMORY OFFSET:     -0x74     -116  >>-108

0x1af78:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>current_entry < this->lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1af7f:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1af82:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this->current_entry < this|-|>lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1af89:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1af8c:	sub eax, 2                          #	    if (this->current_entry < this->lines |-| 2)
0x1af8f:	cmp edx, eax                        #	    if |(|this->current_entry < this->lines - 2)
0x1af91:	jge 0x1afae                         
0x1af93:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_set_current_entry(this, 0);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1af9a:	mov esi, 0                          
0x1af9f:	mov rdi, rax                        
0x1afa2:	mov eax, 0                          
0x1afa7:	call 0x112b7                        
0x1afac:	jmp 0x1afdd                         
0x1afae:	mov rax, qword ptr [rbp - 0xa8]     #					this|-|>current_entry-(this->lines-2));
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1afb5:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1afb8:	mov rax, qword ptr [rbp - 0xa8]     #					this->current_entry-(this|-|>lines-2));
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1afbf:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1afc2:	sub eax, 2                          #					this->current_entry-(this->lines|-|2));
0x1afc5:	sub edx, eax                        #		|p|anel_set_current_entry(this,
0x1afc7:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1afce:	mov esi, edx                        
0x1afd0:	mov rdi, rax                        
0x1afd3:	mov eax, 0                          
0x1afd8:	call 0x112b7                        
0x1afdd:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this->entries > this|-|>lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1afe4:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1afe7:	lea edx, [rax - 1]                  #	    if (this->entries |>| this->lines - 2)
MEMORY OFFSET:     -0x1     -1  >>7

0x1afea:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>entries > this->lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1aff1:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1aff4:	cmp edx, eax                        #	    if |(|this->entries > this->lines - 2)
0x1aff6:	jg 0x1b00e                          
0x1aff8:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1afff:	mov rdi, rax                        
0x1b002:	mov eax, 0                          
0x1b007:	call 0x13223                        
0x1b00c:	jmp 0x1b03d                         
0x1b00e:	mov edx, dword ptr [rbp - 0x74]     #		|p|anel_update_entry(this, old_current_entry);
MEMORY OFFSET:     -0x74     -116  >>-108

0x1b011:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b018:	mov esi, edx                        
0x1b01a:	mov rdi, rax                        
0x1b01d:	call 0x14445                        
0x1b022:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_entry(this, this->current_entry);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b029:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b02c:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b033:	mov esi, edx                        
0x1b035:	mov rdi, rax                        
0x1b038:	call 0x14445                        
0x1b03d:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b044:	mov rdi, rax                        
0x1b047:	mov eax, 0                          
0x1b04c:	call 0x1395a                        
0x1b051:	jmp 0x1c33e                         #	    |b|reak;
0x1b056:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>current_entry == this->entries - 1)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b05d:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b060:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this->current_entry == this|-|>entries - 1)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b067:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b06a:	sub eax, 1                          #	    if (this->current_entry == this->entries |-| 1)
0x1b06d:	cmp edx, eax                        #	    if |(|this->current_entry == this->entries - 1)
0x1b06f:	je 0x1c331                          
0x1b075:	mov rax, qword ptr [rbp - 0xa8]     #	    old_current_entry |=| this->current_entry;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b07c:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b07f:	mov dword ptr [rbp - 0x74], eax     
MEMORY OFFSET:     -0x74     -116  >>-108

0x1b082:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>entries - 1 - this->first_on_screen < this->lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b089:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b08c:	lea edx, [rax - 1]                  #	    if (this->entries |-| 1 - this->first_on_screen < this->lines - 2)
MEMORY OFFSET:     -0x1     -1  >>7

0x1b08f:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this->entries - 1 - this|-|>first_on_screen < this->lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b096:	mov eax, dword ptr [rax + 0x2c]     
MEMORY OFFSET:     0x2c     44  >>52

0x1b099:	sub edx, eax                        #	    if (this->entries - 1 |-| this->first_on_screen < this->lines - 2)
0x1b09b:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this->entries - 1 - this->first_on_screen < this|-|>lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b0a2:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1b0a5:	sub eax, 2                          #	    if (this->entries - 1 - this->first_on_screen < this->lines |-| 2)
0x1b0a8:	cmp edx, eax                        #	    if |(|this->entries - 1 - this->first_on_screen < this->lines - 2)
0x1b0aa:	jge 0x1b0d1                         
0x1b0ac:	mov rax, qword ptr [rbp - 0xa8]     #		panel_set_current_entry(this, this|-|>entries - 1);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b0b3:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b0b6:	lea edx, [rax - 1]                  #		|p|anel_set_current_entry(this, this->entries - 1);
MEMORY OFFSET:     -0x1     -1  >>7

0x1b0b9:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b0c0:	mov esi, edx                        
0x1b0c2:	mov rdi, rax                        
0x1b0c5:	mov eax, 0                          
0x1b0ca:	call 0x112b7                        
0x1b0cf:	jmp 0x1b14f                         
0x1b0d1:	mov rax, qword ptr [rbp - 0xa8]     #		if (this|-|>entries - 1 - this->current_entry < this->lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b0d8:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b0db:	lea edx, [rax - 1]                  #		if (this->entries |-| 1 - this->current_entry < this->lines - 2)
MEMORY OFFSET:     -0x1     -1  >>7

0x1b0de:	mov rax, qword ptr [rbp - 0xa8]     #		if (this->entries - 1 - this|-|>current_entry < this->lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b0e5:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b0e8:	sub edx, eax                        #		if (this->entries - 1 |-| this->current_entry < this->lines - 2)
0x1b0ea:	mov rax, qword ptr [rbp - 0xa8]     #		if (this->entries - 1 - this->current_entry < this|-|>lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b0f1:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1b0f4:	sub eax, 2                          #		if (this->entries - 1 - this->current_entry < this->lines |-| 2)
0x1b0f7:	cmp edx, eax                        #		if |(|this->entries - 1 - this->current_entry < this->lines - 2)
0x1b0f9:	jge 0x1b120                         
0x1b0fb:	mov rax, qword ptr [rbp - 0xa8]     #		    panel_set_current_entry(this, this|-|>entries - 1);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b102:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b105:	lea edx, [rax - 1]                  #		    |p|anel_set_current_entry(this, this->entries - 1);
MEMORY OFFSET:     -0x1     -1  >>7

0x1b108:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b10f:	mov esi, edx                        
0x1b111:	mov rdi, rax                        
0x1b114:	mov eax, 0                          
0x1b119:	call 0x112b7                        
0x1b11e:	jmp 0x1b14f                         
0x1b120:	mov rax, qword ptr [rbp - 0xa8]     #					    this|-|>current_entry+this->lines-2);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b127:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b12a:	mov rax, qword ptr [rbp - 0xa8]     #					    this->current_entry+this|-|>lines-2);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b131:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1b134:	add eax, edx                        #					    this->current_entry|+|this->lines-2);
0x1b136:	lea edx, [rax - 2]                  #		    |p|anel_set_current_entry(this,
MEMORY OFFSET:     -0x2     -2  >>6

0x1b139:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b140:	mov esi, edx                        
0x1b142:	mov rdi, rax                        
0x1b145:	mov eax, 0                          
0x1b14a:	call 0x112b7                        
0x1b14f:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this->entries > this|-|>lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b156:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1b159:	lea edx, [rax - 1]                  #	    if (this->entries |>| this->lines - 2)
MEMORY OFFSET:     -0x1     -1  >>7

0x1b15c:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>entries > this->lines - 2)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b163:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b166:	cmp edx, eax                        #	    if |(|this->entries > this->lines - 2)
0x1b168:	jg 0x1b180                          
0x1b16a:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b171:	mov rdi, rax                        
0x1b174:	mov eax, 0                          
0x1b179:	call 0x13223                        
0x1b17e:	jmp 0x1b1af                         
0x1b180:	mov edx, dword ptr [rbp - 0x74]     #		|p|anel_update_entry(this, old_current_entry);
MEMORY OFFSET:     -0x74     -116  >>-108

0x1b183:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b18a:	mov esi, edx                        
0x1b18c:	mov rdi, rax                        
0x1b18f:	call 0x14445                        
0x1b194:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_entry(this, this->current_entry);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b19b:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b19e:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b1a5:	mov esi, edx                        
0x1b1a7:	mov rdi, rax                        
0x1b1aa:	call 0x14445                        
0x1b1af:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b1b6:	mov rdi, rax                        
0x1b1b9:	mov eax, 0                          
0x1b1be:	call 0x1395a                        
0x1b1c3:	jmp 0x1c33e                         #	    |b|reak;
0x1b1c8:	mov rax, qword ptr [rbp - 0xa8]     #	    if (|r|ootdir())
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b1cf:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1b1d3:	movzx eax, byte ptr [rax]           
0x1b1d6:	cmp al, 0x2f                        #	    if |(|rootdir())
0x1b1d8:	jne 0x1b1f4                         
0x1b1da:	mov rax, qword ptr [rbp - 0xa8]     #	    if (|r|ootdir())
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b1e1:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1b1e5:	add rax, 1                          
0x1b1e9:	movzx eax, byte ptr [rax]           
0x1b1ec:	test al, al                         
0x1b1ee:	je 0x1c334                          
0x1b1f4:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>current_entry != 0)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b1fb:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b1fe:	test eax, eax                       #	    if |(|this->current_entry != 0)
0x1b200:	je 0x1b21b                          
0x1b202:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_set_current_entry(this, 0);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b209:	mov esi, 0                          
0x1b20e:	mov rdi, rax                        
0x1b211:	mov eax, 0                          
0x1b216:	call 0x112b7                        
0x1b21b:	mov rdx, qword ptr [rbp - 0xb8]     #	    return |p|anel_act_ENTER(this, other);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b222:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b229:	mov rsi, rdx                        
0x1b22c:	mov rdi, rax                        
0x1b22f:	mov eax, 0                          
0x1b234:	call 0x16acd                        
0x1b239:	jmp 0x1c343                         
0x1b23e:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>current_entry != 0)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b245:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b248:	test eax, eax                       #	    if |(|this->current_entry != 0)
0x1b24a:	je 0x1c337                          
0x1b250:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_set_current_entry(this, 0);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b257:	mov esi, 0                          
0x1b25c:	mov rdi, rax                        
0x1b25f:	mov eax, 0                          
0x1b264:	call 0x112b7                        
0x1b269:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b270:	mov rdi, rax                        
0x1b273:	mov eax, 0                          
0x1b278:	call 0x13223                        
0x1b27d:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b284:	mov rdi, rax                        
0x1b287:	mov eax, 0                          
0x1b28c:	call 0x1395a                        
0x1b291:	jmp 0x1c337                         #	    |b|reak;
0x1b296:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>current_entry != this->entries - 1)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b29d:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b2a0:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this->current_entry != this|-|>entries - 1)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b2a7:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b2aa:	sub eax, 1                          #	    if (this->current_entry != this->entries |-| 1)
0x1b2ad:	cmp edx, eax                        #	    if |(|this->current_entry != this->entries - 1)
0x1b2af:	je 0x1c33a                          
0x1b2b5:	mov rax, qword ptr [rbp - 0xa8]     #		panel_set_current_entry(this, this|-|>entries - 1);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b2bc:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b2bf:	lea edx, [rax - 1]                  #		|p|anel_set_current_entry(this, this->entries - 1);
MEMORY OFFSET:     -0x1     -1  >>7

0x1b2c2:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b2c9:	mov esi, edx                        
0x1b2cb:	mov rdi, rax                        
0x1b2ce:	mov eax, 0                          
0x1b2d3:	call 0x112b7                        
0x1b2d8:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b2df:	mov rdi, rax                        
0x1b2e2:	mov eax, 0                          
0x1b2e7:	call 0x13223                        
0x1b2ec:	mov rax, qword ptr [rbp - 0xa8]     #		|p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b2f3:	mov rdi, rax                        
0x1b2f6:	mov eax, 0                          
0x1b2fb:	call 0x1395a                        
0x1b300:	jmp 0x1c33a                         #	    |b|reak;
0x1b305:	mov rdx, qword ptr [rbp - 0xc0]     #	    |p|anel_act_CHDIR(this, other, (char *)aux_info);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1b30c:	mov rcx, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b313:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b31a:	mov rsi, rcx                        
0x1b31d:	mov rdi, rax                        
0x1b320:	mov eax, 0                          
0x1b325:	call 0x18537                        
0x1b32a:	jmp 0x1c33e                         #	    |b|reak;
0x1b32f:	mov rax, qword ptr [rbp - 0xa8]     #	    this->display_mode = (this|-|>display_mode + 1) % FILE_DISPLAY_MODES;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b336:	mov eax, dword ptr [rax + 0x80]     
MEMORY OFFSET:     0x80     128  >>136

0x1b33c:	lea ecx, [rax + 1]                  #	    this->display_mode = (this->display_mode |+| 1) % FILE_DISPLAY_MODES;
MEMORY OFFSET:     0x1     1  >>9

0x1b33f:	movsxd rax, ecx                     #	    this->display_mode = (this->display_mode + 1) |%| FILE_DISPLAY_MODES;
0x1b342:	imul rax, rax, 0x2aaaaaab           
0x1b349:	shr rax, 0x20                       
0x1b34d:	mov esi, ecx                        
0x1b34f:	sar esi, 0x1f                       
0x1b352:	mov edx, eax                        
0x1b354:	sub edx, esi                        
0x1b356:	mov eax, edx                        
0x1b358:	add eax, eax                        
0x1b35a:	add eax, edx                        
0x1b35c:	add eax, eax                        
0x1b35e:	sub ecx, eax                        
0x1b360:	mov edx, ecx                        
0x1b362:	mov rax, qword ptr [rbp - 0xa8]     #	    this->display_mode |=| (this->display_mode + 1) % FILE_DISPLAY_MODES;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b369:	mov dword ptr [rax + 0x80], edx     
MEMORY OFFSET:     0x80     128  >>136

0x1b36f:	jmp 0x1b387                         #	    |g|oto all_display_modes;
0x1b371:	mov eax, dword ptr [rbp - 0xac]     #	    this->display_mode = action |-| act_ENABLE_OWNER_GROUP;
MEMORY OFFSET:     -0xac     -172  >>-164

0x1b377:	lea edx, [rax - 9]                  
MEMORY OFFSET:     -0x9     -9  >>-1

0x1b37a:	mov rax, qword ptr [rbp - 0xa8]     #	    this->display_mode |=| action - act_ENABLE_OWNER_GROUP;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b381:	mov dword ptr [rax + 0x80], edx     
MEMORY OFFSET:     0x80     128  >>136

0x1b387:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>columns < 80 && this->display_mode == ENABLE_ALL)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b38e:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x1b391:	cmp eax, 0x4f                       #	    if |(|this->columns < 80 && this->display_mode == ENABLE_ALL)
0x1b394:	jg 0x1b3b9                          
0x1b396:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this->columns < 80 && this|-|>display_mode == ENABLE_ALL)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b39d:	mov eax, dword ptr [rax + 0x80]     
MEMORY OFFSET:     0x80     128  >>136

0x1b3a3:	cmp eax, 5                          #	    if (this->columns < 80 |&|& this->display_mode == ENABLE_ALL)
0x1b3a6:	jne 0x1b3b9                         
0x1b3a8:	mov rax, qword ptr [rbp - 0xa8]     #		this->display_mode |=| ENABLE_OWNER_GROUP;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b3af:	mov dword ptr [rax + 0x80], 0       
MEMORY OFFSET:     0x80     128  >>136

0x1b3b9:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b3c0:	mov rdi, rax                        
0x1b3c3:	mov eax, 0                          
0x1b3c8:	call 0x13223                        
0x1b3cd:	jmp 0x1c33e                         #	    |b|reak;
0x1b3d2:	mov rax, qword ptr [rbp - 0xa8]     #	    this->sort_method = (this|-|>sort_method + 1) % FILE_SORT_METHODS;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b3d9:	mov eax, dword ptr [rax + 0x84]     
MEMORY OFFSET:     0x84     132  >>140

0x1b3df:	lea edx, [rax + 1]                  #	    this->sort_method = (this->sort_method |+| 1) % FILE_SORT_METHODS;
MEMORY OFFSET:     0x1     1  >>9

0x1b3e2:	movsxd rax, edx                     #	    this->sort_method = (this->sort_method + 1) |%| FILE_SORT_METHODS;
0x1b3e5:	imul rax, rax, 0x38e38e39           
0x1b3ec:	shr rax, 0x20                       
0x1b3f0:	sar eax, 1                          
0x1b3f2:	mov ecx, edx                        
0x1b3f4:	sar ecx, 0x1f                       
0x1b3f7:	sub eax, ecx                        
0x1b3f9:	mov ecx, eax                        
0x1b3fb:	shl ecx, 3                          
0x1b3fe:	add ecx, eax                        
0x1b400:	mov eax, edx                        
0x1b402:	sub eax, ecx                        
0x1b404:	mov rdx, qword ptr [rbp - 0xa8]     #	    this->sort_method |=| (this->sort_method + 1) % FILE_SORT_METHODS;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b40b:	mov dword ptr [rdx + 0x84], eax     
MEMORY OFFSET:     0x84     132  >>140

0x1b411:	jmp 0x1b429                         #	    |g|oto all_sort_methodes;
0x1b413:	mov eax, dword ptr [rbp - 0xac]     #	    this->sort_method = action |-| act_SORT_BY_NAME;
MEMORY OFFSET:     -0xac     -172  >>-164

0x1b419:	lea edx, [rax - 0x10]               
MEMORY OFFSET:     -0x10     -16  >>-8

0x1b41c:	mov rax, qword ptr [rbp - 0xa8]     #	    this->sort_method |=| action - act_SORT_BY_NAME;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b423:	mov dword ptr [rax + 0x84], edx     
MEMORY OFFSET:     0x84     132  >>140

0x1b429:	mov rax, qword ptr [rbp - 0xa8]     #	    CurrentSortMethod = this|-|>sort_method;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b430:	mov eax, dword ptr [rax + 0x84]     
MEMORY OFFSET:     0x84     132  >>140

0x1b436:	mov dword ptr [rip + 0x161b8], eax  #	    CurrentSortMethod |=| this->sort_method;
MEMORY OFFSET:     0x161b8     90552  >>90560

0x1b43c:	mov rax, qword ptr [rbp - 0xa8]     #	    previous = this|-|>dir_entry[this->current_entry].name;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b443:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b447:	mov rax, qword ptr [rbp - 0xa8]     #	    previous = this->dir_entry[this|-|>current_entry].name;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b44e:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b451:	movsxd rdx, eax                     
0x1b454:	mov rax, rdx                        #	    previous = this->dir_entry|[|this->current_entry].name;
0x1b457:	shl rax, 2                          
0x1b45b:	add rax, rdx                        
0x1b45e:	shl rax, 4                          
0x1b462:	add rax, rcx                        
0x1b465:	mov rax, qword ptr [rax]            #	    previous |=| this->dir_entry[this->current_entry].name;
0x1b468:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1b46c:	mov rax, qword ptr [rbp - 0xa8]     #	    if (|r|ootdir())
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b473:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1b477:	movzx eax, byte ptr [rax]           
0x1b47a:	cmp al, 0x2f                        #	    if |(|rootdir())
0x1b47c:	jne 0x1b4c5                         
0x1b47e:	mov rax, qword ptr [rbp - 0xa8]     #	    if (|r|ootdir())
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b485:	mov rax, qword ptr [rax + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x1b489:	add rax, 1                          
0x1b48d:	movzx eax, byte ptr [rax]           
0x1b490:	test al, al                         
0x1b492:	jne 0x1b4c5                         
0x1b494:	mov rax, qword ptr [rbp - 0xa8]     #		qsort(this->dir_entry, this|-|>entries,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b49b:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b49e:	movsxd rsi, eax                     #		|q|sort(this->dir_entry, this->entries,
0x1b4a1:	mov rax, qword ptr [rbp - 0xa8]     #		qsort(this|-|>dir_entry, this->entries,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b4a8:	mov rax, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b4ac:	lea rdx, [rip - 0xa6d5]             #		|q|sort(this->dir_entry, this->entries,
MEMORY OFFSET:     -0xa6d5     -42709  >>-42701

0x1b4b3:	mov rcx, rdx                        
0x1b4b6:	mov edx, 0x50                       
0x1b4bb:	mov rdi, rax                        
0x1b4be:	call 0x48b0                         
0x1b4c3:	jmp 0x1b4fa                         
0x1b4c5:	mov rax, qword ptr [rbp - 0xa8]     #		qsort(this->dir_entry + 1, this|-|>entries - 1,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b4cc:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b4cf:	sub eax, 1                          #		qsort(this->dir_entry + 1, this->entries |-| 1,
0x1b4d2:	cdqe                                #		|q|sort(this->dir_entry + 1, this->entries - 1,
0x1b4d4:	mov rdx, qword ptr [rbp - 0xa8]     #		qsort(this|-|>dir_entry + 1, this->entries - 1,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b4db:	mov rdx, qword ptr [rdx + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b4df:	lea rdi, [rdx + 0x50]               #		qsort(this->dir_entry |+| 1, this->entries - 1,
MEMORY OFFSET:     0x50     80  >>88

0x1b4e3:	lea rdx, [rip - 0xa70c]             #		|q|sort(this->dir_entry + 1, this->entries - 1,
MEMORY OFFSET:     -0xa70c     -42764  >>-42756

0x1b4ea:	mov rcx, rdx                        
0x1b4ed:	mov edx, 0x50                       
0x1b4f2:	mov rsi, rax                        
0x1b4f5:	call 0x48b0                         
0x1b4fa:	mov dword ptr [rbp - 0x98], 0       #	    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b504:	jmp 0x1b53b                         #	    |f|or (entry = 0; entry < this->entries; entry++)
0x1b506:	mov rax, qword ptr [rbp - 0xa8]     #		if (previous == this|-|>dir_entry[entry].name)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b50d:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b511:	mov eax, dword ptr [rbp - 0x98]     #		if (previous == this->dir_entry|[|entry].name)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b517:	movsxd rdx, eax                     
0x1b51a:	mov rax, rdx                        
0x1b51d:	shl rax, 2                          
0x1b521:	add rax, rdx                        
0x1b524:	shl rax, 4                          
0x1b528:	add rax, rcx                        
0x1b52b:	mov rax, qword ptr [rax]            #		if (previous == this->dir_entry[entry]|.|name)
0x1b52e:	cmp qword ptr [rbp - 0x38], rax     #		if |(|previous == this->dir_entry[entry].name)
MEMORY OFFSET:     -0x38     -56  >>-48

0x1b532:	je 0x1b54f                          
0x1b534:	add dword ptr [rbp - 0x98], 1       #	    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b53b:	mov rax, qword ptr [rbp - 0xa8]     #	    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b542:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b545:	cmp dword ptr [rbp - 0x98], eax     #	    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b54b:	jl 0x1b506                          
0x1b54d:	jmp 0x1b550                         
0x1b54f:	nop                                 #		    |b|reak;
0x1b550:	mov edx, dword ptr [rbp - 0x98]     #	    |p|anel_set_current_entry(this, entry);
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b556:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b55d:	mov esi, edx                        
0x1b55f:	mov rdi, rax                        
0x1b562:	mov eax, 0                          
0x1b567:	call 0x112b7                        
0x1b56c:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b573:	mov rdi, rax                        
0x1b576:	mov eax, 0                          
0x1b57b:	call 0x13223                        
0x1b580:	jmp 0x1c33e                         #	    |b|reak;
0x1b585:	mov rax, qword ptr [rbp - 0xb8]     #	    |x|chg(&this->lines,   &other->lines);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b58c:	lea rdx, [rax + 0x60]               
MEMORY OFFSET:     0x60     96  >>104

0x1b590:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b597:	add rax, 0x60                       
0x1b59b:	mov rsi, rdx                        
0x1b59e:	mov rdi, rax                        
0x1b5a1:	mov eax, 0                          
0x1b5a6:	call 0x10883                        
0x1b5ab:	mov rax, qword ptr [rbp - 0xb8]     #	    |x|chg(&this->columns, &other->columns);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b5b2:	lea rdx, [rax + 0x64]               
MEMORY OFFSET:     0x64     100  >>108

0x1b5b6:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b5bd:	add rax, 0x64                       
0x1b5c1:	mov rsi, rdx                        
0x1b5c4:	mov rdi, rax                        
0x1b5c7:	mov eax, 0                          
0x1b5cc:	call 0x10883                        
0x1b5d1:	mov rax, qword ptr [rbp - 0xb8]     #	    |x|chg(&this->x,       &other->x);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b5d8:	lea rdx, [rax + 0x58]               
MEMORY OFFSET:     0x58     88  >>96

0x1b5dc:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b5e3:	add rax, 0x58                       
0x1b5e7:	mov rsi, rdx                        
0x1b5ea:	mov rdi, rax                        
0x1b5ed:	mov eax, 0                          
0x1b5f2:	call 0x10883                        
0x1b5f7:	mov rax, qword ptr [rbp - 0xb8]     #	    |x|chg(&this->y,       &other->y);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b5fe:	lea rdx, [rax + 0x5c]               
MEMORY OFFSET:     0x5c     92  >>100

0x1b602:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b609:	add rax, 0x5c                       
0x1b60d:	mov rsi, rdx                        
0x1b610:	mov rdi, rax                        
0x1b613:	mov eax, 0                          
0x1b618:	call 0x10883                        
0x1b61d:	mov rax, qword ptr [rbp - 0xa8]     #			 this->lines, this|-|>columns);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b624:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x1b627:	movsxd rdi, eax                     #	    |p|anel_resize(this, this->x, this->y,
0x1b62a:	mov rax, qword ptr [rbp - 0xa8]     #			 this|-|>lines, this->columns);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b631:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1b634:	movsxd rcx, eax                     #	    |p|anel_resize(this, this->x, this->y,
0x1b637:	mov rax, qword ptr [rbp - 0xa8]     #	    panel_resize(this, this->x, this|-|>y,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b63e:	mov eax, dword ptr [rax + 0x5c]     
MEMORY OFFSET:     0x5c     92  >>100

0x1b641:	movsxd rdx, eax                     #	    |p|anel_resize(this, this->x, this->y,
0x1b644:	mov rax, qword ptr [rbp - 0xa8]     #	    panel_resize(this, this|-|>x, this->y,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b64b:	mov eax, dword ptr [rax + 0x58]     
MEMORY OFFSET:     0x58     88  >>96

0x1b64e:	movsxd rsi, eax                     #	    |p|anel_resize(this, this->x, this->y,
0x1b651:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b658:	mov r8, rdi                         
0x1b65b:	mov rdi, rax                        
0x1b65e:	call 0x11348                        
0x1b663:	mov rax, qword ptr [rbp - 0xb8]     #			 other->lines, other|-|>columns);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b66a:	mov eax, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x1b66d:	movsxd rdi, eax                     #	    |p|anel_resize(other, other->x, other->y,
0x1b670:	mov rax, qword ptr [rbp - 0xb8]     #			 other|-|>lines, other->columns);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b677:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1b67a:	movsxd rcx, eax                     #	    |p|anel_resize(other, other->x, other->y,
0x1b67d:	mov rax, qword ptr [rbp - 0xb8]     #	    panel_resize(other, other->x, other|-|>y,
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b684:	mov eax, dword ptr [rax + 0x5c]     
MEMORY OFFSET:     0x5c     92  >>100

0x1b687:	movsxd rdx, eax                     #	    |p|anel_resize(other, other->x, other->y,
0x1b68a:	mov rax, qword ptr [rbp - 0xb8]     #	    panel_resize(other, other|-|>x, other->y,
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b691:	mov eax, dword ptr [rax + 0x58]     
MEMORY OFFSET:     0x58     88  >>96

0x1b694:	movsxd rsi, eax                     #	    |p|anel_resize(other, other->x, other->y,
0x1b697:	mov rax, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b69e:	mov r8, rdi                         
0x1b6a1:	mov rdi, rax                        
0x1b6a4:	call 0x11348                        
0x1b6a9:	jmp 0x1c33e                         #	    |b|reak;
0x1b6ae:	mov rax, qword ptr [rbp - 0xc0]     #	    safe_patterns = |p|anel_parse_patterns((char *)aux_info);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1b6b5:	mov rdi, rax                        
0x1b6b8:	mov eax, 0                          
0x1b6bd:	call 0x1a66e                        
0x1b6c2:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1b6c6:	mov rax, qword ptr [rbp - 0x40]     #	    for (patterns |=| safe_patterns; *patterns; patterns++)
MEMORY OFFSET:     -0x40     -64  >>-56

0x1b6ca:	mov qword ptr [rbp - 0x60], rax     
MEMORY OFFSET:     -0x60     -96  >>-88

0x1b6ce:	jmp 0x1b881                         #	    |f|or (patterns = safe_patterns; *patterns; patterns++)
0x1b6d3:	mov dword ptr [rbp - 0x98], 0       #		for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b6dd:	jmp 0x1b866                         #		|f|or (entry = 0; entry < this->entries; entry++)
0x1b6e2:	mov rax, qword ptr [rbp - 0xa8]     #		    if (this|-|>dir_entry[entry].type != DIR_ENTRY)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b6e9:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b6ed:	mov eax, dword ptr [rbp - 0x98]     #		    if (this->dir_entry|[|entry].type != DIR_ENTRY)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b6f3:	movsxd rdx, eax                     
0x1b6f6:	mov rax, rdx                        
0x1b6f9:	shl rax, 2                          
0x1b6fd:	add rax, rdx                        
0x1b700:	shl rax, 4                          
0x1b704:	add rax, rcx                        
0x1b707:	movzx eax, byte ptr [rax + 0x48]    #		    if (this->dir_entry[entry]|.|type != DIR_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x1b70b:	test al, al                         #		    if |(|this->dir_entry[entry].type != DIR_ENTRY)
0x1b70d:	je 0x1b85f                          
0x1b713:	mov dword ptr [rbp - 0x84], 1       #			int |f|nm_flags = FNM_PATHNAME;
MEMORY OFFSET:     -0x84     -132  >>-124

0x1b71d:	mov eax, dword ptr [rip + 0x15ed5]  #			if (LeadingDotMatch |=|= OFF)
MEMORY OFFSET:     0x15ed5     89813  >>89821

0x1b723:	test eax, eax                       #			if |(|LeadingDotMatch == OFF)
0x1b725:	jne 0x1b72e                         
0x1b727:	or dword ptr [rbp - 0x84], 4        #			    fnm_flags |||= FNM_PERIOD;
MEMORY OFFSET:     -0x84     -132  >>-124

0x1b72e:	mov rax, qword ptr [rbp - 0xa8]     #			if (fnmatch(*patterns, this|-|>dir_entry[entry].name,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b735:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b739:	mov eax, dword ptr [rbp - 0x98]     #			if (fnmatch(*patterns, this->dir_entry|[|entry].name,
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b73f:	movsxd rdx, eax                     
0x1b742:	mov rax, rdx                        
0x1b745:	shl rax, 2                          
0x1b749:	add rax, rdx                        
0x1b74c:	shl rax, 4                          
0x1b750:	add rax, rcx                        
0x1b753:	mov rcx, qword ptr [rax]            #			if (fnmatch(*patterns, this->dir_entry[entry]|.|name,
0x1b756:	mov rax, qword ptr [rbp - 0x60]     #			if (|f|nmatch(*patterns, this->dir_entry[entry].name,
MEMORY OFFSET:     -0x60     -96  >>-88

0x1b75a:	mov rax, qword ptr [rax]            
0x1b75d:	mov edx, dword ptr [rbp - 0x84]     
MEMORY OFFSET:     -0x84     -132  >>-124

0x1b763:	mov rsi, rcx                        
0x1b766:	mov rdi, rax                        
0x1b769:	call 0x4a00                         
0x1b76e:	test eax, eax                       #			if |(|fnmatch(*patterns, this->dir_entry[entry].name,
0x1b770:	jne 0x1b85f                         
0x1b776:	cmp dword ptr [rbp - 0xac], 0x24    #			    if |(|action == act_PATTERN_SELECT)
MEMORY OFFSET:     -0xac     -172  >>-164

0x1b77d:	jne 0x1b7f2                         
0x1b77f:	mov rax, qword ptr [rbp - 0xa8]     #				if (!this|-|>dir_entry[entry].selected)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b786:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b78a:	mov eax, dword ptr [rbp - 0x98]     #				if (!this->dir_entry|[|entry].selected)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b790:	movsxd rdx, eax                     
0x1b793:	mov rax, rdx                        
0x1b796:	shl rax, 2                          
0x1b79a:	add rax, rdx                        
0x1b79d:	shl rax, 4                          
0x1b7a1:	add rax, rcx                        
0x1b7a4:	movzx eax, byte ptr [rax + 0x49]    #				if (!this->dir_entry[entry]|.|selected)
MEMORY OFFSET:     0x49     73  >>81

0x1b7a8:	test al, al                         #				if |(|!this->dir_entry[entry].selected)
0x1b7aa:	jne 0x1b85f                         
0x1b7b0:	mov rax, qword ptr [rbp - 0xa8]     #				    this|-|>dir_entry[entry].selected = 1;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b7b7:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b7bb:	mov eax, dword ptr [rbp - 0x98]     #				    this->dir_entry|[|entry].selected = 1;
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b7c1:	movsxd rdx, eax                     
0x1b7c4:	mov rax, rdx                        
0x1b7c7:	shl rax, 2                          
0x1b7cb:	add rax, rdx                        
0x1b7ce:	shl rax, 4                          
0x1b7d2:	add rax, rcx                        
0x1b7d5:	mov byte ptr [rax + 0x49], 1        #				    this->dir_entry[entry].selected |=| 1;
MEMORY OFFSET:     0x49     73  >>81

0x1b7d9:	mov rax, qword ptr [rbp - 0xa8]     #				    this|-|>selected_entries++;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b7e0:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1b7e3:	lea edx, [rax + 1]                  #				    this->selected_entries|+|+;
MEMORY OFFSET:     0x1     1  >>9

0x1b7e6:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b7ed:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1b7f0:	jmp 0x1b85f                         
0x1b7f2:	mov rax, qword ptr [rbp - 0xa8]     #				if (this|-|>dir_entry[entry].selected)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b7f9:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b7fd:	mov eax, dword ptr [rbp - 0x98]     #				if (this->dir_entry|[|entry].selected)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b803:	movsxd rdx, eax                     
0x1b806:	mov rax, rdx                        
0x1b809:	shl rax, 2                          
0x1b80d:	add rax, rdx                        
0x1b810:	shl rax, 4                          
0x1b814:	add rax, rcx                        
0x1b817:	movzx eax, byte ptr [rax + 0x49]    #				if (this->dir_entry[entry]|.|selected)
MEMORY OFFSET:     0x49     73  >>81

0x1b81b:	test al, al                         #				if |(|this->dir_entry[entry].selected)
0x1b81d:	je 0x1b85f                          
0x1b81f:	mov rax, qword ptr [rbp - 0xa8]     #				    this|-|>dir_entry[entry].selected = 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b826:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1b82a:	mov eax, dword ptr [rbp - 0x98]     #				    this->dir_entry|[|entry].selected = 0;
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b830:	movsxd rdx, eax                     
0x1b833:	mov rax, rdx                        
0x1b836:	shl rax, 2                          
0x1b83a:	add rax, rdx                        
0x1b83d:	shl rax, 4                          
0x1b841:	add rax, rcx                        
0x1b844:	mov byte ptr [rax + 0x49], 0        #				    this->dir_entry[entry].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x1b848:	mov rax, qword ptr [rbp - 0xa8]     #				    this|-|>selected_entries--;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b84f:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1b852:	lea edx, [rax - 1]                  #				    this->selected_entries|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x1b855:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b85c:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1b85f:	add dword ptr [rbp - 0x98], 1       #		for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b866:	mov rax, qword ptr [rbp - 0xa8]     #		for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b86d:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1b870:	cmp dword ptr [rbp - 0x98], eax     #		for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1b876:	jl 0x1b6e2                          
0x1b87c:	add qword ptr [rbp - 0x60], 8       #	    for (patterns = safe_patterns; *patterns; patterns|+|+)
MEMORY OFFSET:     -0x60     -96  >>-88

0x1b881:	mov rax, qword ptr [rbp - 0x60]     #	    for (patterns = safe_patterns; |*|patterns; patterns++)
MEMORY OFFSET:     -0x60     -96  >>-88

0x1b885:	mov rax, qword ptr [rax]            
0x1b888:	test rax, rax                       
0x1b88b:	jne 0x1b6d3                         
0x1b891:	mov rax, qword ptr [rbp - 0x40]     #	    |p|anel_deallocate_patterns(safe_patterns);
MEMORY OFFSET:     -0x40     -64  >>-56

0x1b895:	mov rdi, rax                        
0x1b898:	mov eax, 0                          
0x1b89d:	call 0x1a84e                        
0x1b8a2:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b8a9:	mov rdi, rax                        
0x1b8ac:	mov eax, 0                          
0x1b8b1:	call 0x13223                        
0x1b8b6:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b8bd:	mov rdi, rax                        
0x1b8c0:	mov eax, 0                          
0x1b8c5:	call 0x1395a                        
0x1b8ca:	jmp 0x1c33e                         #	    |b|reak;
0x1b8cf:	mov rdx, qword ptr [rbp - 0xc0]     #	    |p|anel_act_REGET(this, aux_info);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1b8d6:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b8dd:	mov rsi, rdx                        
0x1b8e0:	mov rdi, rax                        
0x1b8e3:	mov eax, 0                          
0x1b8e8:	call 0x186d3                        
0x1b8ed:	jmp 0x1c33e                         #	    |b|reak;
0x1b8f2:	mov rax, qword ptr [rbp - 0xc0]     #	    new_scroll_step = |a|toi((char *)aux_info);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1b8f9:	mov rdi, rax                        
0x1b8fc:	call 0x4da0                         
0x1b901:	mov dword ptr [rbp - 0x78], eax     
MEMORY OFFSET:     -0x78     -120  >>-112

0x1b904:	cmp dword ptr [rbp - 0x78], 0       #	    if |(|new_scroll_step > 0 && new_scroll_step < this->lines - 1)
MEMORY OFFSET:     -0x78     -120  >>-112

0x1b908:	jle 0x1c33d                         
0x1b90e:	mov rax, qword ptr [rbp - 0xa8]     #	    if (new_scroll_step > 0 && new_scroll_step < this|-|>lines - 1)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b915:	mov eax, dword ptr [rax + 0x60]     
MEMORY OFFSET:     0x60     96  >>104

0x1b918:	sub eax, 1                          #	    if (new_scroll_step > 0 && new_scroll_step < this->lines |-| 1)
0x1b91b:	cmp dword ptr [rbp - 0x78], eax     #	    if (new_scroll_step > 0 |&|& new_scroll_step < this->lines - 1)
MEMORY OFFSET:     -0x78     -120  >>-112

0x1b91e:	jge 0x1c33d                         
0x1b924:	mov rax, qword ptr [rbp - 0xb8]     #		this->scroll_step = other->scroll_step |=| new_scroll_step;
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b92b:	mov edx, dword ptr [rbp - 0x78]     
MEMORY OFFSET:     -0x78     -120  >>-112

0x1b92e:	mov dword ptr [rax + 0x88], edx     
MEMORY OFFSET:     0x88     136  >>144

0x1b934:	mov rax, qword ptr [rbp - 0xb8]     #		this->scroll_step = other|-|>scroll_step = new_scroll_step;
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1b93b:	mov edx, dword ptr [rax + 0x88]     
MEMORY OFFSET:     0x88     136  >>144

0x1b941:	mov rax, qword ptr [rbp - 0xa8]     #		this->scroll_step |=| other->scroll_step = new_scroll_step;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b948:	mov dword ptr [rax + 0x88], edx     
MEMORY OFFSET:     0x88     136  >>144

0x1b94e:	jmp 0x1c33d                         #	    |b|reak;
0x1b953:	mov edi, 0x10                       #	    this->isearch_stack = |x|stack_init(sizeof(isearch_t));
0x1b958:	call 0x1f30c                        
0x1b95d:	mov rdx, qword ptr [rbp - 0xa8]     #	    this->isearch_stack |=| xstack_init(sizeof(isearch_t));
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b964:	mov qword ptr [rdx + 0x48], rax     
MEMORY OFFSET:     0x48     72  >>80

0x1b968:	mov rax, qword ptr [rbp - 0xa8]     #	    |S|TACK_PUSH(this->current_entry, 0);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b96f:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1b972:	mov dword ptr [rbp - 0x30], eax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1b975:	mov qword ptr [rbp - 0x28], 0       
MEMORY OFFSET:     -0x28     -40  >>-32

0x1b97d:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b984:	mov rax, qword ptr [rax + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x1b988:	lea rdx, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x1b98c:	mov rsi, rdx                        
0x1b98f:	mov rdi, rax                        
0x1b992:	call 0x1f381                        
0x1b997:	mov rax, qword ptr [rbp - 0xa8]     #	    this->isearch_length  |=| 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b99e:	mov qword ptr [rax + 0x40], 0       
MEMORY OFFSET:     0x40     64  >>72

0x1b9a6:	mov rax, qword ptr [rbp - 0xa8]     #	    this->wrapped_isearch |=| 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1b9ad:	mov byte ptr [rax + 0x6e], 0        
MEMORY OFFSET:     0x6e     110  >>118

0x1b9b1:	jmp 0x1c33e                         #	    |b|reak;
0x1b9b6:	mov rax, qword ptr [rbp - 0xc0]     #	    iai |=| (isearch_aux_t *)aux_info;
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1b9bd:	mov qword ptr [rbp - 0x68], rax     
MEMORY OFFSET:     -0x68     -104  >>-96

0x1b9c1:	mov rax, qword ptr [rbp - 0x68]     #	    len = strlen(iai|-|>string);
MEMORY OFFSET:     -0x68     -104  >>-96

0x1b9c5:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1b9c9:	mov rdi, rax                        #	    len = |s|trlen(iai->string);
0x1b9cc:	call 0x4960                         
0x1b9d1:	mov qword ptr [rbp - 0x70], rax     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1b9d5:	mov rax, qword ptr [rbp - 0x68]     #	    switch (iai|-|>action)
MEMORY OFFSET:     -0x68     -104  >>-96

0x1b9d9:	mov eax, dword ptr [rax]            
0x1b9db:	cmp eax, 3                          
0x1b9de:	je 0x1baa1                          
0x1b9e4:	cmp eax, 3                          
0x1b9e7:	jg 0x1bbaa                          
0x1b9ed:	cmp eax, 2                          
0x1b9f0:	je 0x1ba11                          
0x1b9f2:	cmp eax, 2                          
0x1b9f5:	jg 0x1bbaa                          
0x1b9fb:	test eax, eax                       
0x1b9fd:	je 0x1bbad                          
0x1ba03:	cmp eax, 1                          
0x1ba06:	je 0x1bc22                          
0x1ba0c:	jmp 0x1bbaa                         #		    |b|reak;
0x1ba11:	mov rax, qword ptr [rbp - 0xa8]     #		    if (!this|-|>wrapped_isearch)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ba18:	movzx eax, byte ptr [rax + 0x6e]    
MEMORY OFFSET:     0x6e     110  >>118

0x1ba1c:	test al, al                         #		    if |(|!this->wrapped_isearch)
0x1ba1e:	jne 0x1ba4f                         
0x1ba20:	mov rax, qword ptr [rbp - 0xa8]     #			|S|TACK_PUSH(this->current_entry, len);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ba27:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1ba2a:	mov dword ptr [rbp - 0x30], eax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1ba2d:	mov rax, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1ba31:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ba35:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ba3c:	mov rax, qword ptr [rax + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x1ba40:	lea rdx, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x1ba44:	mov rsi, rdx                        
0x1ba47:	mov rdi, rax                        
0x1ba4a:	call 0x1f381                        
0x1ba4f:	mov rax, qword ptr [rbp - 0xa8]     #						    this|-|>wrapped_isearch ?
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ba56:	movzx eax, byte ptr [rax + 0x6e]    
MEMORY OFFSET:     0x6e     110  >>118

0x1ba5a:	test al, al                         #		    result = |p|anel_isearch_backward(this, iai->string, len,
0x1ba5c:	je 0x1ba6d                          
0x1ba5e:	mov rax, qword ptr [rbp - 0xa8]     #						    this|-|>entries - 1 :
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ba65:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1ba68:	sub eax, 1                          #		    result = |p|anel_isearch_backward(this, iai->string, len,
0x1ba6b:	jmp 0x1ba7a                         
0x1ba6d:	mov rax, qword ptr [rbp - 0xa8]     #						    this|-|>current_entry - 1);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ba74:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1ba77:	sub eax, 1                          #		    result = |p|anel_isearch_backward(this, iai->string, len,
0x1ba7a:	mov rdx, qword ptr [rbp - 0x68]     #		    result = |p|anel_isearch_backward(this, iai->string, len,
MEMORY OFFSET:     -0x68     -104  >>-96

0x1ba7e:	mov rsi, qword ptr [rdx + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1ba82:	mov rdx, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1ba86:	mov rdi, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1ba8d:	mov ecx, eax                        
0x1ba8f:	mov eax, 0                          
0x1ba94:	call 0x1147e                        
0x1ba99:	mov dword ptr [rbp - 0x94], eax     
MEMORY OFFSET:     -0x94     -148  >>-140

0x1ba9f:	jmp 0x1bb00                         #		    |g|oto isearch_backward_action_increase;
0x1baa1:	mov rax, qword ptr [rbp - 0xa8]     #		    |S|TACK_PUSH(this->current_entry, len);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1baa8:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1baab:	mov dword ptr [rbp - 0x30], eax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1baae:	mov rax, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1bab2:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1bab6:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1babd:	mov rax, qword ptr [rax + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x1bac1:	lea rdx, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x1bac5:	mov rsi, rdx                        
0x1bac8:	mov rdi, rax                        
0x1bacb:	call 0x1f381                        
0x1bad0:	mov rax, qword ptr [rbp - 0xa8]     #		    result = |p|anel_isearch_backward(this, iai->string, len,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bad7:	mov ecx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bada:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x1bade:	mov rsi, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1bae2:	mov rdx, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1bae6:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1baed:	mov rdi, rax                        
0x1baf0:	mov eax, 0                          
0x1baf5:	call 0x1147e                        
0x1bafa:	mov dword ptr [rbp - 0x94], eax     
MEMORY OFFSET:     -0x94     -148  >>-140

0x1bb00:	cmp dword ptr [rbp - 0x94], -1      #		    if |(|result == -1)
MEMORY OFFSET:     -0x94     -148  >>-140

0x1bb07:	jne 0x1bb18                         
0x1bb09:	mov rax, qword ptr [rbp - 0x68]     #			iai->action |=| IL_ISEARCH_ACTION_FAILED;
MEMORY OFFSET:     -0x68     -104  >>-96

0x1bb0d:	mov dword ptr [rax], 0xffffffff     
0x1bb13:	jmp 0x1bbae                         #			|b|reak;
0x1bb18:	mov rax, qword ptr [rbp - 0xa8]     #			this->isearch_length |=| len;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bb1f:	mov rdx, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1bb23:	mov qword ptr [rax + 0x40], rdx     
MEMORY OFFSET:     0x40     64  >>72

0x1bb27:	mov rax, qword ptr [rbp - 0xa8]     #		    if (this|-|>wrapped_isearch)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bb2e:	movzx eax, byte ptr [rax + 0x6e]    
MEMORY OFFSET:     0x6e     110  >>118

0x1bb32:	test al, al                         #		    if |(|this->wrapped_isearch)
0x1bb34:	je 0x1bb73                          
0x1bb36:	mov edx, dword ptr [rbp - 0x94]     #			|p|anel_set_current_entry(this, result);
MEMORY OFFSET:     -0x94     -148  >>-140

0x1bb3c:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bb43:	mov esi, edx                        
0x1bb45:	mov rdi, rax                        
0x1bb48:	mov eax, 0                          
0x1bb4d:	call 0x112b7                        
0x1bb52:	mov rax, qword ptr [rbp - 0xa8]     #			|p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bb59:	mov rdi, rax                        
0x1bb5c:	mov eax, 0                          
0x1bb61:	call 0x13223                        
0x1bb66:	mov rax, qword ptr [rbp - 0xa8]     #			this->wrapped_isearch |=| 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bb6d:	mov byte ptr [rax + 0x6e], 0        
MEMORY OFFSET:     0x6e     110  >>118

0x1bb71:	jmp 0x1bbae                         #		    |b|reak;
0x1bb73:	mov rax, qword ptr [rbp - 0xa8]     #				     this|-|>current_entry - result);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bb7a:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bb7d:	sub eax, dword ptr [rbp - 0x94]     #			|p|anel_action(this, act_UP, other, (void *)NULL,
MEMORY OFFSET:     -0x94     -148  >>-140

0x1bb83:	mov ecx, eax                        
0x1bb85:	mov rdx, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1bb8c:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bb93:	mov r8d, ecx                        
0x1bb96:	mov ecx, 0                          
0x1bb9b:	mov esi, 0x1b                       
0x1bba0:	mov rdi, rax                        
0x1bba3:	call 0x1a89a                        
0x1bba8:	jmp 0x1bbae                         #		    |b|reak;
0x1bbaa:	nop                                 #		    |b|reak;
0x1bbab:	jmp 0x1bbae                         
0x1bbad:	nop                                 #		    |b|reak;
0x1bbae:	mov rax, qword ptr [rbp - 0xa8]     #	    iai->length = this|-|>isearch_length;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bbb5:	mov rdx, qword ptr [rax + 0x40]     
MEMORY OFFSET:     0x40     64  >>72

0x1bbb9:	mov rax, qword ptr [rbp - 0x68]     #	    iai->length |=| this->isearch_length;
MEMORY OFFSET:     -0x68     -104  >>-96

0x1bbbd:	mov qword ptr [rax + 0x10], rdx     
MEMORY OFFSET:     0x10     16  >>24

0x1bbc1:	jmp 0x1c33e                         #	    |b|reak;
0x1bbc6:	mov rax, qword ptr [rbp - 0xc0]     #	    iai |=| (isearch_aux_t *)aux_info;
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1bbcd:	mov qword ptr [rbp - 0x68], rax     
MEMORY OFFSET:     -0x68     -104  >>-96

0x1bbd1:	mov rax, qword ptr [rbp - 0x68]     #	    len = strlen(iai|-|>string);
MEMORY OFFSET:     -0x68     -104  >>-96

0x1bbd5:	mov rax, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1bbd9:	mov rdi, rax                        #	    len = |s|trlen(iai->string);
0x1bbdc:	call 0x4960                         
0x1bbe1:	mov qword ptr [rbp - 0x70], rax     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1bbe5:	mov rax, qword ptr [rbp - 0x68]     #	    switch (iai|-|>action)
MEMORY OFFSET:     -0x68     -104  >>-96

0x1bbe9:	mov eax, dword ptr [rax]            
0x1bbeb:	cmp eax, 3                          
0x1bbee:	je 0x1bdb0                          
0x1bbf4:	cmp eax, 3                          
0x1bbf7:	jg 0x1bebb                          
0x1bbfd:	cmp eax, 2                          
0x1bc00:	je 0x1bd27                          
0x1bc06:	cmp eax, 2                          
0x1bc09:	jg 0x1bebb                          
0x1bc0f:	test eax, eax                       
0x1bc11:	je 0x1bebe                          
0x1bc17:	cmp eax, 1                          
0x1bc1a:	jne 0x1bebb                         
0x1bc20:	jmp 0x1bc23                         
0x1bc22:	nop                                 #		    |g|oto isearch_action_decrease;
0x1bc23:	mov rax, qword ptr [rbp - 0xa8]     #			|S|TACK_POP(prev_entry, prev_length);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bc2a:	mov rax, qword ptr [rax + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x1bc2e:	lea rdx, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x1bc32:	mov rsi, rdx                        
0x1bc35:	mov rdi, rax                        
0x1bc38:	call 0x1f410                        
0x1bc3d:	mov eax, dword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1bc40:	mov dword ptr [rbp - 0x7c], eax     
MEMORY OFFSET:     -0x7c     -124  >>-116

0x1bc43:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1bc47:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1bc4b:	mov rax, qword ptr [rbp - 0xa8]     #			if (this|-|>isearch_length != len)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bc52:	mov rax, qword ptr [rax + 0x40]     
MEMORY OFFSET:     0x40     64  >>72

0x1bc56:	cmp qword ptr [rbp - 0x70], rax     #			if |(|this->isearch_length != len)
MEMORY OFFSET:     -0x70     -112  >>-104

0x1bc5a:	jne 0x1bec1                         
0x1bc60:	mov rax, qword ptr [rbp - 0xa8]     #			if (this|-|>current_entry < prev_entry)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bc67:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bc6a:	cmp dword ptr [rbp - 0x7c], eax     #			if |(|this->current_entry < prev_entry)
MEMORY OFFSET:     -0x7c     -124  >>-116

0x1bc6d:	jle 0x1bca5                         
0x1bc6f:	mov rax, qword ptr [rbp - 0xa8]     #					     prev_entry - this|-|>current_entry);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bc76:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bc79:	mov eax, dword ptr [rbp - 0x7c]     #				|p|anel_action(this, act_DOWN, other,
MEMORY OFFSET:     -0x7c     -124  >>-116

0x1bc7c:	sub eax, edx                        
0x1bc7e:	mov ecx, eax                        
0x1bc80:	mov rdx, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1bc87:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bc8e:	mov r8d, ecx                        
0x1bc91:	mov ecx, 0                          
0x1bc96:	mov esi, 0x1c                       
0x1bc9b:	mov rdi, rax                        
0x1bc9e:	call 0x1a89a                        
0x1bca3:	jmp 0x1bce6                         
0x1bca5:	mov rax, qword ptr [rbp - 0xa8]     #			    if (this|-|>current_entry > prev_entry)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bcac:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bcaf:	cmp dword ptr [rbp - 0x7c], eax     #			    if |(|this->current_entry > prev_entry)
MEMORY OFFSET:     -0x7c     -124  >>-116

0x1bcb2:	jge 0x1bce6                         
0x1bcb4:	mov rax, qword ptr [rbp - 0xa8]     #					     this|-|>current_entry - prev_entry);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bcbb:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bcbe:	sub eax, dword ptr [rbp - 0x7c]     #				|p|anel_action(this, act_UP, other, (void *)NULL,
MEMORY OFFSET:     -0x7c     -124  >>-116

0x1bcc1:	mov ecx, eax                        
0x1bcc3:	mov rdx, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1bcca:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bcd1:	mov r8d, ecx                        
0x1bcd4:	mov ecx, 0                          
0x1bcd9:	mov esi, 0x1b                       
0x1bcde:	mov rdi, rax                        
0x1bce1:	call 0x1a89a                        
0x1bce6:	mov rax, qword ptr [rbp - 0xa8]     #			|S|TACK_PREVIEW(prev_entry, prev_length);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bced:	mov rax, qword ptr [rax + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x1bcf1:	lea rcx, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x1bcf5:	mov edx, 1                          
0x1bcfa:	mov rsi, rcx                        
0x1bcfd:	mov rdi, rax                        
0x1bd00:	call 0x1f4b1                        
0x1bd05:	mov eax, dword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1bd08:	mov dword ptr [rbp - 0x7c], eax     
MEMORY OFFSET:     -0x7c     -124  >>-116

0x1bd0b:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1bd0f:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1bd13:	mov rax, qword ptr [rbp - 0xa8]     #			this->isearch_length |=| prev_length;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bd1a:	mov rdx, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1bd1e:	mov qword ptr [rax + 0x40], rdx     
MEMORY OFFSET:     0x40     64  >>72

0x1bd22:	jmp 0x1bec2                         #		    |b|reak;
0x1bd27:	mov rax, qword ptr [rbp - 0xa8]     #		    if (!this|-|>wrapped_isearch)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bd2e:	movzx eax, byte ptr [rax + 0x6e]    
MEMORY OFFSET:     0x6e     110  >>118

0x1bd32:	test al, al                         #		    if |(|!this->wrapped_isearch)
0x1bd34:	jne 0x1bd65                         
0x1bd36:	mov rax, qword ptr [rbp - 0xa8]     #			|S|TACK_PUSH(this->current_entry, len);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bd3d:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bd40:	mov dword ptr [rbp - 0x30], eax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1bd43:	mov rax, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1bd47:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1bd4b:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bd52:	mov rax, qword ptr [rax + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x1bd56:	lea rdx, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x1bd5a:	mov rsi, rdx                        
0x1bd5d:	mov rdi, rax                        
0x1bd60:	call 0x1f381                        
0x1bd65:	mov rax, qword ptr [rbp - 0xa8]     #						   this|-|>wrapped_isearch ?
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bd6c:	movzx eax, byte ptr [rax + 0x6e]    
MEMORY OFFSET:     0x6e     110  >>118

0x1bd70:	test al, al                         #		    result = |p|anel_isearch_forward(this, iai->string, len,
0x1bd72:	jne 0x1bd83                         
0x1bd74:	mov rax, qword ptr [rbp - 0xa8]     #						   this|-|>current_entry + 1);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bd7b:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bd7e:	lea ecx, [rax + 1]                  #		    result = |p|anel_isearch_forward(this, iai->string, len,
MEMORY OFFSET:     0x1     1  >>9

0x1bd81:	jmp 0x1bd88                         
0x1bd83:	mov ecx, 0                          #		    result = |p|anel_isearch_forward(this, iai->string, len,
0x1bd88:	mov rax, qword ptr [rbp - 0x68]     #		    result = |p|anel_isearch_forward(this, iai->string, len,
MEMORY OFFSET:     -0x68     -104  >>-96

0x1bd8c:	mov rsi, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1bd90:	mov rdx, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1bd94:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bd9b:	mov rdi, rax                        
0x1bd9e:	mov eax, 0                          
0x1bda3:	call 0x114f0                        
0x1bda8:	mov dword ptr [rbp - 0x94], eax     
MEMORY OFFSET:     -0x94     -148  >>-140

0x1bdae:	jmp 0x1be0f                         #		    |g|oto isearch_forward_action_increase;
0x1bdb0:	mov rax, qword ptr [rbp - 0xa8]     #		    |S|TACK_PUSH(this->current_entry, len);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bdb7:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bdba:	mov dword ptr [rbp - 0x30], eax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1bdbd:	mov rax, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1bdc1:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1bdc5:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bdcc:	mov rax, qword ptr [rax + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x1bdd0:	lea rdx, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x1bdd4:	mov rsi, rdx                        
0x1bdd7:	mov rdi, rax                        
0x1bdda:	call 0x1f381                        
0x1bddf:	mov rax, qword ptr [rbp - 0xa8]     #		    result = |p|anel_isearch_forward(this, iai->string, len,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bde6:	mov ecx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1bde9:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x1bded:	mov rsi, qword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1bdf1:	mov rdx, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1bdf5:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bdfc:	mov rdi, rax                        
0x1bdff:	mov eax, 0                          
0x1be04:	call 0x114f0                        
0x1be09:	mov dword ptr [rbp - 0x94], eax     
MEMORY OFFSET:     -0x94     -148  >>-140

0x1be0f:	cmp dword ptr [rbp - 0x94], -1      #		    if |(|result == -1)
MEMORY OFFSET:     -0x94     -148  >>-140

0x1be16:	jne 0x1be27                         
0x1be18:	mov rax, qword ptr [rbp - 0x68]     #			iai->action |=| IL_ISEARCH_ACTION_FAILED;
MEMORY OFFSET:     -0x68     -104  >>-96

0x1be1c:	mov dword ptr [rax], 0xffffffff     
0x1be22:	jmp 0x1bec2                         #			|b|reak;
0x1be27:	mov rax, qword ptr [rbp - 0xa8]     #			this->isearch_length |=| len;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1be2e:	mov rdx, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x1be32:	mov qword ptr [rax + 0x40], rdx     
MEMORY OFFSET:     0x40     64  >>72

0x1be36:	mov rax, qword ptr [rbp - 0xa8]     #		    if (this|-|>wrapped_isearch)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1be3d:	movzx eax, byte ptr [rax + 0x6e]    
MEMORY OFFSET:     0x6e     110  >>118

0x1be41:	test al, al                         #		    if |(|this->wrapped_isearch)
0x1be43:	je 0x1be82                          
0x1be45:	mov edx, dword ptr [rbp - 0x94]     #			|p|anel_set_current_entry(this, result);
MEMORY OFFSET:     -0x94     -148  >>-140

0x1be4b:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1be52:	mov esi, edx                        
0x1be54:	mov rdi, rax                        
0x1be57:	mov eax, 0                          
0x1be5c:	call 0x112b7                        
0x1be61:	mov rax, qword ptr [rbp - 0xa8]     #			|p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1be68:	mov rdi, rax                        
0x1be6b:	mov eax, 0                          
0x1be70:	call 0x13223                        
0x1be75:	mov rax, qword ptr [rbp - 0xa8]     #			this->wrapped_isearch |=| 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1be7c:	mov byte ptr [rax + 0x6e], 0        
MEMORY OFFSET:     0x6e     110  >>118

0x1be80:	jmp 0x1bec2                         #		    |b|reak;
0x1be82:	mov rax, qword ptr [rbp - 0xa8]     #				     result - this|-|>current_entry);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1be89:	mov edx, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1be8c:	mov eax, dword ptr [rbp - 0x94]     #			|p|anel_action(this, act_DOWN, other, (void *)NULL,
MEMORY OFFSET:     -0x94     -148  >>-140

0x1be92:	sub eax, edx                        
0x1be94:	mov ecx, eax                        
0x1be96:	mov rdx, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1be9d:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bea4:	mov r8d, ecx                        
0x1bea7:	mov ecx, 0                          
0x1beac:	mov esi, 0x1c                       
0x1beb1:	mov rdi, rax                        
0x1beb4:	call 0x1a89a                        
0x1beb9:	jmp 0x1bec2                         #		    |b|reak;
0x1bebb:	nop                                 #		    |b|reak;
0x1bebc:	jmp 0x1bec2                         
0x1bebe:	nop                                 #		    |b|reak;
0x1bebf:	jmp 0x1bec2                         
0x1bec1:	nop                                 #			    |b|reak;
0x1bec2:	mov rax, qword ptr [rbp - 0xa8]     #	    iai->length = this|-|>isearch_length;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bec9:	mov rdx, qword ptr [rax + 0x40]     
MEMORY OFFSET:     0x40     64  >>72

0x1becd:	mov rax, qword ptr [rbp - 0x68]     #	    iai->length |=| this->isearch_length;
MEMORY OFFSET:     -0x68     -104  >>-96

0x1bed1:	mov qword ptr [rax + 0x10], rdx     
MEMORY OFFSET:     0x10     16  >>24

0x1bed5:	jmp 0x1c33e                         #	    |b|reak;
0x1beda:	mov rax, qword ptr [rbp - 0xa8]     #	    |x|stack_end(this->isearch_stack);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bee1:	mov rax, qword ptr [rax + 0x48]     
MEMORY OFFSET:     0x48     72  >>80

0x1bee5:	mov rdi, rax                        
0x1bee8:	call 0x1f33e                        
0x1beed:	mov rax, qword ptr [rbp - 0xa8]     #	    this->isearch_stack |=| NULL;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bef4:	mov qword ptr [rax + 0x48], 0       
MEMORY OFFSET:     0x48     72  >>80

0x1befc:	jmp 0x1c33e                         #	    |b|reak;
0x1bf01:	mov rax, qword ptr [rbp - 0xc0]     #	    |p|anel_act_CMPDIR(this, other, *(int *)aux_info);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1bf08:	mov edx, dword ptr [rax]            
0x1bf0a:	mov rcx, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1bf11:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bf18:	mov rsi, rcx                        
0x1bf1b:	mov rdi, rax                        
0x1bf1e:	mov eax, 0                          
0x1bf23:	call 0x195e8                        
0x1bf28:	jmp 0x1c33e                         #	    |b|reak;
0x1bf2d:	mov rax, qword ptr [rbp - 0xc0]     #	    |p|anel_act_CASE(this, other, *(int *)aux_info);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1bf34:	mov edx, dword ptr [rax]            
0x1bf36:	mov rcx, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1bf3d:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bf44:	mov rsi, rcx                        
0x1bf47:	mov rdi, rax                        
0x1bf4a:	mov eax, 0                          
0x1bf4f:	call 0x19e25                        
0x1bf54:	jmp 0x1c33e                         #	    |b|reak;
0x1bf59:	mov rdx, qword ptr [rbp - 0xb8]     #	    |p|anel_act_COMPARE(this, other);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1bf60:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bf67:	mov rsi, rdx                        
0x1bf6a:	mov rdi, rax                        
0x1bf6d:	mov eax, 0                          
0x1bf72:	call 0x19075                        
0x1bf77:	jmp 0x1c33e                         #	    |b|reak;
0x1bf7c:	mov rax, qword ptr [rbp - 0xc0]     #                this, other, (off64_t)|a|toi((char *)aux_info));
MEMORY OFFSET:     -0xc0     -192  >>-184

0x1bf83:	mov rdi, rax                        
0x1bf86:	call 0x4da0                         
0x1bf8b:	movsxd rdx, eax                     #	    |p|anel_act_BIN_PACKING(
0x1bf8e:	mov rcx, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x1bf95:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bf9c:	mov rsi, rcx                        
0x1bf9f:	mov rdi, rax                        
0x1bfa2:	mov eax, 0                          
0x1bfa7:	call 0x1a02d                        
0x1bfac:	jmp 0x1c33e                         #	    |b|reak;
0x1bfb1:	mov rax, qword ptr [rbp - 0xa8]     #	    this->horizontal_offset |-|= repeat_count;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bfb8:	mov eax, dword ptr [rax + 0x74]     
MEMORY OFFSET:     0x74     116  >>124

0x1bfbb:	sub eax, dword ptr [rbp - 0xb0]     
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1bfc1:	mov edx, eax                        
0x1bfc3:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bfca:	mov dword ptr [rax + 0x74], edx     
MEMORY OFFSET:     0x74     116  >>124

0x1bfcd:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>horizontal_offset < 0)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bfd4:	mov eax, dword ptr [rax + 0x74]     
MEMORY OFFSET:     0x74     116  >>124

0x1bfd7:	test eax, eax                       #	    if |(|this->horizontal_offset < 0)
0x1bfd9:	jns 0x1bfe9                         
0x1bfdb:	mov rax, qword ptr [rbp - 0xa8]     #		this->horizontal_offset |=| 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bfe2:	mov dword ptr [rax + 0x74], 0       
MEMORY OFFSET:     0x74     116  >>124

0x1bfe9:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1bff0:	mov rdi, rax                        
0x1bff3:	call 0x14e6a                        
0x1bff8:	jmp 0x1c33e                         #	    |b|reak;
0x1bffd:	mov rax, qword ptr [rbp - 0xa8]     #	    this->horizontal_offset |+|= repeat_count;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c004:	mov edx, dword ptr [rax + 0x74]     
MEMORY OFFSET:     0x74     116  >>124

0x1c007:	mov eax, dword ptr [rbp - 0xb0]     
MEMORY OFFSET:     -0xb0     -176  >>-168

0x1c00d:	add edx, eax                        
0x1c00f:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c016:	mov dword ptr [rax + 0x74], edx     
MEMORY OFFSET:     0x74     116  >>124

0x1c019:	mov rax, qword ptr [rbp - 0xa8]     #	    max_offset = (this|-|>maxname + 1) -
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c020:	mov eax, dword ptr [rax + 0x30]     
MEMORY OFFSET:     0x30     48  >>56

0x1c023:	lea r12d, [rax + 1]                 #	    max_offset = (this->maxname |+| 1) -
MEMORY OFFSET:     0x1     1  >>9

0x1c027:	mov rax, qword ptr [rbp - 0xa8]     #		(this|-|>columns - panel_get_reserved_characters(this));
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c02e:	mov ebx, dword ptr [rax + 0x64]     
MEMORY OFFSET:     0x64     100  >>108

0x1c031:	mov rax, qword ptr [rbp - 0xa8]     #		(this->columns - |p|anel_get_reserved_characters(this));
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c038:	mov rdi, rax                        
0x1c03b:	mov eax, 0                          
0x1c040:	call 0x143eb                        
0x1c045:	sub ebx, eax                        #		(this->columns |-| panel_get_reserved_characters(this));
0x1c047:	mov edx, ebx                        
0x1c049:	mov eax, r12d                       #	    max_offset |=| (this->maxname + 1) -
0x1c04c:	sub eax, edx                        
0x1c04e:	mov dword ptr [rbp - 0x90], eax     
MEMORY OFFSET:     -0x90     -144  >>-136

0x1c054:	cmp dword ptr [rbp - 0x90], 0       #	    if |(|max_offset < 0)
MEMORY OFFSET:     -0x90     -144  >>-136

0x1c05b:	jns 0x1c067                         
0x1c05d:	mov dword ptr [rbp - 0x90], 0       #		max_offset |=| 0;
MEMORY OFFSET:     -0x90     -144  >>-136

0x1c067:	mov rax, qword ptr [rbp - 0xa8]     #	    if (this|-|>horizontal_offset >= max_offset)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c06e:	mov eax, dword ptr [rax + 0x74]     
MEMORY OFFSET:     0x74     116  >>124

0x1c071:	cmp dword ptr [rbp - 0x90], eax     #	    if |(|this->horizontal_offset >= max_offset)
MEMORY OFFSET:     -0x90     -144  >>-136

0x1c077:	jg 0x1c089                          
0x1c079:	mov rax, qword ptr [rbp - 0xa8]     #		this->horizontal_offset |=| max_offset;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c080:	mov edx, dword ptr [rbp - 0x90]     
MEMORY OFFSET:     -0x90     -144  >>-136

0x1c086:	mov dword ptr [rax + 0x74], edx     
MEMORY OFFSET:     0x74     116  >>124

0x1c089:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c090:	mov rdi, rax                        
0x1c093:	call 0x14e6a                        
0x1c098:	jmp 0x1c33e                         #	    |b|reak;
0x1c09d:	mov rax, qword ptr [rbp - 0xa8]     #	    ptr = strrchr(this|-|>dir_entry[this->current_entry].name, '.');
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c0a4:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1c0a8:	mov rax, qword ptr [rbp - 0xa8]     #	    ptr = strrchr(this->dir_entry[this|-|>current_entry].name, '.');
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c0af:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1c0b2:	movsxd rdx, eax                     
0x1c0b5:	mov rax, rdx                        #	    ptr = strrchr(this->dir_entry|[|this->current_entry].name, '.');
0x1c0b8:	shl rax, 2                          
0x1c0bc:	add rax, rdx                        
0x1c0bf:	shl rax, 4                          
0x1c0c3:	add rax, rcx                        
0x1c0c6:	mov rax, qword ptr [rax]            #	    ptr = strrchr(this->dir_entry[this->current_entry]|.|name, '.');
0x1c0c9:	mov esi, 0x2e                       #	    ptr = |s|trrchr(this->dir_entry[this->current_entry].name, '.');
0x1c0ce:	mov rdi, rax                        
0x1c0d1:	call 0x49e0                         
0x1c0d6:	mov qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x1c0da:	mov rax, qword ptr [rbp - 0xa8]     #	    if (ptr == this|-|>dir_entry[this->current_entry].name ||
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c0e1:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1c0e5:	mov rax, qword ptr [rbp - 0xa8]     #	    if (ptr == this->dir_entry[this|-|>current_entry].name ||
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c0ec:	mov eax, dword ptr [rax + 0x28]     
MEMORY OFFSET:     0x28     40  >>48

0x1c0ef:	movsxd rdx, eax                     
0x1c0f2:	mov rax, rdx                        #	    if (ptr == this->dir_entry|[|this->current_entry].name ||
0x1c0f5:	shl rax, 2                          
0x1c0f9:	add rax, rdx                        
0x1c0fc:	shl rax, 4                          
0x1c100:	add rax, rcx                        
0x1c103:	mov rax, qword ptr [rax]            #	    if (ptr == this->dir_entry[this->current_entry]|.|name ||
0x1c106:	cmp qword ptr [rbp - 0x58], rax     #	    if |(|ptr == this->dir_entry[this->current_entry].name ||
MEMORY OFFSET:     -0x58     -88  >>-80

0x1c10a:	je 0x1c33e                          
0x1c110:	cmp qword ptr [rbp - 0x58], 0       #	    if (ptr == this->dir_entry[this->current_entry].name ||||
MEMORY OFFSET:     -0x58     -88  >>-80

0x1c115:	je 0x1c33e                          
0x1c11b:	mov rax, qword ptr [rbp - 0x58]     #	    extension = (char *)malloc(1 + |s|trlen(ptr) + 1);
MEMORY OFFSET:     -0x58     -88  >>-80

0x1c11f:	mov rdi, rax                        
0x1c122:	call 0x4960                         
0x1c127:	add rax, 2                          #	    extension = (char *)|m|alloc(1 + strlen(ptr) + 1);
0x1c12b:	mov rdi, rax                        
0x1c12e:	call 0x4bf0                         
0x1c133:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1c137:	mov rdx, qword ptr [rbp - 0x58]     #	    |s|printf(extension, "*%s", ptr);
MEMORY OFFSET:     -0x58     -88  >>-80

0x1c13b:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1c13f:	lea rcx, [rip + 0xcc90]             
MEMORY OFFSET:     0xcc90     52368  >>52376

0x1c146:	mov rsi, rcx                        
0x1c149:	mov rdi, rax                        
0x1c14c:	mov eax, 0                          
0x1c151:	call 0x4dd0                         
0x1c156:	mov dword ptr [rbp - 0x98], 0       #	    for (entry |=| 0; entry < this->entries; entry++)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1c160:	jmp 0x1c2dd                         #	    |f|or (entry = 0; entry < this->entries; entry++)
0x1c165:	mov rax, qword ptr [rbp - 0xa8]     #		if (this|-|>dir_entry[entry].type != DIR_ENTRY)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c16c:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1c170:	mov eax, dword ptr [rbp - 0x98]     #		if (this->dir_entry|[|entry].type != DIR_ENTRY)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1c176:	movsxd rdx, eax                     
0x1c179:	mov rax, rdx                        
0x1c17c:	shl rax, 2                          
0x1c180:	add rax, rdx                        
0x1c183:	shl rax, 4                          
0x1c187:	add rax, rcx                        
0x1c18a:	movzx eax, byte ptr [rax + 0x48]    #		if (this->dir_entry[entry]|.|type != DIR_ENTRY)
MEMORY OFFSET:     0x48     72  >>80

0x1c18e:	test al, al                         #		if |(|this->dir_entry[entry].type != DIR_ENTRY)
0x1c190:	je 0x1c2d6                          
0x1c196:	mov dword ptr [rbp - 0x80], 1       #		    int |f|nm_flags = FNM_PATHNAME;
MEMORY OFFSET:     -0x80     -128  >>-120

0x1c19d:	mov eax, dword ptr [rip + 0x15455]  #		    if (LeadingDotMatch |=|= OFF)
MEMORY OFFSET:     0x15455     87125  >>87133

0x1c1a3:	test eax, eax                       #		    if |(|LeadingDotMatch == OFF)
0x1c1a5:	jne 0x1c1ab                         
0x1c1a7:	or dword ptr [rbp - 0x80], 4        #			fnm_flags |||= FNM_PERIOD;
MEMORY OFFSET:     -0x80     -128  >>-120

0x1c1ab:	mov rax, qword ptr [rbp - 0xa8]     #		    if (fnmatch(extension, this|-|>dir_entry[entry].name,
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c1b2:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1c1b6:	mov eax, dword ptr [rbp - 0x98]     #		    if (fnmatch(extension, this->dir_entry|[|entry].name,
MEMORY OFFSET:     -0x98     -152  >>-144

0x1c1bc:	movsxd rdx, eax                     
0x1c1bf:	mov rax, rdx                        
0x1c1c2:	shl rax, 2                          
0x1c1c6:	add rax, rdx                        
0x1c1c9:	shl rax, 4                          
0x1c1cd:	add rax, rcx                        
0x1c1d0:	mov rcx, qword ptr [rax]            #		    if (fnmatch(extension, this->dir_entry[entry]|.|name,
0x1c1d3:	mov edx, dword ptr [rbp - 0x80]     #		    if (|f|nmatch(extension, this->dir_entry[entry].name,
MEMORY OFFSET:     -0x80     -128  >>-120

0x1c1d6:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x1c1da:	mov rsi, rcx                        
0x1c1dd:	mov rdi, rax                        
0x1c1e0:	call 0x4a00                         
0x1c1e5:	test eax, eax                       #		    if |(|fnmatch(extension, this->dir_entry[entry].name,
0x1c1e7:	jne 0x1c2d6                         
0x1c1ed:	cmp dword ptr [rbp - 0xac], 0x32    #			if |(|action == act_SELECT_EXTENSION)
MEMORY OFFSET:     -0xac     -172  >>-164

0x1c1f4:	jne 0x1c269                         
0x1c1f6:	mov rax, qword ptr [rbp - 0xa8]     #			    if (!this|-|>dir_entry[entry].selected)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c1fd:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1c201:	mov eax, dword ptr [rbp - 0x98]     #			    if (!this->dir_entry|[|entry].selected)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1c207:	movsxd rdx, eax                     
0x1c20a:	mov rax, rdx                        
0x1c20d:	shl rax, 2                          
0x1c211:	add rax, rdx                        
0x1c214:	shl rax, 4                          
0x1c218:	add rax, rcx                        
0x1c21b:	movzx eax, byte ptr [rax + 0x49]    #			    if (!this->dir_entry[entry]|.|selected)
MEMORY OFFSET:     0x49     73  >>81

0x1c21f:	test al, al                         #			    if |(|!this->dir_entry[entry].selected)
0x1c221:	jne 0x1c2d6                         
0x1c227:	mov rax, qword ptr [rbp - 0xa8]     #				this|-|>dir_entry[entry].selected = 1;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c22e:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1c232:	mov eax, dword ptr [rbp - 0x98]     #				this->dir_entry|[|entry].selected = 1;
MEMORY OFFSET:     -0x98     -152  >>-144

0x1c238:	movsxd rdx, eax                     
0x1c23b:	mov rax, rdx                        
0x1c23e:	shl rax, 2                          
0x1c242:	add rax, rdx                        
0x1c245:	shl rax, 4                          
0x1c249:	add rax, rcx                        
0x1c24c:	mov byte ptr [rax + 0x49], 1        #				this->dir_entry[entry].selected |=| 1;
MEMORY OFFSET:     0x49     73  >>81

0x1c250:	mov rax, qword ptr [rbp - 0xa8]     #				this|-|>selected_entries++;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c257:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1c25a:	lea edx, [rax + 1]                  #				this->selected_entries|+|+;
MEMORY OFFSET:     0x1     1  >>9

0x1c25d:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c264:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1c267:	jmp 0x1c2d6                         
0x1c269:	mov rax, qword ptr [rbp - 0xa8]     #			    if (this|-|>dir_entry[entry].selected)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c270:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1c274:	mov eax, dword ptr [rbp - 0x98]     #			    if (this->dir_entry|[|entry].selected)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1c27a:	movsxd rdx, eax                     
0x1c27d:	mov rax, rdx                        
0x1c280:	shl rax, 2                          
0x1c284:	add rax, rdx                        
0x1c287:	shl rax, 4                          
0x1c28b:	add rax, rcx                        
0x1c28e:	movzx eax, byte ptr [rax + 0x49]    #			    if (this->dir_entry[entry]|.|selected)
MEMORY OFFSET:     0x49     73  >>81

0x1c292:	test al, al                         #			    if |(|this->dir_entry[entry].selected)
0x1c294:	je 0x1c2d6                          
0x1c296:	mov rax, qword ptr [rbp - 0xa8]     #				this|-|>dir_entry[entry].selected = 0;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c29d:	mov rcx, qword ptr [rax + 0x38]     
MEMORY OFFSET:     0x38     56  >>64

0x1c2a1:	mov eax, dword ptr [rbp - 0x98]     #				this->dir_entry|[|entry].selected = 0;
MEMORY OFFSET:     -0x98     -152  >>-144

0x1c2a7:	movsxd rdx, eax                     
0x1c2aa:	mov rax, rdx                        
0x1c2ad:	shl rax, 2                          
0x1c2b1:	add rax, rdx                        
0x1c2b4:	shl rax, 4                          
0x1c2b8:	add rax, rcx                        
0x1c2bb:	mov byte ptr [rax + 0x49], 0        #				this->dir_entry[entry].selected |=| 0;
MEMORY OFFSET:     0x49     73  >>81

0x1c2bf:	mov rax, qword ptr [rbp - 0xa8]     #				this|-|>selected_entries--;
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c2c6:	mov eax, dword ptr [rax + 0x70]     
MEMORY OFFSET:     0x70     112  >>120

0x1c2c9:	lea edx, [rax - 1]                  #				this->selected_entries|-|-;
MEMORY OFFSET:     -0x1     -1  >>7

0x1c2cc:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c2d3:	mov dword ptr [rax + 0x70], edx     
MEMORY OFFSET:     0x70     112  >>120

0x1c2d6:	add dword ptr [rbp - 0x98], 1       #	    for (entry = 0; entry < this->entries; entry|+|+)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1c2dd:	mov rax, qword ptr [rbp - 0xa8]     #	    for (entry = 0; entry < this|-|>entries; entry++)
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c2e4:	mov eax, dword ptr [rax + 0x68]     
MEMORY OFFSET:     0x68     104  >>112

0x1c2e7:	cmp dword ptr [rbp - 0x98], eax     #	    for (entry = 0; entry |<| this->entries; entry++)
MEMORY OFFSET:     -0x98     -152  >>-144

0x1c2ed:	jl 0x1c165                          
0x1c2f3:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_entries(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c2fa:	mov rdi, rax                        
0x1c2fd:	mov eax, 0                          
0x1c302:	call 0x13223                        
0x1c307:	mov rax, qword ptr [rbp - 0xa8]     #	    |p|anel_update_info(this);
MEMORY OFFSET:     -0xa8     -168  >>-160

0x1c30e:	mov rdi, rax                        
0x1c311:	mov eax, 0                          
0x1c316:	call 0x1395a                        
0x1c31b:	jmp 0x1c33e                         #	    |b|reak;
0x1c31d:	lea rax, [rip + 0xcab6]             #	    |f|atal("no action");
MEMORY OFFSET:     0xcab6     51894  >>51902

0x1c324:	mov rdi, rax                        
0x1c327:	call 0x672c                         
0x1c32c:	jmp 0x1c33e                         
0x1c32e:	nop                                 #		|b|reak;
0x1c32f:	jmp 0x1c33e                         
0x1c331:	nop                                 #		|b|reak;
0x1c332:	jmp 0x1c33e                         
0x1c334:	nop                                 #		|b|reak;
0x1c335:	jmp 0x1c33e                         
0x1c337:	nop                                 #	    |b|reak;
0x1c338:	jmp 0x1c33e                         
0x1c33a:	nop                                 #	    |b|reak;
0x1c33b:	jmp 0x1c33e                         
0x1c33d:	nop                                 #	    |b|reak;
0x1c33e:	mov eax, 0                          #    return |0|;
0x1c343:	mov rdx, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x1c347:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1c350:	je 0x1c357                          
0x1c352:	call 0x4980                         
0x1c357:	add rsp, 0xb0                       
0x1c35e:	pop rbx                             
0x1c35f:	pop r12                             
0x1c361:	pop rbp                             
0x1c362:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/title.c
####################################################################################################

0x1c363:	endbr64                             #|{|
0x1c367:	push rbp                            
0x1c368:	mov rbp, rsp                        
0x1c36b:	mov rax, qword ptr [rip + 0x14396]  #	          (|s|trlen(mail_string)) + 1 +
MEMORY OFFSET:     0x14396     82838  >>82846

0x1c372:	mov rdi, rax                        
0x1c375:	call 0x4960                         
0x1c37a:	mov edx, eax                        #    info_length = (sizeof(login_string)  - 1) + 1 + login_name_length + 1 |+|
0x1c37c:	mov eax, dword ptr [rip + 0x152ca]  
MEMORY OFFSET:     0x152ca     86730  >>86738

0x1c382:	add edx, eax                        
0x1c384:	mov eax, dword ptr [rip + 0x152c6]  #		  (sizeof(ttydev_string) - 1) + 1 |+| tty_device_length + 1 +
MEMORY OFFSET:     0x152c6     86726  >>86734

0x1c38a:	add eax, edx                        
0x1c38c:	add eax, 0x15                       #		  6 |+| 1;
0x1c38f:	mov dword ptr [rip + 0x152bf], eax  #    info_length |=| (sizeof(login_string)  - 1) + 1 + login_name_length + 1 +
MEMORY OFFSET:     0x152bf     86719  >>86727

0x1c395:	mov eax, dword ptr [rip + 0x152b9]  #    return|(|info_length);
MEMORY OFFSET:     0x152b9     86713  >>86721

0x1c39b:	pop rbp                             #|}|
0x1c39c:	ret                                 
0x1c39d:	endbr64                             #|{|
0x1c3a1:	push rbp                            
0x1c3a2:	mov rbp, rsp                        
0x1c3a5:	sub rsp, 0xa0                       
0x1c3ac:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1c3b5:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1c3b9:	xor eax, eax                        
0x1c3bb:	mov edi, 0x1d                       #    product_name = |x|malloc(1 + strlen(PRODUCT) + 1 + strlen(VERSION) + 1);
0x1c3c0:	call 0x24650                        
0x1c3c5:	mov qword ptr [rip + 0x15274], rax  #    product_name |=| xmalloc(1 + strlen(PRODUCT) + 1 + strlen(VERSION) + 1);
MEMORY OFFSET:     0x15274     86644  >>86652

0x1c3cc:	mov rax, qword ptr [rip + 0x1526d]  #    |s|printf(product_name, " %s %s", PRODUCT, VERSION);
MEMORY OFFSET:     0x1526d     86637  >>86645

0x1c3d3:	lea rdx, [rip + 0xcbb0]             
MEMORY OFFSET:     0xcbb0     52144  >>52152

0x1c3da:	mov rcx, rdx                        
0x1c3dd:	lea rdx, [rip + 0xcbac]             
MEMORY OFFSET:     0xcbac     52140  >>52148

0x1c3e4:	lea rsi, [rip + 0xcbbb]             
MEMORY OFFSET:     0xcbbb     52155  >>52163

0x1c3eb:	mov rdi, rax                        
0x1c3ee:	mov eax, 0                          
0x1c3f3:	call 0x4dd0                         
0x1c3f8:	mov rax, qword ptr [rip + 0x15241]  #    product_name_length = |s|trlen(product_name);
MEMORY OFFSET:     0x15241     86593  >>86601

0x1c3ff:	mov rdi, rax                        
0x1c402:	call 0x4960                         
0x1c407:	mov dword ptr [rip + 0x1523b], eax  #    product_name_length |=| strlen(product_name);
MEMORY OFFSET:     0x1523b     86587  >>86595

0x1c40d:	mov rax, qword ptr [rip + 0x1569c]  #    login_name_length = |s|trlen(login_name);
MEMORY OFFSET:     0x1569c     87708  >>87716

0x1c414:	mov rdi, rax                        
0x1c417:	call 0x4960                         
0x1c41c:	mov dword ptr [rip + 0x1522a], eax  #    login_name_length |=| strlen(login_name);
MEMORY OFFSET:     0x1522a     86570  >>86578

0x1c422:	mov rax, qword ptr [rip + 0x145bf]  #    tty_device_length = |s|trlen(tty_device);
MEMORY OFFSET:     0x145bf     83391  >>83399

0x1c429:	mov rdi, rax                        
0x1c42c:	call 0x4960                         
0x1c431:	mov dword ptr [rip + 0x15219], eax  #    tty_device_length |=| strlen(tty_device);
MEMORY OFFSET:     0x15219     86553  >>86561

0x1c437:	lea rax, [rip + 0xcb6f]             #    mail_file=|g|etenv("MAIL");
MEMORY OFFSET:     0xcb6f     52079  >>52087

0x1c43e:	mov rdi, rax                        
0x1c441:	call 0x47a0                         
0x1c446:	mov qword ptr [rip + 0x15213], rax  #    mail_file|=|getenv("MAIL");
MEMORY OFFSET:     0x15213     86547  >>86555

0x1c44d:	mov rax, qword ptr [rip + 0x1520c]  #    if(|m|ail_file)
MEMORY OFFSET:     0x1520c     86540  >>86548

0x1c454:	test rax, rax                       #    if|(|mail_file)
0x1c457:	je 0x1c48d                          
0x1c459:	mov rax, qword ptr [rip + 0x15200]  #	if(|x|stat(mail_file,&s) != -1)
MEMORY OFFSET:     0x15200     86528  >>86536

0x1c460:	lea rdx, [rbp - 0xa0]               
MEMORY OFFSET:     -0xa0     -160  >>-152

0x1c467:	mov rsi, rdx                        
0x1c46a:	mov rdi, rax                        
0x1c46d:	call 0x1f0e4                        
0x1c472:	cmp eax, -1                         #	if|(|xstat(mail_file,&s) != -1)
0x1c475:	je 0x1c48d                          
0x1c477:	mov rax, qword ptr [rbp - 0x70]     #	    mail_size=s|.|st_size;
MEMORY OFFSET:     -0x70     -112  >>-104

0x1c47b:	mov qword ptr [rip + 0x151e6], rax  #	    mail_size|=|s.st_size;
MEMORY OFFSET:     0x151e6     86502  >>86510

0x1c482:	mov rax, qword ptr [rbp - 0x48]     #	    mail_mtime=s.|s|t_mtime;
MEMORY OFFSET:     -0x48     -72  >>-64

0x1c486:	mov qword ptr [rip + 0x151e3], rax  #	    mail_mtime|=|s.st_mtime;
MEMORY OFFSET:     0x151e3     86499  >>86507

0x1c48d:	mov eax, 0                          #    |m|ail_check();
0x1c492:	call 0x1c6f3                        
0x1c497:	mov eax, 0                          #    info_length = |c|alc_info_length();
0x1c49c:	call 0x1c363                        
0x1c4a1:	mov dword ptr [rip + 0x151ad], eax  #    info_length |=| calc_info_length();
MEMORY OFFSET:     0x151ad     86445  >>86453

0x1c4a7:	mov eax, 0                          #    title_window = |w|indow_init();
0x1c4ac:	call 0xda70                         
0x1c4b1:	mov qword ptr [rip + 0x151c0], rax  #    title_window |=| window_init();
MEMORY OFFSET:     0x151c0     86464  >>86472

0x1c4b8:	nop                                 #|}|
0x1c4b9:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1c4bd:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1c4c6:	je 0x1c4cd                          
0x1c4c8:	call 0x4980                         
0x1c4cd:	leave                               
0x1c4ce:	ret                                 
0x1c4cf:	endbr64                             #|{|
0x1c4d3:	push rbp                            
0x1c4d4:	mov rbp, rsp                        
0x1c4d7:	mov rax, qword ptr [rip + 0x1519a]  #    |w|indow_end(title_window);
MEMORY OFFSET:     0x1519a     86426  >>86434

0x1c4de:	mov rdi, rax                        
0x1c4e1:	call 0xdab1                         
0x1c4e6:	nop                                 #|}|
0x1c4e7:	pop rbp                             
0x1c4e8:	ret                                 
0x1c4e9:	endbr64                             #|{|
0x1c4ed:	push rbp                            
0x1c4ee:	mov rbp, rsp                        
0x1c4f1:	sub rsp, 0x10                       
0x1c4f5:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1c4f9:	mov qword ptr [rbp - 0x10], rsi     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1c4fd:	mov rax, qword ptr [rbp - 8]        #    |w|indow_resize(title_window, 0, line, 1, columns);
MEMORY OFFSET:     -0x8     -8  >>0

0x1c501:	mov ecx, eax                        
0x1c503:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1c507:	mov edx, eax                        
0x1c509:	mov rax, qword ptr [rip + 0x15168]  
MEMORY OFFSET:     0x15168     86376  >>86384

0x1c510:	mov r8d, ecx                        
0x1c513:	mov ecx, 1                          
0x1c518:	mov esi, 0                          
0x1c51d:	mov rdi, rax                        
0x1c520:	call 0xdad7                         
0x1c525:	nop                                 #|}|
0x1c526:	leave                               
0x1c527:	ret                                 
0x1c528:	endbr64                             #|{|
0x1c52c:	push rbp                            
0x1c52d:	mov rbp, rsp                        
0x1c530:	sub rsp, 0x50                       
0x1c534:	mov dword ptr [rbp - 0x44], edi     
MEMORY OFFSET:     -0x44     -68  >>-60

0x1c537:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1c540:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1c544:	xor eax, eax                        
0x1c546:	mov eax, 0                          #    if (|i|n_terminal_mode())
0x1c54b:	call 0x5021                         
0x1c550:	test eax, eax                       #    if |(|in_terminal_mode())
0x1c552:	jne 0x1c6d9                         
0x1c558:	mov eax, dword ptr [rip + 0x150ea]  #    if (product_name_length |+| 2 + info_length >= title_window->columns)
MEMORY OFFSET:     0x150ea     86250  >>86258

0x1c55e:	lea edx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x1c561:	mov eax, dword ptr [rip + 0x150ed]  #    if (product_name_length + 2 |+| info_length >= title_window->columns)
MEMORY OFFSET:     0x150ed     86253  >>86261

0x1c567:	add edx, eax                        
0x1c569:	mov rax, qword ptr [rip + 0x15108]  #    if (product_name_length + 2 + info_length >= title_window|-|>columns)
MEMORY OFFSET:     0x15108     86280  >>86288

0x1c570:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1c573:	cmp edx, eax                        #    if |(|product_name_length + 2 + info_length >= title_window->columns)
0x1c575:	jge 0x1c6dc                         
0x1c57b:	cmp dword ptr [rbp - 0x44], 0       #    if|(|signum && mail_check())
MEMORY OFFSET:     -0x44     -68  >>-60

0x1c57f:	je 0x1c599                          
0x1c581:	mov eax, 0                          #    if(signum && |m|ail_check())
0x1c586:	call 0x1c6f3                        
0x1c58b:	test eax, eax                       #    if(signum |&|& mail_check())
0x1c58d:	je 0x1c599                          
0x1c58f:	mov eax, 0                          #	|t|itle_update();
0x1c594:	call 0x1c9f4                        
0x1c599:	mov eax, 0                          #    time = |g|et_local_time();
0x1c59e:	call 0x1e4bf                        
0x1c5a3:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1c5a7:	lea rax, [rbp - 0x35]               #    |t|ty_save(&status);
MEMORY OFFSET:     -0x35     -53  >>-45

0x1c5ab:	mov rdi, rax                        
0x1c5ae:	call 0xc04b                         
0x1c5b3:	lea rdx, [rbp - 0x30]               #    |t|ty_get_cursor(&line, &column);
MEMORY OFFSET:     -0x30     -48  >>-40

0x1c5b7:	lea rax, [rbp - 0x34]               
MEMORY OFFSET:     -0x34     -52  >>-44

0x1c5bb:	mov rsi, rdx                        
0x1c5be:	mov rdi, rax                        
0x1c5c1:	call 0xbeb8                         
0x1c5c6:	mov edi, 0                          #    |t|ty_cursor(OFF);
0x1c5cb:	call 0xbfe3                         
0x1c5d0:	mov rax, qword ptr [rbp - 0x28]     #    if ((hour = time|-|>tm_hour % 12) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1c5d4:	mov edx, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1c5d7:	movsxd rax, edx                     #    if ((hour |=| time->tm_hour % 12) == 0)
0x1c5da:	imul rax, rax, 0x2aaaaaab           
0x1c5e1:	shr rax, 0x20                       
0x1c5e5:	sar eax, 1                          
0x1c5e7:	mov ecx, edx                        
0x1c5e9:	sar ecx, 0x1f                       
0x1c5ec:	sub eax, ecx                        
0x1c5ee:	mov dword ptr [rbp - 0x2c], eax     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1c5f1:	mov ecx, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1c5f4:	mov eax, ecx                        
0x1c5f6:	add eax, eax                        
0x1c5f8:	add eax, ecx                        
0x1c5fa:	shl eax, 2                          
0x1c5fd:	sub edx, eax                        
0x1c5ff:	mov dword ptr [rbp - 0x2c], edx     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1c602:	cmp dword ptr [rbp - 0x2c], 0       #    if |(|(hour = time->tm_hour % 12) == 0)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1c606:	jne 0x1c60f                         
0x1c608:	mov dword ptr [rbp - 0x2c], 0xc     #	hour |=| 12;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1c60f:	mov rax, qword ptr [rbp - 0x28]     #	    (time|-|>tm_hour < 12) ? 'a' : 'p');
MEMORY OFFSET:     -0x28     -40  >>-32

0x1c613:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1c616:	cmp eax, 0xb                        #    |s|printf(buf, "%2d:%02d%c", hour, time->tm_min,
0x1c619:	jg 0x1c622                          
0x1c61b:	mov esi, 0x61                       #    |s|printf(buf, "%2d:%02d%c", hour, time->tm_min,
0x1c620:	jmp 0x1c627                         
0x1c622:	mov esi, 0x70                       #    |s|printf(buf, "%2d:%02d%c", hour, time->tm_min,
0x1c627:	mov rax, qword ptr [rbp - 0x28]     #    |s|printf(buf, "%2d:%02d%c", hour, time->tm_min,
MEMORY OFFSET:     -0x28     -40  >>-32

0x1c62b:	mov ecx, dword ptr [rax + 4]        
MEMORY OFFSET:     0x4     4  >>12

0x1c62e:	mov edx, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1c631:	lea rax, [rbp - 0x20]               
MEMORY OFFSET:     -0x20     -32  >>-24

0x1c635:	mov r8d, esi                        
0x1c638:	lea rsi, [rip + 0xc973]             
MEMORY OFFSET:     0xc973     51571  >>51579

0x1c63f:	mov rdi, rax                        
0x1c642:	mov eax, 0                          
0x1c647:	call 0x4dd0                         
0x1c64c:	mov rax, qword ptr [rip + 0x15025]  #    window_goto(title_window, 0, title_window|-|>columns - 7);
MEMORY OFFSET:     0x15025     86053  >>86061

0x1c653:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1c656:	lea edx, [rax - 7]                  #    |w|indow_goto(title_window, 0, title_window->columns - 7);
MEMORY OFFSET:     -0x7     -7  >>1

0x1c659:	mov rax, qword ptr [rip + 0x15018]  
MEMORY OFFSET:     0x15018     86040  >>86048

0x1c660:	mov esi, 0                          
0x1c665:	mov rdi, rax                        
0x1c668:	call 0xdc1e                         
0x1c66d:	mov edx, dword ptr [rip + 0x14065]  #    |t|ty_colors(ClockBrightness, ClockForeground, ClockBackground);
MEMORY OFFSET:     0x14065     82021  >>82029

0x1c673:	mov ecx, dword ptr [rip + 0x1405b]  
MEMORY OFFSET:     0x1405b     82011  >>82019

0x1c679:	mov eax, dword ptr [rip + 0x1405d]  
MEMORY OFFSET:     0x1405d     82013  >>82021

0x1c67f:	mov esi, ecx                        
0x1c681:	mov edi, eax                        
0x1c683:	call 0xbf89                         
0x1c688:	lea rax, [rbp - 0x20]               #    window_puts(title_window, buf, |s|trlen(buf));
MEMORY OFFSET:     -0x20     -32  >>-24

0x1c68c:	mov rdi, rax                        
0x1c68f:	call 0x4960                         
0x1c694:	mov edx, eax                        #    |w|indow_puts(title_window, buf, strlen(buf));
0x1c696:	mov rax, qword ptr [rip + 0x14fdb]  
MEMORY OFFSET:     0x14fdb     85979  >>85987

0x1c69d:	lea rcx, [rbp - 0x20]               
MEMORY OFFSET:     -0x20     -32  >>-24

0x1c6a1:	mov rsi, rcx                        
0x1c6a4:	mov rdi, rax                        
0x1c6a7:	call 0xdb1a                         
0x1c6ac:	mov edx, dword ptr [rbp - 0x30]     #    |t|ty_goto(line, column);
MEMORY OFFSET:     -0x30     -48  >>-40

0x1c6af:	mov eax, dword ptr [rbp - 0x34]     
MEMORY OFFSET:     -0x34     -52  >>-44

0x1c6b2:	mov esi, edx                        
0x1c6b4:	mov edi, eax                        
0x1c6b6:	call 0xbe95                         
0x1c6bb:	lea rax, [rbp - 0x35]               #    |t|ty_restore(&status);
MEMORY OFFSET:     -0x35     -53  >>-45

0x1c6bf:	mov rdi, rax                        
0x1c6c2:	call 0xc067                         
0x1c6c7:	cmp dword ptr [rbp - 0x44], 0       #    if |(|signum)
MEMORY OFFSET:     -0x44     -68  >>-60

0x1c6cb:	je 0x1c6dd                          
0x1c6cd:	mov eax, 0                          #	|t|ty_update();
0x1c6d2:	call 0xb4b7                         
0x1c6d7:	jmp 0x1c6dd                         
0x1c6d9:	nop                                 #	|r|eturn;
0x1c6da:	jmp 0x1c6dd                         
0x1c6dc:	nop                                 #	|r|eturn;
0x1c6dd:	mov rax, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1c6e1:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1c6ea:	je 0x1c6f1                          
0x1c6ec:	call 0x4980                         
0x1c6f1:	leave                               
0x1c6f2:	ret                                 
0x1c6f3:	endbr64                             #|{|
0x1c6f7:	push rbp                            
0x1c6f8:	mov rbp, rsp                        
0x1c6fb:	sub rsp, 0x8e0                      
0x1c702:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1c70b:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1c70f:	xor eax, eax                        
0x1c711:	mov rax, qword ptr [rip + 0x13ff0]  #    char *|o|ld_mail=mail_string;
MEMORY OFFSET:     0x13ff0     81904  >>81912

0x1c718:	mov qword ptr [rbp - 0x8c0], rax    
MEMORY OFFSET:     -0x8c0     -2240  >>-2232

0x1c71f:	lea rax, [rip + 0x14f32]            #    mail_string|=|mail_have_none;
MEMORY OFFSET:     0x14f32     85810  >>85818

0x1c726:	mov qword ptr [rip + 0x13fdb], rax  
MEMORY OFFSET:     0x13fdb     81883  >>81891

0x1c72d:	mov dword ptr [rbp - 0x8d8], 0      #    int |t|otal=0;
MEMORY OFFSET:     -0x8d8     -2264  >>-2256

0x1c737:	mov dword ptr [rbp - 0x8d4], 0      #    int |r|ead=0;
MEMORY OFFSET:     -0x8d4     -2260  >>-2252

0x1c741:	mov dword ptr [rbp - 0x8d0], 0      #    int |i|nheaders=0;
MEMORY OFFSET:     -0x8d0     -2256  >>-2248

0x1c74b:	mov dword ptr [rbp - 0x8cc], 0      #    int |g|otstatus=0;
MEMORY OFFSET:     -0x8cc     -2252  >>-2244

0x1c755:	mov rax, qword ptr [rip + 0x14f04]  #    if(|!|mail_file)
MEMORY OFFSET:     0x14f04     85764  >>85772

0x1c75c:	test rax, rax                       #    if|(|!mail_file)
0x1c75f:	jne 0x1c76b                         
0x1c761:	mov eax, 0                          #	return |0|;
0x1c766:	jmp 0x1c9de                         
0x1c76b:	mov rax, qword ptr [rip + 0x14eee]  #    if(|x|stat(mail_file,&s) == -1)
MEMORY OFFSET:     0x14eee     85742  >>85750

0x1c772:	lea rdx, [rbp - 0x8a0]              
MEMORY OFFSET:     -0x8a0     -2208  >>-2200

0x1c779:	mov rsi, rdx                        
0x1c77c:	mov rdi, rax                        
0x1c77f:	call 0x1f0e4                        
0x1c784:	cmp eax, -1                         #    if|(|xstat(mail_file,&s) == -1)
0x1c787:	jne 0x1c793                         
0x1c789:	mov eax, 0                          #	return |0|;
0x1c78e:	jmp 0x1c9de                         
0x1c793:	mov rax, qword ptr [rbp - 0x858]    #    utbuf.actime=s.|s|t_atime;
MEMORY OFFSET:     -0x858     -2136  >>-2128

0x1c79a:	mov qword ptr [rbp - 0x8b0], rax    #    utbuf.actime|=|s.st_atime;
MEMORY OFFSET:     -0x8b0     -2224  >>-2216

0x1c7a1:	mov rax, qword ptr [rbp - 0x848]    #    utbuf.modtime=s.|s|t_mtime;
MEMORY OFFSET:     -0x848     -2120  >>-2112

0x1c7a8:	mov qword ptr [rbp - 0x8a8], rax    #    utbuf.modtime|=|s.st_mtime;
MEMORY OFFSET:     -0x8a8     -2216  >>-2208

0x1c7af:	mov rax, qword ptr [rip + 0x14eaa]  #    mbox=|f|open(mail_file,"r");
MEMORY OFFSET:     0x14eaa     85674  >>85682

0x1c7b6:	lea rdx, [rip + 0xc800]             
MEMORY OFFSET:     0xc800     51200  >>51208

0x1c7bd:	mov rsi, rdx                        
0x1c7c0:	mov rdi, rax                        
0x1c7c3:	call 0x4d50                         
0x1c7c8:	mov qword ptr [rbp - 0x8b8], rax    
MEMORY OFFSET:     -0x8b8     -2232  >>-2224

0x1c7cf:	cmp qword ptr [rbp - 0x8b8], 0      #    if|(|!mbox)
MEMORY OFFSET:     -0x8b8     -2232  >>-2224

0x1c7d7:	jne 0x1c924                         
0x1c7dd:	mov eax, 0                          #	return |0|;
0x1c7e2:	jmp 0x1c9de                         
0x1c7e7:	movzx eax, byte ptr [rbp - 0x810]   #	if(|s|trcmp(line,"")==0)
MEMORY OFFSET:     -0x810     -2064  >>-2056

0x1c7ee:	movzx eax, al                       
0x1c7f1:	test eax, eax                       #	if|(|strcmp(line,"")==0)
0x1c7f3:	jne 0x1c804                         
0x1c7f5:	mov dword ptr [rbp - 0x8d0], 0      #	    inheaders|=|0;
MEMORY OFFSET:     -0x8d0     -2256  >>-2248

0x1c7ff:	jmp 0x1c924                         
0x1c804:	lea rax, [rbp - 0x810]              #	else if(|s|trncmp(line,"From ",strlen("From ")) == 0)
MEMORY OFFSET:     -0x810     -2064  >>-2056

0x1c80b:	mov edx, 5                          
0x1c810:	lea rcx, [rip + 0xc7a8]             
MEMORY OFFSET:     0xc7a8     51112  >>51120

0x1c817:	mov rsi, rcx                        
0x1c81a:	mov rdi, rax                        
0x1c81d:	call 0x4850                         
0x1c822:	test eax, eax                       #	else if|(|strncmp(line,"From ",strlen("From ")) == 0)
0x1c824:	jne 0x1c846                         
0x1c826:	mov dword ptr [rbp - 0x8d0], 1      #	    inheaders|=|1;
MEMORY OFFSET:     -0x8d0     -2256  >>-2248

0x1c830:	mov dword ptr [rbp - 0x8cc], 0      #	    gotstatus|=|0;
MEMORY OFFSET:     -0x8cc     -2252  >>-2244

0x1c83a:	add dword ptr [rbp - 0x8d8], 1      #	    total|+|+;
MEMORY OFFSET:     -0x8d8     -2264  >>-2256

0x1c841:	jmp 0x1c924                         
0x1c846:	cmp dword ptr [rbp - 0x8d0], 0      #	else if|(|inheaders && !gotstatus &&
MEMORY OFFSET:     -0x8d0     -2256  >>-2248

0x1c84d:	je 0x1c924                          
0x1c853:	cmp dword ptr [rbp - 0x8cc], 0      #	else if(inheaders |&|& !gotstatus &&
MEMORY OFFSET:     -0x8cc     -2252  >>-2244

0x1c85a:	jne 0x1c924                         
0x1c860:	lea rax, [rbp - 0x810]              #		(|s|trncmp(line,"Status:",strlen("Status:"))==0))
MEMORY OFFSET:     -0x810     -2064  >>-2056

0x1c867:	mov edx, 7                          
0x1c86c:	lea rcx, [rip + 0xc752]             
MEMORY OFFSET:     0xc752     51026  >>51034

0x1c873:	mov rsi, rcx                        
0x1c876:	mov rdi, rax                        
0x1c879:	call 0x4850                         
0x1c87e:	test eax, eax                       #	else if(inheaders && !gotstatus |&|&
0x1c880:	jne 0x1c924                         
0x1c886:	lea rax, [rbp - 0x810]              #	    char *status=|s|trchr(line,':');
MEMORY OFFSET:     -0x810     -2064  >>-2056

0x1c88d:	mov esi, 0x3a                       
0x1c892:	mov rdi, rax                        
0x1c895:	call 0x49b0                         
0x1c89a:	mov qword ptr [rbp - 0x8c8], rax    
MEMORY OFFSET:     -0x8c8     -2248  >>-2240

0x1c8a1:	add qword ptr [rbp - 0x8c8], 1      #	    status|+|+;
MEMORY OFFSET:     -0x8c8     -2248  >>-2240

0x1c8a9:	jmp 0x1c8b3                         #	    while|(|*status && isspace(*status))
0x1c8ab:	add qword ptr [rbp - 0x8c8], 1      #		status|+|+;
MEMORY OFFSET:     -0x8c8     -2248  >>-2240

0x1c8b3:	mov rax, qword ptr [rbp - 0x8c8]    #	    while(|*|status && isspace(*status))
MEMORY OFFSET:     -0x8c8     -2248  >>-2240

0x1c8ba:	movzx eax, byte ptr [rax]           
0x1c8bd:	test al, al                         #	    while(*status |&|& isspace(*status))
0x1c8bf:	je 0x1c8ec                          
0x1c8c1:	call 0x4ec0                         #	    while(*status && |i|sspace(*status))
0x1c8c6:	mov rdx, qword ptr [rax]            
0x1c8c9:	mov rax, qword ptr [rbp - 0x8c8]    
MEMORY OFFSET:     -0x8c8     -2248  >>-2240

0x1c8d0:	movzx eax, byte ptr [rax]           
0x1c8d3:	movsx rax, al                       
0x1c8d7:	add rax, rax                        
0x1c8da:	add rax, rdx                        
0x1c8dd:	movzx eax, word ptr [rax]           
0x1c8e0:	movzx eax, ax                       
0x1c8e3:	and eax, 0x2000                     
0x1c8e8:	test eax, eax                       #	    while(*status |&|& isspace(*status))
0x1c8ea:	jne 0x1c8ab                         
0x1c8ec:	mov rax, qword ptr [rbp - 0x8c8]    #	    if(|*|status)
MEMORY OFFSET:     -0x8c8     -2248  >>-2240

0x1c8f3:	movzx eax, byte ptr [rax]           
0x1c8f6:	test al, al                         #	    if|(|*status)
0x1c8f8:	je 0x1c924                          
0x1c8fa:	mov dword ptr [rbp - 0x8cc], 1      #		gotstatus|=|1;
MEMORY OFFSET:     -0x8cc     -2252  >>-2244

0x1c904:	mov rax, qword ptr [rbp - 0x8c8]    #		if(|s|trchr(status,'R'))
MEMORY OFFSET:     -0x8c8     -2248  >>-2240

0x1c90b:	mov esi, 0x52                       
0x1c910:	mov rdi, rax                        
0x1c913:	call 0x49b0                         
0x1c918:	test rax, rax                       #		if|(|strchr(status,'R'))
0x1c91b:	je 0x1c924                          
0x1c91d:	add dword ptr [rbp - 0x8d4], 1      #		    read|+|+;
MEMORY OFFSET:     -0x8d4     -2260  >>-2252

0x1c924:	mov rdx, qword ptr [rbp - 0x8b8]    #    while(|f|gets(line,TMPBUFSIZE,mbox))
MEMORY OFFSET:     -0x8b8     -2232  >>-2224

0x1c92b:	lea rax, [rbp - 0x810]              
MEMORY OFFSET:     -0x810     -2064  >>-2056

0x1c932:	mov esi, 0x800                      
0x1c937:	mov rdi, rax                        
0x1c93a:	call 0x4ac0                         
0x1c93f:	test rax, rax                       
0x1c942:	jne 0x1c7e7                         
0x1c948:	mov rax, qword ptr [rbp - 0x8b8]    #    |f|close(mbox);
MEMORY OFFSET:     -0x8b8     -2232  >>-2224

0x1c94f:	mov rdi, rax                        
0x1c952:	call 0x4900                         
0x1c957:	mov rax, qword ptr [rip + 0x14d02]  #    |u|time(mail_file,&utbuf);
MEMORY OFFSET:     0x14d02     85250  >>85258

0x1c95e:	lea rdx, [rbp - 0x8b0]              
MEMORY OFFSET:     -0x8b0     -2224  >>-2216

0x1c965:	mov rsi, rdx                        
0x1c968:	mov rdi, rax                        
0x1c96b:	call 0x47b0                         
0x1c970:	cmp dword ptr [rbp - 0x8d8], 0      #    if|(|total)
MEMORY OFFSET:     -0x8d8     -2264  >>-2256

0x1c977:	je 0x1c9a5                          
0x1c979:	mov eax, dword ptr [rbp - 0x8d8]    #	if|(|total-read)
MEMORY OFFSET:     -0x8d8     -2264  >>-2256

0x1c97f:	cmp eax, dword ptr [rbp - 0x8d4]    
MEMORY OFFSET:     -0x8d4     -2260  >>-2252

0x1c985:	je 0x1c997                          
0x1c987:	lea rax, [rip + 0x13d6a]            #	    mail_string|=|mail_have_new;
MEMORY OFFSET:     0x13d6a     81258  >>81266

0x1c98e:	mov qword ptr [rip + 0x13d73], rax  
MEMORY OFFSET:     0x13d73     81267  >>81275

0x1c995:	jmp 0x1c9a5                         
0x1c997:	lea rax, [rip + 0x13d4d]            #	    mail_string|=|mail_have_mail;
MEMORY OFFSET:     0x13d4d     81229  >>81237

0x1c99e:	mov qword ptr [rip + 0x13d63], rax  
MEMORY OFFSET:     0x13d63     81251  >>81259

0x1c9a5:	mov eax, 0                          #    info_length=|c|alc_info_length();
0x1c9aa:	call 0x1c363                        
0x1c9af:	mov dword ptr [rip + 0x14c9f], eax  #    info_length|=|calc_info_length();
MEMORY OFFSET:     0x14c9f     85151  >>85159

0x1c9b5:	mov rax, qword ptr [rip + 0x13d4c]  #    if(|s|trcmp(mail_string,old_mail) == 0)
MEMORY OFFSET:     0x13d4c     81228  >>81236

0x1c9bc:	mov rdx, qword ptr [rbp - 0x8c0]    
MEMORY OFFSET:     -0x8c0     -2240  >>-2232

0x1c9c3:	mov rsi, rdx                        
0x1c9c6:	mov rdi, rax                        
0x1c9c9:	call 0x4af0                         
0x1c9ce:	test eax, eax                       #    if|(|strcmp(mail_string,old_mail) == 0)
0x1c9d0:	jne 0x1c9d9                         
0x1c9d2:	mov eax, 0                          #	return |0|; /* No change  */
0x1c9d7:	jmp 0x1c9de                         
0x1c9d9:	mov eax, 1                          #	return |1|; /* need to update title */
0x1c9de:	mov rdx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1c9e2:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1c9eb:	je 0x1c9f2                          
0x1c9ed:	call 0x4980                         #|}|
0x1c9f2:	leave                               
0x1c9f3:	ret                                 
0x1c9f4:	endbr64                             #|{|
0x1c9f8:	push rbp                            
0x1c9f9:	mov rbp, rsp                        
0x1c9fc:	sub rsp, 0x20                       
0x1ca00:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1ca09:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1ca0d:	xor eax, eax                        
0x1ca0f:	lea rax, [rbp - 0x15]               #    |t|ty_save(&status);
MEMORY OFFSET:     -0x15     -21  >>-13

0x1ca13:	mov rdi, rax                        
0x1ca16:	call 0xc04b                         
0x1ca1b:	mov edx, dword ptr [rip + 0x13ca3]  #    |t|ty_colors(TitleBrightness, TitleForeground, TitleBackground);
MEMORY OFFSET:     0x13ca3     81059  >>81067

0x1ca21:	mov ecx, dword ptr [rip + 0x13c99]  
MEMORY OFFSET:     0x13c99     81049  >>81057

0x1ca27:	mov eax, dword ptr [rip + 0x13c9b]  
MEMORY OFFSET:     0x13c9b     81051  >>81059

0x1ca2d:	mov esi, ecx                        
0x1ca2f:	mov edi, eax                        
0x1ca31:	call 0xbf89                         
0x1ca36:	mov rax, qword ptr [rip + 0x14c3b]  #    |w|indow_goto(title_window, 0, 0);
MEMORY OFFSET:     0x14c3b     85051  >>85059

0x1ca3d:	mov edx, 0                          
0x1ca42:	mov esi, 0                          
0x1ca47:	mov rdi, rax                        
0x1ca4a:	call 0xdc1e                         
0x1ca4f:	mov edx, dword ptr [rip + 0x14bf3]  #    |w|indow_puts(title_window, product_name, product_name_length);
MEMORY OFFSET:     0x14bf3     84979  >>84987

0x1ca55:	mov rcx, qword ptr [rip + 0x14be4]  
MEMORY OFFSET:     0x14be4     84964  >>84972

0x1ca5c:	mov rax, qword ptr [rip + 0x14c15]  
MEMORY OFFSET:     0x14c15     85013  >>85021

0x1ca63:	mov rsi, rcx                        
0x1ca66:	mov rdi, rax                        
0x1ca69:	call 0xdb1a                         
0x1ca6e:	mov rax, qword ptr [rip + 0x14c03]  #    buf = xmalloc(title_window|-|>columns + 1);
MEMORY OFFSET:     0x14c03     84995  >>85003

0x1ca75:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1ca78:	add eax, 1                          #    buf = xmalloc(title_window->columns |+| 1);
0x1ca7b:	cdqe                                #    buf = |x|malloc(title_window->columns + 1);
0x1ca7d:	mov rdi, rax                        
0x1ca80:	call 0x24650                        
0x1ca85:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1ca89:	mov eax, 0                          #    |m|ail_check();
0x1ca8e:	call 0x1c6f3                        
0x1ca93:	mov eax, dword ptr [rip + 0x14baf]  #    if (product_name_length |+| 2 + info_length < title_window->columns)
MEMORY OFFSET:     0x14baf     84911  >>84919

0x1ca99:	lea edx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x1ca9c:	mov eax, dword ptr [rip + 0x14bb2]  #    if (product_name_length + 2 |+| info_length < title_window->columns)
MEMORY OFFSET:     0x14bb2     84914  >>84922

0x1caa2:	add edx, eax                        
0x1caa4:	mov rax, qword ptr [rip + 0x14bcd]  #    if (product_name_length + 2 + info_length < title_window|-|>columns)
MEMORY OFFSET:     0x14bcd     84941  >>84949

0x1caab:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1caae:	cmp edx, eax                        #    if |(|product_name_length + 2 + info_length < title_window->columns)
0x1cab0:	jge 0x1cca4                         
0x1cab6:	mov rax, qword ptr [rip + 0x14bbb]  #	length = title_window|-|>columns - product_name_length - info_length;
MEMORY OFFSET:     0x14bbb     84923  >>84931

0x1cabd:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1cac0:	mov edx, dword ptr [rip + 0x14b82]  #	length = title_window->columns |-| product_name_length - info_length;
MEMORY OFFSET:     0x14b82     84866  >>84874

0x1cac6:	sub eax, edx                        
0x1cac8:	mov edx, dword ptr [rip + 0x14b86]  #	length = title_window->columns - product_name_length |-| info_length;
MEMORY OFFSET:     0x14b86     84870  >>84878

0x1cace:	sub eax, edx                        #	length |=| title_window->columns - product_name_length - info_length;
0x1cad0:	mov dword ptr [rbp - 0x14], eax     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1cad3:	mov eax, dword ptr [rbp - 0x14]     #	|m|emset(buf, ' ', length);
MEMORY OFFSET:     -0x14     -20  >>-12

0x1cad6:	movsxd rdx, eax                     
0x1cad9:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1cadd:	mov esi, 0x20                       
0x1cae2:	mov rdi, rax                        
0x1cae5:	call 0x4a10                         
0x1caea:	mov rax, qword ptr [rip + 0x14b87]  #	|w|indow_puts(title_window, buf, length);
MEMORY OFFSET:     0x14b87     84871  >>84879

0x1caf1:	mov edx, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1caf4:	mov rcx, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1caf8:	mov rsi, rcx                        
0x1cafb:	mov rdi, rax                        
0x1cafe:	call 0xdb1a                         
0x1cb03:	mov edx, dword ptr [rip + 0x14b3f]  #	|w|indow_goto(title_window, 0, product_name_length + length);
MEMORY OFFSET:     0x14b3f     84799  >>84807

0x1cb09:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1cb0c:	add edx, eax                        
0x1cb0e:	mov rax, qword ptr [rip + 0x14b63]  
MEMORY OFFSET:     0x14b63     84835  >>84843

0x1cb15:	mov esi, 0                          
0x1cb1a:	mov rdi, rax                        
0x1cb1d:	call 0xdc1e                         
0x1cb22:	mov rax, qword ptr [rip + 0x14b4f]  #	|w|indow_puts(title_window, login_string, sizeof(login_string) - 1);
MEMORY OFFSET:     0x14b4f     84815  >>84823

0x1cb29:	mov edx, 5                          
0x1cb2e:	lea rcx, [rip + 0x13bab]            
MEMORY OFFSET:     0x13bab     80811  >>80819

0x1cb35:	mov rsi, rcx                        
0x1cb38:	mov rdi, rax                        
0x1cb3b:	call 0xdb1a                         
0x1cb40:	mov rax, qword ptr [rip + 0x14b31]  #	|w|indow_putc(title_window, ' ');
MEMORY OFFSET:     0x14b31     84785  >>84793

0x1cb47:	mov esi, 0x20                       
0x1cb4c:	mov rdi, rax                        
0x1cb4f:	call 0xdbbc                         
0x1cb54:	mov eax, dword ptr [rip + 0x13b72]  #	|t|ty_foreground(UserName);
MEMORY OFFSET:     0x13b72     80754  >>80762

0x1cb5a:	mov edi, eax                        
0x1cb5c:	call 0xbee3                         
0x1cb61:	mov edx, dword ptr [rip + 0x14ae5]  #	|w|indow_puts(title_window, login_name, login_name_length);
MEMORY OFFSET:     0x14ae5     84709  >>84717

0x1cb67:	mov rcx, qword ptr [rip + 0x14f42]  
MEMORY OFFSET:     0x14f42     85826  >>85834

0x1cb6e:	mov rax, qword ptr [rip + 0x14b03]  
MEMORY OFFSET:     0x14b03     84739  >>84747

0x1cb75:	mov rsi, rcx                        
0x1cb78:	mov rdi, rax                        
0x1cb7b:	call 0xdb1a                         
0x1cb80:	mov rax, qword ptr [rip + 0x14af1]  #	|w|indow_putc(title_window, ' ');
MEMORY OFFSET:     0x14af1     84721  >>84729

0x1cb87:	mov esi, 0x20                       
0x1cb8c:	mov rdi, rax                        
0x1cb8f:	call 0xdbbc                         
0x1cb94:	mov rax, qword ptr [rip + 0x13b6d]  #	window_puts(title_window, mail_string, |s|trlen(mail_string));
MEMORY OFFSET:     0x13b6d     80749  >>80757

0x1cb9b:	mov rdi, rax                        
0x1cb9e:	call 0x4960                         
0x1cba3:	mov edx, eax                        #	|w|indow_puts(title_window, mail_string, strlen(mail_string));
0x1cba5:	mov rcx, qword ptr [rip + 0x13b5c]  
MEMORY OFFSET:     0x13b5c     80732  >>80740

0x1cbac:	mov rax, qword ptr [rip + 0x14ac5]  
MEMORY OFFSET:     0x14ac5     84677  >>84685

0x1cbb3:	mov rsi, rcx                        
0x1cbb6:	mov rdi, rax                        
0x1cbb9:	call 0xdb1a                         
0x1cbbe:	mov rax, qword ptr [rip + 0x14ab3]  #	|w|indow_putc(title_window, ' ');
MEMORY OFFSET:     0x14ab3     84659  >>84667

0x1cbc5:	mov esi, 0x20                       
0x1cbca:	mov rdi, rax                        
0x1cbcd:	call 0xdbbc                         
0x1cbd2:	mov eax, dword ptr [rip + 0x13ae8]  #	|t|ty_foreground(TitleForeground);
MEMORY OFFSET:     0x13ae8     80616  >>80624

0x1cbd8:	mov edi, eax                        
0x1cbda:	call 0xbee3                         
0x1cbdf:	mov rax, qword ptr [rip + 0x14a92]  #	|w|indow_puts(title_window, ttydev_string, sizeof(ttydev_string) - 1);
MEMORY OFFSET:     0x14a92     84626  >>84634

0x1cbe6:	mov edx, 4                          
0x1cbeb:	lea rcx, [rip + 0x13af4]            
MEMORY OFFSET:     0x13af4     80628  >>80636

0x1cbf2:	mov rsi, rcx                        
0x1cbf5:	mov rdi, rax                        
0x1cbf8:	call 0xdb1a                         
0x1cbfd:	mov rax, qword ptr [rip + 0x14a74]  #	|w|indow_putc(title_window, ' ');
MEMORY OFFSET:     0x14a74     84596  >>84604

0x1cc04:	mov esi, 0x20                       
0x1cc09:	mov rdi, rax                        
0x1cc0c:	call 0xdbbc                         
0x1cc11:	mov eax, dword ptr [rip + 0x13ab9]  #	|t|ty_foreground(TtyName);
MEMORY OFFSET:     0x13ab9     80569  >>80577

0x1cc17:	mov edi, eax                        
0x1cc19:	call 0xbee3                         
0x1cc1e:	mov edx, dword ptr [rip + 0x14a2c]  #	|w|indow_puts(title_window, tty_device, tty_device_length);
MEMORY OFFSET:     0x14a2c     84524  >>84532

0x1cc24:	mov rcx, qword ptr [rip + 0x13dbd]  
MEMORY OFFSET:     0x13dbd     81341  >>81349

0x1cc2b:	mov rax, qword ptr [rip + 0x14a46]  
MEMORY OFFSET:     0x14a46     84550  >>84558

0x1cc32:	mov rsi, rcx                        
0x1cc35:	mov rdi, rax                        
0x1cc38:	call 0xdb1a                         
0x1cc3d:	mov eax, dword ptr [rip + 0x13a7d]  #	|t|ty_foreground(TitleForeground);
MEMORY OFFSET:     0x13a7d     80509  >>80517

0x1cc43:	mov edi, eax                        
0x1cc45:	call 0xbee3                         
0x1cc4a:	mov rax, qword ptr [rip + 0x14a27]  #	|w|indow_putc(title_window, ' ');
MEMORY OFFSET:     0x14a27     84519  >>84527

0x1cc51:	mov esi, 0x20                       
0x1cc56:	mov rdi, rax                        
0x1cc59:	call 0xdbbc                         
0x1cc5e:	mov edi, 0                          #	|c|lock_refresh(0);
0x1cc63:	mov eax, 0                          
0x1cc68:	call 0x1c528                        
0x1cc6d:	mov rax, qword ptr [rip + 0x14a04]  #	window_goto(title_window, 0, title_window|-|>columns - 1);
MEMORY OFFSET:     0x14a04     84484  >>84492

0x1cc74:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1cc77:	lea edx, [rax - 1]                  #	|w|indow_goto(title_window, 0, title_window->columns - 1);
MEMORY OFFSET:     -0x1     -1  >>7

0x1cc7a:	mov rax, qword ptr [rip + 0x149f7]  
MEMORY OFFSET:     0x149f7     84471  >>84479

0x1cc81:	mov esi, 0                          
0x1cc86:	mov rdi, rax                        
0x1cc89:	call 0xdc1e                         
0x1cc8e:	mov rax, qword ptr [rip + 0x149e3]  #	|w|indow_putc(title_window, ' ');
MEMORY OFFSET:     0x149e3     84451  >>84459

0x1cc95:	mov esi, 0x20                       
0x1cc9a:	mov rdi, rax                        
0x1cc9d:	call 0xdbbc                         
0x1cca2:	jmp 0x1ccfd                         
0x1cca4:	mov rax, qword ptr [rip + 0x149cd]  #    else if (product_name_length < title_window|-|>columns)
MEMORY OFFSET:     0x149cd     84429  >>84437

0x1ccab:	mov edx, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1ccae:	mov eax, dword ptr [rip + 0x14994]  #    else if (product_name_length |<| title_window->columns)
MEMORY OFFSET:     0x14994     84372  >>84380

0x1ccb4:	cmp edx, eax                        #    else if |(|product_name_length < title_window->columns)
0x1ccb6:	jle 0x1ccfd                         
0x1ccb8:	mov rax, qword ptr [rip + 0x149b9]  #	length = title_window|-|>columns - product_name_length;
MEMORY OFFSET:     0x149b9     84409  >>84417

0x1ccbf:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1ccc2:	mov edx, dword ptr [rip + 0x14980]  #	length = title_window->columns |-| product_name_length;
MEMORY OFFSET:     0x14980     84352  >>84360

0x1ccc8:	sub eax, edx                        #	length |=| title_window->columns - product_name_length;
0x1ccca:	mov dword ptr [rbp - 0x14], eax     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1cccd:	mov eax, dword ptr [rbp - 0x14]     #	|m|emset(buf, ' ', length);
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ccd0:	movsxd rdx, eax                     
0x1ccd3:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1ccd7:	mov esi, 0x20                       
0x1ccdc:	mov rdi, rax                        
0x1ccdf:	call 0x4a10                         
0x1cce4:	mov rax, qword ptr [rip + 0x1498d]  #	|w|indow_puts(title_window, buf, length);
MEMORY OFFSET:     0x1498d     84365  >>84373

0x1cceb:	mov edx, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ccee:	mov rcx, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1ccf2:	mov rsi, rcx                        
0x1ccf5:	mov rdi, rax                        
0x1ccf8:	call 0xdb1a                         
0x1ccfd:	mov rax, qword ptr [rbp - 0x10]     #    |x|free(buf);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1cd01:	mov rdi, rax                        
0x1cd04:	call 0x1eeae                        
0x1cd09:	lea rax, [rbp - 0x15]               #    |t|ty_restore(&status);
MEMORY OFFSET:     -0x15     -21  >>-13

0x1cd0d:	mov rdi, rax                        
0x1cd10:	call 0xc067                         
0x1cd15:	nop                                 #|}|
0x1cd16:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1cd1a:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1cd23:	je 0x1cd2a                          
0x1cd25:	call 0x4980                         
0x1cd2a:	leave                               
0x1cd2b:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/configure.c
####################################################################################################

0x1cd2c:	endbr64                             #|{|
0x1cd30:	push rbp                            
0x1cd31:	mov rbp, rsp                        
0x1cd34:	sub rsp, 0x10                       
0x1cd38:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1cd3c:	cmp qword ptr [rbp - 8], 0          #    if |(|file_name == NULL)
MEMORY OFFSET:     -0x8     -8  >>0

0x1cd41:	jne 0x1cd4a                         
0x1cd43:	mov eax, 0                          #	return |0|;
0x1cd48:	jmp 0x1cd89                         
0x1cd4a:	mov rax, qword ptr [rbp - 8]        #    fileptr = |f|open(file_name, "r");
MEMORY OFFSET:     -0x8     -8  >>0

0x1cd4e:	lea rdx, [rip + 0xc27b]             
MEMORY OFFSET:     0xc27b     49787  >>49795

0x1cd55:	mov rsi, rdx                        
0x1cd58:	mov rdi, rax                        
0x1cd5b:	call 0x4d50                         
0x1cd60:	mov qword ptr [rip + 0x14919], rax  #    fileptr |=| fopen(file_name, "r");
MEMORY OFFSET:     0x14919     84249  >>84257

0x1cd67:	mov rax, qword ptr [rip + 0x14912]  #    if (fileptr |=|= NULL)
MEMORY OFFSET:     0x14912     84242  >>84250

0x1cd6e:	test rax, rax                       #    if |(|fileptr == NULL)
0x1cd71:	jne 0x1cd7a                         
0x1cd73:	mov eax, 0                          #	return |0|;
0x1cd78:	jmp 0x1cd89                         
0x1cd7a:	mov dword ptr [rip + 0x14904], 0xffffffff#    sectionptr |=| -1;
MEMORY OFFSET:     0x14904     84228  >>84236

0x1cd84:	mov eax, 1                          #    return |1|;
0x1cd89:	leave                               #|}|
0x1cd8a:	ret                                 
0x1cd8b:	endbr64                             #|{|
0x1cd8f:	push rbp                            
0x1cd90:	mov rbp, rsp                        
0x1cd93:	mov rax, qword ptr [rip + 0x148e6]  #    if (|f|ileptr)
MEMORY OFFSET:     0x148e6     84198  >>84206

0x1cd9a:	test rax, rax                       #    if |(|fileptr)
0x1cd9d:	je 0x1cdae                          
0x1cd9f:	mov rax, qword ptr [rip + 0x148da]  #	|f|close(fileptr);
MEMORY OFFSET:     0x148da     84186  >>84194

0x1cda6:	mov rdi, rax                        
0x1cda9:	call 0x4900                         
0x1cdae:	nop                                 #|}|
0x1cdaf:	pop rbp                             
0x1cdb0:	ret                                 
0x1cdb1:	endbr64                             #|{|
0x1cdb5:	push rbp                            
0x1cdb6:	mov rbp, rsp                        
0x1cdb9:	sub rsp, 0x20                       
0x1cdbd:	mov rax, qword ptr [rip + 0x148bc]  #    if (|f|gets(line, MAXLINE, fileptr) == NULL)
MEMORY OFFSET:     0x148bc     84156  >>84164

0x1cdc4:	mov rdx, rax                        
0x1cdc7:	mov esi, 0x400                      
0x1cdcc:	lea rax, [rip + 0x148cd]            
MEMORY OFFSET:     0x148cd     84173  >>84181

0x1cdd3:	mov rdi, rax                        
0x1cdd6:	call 0x4ac0                         
0x1cddb:	test rax, rax                       #    if |(|fgets(line, MAXLINE, fileptr) == NULL)
0x1cdde:	jne 0x1cdea                         
0x1cde0:	mov eax, 0                          #	return |0|;
0x1cde5:	jmp 0x1cea3                         
0x1cdea:	lea rax, [rip + 0x148af]            #    if ((len = |s|trlen(line)) == MAXLINE - 1)
MEMORY OFFSET:     0x148af     84143  >>84151

0x1cdf1:	mov rdi, rax                        
0x1cdf4:	call 0x4960                         
0x1cdf9:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1cdfd:	cmp qword ptr [rbp - 0x10], 0x3ff   #    if |(|(len = strlen(line)) == MAXLINE - 1)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1ce05:	jne 0x1ce4c                         
0x1ce07:	mov rdx, qword ptr [rip + 0x13aca]  #	|f|printf(stderr, "%s: configuration: line too long. Truncated.\n",
MEMORY OFFSET:     0x13aca     80586  >>80594

0x1ce0e:	mov rax, qword ptr [rip + 0x13aab]  
MEMORY OFFSET:     0x13aab     80555  >>80563

0x1ce15:	lea rcx, [rip + 0xc1bc]             
MEMORY OFFSET:     0xc1bc     49596  >>49604

0x1ce1c:	mov rsi, rcx                        
0x1ce1f:	mov rdi, rax                        
0x1ce22:	mov eax, 0                          
0x1ce27:	call 0x4b40                         
0x1ce2c:	mov rax, qword ptr [rip + 0x1484d]  #	    c = |f|getc(fileptr);
MEMORY OFFSET:     0x1484d     84045  >>84053

0x1ce33:	mov rdi, rax                        
0x1ce36:	call 0x4a50                         
0x1ce3b:	mov dword ptr [rbp - 0x14], eax     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ce3e:	cmp dword ptr [rbp - 0x14], 0xa     #	    if |(|c == '\n' || c == EOF)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ce42:	je 0x1ce4c                          
0x1ce44:	cmp dword ptr [rbp - 0x14], -1      #	    if (c == '\n' |||| c == EOF)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ce48:	je 0x1ce4c                          
0x1ce4a:	jmp 0x1ce2c                         #	    c |=| fgetc(fileptr);
0x1ce4c:	mov esi, 0x23                       #    if ((comment = |s|trchr(line, ICS)))
0x1ce51:	lea rax, [rip + 0x14848]            
MEMORY OFFSET:     0x14848     84040  >>84048

0x1ce58:	mov rdi, rax                        
0x1ce5b:	call 0x49b0                         
0x1ce60:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1ce64:	cmp qword ptr [rbp - 8], 0          #    if |(|(comment = strchr(line, ICS)))
MEMORY OFFSET:     -0x8     -8  >>0

0x1ce69:	je 0x1ce74                          
0x1ce6b:	mov rax, qword ptr [rbp - 8]        #	*comment |=| 0;
MEMORY OFFSET:     -0x8     -8  >>0

0x1ce6f:	mov byte ptr [rax], 0               
0x1ce72:	jmp 0x1ce9e                         
0x1ce74:	mov rax, qword ptr [rbp - 0x10]     #	if (line[len |-| 1] == '\n')
MEMORY OFFSET:     -0x10     -16  >>-8

0x1ce78:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1ce7c:	lea rax, [rip + 0x1481d]            #	if (line|[|len - 1] == '\n')
MEMORY OFFSET:     0x1481d     83997  >>84005

0x1ce83:	movzx eax, byte ptr [rdx + rax]     
0x1ce87:	cmp al, 0xa                         #	if |(|line[len - 1] == '\n')
0x1ce89:	jne 0x1ce9e                         
0x1ce8b:	mov rax, qword ptr [rbp - 0x10]     #	    line[len |-| 1] = 0;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1ce8f:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1ce93:	lea rax, [rip + 0x14806]            #	    line[len - 1] |=| 0;
MEMORY OFFSET:     0x14806     83974  >>83982

0x1ce9a:	mov byte ptr [rdx + rax], 0         
0x1ce9e:	mov eax, 1                          #    return |1|;
0x1cea3:	leave                               #|}|
0x1cea4:	ret                                 
0x1cea5:	endbr64                             #|{|
0x1cea9:	push rbp                            
0x1ceaa:	mov rbp, rsp                        
0x1cead:	sub rsp, 0x10                       
0x1ceb1:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1ceb5:	mov rax, qword ptr [rip + 0x147c4]  #    |f|seek(fileptr, 0, SEEK_SET);
MEMORY OFFSET:     0x147c4     83908  >>83916

0x1cebc:	mov edx, 0                          
0x1cec1:	mov esi, 0                          
0x1cec6:	mov rdi, rax                        
0x1cec9:	call 0x4c50                         
0x1cece:	jmp 0x1cf07                         #    while |(|configuration_getline())
0x1ced0:	mov rax, qword ptr [rbp - 8]        #	if (|s|trcmp(section_name, line) == 0)
MEMORY OFFSET:     -0x8     -8  >>0

0x1ced4:	lea rdx, [rip + 0x147c5]            
MEMORY OFFSET:     0x147c5     83909  >>83917

0x1cedb:	mov rsi, rdx                        
0x1cede:	mov rdi, rax                        
0x1cee1:	call 0x4af0                         
0x1cee6:	test eax, eax                       #	if |(|strcmp(section_name, line) == 0)
0x1cee8:	jne 0x1cf07                         
0x1ceea:	mov rax, qword ptr [rip + 0x1478f]  #	    return sectionptr = |f|tell(fileptr);
MEMORY OFFSET:     0x1478f     83855  >>83863

0x1cef1:	mov rdi, rax                        
0x1cef4:	call 0x4b50                         
0x1cef9:	mov dword ptr [rip + 0x14789], eax  #	    return sectionptr |=| ftell(fileptr);
MEMORY OFFSET:     0x14789     83849  >>83857

0x1ceff:	mov eax, dword ptr [rip + 0x14783]  
MEMORY OFFSET:     0x14783     83843  >>83851

0x1cf05:	jmp 0x1cf25                         
0x1cf07:	mov eax, 0                          #    while (|c|onfiguration_getline())
0x1cf0c:	call 0x1cdb1                        
0x1cf11:	test eax, eax                       
0x1cf13:	jne 0x1ced0                         
0x1cf15:	mov dword ptr [rip + 0x14769], 0xffffffff#    return sectionptr |=| -1;
MEMORY OFFSET:     0x14769     83817  >>83825

0x1cf1f:	mov eax, dword ptr [rip + 0x14763]  
MEMORY OFFSET:     0x14763     83811  >>83819

0x1cf25:	leave                               #|}|
0x1cf26:	ret                                 
0x1cf27:	endbr64                             #|{|
0x1cf2b:	push rbp                            
0x1cf2c:	mov rbp, rsp                        
0x1cf2f:	push rbx                            
0x1cf30:	sub rsp, 0x458                      
0x1cf37:	mov qword ptr [rbp - 0x448], rdi    
MEMORY OFFSET:     -0x448     -1096  >>-1088

0x1cf3e:	mov qword ptr [rbp - 0x450], rsi    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1cf45:	mov dword ptr [rbp - 0x454], edx    
MEMORY OFFSET:     -0x454     -1108  >>-1100

0x1cf4b:	mov dword ptr [rbp - 0x458], ecx    
MEMORY OFFSET:     -0x458     -1112  >>-1104

0x1cf51:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1cf5a:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1cf5e:	xor eax, eax                        
0x1cf60:	cmp dword ptr [rbp - 0x458], 0      #    if |(|seek)
MEMORY OFFSET:     -0x458     -1112  >>-1104

0x1cf67:	je 0x1cf89                          
0x1cf69:	mov eax, dword ptr [rip + 0x14719]  #	|f|seek(fileptr, sectionptr, SEEK_SET);
MEMORY OFFSET:     0x14719     83737  >>83745

0x1cf6f:	movsxd rcx, eax                     
0x1cf72:	mov rax, qword ptr [rip + 0x14707]  
MEMORY OFFSET:     0x14707     83719  >>83727

0x1cf79:	mov edx, 0                          
0x1cf7e:	mov rsi, rcx                        
0x1cf81:	mov rdi, rax                        
0x1cf84:	call 0x4c50                         
0x1cf89:	cmp dword ptr [rbp - 0x454], 1      #    if |(|fields == 1)
MEMORY OFFSET:     -0x454     -1108  >>-1100

0x1cf90:	jne 0x1cfa5                         
0x1cf92:	mov rax, qword ptr [rbp - 0x450]    #	*dest |=| 0;
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1cf99:	mov qword ptr [rax], 0              
0x1cfa0:	jmp 0x1d35c                         
0x1cfa5:	mov eax, dword ptr [rbp - 0x454]    #	|m|emset((char *)dest, 0, fields * sizeof(char *));
MEMORY OFFSET:     -0x454     -1108  >>-1100

0x1cfab:	cdqe                                
0x1cfad:	lea rdx, [rax*8]                    
0x1cfb5:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1cfbc:	mov esi, 0                          
0x1cfc1:	mov rdi, rax                        
0x1cfc4:	call 0x4a10                         
0x1cfc9:	jmp 0x1d35c                         #    while |(|configuration_getline() && *line)
0x1cfce:	mov byte ptr [rbp - 0x420], 0       #	*buf |=| 0;
MEMORY OFFSET:     -0x420     -1056  >>-1048

0x1cfd5:	lea rax, [rbp - 0x420]              #	|s|scanf(line, "%s", buf);
MEMORY OFFSET:     -0x420     -1056  >>-1048

0x1cfdc:	mov rdx, rax                        
0x1cfdf:	lea rax, [rip + 0xc020]             
MEMORY OFFSET:     0xc020     49184  >>49192

0x1cfe6:	mov rsi, rax                        
0x1cfe9:	lea rax, [rip + 0x146b0]            
MEMORY OFFSET:     0x146b0     83632  >>83640

0x1cff0:	mov rdi, rax                        
0x1cff3:	mov eax, 0                          
0x1cff8:	call 0x4c30                         
0x1cffd:	cmp dword ptr [rbp - 0x458], 0      #	if |(|seek == NO_SEEK)
MEMORY OFFSET:     -0x458     -1112  >>-1104

0x1d004:	jne 0x1d00d                         
0x1d006:	mov byte ptr [rbp - 0x400], 0       #	    buf[32] |=| 0;        /* Just in case... */
MEMORY OFFSET:     -0x400     -1024  >>-1016

0x1d00d:	call 0x4ec0                         #	if (!|i|sprint((int)*buf))
0x1d012:	mov rdx, qword ptr [rax]            
0x1d015:	movzx eax, byte ptr [rbp - 0x420]   
MEMORY OFFSET:     -0x420     -1056  >>-1048

0x1d01c:	movsx rax, al                       
0x1d020:	add rax, rax                        
0x1d023:	add rax, rdx                        
0x1d026:	movzx eax, word ptr [rax]           
0x1d029:	movzx eax, ax                       
0x1d02c:	and eax, 0x4000                     
0x1d031:	test eax, eax                       #	if |(|!isprint((int)*buf))
0x1d033:	je 0x1d38e                          
0x1d039:	cmp dword ptr [rbp - 0x458], 0      #	if |(|seek == NO_SEEK || strcmp(var_name, buf) == 0)
MEMORY OFFSET:     -0x458     -1112  >>-1104

0x1d040:	je 0x1d063                          
0x1d042:	lea rdx, [rbp - 0x420]              #	if (seek == NO_SEEK || |s|trcmp(var_name, buf) == 0)
MEMORY OFFSET:     -0x420     -1056  >>-1048

0x1d049:	mov rax, qword ptr [rbp - 0x448]    
MEMORY OFFSET:     -0x448     -1096  >>-1088

0x1d050:	mov rsi, rdx                        
0x1d053:	mov rdi, rax                        
0x1d056:	call 0x4af0                         
0x1d05b:	test eax, eax                       #	if (seek == NO_SEEK |||| strcmp(var_name, buf) == 0)
0x1d05d:	jne 0x1d35c                         
0x1d063:	mov esi, 0x3d                       #	    if ((ptr = |s|trchr(line, IAS)) && *++ptr)
0x1d068:	lea rax, [rip + 0x14631]            
MEMORY OFFSET:     0x14631     83505  >>83513

0x1d06f:	mov rdi, rax                        
0x1d072:	call 0x49b0                         
0x1d077:	mov qword ptr [rbp - 0x430], rax    
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d07e:	cmp qword ptr [rbp - 0x430], 0      #	    if |(|(ptr = strchr(line, IAS)) && *++ptr)
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d086:	je 0x1d185                          
0x1d08c:	add qword ptr [rbp - 0x430], 1      #	    if ((ptr = strchr(line, IAS)) |&|& *++ptr)
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d094:	mov rax, qword ptr [rbp - 0x430]    #	    if ((ptr = strchr(line, IAS)) && |*|++ptr)
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d09b:	movzx eax, byte ptr [rax]           
0x1d09e:	test al, al                         #	    if ((ptr = strchr(line, IAS)) |&|& *++ptr)
0x1d0a0:	je 0x1d185                          
0x1d0a6:	mov rax, qword ptr [rbp - 0x450]    #		for (dest[0] |=| ptr, fld = 1; *ptr && fld < fields; ptr++)
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d0ad:	mov rdx, qword ptr [rbp - 0x430]    
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d0b4:	mov qword ptr [rax], rdx            
0x1d0b7:	mov dword ptr [rbp - 0x434], 1      #		for (dest[0] = ptr, fld |=| 1; *ptr && fld < fields; ptr++)
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d0c1:	jmp 0x1d136                         #		|f|or (dest[0] = ptr, fld = 1; *ptr && fld < fields; ptr++)
0x1d0c3:	mov rax, qword ptr [rbp - 0x430]    #		    if (|*|ptr == IFS)
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d0ca:	movzx eax, byte ptr [rax]           
0x1d0cd:	cmp al, 0x3b                        #		    if |(|*ptr == IFS)
0x1d0cf:	jne 0x1d12e                         
0x1d0d1:	mov rax, qword ptr [rbp - 0x430]    #			*ptr |=| 0;
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d0d8:	mov byte ptr [rax], 0               
0x1d0db:	mov rax, qword ptr [rbp - 0x430]    #			if (*(ptr |+| 1) && *(ptr + 1) != IFS)
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d0e2:	add rax, 1                          
0x1d0e6:	movzx eax, byte ptr [rax]           #			if (|*|(ptr + 1) && *(ptr + 1) != IFS)
0x1d0e9:	test al, al                         #			if |(|*(ptr + 1) && *(ptr + 1) != IFS)
0x1d0eb:	je 0x1d127                          
0x1d0ed:	mov rax, qword ptr [rbp - 0x430]    #			if (*(ptr + 1) && *(ptr |+| 1) != IFS)
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d0f4:	add rax, 1                          
0x1d0f8:	movzx eax, byte ptr [rax]           #			if (*(ptr + 1) && |*|(ptr + 1) != IFS)
0x1d0fb:	cmp al, 0x3b                        #			if (*(ptr + 1) |&|& *(ptr + 1) != IFS)
0x1d0fd:	je 0x1d127                          
0x1d0ff:	mov eax, dword ptr [rbp - 0x434]    #			    dest|[|fld] = ptr + 1;
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d105:	cdqe                                
0x1d107:	lea rdx, [rax*8]                    
0x1d10f:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d116:	add rax, rdx                        
0x1d119:	mov rdx, qword ptr [rbp - 0x430]    #			    dest[fld] = ptr |+| 1;
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d120:	add rdx, 1                          
0x1d124:	mov qword ptr [rax], rdx            #			    dest[fld] |=| ptr + 1;
0x1d127:	add dword ptr [rbp - 0x434], 1      #			fld|+|+;
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d12e:	add qword ptr [rbp - 0x430], 1      #		for (dest[0] = ptr, fld = 1; *ptr && fld < fields; ptr|+|+)
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d136:	mov rax, qword ptr [rbp - 0x430]    #		for (dest[0] = ptr, fld = 1; |*|ptr && fld < fields; ptr++)
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d13d:	movzx eax, byte ptr [rax]           
0x1d140:	test al, al                         #		for (dest[0] = ptr, fld = 1; *ptr |&|& fld < fields; ptr++)
0x1d142:	je 0x1d156                          
0x1d144:	mov eax, dword ptr [rbp - 0x434]    #		for (dest[0] = ptr, fld = 1; *ptr |&|& fld < fields; ptr++)
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d14a:	cmp eax, dword ptr [rbp - 0x454]    
MEMORY OFFSET:     -0x454     -1108  >>-1100

0x1d150:	jl 0x1d0c3                          
0x1d156:	mov rax, qword ptr [rbp - 0x430]    #		if ((ptr = |s|trchr(ptr, IFS)))
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d15d:	mov esi, 0x3b                       
0x1d162:	mov rdi, rax                        
0x1d165:	call 0x49b0                         
0x1d16a:	mov qword ptr [rbp - 0x430], rax    
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d171:	cmp qword ptr [rbp - 0x430], 0      #		if |(|(ptr = strchr(ptr, IFS)))
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d179:	je 0x1d185                          
0x1d17b:	mov rax, qword ptr [rbp - 0x430]    #		    *ptr |=| 0;
MEMORY OFFSET:     -0x430     -1072  >>-1064

0x1d182:	mov byte ptr [rax], 0               
0x1d185:	mov dword ptr [rbp - 0x434], 0      #	    for (fld |=| 0; fld < fields; fld++)
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d18f:	jmp 0x1d326                         #	    |f|or (fld = 0; fld < fields; fld++)
0x1d194:	mov eax, dword ptr [rbp - 0x434]    #		if (dest|[|fld])
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d19a:	cdqe                                
0x1d19c:	lea rdx, [rax*8]                    
0x1d1a4:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d1ab:	add rax, rdx                        
0x1d1ae:	mov rax, qword ptr [rax]            
0x1d1b1:	test rax, rax                       #		if |(|dest[fld])
0x1d1b4:	je 0x1d31f                          
0x1d1ba:	jmp 0x1d1e0                         #		    while |(|isspace((int)*dest[fld]))
0x1d1bc:	mov eax, dword ptr [rbp - 0x434]    #			dest|[|fld]++;
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d1c2:	cdqe                                
0x1d1c4:	lea rdx, [rax*8]                    
0x1d1cc:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d1d3:	add rax, rdx                        
0x1d1d6:	mov rdx, qword ptr [rax]            
0x1d1d9:	add rdx, 1                          #			dest[fld]|+|+;
0x1d1dd:	mov qword ptr [rax], rdx            
0x1d1e0:	call 0x4ec0                         #		    while (|i|sspace((int)*dest[fld]))
0x1d1e5:	mov rdx, qword ptr [rax]            
0x1d1e8:	mov eax, dword ptr [rbp - 0x434]    
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d1ee:	cdqe                                
0x1d1f0:	lea rcx, [rax*8]                    
0x1d1f8:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d1ff:	add rax, rcx                        
0x1d202:	mov rax, qword ptr [rax]            
0x1d205:	movzx eax, byte ptr [rax]           
0x1d208:	movsx rax, al                       
0x1d20c:	add rax, rax                        
0x1d20f:	add rax, rdx                        
0x1d212:	movzx eax, word ptr [rax]           
0x1d215:	movzx eax, ax                       
0x1d218:	and eax, 0x2000                     
0x1d21d:	test eax, eax                       
0x1d21f:	jne 0x1d1bc                         
0x1d221:	mov eax, dword ptr [rbp - 0x434]    #		    tmp = dest|[|fld] + strlen(dest[fld]) - 1;
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d227:	cdqe                                
0x1d229:	lea rdx, [rax*8]                    
0x1d231:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d238:	add rax, rdx                        
0x1d23b:	mov rbx, qword ptr [rax]            
0x1d23e:	mov eax, dword ptr [rbp - 0x434]    #		    tmp = dest[fld] + strlen(dest|[|fld]) - 1;
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d244:	cdqe                                
0x1d246:	lea rdx, [rax*8]                    
0x1d24e:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d255:	add rax, rdx                        
0x1d258:	mov rax, qword ptr [rax]            #		    tmp = dest[fld] + |s|trlen(dest[fld]) - 1;
0x1d25b:	mov rdi, rax                        
0x1d25e:	call 0x4960                         
0x1d263:	sub rax, 1                          #		    tmp = dest[fld] + strlen(dest[fld]) |-| 1;
0x1d267:	add rax, rbx                        #		    tmp |=| dest[fld] + strlen(dest[fld]) - 1;
0x1d26a:	mov qword ptr [rbp - 0x428], rax    
MEMORY OFFSET:     -0x428     -1064  >>-1056

0x1d271:	jmp 0x1d27b                         #		    while |(|isspace((int)*tmp) && tmp >= dest[fld])
0x1d273:	sub qword ptr [rbp - 0x428], 1      #			tmp|-|-;
MEMORY OFFSET:     -0x428     -1064  >>-1056

0x1d27b:	call 0x4ec0                         #		    while (|i|sspace((int)*tmp) && tmp >= dest[fld])
0x1d280:	mov rdx, qword ptr [rax]            
0x1d283:	mov rax, qword ptr [rbp - 0x428]    
MEMORY OFFSET:     -0x428     -1064  >>-1056

0x1d28a:	movzx eax, byte ptr [rax]           
0x1d28d:	movsx rax, al                       
0x1d291:	add rax, rax                        
0x1d294:	add rax, rdx                        
0x1d297:	movzx eax, word ptr [rax]           
0x1d29a:	movzx eax, ax                       
0x1d29d:	and eax, 0x2000                     
0x1d2a2:	test eax, eax                       #		    while (isspace((int)*tmp) |&|& tmp >= dest[fld])
0x1d2a4:	je 0x1d2cc                          
0x1d2a6:	mov eax, dword ptr [rbp - 0x434]    #		    while (isspace((int)*tmp) && tmp >= dest|[|fld])
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d2ac:	cdqe                                
0x1d2ae:	lea rdx, [rax*8]                    
0x1d2b6:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d2bd:	add rax, rdx                        
0x1d2c0:	mov rax, qword ptr [rax]            
0x1d2c3:	cmp qword ptr [rbp - 0x428], rax    #		    while (isspace((int)*tmp) |&|& tmp >= dest[fld])
MEMORY OFFSET:     -0x428     -1064  >>-1056

0x1d2ca:	jae 0x1d273                         
0x1d2cc:	mov rax, qword ptr [rbp - 0x428]    #		    *(tmp |+| 1) = 0;
MEMORY OFFSET:     -0x428     -1064  >>-1056

0x1d2d3:	add rax, 1                          
0x1d2d7:	mov byte ptr [rax], 0               #		    *(tmp + 1) |=| 0;
0x1d2da:	mov eax, dword ptr [rbp - 0x434]    #		    if (dest|[|fld][0] == 0)
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d2e0:	cdqe                                
0x1d2e2:	lea rdx, [rax*8]                    
0x1d2ea:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d2f1:	add rax, rdx                        
0x1d2f4:	mov rax, qword ptr [rax]            
0x1d2f7:	movzx eax, byte ptr [rax]           #		    if (dest[fld]|[|0] == 0)
0x1d2fa:	test al, al                         #		    if |(|dest[fld][0] == 0)
0x1d2fc:	jne 0x1d31f                         
0x1d2fe:	mov eax, dword ptr [rbp - 0x434]    #			dest|[|fld] = NULL;
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d304:	cdqe                                
0x1d306:	lea rdx, [rax*8]                    
0x1d30e:	mov rax, qword ptr [rbp - 0x450]    
MEMORY OFFSET:     -0x450     -1104  >>-1096

0x1d315:	add rax, rdx                        
0x1d318:	mov qword ptr [rax], 0              #			dest[fld] |=| NULL;
0x1d31f:	add dword ptr [rbp - 0x434], 1      #	    for (fld = 0; fld < fields; fld|+|+)
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d326:	mov eax, dword ptr [rbp - 0x434]    #	    for (fld = 0; fld |<| fields; fld++)
MEMORY OFFSET:     -0x434     -1076  >>-1068

0x1d32c:	cmp eax, dword ptr [rbp - 0x454]    
MEMORY OFFSET:     -0x454     -1108  >>-1100

0x1d332:	jl 0x1d194                          
0x1d338:	cmp dword ptr [rbp - 0x458], 0      #	    if |(|seek == NO_SEEK)
MEMORY OFFSET:     -0x458     -1112  >>-1104

0x1d33f:	jne 0x1d391                         
0x1d341:	lea rdx, [rbp - 0x420]              #		|s|trcpy(var_name, buf);
MEMORY OFFSET:     -0x420     -1056  >>-1048

0x1d348:	mov rax, qword ptr [rbp - 0x448]    
MEMORY OFFSET:     -0x448     -1096  >>-1088

0x1d34f:	mov rsi, rdx                        
0x1d352:	mov rdi, rax                        
0x1d355:	call 0x4870                         
0x1d35a:	jmp 0x1d391                         #	    |r|eturn;
0x1d35c:	mov eax, 0                          #    while (|c|onfiguration_getline() && *line)
0x1d361:	call 0x1cdb1                        
0x1d366:	test eax, eax                       #    while (configuration_getline() |&|& *line)
0x1d368:	je 0x1d379                          
0x1d36a:	movzx eax, byte ptr [rip + 0x1432f] #    while (configuration_getline() && |*|line)
MEMORY OFFSET:     0x1432f     82735  >>82743

0x1d371:	test al, al                         #    while (configuration_getline() |&|& *line)
0x1d373:	jne 0x1cfce                         
0x1d379:	cmp dword ptr [rbp - 0x458], 0      #    if |(|seek == NO_SEEK)
MEMORY OFFSET:     -0x458     -1112  >>-1104

0x1d380:	jne 0x1d392                         
0x1d382:	mov rax, qword ptr [rbp - 0x448]    #	*var_name |=| 0;
MEMORY OFFSET:     -0x448     -1096  >>-1088

0x1d389:	mov byte ptr [rax], 0               
0x1d38c:	jmp 0x1d392                         
0x1d38e:	nop                                 #	    |r|eturn;
0x1d38f:	jmp 0x1d392                         
0x1d391:	nop                                 #	    |r|eturn;
0x1d392:	mov rax, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d396:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1d39f:	je 0x1d3a6                          
0x1d3a1:	call 0x4980                         
0x1d3a6:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d3aa:	leave                               
0x1d3ab:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/misc.c
####################################################################################################

0x1d3ac:	endbr64                             #|{|
0x1d3b0:	push rbp                            
0x1d3b1:	mov rbp, rsp                        
0x1d3b4:	sub rsp, 0x10                       
0x1d3b8:	lea rax, [rip + 0xbc9d]             #    char *|p|refix_relative_bin_dir = "/bin";
MEMORY OFFSET:     0xbc9d     48285  >>48293

0x1d3bf:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1d3c3:	lea rax, [rip + 0xbc97]             #    char *|p|refix_relative_term_dir = "/share/gnuit";
MEMORY OFFSET:     0xbc97     48279  >>48287

0x1d3ca:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d3ce:	mov rax, qword ptr [rbp - 0x10]     #    bindir = xmalloc(strlen(PREFIX) + |s|trlen(prefix_relative_bin_dir) + 1);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1d3d2:	mov rdi, rax                        
0x1d3d5:	call 0x4960                         
0x1d3da:	add rax, 0xb                        #    bindir = |x|malloc(strlen(PREFIX) + strlen(prefix_relative_bin_dir) + 1);
0x1d3de:	mov rdi, rax                        
0x1d3e1:	call 0x24650                        
0x1d3e6:	mov qword ptr [rip + 0x146bb], rax  #    bindir |=| xmalloc(strlen(PREFIX) + strlen(prefix_relative_bin_dir) + 1);
MEMORY OFFSET:     0x146bb     83643  >>83651

0x1d3ed:	mov rax, qword ptr [rip + 0x146b4]  #    |s|printf(bindir, "%s%s", PREFIX, prefix_relative_bin_dir);
MEMORY OFFSET:     0x146b4     83636  >>83644

0x1d3f4:	mov rdx, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1d3f8:	mov rcx, rdx                        
0x1d3fb:	lea rdx, [rip + 0xbc6c]             
MEMORY OFFSET:     0xbc6c     48236  >>48244

0x1d402:	lea rsi, [rip + 0xbc70]             
MEMORY OFFSET:     0xbc70     48240  >>48248

0x1d409:	mov rdi, rax                        
0x1d40c:	mov eax, 0                          
0x1d411:	call 0x4dd0                         
0x1d416:	mov rax, qword ptr [rbp - 8]        #    termdir = xmalloc(strlen(PREFIX) + |s|trlen(prefix_relative_term_dir) + 1);
MEMORY OFFSET:     -0x8     -8  >>0

0x1d41a:	mov rdi, rax                        
0x1d41d:	call 0x4960                         
0x1d422:	add rax, 0xb                        #    termdir = |x|malloc(strlen(PREFIX) + strlen(prefix_relative_term_dir) + 1);
0x1d426:	mov rdi, rax                        
0x1d429:	call 0x24650                        
0x1d42e:	mov qword ptr [rip + 0x1466b], rax  #    termdir |=| xmalloc(strlen(PREFIX) + strlen(prefix_relative_term_dir) + 1);
MEMORY OFFSET:     0x1466b     83563  >>83571

0x1d435:	mov rax, qword ptr [rip + 0x14664]  #    |s|printf(termdir, "%s%s", PREFIX, prefix_relative_term_dir);
MEMORY OFFSET:     0x14664     83556  >>83564

0x1d43c:	mov rdx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d440:	mov rcx, rdx                        
0x1d443:	lea rdx, [rip + 0xbc24]             
MEMORY OFFSET:     0xbc24     48164  >>48172

0x1d44a:	lea rsi, [rip + 0xbc28]             
MEMORY OFFSET:     0xbc28     48168  >>48176

0x1d451:	mov rdi, rax                        
0x1d454:	mov eax, 0                          
0x1d459:	call 0x4dd0                         
0x1d45e:	nop                                 #|}|
0x1d45f:	leave                               
0x1d460:	ret                                 
0x1d461:	endbr64                             #|{|
0x1d465:	push rbp                            
0x1d466:	mov rbp, rsp                        
0x1d469:	push rbx                            
0x1d46a:	sub rsp, 0x18                       
0x1d46e:	lea rax, [rip + 0xbc09]             #    char *path = |g|etenv("PATH");
MEMORY OFFSET:     0xbc09     48137  >>48145

0x1d475:	mov rdi, rax                        
0x1d478:	call 0x47a0                         
0x1d47d:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1d481:	cmp qword ptr [rbp - 0x20], 0       #    if |(|path == NULL)
MEMORY OFFSET:     -0x20     -32  >>-24

0x1d486:	jne 0x1d4a3                         
0x1d488:	mov rax, qword ptr [rip + 0x14619]  #	|x|setenv("PATH", bindir);
MEMORY OFFSET:     0x14619     83481  >>83489

0x1d48f:	mov rsi, rax                        
0x1d492:	lea rax, [rip + 0xbbe5]             
MEMORY OFFSET:     0xbbe5     48101  >>48109

0x1d499:	mov rdi, rax                        
0x1d49c:	call 0x1e50a                        
0x1d4a1:	jmp 0x1d519                         #|}|
0x1d4a3:	mov rax, qword ptr [rbp - 0x20]     #	char *new_value = xmalloc(|s|trlen(path) + 1 + strlen(bindir) + 1);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1d4a7:	mov rdi, rax                        
0x1d4aa:	call 0x4960                         
0x1d4af:	mov rbx, rax                        
0x1d4b2:	mov rax, qword ptr [rip + 0x145ef]  #	char *new_value = xmalloc(strlen(path) + 1 + |s|trlen(bindir) + 1);
MEMORY OFFSET:     0x145ef     83439  >>83447

0x1d4b9:	mov rdi, rax                        
0x1d4bc:	call 0x4960                         
0x1d4c1:	add rax, rbx                        #	char *new_value = xmalloc(strlen(path) + 1 |+| strlen(bindir) + 1);
0x1d4c4:	add rax, 2                          #	char *new_value = |x|malloc(strlen(path) + 1 + strlen(bindir) + 1);
0x1d4c8:	mov rdi, rax                        
0x1d4cb:	call 0x24650                        
0x1d4d0:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d4d4:	mov rcx, qword ptr [rip + 0x145cd]  #	|s|printf(new_value, "%s:%s", path, bindir);
MEMORY OFFSET:     0x145cd     83405  >>83413

0x1d4db:	mov rdx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1d4df:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d4e3:	lea rsi, [rip + 0xbb99]             
MEMORY OFFSET:     0xbb99     48025  >>48033

0x1d4ea:	mov rdi, rax                        
0x1d4ed:	mov eax, 0                          
0x1d4f2:	call 0x4dd0                         
0x1d4f7:	mov rax, qword ptr [rbp - 0x18]     #	|x|setenv("PATH", new_value);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d4fb:	mov rsi, rax                        
0x1d4fe:	lea rax, [rip + 0xbb79]             
MEMORY OFFSET:     0xbb79     47993  >>48001

0x1d505:	mov rdi, rax                        
0x1d508:	call 0x1e50a                        
0x1d50d:	mov rax, qword ptr [rbp - 0x18]     #	|x|free(new_value);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d511:	mov rdi, rax                        
0x1d514:	call 0x1eeae                        
0x1d519:	nop                                 #|}|
0x1d51a:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d51e:	leave                               
0x1d51f:	ret                                 
0x1d520:	endbr64                             #|{|
0x1d524:	push rbp                            
0x1d525:	mov rbp, rsp                        
0x1d528:	sub rsp, 0x20                       
0x1d52c:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d530:	mov eax, 0                          #    struct tm *time = |g|et_local_time();
0x1d535:	call 0x1e4bf                        
0x1d53a:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d53e:	call 0x48f0                         #	    time->tm_min, time->tm_sec, g_program, (int)|g|etpid(), signame);
0x1d543:	mov esi, eax                        
0x1d545:	mov r8, qword ptr [rip + 0x1338c]   #    |f|printf(stderr, "%s %d %2d:%02d:%02d %s[%d]: exiting on %s signal\n",
MEMORY OFFSET:     0x1338c     78732  >>78740

0x1d54c:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d550:	mov edi, dword ptr [rax]            
0x1d552:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d556:	mov r9d, dword ptr [rax + 4]        
MEMORY OFFSET:     0x4     4  >>12

0x1d55a:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d55e:	mov r10d, dword ptr [rax + 8]       
MEMORY OFFSET:     0x8     8  >>16

0x1d562:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d566:	mov ecx, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1d569:	mov rax, qword ptr [rbp - 8]        #	    month_name[time|-|>tm_mon], time->tm_mday, time->tm_hour,
MEMORY OFFSET:     -0x8     -8  >>0

0x1d56d:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x1d570:	cdqe                                #    |f|printf(stderr, "%s %d %2d:%02d:%02d %s[%d]: exiting on %s signal\n",
0x1d572:	lea rdx, [rax*8]                    
0x1d57a:	lea rax, [rip + 0x131ff]            
MEMORY OFFSET:     0x131ff     78335  >>78343

0x1d581:	mov rdx, qword ptr [rdx + rax]      
0x1d585:	mov rax, qword ptr [rip + 0x13334]  
MEMORY OFFSET:     0x13334     78644  >>78652

0x1d58c:	push qword ptr [rbp - 0x18]         
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d58f:	push rsi                            
0x1d590:	push r8                             
0x1d592:	push rdi                            
0x1d593:	mov r8d, r10d                       
0x1d596:	lea rsi, [rip + 0xbaf3]             
MEMORY OFFSET:     0xbaf3     47859  >>47867

0x1d59d:	mov rdi, rax                        
0x1d5a0:	mov eax, 0                          
0x1d5a5:	call 0x4b40                         
0x1d5aa:	add rsp, 0x20                       
0x1d5ae:	nop                                 #|}|
0x1d5af:	leave                               
0x1d5b0:	ret                                 
0x1d5b1:	endbr64                             #|{|
0x1d5b5:	push rbp                            
0x1d5b6:	mov rbp, rsp                        
0x1d5b9:	sub rsp, 0x10                       
0x1d5bd:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x1d5c0:	mov eax, 0                          #    |c|lean_up();
0x1d5c5:	call 0x6703                         
0x1d5ca:	cmp dword ptr [rbp - 4], 0xf        #    |s|witch (signum)
MEMORY OFFSET:     -0x4     -4  >>4

0x1d5ce:	je 0x1d5ec                          
0x1d5d0:	cmp dword ptr [rbp - 4], 0xf        
MEMORY OFFSET:     -0x4     -4  >>4

0x1d5d4:	jg 0x1d62e                          
0x1d5d6:	cmp dword ptr [rbp - 4], 2          
MEMORY OFFSET:     -0x4     -4  >>4

0x1d5da:	jg 0x1d5e4                          
0x1d5dc:	cmp dword ptr [rbp - 4], 0          
MEMORY OFFSET:     -0x4     -4  >>4

0x1d5e0:	jg 0x1d5fd                          
0x1d5e2:	jmp 0x1d62e                         
0x1d5e4:	cmp dword ptr [rbp - 4], 0xb        
MEMORY OFFSET:     -0x4     -4  >>4

0x1d5e8:	je 0x1d61d                          
0x1d5ea:	jmp 0x1d62e                         
0x1d5ec:	lea rax, [rip + 0xbacf]             #	    |d|isplay_exit_message("TERM");
MEMORY OFFSET:     0xbacf     47823  >>47831

0x1d5f3:	mov rdi, rax                        
0x1d5f6:	call 0x1d520                        
0x1d5fb:	jmp 0x1d679                         #	    |b|reak;
0x1d5fd:	cmp dword ptr [rbp - 4], 1          #	    |d|isplay_exit_message((signum == SIGHUP) ? "HUP" : "INT");
MEMORY OFFSET:     -0x4     -4  >>4

0x1d601:	jne 0x1d60c                         
0x1d603:	lea rax, [rip + 0xbabd]             #	    |d|isplay_exit_message((signum == SIGHUP) ? "HUP" : "INT");
MEMORY OFFSET:     0xbabd     47805  >>47813

0x1d60a:	jmp 0x1d613                         
0x1d60c:	lea rax, [rip + 0xbab8]             #	    |d|isplay_exit_message((signum == SIGHUP) ? "HUP" : "INT");
MEMORY OFFSET:     0xbab8     47800  >>47808

0x1d613:	mov rdi, rax                        #	    |d|isplay_exit_message((signum == SIGHUP) ? "HUP" : "INT");
0x1d616:	call 0x1d520                        
0x1d61b:	jmp 0x1d679                         #	    |b|reak;
0x1d61d:	lea rax, [rip + 0xbaab]             #	    |d|isplay_exit_message("SEGV");
MEMORY OFFSET:     0xbaab     47787  >>47795

0x1d624:	mov rdi, rax                        
0x1d627:	call 0x1d520                        
0x1d62c:	jmp 0x1d653                         #	    |g|oto ask_report;
0x1d62e:	mov rdx, qword ptr [rip + 0x132a3]  #	    |f|printf(stderr,
MEMORY OFFSET:     0x132a3     78499  >>78507

0x1d635:	mov rax, qword ptr [rip + 0x13284]  
MEMORY OFFSET:     0x13284     78468  >>78476

0x1d63c:	mov ecx, dword ptr [rbp - 4]        
MEMORY OFFSET:     -0x4     -4  >>4

0x1d63f:	lea rsi, [rip + 0xba92]             
MEMORY OFFSET:     0xba92     47762  >>47770

0x1d646:	mov rdi, rax                        
0x1d649:	mov eax, 0                          
0x1d64e:	call 0x4b40                         
0x1d653:	mov rdx, qword ptr [rip + 0x1327e]  #	    |f|printf(stderr, "%s: please report to ianb@erislabs.net\n",
MEMORY OFFSET:     0x1327e     78462  >>78470

0x1d65a:	mov rax, qword ptr [rip + 0x1325f]  
MEMORY OFFSET:     0x1325f     78431  >>78439

0x1d661:	lea rcx, [rip + 0xbaa8]             
MEMORY OFFSET:     0xbaa8     47784  >>47792

0x1d668:	mov rsi, rcx                        
0x1d66b:	mov rdi, rax                        
0x1d66e:	mov eax, 0                          
0x1d673:	call 0x4b40                         
0x1d678:	nop                                 #	    |b|reak;
0x1d679:	mov eax, dword ptr [rbp - 4]        #    |e|xit(signum);
MEMORY OFFSET:     -0x4     -4  >>4

0x1d67c:	mov edi, eax                        
0x1d67e:	call 0x4df0                         
0x1d683:	endbr64                             #|{|
0x1d687:	push rbp                            
0x1d688:	mov rbp, rsp                        
0x1d68b:	sub rsp, 0x10                       
0x1d68f:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d693:	mov rdx, qword ptr [rip + 0x1323e]  #    |f|printf(stderr, "%s: installation problem: \n", g_program);
MEMORY OFFSET:     0x1323e     78398  >>78406

0x1d69a:	mov rax, qword ptr [rip + 0x1321f]  
MEMORY OFFSET:     0x1321f     78367  >>78375

0x1d6a1:	lea rcx, [rip + 0xba90]             
MEMORY OFFSET:     0xba90     47760  >>47768

0x1d6a8:	mov rsi, rcx                        
0x1d6ab:	mov rdi, rax                        
0x1d6ae:	mov eax, 0                          
0x1d6b3:	call 0x4b40                         
0x1d6b8:	mov rdx, qword ptr [rip + 0x13219]  #    |f|printf(stderr, "%s: cannot find configuration file '%s'.\n\n",
MEMORY OFFSET:     0x13219     78361  >>78369

0x1d6bf:	mov rax, qword ptr [rip + 0x131fa]  
MEMORY OFFSET:     0x131fa     78330  >>78338

0x1d6c6:	mov rcx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d6ca:	lea rsi, [rip + 0xba87]             
MEMORY OFFSET:     0xba87     47751  >>47759

0x1d6d1:	mov rdi, rax                        
0x1d6d4:	mov eax, 0                          
0x1d6d9:	call 0x4b40                         
0x1d6de:	nop                                 #|}|
0x1d6df:	leave                               
0x1d6e0:	ret                                 
0x1d6e1:	endbr64                             #|{|
0x1d6e5:	push rbp                            
0x1d6e6:	mov rbp, rsp                        
0x1d6e9:	sub rsp, 0x10                       
0x1d6ed:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d6f1:	mov rdx, qword ptr [rip + 0x131e0]  #    |f|printf(stderr,
MEMORY OFFSET:     0x131e0     78304  >>78312

0x1d6f8:	mov rax, qword ptr [rip + 0x131c1]  
MEMORY OFFSET:     0x131c1     78273  >>78281

0x1d6ff:	mov rcx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d703:	lea rsi, [rip + 0xba7e]             
MEMORY OFFSET:     0xba7e     47742  >>47750

0x1d70a:	mov rdi, rax                        
0x1d70d:	mov eax, 0                          
0x1d712:	call 0x4b40                         
0x1d717:	mov rdx, qword ptr [rip + 0x131ba]  #    |f|printf(stderr,
MEMORY OFFSET:     0x131ba     78266  >>78274

0x1d71e:	mov rax, qword ptr [rip + 0x1319b]  
MEMORY OFFSET:     0x1319b     78235  >>78243

0x1d725:	lea rcx, [rip + 0xba8c]             
MEMORY OFFSET:     0xba8c     47756  >>47764

0x1d72c:	mov rsi, rcx                        
0x1d72f:	mov rdi, rax                        
0x1d732:	mov eax, 0                          
0x1d737:	call 0x4b40                         
0x1d73c:	mov rdx, qword ptr [rip + 0x13195]  #    |f|printf(stderr,
MEMORY OFFSET:     0x13195     78229  >>78237

0x1d743:	mov rax, qword ptr [rip + 0x13176]  
MEMORY OFFSET:     0x13176     78198  >>78206

0x1d74a:	lea rcx, [rip + 0xba97]             
MEMORY OFFSET:     0xba97     47767  >>47775

0x1d751:	mov rsi, rcx                        
0x1d754:	mov rdi, rax                        
0x1d757:	mov eax, 0                          
0x1d75c:	call 0x4b40                         
0x1d761:	mov rdx, qword ptr [rip + 0x13170]  #    |f|printf(stderr,
MEMORY OFFSET:     0x13170     78192  >>78200

0x1d768:	mov rax, qword ptr [rip + 0x13151]  
MEMORY OFFSET:     0x13151     78161  >>78169

0x1d76f:	lea rcx, [rip + 0xbab2]             
MEMORY OFFSET:     0xbab2     47794  >>47802

0x1d776:	mov rsi, rcx                        
0x1d779:	mov rdi, rax                        
0x1d77c:	mov eax, 0                          
0x1d781:	call 0x4b40                         
0x1d786:	mov rdx, qword ptr [rip + 0x1314b]  #    |f|printf(stderr,
MEMORY OFFSET:     0x1314b     78155  >>78163

0x1d78d:	mov rax, qword ptr [rip + 0x1312c]  
MEMORY OFFSET:     0x1312c     78124  >>78132

0x1d794:	lea rcx, [rip + 0xbac5]             
MEMORY OFFSET:     0xbac5     47813  >>47821

0x1d79b:	mov rsi, rcx                        
0x1d79e:	mov rdi, rax                        
0x1d7a1:	mov eax, 0                          
0x1d7a6:	call 0x4b40                         
0x1d7ab:	mov rdx, qword ptr [rip + 0x13126]  #    |f|printf(stderr,
MEMORY OFFSET:     0x13126     78118  >>78126

0x1d7b2:	mov rax, qword ptr [rip + 0x13107]  
MEMORY OFFSET:     0x13107     78087  >>78095

0x1d7b9:	lea rcx, [rip + 0xbae0]             
MEMORY OFFSET:     0xbae0     47840  >>47848

0x1d7c0:	mov rsi, rcx                        
0x1d7c3:	mov rdi, rax                        
0x1d7c6:	mov eax, 0                          
0x1d7cb:	call 0x4b40                         
0x1d7d0:	mov rdx, qword ptr [rip + 0x13101]  #    |f|printf(stderr,
MEMORY OFFSET:     0x13101     78081  >>78089

0x1d7d7:	mov rax, qword ptr [rip + 0x130e2]  
MEMORY OFFSET:     0x130e2     78050  >>78058

0x1d7de:	lea rcx, [rip + 0xbafb]             
MEMORY OFFSET:     0xbafb     47867  >>47875

0x1d7e5:	mov rsi, rcx                        
0x1d7e8:	mov rdi, rax                        
0x1d7eb:	mov eax, 0                          
0x1d7f0:	call 0x4b40                         
0x1d7f5:	mov rdx, qword ptr [rip + 0x130dc]  #    |f|printf(stderr,
MEMORY OFFSET:     0x130dc     78044  >>78052

0x1d7fc:	mov rax, qword ptr [rip + 0x130bd]  
MEMORY OFFSET:     0x130bd     78013  >>78021

0x1d803:	lea rcx, [rip + 0xbb1e]             
MEMORY OFFSET:     0xbb1e     47902  >>47910

0x1d80a:	mov rsi, rcx                        
0x1d80d:	mov rdi, rax                        
0x1d810:	mov eax, 0                          
0x1d815:	call 0x4b40                         
0x1d81a:	nop                                 #|}|
0x1d81b:	leave                               
0x1d81c:	ret                                 
0x1d81d:	endbr64                             #|{|
0x1d821:	push rbp                            
0x1d822:	mov rbp, rsp                        
0x1d825:	push rbx                            
0x1d826:	sub rsp, 0x18                       
0x1d82a:	mov rax, qword ptr [rip + 0x1426f]  #    char *configfile = xmalloc(|s|trlen(termdir) + 1 +
MEMORY OFFSET:     0x1426f     82543  >>82551

0x1d831:	mov rdi, rax                        
0x1d834:	call 0x4960                         
0x1d839:	mov rbx, rax                        
0x1d83c:	lea rax, [rip + 0x12ecd]            #			       |s|trlen(SYSTEM_CONFIGFILE_PREFIX) +
MEMORY OFFSET:     0x12ecd     77517  >>77525

0x1d843:	mov rdi, rax                        
0x1d846:	call 0x4960                         
0x1d84b:	add rax, rbx                        #    char *configfile = xmalloc(strlen(termdir) + 1 |+|
0x1d84e:	add rax, 9                          #    char *configfile = |x|malloc(strlen(termdir) + 1 +
0x1d852:	mov rdi, rax                        
0x1d855:	call 0x24650                        
0x1d85a:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d85e:	mov rdx, qword ptr [rip + 0x1423b]  #    |s|trcpy(configfile, termdir);
MEMORY OFFSET:     0x1423b     82491  >>82499

0x1d865:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d869:	mov rsi, rdx                        
0x1d86c:	mov rdi, rax                        
0x1d86f:	call 0x4870                         
0x1d874:	mov rax, qword ptr [rbp - 0x18]     #    |s|trcat(configfile, SYSTEM_CONFIGFILE_PREFIX);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d878:	lea rdx, [rip + 0x12e91]            
MEMORY OFFSET:     0x12e91     77457  >>77465

0x1d87f:	mov rsi, rdx                        
0x1d882:	mov rdi, rax                        
0x1d885:	call 0x4db0                         
0x1d88a:	mov rax, qword ptr [rbp - 0x18]     #    |s|trcat(configfile, "common");
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d88e:	mov rdi, rax                        
0x1d891:	call 0x4960                         
0x1d896:	mov rdx, rax                        
0x1d899:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d89d:	add rax, rdx                        
0x1d8a0:	mov dword ptr [rax], 0x6d6d6f63     
0x1d8a6:	mov word ptr [rax + 4], 0x6e6f      
MEMORY OFFSET:     0x4     4  >>12

0x1d8ac:	mov byte ptr [rax + 6], 0           
MEMORY OFFSET:     0x6     6  >>14

0x1d8b0:	mov rax, qword ptr [rbp - 0x18]     #    if (|c|onfiguration_init(configfile) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d8b4:	mov rdi, rax                        
0x1d8b7:	call 0x1cd2c                        
0x1d8bc:	test eax, eax                       #    if |(|configuration_init(configfile) == 0)
0x1d8be:	jne 0x1d8db                         
0x1d8c0:	mov rax, qword ptr [rbp - 0x18]     #	|c|onfiguration_fatal_error(configfile);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d8c4:	mov rdi, rax                        
0x1d8c7:	mov eax, 0                          
0x1d8cc:	call 0x1d683                        
0x1d8d1:	mov edi, 1                          #	|e|xit(1);
0x1d8d6:	call 0x4df0                         
0x1d8db:	nop                                 #|}|
0x1d8dc:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1d8e0:	leave                               
0x1d8e1:	ret                                 
0x1d8e2:	endbr64                             #|{|
0x1d8e6:	push rbp                            
0x1d8e7:	mov rbp, rsp                        
0x1d8ea:	push rbx                            
0x1d8eb:	sub rsp, 0x18                       
0x1d8ef:	mov rax, qword ptr [rip + 0x12fda]  #    char *configfile = xmalloc(|s|trlen(g_home) + 1 + strlen(USER_CONFIGFILE_PREFIX) +
MEMORY OFFSET:     0x12fda     77786  >>77794

0x1d8f6:	mov rdi, rax                        
0x1d8f9:	call 0x4960                         
0x1d8fe:	mov rbx, rax                        
0x1d901:	lea rax, [rip + 0x12e18]            #    char *configfile = xmalloc(strlen(g_home) + 1 + |s|trlen(USER_CONFIGFILE_PREFIX) +
MEMORY OFFSET:     0x12e18     77336  >>77344

0x1d908:	mov rdi, rax                        
0x1d90b:	call 0x4960                         
0x1d910:	add rbx, rax                        #    char *configfile = xmalloc(strlen(g_home) + 1 |+| strlen(USER_CONFIGFILE_PREFIX) +
0x1d913:	mov rax, qword ptr [rip + 0x1356e]  #			       |s|trlen(tty_type) + 1);
MEMORY OFFSET:     0x1356e     79214  >>79222

0x1d91a:	mov rdi, rax                        
0x1d91d:	call 0x4960                         
0x1d922:	add rax, rbx                        #    char *configfile = xmalloc(strlen(g_home) + 1 + strlen(USER_CONFIGFILE_PREFIX) |+|
0x1d925:	add rax, 2                          #    char *configfile = |x|malloc(strlen(g_home) + 1 + strlen(USER_CONFIGFILE_PREFIX) +
0x1d929:	mov rdi, rax                        
0x1d92c:	call 0x24650                        
0x1d931:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d935:	mov rdx, qword ptr [rip + 0x12f94]  #    |s|trcpy(configfile, g_home);
MEMORY OFFSET:     0x12f94     77716  >>77724

0x1d93c:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d940:	mov rsi, rdx                        
0x1d943:	mov rdi, rax                        
0x1d946:	call 0x4870                         
0x1d94b:	mov rax, qword ptr [rbp - 0x18]     #    |s|trcat(configfile, USER_CONFIGFILE_PREFIX);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d94f:	lea rdx, [rip + 0x12dca]            
MEMORY OFFSET:     0x12dca     77258  >>77266

0x1d956:	mov rsi, rdx                        
0x1d959:	mov rdi, rax                        
0x1d95c:	call 0x4db0                         
0x1d961:	mov rdx, qword ptr [rip + 0x13520]  #    |s|trcat(configfile, tty_type);
MEMORY OFFSET:     0x13520     79136  >>79144

0x1d968:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d96c:	mov rsi, rdx                        
0x1d96f:	mov rdi, rax                        
0x1d972:	call 0x4db0                         
0x1d977:	mov rax, qword ptr [rbp - 0x18]     #    if (|c|onfiguration_init(configfile) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d97b:	mov rdi, rax                        
0x1d97e:	call 0x1cd2c                        
0x1d983:	test eax, eax                       #    if |(|configuration_init(configfile) == 0)
0x1d985:	jne 0x1dbad                         
0x1d98b:	mov rax, qword ptr [rbp - 0x18]     #	|x|free(configfile);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d98f:	mov rdi, rax                        
0x1d992:	call 0x1eeae                        
0x1d997:	mov rax, qword ptr [rip + 0x12f32]  #	configfile = xmalloc(|s|trlen(g_home) + 1 +
MEMORY OFFSET:     0x12f32     77618  >>77626

0x1d99e:	mov rdi, rax                        
0x1d9a1:	call 0x4960                         
0x1d9a6:	mov rbx, rax                        
0x1d9a9:	lea rax, [rip + 0x12d80]            #			     |s|trlen(OLD_USER_CONFIGFILE_PREFIX) +
MEMORY OFFSET:     0x12d80     77184  >>77192

0x1d9b0:	mov rdi, rax                        
0x1d9b3:	call 0x4960                         
0x1d9b8:	add rbx, rax                        #	configfile = xmalloc(strlen(g_home) + 1 |+|
0x1d9bb:	mov rax, qword ptr [rip + 0x134c6]  #			     |s|trlen(tty_type) + 1);
MEMORY OFFSET:     0x134c6     79046  >>79054

0x1d9c2:	mov rdi, rax                        
0x1d9c5:	call 0x4960                         
0x1d9ca:	add rax, rbx                        #			     strlen(OLD_USER_CONFIGFILE_PREFIX) |+|
0x1d9cd:	add rax, 2                          #	configfile = |x|malloc(strlen(g_home) + 1 +
0x1d9d1:	mov rdi, rax                        
0x1d9d4:	call 0x24650                        
0x1d9d9:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d9dd:	mov rdx, qword ptr [rip + 0x12eec]  #	|s|trcpy(configfile, g_home);
MEMORY OFFSET:     0x12eec     77548  >>77556

0x1d9e4:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d9e8:	mov rsi, rdx                        
0x1d9eb:	mov rdi, rax                        
0x1d9ee:	call 0x4870                         
0x1d9f3:	mov rax, qword ptr [rbp - 0x18]     #	|s|trcat(configfile, OLD_USER_CONFIGFILE_PREFIX);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1d9f7:	lea rdx, [rip + 0x12d32]            
MEMORY OFFSET:     0x12d32     77106  >>77114

0x1d9fe:	mov rsi, rdx                        
0x1da01:	mov rdi, rax                        
0x1da04:	call 0x4db0                         
0x1da09:	mov rdx, qword ptr [rip + 0x13478]  #	|s|trcat(configfile, tty_type);
MEMORY OFFSET:     0x13478     78968  >>78976

0x1da10:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1da14:	mov rsi, rdx                        
0x1da17:	mov rdi, rax                        
0x1da1a:	call 0x4db0                         
0x1da1f:	mov rax, qword ptr [rbp - 0x18]     #	if (|c|onfiguration_init(configfile) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1da23:	mov rdi, rax                        
0x1da26:	call 0x1cd2c                        
0x1da2b:	test eax, eax                       #	if |(|configuration_init(configfile) == 0)
0x1da2d:	jne 0x1dbad                         
0x1da33:	mov rax, qword ptr [rbp - 0x18]     #	    |x|free(configfile);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1da37:	mov rdi, rax                        
0x1da3a:	call 0x1eeae                        
0x1da3f:	mov rax, qword ptr [rip + 0x1405a]  #	    configfile = xmalloc(|s|trlen(termdir) + 1 +
MEMORY OFFSET:     0x1405a     82010  >>82018

0x1da46:	mov rdi, rax                        
0x1da49:	call 0x4960                         
0x1da4e:	mov rbx, rax                        
0x1da51:	lea rax, [rip + 0x12cb8]            #				 |s|trlen(SYSTEM_CONFIGFILE_PREFIX) +
MEMORY OFFSET:     0x12cb8     76984  >>76992

0x1da58:	mov rdi, rax                        
0x1da5b:	call 0x4960                         
0x1da60:	add rbx, rax                        #	    configfile = xmalloc(strlen(termdir) + 1 |+|
0x1da63:	mov rax, qword ptr [rip + 0x1341e]  #				 |s|trlen(tty_type) + 1);
MEMORY OFFSET:     0x1341e     78878  >>78886

0x1da6a:	mov rdi, rax                        
0x1da6d:	call 0x4960                         
0x1da72:	add rax, rbx                        #				 strlen(SYSTEM_CONFIGFILE_PREFIX) |+|
0x1da75:	add rax, 2                          #	    configfile = |x|malloc(strlen(termdir) + 1 +
0x1da79:	mov rdi, rax                        
0x1da7c:	call 0x24650                        
0x1da81:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1da85:	mov rdx, qword ptr [rip + 0x14014]  #	    |s|trcpy(configfile, termdir);
MEMORY OFFSET:     0x14014     81940  >>81948

0x1da8c:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1da90:	mov rsi, rdx                        
0x1da93:	mov rdi, rax                        
0x1da96:	call 0x4870                         
0x1da9b:	mov rax, qword ptr [rbp - 0x18]     #	    |s|trcat(configfile, SYSTEM_CONFIGFILE_PREFIX);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1da9f:	lea rdx, [rip + 0x12c6a]            
MEMORY OFFSET:     0x12c6a     76906  >>76914

0x1daa6:	mov rsi, rdx                        
0x1daa9:	mov rdi, rax                        
0x1daac:	call 0x4db0                         
0x1dab1:	mov rdx, qword ptr [rip + 0x133d0]  #	    |s|trcat(configfile, tty_type);
MEMORY OFFSET:     0x133d0     78800  >>78808

0x1dab8:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dabc:	mov rsi, rdx                        
0x1dabf:	mov rdi, rax                        
0x1dac2:	call 0x4db0                         
0x1dac7:	mov rax, qword ptr [rbp - 0x18]     #	    if (|c|onfiguration_init(configfile) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dacb:	mov rdi, rax                        
0x1dace:	call 0x1cd2c                        
0x1dad3:	test eax, eax                       #	    if |(|configuration_init(configfile) == 0)
0x1dad5:	jne 0x1dbad                         
0x1dadb:	mov rax, qword ptr [rbp - 0x18]     #		|c|onfiguration_warning(configfile);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dadf:	mov rdi, rax                        
0x1dae2:	mov eax, 0                          
0x1dae7:	call 0x1d6e1                        
0x1daec:	mov rax, qword ptr [rbp - 0x18]     #		|x|free(configfile);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1daf0:	mov rdi, rax                        
0x1daf3:	call 0x1eeae                        
0x1daf8:	mov rax, qword ptr [rip + 0x13fa1]  #		configfile = xmalloc(|s|trlen(termdir) + 1 +
MEMORY OFFSET:     0x13fa1     81825  >>81833

0x1daff:	mov rdi, rax                        
0x1db02:	call 0x4960                         
0x1db07:	mov rbx, rax                        
0x1db0a:	lea rax, [rip + 0x12bff]            #				     |s|trlen(SYSTEM_CONFIGFILE_PREFIX) +
MEMORY OFFSET:     0x12bff     76799  >>76807

0x1db11:	mov rdi, rax                        
0x1db14:	call 0x4960                         
0x1db19:	add rax, rbx                        #		configfile = xmalloc(strlen(termdir) + 1 |+|
0x1db1c:	add rax, 0xa                        #		configfile = |x|malloc(strlen(termdir) + 1 +
0x1db20:	mov rdi, rax                        
0x1db23:	call 0x24650                        
0x1db28:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1db2c:	mov rdx, qword ptr [rip + 0x13f6d]  #		|s|trcpy(configfile, termdir);
MEMORY OFFSET:     0x13f6d     81773  >>81781

0x1db33:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1db37:	mov rsi, rdx                        
0x1db3a:	mov rdi, rax                        
0x1db3d:	call 0x4870                         
0x1db42:	mov rax, qword ptr [rbp - 0x18]     #		|s|trcat(configfile, SYSTEM_CONFIGFILE_PREFIX);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1db46:	lea rdx, [rip + 0x12bc3]            
MEMORY OFFSET:     0x12bc3     76739  >>76747

0x1db4d:	mov rsi, rdx                        
0x1db50:	mov rdi, rax                        
0x1db53:	call 0x4db0                         
0x1db58:	mov rax, qword ptr [rbp - 0x18]     #		|s|trcat(configfile, "generic");
MEMORY OFFSET:     -0x18     -24  >>-16

0x1db5c:	mov rdi, rax                        
0x1db5f:	call 0x4960                         
0x1db64:	mov rdx, rax                        
0x1db67:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1db6b:	add rax, rdx                        
0x1db6e:	movabs rcx, 0x636972656e6567        
0x1db78:	mov qword ptr [rax], rcx            
0x1db7b:	mov rax, qword ptr [rbp - 0x18]     #		if (|c|onfiguration_init(configfile) == 0)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1db7f:	mov rdi, rax                        
0x1db82:	call 0x1cd2c                        
0x1db87:	test eax, eax                       #		if |(|configuration_init(configfile) == 0)
0x1db89:	jne 0x1dba6                         
0x1db8b:	mov rax, qword ptr [rbp - 0x18]     #		    |c|onfiguration_fatal_error(configfile);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1db8f:	mov rdi, rax                        
0x1db92:	mov eax, 0                          
0x1db97:	call 0x1d683                        
0x1db9c:	mov edi, 1                          #		    |e|xit(1);
0x1dba1:	call 0x4df0                         
0x1dba6:	mov eax, 0                          #		return |0|;
0x1dbab:	jmp 0x1dbbe                         
0x1dbad:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(configfile);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dbb1:	mov rdi, rax                        
0x1dbb4:	call 0x1eeae                        
0x1dbb9:	mov eax, 1                          #    return |1|;
0x1dbbe:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1dbc2:	leave                               
0x1dbc3:	ret                                 
0x1dbc4:	endbr64                             #|{|
0x1dbc8:	push rbp                            
0x1dbc9:	mov rbp, rsp                        
0x1dbcc:	push rbx                            
0x1dbcd:	sub rsp, 0x38                       
0x1dbd1:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1dbd5:	lea rax, [rip + 0xb775]             #     char *|g|itfmprefix="[GITFM-";
MEMORY OFFSET:     0xb775     46965  >>46973

0x1dbdc:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1dbe0:	lea rax, [rip + 0xb772]             #     char *|g|itprefix="[GIT-";
MEMORY OFFSET:     0xb772     46962  >>46970

0x1dbe7:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1dbeb:	mov rax, qword ptr [rbp - 0x38]     #     if (|c|onfiguration_section(section) == -1)
MEMORY OFFSET:     -0x38     -56  >>-48

0x1dbef:	mov rdi, rax                        
0x1dbf2:	call 0x1cea5                        
0x1dbf7:	cmp eax, -1                         #     if |(|configuration_section(section) == -1)
0x1dbfa:	jne 0x1dcf7                         
0x1dc00:	mov rax, qword ptr [rbp - 0x28]     #	  if(|s|trncmp(section,gitfmprefix,strlen(gitfmprefix)) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1dc04:	mov rdi, rax                        
0x1dc07:	call 0x4960                         
0x1dc0c:	mov rdx, rax                        
0x1dc0f:	mov rcx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1dc13:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1dc17:	mov rsi, rcx                        
0x1dc1a:	mov rdi, rax                        
0x1dc1d:	call 0x4850                         
0x1dc22:	test eax, eax                       #	  if|(|strncmp(section,gitfmprefix,strlen(gitfmprefix)) == 0)
0x1dc24:	jne 0x1dcc7                         
0x1dc2a:	mov rax, qword ptr [rbp - 0x20]     #	       char *newsection=xmalloc(|s|trlen(gitprefix) +
MEMORY OFFSET:     -0x20     -32  >>-24

0x1dc2e:	mov rdi, rax                        
0x1dc31:	call 0x4960                         
0x1dc36:	mov rbx, rax                        
0x1dc39:	mov rax, qword ptr [rbp - 0x20]     #					strlen(section+|s|trlen(gitprefix)) + 1);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1dc3d:	mov rdi, rax                        
0x1dc40:	call 0x4960                         
0x1dc45:	mov rdx, qword ptr [rbp - 0x38]     #					strlen(section|+|strlen(gitprefix)) + 1);
MEMORY OFFSET:     -0x38     -56  >>-48

0x1dc49:	add rax, rdx                        
0x1dc4c:	mov rdi, rax                        #					|s|trlen(section+strlen(gitprefix)) + 1);
0x1dc4f:	call 0x4960                         
0x1dc54:	add rax, rbx                        #	       char *newsection=xmalloc(strlen(gitprefix) |+|
0x1dc57:	add rax, 1                          #	       char *newsection=|x|malloc(strlen(gitprefix) +
0x1dc5b:	mov rdi, rax                        
0x1dc5e:	call 0x24650                        
0x1dc63:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dc67:	mov rdx, qword ptr [rbp - 0x20]     #	       |s|trcpy(newsection,gitprefix);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1dc6b:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dc6f:	mov rsi, rdx                        
0x1dc72:	mov rdi, rax                        
0x1dc75:	call 0x4870                         
0x1dc7a:	mov rax, qword ptr [rbp - 0x28]     #	       strcat(newsection,section+|s|trlen(gitfmprefix));
MEMORY OFFSET:     -0x28     -40  >>-32

0x1dc7e:	mov rdi, rax                        
0x1dc81:	call 0x4960                         
0x1dc86:	mov rdx, qword ptr [rbp - 0x38]     #	       strcat(newsection,section|+|strlen(gitfmprefix));
MEMORY OFFSET:     -0x38     -56  >>-48

0x1dc8a:	add rdx, rax                        
0x1dc8d:	mov rax, qword ptr [rbp - 0x18]     #	       |s|trcat(newsection,section+strlen(gitfmprefix));
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dc91:	mov rsi, rdx                        
0x1dc94:	mov rdi, rax                        
0x1dc97:	call 0x4db0                         
0x1dc9c:	mov rax, qword ptr [rbp - 0x18]     #	       if (|c|onfiguration_section(newsection) != -1)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dca0:	mov rdi, rax                        
0x1dca3:	call 0x1cea5                        
0x1dca8:	cmp eax, -1                         #	       if |(|configuration_section(newsection) != -1)
0x1dcab:	je 0x1dcbb                          
0x1dcad:	mov rax, qword ptr [rbp - 0x18]     #		    |x|free(newsection);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dcb1:	mov rdi, rax                        
0x1dcb4:	call 0x1eeae                        
0x1dcb9:	jmp 0x1dcf7                         #		    |r|eturn;
0x1dcbb:	mov rax, qword ptr [rbp - 0x18]     #	       |x|free(newsection);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dcbf:	mov rdi, rax                        
0x1dcc2:	call 0x1eeae                        
0x1dcc7:	mov rdx, qword ptr [rip + 0x12c0a]  #	  |f|printf(stderr,
MEMORY OFFSET:     0x12c0a     76810  >>76818

0x1dcce:	mov rax, qword ptr [rip + 0x12beb]  
MEMORY OFFSET:     0x12beb     76779  >>76787

0x1dcd5:	mov rcx, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1dcd9:	lea rsi, [rip + 0xb680]             
MEMORY OFFSET:     0xb680     46720  >>46728

0x1dce0:	mov rdi, rax                        
0x1dce3:	mov eax, 0                          
0x1dce8:	call 0x4b40                         
0x1dced:	mov edi, 1                          #	  |e|xit(1);
0x1dcf2:	call 0x4df0                         
0x1dcf7:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1dcfb:	leave                               
0x1dcfc:	ret                                 
0x1dcfd:	endbr64                             #|{|
0x1dd01:	push rbp                            
0x1dd02:	mov rbp, rsp                        
0x1dd05:	sub rsp, 0x20                       
0x1dd09:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dd0d:	mov dword ptr [rbp - 0x1c], esi     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1dd10:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1dd19:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1dd1d:	xor eax, eax                        
0x1dd1f:	lea rsi, [rbp - 0x10]               #    |c|onfiguration_getvarinfo(var_name, &data, 1, DO_SEEK);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1dd23:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dd27:	mov ecx, 1                          
0x1dd2c:	mov edx, 1                          
0x1dd31:	mov rdi, rax                        
0x1dd34:	call 0x1cf27                        
0x1dd39:	mov rax, qword ptr [rbp - 0x10]     #    return data |?| atoi(data) : default_value;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1dd3d:	test rax, rax                       #    return data ? atoi(data) |:| default_value;
0x1dd40:	je 0x1dd50                          
0x1dd42:	mov rax, qword ptr [rbp - 0x10]     #    return data ? |a|toi(data) : default_value;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1dd46:	mov rdi, rax                        
0x1dd49:	call 0x4da0                         
0x1dd4e:	jmp 0x1dd53                         
0x1dd50:	mov eax, dword ptr [rbp - 0x1c]     #    return data ? atoi(data) |:| default_value;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1dd53:	mov rdx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1dd57:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1dd60:	je 0x1dd67                          
0x1dd62:	call 0x4980                         
0x1dd67:	leave                               
0x1dd68:	ret                                 
0x1dd69:	endbr64                             #|{|
0x1dd6d:	push rbp                            
0x1dd6e:	mov rbp, rsp                        
0x1dd71:	sub rsp, 0x40                       
0x1dd75:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1dd79:	mov qword ptr [rbp - 0x30], rsi     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1dd7d:	mov dword ptr [rbp - 0x34], edx     
MEMORY OFFSET:     -0x34     -52  >>-44

0x1dd80:	mov dword ptr [rbp - 0x38], ecx     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1dd83:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1dd8c:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1dd90:	xor eax, eax                        
0x1dd92:	lea rsi, [rbp - 0x10]               #    |c|onfiguration_getvarinfo(var_name, &data, 1, DO_SEEK);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1dd96:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1dd9a:	mov ecx, 1                          
0x1dd9f:	mov edx, 1                          
0x1dda4:	mov rdi, rax                        
0x1dda7:	call 0x1cf27                        
0x1ddac:	mov rax, qword ptr [rbp - 0x10]     #    if (|d|ata)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1ddb0:	test rax, rax                       #    if |(|data)
0x1ddb3:	je 0x1de33                          
0x1ddb5:	mov dword ptr [rbp - 0x14], 0       #	for (i |=| 0; i < options_no; i++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ddbc:	jmp 0x1ddec                         #	|f|or (i = 0; i < options_no; i++)
0x1ddbe:	mov eax, dword ptr [rbp - 0x14]     #	    if (strcmp(data, options|[|i]) == 0)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ddc1:	cdqe                                
0x1ddc3:	lea rdx, [rax*8]                    
0x1ddcb:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1ddcf:	add rax, rdx                        
0x1ddd2:	mov rdx, qword ptr [rax]            #	    if (|s|trcmp(data, options[i]) == 0)
0x1ddd5:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1ddd9:	mov rsi, rdx                        
0x1dddc:	mov rdi, rax                        
0x1dddf:	call 0x4af0                         
0x1dde4:	test eax, eax                       #	    if |(|strcmp(data, options[i]) == 0)
0x1dde6:	je 0x1ddf6                          
0x1dde8:	add dword ptr [rbp - 0x14], 1       #	for (i = 0; i < options_no; i|+|+)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ddec:	mov eax, dword ptr [rbp - 0x14]     #	for (i = 0; i |<| options_no; i++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ddef:	cmp eax, dword ptr [rbp - 0x34]     
MEMORY OFFSET:     -0x34     -52  >>-44

0x1ddf2:	jl 0x1ddbe                          
0x1ddf4:	jmp 0x1ddf7                         
0x1ddf6:	nop                                 #		|b|reak;
0x1ddf7:	mov eax, dword ptr [rbp - 0x14]     #	if |(|i == options_no)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ddfa:	cmp eax, dword ptr [rbp - 0x34]     
MEMORY OFFSET:     -0x34     -52  >>-44

0x1ddfd:	jne 0x1de2e                         
0x1ddff:	mov rsi, qword ptr [rbp - 0x10]     #	    |f|printf(stderr, "%s: invalid %s (%s).\n", g_program, var_name, data);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1de03:	mov rdx, qword ptr [rip + 0x12ace]  
MEMORY OFFSET:     0x12ace     76494  >>76502

0x1de0a:	mov rax, qword ptr [rip + 0x12aaf]  
MEMORY OFFSET:     0x12aaf     76463  >>76471

0x1de11:	mov rcx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1de15:	mov r8, rsi                         
0x1de18:	lea rsi, [rip + 0xb577]             
MEMORY OFFSET:     0xb577     46455  >>46463

0x1de1f:	mov rdi, rax                        
0x1de22:	mov eax, 0                          
0x1de27:	call 0x4b40                         
0x1de2c:	jmp 0x1de33                         
0x1de2e:	mov eax, dword ptr [rbp - 0x14]     #	    return |i|;
MEMORY OFFSET:     -0x14     -20  >>-12

0x1de31:	jmp 0x1de36                         
0x1de33:	mov eax, dword ptr [rbp - 0x38]     #    return |d|efault_value;
MEMORY OFFSET:     -0x38     -56  >>-48

0x1de36:	mov rdx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1de3a:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1de43:	je 0x1de4a                          
0x1de45:	call 0x4980                         #|}|
0x1de4a:	leave                               
0x1de4b:	ret                                 
0x1de4c:	endbr64                             #|{|
0x1de50:	push rbp                            
0x1de51:	mov rbp, rsp                        
0x1de54:	sub rsp, 0x20                       
0x1de58:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1de5c:	mov dword ptr [rbp - 0x1c], esi     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1de5f:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1de68:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1de6c:	xor eax, eax                        
0x1de6e:	lea rsi, [rbp - 0x10]               #    |c|onfiguration_getvarinfo(var_name, &data, 1, DO_SEEK);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1de72:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1de76:	mov ecx, 1                          
0x1de7b:	mov edx, 1                          
0x1de80:	mov rdi, rax                        
0x1de83:	call 0x1cf27                        
0x1de88:	mov rax, qword ptr [rbp - 0x10]     #    if (|d|ata)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1de8c:	test rax, rax                       #    if |(|data)
0x1de8f:	je 0x1df05                          
0x1de91:	mov rax, qword ptr [rbp - 0x10]     #	if (|s|trcmp(data, "ON")  == 0)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1de95:	lea rdx, [rip + 0xb510]             
MEMORY OFFSET:     0xb510     46352  >>46360

0x1de9c:	mov rsi, rdx                        
0x1de9f:	mov rdi, rax                        
0x1dea2:	call 0x4af0                         
0x1dea7:	test eax, eax                       #	if |(|strcmp(data, "ON")  == 0)
0x1dea9:	jne 0x1deb2                         
0x1deab:	mov eax, 1                          #	    return |1|;
0x1deb0:	jmp 0x1df08                         
0x1deb2:	mov rax, qword ptr [rbp - 0x10]     #	if (|s|trcmp(data, "OFF") == 0)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1deb6:	lea rdx, [rip + 0xb4f2]             
MEMORY OFFSET:     0xb4f2     46322  >>46330

0x1debd:	mov rsi, rdx                        
0x1dec0:	mov rdi, rax                        
0x1dec3:	call 0x4af0                         
0x1dec8:	test eax, eax                       #	if |(|strcmp(data, "OFF") == 0)
0x1deca:	jne 0x1ded3                         
0x1decc:	mov eax, 0                          #	    return |0|;
0x1ded1:	jmp 0x1df08                         
0x1ded3:	mov rsi, qword ptr [rbp - 0x10]     #	|f|printf(stderr, "%s: invalid %s (%s).\n", g_program, var_name, data);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1ded7:	mov rdx, qword ptr [rip + 0x129fa]  
MEMORY OFFSET:     0x129fa     76282  >>76290

0x1dede:	mov rax, qword ptr [rip + 0x129db]  
MEMORY OFFSET:     0x129db     76251  >>76259

0x1dee5:	mov rcx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dee9:	mov r8, rsi                         
0x1deec:	lea rsi, [rip + 0xb4a3]             
MEMORY OFFSET:     0xb4a3     46243  >>46251

0x1def3:	mov rdi, rax                        
0x1def6:	mov eax, 0                          
0x1defb:	call 0x4b40                         
0x1df00:	mov eax, dword ptr [rbp - 0x1c]     #	return |d|efault_value;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1df03:	jmp 0x1df08                         
0x1df05:	mov eax, dword ptr [rbp - 0x1c]     #    return |d|efault_value;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1df08:	mov rdx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1df0c:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1df15:	je 0x1df1c                          
0x1df17:	call 0x4980                         #|}|
0x1df1c:	leave                               
0x1df1d:	ret                                 
0x1df1e:	endbr64                             #|{|
0x1df22:	push rbp                            
0x1df23:	mov rbp, rsp                        
0x1df26:	sub rsp, 0x20                       
0x1df2a:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1df2e:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1df32:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1df3b:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1df3f:	xor eax, eax                        
0x1df41:	lea rsi, [rbp - 0x10]               #    |c|onfiguration_getvarinfo(var_name, &data, 1, DO_SEEK);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1df45:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1df49:	mov ecx, 1                          
0x1df4e:	mov edx, 1                          
0x1df53:	mov rdi, rax                        
0x1df56:	call 0x1cf27                        
0x1df5b:	mov rax, qword ptr [rbp - 0x10]     #    if (|d|ata)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1df5f:	test rax, rax                       #    if |(|data)
0x1df62:	je 0x1df72                          
0x1df64:	mov rax, qword ptr [rbp - 0x10]     #	return |x|strdup(data);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1df68:	mov rdi, rax                        
0x1df6b:	call 0x24780                        
0x1df70:	jmp 0x1df76                         
0x1df72:	mov rax, qword ptr [rbp - 0x20]     #    return |d|efault_value;
MEMORY OFFSET:     -0x20     -32  >>-24

0x1df76:	mov rdx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1df7a:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1df83:	je 0x1df8a                          
0x1df85:	call 0x4980                         #|}|
0x1df8a:	leave                               
0x1df8b:	ret                                 
0x1df8c:	endbr64                             #|{|
0x1df90:	push rbp                            
0x1df91:	mov rbp, rsp                        
0x1df94:	sub rsp, 0x40                       
0x1df98:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1df9c:	mov qword ptr [rbp - 0x30], rsi     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1dfa0:	mov dword ptr [rbp - 0x34], edx     
MEMORY OFFSET:     -0x34     -52  >>-44

0x1dfa3:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1dfac:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1dfb0:	xor eax, eax                        
0x1dfb2:	mov dword ptr [rbp - 0x18], 0       #    for (i |=| 0; i < fields_no; i++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dfb9:	jmp 0x1e068                         #    |f|or (i = 0; i < fields_no; i++)
0x1dfbe:	mov eax, dword ptr [rbp - 0x18]     #	configuration_getvarinfo(colorset_name|[|i], &data, 1, DO_SEEK);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1dfc1:	cdqe                                
0x1dfc3:	lea rdx, [rax*8]                    
0x1dfcb:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1dfcf:	add rax, rdx                        
0x1dfd2:	mov rax, qword ptr [rax]            #	|c|onfiguration_getvarinfo(colorset_name[i], &data, 1, DO_SEEK);
0x1dfd5:	lea rsi, [rbp - 0x10]               
MEMORY OFFSET:     -0x10     -16  >>-8

0x1dfd9:	mov ecx, 1                          
0x1dfde:	mov edx, 1                          
0x1dfe3:	mov rdi, rax                        
0x1dfe6:	call 0x1cf27                        
0x1dfeb:	mov rax, qword ptr [rbp - 0x10]     #	if (|d|ata)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1dfef:	test rax, rax                       #	if |(|data)
0x1dff2:	je 0x1e064                          
0x1dff4:	mov rax, qword ptr [rbp - 0x10]     #	    index = |t|ty_get_color_index(data);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1dff8:	mov rdi, rax                        
0x1dffb:	call 0xcef6                         
0x1e000:	mov dword ptr [rbp - 0x14], eax     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1e003:	cmp dword ptr [rbp - 0x14], -1      #	    if |(|index == -1)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1e007:	jne 0x1e04b                         
0x1e009:	mov rsi, qword ptr [rbp - 0x10]     #		|f|printf(stderr, "%s: invalid %s (%s).\n",
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e00d:	mov eax, dword ptr [rbp - 0x18]     #			g_program, colorset_name|[|i], data);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e010:	cdqe                                
0x1e012:	lea rdx, [rax*8]                    
0x1e01a:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1e01e:	add rax, rdx                        
0x1e021:	mov rcx, qword ptr [rax]            #		|f|printf(stderr, "%s: invalid %s (%s).\n",
0x1e024:	mov rdx, qword ptr [rip + 0x128ad]  
MEMORY OFFSET:     0x128ad     75949  >>75957

0x1e02b:	mov rax, qword ptr [rip + 0x1288e]  
MEMORY OFFSET:     0x1288e     75918  >>75926

0x1e032:	mov r8, rsi                         
0x1e035:	lea rsi, [rip + 0xb35a]             
MEMORY OFFSET:     0xb35a     45914  >>45922

0x1e03c:	mov rdi, rax                        
0x1e03f:	mov eax, 0                          
0x1e044:	call 0x4b40                         
0x1e049:	jmp 0x1e064                         
0x1e04b:	mov eax, dword ptr [rbp - 0x18]     #		charset|[|i] = index;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e04e:	cdqe                                
0x1e050:	lea rdx, [rax*4]                    
0x1e058:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1e05c:	add rdx, rax                        
0x1e05f:	mov eax, dword ptr [rbp - 0x14]     #		charset[i] |=| index;
MEMORY OFFSET:     -0x14     -20  >>-12

0x1e062:	mov dword ptr [rdx], eax            
0x1e064:	add dword ptr [rbp - 0x18], 1       #    for (i = 0; i < fields_no; i|+|+)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e068:	mov eax, dword ptr [rbp - 0x18]     #    for (i = 0; i |<| fields_no; i++)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e06b:	cmp eax, dword ptr [rbp - 0x34]     
MEMORY OFFSET:     -0x34     -52  >>-44

0x1e06e:	jl 0x1dfbe                          
0x1e074:	nop                                 #|}|
0x1e075:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e079:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1e082:	je 0x1e089                          
0x1e084:	call 0x4980                         
0x1e089:	leave                               
0x1e08a:	ret                                 
0x1e08b:	endbr64                             #|{|
0x1e08f:	push rbp                            
0x1e090:	mov rbp, rsp                        
0x1e093:	sub rsp, 0x20                       
0x1e097:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e09b:	mov rax, qword ptr [rbp - 0x18]     #    char *|c|path = path;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e09f:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e0a3:	mov rax, qword ptr [rbp - 0x18]     #    char *|o|path = path;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e0a7:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e0ab:	mov rax, qword ptr [rbp - 8]        #    if (|*|opath == '/')
MEMORY OFFSET:     -0x8     -8  >>0

0x1e0af:	movzx eax, byte ptr [rax]           
0x1e0b2:	cmp al, 0x2f                        #    if |(|*opath == '/')
0x1e0b4:	jne 0x1e0d8                         
0x1e0b6:	mov rdx, qword ptr [rbp - 8]        #	*cpath++ = *opath|+|+;
MEMORY OFFSET:     -0x8     -8  >>0

0x1e0ba:	lea rax, [rdx + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1e0be:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e0c2:	mov rax, qword ptr [rbp - 0x10]     #	*cpath|+|+ = *opath++;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e0c6:	lea rcx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1e0ca:	mov qword ptr [rbp - 0x10], rcx     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e0ce:	movzx edx, byte ptr [rdx]           #	*cpath++ = |*|opath++;
0x1e0d1:	mov byte ptr [rax], dl              #	*cpath++ |=| *opath++;
0x1e0d3:	jmp 0x1e1db                         
0x1e0d8:	lea rax, [rip + 0xb2d4]             #	|f|atal("relative path encountered");
MEMORY OFFSET:     0xb2d4     45780  >>45788

0x1e0df:	mov rdi, rax                        
0x1e0e2:	call 0x672c                         
0x1e0e7:	jmp 0x1e1db                         #    while |(|*opath)
0x1e0ec:	add qword ptr [rbp - 8], 1          #	    opath|+|+;
MEMORY OFFSET:     -0x8     -8  >>0

0x1e0f1:	mov rax, qword ptr [rbp - 8]        #	while (|*|opath == '/' ||
MEMORY OFFSET:     -0x8     -8  >>0

0x1e0f5:	movzx eax, byte ptr [rax]           
0x1e0f8:	cmp al, 0x2f                        #	while (*opath == '/' ||||
0x1e0fa:	je 0x1e0ec                          
0x1e0fc:	mov rax, qword ptr [rbp - 8]        #	       (|*|opath == '.' &&
MEMORY OFFSET:     -0x8     -8  >>0

0x1e100:	movzx eax, byte ptr [rax]           
0x1e103:	cmp al, 0x2e                        #	while (*opath == '/' ||||
0x1e105:	jne 0x1e125                         
0x1e107:	mov rax, qword ptr [rbp - 8]        #		(*(opath |+| 1) == '/' || *(opath + 1) == '\0')))
MEMORY OFFSET:     -0x8     -8  >>0

0x1e10b:	add rax, 1                          
0x1e10f:	movzx eax, byte ptr [rax]           #		(|*|(opath + 1) == '/' || *(opath + 1) == '\0')))
0x1e112:	cmp al, 0x2f                        #	       (*opath == '.' |&|&
0x1e114:	je 0x1e0ec                          
0x1e116:	mov rax, qword ptr [rbp - 8]        #		(*(opath + 1) == '/' || *(opath |+| 1) == '\0')))
MEMORY OFFSET:     -0x8     -8  >>0

0x1e11a:	add rax, 1                          
0x1e11e:	movzx eax, byte ptr [rax]           #		(*(opath + 1) == '/' || |*|(opath + 1) == '\0')))
0x1e121:	test al, al                         #		(*(opath + 1) == '/' |||| *(opath + 1) == '\0')))
0x1e123:	je 0x1e0ec                          
0x1e125:	mov rax, qword ptr [rbp - 8]        #	if (|*|opath == '.' && *(opath + 1) == '.' &&
MEMORY OFFSET:     -0x8     -8  >>0

0x1e129:	movzx eax, byte ptr [rax]           
0x1e12c:	cmp al, 0x2e                        #	if |(|*opath == '.' && *(opath + 1) == '.' &&
0x1e12e:	jne 0x1e1ab                         
0x1e130:	mov rax, qword ptr [rbp - 8]        #	if (*opath == '.' && *(opath |+| 1) == '.' &&
MEMORY OFFSET:     -0x8     -8  >>0

0x1e134:	add rax, 1                          
0x1e138:	movzx eax, byte ptr [rax]           #	if (*opath == '.' && |*|(opath + 1) == '.' &&
0x1e13b:	cmp al, 0x2e                        #	if (*opath == '.' |&|& *(opath + 1) == '.' &&
0x1e13d:	jne 0x1e1ab                         
0x1e13f:	mov rax, qword ptr [rbp - 8]        #	    (*(opath |+| 2) == '/' || *(opath + 2) == '\0'))
MEMORY OFFSET:     -0x8     -8  >>0

0x1e143:	add rax, 2                          
0x1e147:	movzx eax, byte ptr [rax]           #	    (|*|(opath + 2) == '/' || *(opath + 2) == '\0'))
0x1e14a:	cmp al, 0x2f                        #	if (*opath == '.' && *(opath + 1) == '.' |&|&
0x1e14c:	je 0x1e15d                          
0x1e14e:	mov rax, qword ptr [rbp - 8]        #	    (*(opath + 2) == '/' || *(opath |+| 2) == '\0'))
MEMORY OFFSET:     -0x8     -8  >>0

0x1e152:	add rax, 2                          
0x1e156:	movzx eax, byte ptr [rax]           #	    (*(opath + 2) == '/' || |*|(opath + 2) == '\0'))
0x1e159:	test al, al                         #	    (*(opath + 2) == '/' |||| *(opath + 2) == '\0'))
0x1e15b:	jne 0x1e1ab                         
0x1e15d:	mov rax, qword ptr [rbp - 0x10]     #	    if (cpath |-| 1 != path)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e161:	sub rax, 1                          
0x1e165:	cmp qword ptr [rbp - 0x18], rax     #	    if |(|cpath - 1 != path)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e169:	je 0x1e187                          
0x1e16b:	sub qword ptr [rbp - 0x10], 2       #		for (cpath |-|= 2; *cpath != '/'; cpath--);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e170:	jmp 0x1e177                         #		|f|or (cpath -= 2; *cpath != '/'; cpath--);
0x1e172:	sub qword ptr [rbp - 0x10], 1       #		for (cpath -= 2; *cpath != '/'; cpath|-|-);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e177:	mov rax, qword ptr [rbp - 0x10]     #		for (cpath -= 2; |*|cpath != '/'; cpath--);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e17b:	movzx eax, byte ptr [rax]           
0x1e17e:	cmp al, 0x2f                        #		for (cpath -= 2; *cpath |!|= '/'; cpath--);
0x1e180:	jne 0x1e172                         
0x1e182:	add qword ptr [rbp - 0x10], 1       #		cpath|+|+;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e187:	add qword ptr [rbp - 8], 2          #	    opath |+|= 2;
MEMORY OFFSET:     -0x8     -8  >>0

0x1e18c:	jmp 0x1e1db                         #	    |c|ontinue;
0x1e18e:	mov rdx, qword ptr [rbp - 8]        #	    *cpath++ = *opath|+|+;
MEMORY OFFSET:     -0x8     -8  >>0

0x1e192:	lea rax, [rdx + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1e196:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e19a:	mov rax, qword ptr [rbp - 0x10]     #	    *cpath|+|+ = *opath++;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e19e:	lea rcx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1e1a2:	mov qword ptr [rbp - 0x10], rcx     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e1a6:	movzx edx, byte ptr [rdx]           #	    *cpath++ = |*|opath++;
0x1e1a9:	mov byte ptr [rax], dl              #	    *cpath++ |=| *opath++;
0x1e1ab:	mov rax, qword ptr [rbp - 8]        #	while (|*|opath && *opath != '/')
MEMORY OFFSET:     -0x8     -8  >>0

0x1e1af:	movzx eax, byte ptr [rax]           
0x1e1b2:	test al, al                         #	while (*opath |&|& *opath != '/')
0x1e1b4:	je 0x1e1c1                          
0x1e1b6:	mov rax, qword ptr [rbp - 8]        #	while (*opath && |*|opath != '/')
MEMORY OFFSET:     -0x8     -8  >>0

0x1e1ba:	movzx eax, byte ptr [rax]           
0x1e1bd:	cmp al, 0x2f                        #	while (*opath |&|& *opath != '/')
0x1e1bf:	jne 0x1e18e                         
0x1e1c1:	mov rax, qword ptr [rbp - 8]        #	if (|*|opath)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e1c5:	movzx eax, byte ptr [rax]           
0x1e1c8:	test al, al                         #	if |(|*opath)
0x1e1ca:	je 0x1e1db                          
0x1e1cc:	mov rax, qword ptr [rbp - 0x10]     #	    *cpath|+|+ = '/';
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e1d0:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1e1d4:	mov qword ptr [rbp - 0x10], rdx     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e1d8:	mov byte ptr [rax], 0x2f            #	    *cpath++ |=| '/';
0x1e1db:	mov rax, qword ptr [rbp - 8]        #    while (|*|opath)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e1df:	movzx eax, byte ptr [rax]           
0x1e1e2:	test al, al                         
0x1e1e4:	jne 0x1e0f1                         
0x1e1ea:	mov rax, qword ptr [rbp - 0x10]     #    if (*(cpath |-| 1) == '/' && cpath - path > 1)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e1ee:	sub rax, 1                          
0x1e1f2:	movzx eax, byte ptr [rax]           #    if (|*|(cpath - 1) == '/' && cpath - path > 1)
0x1e1f5:	cmp al, 0x2f                        #    if |(|*(cpath - 1) == '/' && cpath - path > 1)
0x1e1f7:	jne 0x1e20c                         
0x1e1f9:	mov rax, qword ptr [rbp - 0x10]     #    if (*(cpath - 1) == '/' && cpath |-| path > 1)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e1fd:	sub rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e201:	cmp rax, 1                          #    if (*(cpath - 1) == '/' |&|& cpath - path > 1)
0x1e205:	jle 0x1e20c                         
0x1e207:	sub qword ptr [rbp - 0x10], 1       #	cpath|-|-;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e20c:	mov rax, qword ptr [rbp - 0x10]     #    *cpath |=| '\0';
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e210:	mov byte ptr [rax], 0               
0x1e213:	mov rax, qword ptr [rbp - 0x18]     #    return |p|ath;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e217:	leave                               #|}|
0x1e218:	ret                                 
0x1e219:	endbr64                             #|{|
0x1e21d:	push rbp                            
0x1e21e:	mov rbp, rsp                        
0x1e221:	sub rsp, 0x10                       
0x1e225:	call 0x4a20                         #    int euid = |g|eteuid();
0x1e22a:	mov dword ptr [rbp - 0xc], eax      #    int |e|uid = geteuid();
MEMORY OFFSET:     -0xc     -12  >>-4

0x1e22d:	mov eax, dword ptr [rbp - 0xc]      #    if ((pwd = |g|etpwuid(euid)) == NULL)
MEMORY OFFSET:     -0xc     -12  >>-4

0x1e230:	mov edi, eax                        
0x1e232:	call 0x4930                         
0x1e237:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e23b:	cmp qword ptr [rbp - 8], 0          #    if |(|(pwd = getpwuid(euid)) == NULL)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e240:	jne 0x1e2bf                         
0x1e242:	mov rdx, qword ptr [rip + 0x1268f]  #	|f|printf(stderr,
MEMORY OFFSET:     0x1268f     75407  >>75415

0x1e249:	mov rax, qword ptr [rip + 0x12670]  
MEMORY OFFSET:     0x12670     75376  >>75384

0x1e250:	mov ecx, dword ptr [rbp - 0xc]      
MEMORY OFFSET:     -0xc     -12  >>-4

0x1e253:	lea rsi, [rip + 0xb176]             
MEMORY OFFSET:     0xb176     45430  >>45438

0x1e25a:	mov rdi, rax                        
0x1e25d:	mov eax, 0                          
0x1e262:	call 0x4b40                         
0x1e267:	mov rdx, qword ptr [rip + 0x1266a]  #	|f|printf(stderr,
MEMORY OFFSET:     0x1266a     75370  >>75378

0x1e26e:	mov rax, qword ptr [rip + 0x1264b]  
MEMORY OFFSET:     0x1264b     75339  >>75347

0x1e275:	lea rcx, [rip + 0xb188]             
MEMORY OFFSET:     0xb188     45448  >>45456

0x1e27c:	lea rsi, [rip + 0xb19d]             
MEMORY OFFSET:     0xb19d     45469  >>45477

0x1e283:	mov rdi, rax                        
0x1e286:	mov eax, 0                          
0x1e28b:	call 0x4b40                         
0x1e290:	mov rdx, qword ptr [rip + 0x12641]  #	|f|printf(stderr, "%s: Correct the problem and try again.\n", g_program);
MEMORY OFFSET:     0x12641     75329  >>75337

0x1e297:	mov rax, qword ptr [rip + 0x12622]  
MEMORY OFFSET:     0x12622     75298  >>75306

0x1e29e:	lea rcx, [rip + 0xb1b3]             
MEMORY OFFSET:     0xb1b3     45491  >>45499

0x1e2a5:	mov rsi, rcx                        
0x1e2a8:	mov rdi, rax                        
0x1e2ab:	mov eax, 0                          
0x1e2b0:	call 0x4b40                         
0x1e2b5:	mov edi, 1                          #	|e|xit(1);
0x1e2ba:	call 0x4df0                         
0x1e2bf:	mov rax, qword ptr [rbp - 8]        #    login_name     = xstrdup(pwd|-|>pw_name);
MEMORY OFFSET:     -0x8     -8  >>0

0x1e2c3:	mov rax, qword ptr [rax]            
0x1e2c6:	mov rdi, rax                        #    login_name     = |x|strdup(pwd->pw_name);
0x1e2c9:	call 0x24780                        
0x1e2ce:	mov qword ptr [rip + 0x137db], rax  #    login_name     |=| xstrdup(pwd->pw_name);
MEMORY OFFSET:     0x137db     79835  >>79843

0x1e2d5:	nop                                 #|}|
0x1e2d6:	leave                               
0x1e2d7:	ret                                 
0x1e2d8:	endbr64                             #|{|
0x1e2dc:	push rbp                            
0x1e2dd:	mov rbp, rsp                        
0x1e2e0:	sub rsp, 0x30                       
0x1e2e4:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e2e8:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e2ec:	mov dword ptr [rbp - 0x24], edx     
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e2ef:	cmp dword ptr [rbp - 0x24], 3       #    |s|witch (len)
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e2f3:	je 0x1e33c                          
0x1e2f5:	cmp dword ptr [rbp - 0x24], 3       
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e2f9:	jg 0x1e362                          
0x1e2fb:	cmp dword ptr [rbp - 0x24], 2       
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e2ff:	je 0x1e323                          
0x1e301:	cmp dword ptr [rbp - 0x24], 2       
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e305:	jg 0x1e362                          
0x1e307:	cmp dword ptr [rbp - 0x24], 0       
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e30b:	je 0x1e3ed                          
0x1e311:	cmp dword ptr [rbp - 0x24], 1       
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e315:	jne 0x1e362                         
0x1e317:	mov rax, qword ptr [rbp - 0x20]     #	    dest[0] |=| ' ';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e31b:	mov byte ptr [rax], 0x20            
0x1e31e:	jmp 0x1e3ee                         #	    |b|reak;
0x1e323:	mov rax, qword ptr [rbp - 0x20]     #	    dest[0] = dest|[|1] = ' ';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e327:	add rax, 1                          
0x1e32b:	mov byte ptr [rax], 0x20            #	    dest[0] = dest[1] |=| ' ';
0x1e32e:	movzx edx, byte ptr [rax]           #	    dest[0] = dest|[|1] = ' ';
0x1e331:	mov rax, qword ptr [rbp - 0x20]     #	    dest[0] |=| dest[1] = ' ';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e335:	mov byte ptr [rax], dl              
0x1e337:	jmp 0x1e3ee                         #	    |b|reak;
0x1e33c:	mov rax, qword ptr [rbp - 0x20]     #	    dest[0] = dest[1] = dest|[|2] = ' ';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e340:	lea rdx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x1e344:	mov byte ptr [rdx], 0x20            #	    dest[0] = dest[1] = dest[2] |=| ' ';
0x1e347:	mov rax, qword ptr [rbp - 0x20]     #	    dest[0] = dest|[|1] = dest[2] = ' ';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e34b:	add rax, 1                          
0x1e34f:	movzx edx, byte ptr [rdx]           #	    dest[0] = dest[1] = dest|[|2] = ' ';
0x1e352:	mov byte ptr [rax], dl              #	    dest[0] = dest[1] |=| dest[2] = ' ';
0x1e354:	movzx edx, byte ptr [rax]           #	    dest[0] = dest|[|1] = dest[2] = ' ';
0x1e357:	mov rax, qword ptr [rbp - 0x20]     #	    dest[0] |=| dest[1] = dest[2] = ' ';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e35b:	mov byte ptr [rax], dl              
0x1e35d:	jmp 0x1e3ee                         #	    |b|reak;
0x1e362:	mov rax, qword ptr [rbp - 0x18]     #	    name_len = |s|trlen(name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e366:	mov rdi, rax                        
0x1e369:	call 0x4960                         
0x1e36e:	mov dword ptr [rbp - 4], eax        #	    name_len |=| strlen(name);
MEMORY OFFSET:     -0x4     -4  >>4

0x1e371:	mov eax, dword ptr [rbp - 4]        #	    if |(|name_len > len)
MEMORY OFFSET:     -0x4     -4  >>4

0x1e374:	cmp eax, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e377:	jle 0x1e3d2                         
0x1e379:	mov rax, qword ptr [rbp - 0x20]     #		dest[0] = dest[1] = dest|[|2] = '.';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e37d:	lea rdx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x1e381:	mov byte ptr [rdx], 0x2e            #		dest[0] = dest[1] = dest[2] |=| '.';
0x1e384:	mov rax, qword ptr [rbp - 0x20]     #		dest[0] = dest|[|1] = dest[2] = '.';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e388:	add rax, 1                          
0x1e38c:	movzx edx, byte ptr [rdx]           #		dest[0] = dest[1] = dest|[|2] = '.';
0x1e38f:	mov byte ptr [rax], dl              #		dest[0] = dest[1] |=| dest[2] = '.';
0x1e391:	movzx edx, byte ptr [rax]           #		dest[0] = dest|[|1] = dest[2] = '.';
0x1e394:	mov rax, qword ptr [rbp - 0x20]     #		dest[0] |=| dest[1] = dest[2] = '.';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e398:	mov byte ptr [rax], dl              
0x1e39a:	mov eax, dword ptr [rbp - 0x24]     #		memcpy(dest + 3, name + name_len - len + 3, len |-| 3);
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e39d:	sub eax, 3                          
0x1e3a0:	cdqe                                #		|m|emcpy(dest + 3, name + name_len - len + 3, len - 3);
0x1e3a2:	mov edx, dword ptr [rbp - 4]        #		memcpy(dest + 3, name + name_len |-| len + 3, len - 3);
MEMORY OFFSET:     -0x4     -4  >>4

0x1e3a5:	movsxd rdx, edx                     
0x1e3a8:	mov ecx, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e3ab:	movsxd rcx, ecx                     
0x1e3ae:	sub rdx, rcx                        
0x1e3b1:	lea rcx, [rdx + 3]                  #		memcpy(dest + 3, name + name_len - len |+| 3, len - 3);
MEMORY OFFSET:     0x3     3  >>11

0x1e3b5:	mov rdx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e3b9:	lea rsi, [rcx + rdx]                
0x1e3bd:	mov rdx, qword ptr [rbp - 0x20]     #		memcpy(dest |+| 3, name + name_len - len + 3, len - 3);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e3c1:	lea rcx, [rdx + 3]                  
MEMORY OFFSET:     0x3     3  >>11

0x1e3c5:	mov rdx, rax                        #		|m|emcpy(dest + 3, name + name_len - len + 3, len - 3);
0x1e3c8:	mov rdi, rcx                        
0x1e3cb:	call 0x4b70                         
0x1e3d0:	jmp 0x1e3ee                         #	    |b|reak;
0x1e3d2:	mov eax, dword ptr [rbp - 4]        #		|m|emcpy(dest, name, name_len);
MEMORY OFFSET:     -0x4     -4  >>4

0x1e3d5:	movsxd rdx, eax                     
0x1e3d8:	mov rcx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e3dc:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e3e0:	mov rsi, rcx                        
0x1e3e3:	mov rdi, rax                        
0x1e3e6:	call 0x4b70                         
0x1e3eb:	jmp 0x1e3ee                         #	    |b|reak;
0x1e3ed:	nop                                 #	    |b|reak;
0x1e3ee:	nop                                 #|}|
0x1e3ef:	leave                               
0x1e3f0:	ret                                 
0x1e3f1:	endbr64                             #|{|
0x1e3f5:	push rbp                            
0x1e3f6:	mov rbp, rsp                        
0x1e3f9:	push rbx                            
0x1e3fa:	sub rsp, 0x28                       
0x1e3fe:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e402:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e406:	mov dword ptr [rbp - 0x24], edx     
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e409:	mov eax, dword ptr [rbp - 0x24]     #    |t|runcate_long_name(path, temppath, len - 1);
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e40c:	lea edx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1e40f:	mov rcx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e413:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e417:	mov rsi, rcx                        
0x1e41a:	mov rdi, rax                        
0x1e41d:	call 0x1e2d8                        
0x1e422:	mov eax, dword ptr [rbp - 0x24]     #    temppath[|m|in(len - 1, (int)strlen(path))] = '\0';
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e425:	lea ebx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1e428:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e42c:	mov rdi, rax                        
0x1e42f:	call 0x4960                         
0x1e434:	cmp ebx, eax                        
0x1e436:	jg 0x1e442                          
0x1e438:	mov eax, dword ptr [rbp - 0x24]     #    temppath[|m|in(len - 1, (int)strlen(path))] = '\0';
MEMORY OFFSET:     -0x24     -36  >>-28

0x1e43b:	sub eax, 1                          
0x1e43e:	cdqe                                
0x1e440:	jmp 0x1e450                         
0x1e442:	mov rax, qword ptr [rbp - 0x18]     #    temppath[|m|in(len - 1, (int)strlen(path))] = '\0';
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e446:	mov rdi, rax                        
0x1e449:	call 0x4960                         
0x1e44e:	cdqe                                
0x1e450:	mov rdx, qword ptr [rbp - 0x20]     #    temppath|[|min(len - 1, (int)strlen(path))] = '\0';
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e454:	add rax, rdx                        
0x1e457:	mov byte ptr [rax], 0               #    temppath[min(len - 1, (int)strlen(path))] |=| '\0';
0x1e45a:	mov rax, qword ptr [rbp - 0x20]     #    return |t|emppath;
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e45e:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1e462:	leave                               
0x1e463:	ret                                 
0x1e464:	endbr64                             #|{|
0x1e468:	push rbp                            
0x1e469:	mov rbp, rsp                        
0x1e46c:	sub rsp, 0x20                       
0x1e470:	mov dword ptr [rbp - 0x14], edi     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1e473:	mov eax, dword ptr [rbp - 0x14]     #    current = |l|seek64(fd, 0, SEEK_CUR);
MEMORY OFFSET:     -0x14     -20  >>-12

0x1e476:	mov edx, 1                          
0x1e47b:	mov esi, 0                          
0x1e480:	mov edi, eax                        
0x1e482:	call 0x4e20                         
0x1e487:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e48b:	mov eax, dword ptr [rbp - 0x14]     #    length  = |l|seek64(fd, 0, SEEK_END);
MEMORY OFFSET:     -0x14     -20  >>-12

0x1e48e:	mov edx, 2                          
0x1e493:	mov esi, 0                          
0x1e498:	mov edi, eax                        
0x1e49a:	call 0x4e20                         
0x1e49f:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e4a3:	mov rcx, qword ptr [rbp - 0x10]     #    |l|seek64(fd, current, SEEK_SET);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e4a7:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1e4aa:	mov edx, 0                          
0x1e4af:	mov rsi, rcx                        
0x1e4b2:	mov edi, eax                        
0x1e4b4:	call 0x4e20                         
0x1e4b9:	mov rax, qword ptr [rbp - 8]        #    return |l|ength;
MEMORY OFFSET:     -0x8     -8  >>0

0x1e4bd:	leave                               #|}|
0x1e4be:	ret                                 
0x1e4bf:	endbr64                             #|{|
0x1e4c3:	push rbp                            
0x1e4c4:	mov rbp, rsp                        
0x1e4c7:	sub rsp, 0x10                       
0x1e4cb:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1e4d4:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e4d8:	xor eax, eax                        
0x1e4da:	mov edi, 0                          #    __time = |t|ime(NULL);
0x1e4df:	call 0x4ba0                         
0x1e4e4:	mov qword ptr [rbp - 0x10], rax     #    __time |=| time(NULL);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e4e8:	lea rax, [rbp - 0x10]               #    return |l|ocaltime(&__time);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1e4ec:	mov rdi, rax                        
0x1e4ef:	call 0x4800                         
0x1e4f4:	mov rdx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1e4f8:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1e501:	je 0x1e508                          
0x1e503:	call 0x4980                         
0x1e508:	leave                               
0x1e509:	ret                                 
0x1e50a:	endbr64                             #|{|
0x1e50e:	push rbp                            
0x1e50f:	mov rbp, rsp                        
0x1e512:	push rbx                            
0x1e513:	sub rsp, 0x28                       
0x1e517:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1e51b:	mov qword ptr [rbp - 0x30], rsi     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1e51f:	mov rax, qword ptr [rbp - 0x28]     #	    xmalloc(|s|trlen(variable) + 1 + strlen(value) + 1);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1e523:	mov rdi, rax                        
0x1e526:	call 0x4960                         
0x1e52b:	mov rbx, rax                        
0x1e52e:	mov rax, qword ptr [rbp - 0x30]     #	    xmalloc(strlen(variable) + 1 + |s|trlen(value) + 1);
MEMORY OFFSET:     -0x30     -48  >>-40

0x1e532:	mov rdi, rax                        
0x1e535:	call 0x4960                         
0x1e53a:	add rax, rbx                        #	    xmalloc(strlen(variable) + 1 |+| strlen(value) + 1);
0x1e53d:	add rax, 2                          #	    |x|malloc(strlen(variable) + 1 + strlen(value) + 1);
0x1e541:	mov rdi, rax                        
0x1e544:	call 0x24650                        
0x1e549:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e54d:	mov rcx, qword ptr [rbp - 0x30]     #	|s|printf(environment_string, "%s=%s", variable, value);
MEMORY OFFSET:     -0x30     -48  >>-40

0x1e551:	mov rdx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1e555:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e559:	lea rsi, [rip + 0xaf20]             
MEMORY OFFSET:     0xaf20     44832  >>44840

0x1e560:	mov rdi, rax                        
0x1e563:	mov eax, 0                          
0x1e568:	call 0x4dd0                         
0x1e56d:	mov rax, qword ptr [rbp - 0x18]     #	result = |p|utenv(environment_string);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e571:	mov rdi, rax                        
0x1e574:	call 0x4ae0                         
0x1e579:	mov dword ptr [rbp - 0x1c], eax     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1e57c:	cmp dword ptr [rbp - 0x1c], -1      #    if |(|result == -1)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1e580:	jne 0x1e5a8                         
0x1e582:	mov rdx, qword ptr [rip + 0x1234f]  #	|f|printf(stderr, "%s: warning: cannot add '%s' to environment\n",
MEMORY OFFSET:     0x1234f     74575  >>74583

0x1e589:	mov rax, qword ptr [rip + 0x12330]  
MEMORY OFFSET:     0x12330     74544  >>74552

0x1e590:	mov rcx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1e594:	lea rsi, [rip + 0xaeed]             
MEMORY OFFSET:     0xaeed     44781  >>44789

0x1e59b:	mov rdi, rax                        
0x1e59e:	mov eax, 0                          
0x1e5a3:	call 0x4b40                         
0x1e5a8:	mov eax, dword ptr [rbp - 0x1c]     #    return |r|esult;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1e5ab:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1e5af:	leave                               
0x1e5b0:	ret                                 
0x1e5b1:	endbr64                             #|{|
0x1e5b5:	push rbp                            
0x1e5b6:	mov rbp, rsp                        
0x1e5b9:	sub rsp, 0x20                       
0x1e5bd:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e5c1:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e5c5:	mov qword ptr [rbp - 8], 0          #    for (i |=| 0; i < length; i++)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e5cd:	jmp 0x1e611                         #    |f|or (i = 0; i < length; i++)
0x1e5cf:	call 0x4ec0                         #	if (!|i|sprint((int)string[i]))
0x1e5d4:	mov rdx, qword ptr [rax]            
0x1e5d7:	mov rcx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e5db:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e5df:	add rax, rcx                        
0x1e5e2:	movzx eax, byte ptr [rax]           
0x1e5e5:	movsx rax, al                       
0x1e5e9:	add rax, rax                        
0x1e5ec:	add rax, rdx                        
0x1e5ef:	movzx eax, word ptr [rax]           
0x1e5f2:	movzx eax, ax                       
0x1e5f5:	and eax, 0x4000                     
0x1e5fa:	test eax, eax                       #	if |(|!isprint((int)string[i]))
0x1e5fc:	jne 0x1e60c                         
0x1e5fe:	mov rdx, qword ptr [rbp - 0x18]     #	    string|[|i] = '?';
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e602:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e606:	add rax, rdx                        
0x1e609:	mov byte ptr [rax], 0x3f            #	    string[i] |=| '?';
0x1e60c:	add qword ptr [rbp - 8], 1          #    for (i = 0; i < length; i|+|+)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e611:	mov rax, qword ptr [rbp - 8]        #    for (i = 0; i |<| length; i++)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e615:	cmp rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e619:	jb 0x1e5cf                          
0x1e61b:	nop                                 #|}|
0x1e61c:	nop                                 
0x1e61d:	leave                               
0x1e61e:	ret                                 
0x1e61f:	endbr64                             #|{|
0x1e623:	push rbp                            
0x1e624:	mov rbp, rsp                        
0x1e627:	sub rsp, 0x20                       
0x1e62b:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e62f:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e633:	mov qword ptr [rbp - 8], 0          #    for (i |=| 0; i < length; i++)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e63b:	jmp 0x1e795                         #    |f|or (i = 0; i < length; i++)
0x1e640:	call 0x4ec0                         #	if (!|i|salnum((int)string[i]) &&
0x1e645:	mov rdx, qword ptr [rax]            
0x1e648:	mov rcx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e64c:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e650:	add rax, rcx                        
0x1e653:	movzx eax, byte ptr [rax]           
0x1e656:	movsx rax, al                       
0x1e65a:	add rax, rax                        
0x1e65d:	add rax, rdx                        
0x1e660:	movzx eax, word ptr [rax]           
0x1e663:	movzx eax, ax                       
0x1e666:	and eax, 8                          
0x1e669:	test eax, eax                       #	if |(|!isalnum((int)string[i]) &&
0x1e66b:	jne 0x1e790                         
0x1e671:	mov rdx, qword ptr [rbp - 0x18]     #	    string|[|i] != '.' && string[i] != '-' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e675:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e679:	add rax, rdx                        
0x1e67c:	movzx eax, byte ptr [rax]           
0x1e67f:	cmp al, 0x2e                        #	if (!isalnum((int)string[i]) |&|&
0x1e681:	je 0x1e790                          
0x1e687:	mov rdx, qword ptr [rbp - 0x18]     #	    string[i] != '.' && string|[|i] != '-' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e68b:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e68f:	add rax, rdx                        
0x1e692:	movzx eax, byte ptr [rax]           
0x1e695:	cmp al, 0x2d                        #	    string[i] != '.' |&|& string[i] != '-' &&
0x1e697:	je 0x1e790                          
0x1e69d:	mov rdx, qword ptr [rbp - 0x18]     #	    string|[|i] != '+' && string[i] != '=' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e6a1:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e6a5:	add rax, rdx                        
0x1e6a8:	movzx eax, byte ptr [rax]           
0x1e6ab:	cmp al, 0x2b                        #	    string[i] != '.' && string[i] != '-' |&|&
0x1e6ad:	je 0x1e790                          
0x1e6b3:	mov rdx, qword ptr [rbp - 0x18]     #	    string[i] != '+' && string|[|i] != '=' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e6b7:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e6bb:	add rax, rdx                        
0x1e6be:	movzx eax, byte ptr [rax]           
0x1e6c1:	cmp al, 0x3d                        #	    string[i] != '+' |&|& string[i] != '=' &&
0x1e6c3:	je 0x1e790                          
0x1e6c9:	mov rdx, qword ptr [rbp - 0x18]     #	    string|[|i] != '~' && string[i] != '^' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e6cd:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e6d1:	add rax, rdx                        
0x1e6d4:	movzx eax, byte ptr [rax]           
0x1e6d7:	cmp al, 0x7e                        #	    string[i] != '+' && string[i] != '=' |&|&
0x1e6d9:	je 0x1e790                          
0x1e6df:	mov rdx, qword ptr [rbp - 0x18]     #	    string[i] != '~' && string|[|i] != '^' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e6e3:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e6e7:	add rax, rdx                        
0x1e6ea:	movzx eax, byte ptr [rax]           
0x1e6ed:	cmp al, 0x5e                        #	    string[i] != '~' |&|& string[i] != '^' &&
0x1e6ef:	je 0x1e790                          
0x1e6f5:	mov rdx, qword ptr [rbp - 0x18]     #	    string|[|i] != '%' && string[i] != '@' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e6f9:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e6fd:	add rax, rdx                        
0x1e700:	movzx eax, byte ptr [rax]           
0x1e703:	cmp al, 0x25                        #	    string[i] != '~' && string[i] != '^' |&|&
0x1e705:	je 0x1e790                          
0x1e70b:	mov rdx, qword ptr [rbp - 0x18]     #	    string[i] != '%' && string|[|i] != '@' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e70f:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e713:	add rax, rdx                        
0x1e716:	movzx eax, byte ptr [rax]           
0x1e719:	cmp al, 0x40                        #	    string[i] != '%' |&|& string[i] != '@' &&
0x1e71b:	je 0x1e790                          
0x1e71d:	mov rdx, qword ptr [rbp - 0x18]     #	    string|[|i] != '/' && string[i] != ':' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e721:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e725:	add rax, rdx                        
0x1e728:	movzx eax, byte ptr [rax]           
0x1e72b:	cmp al, 0x2f                        #	    string[i] != '%' && string[i] != '@' |&|&
0x1e72d:	je 0x1e790                          
0x1e72f:	mov rdx, qword ptr [rbp - 0x18]     #	    string[i] != '/' && string|[|i] != ':' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e733:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e737:	add rax, rdx                        
0x1e73a:	movzx eax, byte ptr [rax]           
0x1e73d:	cmp al, 0x3a                        #	    string[i] != '/' |&|& string[i] != ':' &&
0x1e73f:	je 0x1e790                          
0x1e741:	mov rdx, qword ptr [rbp - 0x18]     #	    string|[|i] != '{' && string[i] != '}' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e745:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e749:	add rax, rdx                        
0x1e74c:	movzx eax, byte ptr [rax]           
0x1e74f:	cmp al, 0x7b                        #	    string[i] != '/' && string[i] != ':' |&|&
0x1e751:	je 0x1e790                          
0x1e753:	mov rdx, qword ptr [rbp - 0x18]     #	    string[i] != '{' && string|[|i] != '}' &&
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e757:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e75b:	add rax, rdx                        
0x1e75e:	movzx eax, byte ptr [rax]           
0x1e761:	cmp al, 0x7d                        #	    string[i] != '{' |&|& string[i] != '}' &&
0x1e763:	je 0x1e790                          
0x1e765:	mov rdx, qword ptr [rbp - 0x18]     #	    string|[|i] != ',' && string[i] != '_')
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e769:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e76d:	add rax, rdx                        
0x1e770:	movzx eax, byte ptr [rax]           
0x1e773:	cmp al, 0x2c                        #	    string[i] != '{' && string[i] != '}' |&|&
0x1e775:	je 0x1e790                          
0x1e777:	mov rdx, qword ptr [rbp - 0x18]     #	    string[i] != ',' && string|[|i] != '_')
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e77b:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e77f:	add rax, rdx                        
0x1e782:	movzx eax, byte ptr [rax]           
0x1e785:	cmp al, 0x5f                        #	    string[i] != ',' |&|& string[i] != '_')
0x1e787:	je 0x1e790                          
0x1e789:	mov eax, 1                          #	    return |1|;
0x1e78e:	jmp 0x1e7a8                         
0x1e790:	add qword ptr [rbp - 8], 1          #    for (i = 0; i < length; i|+|+)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e795:	mov rax, qword ptr [rbp - 8]        #    for (i = 0; i |<| length; i++)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e799:	cmp rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1e79d:	jb 0x1e640                          
0x1e7a3:	mov eax, 0                          #    return |0|;
0x1e7a8:	leave                               #|}|
0x1e7a9:	ret                                 
0x1e7aa:	endbr64                             #|{|
0x1e7ae:	push rbp                            
0x1e7af:	mov rbp, rsp                        
0x1e7b2:	sub rsp, 0x20                       
0x1e7b6:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e7ba:	mov rax, qword ptr [rbp - 0x18]     #    for (i = |s|trlen(cmd) - 1; i >= 0; i--)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e7be:	mov rdi, rax                        
0x1e7c1:	call 0x4960                         
0x1e7c6:	sub eax, 1                          #    for (i = strlen(cmd) |-| 1; i >= 0; i--)
0x1e7c9:	mov dword ptr [rbp - 4], eax        #    for (i |=| strlen(cmd) - 1; i >= 0; i--)
MEMORY OFFSET:     -0x4     -4  >>4

0x1e7cc:	jmp 0x1e81c                         #    |f|or (i = strlen(cmd) - 1; i >= 0; i--)
0x1e7ce:	mov eax, dword ptr [rbp - 4]        #	if (cmd|[|i] == '&')
MEMORY OFFSET:     -0x4     -4  >>4

0x1e7d1:	movsxd rdx, eax                     
0x1e7d4:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e7d8:	add rax, rdx                        
0x1e7db:	movzx eax, byte ptr [rax]           
0x1e7de:	cmp al, 0x26                        #	if |(|cmd[i] == '&')
0x1e7e0:	jne 0x1e7e9                         
0x1e7e2:	mov eax, 1                          #	    return |1|;
0x1e7e7:	jmp 0x1e827                         
0x1e7e9:	mov eax, dword ptr [rbp - 4]        #	if (cmd|[|i] != ' ' && cmd[i] != key_TAB)
MEMORY OFFSET:     -0x4     -4  >>4

0x1e7ec:	movsxd rdx, eax                     
0x1e7ef:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e7f3:	add rax, rdx                        
0x1e7f6:	movzx eax, byte ptr [rax]           
0x1e7f9:	cmp al, 0x20                        #	if |(|cmd[i] != ' ' && cmd[i] != key_TAB)
0x1e7fb:	je 0x1e818                          
0x1e7fd:	mov eax, dword ptr [rbp - 4]        #	if (cmd[i] != ' ' && cmd|[|i] != key_TAB)
MEMORY OFFSET:     -0x4     -4  >>4

0x1e800:	movsxd rdx, eax                     
0x1e803:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1e807:	add rax, rdx                        
0x1e80a:	movzx eax, byte ptr [rax]           
0x1e80d:	cmp al, 9                           #	if (cmd[i] != ' ' |&|& cmd[i] != key_TAB)
0x1e80f:	je 0x1e818                          
0x1e811:	mov eax, 0                          #	    return |0|;
0x1e816:	jmp 0x1e827                         
0x1e818:	sub dword ptr [rbp - 4], 1          #    for (i = strlen(cmd) - 1; i >= 0; i|-|-)
MEMORY OFFSET:     -0x4     -4  >>4

0x1e81c:	cmp dword ptr [rbp - 4], 0          #    for (i = strlen(cmd) - 1; i |>|= 0; i--)
MEMORY OFFSET:     -0x4     -4  >>4

0x1e820:	jns 0x1e7ce                         
0x1e822:	mov eax, 0                          #    return |0|;
0x1e827:	leave                               #|}|
0x1e828:	ret                                 
0x1e829:	endbr64                             #|{|
0x1e82d:	push rbp                            
0x1e82e:	mov rbp, rsp                        
0x1e831:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e835:	jmp 0x1e859                         #    |f|or (; *cmd; cmd++)
0x1e837:	mov rax, qword ptr [rbp - 8]        #	if (|*|cmd != ' ' && *cmd != ';')
MEMORY OFFSET:     -0x8     -8  >>0

0x1e83b:	movzx eax, byte ptr [rax]           
0x1e83e:	cmp al, 0x20                        #	if |(|*cmd != ' ' && *cmd != ';')
0x1e840:	je 0x1e854                          
0x1e842:	mov rax, qword ptr [rbp - 8]        #	if (*cmd != ' ' && |*|cmd != ';')
MEMORY OFFSET:     -0x8     -8  >>0

0x1e846:	movzx eax, byte ptr [rax]           
0x1e849:	cmp al, 0x3b                        #	if (*cmd != ' ' |&|& *cmd != ';')
0x1e84b:	je 0x1e854                          
0x1e84d:	mov eax, 0                          #	    return |0|;
0x1e852:	jmp 0x1e869                         
0x1e854:	add qword ptr [rbp - 8], 1          #    for (; *cmd; cmd|+|+)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e859:	mov rax, qword ptr [rbp - 8]        #    for (; |*|cmd; cmd++)
MEMORY OFFSET:     -0x8     -8  >>0

0x1e85d:	movzx eax, byte ptr [rax]           
0x1e860:	test al, al                         
0x1e862:	jne 0x1e837                         
0x1e864:	mov eax, 1                          #    return |1|;
0x1e869:	pop rbp                             #|}|
0x1e86a:	ret                                 
0x1e86b:	endbr64                             #|{|
0x1e86f:	push rbp                            
0x1e870:	mov rbp, rsp                        
0x1e873:	sub rsp, 0xb0                       
0x1e87a:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1e883:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1e887:	xor eax, eax                        
0x1e889:	mov qword ptr [rbp - 0x98], 0       #    file_type_info_t *|p|revious = NULL, *fti, *fti_head1 = NULL;
MEMORY OFFSET:     -0x98     -152  >>-144

0x1e894:	mov qword ptr [rbp - 0x90], 0       #    file_type_info_t *previous = NULL, *fti, *|f|ti_head1 = NULL;
MEMORY OFFSET:     -0x90     -144  >>-136

0x1e89f:	lea rsi, [rbp - 0x80]               #	|c|onfiguration_getvarinfo(pattern, contents, 3, NO_SEEK);
MEMORY OFFSET:     -0x80     -128  >>-120

0x1e8a3:	lea rax, [rbp - 0x60]               
MEMORY OFFSET:     -0x60     -96  >>-88

0x1e8a7:	mov ecx, 0                          
0x1e8ac:	mov edx, 3                          
0x1e8b1:	mov rdi, rax                        
0x1e8b4:	call 0x1cf27                        
0x1e8b9:	movzx eax, byte ptr [rbp - 0x60]    #	if (|*|pattern == '\0')
MEMORY OFFSET:     -0x60     -96  >>-88

0x1e8bd:	test al, al                         #	if |(|*pattern == '\0')
0x1e8bf:	je 0x1e9ed                          
0x1e8c5:	mov rax, qword ptr [rbp - 0x80]     #	if (contents|[|0])
MEMORY OFFSET:     -0x80     -128  >>-120

0x1e8c9:	test rax, rax                       #	if |(|contents[0])
0x1e8cc:	je 0x1e8e2                          
0x1e8ce:	mov rax, qword ptr [rbp - 0x80]     #	    foreground = |t|ty_get_color_index(contents[0]);
MEMORY OFFSET:     -0x80     -128  >>-120

0x1e8d2:	mov rdi, rax                        
0x1e8d5:	call 0xcef6                         
0x1e8da:	mov dword ptr [rbp - 0xa0], eax     
MEMORY OFFSET:     -0xa0     -160  >>-152

0x1e8e0:	jmp 0x1e8ec                         
0x1e8e2:	mov dword ptr [rbp - 0xa0], 0xffffffff#	    foreground |=| -1;
MEMORY OFFSET:     -0xa0     -160  >>-152

0x1e8ec:	mov rax, qword ptr [rbp - 0x78]     #	if (contents|[|1])
MEMORY OFFSET:     -0x78     -120  >>-112

0x1e8f0:	test rax, rax                       #	if |(|contents[1])
0x1e8f3:	je 0x1e909                          
0x1e8f5:	mov rax, qword ptr [rbp - 0x78]     #	    background = |t|ty_get_color_index(contents[1]);
MEMORY OFFSET:     -0x78     -120  >>-112

0x1e8f9:	mov rdi, rax                        
0x1e8fc:	call 0xcef6                         
0x1e901:	mov dword ptr [rbp - 0x9c], eax     
MEMORY OFFSET:     -0x9c     -156  >>-148

0x1e907:	jmp 0x1e913                         
0x1e909:	mov dword ptr [rbp - 0x9c], 0xffffffff#	    background |=| -1;
MEMORY OFFSET:     -0x9c     -156  >>-148

0x1e913:	mov rax, qword ptr [rbp - 0x70]     #	if (contents|[|2])
MEMORY OFFSET:     -0x70     -112  >>-104

0x1e917:	test rax, rax                       #	if |(|contents[2])
0x1e91a:	je 0x1e930                          
0x1e91c:	mov rax, qword ptr [rbp - 0x70]     #	    brightness = |t|ty_get_color_index(contents[2]);
MEMORY OFFSET:     -0x70     -112  >>-104

0x1e920:	mov rdi, rax                        
0x1e923:	call 0xcef6                         
0x1e928:	mov dword ptr [rbp - 0xa4], eax     
MEMORY OFFSET:     -0xa4     -164  >>-156

0x1e92e:	jmp 0x1e93a                         
0x1e930:	mov dword ptr [rbp - 0xa4], 0xffffffff#	    brightness |=| -1;
MEMORY OFFSET:     -0xa4     -164  >>-156

0x1e93a:	mov edi, 0x20                       #	fti = (file_type_info_t *)|x|malloc(sizeof(file_type_info_t));
0x1e93f:	call 0x24650                        
0x1e944:	mov qword ptr [rbp - 0x88], rax     
MEMORY OFFSET:     -0x88     -136  >>-128

0x1e94b:	cmp qword ptr [rbp - 0x90], 0       #	if |(|fti_head1 == NULL)
MEMORY OFFSET:     -0x90     -144  >>-136

0x1e953:	jne 0x1e973                         
0x1e955:	mov rax, qword ptr [rbp - 0x88]     #	    fti_head1 = previous |=| fti;
MEMORY OFFSET:     -0x88     -136  >>-128

0x1e95c:	mov qword ptr [rbp - 0x98], rax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x1e963:	mov rax, qword ptr [rbp - 0x98]     #	    fti_head1 |=| previous = fti;
MEMORY OFFSET:     -0x98     -152  >>-144

0x1e96a:	mov qword ptr [rbp - 0x90], rax     
MEMORY OFFSET:     -0x90     -144  >>-136

0x1e971:	jmp 0x1e985                         
0x1e973:	mov rax, qword ptr [rbp - 0x98]     #	    previous->next |=| fti;
MEMORY OFFSET:     -0x98     -152  >>-144

0x1e97a:	mov rdx, qword ptr [rbp - 0x88]     
MEMORY OFFSET:     -0x88     -136  >>-128

0x1e981:	mov qword ptr [rax + 0x18], rdx     
MEMORY OFFSET:     0x18     24  >>32

0x1e985:	lea rax, [rbp - 0x60]               #	fti->pattern    = |x|strdup(pattern);
MEMORY OFFSET:     -0x60     -96  >>-88

0x1e989:	mov rdi, rax                        
0x1e98c:	call 0x24780                        
0x1e991:	mov rdx, qword ptr [rbp - 0x88]     #	fti->pattern    |=| xstrdup(pattern);
MEMORY OFFSET:     -0x88     -136  >>-128

0x1e998:	mov qword ptr [rdx], rax            
0x1e99b:	mov rax, qword ptr [rbp - 0x88]     #	fti->foreground |=| foreground;
MEMORY OFFSET:     -0x88     -136  >>-128

0x1e9a2:	mov edx, dword ptr [rbp - 0xa0]     
MEMORY OFFSET:     -0xa0     -160  >>-152

0x1e9a8:	mov dword ptr [rax + 8], edx        
MEMORY OFFSET:     0x8     8  >>16

0x1e9ab:	mov rax, qword ptr [rbp - 0x88]     #	fti->background |=| background;
MEMORY OFFSET:     -0x88     -136  >>-128

0x1e9b2:	mov edx, dword ptr [rbp - 0x9c]     
MEMORY OFFSET:     -0x9c     -156  >>-148

0x1e9b8:	mov dword ptr [rax + 0xc], edx      
MEMORY OFFSET:     0xc     12  >>20

0x1e9bb:	mov rax, qword ptr [rbp - 0x88]     #	fti->brightness |=| brightness;
MEMORY OFFSET:     -0x88     -136  >>-128

0x1e9c2:	mov edx, dword ptr [rbp - 0xa4]     
MEMORY OFFSET:     -0xa4     -164  >>-156

0x1e9c8:	mov dword ptr [rax + 0x10], edx     
MEMORY OFFSET:     0x10     16  >>24

0x1e9cb:	mov rax, qword ptr [rbp - 0x88]     #	fti->next       |=| NULL;
MEMORY OFFSET:     -0x88     -136  >>-128

0x1e9d2:	mov qword ptr [rax + 0x18], 0       
MEMORY OFFSET:     0x18     24  >>32

0x1e9da:	mov rax, qword ptr [rbp - 0x88]     #	previous |=| fti;
MEMORY OFFSET:     -0x88     -136  >>-128

0x1e9e1:	mov qword ptr [rbp - 0x98], rax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x1e9e8:	jmp 0x1e89f                         #	|c|onfiguration_getvarinfo(pattern, contents, 3, NO_SEEK);
0x1e9ed:	nop                                 #	    |b|reak;
0x1e9ee:	cmp qword ptr [rbp - 0x90], 0       #    if |(|fti_head1)
MEMORY OFFSET:     -0x90     -144  >>-136

0x1e9f6:	je 0x1ea34                          
0x1e9f8:	mov rax, qword ptr [rip + 0x130b9]  #	if (|f|ti_head)
MEMORY OFFSET:     0x130b9     78009  >>78017

0x1e9ff:	test rax, rax                       #	if |(|fti_head)
0x1ea02:	je 0x1ea26                          
0x1ea04:	mov rdx, qword ptr [rip + 0x130ad]  #	    previous->next |=| fti_head;
MEMORY OFFSET:     0x130ad     77997  >>78005

0x1ea0b:	mov rax, qword ptr [rbp - 0x98]     
MEMORY OFFSET:     -0x98     -152  >>-144

0x1ea12:	mov qword ptr [rax + 0x18], rdx     
MEMORY OFFSET:     0x18     24  >>32

0x1ea16:	mov rax, qword ptr [rbp - 0x90]     #	    fti_head |=| fti_head1;
MEMORY OFFSET:     -0x90     -144  >>-136

0x1ea1d:	mov qword ptr [rip + 0x13094], rax  
MEMORY OFFSET:     0x13094     77972  >>77980

0x1ea24:	jmp 0x1ea34                         #|}|
0x1ea26:	mov rax, qword ptr [rbp - 0x90]     #	    fti_head |=| fti_head1;
MEMORY OFFSET:     -0x90     -144  >>-136

0x1ea2d:	mov qword ptr [rip + 0x13084], rax  
MEMORY OFFSET:     0x13084     77956  >>77964

0x1ea34:	nop                                 #|}|
0x1ea35:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1ea39:	sub rax, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1ea42:	je 0x1ea49                          
0x1ea44:	call 0x4980                         
0x1ea49:	leave                               
0x1ea4a:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/signals.c
####################################################################################################

0x1ea4b:	endbr64                             #|{|
0x1ea4f:	push rbp                            
0x1ea50:	mov rbp, rsp                        
0x1ea53:	mov eax, dword ptr [rip + 0x1306b]  #    if (|s|uspend_requested)
MEMORY OFFSET:     0x1306b     77931  >>77939

0x1ea59:	test eax, eax                       #    if |(|suspend_requested)
0x1ea5b:	je 0x1ea98                          
0x1ea5d:	mov eax, 0                          #	|h|ide();
0x1ea62:	call 0x766d                         
0x1ea67:	call 0x48f0                         #	|k|ill(getpid(), SIGSTOP);
0x1ea6c:	mov esi, 0x13                       
0x1ea71:	mov edi, eax                        
0x1ea73:	call 0x4b90                         
0x1ea78:	mov dword ptr [rip + 0x13042], 0    #	suspend_requested |=| 0;
MEMORY OFFSET:     0x13042     77890  >>77898

0x1ea82:	mov dword ptr [rip + 0x1303c], 0    #	refresh_requested |=| 0;
MEMORY OFFSET:     0x1303c     77884  >>77892

0x1ea8c:	mov dword ptr [rip + 0x13036], 0    #	alarm_requested |=| 0;
MEMORY OFFSET:     0x13036     77878  >>77886

0x1ea96:	jmp 0x1eaeb                         #	|r|eturn;
0x1ea98:	mov eax, dword ptr [rip + 0x1302a]  #    if (|r|efresh_requested)
MEMORY OFFSET:     0x1302a     77866  >>77874

0x1ea9e:	test eax, eax                       #    if |(|refresh_requested)
0x1eaa0:	je 0x1ead6                          
0x1eaa2:	mov eax, 0                          #	|t|ty_defaults();
0x1eaa7:	call 0xc083                         
0x1eaac:	mov eax, 0                          #	|t|ty_io_clear();
0x1eab1:	call 0xb099                         
0x1eab6:	mov edi, 0x1c                       #	|r|efresh(SIGWINCH);
0x1eabb:	call 0x5367                         
0x1eac0:	mov dword ptr [rip + 0x12ffe], 0    #	refresh_requested |=| 0;
MEMORY OFFSET:     0x12ffe     77822  >>77830

0x1eaca:	mov dword ptr [rip + 0x12ff8], 0    #	alarm_requested |=| 0;
MEMORY OFFSET:     0x12ff8     77816  >>77824

0x1ead4:	jmp 0x1eaeb                         #	|r|eturn;
0x1ead6:	mov eax, dword ptr [rip + 0x12ff0]  #    if (|a|larm_requested)
MEMORY OFFSET:     0x12ff0     77808  >>77816

0x1eadc:	test eax, eax                       #    if |(|alarm_requested)
0x1eade:	je 0x1eaeb                          
0x1eae0:	mov dword ptr [rip + 0x12fe2], 0    #	alarm_requested |=| 0;
MEMORY OFFSET:     0x12fe2     77794  >>77802

0x1eaea:	nop                                 #	|r|eturn;
0x1eaeb:	pop rbp                             #|}|
0x1eaec:	ret                                 
0x1eaed:	endbr64                             #|{|
0x1eaf1:	push rbp                            
0x1eaf2:	mov rbp, rsp                        
0x1eaf5:	sub rsp, 0x10                       
0x1eaf9:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x1eafc:	mov eax, dword ptr [rbp - 4]        #    signals_allowed |=| mode;
MEMORY OFFSET:     -0x4     -4  >>4

0x1eaff:	mov dword ptr [rip + 0x12fcf], eax  
MEMORY OFFSET:     0x12fcf     77775  >>77783

0x1eb05:	mov eax, dword ptr [rip + 0x12fc9]  #    if (|s|ignals_allowed)
MEMORY OFFSET:     0x12fc9     77769  >>77777

0x1eb0b:	test eax, eax                       #    if |(|signals_allowed)
0x1eb0d:	je 0x1eb19                          
0x1eb0f:	mov eax, 0                          #	|s|ervice_pending_signals();
0x1eb14:	call 0x1ea4b                        
0x1eb19:	nop                                 #|}|
0x1eb1a:	leave                               
0x1eb1b:	ret                                 
0x1eb1c:	endbr64                             #|{|
0x1eb20:	push rbp                            
0x1eb21:	mov rbp, rsp                        
0x1eb24:	sub rsp, 0x10                       
0x1eb28:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x1eb2b:	mov eax, dword ptr [rip + 0x12fa3]  #    if (|s|ignals_allowed)
MEMORY OFFSET:     0x12fa3     77731  >>77739

0x1eb31:	test eax, eax                       #    if |(|signals_allowed)
0x1eb33:	je 0x1eb75                          
0x1eb35:	mov eax, 0                          #	refresh_at_SIGCONT = (|t|ty_get_mode() == TTY_NONCANONIC);
0x1eb3a:	call 0xaf63                         
0x1eb3f:	cmp eax, 1                          #	refresh_at_SIGCONT = (tty_get_mode() |=|= TTY_NONCANONIC);
0x1eb42:	sete al                             
0x1eb45:	movzx eax, al                       
0x1eb48:	mov dword ptr [rip + 0x12f82], eax  #	refresh_at_SIGCONT |=| (tty_get_mode() == TTY_NONCANONIC);
MEMORY OFFSET:     0x12f82     77698  >>77706

0x1eb4e:	mov eax, 0                          #	|h|ide();
0x1eb53:	call 0x766d                         
0x1eb58:	call 0x48f0                         #	|k|ill(getpid(), SIGSTOP);
0x1eb5d:	mov esi, 0x13                       
0x1eb62:	mov edi, eax                        
0x1eb64:	call 0x4b90                         
0x1eb69:	mov dword ptr [rip + 0x12f51], 0    #	suspend_requested |=| 0;
MEMORY OFFSET:     0x12f51     77649  >>77657

0x1eb73:	jmp 0x1eb7f                         
0x1eb75:	mov dword ptr [rip + 0x12f45], 1    #	suspend_requested |=| 1;
MEMORY OFFSET:     0x12f45     77637  >>77645

0x1eb7f:	mov eax, dword ptr [rbp - 4]        #    |i|nstall_handler(signum);
MEMORY OFFSET:     -0x4     -4  >>4

0x1eb82:	mov edi, eax                        
0x1eb84:	call 0x1ecca                        
0x1eb89:	nop                                 #|}|
0x1eb8a:	leave                               
0x1eb8b:	ret                                 
0x1eb8c:	endbr64                             #|{|
0x1eb90:	push rbp                            
0x1eb91:	mov rbp, rsp                        
0x1eb94:	sub rsp, 0x10                       
0x1eb98:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x1eb9b:	mov eax, dword ptr [rip + 0x12f33]  #    if (|s|ignals_allowed)
MEMORY OFFSET:     0x12f33     77619  >>77627

0x1eba1:	test eax, eax                       #    if |(|signals_allowed)
0x1eba3:	je 0x1ebcf                          
0x1eba5:	mov eax, 0                          #	|t|ty_defaults();
0x1ebaa:	call 0xc083                         
0x1ebaf:	mov eax, 0                          #	|t|ty_io_clear();
0x1ebb4:	call 0xb099                         
0x1ebb9:	mov eax, dword ptr [rbp - 4]        #	|r|efresh(signum);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ebbc:	mov edi, eax                        
0x1ebbe:	call 0x5367                         
0x1ebc3:	mov dword ptr [rip + 0x12efb], 0    #	refresh_requested |=| 0;
MEMORY OFFSET:     0x12efb     77563  >>77571

0x1ebcd:	jmp 0x1ebd9                         
0x1ebcf:	mov dword ptr [rip + 0x12eef], 1    #	refresh_requested |=| 1;
MEMORY OFFSET:     0x12eef     77551  >>77559

0x1ebd9:	mov eax, dword ptr [rbp - 4]        #    |i|nstall_handler(signum);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ebdc:	mov edi, eax                        
0x1ebde:	call 0x1ecca                        
0x1ebe3:	nop                                 #|}|
0x1ebe4:	leave                               
0x1ebe5:	ret                                 
0x1ebe6:	endbr64                             #|{|
0x1ebea:	push rbp                            
0x1ebeb:	mov rbp, rsp                        
0x1ebee:	sub rsp, 0x10                       
0x1ebf2:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x1ebf5:	mov eax, dword ptr [rip + 0x12ed5]  #    if (|r|efresh_at_SIGCONT)
MEMORY OFFSET:     0x12ed5     77525  >>77533

0x1ebfb:	test eax, eax                       #    if |(|refresh_at_SIGCONT)
0x1ebfd:	je 0x1ec13                          
0x1ebff:	mov eax, dword ptr [rbp - 4]        #	|r|efresh(signum);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ec02:	mov edi, eax                        
0x1ec04:	call 0x5367                         
0x1ec09:	mov dword ptr [rip + 0x12eb5], 0    #	refresh_requested |=| 0;
MEMORY OFFSET:     0x12eb5     77493  >>77501

0x1ec13:	mov eax, dword ptr [rbp - 4]        #    |i|nstall_handler(signum);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ec16:	mov edi, eax                        
0x1ec18:	call 0x1ecca                        
0x1ec1d:	nop                                 #|}|
0x1ec1e:	leave                               
0x1ec1f:	ret                                 
0x1ec20:	endbr64                             #|{|
0x1ec24:	push rbp                            
0x1ec25:	mov rbp, rsp                        
0x1ec28:	sub rsp, 0x10                       
0x1ec2c:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x1ec2f:	mov eax, dword ptr [rip + 0x12e9f]  #    if (|s|ignals_allowed)
MEMORY OFFSET:     0x12e9f     77471  >>77479

0x1ec35:	test eax, eax                       #    if |(|signals_allowed)
0x1ec37:	je 0x1ec69                          
0x1ec39:	mov eax, 0                          #	if (|g|et_local_time()->tm_sec == 0)
0x1ec3e:	call 0x1e4bf                        
0x1ec43:	mov eax, dword ptr [rax]            #	if (get_local_time()|-|>tm_sec == 0)
0x1ec45:	test eax, eax                       #	if |(|get_local_time()->tm_sec == 0)
0x1ec47:	jne 0x1ec53                         
0x1ec49:	mov eax, dword ptr [rbp - 4]        #	    |c|lock_refresh(signum);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ec4c:	mov edi, eax                        
0x1ec4e:	call 0x1c528                        
0x1ec53:	mov eax, 0                          #	|t|ty_key_print_async();
0x1ec58:	call 0xc827                         
0x1ec5d:	mov dword ptr [rip + 0x12e65], 0    #	alarm_requested |=| 0;
MEMORY OFFSET:     0x12e65     77413  >>77421

0x1ec67:	jmp 0x1ec73                         
0x1ec69:	mov dword ptr [rip + 0x12e59], 1    #	alarm_requested |=| 1;
MEMORY OFFSET:     0x12e59     77401  >>77409

0x1ec73:	mov eax, dword ptr [rbp - 4]        #    |i|nstall_handler(signum);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ec76:	mov edi, eax                        
0x1ec78:	call 0x1ecca                        
0x1ec7d:	mov eax, 0                          #    alarm(60 - |g|et_local_time()->tm_sec);
0x1ec82:	call 0x1e4bf                        
0x1ec87:	mov edx, dword ptr [rax]            #    alarm(60 - get_local_time()|-|>tm_sec);
0x1ec89:	mov eax, 0x3c                       #    alarm(60 |-| get_local_time()->tm_sec);
0x1ec8e:	sub eax, edx                        
0x1ec90:	mov edi, eax                        #    |a|larm(60 - get_local_time()->tm_sec);
0x1ec92:	call 0x4a60                         
0x1ec97:	nop                                 #|}|
0x1ec98:	leave                               
0x1ec99:	ret                                 
0x1ec9a:	endbr64                             #|{|
0x1ec9e:	push rbp                            
0x1ec9f:	mov rbp, rsp                        
0x1eca2:	sub rsp, 0x10                       
0x1eca6:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x1eca9:	mov eax, dword ptr [rbp - 4]        #    |s|ignal(signum, panic);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ecac:	lea rdx, [rip - 0x19]               
MEMORY OFFSET:     -0x19     -25  >>-17

0x1ecb3:	mov rsi, rdx                        
0x1ecb6:	mov edi, eax                        
0x1ecb8:	call 0x4b10                         
0x1ecbd:	mov dword ptr [rip + 0x12df9], 1    #    user_heart_attack |=| 1;
MEMORY OFFSET:     0x12df9     77305  >>77313

0x1ecc7:	nop                                 #|}|
0x1ecc8:	leave                               
0x1ecc9:	ret                                 
0x1ecca:	endbr64                             #|{|
0x1ecce:	push rbp                            
0x1eccf:	mov rbp, rsp                        
0x1ecd2:	sub rsp, 0x10                       
0x1ecd6:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x1ecd9:	cmp dword ptr [rbp - 4], 0x1c       #    |s|witch (signum)
MEMORY OFFSET:     -0x4     -4  >>4

0x1ecdd:	je 0x1ed2b                          
0x1ecdf:	cmp dword ptr [rbp - 4], 0x1c       
MEMORY OFFSET:     -0x4     -4  >>4

0x1ece3:	jg 0x1ed56                          
0x1ece5:	cmp dword ptr [rbp - 4], 0x14       
MEMORY OFFSET:     -0x4     -4  >>4

0x1ece9:	je 0x1ecff                          
0x1eceb:	cmp dword ptr [rbp - 4], 0x14       
MEMORY OFFSET:     -0x4     -4  >>4

0x1ecef:	jg 0x1ed56                          
0x1ecf1:	cmp dword ptr [rbp - 4], 0xe        
MEMORY OFFSET:     -0x4     -4  >>4

0x1ecf5:	je 0x1ed41                          
0x1ecf7:	cmp dword ptr [rbp - 4], 0x12       
MEMORY OFFSET:     -0x4     -4  >>4

0x1ecfb:	je 0x1ed15                          
0x1ecfd:	jmp 0x1ed56                         #|}|
0x1ecff:	lea rax, [rip - 0x1ea]              #	    |s|ignal(SIGTSTP, suspend);
MEMORY OFFSET:     -0x1ea     -490  >>-482

0x1ed06:	mov rsi, rax                        
0x1ed09:	mov edi, 0x14                       
0x1ed0e:	call 0x4b10                         
0x1ed13:	jmp 0x1ed56                         #	    |b|reak;
0x1ed15:	lea rax, [rip - 0x136]              #	    |s|ignal(SIGCONT, resume);
MEMORY OFFSET:     -0x136     -310  >>-302

0x1ed1c:	mov rsi, rax                        
0x1ed1f:	mov edi, 0x12                       
0x1ed24:	call 0x4b10                         
0x1ed29:	jmp 0x1ed56                         #	    |b|reak;
0x1ed2b:	lea rax, [rip - 0x1a6]              #	    |s|ignal(SIGWINCH, window_change);
MEMORY OFFSET:     -0x1a6     -422  >>-414

0x1ed32:	mov rsi, rax                        
0x1ed35:	mov edi, 0x1c                       
0x1ed3a:	call 0x4b10                         
0x1ed3f:	jmp 0x1ed56                         #	    |b|reak;
0x1ed41:	lea rax, [rip - 0x128]              #	    |s|ignal(SIGALRM, time_change);
MEMORY OFFSET:     -0x128     -296  >>-288

0x1ed48:	mov rsi, rax                        
0x1ed4b:	mov edi, 0xe                        
0x1ed50:	call 0x4b10                         
0x1ed55:	nop                                 #	    |b|reak;
0x1ed56:	nop                                 #|}|
0x1ed57:	leave                               
0x1ed58:	ret                                 
0x1ed59:	endbr64                             #|{|
0x1ed5d:	push rbp                            
0x1ed5e:	mov rbp, rsp                        
0x1ed61:	sub rsp, 0x10                       
0x1ed65:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x1ed68:	cmp dword ptr [rbp - 4], 1          #    if |(|status == ON)
MEMORY OFFSET:     -0x4     -4  >>4

0x1ed6c:	jne 0x1eda2                         
0x1ed6e:	mov eax, dword ptr [rip + 0x11a6c]  #	if (|j|ob_control)
MEMORY OFFSET:     0x11a6c     72300  >>72308

0x1ed74:	test eax, eax                       #	if |(|job_control)
0x1ed76:	je 0x1ed8c                          
0x1ed78:	mov edi, 0x14                       #	    |i|nstall_handler(SIGTSTP);
0x1ed7d:	call 0x1ecca                        
0x1ed82:	mov edi, 0x12                       #	    |i|nstall_handler(SIGCONT);
0x1ed87:	call 0x1ecca                        
0x1ed8c:	mov edi, 0x1c                       #	|i|nstall_handler(SIGWINCH);
0x1ed91:	call 0x1ecca                        
0x1ed96:	mov edi, 0xe                        #	|i|nstall_handler(SIGALRM);
0x1ed9b:	call 0x1ecca                        
0x1eda0:	jmp 0x1ede8                         #|}|
0x1eda2:	mov eax, dword ptr [rip + 0x11a38]  #	if (|j|ob_control)
MEMORY OFFSET:     0x11a38     72248  >>72256

0x1eda8:	test eax, eax                       #	if |(|job_control)
0x1edaa:	je 0x1edca                          
0x1edac:	mov esi, 1                          #	    |s|ignal(SIGTSTP, SIG_IGN);
0x1edb1:	mov edi, 0x14                       
0x1edb6:	call 0x4b10                         
0x1edbb:	mov esi, 1                          #	    |s|ignal(SIGCONT, SIG_IGN);
0x1edc0:	mov edi, 0x12                       
0x1edc5:	call 0x4b10                         
0x1edca:	mov esi, 1                          #	|s|ignal(SIGWINCH, SIG_IGN);
0x1edcf:	mov edi, 0x1c                       
0x1edd4:	call 0x4b10                         
0x1edd9:	mov esi, 1                          #	|s|ignal(SIGALRM, SIG_IGN);
0x1edde:	mov edi, 0xe                        
0x1ede3:	call 0x4b10                         
0x1ede8:	nop                                 #|}|
0x1ede9:	leave                               
0x1edea:	ret                                 
0x1edeb:	endbr64                             #|{|
0x1edef:	push rbp                            
0x1edf0:	mov rbp, rsp                        
0x1edf3:	mov esi, 1                          #    job_control = (|s|ignal(SIGTSTP, SIG_IGN) != SIG_IGN);
0x1edf8:	mov edi, 0x14                       
0x1edfd:	call 0x4b10                         
0x1ee02:	cmp rax, 1                          #    job_control = (signal(SIGTSTP, SIG_IGN) |!|= SIG_IGN);
0x1ee06:	setne al                            
0x1ee09:	movzx eax, al                       
0x1ee0c:	mov dword ptr [rip + 0x119ce], eax  #    job_control |=| (signal(SIGTSTP, SIG_IGN) != SIG_IGN);
MEMORY OFFSET:     0x119ce     72142  >>72150

0x1ee12:	mov esi, 1                          #    |s|ignal(SIGCONT, SIG_IGN);
0x1ee17:	mov edi, 0x12                       
0x1ee1c:	call 0x4b10                         
0x1ee21:	mov esi, 1                          #    |s|ignal(SIGWINCH, SIG_IGN);
0x1ee26:	mov edi, 0x1c                       
0x1ee2b:	call 0x4b10                         
0x1ee30:	lea rax, [rip - 0x1886]             #    |s|ignal(SIGSEGV, fatal_signal);
MEMORY OFFSET:     -0x1886     -6278  >>-6270

0x1ee37:	mov rsi, rax                        
0x1ee3a:	mov edi, 0xb                        
0x1ee3f:	call 0x4b10                         
0x1ee44:	lea rax, [rip - 0x189a]             #    |s|ignal(SIGHUP,  fatal_signal);
MEMORY OFFSET:     -0x189a     -6298  >>-6290

0x1ee4b:	mov rsi, rax                        
0x1ee4e:	mov edi, 1                          
0x1ee53:	call 0x4b10                         
0x1ee58:	lea rax, [rip - 0x18ae]             #    |s|ignal(SIGTERM, fatal_signal);
MEMORY OFFSET:     -0x18ae     -6318  >>-6310

0x1ee5f:	mov rsi, rax                        
0x1ee62:	mov edi, 0xf                        
0x1ee67:	call 0x4b10                         
0x1ee6c:	mov esi, 1                          #    |s|ignal(SIGQUIT, SIG_IGN);
0x1ee71:	mov edi, 3                          
0x1ee76:	call 0x4b10                         
0x1ee7b:	lea rax, [rip - 0x1e8]              #    |s|ignal(SIGINT,  panic);
MEMORY OFFSET:     -0x1e8     -488  >>-480

0x1ee82:	mov rsi, rax                        
0x1ee85:	mov edi, 2                          
0x1ee8a:	call 0x4b10                         
0x1ee8f:	nop                                 #|}|
0x1ee90:	pop rbp                             
0x1ee91:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/xmalloc.c
####################################################################################################

0x1ee92:	endbr64                             #|{|
0x1ee96:	push rbp                            
0x1ee97:	mov rbp, rsp                        
0x1ee9a:	lea rax, [rip + 0xa614]             #    |f|atal("virtual memory exhausted");
MEMORY OFFSET:     0xa614     42516  >>42524

0x1eea1:	mov rdi, rax                        
0x1eea4:	call 0x672c                         
0x1eea9:	call 0x4810                         #    |a|bort();
0x1eeae:	endbr64                             #|{|
0x1eeb2:	push rbp                            
0x1eeb3:	mov rbp, rsp                        
0x1eeb6:	sub rsp, 0x10                       
0x1eeba:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1eebe:	cmp qword ptr [rbp - 8], 0          #    if |(|pointer)
MEMORY OFFSET:     -0x8     -8  >>0

0x1eec3:	je 0x1eed3                          
0x1eec5:	mov rax, qword ptr [rbp - 8]        #	|f|ree(pointer);
MEMORY OFFSET:     -0x8     -8  >>0

0x1eec9:	mov rdi, rax                        
0x1eecc:	call 0x47c0                         
0x1eed1:	jmp 0x1eee2                         #|}|
0x1eed3:	lea rax, [rip + 0xa5f4]             #	|f|atal("xfree: trying to free NULL");
MEMORY OFFSET:     0xa5f4     42484  >>42492

0x1eeda:	mov rdi, rax                        
0x1eedd:	call 0x672c                         
0x1eee2:	nop                                 #|}|
0x1eee3:	leave                               
0x1eee4:	ret                                 

####################################################################################################
 /home/nahid/reverse/binaries/gnuit/src/xio.c
####################################################################################################

0x1eee5:	endbr64                             #|{|
0x1eee9:	push rbp                            
0x1eeea:	mov rbp, rsp                        
0x1eeed:	sub rsp, 0x30                       
0x1eef1:	mov dword ptr [rbp - 0x14], edi     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1eef4:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1eef8:	mov qword ptr [rbp - 0x28], rdx     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1eefc:	call 0x4820                         #    int old_errno = |e|rrno;
0x1ef01:	mov eax, dword ptr [rax]            #    int |o|ld_errno = errno;
0x1ef03:	mov dword ptr [rbp - 8], eax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1ef06:	cmp qword ptr [rbp - 0x28], 0       #    if |(|count <= 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ef0b:	jne 0x1ef13                         
0x1ef0d:	mov rax, qword ptr [rbp - 0x28]     #	return |c|ount;
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ef11:	jmp 0x1ef4a                         
0x1ef13:	call 0x4820                         #	|e|rrno = old_errno;
0x1ef18:	mov edx, dword ptr [rbp - 8]        #	errno |=| old_errno;
MEMORY OFFSET:     -0x8     -8  >>0

0x1ef1b:	mov dword ptr [rax], edx            
0x1ef1d:	mov rdx, qword ptr [rbp - 0x28]     #	chars = |r|ead(fd, buf, count);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ef21:	mov rcx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1ef25:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ef28:	mov rsi, rcx                        
0x1ef2b:	mov edi, eax                        
0x1ef2d:	call 0x4780                         
0x1ef32:	mov dword ptr [rbp - 4], eax        #	chars |=| read(fd, buf, count);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ef35:	cmp dword ptr [rbp - 4], 0          #    while (chars < 0 |&|& errno == EINTR);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ef39:	jns 0x1ef47                         
0x1ef3b:	call 0x4820                         #    while (chars < 0 && |e|rrno == EINTR);
0x1ef40:	mov eax, dword ptr [rax]            
0x1ef42:	cmp eax, 4                          #    while (chars < 0 |&|& errno == EINTR);
0x1ef45:	je 0x1ef13                          
0x1ef47:	mov eax, dword ptr [rbp - 4]        #    return |c|hars;
MEMORY OFFSET:     -0x4     -4  >>4

0x1ef4a:	leave                               #|}|
0x1ef4b:	ret                                 
0x1ef4c:	endbr64                             #|{|
0x1ef50:	push rbp                            
0x1ef51:	mov rbp, rsp                        
0x1ef54:	sub rsp, 0x30                       
0x1ef58:	mov dword ptr [rbp - 0x14], edi     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ef5b:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1ef5f:	mov qword ptr [rbp - 0x28], rdx     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ef63:	call 0x4820                         #    int old_errno = |e|rrno;
0x1ef68:	mov eax, dword ptr [rax]            #    int |o|ld_errno = errno;
0x1ef6a:	mov dword ptr [rbp - 8], eax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1ef6d:	cmp qword ptr [rbp - 0x28], 0       #    if |(|count <= 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ef72:	jne 0x1ef7a                         
0x1ef74:	mov rax, qword ptr [rbp - 0x28]     #	return |c|ount;
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ef78:	jmp 0x1efb1                         
0x1ef7a:	call 0x4820                         #	|e|rrno = old_errno;
0x1ef7f:	mov edx, dword ptr [rbp - 8]        #	errno |=| old_errno;
MEMORY OFFSET:     -0x8     -8  >>0

0x1ef82:	mov dword ptr [rax], edx            
0x1ef84:	mov rdx, qword ptr [rbp - 0x28]     #	chars = |w|rite(fd, buf, count);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ef88:	mov rcx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1ef8c:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1ef8f:	mov rsi, rcx                        
0x1ef92:	mov edi, eax                        
0x1ef94:	call 0x4770                         
0x1ef99:	mov dword ptr [rbp - 4], eax        #	chars |=| write(fd, buf, count);
MEMORY OFFSET:     -0x4     -4  >>4

0x1ef9c:	cmp dword ptr [rbp - 4], 0          #    while (chars < 0 |&|& errno == EINTR);
MEMORY OFFSET:     -0x4     -4  >>4

0x1efa0:	jns 0x1efae                         
0x1efa2:	call 0x4820                         #    while (chars < 0 && |e|rrno == EINTR);
0x1efa7:	mov eax, dword ptr [rax]            
0x1efa9:	cmp eax, 4                          #    while (chars < 0 |&|& errno == EINTR);
0x1efac:	je 0x1ef7a                          
0x1efae:	mov eax, dword ptr [rbp - 4]        #    return |c|hars;
MEMORY OFFSET:     -0x4     -4  >>4

0x1efb1:	leave                               #|}|
0x1efb2:	ret                                 
0x1efb3:	endbr64                             #|{|
0x1efb7:	push rbp                            
0x1efb8:	mov rbp, rsp                        
0x1efbb:	sub rsp, 0x30                       
0x1efbf:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1efc3:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1efc7:	mov qword ptr [rbp - 0x28], rdx     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1efcb:	call 0x4820                         #    int old_errno = |e|rrno;
0x1efd0:	mov eax, dword ptr [rax]            #    int |o|ld_errno = errno;
0x1efd2:	mov dword ptr [rbp - 8], eax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1efd5:	cmp qword ptr [rbp - 0x28], 0       #    if |(|size <= 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1efda:	jne 0x1efe2                         
0x1efdc:	mov rax, qword ptr [rbp - 0x28]     #	return |s|ize;
MEMORY OFFSET:     -0x28     -40  >>-32

0x1efe0:	jmp 0x1f01b                         
0x1efe2:	call 0x4820                         #	|e|rrno = old_errno;
0x1efe7:	mov edx, dword ptr [rbp - 8]        #	errno |=| old_errno;
MEMORY OFFSET:     -0x8     -8  >>0

0x1efea:	mov dword ptr [rax], edx            
0x1efec:	mov rdx, qword ptr [rbp - 0x28]     #	chars = |r|eadlink(path, buf, size);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1eff0:	mov rcx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1eff4:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1eff8:	mov rsi, rcx                        
0x1effb:	mov rdi, rax                        
0x1effe:	call 0x48e0                         
0x1f003:	mov dword ptr [rbp - 4], eax        #	chars |=| readlink(path, buf, size);
MEMORY OFFSET:     -0x4     -4  >>4

0x1f006:	cmp dword ptr [rbp - 4], 0          #    while (chars < 0 |&|& errno == EINTR);
MEMORY OFFSET:     -0x4     -4  >>4

0x1f00a:	jns 0x1f018                         
0x1f00c:	call 0x4820                         #    while (chars < 0 && |e|rrno == EINTR);
0x1f011:	mov eax, dword ptr [rax]            
0x1f013:	cmp eax, 4                          #    while (chars < 0 |&|& errno == EINTR);
0x1f016:	je 0x1efe2                          
0x1f018:	mov eax, dword ptr [rbp - 4]        #    return |c|hars;
MEMORY OFFSET:     -0x4     -4  >>4

0x1f01b:	leave                               #|}|
0x1f01c:	ret                                 
0x1f01d:	endbr64                             #|{|
0x1f021:	push rbp                            
0x1f022:	mov rbp, rsp                        
0x1f025:	sub rsp, 0x20                       
0x1f029:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f02d:	mov dword ptr [rbp - 0x10], 0x64    #    int |s|ize = 100;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f034:	mov eax, dword ptr [rbp - 0x10]     #	char *buffer = |x|malloc(size);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f037:	cdqe                                
0x1f039:	mov rdi, rax                        
0x1f03c:	call 0x24650                        
0x1f041:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f045:	mov eax, dword ptr [rbp - 0x10]     #	int nchars = |_|_xreadlink(filename, buffer, (size_t)size);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f048:	movsxd rdx, eax                     
0x1f04b:	mov rcx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f04f:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f053:	mov rsi, rcx                        
0x1f056:	mov rdi, rax                        
0x1f059:	mov eax, 0                          
0x1f05e:	call 0x1efb3                        
0x1f063:	mov dword ptr [rbp - 0xc], eax      
MEMORY OFFSET:     -0xc     -12  >>-4

0x1f066:	mov eax, dword ptr [rbp - 0xc]      #	if |(|nchars < size)
MEMORY OFFSET:     -0xc     -12  >>-4

0x1f069:	cmp eax, dword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f06c:	jge 0x1f07f                         
0x1f06e:	mov rax, qword ptr [rbp - 8]        #	    |x|free(buffer);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f072:	mov rdi, rax                        
0x1f075:	call 0x1eeae                        
0x1f07a:	mov eax, dword ptr [rbp - 0xc]      #	    return |n|chars;
MEMORY OFFSET:     -0xc     -12  >>-4

0x1f07d:	jmp 0x1f090                         
0x1f07f:	mov rax, qword ptr [rbp - 8]        #	|x|free(buffer);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f083:	mov rdi, rax                        
0x1f086:	call 0x1eeae                        
0x1f08b:	shl dword ptr [rbp - 0x10], 1       #	size |*|= 2;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f08e:	jmp 0x1f034                         #    |{|
0x1f090:	leave                               #|}|
0x1f091:	ret                                 
0x1f092:	endbr64                             #|{|
0x1f096:	push rbp                            
0x1f097:	mov rbp, rsp                        
0x1f09a:	sub rsp, 0x20                       
0x1f09e:	mov dword ptr [rbp - 0x14], edi     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1f0a1:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f0a5:	call 0x4820                         #    int old_errno = |e|rrno;
0x1f0aa:	mov eax, dword ptr [rax]            #    int |o|ld_errno = errno;
0x1f0ac:	mov dword ptr [rbp - 8], eax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f0af:	call 0x4820                         #	|e|rrno = old_errno;
0x1f0b4:	mov edx, dword ptr [rbp - 8]        #	errno |=| old_errno;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f0b7:	mov dword ptr [rax], edx            
0x1f0b9:	mov rdx, qword ptr [rbp - 0x20]     #	result = |f|stat(filedes, buf);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f0bd:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1f0c0:	mov rsi, rdx                        
0x1f0c3:	mov edi, eax                        
0x1f0c5:	call 0x4e80                         
0x1f0ca:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x1f0cd:	cmp dword ptr [rbp - 4], 0          #    while (result < 0 |&|& errno == EINTR);
MEMORY OFFSET:     -0x4     -4  >>4

0x1f0d1:	jns 0x1f0df                         
0x1f0d3:	call 0x4820                         #    while (result < 0 && |e|rrno == EINTR);
0x1f0d8:	mov eax, dword ptr [rax]            
0x1f0da:	cmp eax, 4                          #    while (result < 0 |&|& errno == EINTR);
0x1f0dd:	je 0x1f0af                          
0x1f0df:	mov eax, dword ptr [rbp - 4]        #    return |r|esult;
MEMORY OFFSET:     -0x4     -4  >>4

0x1f0e2:	leave                               #|}|
0x1f0e3:	ret                                 
0x1f0e4:	endbr64                             #|{|
0x1f0e8:	push rbp                            
0x1f0e9:	mov rbp, rsp                        
0x1f0ec:	sub rsp, 0x20                       
0x1f0f0:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f0f4:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f0f8:	call 0x4820                         #    int old_errno = |e|rrno;
0x1f0fd:	mov eax, dword ptr [rax]            #    int |o|ld_errno = errno;
0x1f0ff:	mov dword ptr [rbp - 8], eax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f102:	call 0x4820                         #	|e|rrno = old_errno;
0x1f107:	mov edx, dword ptr [rbp - 8]        #	errno |=| old_errno;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f10a:	mov dword ptr [rax], edx            
0x1f10c:	mov rdx, qword ptr [rbp - 0x20]     #	result = |s|tat(filename, buf);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f110:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f114:	mov rsi, rdx                        
0x1f117:	mov rdi, rax                        
0x1f11a:	call 0x4b60                         
0x1f11f:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x1f122:	cmp dword ptr [rbp - 4], 0          #    while (result < 0 |&|& errno == EINTR);
MEMORY OFFSET:     -0x4     -4  >>4

0x1f126:	jns 0x1f134                         
0x1f128:	call 0x4820                         #    while (result < 0 && |e|rrno == EINTR);
0x1f12d:	mov eax, dword ptr [rax]            
0x1f12f:	cmp eax, 4                          #    while (result < 0 |&|& errno == EINTR);
0x1f132:	je 0x1f102                          
0x1f134:	mov eax, dword ptr [rbp - 4]        #    return |r|esult;
MEMORY OFFSET:     -0x4     -4  >>4

0x1f137:	leave                               #|}|
0x1f138:	ret                                 
0x1f139:	endbr64                             #|{|
0x1f13d:	push rbp                            
0x1f13e:	mov rbp, rsp                        
0x1f141:	sub rsp, 0x20                       
0x1f145:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f149:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f14d:	call 0x4820                         #    int old_errno = |e|rrno;
0x1f152:	mov eax, dword ptr [rax]            #    int |o|ld_errno = errno;
0x1f154:	mov dword ptr [rbp - 8], eax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f157:	call 0x4820                         #	|e|rrno = old_errno;
0x1f15c:	mov edx, dword ptr [rbp - 8]        #	errno |=| old_errno;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f15f:	mov dword ptr [rax], edx            
0x1f161:	mov rdx, qword ptr [rbp - 0x20]     #	result = |l|stat(filename, buf);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f165:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f169:	mov rsi, rdx                        
0x1f16c:	mov rdi, rax                        
0x1f16f:	call 0x4a90                         
0x1f174:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x1f177:	cmp dword ptr [rbp - 4], 0          #    while (result < 0 |&|& errno == EINTR);
MEMORY OFFSET:     -0x4     -4  >>4

0x1f17b:	jns 0x1f189                         
0x1f17d:	call 0x4820                         #    while (result < 0 && |e|rrno == EINTR);
0x1f182:	mov eax, dword ptr [rax]            
0x1f184:	cmp eax, 4                          #    while (result < 0 |&|& errno == EINTR);
0x1f187:	je 0x1f157                          
0x1f189:	mov eax, dword ptr [rbp - 4]        #    return |r|esult;
MEMORY OFFSET:     -0x4     -4  >>4

0x1f18c:	leave                               #|}|
0x1f18d:	ret                                 
0x1f18e:	endbr64                             #|{|
0x1f192:	push rbp                            
0x1f193:	mov rbp, rsp                        
0x1f196:	sub rsp, 0x20                       
0x1f19a:	call 0x4820                         #    |e|rrno = 0;
0x1f19f:	mov dword ptr [rax], 0              #    errno |=| 0;
0x1f1a5:	mov qword ptr [rbp - 0x10], 0x40    #	cwd = |x|malloc(size = 64);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f1ad:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f1b1:	mov rdi, rax                        
0x1f1b4:	call 0x24650                        
0x1f1b9:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f1bd:	jmp 0x1f1e6                         #	while |(|(result = getcwd(cwd, size)) == NULL && errno == ERANGE)
0x1f1bf:	add qword ptr [rbp - 0x10], 0x40    #	    cwd = |x|realloc(cwd, size += 64);
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f1c4:	mov rdx, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f1c8:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f1cc:	mov rsi, rdx                        
0x1f1cf:	mov rdi, rax                        
0x1f1d2:	call 0x24670                        
0x1f1d7:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f1db:	call 0x4820                         #	    |e|rrno = 0;
0x1f1e0:	mov dword ptr [rax], 0              #	    errno |=| 0;
0x1f1e6:	mov rdx, qword ptr [rbp - 0x10]     #	while ((result = |g|etcwd(cwd, size)) == NULL && errno == ERANGE)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f1ea:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f1ee:	mov rsi, rdx                        
0x1f1f1:	mov rdi, rax                        
0x1f1f4:	call 0x4a40                         
0x1f1f9:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f1fd:	cmp qword ptr [rbp - 8], 0          #	while ((result = getcwd(cwd, size)) == NULL |&|& errno == ERANGE)
MEMORY OFFSET:     -0x8     -8  >>0

0x1f202:	jne 0x1f210                         
0x1f204:	call 0x4820                         #	while ((result = getcwd(cwd, size)) == NULL && |e|rrno == ERANGE)
0x1f209:	mov eax, dword ptr [rax]            
0x1f20b:	cmp eax, 0x22                       #	while ((result = getcwd(cwd, size)) == NULL |&|& errno == ERANGE)
0x1f20e:	je 0x1f1bf                          
0x1f210:	cmp qword ptr [rbp - 8], 0          #    if |(|result == NULL)
MEMORY OFFSET:     -0x8     -8  >>0

0x1f215:	jne 0x1f22a                         
0x1f217:	mov rax, qword ptr [rbp - 0x18]     #	|x|free(cwd);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f21b:	mov rdi, rax                        
0x1f21e:	call 0x1eeae                        
0x1f223:	mov eax, 0                          #	return |N|ULL;
0x1f228:	jmp 0x1f22e                         
0x1f22a:	mov rax, qword ptr [rbp - 0x18]     #    return |c|wd;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f22e:	leave                               #|}|
0x1f22f:	ret                                 
0x1f230:	endbr64                             #|{|
0x1f234:	push rbp                            
0x1f235:	mov rbp, rsp                        
0x1f238:	sub rsp, 0x20                       
0x1f23c:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f240:	mov rax, qword ptr [rbp - 0x18]     #    char *ptr = |s|trrchr(name, '/');
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f244:	mov esi, 0x2f                       
0x1f249:	mov rdi, rax                        
0x1f24c:	call 0x49e0                         
0x1f251:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f255:	cmp qword ptr [rbp - 0x10], 0       #    if |(|ptr == NULL)
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f25a:	jne 0x1f26d                         
0x1f25c:	lea rax, [rip + 0xa286]             #	return |x|strdup(".");
MEMORY OFFSET:     0xa286     41606  >>41614

0x1f263:	mov rdi, rax                        
0x1f266:	call 0x24780                        
0x1f26b:	jmp 0x1f296                         
0x1f26d:	mov rax, qword ptr [rbp - 0x18]     #	char *ptr2 = |x|strdup(name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f271:	mov rdi, rax                        
0x1f274:	call 0x24780                        
0x1f279:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f27d:	mov rax, qword ptr [rbp - 0x10]     #	ptr2[ptr |-| name] = '0';
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f281:	sub rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f285:	mov rdx, rax                        
0x1f288:	mov rax, qword ptr [rbp - 8]        #	ptr2|[|ptr - name] = '0';
MEMORY OFFSET:     -0x8     -8  >>0

0x1f28c:	add rax, rdx                        
0x1f28f:	mov byte ptr [rax], 0x30            #	ptr2[ptr - name] |=| '0';
0x1f292:	mov rax, qword ptr [rbp - 8]        #	return |p|tr2;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f296:	leave                               #|}|
0x1f297:	ret                                 
0x1f298:	endbr64                             #|{|
0x1f29c:	push rbp                            
0x1f29d:	mov rbp, rsp                        
0x1f2a0:	sub rsp, 0x20                       
0x1f2a4:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f2a8:	mov rax, qword ptr [rbp - 0x18]     #    size_t len = |s|trlen(name);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f2ac:	mov rdi, rax                        
0x1f2af:	call 0x4960                         
0x1f2b4:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f2b8:	mov rax, qword ptr [rbp - 0x10]     #    if (name|[|len - 1] == '/')
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f2bc:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1f2c0:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f2c4:	add rax, rdx                        
0x1f2c7:	movzx eax, byte ptr [rax]           
0x1f2ca:	cmp al, 0x2f                        #    if |(|name[len - 1] == '/')
0x1f2cc:	jne 0x1f2e0                         
0x1f2ce:	mov rax, qword ptr [rbp - 0x10]     #	name|[|len - 1] = '\0';
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f2d2:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1f2d6:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f2da:	add rax, rdx                        
0x1f2dd:	mov byte ptr [rax], 0               #	name[len - 1] |=| '\0';
0x1f2e0:	mov rax, qword ptr [rbp - 0x18]     #    base = |s|trrchr(name, '/');
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f2e4:	mov esi, 0x2f                       
0x1f2e9:	mov rdi, rax                        
0x1f2ec:	call 0x49e0                         
0x1f2f1:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f2f5:	cmp qword ptr [rbp - 8], 0          #    return base ? base + 1 |:| name;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f2fa:	je 0x1f306                          
0x1f2fc:	mov rax, qword ptr [rbp - 8]        #    return base ? base + 1 |:| name;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f300:	add rax, 1                          
0x1f304:	jmp 0x1f30a                         
0x1f306:	mov rax, qword ptr [rbp - 0x18]     #    return base ? base + 1 |:| name;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f30a:	leave                               #|}|
0x1f30b:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/xstack.c
####################################################################################################

0x1f30c:	endbr64                             #|{|
0x1f310:	push rbp                            
0x1f311:	mov rbp, rsp                        
0x1f314:	sub rsp, 0x20                       
0x1f318:	mov dword ptr [rbp - 0x14], edi     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1f31b:	mov esi, 0x10                       #    xstack_t *s = (xstack_t *)|x|calloc(1, sizeof(xstack_t));
0x1f320:	mov edi, 1                          
0x1f325:	call 0x24720                        
0x1f32a:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f32e:	mov rax, qword ptr [rbp - 8]        #    s->esize |=| esize;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f332:	mov edx, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1f335:	mov dword ptr [rax + 8], edx        
MEMORY OFFSET:     0x8     8  >>16

0x1f338:	mov rax, qword ptr [rbp - 8]        #    return |s|;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f33c:	leave                               #|}|
0x1f33d:	ret                                 
0x1f33e:	endbr64                             #|{|
0x1f342:	push rbp                            
0x1f343:	mov rbp, rsp                        
0x1f346:	sub rsp, 0x10                       
0x1f34a:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f34e:	cmp qword ptr [rbp - 8], 0          #    if |(|stack == NULL)
MEMORY OFFSET:     -0x8     -8  >>0

0x1f353:	je 0x1f37e                          
0x1f355:	mov rax, qword ptr [rbp - 8]        #    if (stack|-|>data)
MEMORY OFFSET:     -0x8     -8  >>0

0x1f359:	mov rax, qword ptr [rax]            
0x1f35c:	test rax, rax                       #    if |(|stack->data)
0x1f35f:	je 0x1f370                          
0x1f361:	mov rax, qword ptr [rbp - 8]        #	|x|free(stack->data);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f365:	mov rax, qword ptr [rax]            
0x1f368:	mov rdi, rax                        
0x1f36b:	call 0x1eeae                        
0x1f370:	mov rax, qword ptr [rbp - 8]        #    |x|free(stack);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f374:	mov rdi, rax                        
0x1f377:	call 0x1eeae                        
0x1f37c:	jmp 0x1f37f                         
0x1f37e:	nop                                 #	|r|eturn;
0x1f37f:	leave                               #|}|
0x1f380:	ret                                 
0x1f381:	endbr64                             #|{|
0x1f385:	push rbp                            
0x1f386:	mov rbp, rsp                        
0x1f389:	sub rsp, 0x10                       
0x1f38d:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f391:	mov qword ptr [rbp - 0x10], rsi     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f395:	mov rax, qword ptr [rbp - 8]        #    stack->data = (void *)xrealloc(stack->data, ++stack|-|>point * stack->esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f399:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f39c:	lea edx, [rax + 1]                  #    stack->data = (void *)xrealloc(stack->data, |+|+stack->point * stack->esize);
MEMORY OFFSET:     0x1     1  >>9

0x1f39f:	mov rax, qword ptr [rbp - 8]        #    stack->data |=| (void *)xrealloc(stack->data, ++stack->point * stack->esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f3a3:	mov dword ptr [rax + 0xc], edx      
MEMORY OFFSET:     0xc     12  >>20

0x1f3a6:	mov rax, qword ptr [rbp - 8]        #    stack->data = (void *)xrealloc(stack->data, ++stack|-|>point * stack->esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f3aa:	mov edx, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f3ad:	mov rax, qword ptr [rbp - 8]        #    stack->data = (void *)xrealloc(stack->data, ++stack->point * stack|-|>esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f3b1:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1f3b4:	imul eax, edx                       #    stack->data = (void *)xrealloc(stack->data, ++stack->point |*| stack->esize);
0x1f3b7:	movsxd rdx, eax                     #    stack->data = |(|void *)xrealloc(stack->data, ++stack->point * stack->esize);
0x1f3ba:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f3be:	mov rax, qword ptr [rax]            
0x1f3c1:	mov rsi, rdx                        
0x1f3c4:	mov rdi, rax                        
0x1f3c7:	call 0x24670                        
0x1f3cc:	mov rdx, qword ptr [rbp - 8]        #    stack->data |=| (void *)xrealloc(stack->data, ++stack->point * stack->esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f3d0:	mov qword ptr [rdx], rax            
0x1f3d3:	mov rax, qword ptr [rbp - 8]        #	   stack|-|>esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f3d7:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1f3da:	movsxd rdx, eax                     #    |m|emcpy(((char *)stack->data) + (stack->point - 1) * stack->esize,
0x1f3dd:	mov rax, qword ptr [rbp - 8]        #    memcpy(((char *)stack|-|>data) + (stack->point - 1) * stack->esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f3e1:	mov rsi, qword ptr [rax]            
0x1f3e4:	mov rax, qword ptr [rbp - 8]        #    memcpy(((char *)stack->data) + (stack|-|>point - 1) * stack->esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f3e8:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f3eb:	lea ecx, [rax - 1]                  #    memcpy(((char *)stack->data) + (stack->point |-| 1) * stack->esize,
MEMORY OFFSET:     -0x1     -1  >>7

0x1f3ee:	mov rax, qword ptr [rbp - 8]        #    memcpy(((char *)stack->data) + (stack->point - 1) * stack|-|>esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f3f2:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1f3f5:	imul eax, ecx                       #    memcpy(((char *)stack->data) + (stack->point - 1) |*| stack->esize,
0x1f3f8:	cdqe                                
0x1f3fa:	lea rcx, [rsi + rax]                #    |m|emcpy(((char *)stack->data) + (stack->point - 1) * stack->esize,
0x1f3fe:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f402:	mov rsi, rax                        
0x1f405:	mov rdi, rcx                        
0x1f408:	call 0x4b70                         
0x1f40d:	nop                                 #|}|
0x1f40e:	leave                               
0x1f40f:	ret                                 
0x1f410:	endbr64                             #|{|
0x1f414:	push rbp                            
0x1f415:	mov rbp, rsp                        
0x1f418:	sub rsp, 0x10                       
0x1f41c:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f420:	mov qword ptr [rbp - 0x10], rsi     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f424:	mov rax, qword ptr [rbp - 8]        #    if (stack|-|>point == 0)
MEMORY OFFSET:     -0x8     -8  >>0

0x1f428:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f42b:	test eax, eax                       #    if |(|stack->point == 0)
0x1f42d:	jne 0x1f436                         
0x1f42f:	mov eax, 0                          #	return |N|ULL;
0x1f434:	jmp 0x1f4af                         
0x1f436:	mov rax, qword ptr [rbp - 8]        #	   stack|-|>esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f43a:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1f43d:	movsxd rdx, eax                     #    |m|emcpy(data,
0x1f440:	mov rax, qword ptr [rbp - 8]        #	   ((char *)stack|-|>data) + --stack->point * stack->esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f444:	mov rsi, qword ptr [rax]            
0x1f447:	mov rax, qword ptr [rbp - 8]        #	   ((char *)stack->data) + --stack|-|>point * stack->esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f44b:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f44e:	lea ecx, [rax - 1]                  #	   ((char *)stack->data) + |-|-stack->point * stack->esize,
MEMORY OFFSET:     -0x1     -1  >>7

0x1f451:	mov rax, qword ptr [rbp - 8]        #    |m|emcpy(data,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f455:	mov dword ptr [rax + 0xc], ecx      
MEMORY OFFSET:     0xc     12  >>20

0x1f458:	mov rax, qword ptr [rbp - 8]        #	   ((char *)stack->data) + --stack|-|>point * stack->esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f45c:	mov ecx, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f45f:	mov rax, qword ptr [rbp - 8]        #	   ((char *)stack->data) + --stack->point * stack|-|>esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f463:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1f466:	imul eax, ecx                       #	   ((char *)stack->data) + --stack->point |*| stack->esize,
0x1f469:	cdqe                                
0x1f46b:	lea rcx, [rsi + rax]                #    |m|emcpy(data,
0x1f46f:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f473:	mov rsi, rcx                        
0x1f476:	mov rdi, rax                        
0x1f479:	call 0x4b70                         
0x1f47e:	mov rax, qword ptr [rbp - 8]        #    stack->data = (void *)xrealloc(stack->data, stack|-|>point * stack->esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f482:	mov edx, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f485:	mov rax, qword ptr [rbp - 8]        #    stack->data = (void *)xrealloc(stack->data, stack->point * stack|-|>esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f489:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1f48c:	imul eax, edx                       #    stack->data = (void *)xrealloc(stack->data, stack->point |*| stack->esize);
0x1f48f:	movsxd rdx, eax                     #    stack->data = |(|void *)xrealloc(stack->data, stack->point * stack->esize);
0x1f492:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f496:	mov rax, qword ptr [rax]            
0x1f499:	mov rsi, rdx                        
0x1f49c:	mov rdi, rax                        
0x1f49f:	call 0x24670                        
0x1f4a4:	mov rdx, qword ptr [rbp - 8]        #    stack->data |=| (void *)xrealloc(stack->data, stack->point * stack->esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f4a8:	mov qword ptr [rdx], rax            
0x1f4ab:	mov rax, qword ptr [rbp - 0x10]     #    return |d|ata;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f4af:	leave                               #|}|
0x1f4b0:	ret                                 
0x1f4b1:	endbr64                             #|{|
0x1f4b5:	push rbp                            
0x1f4b6:	mov rbp, rsp                        
0x1f4b9:	sub rsp, 0x20                       
0x1f4bd:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f4c1:	mov qword ptr [rbp - 0x10], rsi     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f4c5:	mov dword ptr [rbp - 0x14], edx     
MEMORY OFFSET:     -0x14     -20  >>-12

0x1f4c8:	mov rax, qword ptr [rbp - 8]        #    if (stack|-|>point == 0 || offset > stack->point)
MEMORY OFFSET:     -0x8     -8  >>0

0x1f4cc:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f4cf:	test eax, eax                       #    if |(|stack->point == 0 || offset > stack->point)
0x1f4d1:	je 0x1f4df                          
0x1f4d3:	mov rax, qword ptr [rbp - 8]        #    if (stack->point == 0 || offset > stack|-|>point)
MEMORY OFFSET:     -0x8     -8  >>0

0x1f4d7:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f4da:	cmp dword ptr [rbp - 0x14], eax     #    if (stack->point == 0 |||| offset > stack->point)
MEMORY OFFSET:     -0x14     -20  >>-12

0x1f4dd:	jle 0x1f4e6                         
0x1f4df:	mov eax, 0                          #	return |N|ULL;
0x1f4e4:	jmp 0x1f526                         
0x1f4e6:	mov rax, qword ptr [rbp - 8]        #	   stack|-|>esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f4ea:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1f4ed:	movsxd rdx, eax                     #    |m|emcpy(data,
0x1f4f0:	mov rax, qword ptr [rbp - 8]        #	   ((char *)stack|-|>data) + (stack->point - offset) * stack->esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f4f4:	mov rsi, qword ptr [rax]            
0x1f4f7:	mov rax, qword ptr [rbp - 8]        #	   ((char *)stack->data) + (stack|-|>point - offset) * stack->esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f4fb:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f4fe:	sub eax, dword ptr [rbp - 0x14]     #	   ((char *)stack->data) + (stack->point |-| offset) * stack->esize,
MEMORY OFFSET:     -0x14     -20  >>-12

0x1f501:	mov ecx, eax                        
0x1f503:	mov rax, qword ptr [rbp - 8]        #	   ((char *)stack->data) + (stack->point - offset) * stack|-|>esize,
MEMORY OFFSET:     -0x8     -8  >>0

0x1f507:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1f50a:	imul eax, ecx                       #	   ((char *)stack->data) + (stack->point - offset) |*| stack->esize,
0x1f50d:	cdqe                                
0x1f50f:	lea rcx, [rsi + rax]                #    |m|emcpy(data,
0x1f513:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f517:	mov rsi, rcx                        
0x1f51a:	mov rdi, rax                        
0x1f51d:	call 0x4b70                         
0x1f522:	mov rax, qword ptr [rbp - 0x10]     #    return |d|ata;
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f526:	leave                               #|}|
0x1f527:	ret                                 
0x1f528:	endbr64                             #|{|
0x1f52c:	push rbp                            
0x1f52d:	mov rbp, rsp                        
0x1f530:	sub rsp, 0x10                       
0x1f534:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f538:	mov dword ptr [rbp - 0xc], esi      
MEMORY OFFSET:     -0xc     -12  >>-4

0x1f53b:	mov rax, qword ptr [rbp - 8]        #    stack->point |=| point;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f53f:	mov edx, dword ptr [rbp - 0xc]      
MEMORY OFFSET:     -0xc     -12  >>-4

0x1f542:	mov dword ptr [rax + 0xc], edx      
MEMORY OFFSET:     0xc     12  >>20

0x1f545:	mov rax, qword ptr [rbp - 8]        #    stack->data = (void *)xrealloc(stack->data, stack|-|>point * stack->esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f549:	mov edx, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f54c:	mov rax, qword ptr [rbp - 8]        #    stack->data = (void *)xrealloc(stack->data, stack->point * stack|-|>esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f550:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x1f553:	imul eax, edx                       #    stack->data = (void *)xrealloc(stack->data, stack->point |*| stack->esize);
0x1f556:	movsxd rdx, eax                     #    stack->data = |(|void *)xrealloc(stack->data, stack->point * stack->esize);
0x1f559:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f55d:	mov rax, qword ptr [rax]            
0x1f560:	mov rsi, rdx                        
0x1f563:	mov rdi, rax                        
0x1f566:	call 0x24670                        
0x1f56b:	mov rdx, qword ptr [rbp - 8]        #    stack->data |=| (void *)xrealloc(stack->data, stack->point * stack->esize);
MEMORY OFFSET:     -0x8     -8  >>0

0x1f56f:	mov qword ptr [rdx], rax            
0x1f572:	nop                                 #|}|
0x1f573:	leave                               
0x1f574:	ret                                 
0x1f575:	endbr64                             #|{|
0x1f579:	push rbp                            
0x1f57a:	mov rbp, rsp                        
0x1f57d:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f581:	mov rax, qword ptr [rbp - 8]        #    return stack|-|>point;
MEMORY OFFSET:     -0x8     -8  >>0

0x1f585:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x1f588:	pop rbp                             #|}|
0x1f589:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/system.c
####################################################################################################

0x1f58a:	endbr64                             #|{|
0x1f58e:	push rbp                            
0x1f58f:	mov rbp, rsp                        
0x1f592:	sub rsp, 0x30                       
0x1f596:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f59a:	mov dword ptr [rbp - 0x2c], esi     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1f59d:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1f5a6:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f5aa:	xor eax, eax                        
0x1f5ac:	cmp qword ptr [rbp - 0x28], 0       #    if |(|command == NULL)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f5b1:	jne 0x1f5bd                         
0x1f5b3:	mov eax, 1                          #	return |1|;
0x1f5b8:	jmp 0x1f6da                         
0x1f5bd:	call 0x4ea0                         #    pid = |f|ork();
0x1f5c2:	mov dword ptr [rbp - 0x1c], eax     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1f5c5:	cmp dword ptr [rbp - 0x1c], 0       #    if |(|pid < 0)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1f5c9:	jns 0x1f5d7                         
0x1f5cb:	mov dword ptr [rbp - 0x20], 0xffffffff#	status |=| -1;
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f5d2:	jmp 0x1f6d7                         
0x1f5d7:	cmp dword ptr [rbp - 0x1c], 0       #    else if |(|pid == 0)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1f5db:	jne 0x1f6c5                         
0x1f5e1:	mov esi, 0                          #	|s|ignal(SIGINT, SIG_DFL);
0x1f5e6:	mov edi, 2                          
0x1f5eb:	call 0x4b10                         
0x1f5f0:	mov esi, 0                          #	|s|ignal(SIGQUIT, SIG_DFL);
0x1f5f5:	mov edi, 3                          
0x1f5fa:	call 0x4b10                         
0x1f5ff:	cmp dword ptr [rbp - 0x2c], 0       #	if |(|hide)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x1f603:	je 0x1f67c                          
0x1f605:	mov edi, 1                          #	    |c|lose(1);
0x1f60a:	call 0x4a70                         
0x1f60f:	mov edi, 2                          #	    |c|lose(2);
0x1f614:	call 0x4a70                         
0x1f619:	mov rax, qword ptr [rip + 0x124b8]  #	    stdout_log = |f|open(stdout_log_name, "w");
MEMORY OFFSET:     0x124b8     74936  >>74944

0x1f620:	lea rdx, [rip + 0x9ec4]             
MEMORY OFFSET:     0x9ec4     40644  >>40652

0x1f627:	mov rsi, rdx                        
0x1f62a:	mov rdi, rax                        
0x1f62d:	call 0x4d50                         
0x1f632:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f636:	mov rax, qword ptr [rip + 0x124a3]  #	    stderr_log = |f|open(stderr_log_name, "w");
MEMORY OFFSET:     0x124a3     74915  >>74923

0x1f63d:	lea rdx, [rip + 0x9ea7]             
MEMORY OFFSET:     0x9ea7     40615  >>40623

0x1f644:	mov rsi, rdx                        
0x1f647:	mov rdi, rax                        
0x1f64a:	call 0x4d50                         
0x1f64f:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x1f653:	mov rax, qword ptr [rbp - 0x28]     #	    if (|s|trncmp(command, "rpm ", 4) != 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f657:	mov edx, 4                          
0x1f65c:	lea rcx, [rip + 0x9e8a]             
MEMORY OFFSET:     0x9e8a     40586  >>40594

0x1f663:	mov rsi, rcx                        
0x1f666:	mov rdi, rax                        
0x1f669:	call 0x4850                         
0x1f66e:	test eax, eax                       #	    if |(|strncmp(command, "rpm ", 4) != 0)
0x1f670:	je 0x1f67c                          
0x1f672:	mov edi, 0                          #		|c|lose(0);
0x1f677:	call 0x4a70                         
0x1f67c:	mov rdx, qword ptr [rip + 0x1121d]  #	|e|xecle("/bin/sh", "sh", "-c", command, (char *)NULL, environ);
MEMORY OFFSET:     0x1121d     70173  >>70181

0x1f683:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f687:	mov r9, rdx                         
0x1f68a:	mov r8d, 0                          
0x1f690:	mov rcx, rax                        
0x1f693:	lea rax, [rip + 0x9e58]             
MEMORY OFFSET:     0x9e58     40536  >>40544

0x1f69a:	mov rdx, rax                        
0x1f69d:	lea rax, [rip + 0x9e51]             
MEMORY OFFSET:     0x9e51     40529  >>40537

0x1f6a4:	mov rsi, rax                        
0x1f6a7:	lea rax, [rip + 0x9e4a]             
MEMORY OFFSET:     0x9e4a     40522  >>40530

0x1f6ae:	mov rdi, rax                        
0x1f6b1:	mov eax, 0                          
0x1f6b6:	call 0x4e00                         
0x1f6bb:	mov edi, 0x7f                       #	|_|exit(127);
0x1f6c0:	call 0x4860                         
0x1f6c5:	nop                                 #	while |(|wait(&status) != pid);
0x1f6c6:	lea rax, [rbp - 0x20]               #	while (|w|ait(&status) != pid);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f6ca:	mov rdi, rax                        
0x1f6cd:	call 0x4e90                         
0x1f6d2:	cmp dword ptr [rbp - 0x1c], eax     #	while (wait(&status) |!|= pid);
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1f6d5:	jne 0x1f6c6                         
0x1f6d7:	mov eax, dword ptr [rbp - 0x20]     #    return |s|tatus;
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f6da:	mov rdx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x1f6de:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1f6e7:	je 0x1f6ee                          
0x1f6e9:	call 0x4980                         #|}|
0x1f6ee:	leave                               
0x1f6ef:	ret                                 
0x1f6f0:	endbr64                             #|{|
0x1f6f4:	push rbp                            
0x1f6f5:	mov rbp, rsp                        
0x1f6f8:	sub rsp, 0x20                       
0x1f6fc:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f700:	mov dword ptr [rbp - 0x1c], esi     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1f703:	cmp dword ptr [rbp - 0x1c], 0       #    if |(|hide)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1f707:	je 0x1f73b                          
0x1f709:	mov edi, 1                          #	|s|ignals(ON);
0x1f70e:	call 0x1eaed                        
0x1f713:	mov edx, dword ptr [rbp - 0x1c]     #	child_exit_code = |m|y_system(command, hide);
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1f716:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f71a:	mov esi, edx                        
0x1f71c:	mov rdi, rax                        
0x1f71f:	mov eax, 0                          
0x1f724:	call 0x1f58a                        
0x1f729:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x1f72c:	mov edi, 0                          #	|s|ignals(OFF);
0x1f731:	call 0x1eaed                        
0x1f736:	jmp 0x1f7c2                         
0x1f73b:	mov edi, 0                          #	|t|ty_set_mode(TTY_CANONIC);
0x1f740:	call 0xadac                         
0x1f745:	mov eax, 0                          #	|t|ty_defaults();
0x1f74a:	call 0xc083                         
0x1f74f:	mov rax, qword ptr [rip + 0x111a2]  #	|t|ty_put_screen(screen);
MEMORY OFFSET:     0x111a2     70050  >>70058

0x1f756:	mov rdi, rax                        
0x1f759:	call 0xce57                         
0x1f75e:	mov edi, 0                          #	|s|ignal_handlers(OFF);
0x1f763:	call 0x1ed59                        
0x1f768:	mov edx, dword ptr [rbp - 0x1c]     #	child_exit_code = |m|y_system(command, hide);
MEMORY OFFSET:     -0x1c     -28  >>-20

0x1f76b:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f76f:	mov esi, edx                        
0x1f771:	mov rdi, rax                        
0x1f774:	mov eax, 0                          
0x1f779:	call 0x1f58a                        
0x1f77e:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x1f781:	mov edi, 1                          #	|s|ignal_handlers(ON);
0x1f786:	call 0x1ed59                        
0x1f78b:	mov edx, 2                          #	|x|write(1, "\n\n", 2);
0x1f790:	lea rax, [rip + 0x9d69]             
MEMORY OFFSET:     0x9d69     40297  >>40305

0x1f797:	mov rsi, rax                        
0x1f79a:	mov edi, 1                          
0x1f79f:	call 0x1ef4c                        
0x1f7a4:	mov edi, 1                          #	|t|ty_set_mode(TTY_NONCANONIC);
0x1f7a9:	call 0xadac                         
0x1f7ae:	mov eax, 0                          #	|t|ty_defaults();
0x1f7b3:	call 0xc083                         
0x1f7b8:	mov edi, 0                          #	|r|esize(0);
0x1f7bd:	call 0x503a                         
0x1f7c2:	mov eax, dword ptr [rbp - 4]        #    return |c|hild_exit_code;
MEMORY OFFSET:     -0x4     -4  >>4

0x1f7c5:	leave                               #|}|
0x1f7c6:	ret                                 
0x1f7c7:	endbr64                             #|{|
0x1f7cb:	push rbp                            
0x1f7cc:	mov rbp, rsp                        
0x1f7cf:	mov rax, qword ptr [rip + 0x12302]  #    if (|s|tdout_log_name)
MEMORY OFFSET:     0x12302     74498  >>74506

0x1f7d6:	test rax, rax                       #    if |(|stdout_log_name)
0x1f7d9:	je 0x1f7ea                          
0x1f7db:	mov rax, qword ptr [rip + 0x122f6]  #	|u|nlink(stdout_log_name);
MEMORY OFFSET:     0x122f6     74486  >>74494

0x1f7e2:	mov rdi, rax                        
0x1f7e5:	call 0x4830                         
0x1f7ea:	mov rax, qword ptr [rip + 0x122ef]  #    if (|s|tderr_log_name)
MEMORY OFFSET:     0x122ef     74479  >>74487

0x1f7f1:	test rax, rax                       #    if |(|stderr_log_name)
0x1f7f4:	je 0x1f805                          
0x1f7f6:	mov rax, qword ptr [rip + 0x122e3]  #	|u|nlink(stderr_log_name);
MEMORY OFFSET:     0x122e3     74467  >>74475

0x1f7fd:	mov rdi, rax                        
0x1f800:	call 0x4830                         
0x1f805:	nop                                 #|}|
0x1f806:	pop rbp                             
0x1f807:	ret                                 
0x1f808:	endbr64                             #|{|
0x1f80c:	push rbp                            
0x1f80d:	mov rbp, rsp                        
0x1f810:	push rbx                            
0x1f811:	sub rsp, 0x48                       
0x1f815:	mov qword ptr [rbp - 0x48], rdi     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1f819:	mov rax, qword ptr [rip + 0x122c0]  #    FILE *stderr_log = |f|open(stderr_log_name, "r");
MEMORY OFFSET:     0x122c0     74432  >>74440

0x1f820:	lea rdx, [rip + 0x9cdc]             
MEMORY OFFSET:     0x9cdc     40156  >>40164

0x1f827:	mov rsi, rdx                        
0x1f82a:	mov rdi, rax                        
0x1f82d:	call 0x4d50                         
0x1f832:	mov qword ptr [rbp - 0x30], rax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1f836:	cmp qword ptr [rbp - 0x30], 0       #    if |(|stderr_log == NULL)
MEMORY OFFSET:     -0x30     -48  >>-40

0x1f83b:	jne 0x1f8c4                         
0x1f841:	mov rax, qword ptr [rbp - 0x48]     #	size_t buf_len = |s|trlen(command) + 32 + strlen(stderr_log_name);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1f845:	mov rdi, rax                        
0x1f848:	call 0x4960                         
0x1f84d:	mov rbx, rax                        
0x1f850:	mov rax, qword ptr [rip + 0x12289]  #	size_t buf_len = strlen(command) + 32 + |s|trlen(stderr_log_name);
MEMORY OFFSET:     0x12289     74377  >>74385

0x1f857:	mov rdi, rax                        
0x1f85a:	call 0x4960                         
0x1f85f:	add rax, rbx                        #	size_t buf_len = strlen(command) + 32 |+| strlen(stderr_log_name);
0x1f862:	add rax, 0x20                       #	size_t |b|uf_len = strlen(command) + 32 + strlen(stderr_log_name);
0x1f866:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f86a:	mov rax, qword ptr [rbp - 0x20]     #	char *buf = |x|malloc(buf_len);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1f86e:	mov rdi, rax                        
0x1f871:	call 0x24650                        
0x1f876:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f87a:	mov rcx, qword ptr [rip + 0x1225f]  #	|s|printf(buf, "%s: cannot open log file %s", command, stderr_log_name);
MEMORY OFFSET:     0x1225f     74335  >>74343

0x1f881:	mov rdx, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1f885:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f889:	lea rsi, [rip + 0x9c75]             
MEMORY OFFSET:     0x9c75     40053  >>40061

0x1f890:	mov rdi, rax                        
0x1f893:	mov eax, 0                          
0x1f898:	call 0x4dd0                         
0x1f89d:	mov rax, qword ptr [rbp - 0x18]     #	|i|l_read_char(buf, NULL, IL_MOVE | IL_BEEP | IL_SAVE | IL_ERROR);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f8a1:	mov edx, 0x1e                       
0x1f8a6:	mov esi, 0                          
0x1f8ab:	mov rdi, rax                        
0x1f8ae:	call 0x5c09                         
0x1f8b3:	mov rax, qword ptr [rbp - 0x18]     #	|x|free(buf);
MEMORY OFFSET:     -0x18     -24  >>-16

0x1f8b7:	mov rdi, rax                        
0x1f8ba:	call 0x1eeae                        
0x1f8bf:	jmp 0x1f95c                         #|}|
0x1f8c4:	mov edi, 0x801                      #	char *buf = |x|malloc(2048 + 1);
0x1f8c9:	call 0x24650                        
0x1f8ce:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f8d2:	jmp 0x1f927                         #	while |(|fgets(buf, 2048 + 1, stderr_log))
0x1f8d4:	mov rax, qword ptr [rbp - 0x28]     #	    int len = |s|trlen(buf);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f8d8:	mov rdi, rax                        
0x1f8db:	call 0x4960                         
0x1f8e0:	mov dword ptr [rbp - 0x34], eax     #	    int |l|en = strlen(buf);
MEMORY OFFSET:     -0x34     -52  >>-44

0x1f8e3:	mov eax, dword ptr [rbp - 0x34]     #	    if (buf|[|len - 1] == '\n')
MEMORY OFFSET:     -0x34     -52  >>-44

0x1f8e6:	cdqe                                
0x1f8e8:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1f8ec:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f8f0:	add rax, rdx                        
0x1f8f3:	movzx eax, byte ptr [rax]           
0x1f8f6:	cmp al, 0xa                         #	    if |(|buf[len - 1] == '\n')
0x1f8f8:	jne 0x1f90d                         
0x1f8fa:	mov eax, dword ptr [rbp - 0x34]     #		buf|[|len - 1] = '\0';
MEMORY OFFSET:     -0x34     -52  >>-44

0x1f8fd:	cdqe                                
0x1f8ff:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1f903:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f907:	add rax, rdx                        
0x1f90a:	mov byte ptr [rax], 0               #		buf[len - 1] |=| '\0';
0x1f90d:	mov rax, qword ptr [rbp - 0x28]     #	    if (|i|l_read_char(buf, NULL, IL_MOVE | IL_ERROR) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f911:	mov edx, 0xa                        
0x1f916:	mov esi, 0                          
0x1f91b:	mov rdi, rax                        
0x1f91e:	call 0x5c09                         
0x1f923:	test al, al                         #	    if |(|il_read_char(buf, NULL, IL_MOVE | IL_ERROR) == 0)
0x1f925:	je 0x1f943                          
0x1f927:	mov rdx, qword ptr [rbp - 0x30]     #	while (|f|gets(buf, 2048 + 1, stderr_log))
MEMORY OFFSET:     -0x30     -48  >>-40

0x1f92b:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f92f:	mov esi, 0x801                      
0x1f934:	mov rdi, rax                        
0x1f937:	call 0x4ac0                         
0x1f93c:	test rax, rax                       
0x1f93f:	jne 0x1f8d4                         
0x1f941:	jmp 0x1f944                         
0x1f943:	nop                                 #		|b|reak;
0x1f944:	mov rax, qword ptr [rbp - 0x28]     #	|x|free(buf);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f948:	mov rdi, rax                        
0x1f94b:	call 0x1eeae                        
0x1f950:	mov rax, qword ptr [rbp - 0x30]     #	|f|close(stderr_log);
MEMORY OFFSET:     -0x30     -48  >>-40

0x1f954:	mov rdi, rax                        
0x1f957:	call 0x4900                         
0x1f95c:	nop                                 #|}|
0x1f95d:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x1f961:	leave                               
0x1f962:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/tilde.c
####################################################################################################

0x1f963:	endbr64                             #|{|
0x1f967:	push rbp                            
0x1f968:	mov rbp, rsp                        
0x1f96b:	push r14                            
0x1f96d:	push r13                            
0x1f96f:	push r12                            
0x1f971:	push rbx                            
0x1f972:	sub rsp, 0x10                       
0x1f976:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f97a:	mov qword ptr [rbp - 0x30], rsi     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1f97e:	mov r13, qword ptr [rip + 0x10ea3]  #  register char **|p|refixes = tilde_additional_prefixes;
MEMORY OFFSET:     0x10ea3     69283  >>69291

0x1f985:	mov rax, qword ptr [rbp - 0x28]     #  string_len = |s|trlen (string);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f989:	mov rdi, rax                        
0x1f98c:	call 0x4960                         
0x1f991:	mov r14d, eax                       #  string_len |=| strlen (string);
0x1f994:	mov rax, qword ptr [rbp - 0x30]     #  *len |=| 0;
MEMORY OFFSET:     -0x30     -48  >>-40

0x1f998:	mov dword ptr [rax], 0              
0x1f99e:	mov rax, qword ptr [rbp - 0x28]     #  if (!|*|string || *string == '~')
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f9a2:	movzx eax, byte ptr [rax]           
0x1f9a5:	test al, al                         #  if |(|!*string || *string == '~')
0x1f9a7:	je 0x1f9b4                          
0x1f9a9:	mov rax, qword ptr [rbp - 0x28]     #  if (!*string || |*|string == '~')
MEMORY OFFSET:     -0x28     -40  >>-32

0x1f9ad:	movzx eax, byte ptr [rax]           
0x1f9b0:	cmp al, 0x7e                        #  if (!*string |||| *string == '~')
0x1f9b2:	jne 0x1f9be                         
0x1f9b4:	mov eax, 0                          #    return |(|0);
0x1f9b9:	jmp 0x1fa67                         
0x1f9be:	test r13, r13                       #  if |(|prefixes)
0x1f9c1:	je 0x1fa64                          
0x1f9c7:	mov r12d, 0                         #      for (i |=| 0; i < string_len; i++)
0x1f9cd:	jmp 0x1fa5b                         #      |f|or (i = 0; i < string_len; i++)
0x1f9d2:	mov ebx, 0                          #	  for (j |=| 0; prefixes[j]; j++)
0x1f9d7:	jmp 0x1fa45                         #	  |f|or (j = 0; prefixes[j]; j++)
0x1f9d9:	movsxd rax, ebx                     #	      if (strncmp (string + i, prefixes[j], strlen (prefixes|[|j])) == 0)
0x1f9dc:	shl rax, 3                          
0x1f9e0:	add rax, r13                        
0x1f9e3:	mov rax, qword ptr [rax]            #	      if (|s|trncmp (string + i, prefixes[j], strlen (prefixes[j])) == 0)
0x1f9e6:	mov rdi, rax                        
0x1f9e9:	call 0x4960                         
0x1f9ee:	mov rdx, rax                        
0x1f9f1:	movsxd rax, ebx                     #	      if (strncmp (string + i, prefixes|[|j], strlen (prefixes[j])) == 0)
0x1f9f4:	shl rax, 3                          
0x1f9f8:	add rax, r13                        
0x1f9fb:	mov rax, qword ptr [rax]            #	      if (|s|trncmp (string + i, prefixes[j], strlen (prefixes[j])) == 0)
0x1f9fe:	movsxd rsi, r12d                    
0x1fa01:	mov rcx, qword ptr [rbp - 0x28]     #	      if (strncmp (string |+| i, prefixes[j], strlen (prefixes[j])) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fa05:	add rcx, rsi                        
0x1fa08:	mov rsi, rax                        #	      if (|s|trncmp (string + i, prefixes[j], strlen (prefixes[j])) == 0)
0x1fa0b:	mov rdi, rcx                        
0x1fa0e:	call 0x4850                         
0x1fa13:	test eax, eax                       #	      if |(|strncmp (string + i, prefixes[j], strlen (prefixes[j])) == 0)
0x1fa15:	jne 0x1fa42                         
0x1fa17:	movsxd rax, ebx                     #		  *len = strlen (prefixes|[|j]) - 1;
0x1fa1a:	shl rax, 3                          
0x1fa1e:	add rax, r13                        
0x1fa21:	mov rax, qword ptr [rax]            #		  *len = |s|trlen (prefixes[j]) - 1;
0x1fa24:	mov rdi, rax                        
0x1fa27:	call 0x4960                         
0x1fa2c:	sub eax, 1                          #		  *len = strlen (prefixes[j]) |-| 1;
0x1fa2f:	mov edx, eax                        
0x1fa31:	mov rax, qword ptr [rbp - 0x30]     #		  *len |=| strlen (prefixes[j]) - 1;
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fa35:	mov dword ptr [rax], edx            
0x1fa37:	mov rax, qword ptr [rbp - 0x30]     #		  return (i + |*|len);
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fa3b:	mov eax, dword ptr [rax]            
0x1fa3d:	add eax, r12d                       #		  return (i |+| *len);
0x1fa40:	jmp 0x1fa67                         
0x1fa42:	add ebx, 1                          #	  for (j = 0; prefixes[j]; j|+|+)
0x1fa45:	movsxd rax, ebx                     #	  for (j = 0; prefixes|[|j]; j++)
0x1fa48:	shl rax, 3                          
0x1fa4c:	add rax, r13                        
0x1fa4f:	mov rax, qword ptr [rax]            
0x1fa52:	test rax, rax                       #	  for (j = 0; |p|refixes[j]; j++)
0x1fa55:	jne 0x1f9d9                         
0x1fa57:	add r12d, 1                         #      for (i = 0; i < string_len; i|+|+)
0x1fa5b:	cmp r12d, r14d                      #      for (i = 0; i |<| string_len; i++)
0x1fa5e:	jl 0x1f9d2                          
0x1fa64:	mov eax, r14d                       #  return |(|string_len);
0x1fa67:	add rsp, 0x10                       #|}|
0x1fa6b:	pop rbx                             
0x1fa6c:	pop r12                             
0x1fa6e:	pop r13                             
0x1fa70:	pop r14                             
0x1fa72:	pop rbp                             
0x1fa73:	ret                                 
0x1fa74:	endbr64                             #|{|
0x1fa78:	push rbp                            
0x1fa79:	mov rbp, rsp                        
0x1fa7c:	push r14                            
0x1fa7e:	push r13                            
0x1fa80:	push r12                            
0x1fa82:	push rbx                            
0x1fa83:	sub rsp, 0x10                       
0x1fa87:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fa8b:	mov r13, qword ptr [rip + 0x10d9e]  #  register char **|s|uffixes = tilde_additional_suffixes;
MEMORY OFFSET:     0x10d9e     69022  >>69030

0x1fa92:	mov rax, qword ptr [rbp - 0x28]     #  string_len = |s|trlen (string);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fa96:	mov rdi, rax                        
0x1fa99:	call 0x4960                         
0x1fa9e:	mov r14d, eax                       #  string_len |=| strlen (string);
0x1faa1:	mov ebx, 0                          #  for (i |=| 0; i < string_len; i++)
0x1faa6:	jmp 0x1fb39                         #  |f|or (i = 0; i < string_len; i++)
0x1faab:	movsxd rdx, ebx                     #      if (string|[|i] == '/' || !string[i])
0x1faae:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fab2:	add rax, rdx                        
0x1fab5:	movzx eax, byte ptr [rax]           
0x1fab8:	cmp al, 0x2f                        #      if |(|string[i] == '/' || !string[i])
0x1faba:	je 0x1fb42                          
0x1fac0:	movsxd rdx, ebx                     #      if (string[i] == '/' || !string|[|i])
0x1fac3:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fac7:	add rax, rdx                        
0x1faca:	movzx eax, byte ptr [rax]           
0x1facd:	test al, al                         #      if (string[i] == '/' |||| !string[i])
0x1facf:	je 0x1fb42                          
0x1fad1:	mov r12d, 0                         #      for (j |=| 0; suffixes && suffixes[j]; j++)
0x1fad7:	jmp 0x1fb1f                         #      |f|or (j = 0; suffixes && suffixes[j]; j++)
0x1fad9:	movsxd rax, r12d                    #	  if (strncmp (string + i, suffixes[j], strlen (suffixes|[|j])) == 0)
0x1fadc:	shl rax, 3                          
0x1fae0:	add rax, r13                        
0x1fae3:	mov rax, qword ptr [rax]            #	  if (|s|trncmp (string + i, suffixes[j], strlen (suffixes[j])) == 0)
0x1fae6:	mov rdi, rax                        
0x1fae9:	call 0x4960                         
0x1faee:	mov rdx, rax                        
0x1faf1:	movsxd rax, r12d                    #	  if (strncmp (string + i, suffixes|[|j], strlen (suffixes[j])) == 0)
0x1faf4:	shl rax, 3                          
0x1faf8:	add rax, r13                        
0x1fafb:	mov rax, qword ptr [rax]            #	  if (|s|trncmp (string + i, suffixes[j], strlen (suffixes[j])) == 0)
0x1fafe:	movsxd rsi, ebx                     
0x1fb01:	mov rcx, qword ptr [rbp - 0x28]     #	  if (strncmp (string |+| i, suffixes[j], strlen (suffixes[j])) == 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fb05:	add rcx, rsi                        
0x1fb08:	mov rsi, rax                        #	  if (|s|trncmp (string + i, suffixes[j], strlen (suffixes[j])) == 0)
0x1fb0b:	mov rdi, rcx                        
0x1fb0e:	call 0x4850                         
0x1fb13:	test eax, eax                       #	  if |(|strncmp (string + i, suffixes[j], strlen (suffixes[j])) == 0)
0x1fb15:	jne 0x1fb1b                         
0x1fb17:	mov eax, ebx                        #	    return |(|i);
0x1fb19:	jmp 0x1fb44                         
0x1fb1b:	add r12d, 1                         #      for (j = 0; suffixes && suffixes[j]; j|+|+)
0x1fb1f:	test r13, r13                       #      for (j = 0; suffixes |&|& suffixes[j]; j++)
0x1fb22:	je 0x1fb36                          
0x1fb24:	movsxd rax, r12d                    #      for (j = 0; suffixes && suffixes|[|j]; j++)
0x1fb27:	shl rax, 3                          
0x1fb2b:	add rax, r13                        
0x1fb2e:	mov rax, qword ptr [rax]            
0x1fb31:	test rax, rax                       #      for (j = 0; suffixes |&|& suffixes[j]; j++)
0x1fb34:	jne 0x1fad9                         
0x1fb36:	add ebx, 1                          #  for (i = 0; i < string_len; i|+|+)
0x1fb39:	cmp ebx, r14d                       #  for (i = 0; i |<| string_len; i++)
0x1fb3c:	jl 0x1faab                          
0x1fb42:	mov eax, ebx                        #  return |(|i);
0x1fb44:	add rsp, 0x10                       #|}|
0x1fb48:	pop rbx                             
0x1fb49:	pop r12                             
0x1fb4b:	pop r13                             
0x1fb4d:	pop r14                             
0x1fb4f:	pop rbp                             
0x1fb50:	ret                                 
0x1fb51:	endbr64                             #|{|
0x1fb55:	push rbp                            
0x1fb56:	mov rbp, rsp                        
0x1fb59:	push r12                            
0x1fb5b:	push rbx                            
0x1fb5c:	sub rsp, 0x40                       
0x1fb60:	mov qword ptr [rbp - 0x48], rdi     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fb64:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x1fb6d:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1fb71:	xor eax, eax                        
0x1fb73:	mov dword ptr [rbp - 0x34], 0       #  result_size = result_index |=| 0;
MEMORY OFFSET:     -0x34     -52  >>-44

0x1fb7a:	mov eax, dword ptr [rbp - 0x34]     #  result_size |=| result_index = 0;
MEMORY OFFSET:     -0x34     -52  >>-44

0x1fb7d:	mov dword ptr [rbp - 0x38], eax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1fb80:	mov qword ptr [rbp - 0x30], 0       #  result |=| (char *)NULL;
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fb88:	lea rdx, [rbp - 0x3c]               #      start = |t|ilde_find_prefix (string, &len);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1fb8c:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fb90:	mov rsi, rdx                        
0x1fb93:	mov rdi, rax                        
0x1fb96:	mov eax, 0                          
0x1fb9b:	call 0x1f963                        
0x1fba0:	mov ebx, eax                        
0x1fba2:	mov eax, dword ptr [rbp - 0x34]     #      if ((result_index |+| start + 1) > result_size)
MEMORY OFFSET:     -0x34     -52  >>-44

0x1fba5:	add eax, ebx                        
0x1fba7:	cmp dword ptr [rbp - 0x38], eax     #      if |(|(result_index + start + 1) > result_size)
MEMORY OFFSET:     -0x38     -56  >>-48

0x1fbaa:	jg 0x1fbce                          
0x1fbac:	lea eax, [rbx + 0x14]               #	result = xrealloc (result, 1 + (result_size += (start |+| 20)));
MEMORY OFFSET:     0x14     20  >>28

0x1fbaf:	add dword ptr [rbp - 0x38], eax     #	result = xrealloc (result, 1 + (result_size |+|= (start + 20)));
MEMORY OFFSET:     -0x38     -56  >>-48

0x1fbb2:	mov eax, dword ptr [rbp - 0x38]     #	result = xrealloc (result, 1 |+| (result_size += (start + 20)));
MEMORY OFFSET:     -0x38     -56  >>-48

0x1fbb5:	add eax, 1                          
0x1fbb8:	movsxd rdx, eax                     #	result = |x|realloc (result, 1 + (result_size += (start + 20)));
0x1fbbb:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fbbf:	mov rsi, rdx                        
0x1fbc2:	mov rdi, rax                        
0x1fbc5:	call 0x24670                        
0x1fbca:	mov qword ptr [rbp - 0x30], rax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fbce:	movsxd rdx, ebx                     #      |s|trncpy (result + result_index, string, start);
0x1fbd1:	mov eax, dword ptr [rbp - 0x34]     
MEMORY OFFSET:     -0x34     -52  >>-44

0x1fbd4:	movsxd rcx, eax                     
0x1fbd7:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fbdb:	add rcx, rax                        
0x1fbde:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fbe2:	mov rsi, rax                        
0x1fbe5:	mov rdi, rcx                        
0x1fbe8:	call 0x4840                         
0x1fbed:	add dword ptr [rbp - 0x34], ebx     #      result_index |+|= start;
MEMORY OFFSET:     -0x34     -52  >>-44

0x1fbf0:	movsxd rax, ebx                     #      string |+|= start;
0x1fbf3:	add qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fbf7:	mov rax, qword ptr [rbp - 0x48]     #      end = |t|ilde_find_suffix (string);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fbfb:	mov rdi, rax                        
0x1fbfe:	mov eax, 0                          
0x1fc03:	call 0x1fa74                        
0x1fc08:	mov r12d, eax                       
0x1fc0b:	test ebx, ebx                       #      if |(|!start && !end)
0x1fc0d:	jne 0x1fc40                         
0x1fc0f:	test r12d, r12d                     #      if (!start |&|& !end)
0x1fc12:	jne 0x1fc40                         
0x1fc14:	mov eax, dword ptr [rbp - 0x34]     #  result|[|result_index] = '\0';
MEMORY OFFSET:     -0x34     -52  >>-44

0x1fc17:	movsxd rdx, eax                     
0x1fc1a:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fc1e:	add rax, rdx                        
0x1fc21:	mov byte ptr [rax], 0               #  result[result_index] |=| '\0';
0x1fc24:	mov rax, qword ptr [rbp - 0x30]     #  return |(|result);
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fc28:	mov rdx, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x1fc2c:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x1fc35:	je 0x1fd17                          
0x1fc3b:	jmp 0x1fd12                         
0x1fc40:	lea eax, [r12 + 1]                  #      tilde_word = xmalloc (1 |+| end);
MEMORY OFFSET:     0x1     1  >>9

0x1fc45:	cdqe                                #      tilde_word = |x|malloc (1 + end);
0x1fc47:	mov rdi, rax                        
0x1fc4a:	call 0x24650                        
0x1fc4f:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fc53:	movsxd rdx, r12d                    #      |s|trncpy (tilde_word, string, end);
0x1fc56:	mov rcx, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fc5a:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fc5e:	mov rsi, rcx                        
0x1fc61:	mov rdi, rax                        
0x1fc64:	call 0x4840                         
0x1fc69:	movsxd rdx, r12d                    #      tilde_word|[|end] = '\0';
0x1fc6c:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fc70:	add rax, rdx                        
0x1fc73:	mov byte ptr [rax], 0               #      tilde_word[end] |=| '\0';
0x1fc76:	movsxd rax, r12d                    #      string |+|= end;
0x1fc79:	add qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fc7d:	mov rax, qword ptr [rbp - 0x28]     #      expansion = |t|ilde_expand_word (tilde_word);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fc81:	mov rdi, rax                        
0x1fc84:	mov eax, 0                          
0x1fc89:	call 0x1fd20                        
0x1fc8e:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1fc92:	mov rax, qword ptr [rbp - 0x28]     #      |x|free (tilde_word);
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fc96:	mov rdi, rax                        
0x1fc99:	call 0x1eeae                        
0x1fc9e:	mov rax, qword ptr [rbp - 0x20]     #      len = |s|trlen (expansion);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1fca2:	mov rdi, rax                        
0x1fca5:	call 0x4960                         
0x1fcaa:	mov dword ptr [rbp - 0x3c], eax     #      len |=| strlen (expansion);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1fcad:	mov edx, dword ptr [rbp - 0x3c]     #      if ((result_index |+| len + 1) > result_size)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1fcb0:	mov eax, dword ptr [rbp - 0x34]     
MEMORY OFFSET:     -0x34     -52  >>-44

0x1fcb3:	add eax, edx                        
0x1fcb5:	cmp dword ptr [rbp - 0x38], eax     #      if |(|(result_index + len + 1) > result_size)
MEMORY OFFSET:     -0x38     -56  >>-48

0x1fcb8:	jg 0x1fcdf                          
0x1fcba:	mov eax, dword ptr [rbp - 0x3c]     #	result = xrealloc (result, 1 + (result_size += (len |+| 20)));
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1fcbd:	add eax, 0x14                       
0x1fcc0:	add dword ptr [rbp - 0x38], eax     #	result = xrealloc (result, 1 + (result_size |+|= (len + 20)));
MEMORY OFFSET:     -0x38     -56  >>-48

0x1fcc3:	mov eax, dword ptr [rbp - 0x38]     #	result = xrealloc (result, 1 |+| (result_size += (len + 20)));
MEMORY OFFSET:     -0x38     -56  >>-48

0x1fcc6:	add eax, 1                          
0x1fcc9:	movsxd rdx, eax                     #	result = |x|realloc (result, 1 + (result_size += (len + 20)));
0x1fccc:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fcd0:	mov rsi, rdx                        
0x1fcd3:	mov rdi, rax                        
0x1fcd6:	call 0x24670                        
0x1fcdb:	mov qword ptr [rbp - 0x30], rax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fcdf:	mov eax, dword ptr [rbp - 0x34]     #      |s|trcpy (result + result_index, expansion);
MEMORY OFFSET:     -0x34     -52  >>-44

0x1fce2:	movsxd rdx, eax                     
0x1fce5:	mov rax, qword ptr [rbp - 0x30]     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1fce9:	add rdx, rax                        
0x1fcec:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1fcf0:	mov rsi, rax                        
0x1fcf3:	mov rdi, rdx                        
0x1fcf6:	call 0x4870                         
0x1fcfb:	mov eax, dword ptr [rbp - 0x3c]     #      result_index |+|= len;
MEMORY OFFSET:     -0x3c     -60  >>-52

0x1fcfe:	add dword ptr [rbp - 0x34], eax     
MEMORY OFFSET:     -0x34     -52  >>-44

0x1fd01:	mov rax, qword ptr [rbp - 0x20]     #      |x|free (expansion);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1fd05:	mov rdi, rax                        
0x1fd08:	call 0x1eeae                        
0x1fd0d:	jmp 0x1fb88                         #    |{|
0x1fd12:	call 0x4980                         #|}|
0x1fd17:	add rsp, 0x40                       
0x1fd1b:	pop rbx                             
0x1fd1c:	pop r12                             
0x1fd1e:	pop rbp                             
0x1fd1f:	ret                                 
0x1fd20:	endbr64                             #|{|
0x1fd24:	push rbp                            
0x1fd25:	mov rbp, rsp                        
0x1fd28:	push rbx                            
0x1fd29:	sub rsp, 0x68                       
0x1fd2d:	mov qword ptr [rbp - 0x68], rdi     
MEMORY OFFSET:     -0x68     -104  >>-96

0x1fd31:	cmp qword ptr [rbp - 0x68], 0       #  if |(|filename == (char *)0)
MEMORY OFFSET:     -0x68     -104  >>-96

0x1fd36:	jne 0x1fd42                         
0x1fd38:	mov eax, 0                          #    return (|(|char *)NULL);
0x1fd3d:	jmp 0x2008e                         
0x1fd42:	mov rax, qword ptr [rbp - 0x68]     #  dirname = |s|avestring (filename);
MEMORY OFFSET:     -0x68     -104  >>-96

0x1fd46:	mov rdi, rax                        
0x1fd49:	call 0x4960                         
0x1fd4e:	add rax, 1                          
0x1fd52:	mov rdi, rax                        
0x1fd55:	call 0x24650                        
0x1fd5a:	mov rdx, rax                        
0x1fd5d:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x1fd61:	mov rsi, rax                        
0x1fd64:	mov rdi, rdx                        
0x1fd67:	call 0x4870                         
0x1fd6c:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fd70:	mov rax, qword ptr [rbp - 0x48]     #  if (|*|dirname != '~')
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fd74:	movzx eax, byte ptr [rax]           
0x1fd77:	cmp al, 0x7e                        #  if |(|*dirname != '~')
0x1fd79:	je 0x1fd84                          
0x1fd7b:	mov rax, qword ptr [rbp - 0x48]     #    return |(|dirname);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fd7f:	jmp 0x2008e                         
0x1fd84:	mov rax, qword ptr [rbp - 0x48]     #  if (!dirname|[|1] || dirname[1] == '/')
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fd88:	add rax, 1                          
0x1fd8c:	movzx eax, byte ptr [rax]           
0x1fd8f:	test al, al                         #  if |(|!dirname[1] || dirname[1] == '/')
0x1fd91:	je 0x1fda6                          
0x1fd93:	mov rax, qword ptr [rbp - 0x48]     #  if (!dirname[1] || dirname|[|1] == '/')
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fd97:	add rax, 1                          
0x1fd9b:	movzx eax, byte ptr [rax]           
0x1fd9e:	cmp al, 0x2f                        #  if (!dirname[1] |||| dirname[1] == '/')
0x1fda0:	jne 0x1fe7e                         
0x1fda6:	lea rax, [rip + 0x977e]             #      char *temp_home = |(|char *)getenv ("HOME");
MEMORY OFFSET:     0x977e     38782  >>38790

0x1fdad:	mov rdi, rax                        
0x1fdb0:	call 0x47a0                         
0x1fdb5:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1fdb9:	cmp qword ptr [rbp - 0x40], 0       #      if |(|!temp_home)
MEMORY OFFSET:     -0x40     -64  >>-56

0x1fdbe:	jne 0x1fde3                         
0x1fdc0:	call 0x4990                         #	  entry = |g|etpwuid (getuid ());
0x1fdc5:	mov edi, eax                        
0x1fdc7:	call 0x4930                         
0x1fdcc:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x1fdd0:	cmp qword ptr [rbp - 0x18], 0       #	  if |(|entry)
MEMORY OFFSET:     -0x18     -24  >>-16

0x1fdd5:	je 0x1fde3                          
0x1fdd7:	mov rax, qword ptr [rbp - 0x18]     #	    temp_home |=| entry->pw_dir;
MEMORY OFFSET:     -0x18     -24  >>-16

0x1fddb:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1fddf:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x1fde3:	cmp qword ptr [rbp - 0x40], 0       #      home_len |=| temp_home ? strlen (temp_home) : 0;
MEMORY OFFSET:     -0x40     -64  >>-56

0x1fde8:	je 0x1fdf8                          
0x1fdea:	mov rax, qword ptr [rbp - 0x40]     #      home_len = temp_home ? |s|trlen (temp_home) : 0;
MEMORY OFFSET:     -0x40     -64  >>-56

0x1fdee:	mov rdi, rax                        
0x1fdf1:	call 0x4960                         
0x1fdf6:	jmp 0x1fdfd                         
0x1fdf8:	mov eax, 0                          #      home_len |=| temp_home ? strlen (temp_home) : 0;
0x1fdfd:	mov dword ptr [rbp - 0x4c], eax     #      home_len |=| temp_home ? strlen (temp_home) : 0;
MEMORY OFFSET:     -0x4c     -76  >>-68

0x1fe00:	mov rax, qword ptr [rbp - 0x48]     #      temp_name = xmalloc (1 + strlen (dirname |+| 1) + home_len);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fe04:	add rax, 1                          
0x1fe08:	mov rdi, rax                        #      temp_name = xmalloc (1 + |s|trlen (dirname + 1) + home_len);
0x1fe0b:	call 0x4960                         
0x1fe10:	mov rdx, rax                        
0x1fe13:	mov eax, dword ptr [rbp - 0x4c]     #      temp_name = xmalloc (1 + strlen (dirname + 1) |+| home_len);
MEMORY OFFSET:     -0x4c     -76  >>-68

0x1fe16:	cdqe                                
0x1fe18:	add rax, rdx                        
0x1fe1b:	add rax, 1                          #      temp_name = |x|malloc (1 + strlen (dirname + 1) + home_len);
0x1fe1f:	mov rdi, rax                        
0x1fe22:	call 0x24650                        
0x1fe27:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fe2b:	cmp qword ptr [rbp - 0x40], 0       #      if |(|temp_home)
MEMORY OFFSET:     -0x40     -64  >>-56

0x1fe30:	je 0x1fe45                          
0x1fe32:	mov rdx, qword ptr [rbp - 0x40]     #	|s|trcpy (temp_name, temp_home);
MEMORY OFFSET:     -0x40     -64  >>-56

0x1fe36:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fe3a:	mov rsi, rdx                        
0x1fe3d:	mov rdi, rax                        
0x1fe40:	call 0x4870                         
0x1fe45:	mov rax, qword ptr [rbp - 0x48]     #      strcpy (temp_name + home_len, dirname |+| 1);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fe49:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x1fe4d:	mov eax, dword ptr [rbp - 0x4c]     #      |s|trcpy (temp_name + home_len, dirname + 1);
MEMORY OFFSET:     -0x4c     -76  >>-68

0x1fe50:	movsxd rcx, eax                     
0x1fe53:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fe57:	add rax, rcx                        
0x1fe5a:	mov rsi, rdx                        
0x1fe5d:	mov rdi, rax                        
0x1fe60:	call 0x4870                         
0x1fe65:	mov rax, qword ptr [rbp - 0x48]     #      |x|free (dirname);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fe69:	mov rdi, rax                        
0x1fe6c:	call 0x1eeae                        
0x1fe71:	mov rax, qword ptr [rbp - 0x28]     #      dirname |=| temp_name;
MEMORY OFFSET:     -0x28     -40  >>-32

0x1fe75:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fe79:	jmp 0x2008a                         #    |{|
0x1fe7e:	mov rax, qword ptr [rbp - 0x48]     #      username = |x|malloc (strlen (dirname));
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fe82:	mov rdi, rax                        
0x1fe85:	call 0x4960                         
0x1fe8a:	mov rdi, rax                        
0x1fe8d:	call 0x24650                        
0x1fe92:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1fe96:	mov dword ptr [rbp - 0x54], 1       #      for (i |=| 1; dirname[i] && dirname[i] != '/'; i++)
MEMORY OFFSET:     -0x54     -84  >>-76

0x1fe9d:	jmp 0x1fec6                         #      |f|or (i = 1; dirname[i] && dirname[i] != '/'; i++)
0x1fe9f:	mov eax, dword ptr [rbp - 0x54]     #	username[i - 1] = dirname|[|i];
MEMORY OFFSET:     -0x54     -84  >>-76

0x1fea2:	movsxd rdx, eax                     
0x1fea5:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fea9:	add rax, rdx                        
0x1feac:	mov edx, dword ptr [rbp - 0x54]     #	username|[|i - 1] = dirname[i];
MEMORY OFFSET:     -0x54     -84  >>-76

0x1feaf:	movsxd rdx, edx                     
0x1feb2:	lea rcx, [rdx - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1feb6:	mov rdx, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1feba:	add rdx, rcx                        
0x1febd:	movzx eax, byte ptr [rax]           #	username[i - 1] = dirname|[|i];
0x1fec0:	mov byte ptr [rdx], al              #	username[i - 1] |=| dirname[i];
0x1fec2:	add dword ptr [rbp - 0x54], 1       #      for (i = 1; dirname[i] && dirname[i] != '/'; i|+|+)
MEMORY OFFSET:     -0x54     -84  >>-76

0x1fec6:	mov eax, dword ptr [rbp - 0x54]     #      for (i = 1; dirname|[|i] && dirname[i] != '/'; i++)
MEMORY OFFSET:     -0x54     -84  >>-76

0x1fec9:	movsxd rdx, eax                     
0x1fecc:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fed0:	add rax, rdx                        
0x1fed3:	movzx eax, byte ptr [rax]           
0x1fed6:	test al, al                         #      for (i = 1; dirname[i] |&|& dirname[i] != '/'; i++)
0x1fed8:	je 0x1feee                          
0x1feda:	mov eax, dword ptr [rbp - 0x54]     #      for (i = 1; dirname[i] && dirname|[|i] != '/'; i++)
MEMORY OFFSET:     -0x54     -84  >>-76

0x1fedd:	movsxd rdx, eax                     
0x1fee0:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1fee4:	add rax, rdx                        
0x1fee7:	movzx eax, byte ptr [rax]           
0x1feea:	cmp al, 0x2f                        #      for (i = 1; dirname[i] |&|& dirname[i] != '/'; i++)
0x1feec:	jne 0x1fe9f                         
0x1feee:	mov eax, dword ptr [rbp - 0x54]     #      username|[|i - 1] = '\0';
MEMORY OFFSET:     -0x54     -84  >>-76

0x1fef1:	cdqe                                
0x1fef3:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x1fef7:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1fefb:	add rax, rdx                        
0x1fefe:	mov byte ptr [rax], 0               #      username[i - 1] |=| '\0';
0x1ff01:	mov rax, qword ptr [rbp - 0x38]     #      if ((user_entry = |g|etpwnam (username)) == (struct passwd *)0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x1ff05:	mov rdi, rax                        
0x1ff08:	call 0x4b20                         
0x1ff0d:	mov qword ptr [rbp - 0x30], rax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x1ff11:	cmp qword ptr [rbp - 0x30], 0       #      if |(|(user_entry = getpwnam (username)) == (struct passwd *)0)
MEMORY OFFSET:     -0x30     -48  >>-40

0x1ff16:	jne 0x1ffe9                         
0x1ff1c:	mov rax, qword ptr [rip + 0x11bc5]  #	  if (|t|ilde_expansion_failure_hook)
MEMORY OFFSET:     0x11bc5     72645  >>72653

0x1ff23:	test rax, rax                       #	  if |(|tilde_expansion_failure_hook)
0x1ff26:	je 0x20079                          
0x1ff2c:	mov rdx, qword ptr [rip + 0x11bb5]  #	      expansion = (|*|tilde_expansion_failure_hook) (username);
MEMORY OFFSET:     0x11bb5     72629  >>72637

0x1ff33:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x1ff37:	mov rdi, rax                        
0x1ff3a:	mov eax, 0                          
0x1ff3f:	call rdx                            
0x1ff41:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x1ff45:	cmp qword ptr [rbp - 0x20], 0       #	      if |(|expansion)
MEMORY OFFSET:     -0x20     -32  >>-24

0x1ff4a:	je 0x20079                          
0x1ff50:	mov rax, qword ptr [rbp - 0x20]     #		  len = |s|trlen (expansion);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1ff54:	mov rdi, rax                        
0x1ff57:	call 0x4960                         
0x1ff5c:	mov dword ptr [rbp - 0x50], eax     #		  len |=| strlen (expansion);
MEMORY OFFSET:     -0x50     -80  >>-72

0x1ff5f:	mov eax, dword ptr [rbp - 0x50]     #		  temp_name = xmalloc (1 |+| len + strlen (dirname + i));
MEMORY OFFSET:     -0x50     -80  >>-72

0x1ff62:	add eax, 1                          
0x1ff65:	movsxd rbx, eax                     
0x1ff68:	mov eax, dword ptr [rbp - 0x54]     #		  temp_name = xmalloc (1 + len + |s|trlen (dirname + i));
MEMORY OFFSET:     -0x54     -84  >>-76

0x1ff6b:	movsxd rdx, eax                     
0x1ff6e:	mov rax, qword ptr [rbp - 0x48]     #		  temp_name = xmalloc (1 + len + strlen (dirname |+| i));
MEMORY OFFSET:     -0x48     -72  >>-64

0x1ff72:	add rax, rdx                        
0x1ff75:	mov rdi, rax                        #		  temp_name = xmalloc (1 + len + |s|trlen (dirname + i));
0x1ff78:	call 0x4960                         
0x1ff7d:	add rax, rbx                        #		  temp_name = |x|malloc (1 + len + strlen (dirname + i));
0x1ff80:	mov rdi, rax                        
0x1ff83:	call 0x24650                        
0x1ff88:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ff8c:	mov rdx, qword ptr [rbp - 0x20]     #		  |s|trcpy (temp_name, expansion);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1ff90:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ff94:	mov rsi, rdx                        
0x1ff97:	mov rdi, rax                        
0x1ff9a:	call 0x4870                         
0x1ff9f:	mov eax, dword ptr [rbp - 0x54]     #		  |s|trcpy (temp_name + len, dirname + i);
MEMORY OFFSET:     -0x54     -84  >>-76

0x1ffa2:	movsxd rdx, eax                     
0x1ffa5:	mov rax, qword ptr [rbp - 0x48]     #		  strcpy (temp_name + len, dirname |+| i);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1ffa9:	add rdx, rax                        
0x1ffac:	mov eax, dword ptr [rbp - 0x50]     #		  |s|trcpy (temp_name + len, dirname + i);
MEMORY OFFSET:     -0x50     -80  >>-72

0x1ffaf:	movsxd rcx, eax                     
0x1ffb2:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ffb6:	add rax, rcx                        
0x1ffb9:	mov rsi, rdx                        
0x1ffbc:	mov rdi, rax                        
0x1ffbf:	call 0x4870                         
0x1ffc4:	mov rax, qword ptr [rbp - 0x20]     #		  |x|free (expansion);
MEMORY OFFSET:     -0x20     -32  >>-24

0x1ffc8:	mov rdi, rax                        
0x1ffcb:	call 0x1eeae                        
0x1ffd0:	mov rax, qword ptr [rbp - 0x48]     #		  |x|free (dirname);
MEMORY OFFSET:     -0x48     -72  >>-64

0x1ffd4:	mov rdi, rax                        
0x1ffd7:	call 0x1eeae                        
0x1ffdc:	mov rax, qword ptr [rbp - 0x28]     #		  dirname |=| temp_name;
MEMORY OFFSET:     -0x28     -40  >>-32

0x1ffe0:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x1ffe4:	jmp 0x20079                         
0x1ffe9:	mov rax, qword ptr [rbp - 0x30]     #	  len = strlen (user_entry|-|>pw_dir);
MEMORY OFFSET:     -0x30     -48  >>-40

0x1ffed:	mov rax, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x1fff1:	mov rdi, rax                        #	  len = |s|trlen (user_entry->pw_dir);
0x1fff4:	call 0x4960                         
0x1fff9:	mov dword ptr [rbp - 0x50], eax     #	  len |=| strlen (user_entry->pw_dir);
MEMORY OFFSET:     -0x50     -80  >>-72

0x1fffc:	mov eax, dword ptr [rbp - 0x50]     #	  temp_name = xmalloc (1 |+| len + strlen (dirname + i));
MEMORY OFFSET:     -0x50     -80  >>-72

0x1ffff:	add eax, 1                          
0x20002:	movsxd rbx, eax                     
0x20005:	mov eax, dword ptr [rbp - 0x54]     #	  temp_name = xmalloc (1 + len + |s|trlen (dirname + i));
MEMORY OFFSET:     -0x54     -84  >>-76

0x20008:	movsxd rdx, eax                     
0x2000b:	mov rax, qword ptr [rbp - 0x48]     #	  temp_name = xmalloc (1 + len + strlen (dirname |+| i));
MEMORY OFFSET:     -0x48     -72  >>-64

0x2000f:	add rax, rdx                        
0x20012:	mov rdi, rax                        #	  temp_name = xmalloc (1 + len + |s|trlen (dirname + i));
0x20015:	call 0x4960                         
0x2001a:	add rax, rbx                        #	  temp_name = |x|malloc (1 + len + strlen (dirname + i));
0x2001d:	mov rdi, rax                        
0x20020:	call 0x24650                        
0x20025:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x20029:	mov rax, qword ptr [rbp - 0x30]     #	  strcpy (temp_name, user_entry|-|>pw_dir);
MEMORY OFFSET:     -0x30     -48  >>-40

0x2002d:	mov rdx, qword ptr [rax + 0x20]     
MEMORY OFFSET:     0x20     32  >>40

0x20031:	mov rax, qword ptr [rbp - 0x28]     #	  |s|trcpy (temp_name, user_entry->pw_dir);
MEMORY OFFSET:     -0x28     -40  >>-32

0x20035:	mov rsi, rdx                        
0x20038:	mov rdi, rax                        
0x2003b:	call 0x4870                         
0x20040:	mov eax, dword ptr [rbp - 0x54]     #	  |s|trcpy (temp_name + len, dirname + i);
MEMORY OFFSET:     -0x54     -84  >>-76

0x20043:	movsxd rdx, eax                     
0x20046:	mov rax, qword ptr [rbp - 0x48]     #	  strcpy (temp_name + len, dirname |+| i);
MEMORY OFFSET:     -0x48     -72  >>-64

0x2004a:	add rdx, rax                        
0x2004d:	mov eax, dword ptr [rbp - 0x50]     #	  |s|trcpy (temp_name + len, dirname + i);
MEMORY OFFSET:     -0x50     -80  >>-72

0x20050:	movsxd rcx, eax                     
0x20053:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x20057:	add rax, rcx                        
0x2005a:	mov rsi, rdx                        
0x2005d:	mov rdi, rax                        
0x20060:	call 0x4870                         
0x20065:	mov rax, qword ptr [rbp - 0x48]     #	  |x|free (dirname);
MEMORY OFFSET:     -0x48     -72  >>-64

0x20069:	mov rdi, rax                        
0x2006c:	call 0x1eeae                        
0x20071:	mov rax, qword ptr [rbp - 0x28]     #	  dirname |=| temp_name;
MEMORY OFFSET:     -0x28     -40  >>-32

0x20075:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x20079:	call 0x4c40                         #      |e|ndpwent ();
0x2007e:	mov rax, qword ptr [rbp - 0x38]     #      |x|free (username);
MEMORY OFFSET:     -0x38     -56  >>-48

0x20082:	mov rdi, rax                        
0x20085:	call 0x1eeae                        
0x2008a:	mov rax, qword ptr [rbp - 0x48]     #  return |(|dirname);
MEMORY OFFSET:     -0x48     -72  >>-64

0x2008e:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x20092:	leave                               
0x20093:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/history.c
####################################################################################################

0x20094:	endbr64                             #|{|
0x20098:	push rbp                            
0x20099:	mov rbp, rsp                        
0x2009c:	sub rsp, 0x10                       
0x200a0:	mov edi, 0x18                       #  state = (HISTORY_STATE *)|x|malloc (sizeof (HISTORY_STATE));
0x200a5:	call 0x24650                        
0x200aa:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x200ae:	mov rdx, qword ptr [rip + 0x11a5b]  #  state->entries |=| the_history;
MEMORY OFFSET:     0x11a5b     72283  >>72291

0x200b5:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x200b9:	mov qword ptr [rax], rdx            
0x200bc:	mov edx, dword ptr [rip + 0x11a5e]  #  state->offset |=| history_offset;
MEMORY OFFSET:     0x11a5e     72286  >>72294

0x200c2:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x200c6:	mov dword ptr [rax + 8], edx        
MEMORY OFFSET:     0x8     8  >>16

0x200c9:	mov edx, dword ptr [rip + 0x11a55]  #  state->length |=| history_length;
MEMORY OFFSET:     0x11a55     72277  >>72285

0x200cf:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x200d3:	mov dword ptr [rax + 0xc], edx      
MEMORY OFFSET:     0xc     12  >>20

0x200d6:	mov edx, dword ptr [rip + 0x11a4c]  #  state->size |=| history_size;
MEMORY OFFSET:     0x11a4c     72268  >>72276

0x200dc:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x200e0:	mov dword ptr [rax + 0x10], edx     
MEMORY OFFSET:     0x10     16  >>24

0x200e3:	mov rax, qword ptr [rbp - 8]        #  return |(|state);
MEMORY OFFSET:     -0x8     -8  >>0

0x200e7:	leave                               #|}|
0x200e8:	ret                                 
0x200e9:	endbr64                             #|{|
0x200ed:	push rbp                            
0x200ee:	mov rbp, rsp                        
0x200f1:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x200f5:	mov rax, qword ptr [rbp - 8]        #  the_history = state|-|>entries;
MEMORY OFFSET:     -0x8     -8  >>0

0x200f9:	mov rax, qword ptr [rax]            
0x200fc:	mov qword ptr [rip + 0x11a0d], rax  #  the_history |=| state->entries;
MEMORY OFFSET:     0x11a0d     72205  >>72213

0x20103:	mov rax, qword ptr [rbp - 8]        #  history_offset = state|-|>offset;
MEMORY OFFSET:     -0x8     -8  >>0

0x20107:	mov eax, dword ptr [rax + 8]        
MEMORY OFFSET:     0x8     8  >>16

0x2010a:	mov dword ptr [rip + 0x11a10], eax  #  history_offset |=| state->offset;
MEMORY OFFSET:     0x11a10     72208  >>72216

0x20110:	mov rax, qword ptr [rbp - 8]        #  history_length = state|-|>length;
MEMORY OFFSET:     -0x8     -8  >>0

0x20114:	mov eax, dword ptr [rax + 0xc]      
MEMORY OFFSET:     0xc     12  >>20

0x20117:	mov dword ptr [rip + 0x11a07], eax  #  history_length |=| state->length;
MEMORY OFFSET:     0x11a07     72199  >>72207

0x2011d:	mov rax, qword ptr [rbp - 8]        #  history_size = state|-|>size;
MEMORY OFFSET:     -0x8     -8  >>0

0x20121:	mov eax, dword ptr [rax + 0x10]     
MEMORY OFFSET:     0x10     16  >>24

0x20124:	mov dword ptr [rip + 0x119fe], eax  #  history_size |=| state->size;
MEMORY OFFSET:     0x119fe     72190  >>72198

0x2012a:	nop                                 #|}|
0x2012b:	pop rbp                             
0x2012c:	ret                                 
0x2012d:	endbr64                             #|{|
0x20131:	push rbp                            
0x20132:	mov rbp, rsp                        
0x20135:	mov eax, dword ptr [rip + 0x119e9]  #  history_offset |=| history_length;
MEMORY OFFSET:     0x119e9     72169  >>72177

0x2013b:	mov dword ptr [rip + 0x119df], eax  
MEMORY OFFSET:     0x119df     72159  >>72167

0x20141:	nop                                 #|}|
0x20142:	pop rbp                             
0x20143:	ret                                 
0x20144:	endbr64                             #|{|
0x20148:	push rbp                            
0x20149:	mov rbp, rsp                        
0x2014c:	push r12                            
0x2014e:	push rbx                            
0x2014f:	mov r12d, 0                         #  result |=| 0;
0x20155:	mov ebx, 0                          #  for (i |=| 0; the_history && the_history[i]; i++)
0x2015a:	jmp 0x20188                         #  |f|or (i = 0; the_history && the_history[i]; i++)
0x2015c:	mov rdx, qword ptr [rip + 0x119ad]  #    result += strlen (the_history|[|i]->line);
MEMORY OFFSET:     0x119ad     72109  >>72117

0x20163:	movsxd rax, ebx                     
0x20166:	shl rax, 3                          
0x2016a:	add rax, rdx                        
0x2016d:	mov rax, qword ptr [rax]            
0x20170:	mov rax, qword ptr [rax]            #    result += strlen (the_history[i]|-|>line);
0x20173:	mov rdi, rax                        #    result += |s|trlen (the_history[i]->line);
0x20176:	call 0x4960                         
0x2017b:	mov edx, eax                        #    result |+|= strlen (the_history[i]->line);
0x2017d:	mov eax, r12d                       
0x20180:	add eax, edx                        
0x20182:	mov r12d, eax                       
0x20185:	add ebx, 1                          #  for (i = 0; the_history && the_history[i]; i|+|+)
0x20188:	mov rax, qword ptr [rip + 0x11981]  #  for (i = 0; |t|he_history && the_history[i]; i++)
MEMORY OFFSET:     0x11981     72065  >>72073

0x2018f:	test rax, rax                       #  for (i = 0; the_history |&|& the_history[i]; i++)
0x20192:	je 0x201ad                          
0x20194:	mov rdx, qword ptr [rip + 0x11975]  #  for (i = 0; the_history && the_history|[|i]; i++)
MEMORY OFFSET:     0x11975     72053  >>72061

0x2019b:	movsxd rax, ebx                     
0x2019e:	shl rax, 3                          
0x201a2:	add rax, rdx                        
0x201a5:	mov rax, qword ptr [rax]            
0x201a8:	test rax, rax                       #  for (i = 0; the_history |&|& the_history[i]; i++)
0x201ab:	jne 0x2015c                         
0x201ad:	mov eax, r12d                       #  return |(|result);
0x201b0:	pop rbx                             #|}|
0x201b1:	pop r12                             
0x201b3:	pop rbp                             
0x201b4:	ret                                 
0x201b5:	endbr64                             #|{|
0x201b9:	push rbp                            
0x201ba:	mov rbp, rsp                        
0x201bd:	push rbx                            
0x201be:	sub rsp, 0x28                       
0x201c2:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x201c6:	mov eax, dword ptr [rip + 0x1194c]  #  if (|h|istory_stifled && (history_length == max_input_history))
MEMORY OFFSET:     0x1194c     72012  >>72020

0x201cc:	test eax, eax                       #  if |(|history_stifled && (history_length == max_input_history))
0x201ce:	je 0x20280                          
0x201d4:	mov edx, dword ptr [rip + 0x1194a]  #  if (history_stifled && (history_length |=|= max_input_history))
MEMORY OFFSET:     0x1194a     72010  >>72018

0x201da:	mov eax, dword ptr [rip + 0x1193c]  
MEMORY OFFSET:     0x1193c     71996  >>72004

0x201e0:	cmp edx, eax                        #  if (history_stifled |&|& (history_length == max_input_history))
0x201e2:	jne 0x20280                         
0x201e8:	mov eax, dword ptr [rip + 0x11936]  #      if (history_length |=|= 0)
MEMORY OFFSET:     0x11936     71990  >>71998

0x201ee:	test eax, eax                       #      if |(|history_length == 0)
0x201f0:	je 0x203a0                          
0x201f6:	mov rax, qword ptr [rip + 0x11913]  #      if (the_history|[|0])
MEMORY OFFSET:     0x11913     71955  >>71963

0x201fd:	mov rax, qword ptr [rax]            
0x20200:	test rax, rax                       #      if |(|the_history[0])
0x20203:	je 0x2022c                          
0x20205:	mov rax, qword ptr [rip + 0x11904]  #	  xfree (the_history|[|0]->line);
MEMORY OFFSET:     0x11904     71940  >>71948

0x2020c:	mov rax, qword ptr [rax]            
0x2020f:	mov rax, qword ptr [rax]            #	  xfree (the_history[0]|-|>line);
0x20212:	mov rdi, rax                        #	  |x|free (the_history[0]->line);
0x20215:	call 0x1eeae                        
0x2021a:	mov rax, qword ptr [rip + 0x118ef]  #	  |x|free (the_history[0]);
MEMORY OFFSET:     0x118ef     71919  >>71927

0x20221:	mov rax, qword ptr [rax]            
0x20224:	mov rdi, rax                        
0x20227:	call 0x1eeae                        
0x2022c:	mov ebx, 0                          #      for (i |=| 0; i < history_length; i++)
0x20231:	jmp 0x20262                         #      |f|or (i = 0; i < history_length; i++)
0x20233:	mov rdx, qword ptr [rip + 0x118d6]  #	the_history[i] = the_history|[|i + 1];
MEMORY OFFSET:     0x118d6     71894  >>71902

0x2023a:	movsxd rax, ebx                     
0x2023d:	add rax, 1                          
0x20241:	shl rax, 3                          
0x20245:	add rax, rdx                        
0x20248:	mov rcx, qword ptr [rip + 0x118c1]  #	the_history|[|i] = the_history[i + 1];
MEMORY OFFSET:     0x118c1     71873  >>71881

0x2024f:	movsxd rdx, ebx                     
0x20252:	shl rdx, 3                          
0x20256:	add rdx, rcx                        
0x20259:	mov rax, qword ptr [rax]            #	the_history[i] = the_history|[|i + 1];
0x2025c:	mov qword ptr [rdx], rax            #	the_history[i] |=| the_history[i + 1];
0x2025f:	add ebx, 1                          #      for (i = 0; i < history_length; i|+|+)
0x20262:	mov eax, dword ptr [rip + 0x118bc]  #      for (i = 0; i |<| history_length; i++)
MEMORY OFFSET:     0x118bc     71868  >>71876

0x20268:	cmp ebx, eax                        
0x2026a:	jl 0x20233                          
0x2026c:	mov eax, dword ptr [rip + 0x105d6]  #      history_base|+|+;
MEMORY OFFSET:     0x105d6     67030  >>67038

0x20272:	add eax, 1                          
0x20275:	mov dword ptr [rip + 0x105cd], eax  
MEMORY OFFSET:     0x105cd     67021  >>67029

0x2027b:	jmp 0x20315                         #    |{|
0x20280:	mov eax, dword ptr [rip + 0x118a2]  #      if (|!|history_size)
MEMORY OFFSET:     0x118a2     71842  >>71850

0x20286:	test eax, eax                       #      if |(|!history_size)
0x20288:	jne 0x202bb                         
0x2028a:	mov dword ptr [rip + 0x11894], 0x32 #	  history_size |=| DEFAULT_HISTORY_GROW_SIZE;
MEMORY OFFSET:     0x11894     71828  >>71836

0x20294:	mov eax, dword ptr [rip + 0x1188e]  #	  the_history = (HIST_ENTRY **)|x|malloc (history_size * sizeof (HIST_ENTRY *));
MEMORY OFFSET:     0x1188e     71822  >>71830

0x2029a:	cdqe                                
0x2029c:	shl rax, 3                          
0x202a0:	mov rdi, rax                        
0x202a3:	call 0x24650                        
0x202a8:	mov qword ptr [rip + 0x11861], rax  #	  the_history |=| (HIST_ENTRY **)xmalloc (history_size * sizeof (HIST_ENTRY *));
MEMORY OFFSET:     0x11861     71777  >>71785

0x202af:	mov dword ptr [rip + 0x1186b], 1    #	  history_length |=| 1;
MEMORY OFFSET:     0x1186b     71787  >>71795

0x202b9:	jmp 0x20315                         
0x202bb:	mov eax, dword ptr [rip + 0x11867]  #	  if (history_length == (history_size |-| 1))
MEMORY OFFSET:     0x11867     71783  >>71791

0x202c1:	lea edx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x202c4:	mov eax, dword ptr [rip + 0x1185a]  #	  if (history_length |=|= (history_size - 1))
MEMORY OFFSET:     0x1185a     71770  >>71778

0x202ca:	cmp edx, eax                        #	  if |(|history_length == (history_size - 1))
0x202cc:	jne 0x20306                         
0x202ce:	mov eax, dword ptr [rip + 0x11854]  #	      history_size |+|= DEFAULT_HISTORY_GROW_SIZE;
MEMORY OFFSET:     0x11854     71764  >>71772

0x202d4:	add eax, 0x32                       
0x202d7:	mov dword ptr [rip + 0x1184b], eax  
MEMORY OFFSET:     0x1184b     71755  >>71763

0x202dd:	mov eax, dword ptr [rip + 0x11845]  #		|x|realloc (the_history, history_size * sizeof (HIST_ENTRY *));
MEMORY OFFSET:     0x11845     71749  >>71757

0x202e3:	cdqe                                
0x202e5:	lea rdx, [rax*8]                    
0x202ed:	mov rax, qword ptr [rip + 0x1181c]  
MEMORY OFFSET:     0x1181c     71708  >>71716

0x202f4:	mov rsi, rdx                        
0x202f7:	mov rdi, rax                        
0x202fa:	call 0x24670                        
0x202ff:	mov qword ptr [rip + 0x1180a], rax  #	      the_history |=| (HIST_ENTRY **)
MEMORY OFFSET:     0x1180a     71690  >>71698

0x20306:	mov eax, dword ptr [rip + 0x11818]  #	  history_length|+|+;
MEMORY OFFSET:     0x11818     71704  >>71712

0x2030c:	add eax, 1                          
0x2030f:	mov dword ptr [rip + 0x1180f], eax  
MEMORY OFFSET:     0x1180f     71695  >>71703

0x20315:	mov edi, 0x10                       #  temp = (HIST_ENTRY *)|x|malloc (sizeof (HIST_ENTRY));
0x2031a:	call 0x24650                        
0x2031f:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x20323:	mov rax, qword ptr [rbp - 0x28]     #  temp->line = |s|avestring (string);
MEMORY OFFSET:     -0x28     -40  >>-32

0x20327:	mov rdi, rax                        
0x2032a:	call 0x4960                         
0x2032f:	add rax, 1                          
0x20333:	mov rdi, rax                        
0x20336:	call 0x24650                        
0x2033b:	mov rdx, rax                        
0x2033e:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x20342:	mov rsi, rax                        
0x20345:	mov rdi, rdx                        
0x20348:	call 0x4870                         
0x2034d:	mov rdx, qword ptr [rbp - 0x18]     #  temp->line |=| savestring (string);
MEMORY OFFSET:     -0x18     -24  >>-16

0x20351:	mov qword ptr [rdx], rax            
0x20354:	mov rax, qword ptr [rbp - 0x18]     #  temp->data |=| (char *)NULL;
MEMORY OFFSET:     -0x18     -24  >>-16

0x20358:	mov qword ptr [rax + 8], 0          
MEMORY OFFSET:     0x8     8  >>16

0x20360:	mov rdx, qword ptr [rip + 0x117a9]  #  the_history|[|history_length] = (HIST_ENTRY *)NULL;
MEMORY OFFSET:     0x117a9     71593  >>71601

0x20367:	mov eax, dword ptr [rip + 0x117b7]  
MEMORY OFFSET:     0x117b7     71607  >>71615

0x2036d:	cdqe                                
0x2036f:	shl rax, 3                          
0x20373:	add rax, rdx                        
0x20376:	mov qword ptr [rax], 0              #  the_history[history_length] |=| (HIST_ENTRY *)NULL;
0x2037d:	mov rdx, qword ptr [rip + 0x1178c]  #  the_history|[|history_length - 1] = temp;
MEMORY OFFSET:     0x1178c     71564  >>71572

0x20384:	mov eax, dword ptr [rip + 0x1179a]  
MEMORY OFFSET:     0x1179a     71578  >>71586

0x2038a:	cdqe                                
0x2038c:	shl rax, 3                          
0x20390:	sub rax, 8                          
0x20394:	add rdx, rax                        
0x20397:	mov rax, qword ptr [rbp - 0x18]     #  the_history[history_length - 1] |=| temp;
MEMORY OFFSET:     -0x18     -24  >>-16

0x2039b:	mov qword ptr [rdx], rax            
0x2039e:	jmp 0x203a1                         
0x203a0:	nop                                 #	|r|eturn;
0x203a1:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x203a5:	leave                               
0x203a6:	ret                                 
0x203a7:	endbr64                             #|{|
0x203ab:	push rbp                            
0x203ac:	mov rbp, rsp                        
0x203af:	sub rsp, 0x30                       
0x203b3:	mov dword ptr [rbp - 0x14], edi     
MEMORY OFFSET:     -0x14     -20  >>-12

0x203b6:	mov qword ptr [rbp - 0x20], rsi     
MEMORY OFFSET:     -0x20     -32  >>-24

0x203ba:	mov qword ptr [rbp - 0x28], rdx     
MEMORY OFFSET:     -0x28     -40  >>-32

0x203be:	mov edi, 0x10                       #  HIST_ENTRY *temp = (HIST_ENTRY *)|x|malloc (sizeof (HIST_ENTRY));
0x203c3:	call 0x24650                        
0x203c8:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x203cc:	mov eax, dword ptr [rip + 0x11752]  #  if (which |>|= history_length)
MEMORY OFFSET:     0x11752     71506  >>71514

0x203d2:	cmp dword ptr [rbp - 0x14], eax     #  if |(|which >= history_length)
MEMORY OFFSET:     -0x14     -20  >>-12

0x203d5:	jl 0x203de                          
0x203d7:	mov eax, 0                          #    return (|(|HIST_ENTRY *)NULL);
0x203dc:	jmp 0x20453                         
0x203de:	mov rdx, qword ptr [rip + 0x1172b]  #  old_value = the_history|[|which];
MEMORY OFFSET:     0x1172b     71467  >>71475

0x203e5:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x203e8:	cdqe                                
0x203ea:	shl rax, 3                          
0x203ee:	add rax, rdx                        
0x203f1:	mov rax, qword ptr [rax]            #  old_value |=| the_history[which];
0x203f4:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x203f8:	mov rax, qword ptr [rbp - 0x20]     #  temp->line = |s|avestring (line);
MEMORY OFFSET:     -0x20     -32  >>-24

0x203fc:	mov rdi, rax                        
0x203ff:	call 0x4960                         
0x20404:	add rax, 1                          
0x20408:	mov rdi, rax                        
0x2040b:	call 0x24650                        
0x20410:	mov rdx, rax                        
0x20413:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x20417:	mov rsi, rax                        
0x2041a:	mov rdi, rdx                        
0x2041d:	call 0x4870                         
0x20422:	mov rdx, qword ptr [rbp - 0x10]     #  temp->line |=| savestring (line);
MEMORY OFFSET:     -0x10     -16  >>-8

0x20426:	mov qword ptr [rdx], rax            
0x20429:	mov rax, qword ptr [rbp - 0x10]     #  temp->data |=| data;
MEMORY OFFSET:     -0x10     -16  >>-8

0x2042d:	mov rdx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x20431:	mov qword ptr [rax + 8], rdx        
MEMORY OFFSET:     0x8     8  >>16

0x20435:	mov rdx, qword ptr [rip + 0x116d4]  #  the_history|[|which] = temp;
MEMORY OFFSET:     0x116d4     71380  >>71388

0x2043c:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x2043f:	cdqe                                
0x20441:	shl rax, 3                          
0x20445:	add rdx, rax                        
0x20448:	mov rax, qword ptr [rbp - 0x10]     #  the_history[which] |=| temp;
MEMORY OFFSET:     -0x10     -16  >>-8

0x2044c:	mov qword ptr [rdx], rax            
0x2044f:	mov rax, qword ptr [rbp - 8]        #  return |(|old_value);
MEMORY OFFSET:     -0x8     -8  >>0

0x20453:	leave                               #|}|
0x20454:	ret                                 
0x20455:	endbr64                             #|{|
0x20459:	push rbp                            
0x2045a:	mov rbp, rsp                        
0x2045d:	mov eax, dword ptr [rip + 0x116bd]  #  return |(|history_offset);
MEMORY OFFSET:     0x116bd     71357  >>71365

0x20463:	pop rbp                             #|}|
0x20464:	ret                                 
0x20465:	endbr64                             #|{|
0x20469:	push rbp                            
0x2046a:	mov rbp, rsp                        
0x2046d:	push r15                            
0x2046f:	push r14                            
0x20471:	push r13                            
0x20473:	push r12                            
0x20475:	push rbx                            
0x20476:	sub rsp, 0x28                       
0x2047a:	mov qword ptr [rbp - 0x48], rdi     
MEMORY OFFSET:     -0x48     -72  >>-64

0x2047e:	mov dword ptr [rbp - 0x4c], esi     
MEMORY OFFSET:     -0x4c     -76  >>-68

0x20481:	mov dword ptr [rbp - 0x50], edx     
MEMORY OFFSET:     -0x50     -80  >>-72

0x20484:	mov ebx, dword ptr [rip + 0x11696]  #  i |=| history_offset;
MEMORY OFFSET:     0x11696     71318  >>71326

0x2048a:	mov eax, dword ptr [rbp - 0x4c]     #  reverse = (direction |<| 0);
MEMORY OFFSET:     -0x4c     -76  >>-68

0x2048d:	shr eax, 0x1f                       
0x20490:	movzx r13d, al                      #  reverse |=| (direction < 0);
0x20494:	mov eax, dword ptr [rip + 0x1168a]  #  if (|!|history_length || ((i == history_length) && !reverse))
MEMORY OFFSET:     0x1168a     71306  >>71314

0x2049a:	test eax, eax                       #  if |(|!history_length || ((i == history_length) && !reverse))
0x2049c:	je 0x204ad                          
0x2049e:	mov eax, dword ptr [rip + 0x11680]  #  if (!history_length || ((i |=|= history_length) && !reverse))
MEMORY OFFSET:     0x11680     71296  >>71304

0x204a4:	cmp ebx, eax                        #  if (!history_length |||| ((i == history_length) && !reverse))
0x204a6:	jne 0x204b7                         
0x204a8:	test r13d, r13d                     #  if (!history_length || ((i == history_length) |&|& !reverse))
0x204ab:	jne 0x204b7                         
0x204ad:	mov eax, 0xffffffff                 #    return |(|-1);
0x204b2:	jmp 0x2064e                         
0x204b7:	test r13d, r13d                     #  if |(|reverse && (i == history_length))
0x204ba:	je 0x204c9                          
0x204bc:	mov eax, dword ptr [rip + 0x11662]  #  if (reverse && (i |=|= history_length))
MEMORY OFFSET:     0x11662     71266  >>71274

0x204c2:	cmp ebx, eax                        #  if (reverse |&|& (i == history_length))
0x204c4:	jne 0x204c9                         
0x204c6:	sub ebx, 1                          #    i|-|-;
0x204c9:	mov rax, qword ptr [rbp - 0x48]     #  string_len = |s|trlen (string);
MEMORY OFFSET:     -0x48     -72  >>-64

0x204cd:	mov rdi, rax                        
0x204d0:	call 0x4960                         
0x204d5:	mov dword ptr [rbp - 0x34], eax     #  string_len |=| strlen (string);
MEMORY OFFSET:     -0x34     -52  >>-44

0x204d8:	test r13d, r13d                     #      if |(|(reverse && i < 0) || (!reverse && i == history_length))
0x204db:	je 0x204e1                          
0x204dd:	test ebx, ebx                       #      if ((reverse |&|& i < 0) || (!reverse && i == history_length))
0x204df:	js 0x204f0                          
0x204e1:	test r13d, r13d                     #      if ((reverse && i < 0) |||| (!reverse && i == history_length))
0x204e4:	jne 0x204fa                         
0x204e6:	mov eax, dword ptr [rip + 0x11638]  #      if ((reverse && i < 0) || (!reverse && i |=|= history_length))
MEMORY OFFSET:     0x11638     71224  >>71232

0x204ec:	cmp ebx, eax                        #      if ((reverse && i < 0) || (!reverse |&|& i == history_length))
0x204ee:	jne 0x204fa                         
0x204f0:	mov eax, 0xffffffff                 #	return |(|-1);
0x204f5:	jmp 0x2064e                         
0x204fa:	mov rdx, qword ptr [rip + 0x1160f]  #      line = the_history|[|i]->line;
MEMORY OFFSET:     0x1160f     71183  >>71191

0x20501:	movsxd rax, ebx                     
0x20504:	shl rax, 3                          
0x20508:	add rax, rdx                        
0x2050b:	mov rax, qword ptr [rax]            
0x2050e:	mov r14, qword ptr [rax]            #      line |=| the_history[i]->line;
0x20511:	mov rdi, r14                        #      line_index = |s|trlen (line);
0x20514:	call 0x4960                         
0x20519:	mov r12d, eax                       #      line_index |=| strlen (line);
0x2051c:	cmp dword ptr [rbp - 0x34], r12d    #      if |(|string_len > line_index)
MEMORY OFFSET:     -0x34     -52  >>-44

0x20520:	jle 0x20537                         
0x20522:	test r13d, r13d                     #	  |N|EXT_LINE ();
0x20525:	je 0x2052f                          
0x20527:	sub ebx, 1                          #	  |N|EXT_LINE ();
0x2052a:	jmp 0x20649                         #	  |c|ontinue;
0x2052f:	add ebx, 1                          #	  |N|EXT_LINE ();
0x20532:	jmp 0x20649                         #	  |c|ontinue;
0x20537:	cmp dword ptr [rbp - 0x50], 1       #      if |(|anchored == ANCHORED_SEARCH)
MEMORY OFFSET:     -0x50     -80  >>-72

0x2053b:	jne 0x2058a                         
0x2053d:	mov rax, qword ptr [rbp - 0x48]     #	  if (|S|TREQN (string, line, string_len))
MEMORY OFFSET:     -0x48     -72  >>-64

0x20541:	movzx edx, byte ptr [rax]           
0x20544:	movzx eax, byte ptr [r14]           
0x20548:	cmp dl, al                          #	  if |(|STREQN (string, line, string_len))
0x2054a:	jne 0x20575                         
0x2054c:	mov eax, dword ptr [rbp - 0x34]     #	  if (|S|TREQN (string, line, string_len))
MEMORY OFFSET:     -0x34     -52  >>-44

0x2054f:	movsxd rdx, eax                     
0x20552:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x20556:	mov rsi, r14                        
0x20559:	mov rdi, rax                        
0x2055c:	call 0x4850                         
0x20561:	test eax, eax                       
0x20563:	jne 0x20575                         
0x20565:	mov dword ptr [rip + 0x115b5], ebx  #	      history_offset |=| i;
MEMORY OFFSET:     0x115b5     71093  >>71101

0x2056b:	mov eax, 0                          #	      return |(|0);
0x20570:	jmp 0x2064e                         
0x20575:	test r13d, r13d                     #	  |N|EXT_LINE ();
0x20578:	je 0x20582                          
0x2057a:	sub ebx, 1                          #	  |N|EXT_LINE ();
0x2057d:	jmp 0x20649                         #	  |c|ontinue;
0x20582:	add ebx, 1                          #	  |N|EXT_LINE ();
0x20585:	jmp 0x20649                         #	  |c|ontinue;
0x2058a:	test r13d, r13d                     #      if |(|reverse)
0x2058d:	je 0x205df                          
0x2058f:	sub r12d, dword ptr [rbp - 0x34]    #	  line_index |-|= string_len;
MEMORY OFFSET:     -0x34     -52  >>-44

0x20593:	jmp 0x205d8                         #	  while |(|line_index >= 0)
0x20595:	mov rax, qword ptr [rbp - 0x48]     #	      if (|S|TREQN (string, line + line_index, string_len))
MEMORY OFFSET:     -0x48     -72  >>-64

0x20599:	movzx edx, byte ptr [rax]           
0x2059c:	movsxd rax, r12d                    
0x2059f:	add rax, r14                        
0x205a2:	movzx eax, byte ptr [rax]           
0x205a5:	cmp dl, al                          #	      if |(|STREQN (string, line + line_index, string_len))
0x205a7:	jne 0x205d4                         
0x205a9:	mov eax, dword ptr [rbp - 0x34]     #	      if (|S|TREQN (string, line + line_index, string_len))
MEMORY OFFSET:     -0x34     -52  >>-44

0x205ac:	movsxd rdx, eax                     
0x205af:	movsxd rax, r12d                    
0x205b2:	lea rcx, [r14 + rax]                
0x205b6:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x205ba:	mov rsi, rcx                        
0x205bd:	mov rdi, rax                        
0x205c0:	call 0x4850                         
0x205c5:	test eax, eax                       
0x205c7:	jne 0x205d4                         
0x205c9:	mov dword ptr [rip + 0x11551], ebx  #		  history_offset |=| i;
MEMORY OFFSET:     0x11551     70993  >>71001

0x205cf:	mov eax, r12d                       #		  return |(|line_index);
0x205d2:	jmp 0x2064e                         
0x205d4:	sub r12d, 1                         #	      line_index|-|-;
0x205d8:	test r12d, r12d                     #	  while (line_index |>|= 0)
0x205db:	jns 0x20595                         
0x205dd:	jmp 0x20639                         
0x205df:	mov eax, r12d                       #	  register int limit = line_index |-| string_len + 1;
0x205e2:	sub eax, dword ptr [rbp - 0x34]     
MEMORY OFFSET:     -0x34     -52  >>-44

0x205e5:	lea r15d, [rax + 1]                 #	  register int |l|imit = line_index - string_len + 1;
MEMORY OFFSET:     0x1     1  >>9

0x205e9:	mov r12d, 0                         #	  line_index |=| 0;
0x205ef:	jmp 0x20634                         #	  while |(|line_index < limit)
0x205f1:	mov rax, qword ptr [rbp - 0x48]     #	      if (|S|TREQN (string, line + line_index, string_len))
MEMORY OFFSET:     -0x48     -72  >>-64

0x205f5:	movzx edx, byte ptr [rax]           
0x205f8:	movsxd rax, r12d                    
0x205fb:	add rax, r14                        
0x205fe:	movzx eax, byte ptr [rax]           
0x20601:	cmp dl, al                          #	      if |(|STREQN (string, line + line_index, string_len))
0x20603:	jne 0x20630                         
0x20605:	mov eax, dword ptr [rbp - 0x34]     #	      if (|S|TREQN (string, line + line_index, string_len))
MEMORY OFFSET:     -0x34     -52  >>-44

0x20608:	movsxd rdx, eax                     
0x2060b:	movsxd rax, r12d                    
0x2060e:	lea rcx, [r14 + rax]                
0x20612:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x20616:	mov rsi, rcx                        
0x20619:	mov rdi, rax                        
0x2061c:	call 0x4850                         
0x20621:	test eax, eax                       
0x20623:	jne 0x20630                         
0x20625:	mov dword ptr [rip + 0x114f5], ebx  #		  history_offset |=| i;
MEMORY OFFSET:     0x114f5     70901  >>70909

0x2062b:	mov eax, r12d                       #		  return |(|line_index);
0x2062e:	jmp 0x2064e                         
0x20630:	add r12d, 1                         #	      line_index|+|+;
0x20634:	cmp r12d, r15d                      #	  while (line_index |<| limit)
0x20637:	jl 0x205f1                          
0x20639:	test r13d, r13d                     #      |N|EXT_LINE ();
0x2063c:	je 0x20646                          
0x2063e:	sub ebx, 1                          #      |N|EXT_LINE ();
0x20641:	jmp 0x204d8                         
0x20646:	add ebx, 1                          #      |N|EXT_LINE ();
0x20649:	jmp 0x204d8                         #      if |(|(reverse && i < 0) || (!reverse && i == history_length))
0x2064e:	add rsp, 0x28                       #|}|
0x20652:	pop rbx                             
0x20653:	pop r12                             
0x20655:	pop r13                             
0x20657:	pop r14                             
0x20659:	pop r15                             
0x2065b:	pop rbp                             
0x2065c:	ret                                 
0x2065d:	endbr64                             #|{|
0x20661:	push rbp                            
0x20662:	mov rbp, rsp                        
0x20665:	sub rsp, 0x10                       
0x20669:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x2066d:	mov dword ptr [rbp - 0xc], esi      
MEMORY OFFSET:     -0xc     -12  >>-4

0x20670:	mov ecx, dword ptr [rbp - 0xc]      #  return (|h|istory_search_internal (string, direction, NON_ANCHORED_SEARCH));
MEMORY OFFSET:     -0xc     -12  >>-4

0x20673:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x20677:	mov edx, 0                          
0x2067c:	mov esi, ecx                        
0x2067e:	mov rdi, rax                        
0x20681:	mov eax, 0                          
0x20686:	call 0x20465                        
0x2068b:	leave                               #|}|
0x2068c:	ret                                 
0x2068d:	endbr64                             #|{|
0x20691:	push rbp                            
0x20692:	mov rbp, rsp                        
0x20695:	sub rsp, 0x10                       
0x20699:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x2069d:	mov dword ptr [rbp - 0xc], esi      
MEMORY OFFSET:     -0xc     -12  >>-4

0x206a0:	mov ecx, dword ptr [rbp - 0xc]      #  return (|h|istory_search_internal (string, direction, ANCHORED_SEARCH));
MEMORY OFFSET:     -0xc     -12  >>-4

0x206a3:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x206a7:	mov edx, 1                          
0x206ac:	mov esi, ecx                        
0x206ae:	mov rdi, rax                        
0x206b1:	mov eax, 0                          
0x206b6:	call 0x20465                        
0x206bb:	leave                               #|}|
0x206bc:	ret                                 
0x206bd:	endbr64                             #|{|
0x206c1:	push rbp                            
0x206c2:	mov rbp, rsp                        
0x206c5:	push rbx                            
0x206c6:	mov dword ptr [rbp - 0x1c], edi     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x206c9:	mov eax, dword ptr [rip + 0x11455]  #  if (which |>|= history_length || !history_length)
MEMORY OFFSET:     0x11455     70741  >>70749

0x206cf:	cmp dword ptr [rbp - 0x1c], eax     #  if |(|which >= history_length || !history_length)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x206d2:	jge 0x206de                         
0x206d4:	mov eax, dword ptr [rip + 0x1144a]  #  if (which >= history_length || |!|history_length)
MEMORY OFFSET:     0x1144a     70730  >>70738

0x206da:	test eax, eax                       #  if (which >= history_length |||| !history_length)
0x206dc:	jne 0x206e8                         
0x206de:	mov qword ptr [rbp - 0x10], 0       #    return_value |=| (HIST_ENTRY *)NULL;
MEMORY OFFSET:     -0x10     -16  >>-8

0x206e6:	jmp 0x2074f                         
0x206e8:	mov rdx, qword ptr [rip + 0x11421]  #      return_value = the_history|[|which];
MEMORY OFFSET:     0x11421     70689  >>70697

0x206ef:	mov eax, dword ptr [rbp - 0x1c]     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x206f2:	cdqe                                
0x206f4:	shl rax, 3                          
0x206f8:	add rax, rdx                        
0x206fb:	mov rax, qword ptr [rax]            #      return_value |=| the_history[which];
0x206fe:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x20702:	mov ebx, dword ptr [rbp - 0x1c]     #      for (i |=| which; i < history_length; i++)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x20705:	jmp 0x20736                         #      |f|or (i = which; i < history_length; i++)
0x20707:	mov rdx, qword ptr [rip + 0x11402]  #	the_history[i] = the_history|[|i + 1];
MEMORY OFFSET:     0x11402     70658  >>70666

0x2070e:	movsxd rax, ebx                     
0x20711:	add rax, 1                          
0x20715:	shl rax, 3                          
0x20719:	add rax, rdx                        
0x2071c:	mov rcx, qword ptr [rip + 0x113ed]  #	the_history|[|i] = the_history[i + 1];
MEMORY OFFSET:     0x113ed     70637  >>70645

0x20723:	movsxd rdx, ebx                     
0x20726:	shl rdx, 3                          
0x2072a:	add rdx, rcx                        
0x2072d:	mov rax, qword ptr [rax]            #	the_history[i] = the_history|[|i + 1];
0x20730:	mov qword ptr [rdx], rax            #	the_history[i] |=| the_history[i + 1];
0x20733:	add ebx, 1                          #      for (i = which; i < history_length; i|+|+)
0x20736:	mov eax, dword ptr [rip + 0x113e8]  #      for (i = which; i |<| history_length; i++)
MEMORY OFFSET:     0x113e8     70632  >>70640

0x2073c:	cmp ebx, eax                        
0x2073e:	jl 0x20707                          
0x20740:	mov eax, dword ptr [rip + 0x113de]  #      history_length|-|-;
MEMORY OFFSET:     0x113de     70622  >>70630

0x20746:	sub eax, 1                          
0x20749:	mov dword ptr [rip + 0x113d5], eax  
MEMORY OFFSET:     0x113d5     70613  >>70621

0x2074f:	mov rax, qword ptr [rbp - 0x10]     #  return |(|return_value);
MEMORY OFFSET:     -0x10     -16  >>-8

0x20753:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x20757:	leave                               
0x20758:	ret                                 
0x20759:	endbr64                             #|{|
0x2075d:	push rbp                            
0x2075e:	mov rbp, rsp                        
0x20761:	push r12                            
0x20763:	push rbx                            
0x20764:	sub rsp, 0x10                       
0x20768:	mov dword ptr [rbp - 0x14], edi     
MEMORY OFFSET:     -0x14     -20  >>-12

0x2076b:	cmp dword ptr [rbp - 0x14], 0       #  if |(|max < 0)
MEMORY OFFSET:     -0x14     -20  >>-12

0x2076f:	jns 0x20778                         
0x20771:	mov dword ptr [rbp - 0x14], 0       #    max |=| 0;
MEMORY OFFSET:     -0x14     -20  >>-12

0x20778:	mov eax, dword ptr [rip + 0x113a6]  #  if (history_length |>| max)
MEMORY OFFSET:     0x113a6     70566  >>70574

0x2077e:	cmp dword ptr [rbp - 0x14], eax     #  if |(|history_length > max)
MEMORY OFFSET:     -0x14     -20  >>-12

0x20781:	jge 0x20846                         
0x20787:	mov ebx, 0                          #      for (i |=| 0; i < (history_length - max); i++)
0x2078c:	jmp 0x207cc                         #      |f|or (i = 0; i < (history_length - max); i++)
0x2078e:	mov rdx, qword ptr [rip + 0x1137b]  #	  xfree (the_history|[|i]->line);
MEMORY OFFSET:     0x1137b     70523  >>70531

0x20795:	movsxd rax, ebx                     
0x20798:	shl rax, 3                          
0x2079c:	add rax, rdx                        
0x2079f:	mov rax, qword ptr [rax]            
0x207a2:	mov rax, qword ptr [rax]            #	  xfree (the_history[i]|-|>line);
0x207a5:	mov rdi, rax                        #	  |x|free (the_history[i]->line);
0x207a8:	call 0x1eeae                        
0x207ad:	mov rdx, qword ptr [rip + 0x1135c]  #	  xfree (the_history|[|i]);
MEMORY OFFSET:     0x1135c     70492  >>70500

0x207b4:	movsxd rax, ebx                     
0x207b7:	shl rax, 3                          
0x207bb:	add rax, rdx                        
0x207be:	mov rax, qword ptr [rax]            #	  |x|free (the_history[i]);
0x207c1:	mov rdi, rax                        
0x207c4:	call 0x1eeae                        
0x207c9:	add ebx, 1                          #      for (i = 0; i < (history_length - max); i|+|+)
0x207cc:	mov eax, dword ptr [rip + 0x11352]  #      for (i = 0; i < (history_length |-| max); i++)
MEMORY OFFSET:     0x11352     70482  >>70490

0x207d2:	sub eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x207d5:	cmp ebx, eax                        #      for (i = 0; i |<| (history_length - max); i++)
0x207d7:	jl 0x2078e                          
0x207d9:	mov dword ptr [rip + 0x10069], ebx  #      history_base |=| i;
MEMORY OFFSET:     0x10069     65641  >>65649

0x207df:	mov r12d, 0                         #      for (j |=| 0, i = history_length - max; j < max; i++, j++)
0x207e5:	mov eax, dword ptr [rip + 0x11339]  #      for (j = 0, i = history_length |-| max; j < max; i++, j++)
MEMORY OFFSET:     0x11339     70457  >>70465

0x207eb:	sub eax, dword ptr [rbp - 0x14]     #      for (j = 0, i |=| history_length - max; j < max; i++, j++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x207ee:	mov ebx, eax                        
0x207f0:	jmp 0x20821                         #      |f|or (j = 0, i = history_length - max; j < max; i++, j++)
0x207f2:	mov rdx, qword ptr [rip + 0x11317]  #	the_history[j] = the_history|[|i];
MEMORY OFFSET:     0x11317     70423  >>70431

0x207f9:	movsxd rax, ebx                     
0x207fc:	shl rax, 3                          
0x20800:	add rax, rdx                        
0x20803:	mov rcx, qword ptr [rip + 0x11306]  #	the_history|[|j] = the_history[i];
MEMORY OFFSET:     0x11306     70406  >>70414

0x2080a:	movsxd rdx, r12d                    
0x2080d:	shl rdx, 3                          
0x20811:	add rdx, rcx                        
0x20814:	mov rax, qword ptr [rax]            #	the_history[j] = the_history|[|i];
0x20817:	mov qword ptr [rdx], rax            #	the_history[j] |=| the_history[i];
0x2081a:	add ebx, 1                          #      for (j = 0, i = history_length - max; j < max; i|+|+, j++)
0x2081d:	add r12d, 1                         #      for (j = 0, i = history_length - max; j < max; i++, j|+|+)
0x20821:	cmp r12d, dword ptr [rbp - 0x14]    #      for (j = 0, i = history_length - max; j |<| max; i++, j++)
MEMORY OFFSET:     -0x14     -20  >>-12

0x20825:	jl 0x207f2                          
0x20827:	mov rdx, qword ptr [rip + 0x112e2]  #      the_history|[|j] = (HIST_ENTRY *)NULL;
MEMORY OFFSET:     0x112e2     70370  >>70378

0x2082e:	movsxd rax, r12d                    
0x20831:	shl rax, 3                          
0x20835:	add rax, rdx                        
0x20838:	mov qword ptr [rax], 0              #      the_history[j] |=| (HIST_ENTRY *)NULL;
0x2083f:	mov dword ptr [rip + 0x112de], r12d #      history_length |=| j;
MEMORY OFFSET:     0x112de     70366  >>70374

0x20846:	mov dword ptr [rip + 0x112c8], 1    #  history_stifled |=| 1;
MEMORY OFFSET:     0x112c8     70344  >>70352

0x20850:	mov eax, dword ptr [rbp - 0x14]     #  max_input_history |=| max;
MEMORY OFFSET:     -0x14     -20  >>-12

0x20853:	mov dword ptr [rip + 0x112c3], eax  
MEMORY OFFSET:     0x112c3     70339  >>70347

0x20859:	nop                                 #|}|
0x2085a:	add rsp, 0x10                       
0x2085e:	pop rbx                             
0x2085f:	pop r12                             
0x20861:	pop rbp                             
0x20862:	ret                                 
0x20863:	endbr64                             #|{|
0x20867:	push rbp                            
0x20868:	mov rbp, rsp                        
0x2086b:	mov eax, dword ptr [rip + 0x112ab]  #  int |r|esult = max_input_history;
MEMORY OFFSET:     0x112ab     70315  >>70323

0x20871:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x20874:	mov eax, dword ptr [rip + 0x1129e]  #  if (|h|istory_stifled)
MEMORY OFFSET:     0x1129e     70302  >>70310

0x2087a:	test eax, eax                       #  if |(|history_stifled)
0x2087c:	je 0x2088b                          
0x2087e:	neg dword ptr [rbp - 4]             #      result |=| -result;
MEMORY OFFSET:     -0x4     -4  >>4

0x20881:	mov dword ptr [rip + 0x1128d], 0    #      history_stifled |=| 0;
MEMORY OFFSET:     0x1128d     70285  >>70293

0x2088b:	mov eax, dword ptr [rbp - 4]        #  return |(|result);
MEMORY OFFSET:     -0x4     -4  >>4

0x2088e:	pop rbp                             #|}|
0x2088f:	ret                                 
0x20890:	endbr64                             #|{|
0x20894:	push rbp                            
0x20895:	mov rbp, rsp                        
0x20898:	sub rsp, 0x30                       
0x2089c:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x208a0:	cmp qword ptr [rbp - 0x28], 0       #  char *return_val = filename ? savestring (filename) |:| (char *)NULL;
MEMORY OFFSET:     -0x28     -40  >>-32

0x208a5:	je 0x208d3                          
0x208a7:	mov rax, qword ptr [rbp - 0x28]     #  char *return_val = filename ? |s|avestring (filename) : (char *)NULL;
MEMORY OFFSET:     -0x28     -40  >>-32

0x208ab:	mov rdi, rax                        
0x208ae:	call 0x4960                         
0x208b3:	add rax, 1                          
0x208b7:	mov rdi, rax                        
0x208ba:	call 0x24650                        
0x208bf:	mov rdx, rax                        
0x208c2:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x208c6:	mov rsi, rax                        
0x208c9:	mov rdi, rdx                        
0x208cc:	call 0x4870                         
0x208d1:	jmp 0x208d8                         
0x208d3:	mov eax, 0                          #  char *return_val = filename ? savestring (filename) |:| (char *)NULL;
0x208d8:	mov qword ptr [rbp - 0x10], rax     #  char *|r|eturn_val = filename ? savestring (filename) : (char *)NULL;
MEMORY OFFSET:     -0x10     -16  >>-8

0x208dc:	cmp qword ptr [rbp - 0x10], 0       #  if |(|!return_val)
MEMORY OFFSET:     -0x10     -16  >>-8

0x208e1:	jne 0x20973                         
0x208e7:	lea rax, [rip + 0x8c48]             #      home = |g|etenv ("HOME");
MEMORY OFFSET:     0x8c48     35912  >>35920

0x208ee:	mov rdi, rax                        
0x208f1:	call 0x47a0                         
0x208f6:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x208fa:	cmp qword ptr [rbp - 8], 0          #      if |(|!home)
MEMORY OFFSET:     -0x8     -8  >>0

0x208ff:	jne 0x2090c                         
0x20901:	lea rax, [rip + 0x8c33]             #	home |=| ".";
MEMORY OFFSET:     0x8c33     35891  >>35899

0x20908:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x2090c:	mov rax, qword ptr [rbp - 8]        #      home_len = |s|trlen (home);
MEMORY OFFSET:     -0x8     -8  >>0

0x20910:	mov rdi, rax                        
0x20913:	call 0x4960                         
0x20918:	mov dword ptr [rbp - 0x14], eax     #      home_len |=| strlen (home);
MEMORY OFFSET:     -0x14     -20  >>-12

0x2091b:	mov eax, dword ptr [rbp - 0x14]     #      return_val = xmalloc (2 + home_len |+| 8);
MEMORY OFFSET:     -0x14     -20  >>-12

0x2091e:	add eax, 0xa                        
0x20921:	cdqe                                #      return_val = |x|malloc (2 + home_len + 8);
0x20923:	mov rdi, rax                        
0x20926:	call 0x24650                        
0x2092b:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x2092f:	mov rdx, qword ptr [rbp - 8]        #      |s|trcpy (return_val, home);
MEMORY OFFSET:     -0x8     -8  >>0

0x20933:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x20937:	mov rsi, rdx                        
0x2093a:	mov rdi, rax                        
0x2093d:	call 0x4870                         
0x20942:	mov eax, dword ptr [rbp - 0x14]     #      return_val|[|home_len] = '/';
MEMORY OFFSET:     -0x14     -20  >>-12

0x20945:	movsxd rdx, eax                     
0x20948:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x2094c:	add rax, rdx                        
0x2094f:	mov byte ptr [rax], 0x2f            #      return_val[home_len] |=| '/';
0x20952:	mov eax, dword ptr [rbp - 0x14]     #      strcpy (return_val + home_len |+| 1, ".history");
MEMORY OFFSET:     -0x14     -20  >>-12

0x20955:	cdqe                                
0x20957:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x2095b:	mov rax, qword ptr [rbp - 0x10]     #      |s|trcpy (return_val + home_len + 1, ".history");
MEMORY OFFSET:     -0x10     -16  >>-8

0x2095f:	add rax, rdx                        
0x20962:	movabs rcx, 0x79726f747369682e      
0x2096c:	mov qword ptr [rax], rcx            
0x2096f:	mov byte ptr [rax + 8], 0           
MEMORY OFFSET:     0x8     8  >>16

0x20973:	mov rax, qword ptr [rbp - 0x10]     #  return |(|return_val);
MEMORY OFFSET:     -0x10     -16  >>-8

0x20977:	leave                               #|}|
0x20978:	ret                                 
0x20979:	endbr64                             #|{|
0x2097d:	push rbp                            
0x2097e:	mov rbp, rsp                        
0x20981:	sub rsp, 0x10                       
0x20985:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x20989:	mov rax, qword ptr [rbp - 8]        #  return (|r|ead_history_range (filename, 0, -1));
MEMORY OFFSET:     -0x8     -8  >>0

0x2098d:	mov edx, 0xffffffff                 
0x20992:	mov esi, 0                          
0x20997:	mov rdi, rax                        
0x2099a:	mov eax, 0                          
0x2099f:	call 0x209a6                        
0x209a4:	leave                               #|}|
0x209a5:	ret                                 
0x209a6:	endbr64                             #|{|
0x209aa:	push rbp                            
0x209ab:	mov rbp, rsp                        
0x209ae:	push r12                            
0x209b0:	push rbx                            
0x209b1:	sub rsp, 0xd0                       
0x209b8:	mov qword ptr [rbp - 0xd8], rdi     
MEMORY OFFSET:     -0xd8     -216  >>-208

0x209bf:	mov dword ptr [rbp - 0xdc], esi     
MEMORY OFFSET:     -0xdc     -220  >>-212

0x209c5:	mov dword ptr [rbp - 0xe0], edx     
MEMORY OFFSET:     -0xe0     -224  >>-216

0x209cb:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x209d4:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x209d8:	xor eax, eax                        
0x209da:	mov qword ptr [rbp - 0xc0], 0       #  char *input, *|b|uffer = (char *)NULL;
MEMORY OFFSET:     -0xc0     -192  >>-184

0x209e5:	mov rax, qword ptr [rbp - 0xd8]     #  input = |h|istory_filename (filename);
MEMORY OFFSET:     -0xd8     -216  >>-208

0x209ec:	mov rdi, rax                        
0x209ef:	mov eax, 0                          
0x209f4:	call 0x20890                        
0x209f9:	mov qword ptr [rbp - 0xb8], rax     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20a00:	mov rax, qword ptr [rbp - 0xb8]     #  file = |o|pen (input, O_RDONLY, 0666);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20a07:	mov edx, 0x1b6                      
0x20a0c:	mov esi, 0                          
0x20a11:	mov rdi, rax                        
0x20a14:	mov eax, 0                          
0x20a19:	call 0x4d30                         
0x20a1e:	mov dword ptr [rbp - 0xc4], eax     
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20a24:	cmp dword ptr [rbp - 0xc4], 0       #  if |(|(file < 0) || (xfstat (file, &finfo) == -1))
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20a2b:	js 0x20a8a                          
0x20a2d:	lea rdx, [rbp - 0xb0]               #  if ((file < 0) || (|x|fstat (file, &finfo) == -1))
MEMORY OFFSET:     -0xb0     -176  >>-168

0x20a34:	mov eax, dword ptr [rbp - 0xc4]     
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20a3a:	mov rsi, rdx                        
0x20a3d:	mov edi, eax                        
0x20a3f:	call 0x1f092                        
0x20a44:	cmp eax, -1                         #  if ((file < 0) |||| (xfstat (file, &finfo) == -1))
0x20a47:	je 0x20a8a                          
0x20a49:	mov rax, qword ptr [rbp - 0x80]     #  buffer = xmalloc ((int)finfo|.|st_size + 1);
MEMORY OFFSET:     -0x80     -128  >>-120

0x20a4d:	add eax, 1                          #  buffer = xmalloc ((int)finfo.st_size |+| 1);
0x20a50:	cdqe                                #  buffer = |x|malloc ((int)finfo.st_size + 1);
0x20a52:	mov rdi, rax                        
0x20a55:	call 0x24650                        
0x20a5a:	mov qword ptr [rbp - 0xc0], rax     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20a61:	mov rax, qword ptr [rbp - 0x80]     #  if (read (file, buffer, finfo|.|st_size) != finfo.st_size)
MEMORY OFFSET:     -0x80     -128  >>-120

0x20a65:	mov rdx, rax                        #  if (|r|ead (file, buffer, finfo.st_size) != finfo.st_size)
0x20a68:	mov rcx, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20a6f:	mov eax, dword ptr [rbp - 0xc4]     
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20a75:	mov rsi, rcx                        
0x20a78:	mov edi, eax                        
0x20a7a:	call 0x4780                         
0x20a7f:	mov rdx, qword ptr [rbp - 0x80]     #  if (read (file, buffer, finfo.st_size) != finfo|.|st_size)
MEMORY OFFSET:     -0x80     -128  >>-120

0x20a83:	cmp rax, rdx                        #  if |(|read (file, buffer, finfo.st_size) != finfo.st_size)
0x20a86:	je 0x20adf                          
0x20a88:	jmp 0x20a8b                         #  |e|rror_and_exit:
0x20a8a:	nop                                 #    |g|oto error_and_exit;
0x20a8b:	cmp dword ptr [rbp - 0xc4], 0       #      if |(|file >= 0)
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20a92:	js 0x20aa1                          
0x20a94:	mov eax, dword ptr [rbp - 0xc4]     #	|c|lose (file);
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20a9a:	mov edi, eax                        
0x20a9c:	call 0x4a70                         
0x20aa1:	cmp qword ptr [rbp - 0xb8], 0       #      if |(|input)
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20aa9:	je 0x20aba                          
0x20aab:	mov rax, qword ptr [rbp - 0xb8]     #	|x|free (input);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20ab2:	mov rdi, rax                        
0x20ab5:	call 0x1eeae                        
0x20aba:	cmp qword ptr [rbp - 0xc0], 0       #      if |(|buffer)
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20ac2:	je 0x20ad3                          
0x20ac4:	mov rax, qword ptr [rbp - 0xc0]     #	|x|free (buffer);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20acb:	mov rdi, rax                        
0x20ace:	call 0x1eeae                        
0x20ad3:	call 0x4820                         #      return (|e|rrno);
0x20ad8:	mov eax, dword ptr [rax]            
0x20ada:	jmp 0x20c2a                         
0x20adf:	mov eax, dword ptr [rbp - 0xc4]     #  |c|lose (file);
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20ae5:	mov edi, eax                        
0x20ae7:	call 0x4a70                         
0x20aec:	cmp dword ptr [rbp - 0xe0], 0       #  if |(|to < 0)
MEMORY OFFSET:     -0xe0     -224  >>-216

0x20af3:	jns 0x20aff                         
0x20af5:	mov rax, qword ptr [rbp - 0x80]     #    to = finfo|.|st_size;
MEMORY OFFSET:     -0x80     -128  >>-120

0x20af9:	mov dword ptr [rbp - 0xe0], eax     #    to |=| finfo.st_size;
MEMORY OFFSET:     -0xe0     -224  >>-216

0x20aff:	mov dword ptr [rbp - 0xc8], 0       #  line_start = line_end = current_line |=| 0;
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20b09:	mov ebx, dword ptr [rbp - 0xc8]     #  line_start = line_end |=| current_line = 0;
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20b0f:	mov r12d, ebx                       #  line_start |=| line_end = current_line = 0;
0x20b12:	jmp 0x20b57                         #  while |(|line_start < finfo.st_size && current_line < from)
0x20b14:	mov ebx, r12d                       #      for (line_end |=| line_start; line_end < finfo.st_size; line_end++)
0x20b17:	jmp 0x20b4b                         #      |f|or (line_end = line_start; line_end < finfo.st_size; line_end++)
0x20b19:	movsxd rdx, ebx                     #	if (buffer|[|line_end] == '\n')
0x20b1c:	mov rax, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20b23:	add rax, rdx                        
0x20b26:	movzx eax, byte ptr [rax]           
0x20b29:	cmp al, 0xa                         #	if |(|buffer[line_end] == '\n')
0x20b2b:	jne 0x20b48                         
0x20b2d:	add dword ptr [rbp - 0xc8], 1       #	    current_line|+|+;
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20b34:	lea r12d, [rbx + 1]                 #	    line_start |=| line_end + 1;
MEMORY OFFSET:     0x1     1  >>9

0x20b38:	mov eax, dword ptr [rbp - 0xc8]     #	    if |(|current_line == from)
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20b3e:	cmp eax, dword ptr [rbp - 0xdc]     
MEMORY OFFSET:     -0xdc     -220  >>-212

0x20b44:	jne 0x20b48                         
0x20b46:	jmp 0x20b57                         #	      |b|reak;
0x20b48:	add ebx, 1                          #      for (line_end = line_start; line_end < finfo.st_size; line_end|+|+)
0x20b4b:	movsxd rdx, ebx                     #      for (line_end = line_start; line_end |<| finfo.st_size; line_end++)
0x20b4e:	mov rax, qword ptr [rbp - 0x80]     #      for (line_end = line_start; line_end < finfo|.|st_size; line_end++)
MEMORY OFFSET:     -0x80     -128  >>-120

0x20b52:	cmp rdx, rax                        #      for (line_end = line_start; line_end |<| finfo.st_size; line_end++)
0x20b55:	jl 0x20b19                          
0x20b57:	movsxd rdx, r12d                    #  while (line_start |<| finfo.st_size && current_line < from)
0x20b5a:	mov rax, qword ptr [rbp - 0x80]     #  while (line_start < finfo|.|st_size && current_line < from)
MEMORY OFFSET:     -0x80     -128  >>-120

0x20b5e:	cmp rdx, rax                        #  while (line_start < finfo.st_size |&|& current_line < from)
0x20b61:	jge 0x20b71                         
0x20b63:	mov eax, dword ptr [rbp - 0xc8]     #  while (line_start < finfo.st_size |&|& current_line < from)
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20b69:	cmp eax, dword ptr [rbp - 0xdc]     
MEMORY OFFSET:     -0xdc     -220  >>-212

0x20b6f:	jl 0x20b14                          
0x20b71:	mov ebx, r12d                       #  for (line_end |=| line_start; line_end < finfo.st_size; line_end++)
0x20b74:	jmp 0x20be4                         #  |f|or (line_end = line_start; line_end < finfo.st_size; line_end++)
0x20b76:	movsxd rdx, ebx                     #    if (buffer|[|line_end] == '\n')
0x20b79:	mov rax, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20b80:	add rax, rdx                        
0x20b83:	movzx eax, byte ptr [rax]           
0x20b86:	cmp al, 0xa                         #    if |(|buffer[line_end] == '\n')
0x20b88:	jne 0x20be1                         
0x20b8a:	movsxd rdx, ebx                     #	buffer|[|line_end] = '\0';
0x20b8d:	mov rax, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20b94:	add rax, rdx                        
0x20b97:	mov byte ptr [rax], 0               #	buffer[line_end] |=| '\0';
0x20b9a:	movsxd rdx, r12d                    #	if (buffer|[|line_start])
0x20b9d:	mov rax, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20ba4:	add rax, rdx                        
0x20ba7:	movzx eax, byte ptr [rax]           
0x20baa:	test al, al                         #	if |(|buffer[line_start])
0x20bac:	je 0x20bc8                          
0x20bae:	movsxd rdx, r12d                    #	  |a|dd_history (buffer + line_start);
0x20bb1:	mov rax, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20bb8:	add rax, rdx                        
0x20bbb:	mov rdi, rax                        
0x20bbe:	mov eax, 0                          
0x20bc3:	call 0x201b5                        
0x20bc8:	add dword ptr [rbp - 0xc8], 1       #	current_line|+|+;
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20bcf:	mov eax, dword ptr [rbp - 0xc8]     #	if |(|current_line >= to)
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20bd5:	cmp eax, dword ptr [rbp - 0xe0]     
MEMORY OFFSET:     -0xe0     -224  >>-216

0x20bdb:	jge 0x20bf2                         
0x20bdd:	lea r12d, [rbx + 1]                 #	line_start |=| line_end + 1;
MEMORY OFFSET:     0x1     1  >>9

0x20be1:	add ebx, 1                          #  for (line_end = line_start; line_end < finfo.st_size; line_end|+|+)
0x20be4:	movsxd rdx, ebx                     #  for (line_end = line_start; line_end |<| finfo.st_size; line_end++)
0x20be7:	mov rax, qword ptr [rbp - 0x80]     #  for (line_end = line_start; line_end < finfo|.|st_size; line_end++)
MEMORY OFFSET:     -0x80     -128  >>-120

0x20beb:	cmp rdx, rax                        #  for (line_end = line_start; line_end |<| finfo.st_size; line_end++)
0x20bee:	jl 0x20b76                          
0x20bf0:	jmp 0x20bf3                         
0x20bf2:	nop                                 #	  |b|reak;
0x20bf3:	cmp qword ptr [rbp - 0xb8], 0       #  if |(|input)
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20bfb:	je 0x20c0c                          
0x20bfd:	mov rax, qword ptr [rbp - 0xb8]     #    |x|free (input);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20c04:	mov rdi, rax                        
0x20c07:	call 0x1eeae                        
0x20c0c:	cmp qword ptr [rbp - 0xc0], 0       #  if |(|buffer)
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20c14:	je 0x20c25                          
0x20c16:	mov rax, qword ptr [rbp - 0xc0]     #    |x|free (buffer);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20c1d:	mov rdi, rax                        
0x20c20:	call 0x1eeae                        
0x20c25:	mov eax, 0                          #  return |(|0);
0x20c2a:	mov rdx, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x20c2e:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x20c37:	je 0x20c3e                          
0x20c39:	call 0x4980                         #|}|
0x20c3e:	add rsp, 0xd0                       
0x20c45:	pop rbx                             
0x20c46:	pop r12                             
0x20c48:	pop rbp                             
0x20c49:	ret                                 
0x20c4a:	endbr64                             #|{|
0x20c4e:	push rbp                            
0x20c4f:	mov rbp, rsp                        
0x20c52:	push r12                            
0x20c54:	push rbx                            
0x20c55:	sub rsp, 0xd0                       
0x20c5c:	mov qword ptr [rbp - 0xd8], rdi     
MEMORY OFFSET:     -0xd8     -216  >>-208

0x20c63:	mov r12d, esi                       
0x20c66:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x20c6f:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x20c73:	xor eax, eax                        
0x20c75:	mov qword ptr [rbp - 0xc0], 0       #  char *|b|uffer = (char *)NULL, *filename;
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20c80:	mov rax, qword ptr [rbp - 0xd8]     #  filename = |h|istory_filename (fname);
MEMORY OFFSET:     -0xd8     -216  >>-208

0x20c87:	mov rdi, rax                        
0x20c8a:	mov eax, 0                          
0x20c8f:	call 0x20890                        
0x20c94:	mov qword ptr [rbp - 0xb8], rax     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20c9b:	mov rax, qword ptr [rbp - 0xb8]     #  file = |o|pen (filename, O_RDONLY, 0666);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20ca2:	mov edx, 0x1b6                      
0x20ca7:	mov esi, 0                          
0x20cac:	mov rdi, rax                        
0x20caf:	mov eax, 0                          
0x20cb4:	call 0x4d30                         
0x20cb9:	mov dword ptr [rbp - 0xc8], eax     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20cbf:	cmp dword ptr [rbp - 0xc8], -1      #  if |(|file == -1 || xfstat (file, &finfo) == -1)
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20cc6:	je 0x20dfd                          
0x20ccc:	lea rdx, [rbp - 0xb0]               #  if (file == -1 || |x|fstat (file, &finfo) == -1)
MEMORY OFFSET:     -0xb0     -176  >>-168

0x20cd3:	mov eax, dword ptr [rbp - 0xc8]     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20cd9:	mov rsi, rdx                        
0x20cdc:	mov edi, eax                        
0x20cde:	call 0x1f092                        
0x20ce3:	cmp eax, -1                         #  if (file == -1 |||| xfstat (file, &finfo) == -1)
0x20ce6:	je 0x20dfd                          
0x20cec:	mov rax, qword ptr [rbp - 0x80]     #  buffer = xmalloc ((int)finfo|.|st_size + 1);
MEMORY OFFSET:     -0x80     -128  >>-120

0x20cf0:	add eax, 1                          #  buffer = xmalloc ((int)finfo.st_size |+| 1);
0x20cf3:	cdqe                                #  buffer = |x|malloc ((int)finfo.st_size + 1);
0x20cf5:	mov rdi, rax                        
0x20cf8:	call 0x24650                        
0x20cfd:	mov qword ptr [rbp - 0xc0], rax     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20d04:	mov rax, qword ptr [rbp - 0x80]     #  chars_read = read (file, buffer, finfo|.|st_size);
MEMORY OFFSET:     -0x80     -128  >>-120

0x20d08:	mov rdx, rax                        #  chars_read = |r|ead (file, buffer, finfo.st_size);
0x20d0b:	mov rcx, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20d12:	mov eax, dword ptr [rbp - 0xc8]     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20d18:	mov rsi, rcx                        
0x20d1b:	mov edi, eax                        
0x20d1d:	call 0x4780                         
0x20d22:	mov dword ptr [rbp - 0xc4], eax     #  chars_read |=| read (file, buffer, finfo.st_size);
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20d28:	mov eax, dword ptr [rbp - 0xc8]     #  |c|lose (file);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20d2e:	mov edi, eax                        
0x20d30:	call 0x4a70                         
0x20d35:	cmp dword ptr [rbp - 0xc4], 0       #  if |(|chars_read <= 0)
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20d3c:	jle 0x20e00                         
0x20d42:	mov eax, dword ptr [rbp - 0xc4]     #  for (i |=| chars_read - 1; lines && i; i--)
MEMORY OFFSET:     -0xc4     -196  >>-188

0x20d48:	lea ebx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x20d4b:	jmp 0x20d68                         #  |f|or (i = chars_read - 1; lines && i; i--)
0x20d4d:	movsxd rdx, ebx                     #      if (buffer|[|i] == '\n')
0x20d50:	mov rax, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20d57:	add rax, rdx                        
0x20d5a:	movzx eax, byte ptr [rax]           
0x20d5d:	cmp al, 0xa                         #      if |(|buffer[i] == '\n')
0x20d5f:	jne 0x20d65                         
0x20d61:	sub r12d, 1                         #	lines|-|-;
0x20d65:	sub ebx, 1                          #  for (i = chars_read - 1; lines && i; i|-|-)
0x20d68:	test r12d, r12d                     #  for (i = chars_read - 1; lines |&|& i; i--)
0x20d6b:	je 0x20d8f                          
0x20d6d:	test ebx, ebx                       #  for (i = chars_read - 1; lines |&|& i; i--)
0x20d6f:	jne 0x20d4d                         
0x20d71:	jmp 0x20d8f                         #  |f|or ( ; i; i--)
0x20d73:	movsxd rdx, ebx                     #    if (buffer|[|i] == '\n')
0x20d76:	mov rax, qword ptr [rbp - 0xc0]     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20d7d:	add rax, rdx                        
0x20d80:	movzx eax, byte ptr [rax]           
0x20d83:	cmp al, 0xa                         #    if |(|buffer[i] == '\n')
0x20d85:	jne 0x20d8c                         
0x20d87:	add ebx, 1                          #	i|+|+;
0x20d8a:	jmp 0x20d93                         #	|b|reak;
0x20d8c:	sub ebx, 1                          #  for ( ; i; i|-|-)
0x20d8f:	test ebx, ebx                       #  for ( ; |i|; i--)
0x20d91:	jne 0x20d73                         
0x20d93:	test ebx, ebx                       #  if |(|i && ((file = open (filename, O_WRONLY|O_TRUNC, 0666)) != -1))
0x20d95:	je 0x20e03                          
0x20d97:	mov rax, qword ptr [rbp - 0xb8]     #  if (i && ((file = |o|pen (filename, O_WRONLY|O_TRUNC, 0666)) != -1))
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20d9e:	mov edx, 0x1b6                      
0x20da3:	mov esi, 0x201                      
0x20da8:	mov rdi, rax                        
0x20dab:	mov eax, 0                          
0x20db0:	call 0x4d30                         
0x20db5:	mov dword ptr [rbp - 0xc8], eax     
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20dbb:	cmp dword ptr [rbp - 0xc8], -1      #  if (i |&|& ((file = open (filename, O_WRONLY|O_TRUNC, 0666)) != -1))
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20dc2:	je 0x20e03                          
0x20dc4:	mov rax, qword ptr [rbp - 0x80]     #      write (file, buffer + i, finfo|.|st_size - i);
MEMORY OFFSET:     -0x80     -128  >>-120

0x20dc8:	movsxd rdx, ebx                     #      write (file, buffer + i, finfo.st_size |-| i);
0x20dcb:	sub rax, rdx                        
0x20dce:	mov rdx, rax                        #      |w|rite (file, buffer + i, finfo.st_size - i);
0x20dd1:	movsxd rcx, ebx                     
0x20dd4:	mov rax, qword ptr [rbp - 0xc0]     #      write (file, buffer |+| i, finfo.st_size - i);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20ddb:	add rcx, rax                        
0x20dde:	mov eax, dword ptr [rbp - 0xc8]     #      |w|rite (file, buffer + i, finfo.st_size - i);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20de4:	mov rsi, rcx                        
0x20de7:	mov edi, eax                        
0x20de9:	call 0x4770                         
0x20dee:	mov eax, dword ptr [rbp - 0xc8]     #      |c|lose (file);
MEMORY OFFSET:     -0xc8     -200  >>-192

0x20df4:	mov edi, eax                        
0x20df6:	call 0x4a70                         
0x20dfb:	jmp 0x20e04                         
0x20dfd:	nop                                 #    |g|oto truncate_exit;
0x20dfe:	jmp 0x20e04                         
0x20e00:	nop                                 #    |g|oto truncate_exit;
0x20e01:	jmp 0x20e04                         
0x20e03:	nop                                 # |t|runcate_exit:
0x20e04:	cmp qword ptr [rbp - 0xc0], 0       #  if |(|buffer)
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20e0c:	je 0x20e1d                          
0x20e0e:	mov rax, qword ptr [rbp - 0xc0]     #    |x|free (buffer);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x20e15:	mov rdi, rax                        
0x20e18:	call 0x1eeae                        
0x20e1d:	mov rax, qword ptr [rbp - 0xb8]     #  |x|free (filename);
MEMORY OFFSET:     -0xb8     -184  >>-176

0x20e24:	mov rdi, rax                        
0x20e27:	call 0x1eeae                        
0x20e2c:	mov eax, 0                          #  return |0|;
0x20e31:	mov rdx, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x20e35:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x20e3e:	je 0x20e45                          
0x20e40:	call 0x4980                         
0x20e45:	add rsp, 0xd0                       
0x20e4c:	pop rbx                             
0x20e4d:	pop r12                             
0x20e4f:	pop rbp                             
0x20e50:	ret                                 
0x20e51:	endbr64                             #|{|
0x20e55:	push rbp                            
0x20e56:	mov rbp, rsp                        
0x20e59:	push r12                            
0x20e5b:	push rbx                            
0x20e5c:	sub rsp, 0x30                       
0x20e60:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x20e64:	mov dword ptr [rbp - 0x3c], esi     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x20e67:	mov dword ptr [rbp - 0x40], edx     
MEMORY OFFSET:     -0x40     -64  >>-56

0x20e6a:	mov rax, qword ptr [rbp - 0x38]     #  char *output = |h|istory_filename (filename);
MEMORY OFFSET:     -0x38     -56  >>-48

0x20e6e:	mov rdi, rax                        
0x20e71:	mov eax, 0                          
0x20e76:	call 0x20890                        
0x20e7b:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x20e7f:	cmp dword ptr [rbp - 0x40], 0       #  mode = overwrite ? O_WRONLY | O_CREAT | O_TRUNC |:| O_WRONLY | O_APPEND;
MEMORY OFFSET:     -0x40     -64  >>-56

0x20e83:	je 0x20e8c                          
0x20e85:	mov eax, 0x241                      #  mode = overwrite ? O_WRONLY | O_CREAT | O_TRUNC |:| O_WRONLY | O_APPEND;
0x20e8a:	jmp 0x20e91                         
0x20e8c:	mov eax, 0x401                      #  mode = overwrite ? O_WRONLY | O_CREAT | O_TRUNC |:| O_WRONLY | O_APPEND;
0x20e91:	mov dword ptr [rbp - 0x28], eax     #  mode |=| overwrite ? O_WRONLY | O_CREAT | O_TRUNC : O_WRONLY | O_APPEND;
MEMORY OFFSET:     -0x28     -40  >>-32

0x20e94:	mov ecx, dword ptr [rbp - 0x28]     #  if ((file = |o|pen (output, mode, 0666)) == -1)
MEMORY OFFSET:     -0x28     -40  >>-32

0x20e97:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x20e9b:	mov edx, 0x1b6                      
0x20ea0:	mov esi, ecx                        
0x20ea2:	mov rdi, rax                        
0x20ea5:	mov eax, 0                          
0x20eaa:	call 0x4d30                         
0x20eaf:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x20eb2:	cmp dword ptr [rbp - 0x24], -1      #  if |(|(file = open (output, mode, 0666)) == -1)
MEMORY OFFSET:     -0x24     -36  >>-28

0x20eb6:	jne 0x20ed7                         
0x20eb8:	cmp qword ptr [rbp - 0x20], 0       #      if |(|output)
MEMORY OFFSET:     -0x20     -32  >>-24

0x20ebd:	je 0x20ecb                          
0x20ebf:	mov rax, qword ptr [rbp - 0x20]     #	|x|free (output);
MEMORY OFFSET:     -0x20     -32  >>-24

0x20ec3:	mov rdi, rax                        
0x20ec6:	call 0x1eeae                        
0x20ecb:	call 0x4820                         #      return (|e|rrno);
0x20ed0:	mov eax, dword ptr [rax]            
0x20ed2:	jmp 0x21017                         
0x20ed7:	mov eax, dword ptr [rip + 0x10c47]  #  if (nelements |>| history_length)
MEMORY OFFSET:     0x10c47     68679  >>68687

0x20edd:	cmp dword ptr [rbp - 0x3c], eax     #  if |(|nelements > history_length)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x20ee0:	jle 0x20eeb                         
0x20ee2:	mov eax, dword ptr [rip + 0x10c3c]  #    nelements |=| history_length;
MEMORY OFFSET:     0x10c3c     68668  >>68676

0x20ee8:	mov dword ptr [rbp - 0x3c], eax     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x20eeb:	mov r12d, 0                         #    register int |j| = 0;
0x20ef1:	mov dword ptr [rbp - 0x2c], 0       #    int |b|uffer_size = 0;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x20ef8:	mov eax, dword ptr [rip + 0x10c26]  #    for (i = history_length |-| nelements; i < history_length; i++)
MEMORY OFFSET:     0x10c26     68646  >>68654

0x20efe:	sub eax, dword ptr [rbp - 0x3c]     #    for (i |=| history_length - nelements; i < history_length; i++)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x20f01:	mov ebx, eax                        
0x20f03:	jmp 0x20f34                         #    |f|or (i = history_length - nelements; i < history_length; i++)
0x20f05:	mov rdx, qword ptr [rip + 0x10c04]  #      buffer_size += 1 + strlen (the_history|[|i]->line);
MEMORY OFFSET:     0x10c04     68612  >>68620

0x20f0c:	movsxd rax, ebx                     
0x20f0f:	shl rax, 3                          
0x20f13:	add rax, rdx                        
0x20f16:	mov rax, qword ptr [rax]            
0x20f19:	mov rax, qword ptr [rax]            #      buffer_size += 1 + strlen (the_history[i]|-|>line);
0x20f1c:	mov rdi, rax                        #      buffer_size += 1 + |s|trlen (the_history[i]->line);
0x20f1f:	call 0x4960                         
0x20f24:	mov edx, eax                        #      buffer_size |+|= 1 + strlen (the_history[i]->line);
0x20f26:	mov eax, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x20f29:	add eax, edx                        
0x20f2b:	add eax, 1                          
0x20f2e:	mov dword ptr [rbp - 0x2c], eax     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x20f31:	add ebx, 1                          #    for (i = history_length - nelements; i < history_length; i|+|+)
0x20f34:	mov eax, dword ptr [rip + 0x10bea]  #    for (i = history_length - nelements; i |<| history_length; i++)
MEMORY OFFSET:     0x10bea     68586  >>68594

0x20f3a:	cmp ebx, eax                        
0x20f3c:	jl 0x20f05                          
0x20f3e:	mov eax, dword ptr [rbp - 0x2c]     #    buffer = |x|malloc (buffer_size);
MEMORY OFFSET:     -0x2c     -44  >>-36

0x20f41:	cdqe                                
0x20f43:	mov rdi, rax                        
0x20f46:	call 0x24650                        
0x20f4b:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x20f4f:	mov eax, dword ptr [rip + 0x10bcf]  #    for (i = history_length |-| nelements; i < history_length; i++)
MEMORY OFFSET:     0x10bcf     68559  >>68567

0x20f55:	sub eax, dword ptr [rbp - 0x3c]     #    for (i |=| history_length - nelements; i < history_length; i++)
MEMORY OFFSET:     -0x3c     -60  >>-52

0x20f58:	mov ebx, eax                        
0x20f5a:	jmp 0x20fc8                         #    |f|or (i = history_length - nelements; i < history_length; i++)
0x20f5c:	mov rdx, qword ptr [rip + 0x10bad]  #	strcpy (buffer + j, the_history|[|i]->line);
MEMORY OFFSET:     0x10bad     68525  >>68533

0x20f63:	movsxd rax, ebx                     
0x20f66:	shl rax, 3                          
0x20f6a:	add rax, rdx                        
0x20f6d:	mov rax, qword ptr [rax]            
0x20f70:	mov rax, qword ptr [rax]            #	strcpy (buffer + j, the_history[i]|-|>line);
0x20f73:	movsxd rcx, r12d                    #	|s|trcpy (buffer + j, the_history[i]->line);
0x20f76:	mov rdx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x20f7a:	add rdx, rcx                        
0x20f7d:	mov rsi, rax                        
0x20f80:	mov rdi, rdx                        
0x20f83:	call 0x4870                         
0x20f88:	mov rdx, qword ptr [rip + 0x10b81]  #	j += strlen (the_history|[|i]->line);
MEMORY OFFSET:     0x10b81     68481  >>68489

0x20f8f:	movsxd rax, ebx                     
0x20f92:	shl rax, 3                          
0x20f96:	add rax, rdx                        
0x20f99:	mov rax, qword ptr [rax]            
0x20f9c:	mov rax, qword ptr [rax]            #	j += strlen (the_history[i]|-|>line);
0x20f9f:	mov rdi, rax                        #	j += |s|trlen (the_history[i]->line);
0x20fa2:	call 0x4960                         
0x20fa7:	mov edx, eax                        #	j |+|= strlen (the_history[i]->line);
0x20fa9:	mov eax, r12d                       
0x20fac:	add eax, edx                        
0x20fae:	mov r12d, eax                       
0x20fb1:	mov eax, r12d                       #	buffer[j|+|+] = '\n';
0x20fb4:	lea r12d, [rax + 1]                 
MEMORY OFFSET:     0x1     1  >>9

0x20fb8:	movsxd rdx, eax                     
0x20fbb:	mov rax, qword ptr [rbp - 0x18]     #	buffer|[|j++] = '\n';
MEMORY OFFSET:     -0x18     -24  >>-16

0x20fbf:	add rax, rdx                        
0x20fc2:	mov byte ptr [rax], 0xa             #	buffer[j++] |=| '\n';
0x20fc5:	add ebx, 1                          #    for (i = history_length - nelements; i < history_length; i|+|+)
0x20fc8:	mov eax, dword ptr [rip + 0x10b56]  #    for (i = history_length - nelements; i |<| history_length; i++)
MEMORY OFFSET:     0x10b56     68438  >>68446

0x20fce:	cmp ebx, eax                        
0x20fd0:	jl 0x20f5c                          
0x20fd2:	mov eax, dword ptr [rbp - 0x2c]     #    |w|rite (file, buffer, buffer_size);
MEMORY OFFSET:     -0x2c     -44  >>-36

0x20fd5:	movsxd rdx, eax                     
0x20fd8:	mov rcx, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x20fdc:	mov eax, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x20fdf:	mov rsi, rcx                        
0x20fe2:	mov edi, eax                        
0x20fe4:	call 0x4770                         
0x20fe9:	mov rax, qword ptr [rbp - 0x18]     #    |x|free (buffer);
MEMORY OFFSET:     -0x18     -24  >>-16

0x20fed:	mov rdi, rax                        
0x20ff0:	call 0x1eeae                        
0x20ff5:	mov eax, dword ptr [rbp - 0x24]     #  |c|lose (file);
MEMORY OFFSET:     -0x24     -36  >>-28

0x20ff8:	mov edi, eax                        
0x20ffa:	call 0x4a70                         
0x20fff:	cmp qword ptr [rbp - 0x20], 0       #  if |(|output)
MEMORY OFFSET:     -0x20     -32  >>-24

0x21004:	je 0x21012                          
0x21006:	mov rax, qword ptr [rbp - 0x20]     #    |x|free (output);
MEMORY OFFSET:     -0x20     -32  >>-24

0x2100a:	mov rdi, rax                        
0x2100d:	call 0x1eeae                        
0x21012:	mov eax, 0                          #  return |(|0);
0x21017:	add rsp, 0x30                       #|}|
0x2101b:	pop rbx                             
0x2101c:	pop r12                             
0x2101e:	pop rbp                             
0x2101f:	ret                                 
0x21020:	endbr64                             #|{|
0x21024:	push rbp                            
0x21025:	mov rbp, rsp                        
0x21028:	sub rsp, 0x10                       
0x2102c:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x2102f:	mov qword ptr [rbp - 0x10], rsi     
MEMORY OFFSET:     -0x10     -16  >>-8

0x21033:	mov ecx, dword ptr [rbp - 4]        #  return (|h|istory_do_write (filename, nelements, HISTORY_APPEND));
MEMORY OFFSET:     -0x4     -4  >>4

0x21036:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x2103a:	mov edx, 0                          
0x2103f:	mov esi, ecx                        
0x21041:	mov rdi, rax                        
0x21044:	mov eax, 0                          
0x21049:	call 0x20e51                        
0x2104e:	leave                               #|}|
0x2104f:	ret                                 
0x21050:	endbr64                             #|{|
0x21054:	push rbp                            
0x21055:	mov rbp, rsp                        
0x21058:	sub rsp, 0x10                       
0x2105c:	mov qword ptr [rbp - 8], rdi        
MEMORY OFFSET:     -0x8     -8  >>0

0x21060:	mov ecx, dword ptr [rip + 0x10abe]  #  return (|h|istory_do_write (filename, history_length, HISTORY_OVERWRITE));
MEMORY OFFSET:     0x10abe     68286  >>68294

0x21066:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x2106a:	mov edx, 1                          
0x2106f:	mov esi, ecx                        
0x21071:	mov rdi, rax                        
0x21074:	mov eax, 0                          
0x21079:	call 0x20e51                        
0x2107e:	leave                               #|}|
0x2107f:	ret                                 
0x21080:	endbr64                             #|{|
0x21084:	push rbp                            
0x21085:	mov rbp, rsp                        
0x21088:	mov edx, dword ptr [rip + 0x10a92]  #  if ((history_offset |=|= history_length) || !the_history)
MEMORY OFFSET:     0x10a92     68242  >>68250

0x2108e:	mov eax, dword ptr [rip + 0x10a90]  
MEMORY OFFSET:     0x10a90     68240  >>68248

0x21094:	cmp edx, eax                        #  if |(|(history_offset == history_length) || !the_history)
0x21096:	je 0x210a4                          
0x21098:	mov rax, qword ptr [rip + 0x10a71]  #  if ((history_offset == history_length) || |!|the_history)
MEMORY OFFSET:     0x10a71     68209  >>68217

0x2109f:	test rax, rax                       #  if ((history_offset == history_length) |||| !the_history)
0x210a2:	jne 0x210ab                         
0x210a4:	mov eax, 0                          #    return (|(|HIST_ENTRY *)NULL);
0x210a9:	jmp 0x210c4                         
0x210ab:	mov rdx, qword ptr [rip + 0x10a5e]  #    return (the_history|[|history_offset]);
MEMORY OFFSET:     0x10a5e     68190  >>68198

0x210b2:	mov eax, dword ptr [rip + 0x10a68]  
MEMORY OFFSET:     0x10a68     68200  >>68208

0x210b8:	cdqe                                
0x210ba:	shl rax, 3                          
0x210be:	add rax, rdx                        
0x210c1:	mov rax, qword ptr [rax]            
0x210c4:	pop rbp                             #|}|
0x210c5:	ret                                 
0x210c6:	endbr64                             #|{|
0x210ca:	push rbp                            
0x210cb:	mov rbp, rsp                        
0x210ce:	mov eax, dword ptr [rip + 0x10a4c]  #  if (|!|history_offset)
MEMORY OFFSET:     0x10a4c     68172  >>68180

0x210d4:	test eax, eax                       #  if |(|!history_offset)
0x210d6:	jne 0x210df                         
0x210d8:	mov eax, 0                          #    return (|(|HIST_ENTRY *)NULL);
0x210dd:	jmp 0x21107                         
0x210df:	mov rdx, qword ptr [rip + 0x10a2a]  #    return (the_history|[|--history_offset]);
MEMORY OFFSET:     0x10a2a     68138  >>68146

0x210e6:	mov eax, dword ptr [rip + 0x10a34]  #    return (the_history[|-|-history_offset]);
MEMORY OFFSET:     0x10a34     68148  >>68156

0x210ec:	sub eax, 1                          
0x210ef:	mov dword ptr [rip + 0x10a2b], eax  #    return (the_history|[|--history_offset]);
MEMORY OFFSET:     0x10a2b     68139  >>68147

0x210f5:	mov eax, dword ptr [rip + 0x10a25]  #    return (the_history[|-|-history_offset]);
MEMORY OFFSET:     0x10a25     68133  >>68141

0x210fb:	cdqe                                
0x210fd:	shl rax, 3                          #    return (the_history|[|--history_offset]);
0x21101:	add rax, rdx                        
0x21104:	mov rax, qword ptr [rax]            
0x21107:	pop rbp                             #|}|
0x21108:	ret                                 
0x21109:	endbr64                             #|{|
0x2110d:	push rbp                            
0x2110e:	mov rbp, rsp                        
0x21111:	mov edx, dword ptr [rip + 0x10a09]  #  if (history_offset |=|= history_length)
MEMORY OFFSET:     0x10a09     68105  >>68113

0x21117:	mov eax, dword ptr [rip + 0x10a07]  
MEMORY OFFSET:     0x10a07     68103  >>68111

0x2111d:	cmp edx, eax                        #  if |(|history_offset == history_length)
0x2111f:	jne 0x21128                         
0x21121:	mov eax, 0                          #    return (|(|HIST_ENTRY *)NULL);
0x21126:	jmp 0x21150                         
0x21128:	mov rdx, qword ptr [rip + 0x109e1]  #    return (the_history|[|++history_offset]);
MEMORY OFFSET:     0x109e1     68065  >>68073

0x2112f:	mov eax, dword ptr [rip + 0x109eb]  #    return (the_history[|+|+history_offset]);
MEMORY OFFSET:     0x109eb     68075  >>68083

0x21135:	add eax, 1                          
0x21138:	mov dword ptr [rip + 0x109e2], eax  #    return (the_history|[|++history_offset]);
MEMORY OFFSET:     0x109e2     68066  >>68074

0x2113e:	mov eax, dword ptr [rip + 0x109dc]  #    return (the_history[|+|+history_offset]);
MEMORY OFFSET:     0x109dc     68060  >>68068

0x21144:	cdqe                                
0x21146:	shl rax, 3                          #    return (the_history|[|++history_offset]);
0x2114a:	add rax, rdx                        
0x2114d:	mov rax, qword ptr [rax]            
0x21150:	pop rbp                             #|}|
0x21151:	ret                                 
0x21152:	endbr64                             #|{|
0x21156:	push rbp                            
0x21157:	mov rbp, rsp                        
0x2115a:	mov rax, qword ptr [rip + 0x109af]  #  return |(|the_history);
MEMORY OFFSET:     0x109af     68015  >>68023

0x21161:	pop rbp                             #|}|
0x21162:	ret                                 
0x21163:	endbr64                             #|{|
0x21167:	push rbp                            
0x21168:	mov rbp, rsp                        
0x2116b:	mov dword ptr [rbp - 0x14], edi     
MEMORY OFFSET:     -0x14     -20  >>-12

0x2116e:	mov edx, dword ptr [rip + 0xf6d4]   #  int local_index = offset |-| history_base;
MEMORY OFFSET:     0xf6d4     63188  >>63196

0x21174:	mov eax, dword ptr [rbp - 0x14]     #  int |l|ocal_index = offset - history_base;
MEMORY OFFSET:     -0x14     -20  >>-12

0x21177:	sub eax, edx                        
0x21179:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x2117c:	mov eax, dword ptr [rip + 0x109a2]  #  if (local_index |>|= history_length ||
MEMORY OFFSET:     0x109a2     68002  >>68010

0x21182:	cmp dword ptr [rbp - 4], eax        #  if |(|local_index >= history_length ||
MEMORY OFFSET:     -0x4     -4  >>4

0x21185:	jge 0x21199                         
0x21187:	cmp dword ptr [rbp - 4], 0          #  if (local_index >= history_length ||||
MEMORY OFFSET:     -0x4     -4  >>4

0x2118b:	js 0x21199                          
0x2118d:	mov rax, qword ptr [rip + 0x1097c]  #      |!|the_history)
MEMORY OFFSET:     0x1097c     67964  >>67972

0x21194:	test rax, rax                       #      local_index < 0 ||||
0x21197:	jne 0x211a0                         
0x21199:	mov eax, 0                          #    return (|(|HIST_ENTRY *)NULL);
0x2119e:	jmp 0x211b6                         
0x211a0:	mov rdx, qword ptr [rip + 0x10969]  #  return (the_history|[|local_index]);
MEMORY OFFSET:     0x10969     67945  >>67953

0x211a7:	mov eax, dword ptr [rbp - 4]        
MEMORY OFFSET:     -0x4     -4  >>4

0x211aa:	cdqe                                
0x211ac:	shl rax, 3                          
0x211b0:	add rax, rdx                        
0x211b3:	mov rax, qword ptr [rax]            
0x211b6:	pop rbp                             #|}|
0x211b7:	ret                                 
0x211b8:	endbr64                             #|{|
0x211bc:	push rbp                            
0x211bd:	mov rbp, rsp                        
0x211c0:	sub rsp, 0x20                       
0x211c4:	mov qword ptr [rbp - 0x18], rdi     
MEMORY OFFSET:     -0x18     -24  >>-16

0x211c8:	mov dword ptr [rbp - 0x1c], esi     
MEMORY OFFSET:     -0x1c     -28  >>-20

0x211cb:	mov dword ptr [rbp - 0x20], edx     
MEMORY OFFSET:     -0x20     -32  >>-24

0x211ce:	mov eax, 0                          #  int ret, old = |w|here_history ();
0x211d3:	call 0x20455                        
0x211d8:	mov dword ptr [rbp - 8], eax        
MEMORY OFFSET:     -0x8     -8  >>0

0x211db:	mov eax, dword ptr [rbp - 0x20]     #  |h|istory_set_pos (pos);
MEMORY OFFSET:     -0x20     -32  >>-24

0x211de:	mov edi, eax                        
0x211e0:	mov eax, 0                          
0x211e5:	call 0x2123c                        
0x211ea:	mov edx, dword ptr [rbp - 0x1c]     #  if (|h|istory_search (string, dir) == -1)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x211ed:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x211f1:	mov esi, edx                        
0x211f3:	mov rdi, rax                        
0x211f6:	mov eax, 0                          
0x211fb:	call 0x2065d                        
0x21200:	cmp eax, -1                         #  if |(|history_search (string, dir) == -1)
0x21203:	jne 0x2121b                         
0x21205:	mov eax, dword ptr [rbp - 8]        #      |h|istory_set_pos (old);
MEMORY OFFSET:     -0x8     -8  >>0

0x21208:	mov edi, eax                        
0x2120a:	mov eax, 0                          
0x2120f:	call 0x2123c                        
0x21214:	mov eax, 0xffffffff                 #      return |(|-1);
0x21219:	jmp 0x2123a                         
0x2121b:	mov eax, 0                          #  ret = |w|here_history ();
0x21220:	call 0x20455                        
0x21225:	mov dword ptr [rbp - 4], eax        
MEMORY OFFSET:     -0x4     -4  >>4

0x21228:	mov eax, dword ptr [rbp - 8]        #  |h|istory_set_pos (old);
MEMORY OFFSET:     -0x8     -8  >>0

0x2122b:	mov edi, eax                        
0x2122d:	mov eax, 0                          
0x21232:	call 0x2123c                        
0x21237:	mov eax, dword ptr [rbp - 4]        #  return |r|et;
MEMORY OFFSET:     -0x4     -4  >>4

0x2123a:	leave                               #|}|
0x2123b:	ret                                 
0x2123c:	endbr64                             #|{|
0x21240:	push rbp                            
0x21241:	mov rbp, rsp                        
0x21244:	mov dword ptr [rbp - 4], edi        
MEMORY OFFSET:     -0x4     -4  >>4

0x21247:	mov eax, dword ptr [rip + 0x108d7]  #  if (pos |>| history_length || pos < 0 || !the_history)
MEMORY OFFSET:     0x108d7     67799  >>67807

0x2124d:	cmp dword ptr [rbp - 4], eax        #  if |(|pos > history_length || pos < 0 || !the_history)
MEMORY OFFSET:     -0x4     -4  >>4

0x21250:	jg 0x21264                          
0x21252:	cmp dword ptr [rbp - 4], 0          #  if (pos > history_length |||| pos < 0 || !the_history)
MEMORY OFFSET:     -0x4     -4  >>4

0x21256:	js 0x21264                          
0x21258:	mov rax, qword ptr [rip + 0x108b1]  #  if (pos > history_length || pos < 0 || |!|the_history)
MEMORY OFFSET:     0x108b1     67761  >>67769

0x2125f:	test rax, rax                       #  if (pos > history_length || pos < 0 |||| !the_history)
0x21262:	jne 0x2126b                         
0x21264:	mov eax, 0                          #    return |(|0);
0x21269:	jmp 0x21279                         
0x2126b:	mov eax, dword ptr [rbp - 4]        #  history_offset |=| pos;
MEMORY OFFSET:     -0x4     -4  >>4

0x2126e:	mov dword ptr [rip + 0x108ac], eax  
MEMORY OFFSET:     0x108ac     67756  >>67764

0x21274:	mov eax, 1                          #  return |(|1);
0x21279:	pop rbp                             #|}|
0x2127a:	ret                                 
0x2127b:	endbr64                             #|{|
0x2127f:	push rbp                            
0x21280:	mov rbp, rsp                        
0x21283:	push r12                            
0x21285:	push rbx                            
0x21286:	sub rsp, 0x50                       
0x2128a:	mov qword ptr [rbp - 0x48], rdi     
MEMORY OFFSET:     -0x48     -72  >>-64

0x2128e:	mov qword ptr [rbp - 0x50], rsi     
MEMORY OFFSET:     -0x50     -80  >>-72

0x21292:	mov dword ptr [rbp - 0x54], edx     
MEMORY OFFSET:     -0x54     -84  >>-76

0x21295:	mov rax, qword ptr [rbp - 0x50]     #  register int |i| = *caller_index;
MEMORY OFFSET:     -0x50     -80  >>-72

0x21299:	mov ebx, dword ptr [rax]            
0x2129b:	mov dword ptr [rbp - 0x30], 1       #  int which, |s|ign = 1;
MEMORY OFFSET:     -0x30     -48  >>-40

0x212a2:	mov dword ptr [rbp - 0x2c], 0       #  int local_index, search_mode, |s|ubstring_okay = 0;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x212a9:	movsxd rdx, ebx                     #  if (string|[|i] != history_expansion_char)
0x212ac:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x212b0:	add rax, rdx                        
0x212b3:	movzx edx, byte ptr [rax]           
0x212b6:	movzx eax, byte ptr [rip + 0xf57b]  #  if (string[i] |!|= history_expansion_char)
MEMORY OFFSET:     0xf57b     62843  >>62851

0x212bd:	cmp dl, al                          #  if |(|string[i] != history_expansion_char)
0x212bf:	je 0x212cb                          
0x212c1:	mov eax, 0                          #    return (|(|char *)NULL);
0x212c6:	jmp 0x21605                         
0x212cb:	add ebx, 1                          #  i|+|+;
0x212ce:	movsxd rdx, ebx                     #  if (string|[|i] == history_expansion_char)
0x212d1:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x212d5:	add rax, rdx                        
0x212d8:	movzx edx, byte ptr [rax]           
0x212db:	movzx eax, byte ptr [rip + 0xf556]  #  if (string[i] |=|= history_expansion_char)
MEMORY OFFSET:     0xf556     62806  >>62814

0x212e2:	cmp dl, al                          #  if |(|string[i] == history_expansion_char)
0x212e4:	jne 0x21333                         
0x212e6:	add ebx, 1                          #      i|+|+;
0x212e9:	mov eax, dword ptr [rip + 0x10835]  #      which = history_base + (history_length |-| 1);
MEMORY OFFSET:     0x10835     67637  >>67645

0x212ef:	lea edx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x212f2:	mov eax, dword ptr [rip + 0xf550]   #      which = history_base |+| (history_length - 1);
MEMORY OFFSET:     0xf550     62800  >>62808

0x212f8:	add eax, edx                        #      which |=| history_base + (history_length - 1);
0x212fa:	mov dword ptr [rbp - 0x34], eax     
MEMORY OFFSET:     -0x34     -52  >>-44

0x212fd:	mov rax, qword ptr [rbp - 0x50]     #      *caller_index |=| i;
MEMORY OFFSET:     -0x50     -80  >>-72

0x21301:	mov dword ptr [rax], ebx            
0x21303:	mov eax, dword ptr [rbp - 0x34]     #      |R|ETURN_ENTRY (entry, which);
MEMORY OFFSET:     -0x34     -52  >>-44

0x21306:	mov edi, eax                        
0x21308:	mov eax, 0                          
0x2130d:	call 0x21163                        
0x21312:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x21316:	cmp qword ptr [rbp - 0x20], 0       
MEMORY OFFSET:     -0x20     -32  >>-24

0x2131b:	je 0x21329                          
0x2131d:	mov rax, qword ptr [rbp - 0x20]     #      |R|ETURN_ENTRY (entry, which);
MEMORY OFFSET:     -0x20     -32  >>-24

0x21321:	mov rax, qword ptr [rax]            
0x21324:	jmp 0x21605                         
0x21329:	mov eax, 0                          #      |R|ETURN_ENTRY (entry, which);
0x2132e:	jmp 0x21605                         
0x21333:	movsxd rdx, ebx                     #  if (string|[|i] == '-')
0x21336:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x2133a:	add rax, rdx                        
0x2133d:	movzx eax, byte ptr [rax]           
0x21340:	cmp al, 0x2d                        #  if |(|string[i] == '-')
0x21342:	jne 0x2134e                         
0x21344:	mov dword ptr [rbp - 0x30], 0xffffffff#      sign |=| -1;
MEMORY OFFSET:     -0x30     -48  >>-40

0x2134b:	add ebx, 1                          #      i|+|+;
0x2134e:	movsxd rdx, ebx                     #  if (|d|igit (string[i]))
0x21351:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x21355:	add rax, rdx                        
0x21358:	movzx eax, byte ptr [rax]           
0x2135b:	cmp al, 0x2f                        #  if |(|digit (string[i]))
0x2135d:	jle 0x2141c                         
0x21363:	movsxd rdx, ebx                     #  if (|d|igit (string[i]))
0x21366:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x2136a:	add rax, rdx                        
0x2136d:	movzx eax, byte ptr [rax]           
0x21370:	cmp al, 0x39                        
0x21372:	jg 0x2141c                          
0x21378:	mov dword ptr [rbp - 0x34], 0       #      for (which |=| 0; digit (string[i]); i++)
MEMORY OFFSET:     -0x34     -52  >>-44

0x2137f:	jmp 0x213aa                         #      |f|or (which = 0; digit (string[i]); i++)
0x21381:	mov edx, dword ptr [rbp - 0x34]     #	which = (which |*| 10) + digit_value (string[i]);
MEMORY OFFSET:     -0x34     -52  >>-44

0x21384:	mov eax, edx                        
0x21386:	shl eax, 2                          
0x21389:	add eax, edx                        
0x2138b:	add eax, eax                        
0x2138d:	mov ecx, eax                        
0x2138f:	movsxd rdx, ebx                     #	which = (which * 10) + |d|igit_value (string[i]);
0x21392:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x21396:	add rax, rdx                        
0x21399:	movzx eax, byte ptr [rax]           
0x2139c:	movsx eax, al                       
0x2139f:	sub eax, 0x30                       
0x213a2:	add eax, ecx                        #	which |=| (which * 10) + digit_value (string[i]);
0x213a4:	mov dword ptr [rbp - 0x34], eax     
MEMORY OFFSET:     -0x34     -52  >>-44

0x213a7:	add ebx, 1                          #      for (which = 0; digit (string[i]); i|+|+)
0x213aa:	movsxd rdx, ebx                     #      for (which = 0; |d|igit (string[i]); i++)
0x213ad:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x213b1:	add rax, rdx                        
0x213b4:	movzx eax, byte ptr [rax]           
0x213b7:	cmp al, 0x2f                        
0x213b9:	jle 0x213cc                         
0x213bb:	movsxd rdx, ebx                     #      for (which = 0; |d|igit (string[i]); i++)
0x213be:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x213c2:	add rax, rdx                        
0x213c5:	movzx eax, byte ptr [rax]           
0x213c8:	cmp al, 0x39                        
0x213ca:	jle 0x21381                         
0x213cc:	mov rax, qword ptr [rbp - 0x50]     #      *caller_index |=| i;
MEMORY OFFSET:     -0x50     -80  >>-72

0x213d0:	mov dword ptr [rax], ebx            
0x213d2:	cmp dword ptr [rbp - 0x30], 0       #      if |(|sign < 0)
MEMORY OFFSET:     -0x30     -48  >>-40

0x213d6:	jns 0x213ec                         
0x213d8:	mov edx, dword ptr [rip + 0x10746]  #	which = (history_length |+| history_base) - which;
MEMORY OFFSET:     0x10746     67398  >>67406

0x213de:	mov eax, dword ptr [rip + 0xf464]   
MEMORY OFFSET:     0xf464     62564  >>62572

0x213e4:	add eax, edx                        
0x213e6:	sub eax, dword ptr [rbp - 0x34]     #	which |=| (history_length + history_base) - which;
MEMORY OFFSET:     -0x34     -52  >>-44

0x213e9:	mov dword ptr [rbp - 0x34], eax     
MEMORY OFFSET:     -0x34     -52  >>-44

0x213ec:	mov eax, dword ptr [rbp - 0x34]     #      |R|ETURN_ENTRY (entry, which);
MEMORY OFFSET:     -0x34     -52  >>-44

0x213ef:	mov edi, eax                        
0x213f1:	mov eax, 0                          
0x213f6:	call 0x21163                        
0x213fb:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x213ff:	cmp qword ptr [rbp - 0x20], 0       
MEMORY OFFSET:     -0x20     -32  >>-24

0x21404:	je 0x21412                          
0x21406:	mov rax, qword ptr [rbp - 0x20]     #      |R|ETURN_ENTRY (entry, which);
MEMORY OFFSET:     -0x20     -32  >>-24

0x2140a:	mov rax, qword ptr [rax]            
0x2140d:	jmp 0x21605                         
0x21412:	mov eax, 0                          #      |R|ETURN_ENTRY (entry, which);
0x21417:	jmp 0x21605                         
0x2141c:	movsxd rdx, ebx                     #  if (string|[|i] == '?')
0x2141f:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x21423:	add rax, rdx                        
0x21426:	movzx eax, byte ptr [rax]           
0x21429:	cmp al, 0x3f                        #  if |(|string[i] == '?')
0x2142b:	jne 0x21434                         
0x2142d:	add dword ptr [rbp - 0x2c], 1       #      substring_okay|+|+;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x21431:	add ebx, 1                          #      i|+|+;
0x21434:	mov dword ptr [rbp - 0x28], ebx     #  for (local_index |=| i; (c = string[i]); i++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x21437:	jmp 0x21491                         #  |f|or (local_index = i; (c = string[i]); i++)
0x21439:	cmp dword ptr [rbp - 0x2c], 0       #    if |(|(!substring_okay && (whitespace (c) || c == ':' ||
MEMORY OFFSET:     -0x2c     -44  >>-36

0x2143d:	jne 0x21466                         
0x2143f:	cmp r12b, 0x20                      #    if ((!substring_okay |&|& (whitespace (c) || c == ':' ||
0x21443:	je 0x214a4                          
0x21445:	cmp r12b, 9                         #    if ((!substring_okay && (|w|hitespace (c) || c == ':' ||
0x21449:	je 0x214a4                          
0x2144b:	cmp r12b, 0x3a                      #    if ((!substring_okay && (whitespace (c) |||| c == ':' ||
0x2144f:	je 0x214a4                          
0x21451:	movsxd rdx, ebx                     #	  string|[|i] == delimiting_quote)) ||
0x21454:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x21458:	add rax, rdx                        
0x2145b:	movzx eax, byte ptr [rax]           
0x2145e:	movsx eax, al                       
0x21461:	cmp dword ptr [rbp - 0x54], eax     #    if ((!substring_okay && (whitespace (c) || c == ':' ||||
MEMORY OFFSET:     -0x54     -84  >>-76

0x21464:	je 0x214a4                          
0x21466:	movsxd rdx, ebx                     #	string|[|i] == '\n' ||
0x21469:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x2146d:	add rax, rdx                        
0x21470:	movzx eax, byte ptr [rax]           
0x21473:	cmp al, 0xa                         #	  string[i] == delimiting_quote)) ||||
0x21475:	je 0x214a4                          
0x21477:	cmp dword ptr [rbp - 0x2c], 0       #	string[i] == '\n' ||||
MEMORY OFFSET:     -0x2c     -44  >>-36

0x2147b:	je 0x2148e                          
0x2147d:	movsxd rdx, ebx                     #	(substring_okay && string|[|i] == '?'))
0x21480:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x21484:	add rax, rdx                        
0x21487:	movzx eax, byte ptr [rax]           
0x2148a:	cmp al, 0x3f                        #	(substring_okay |&|& string[i] == '?'))
0x2148c:	je 0x214a4                          
0x2148e:	add ebx, 1                          #  for (local_index = i; (c = string[i]); i|+|+)
0x21491:	movsxd rdx, ebx                     #  for (local_index = i; (c = string|[|i]); i++)
0x21494:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x21498:	add rax, rdx                        
0x2149b:	movzx r12d, byte ptr [rax]          #  for (local_index = i; (c |=| string[i]); i++)
0x2149f:	test r12b, r12b                     #  for (local_index = i; |(|c = string[i]); i++)
0x214a2:	jne 0x21439                         
0x214a4:	mov eax, ebx                        #  temp = xmalloc (1 + (i |-| local_index));
0x214a6:	sub eax, dword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x214a9:	add eax, 1                          #  temp = xmalloc (1 |+| (i - local_index));
0x214ac:	cdqe                                #  temp = |x|malloc (1 + (i - local_index));
0x214ae:	mov rdi, rax                        
0x214b1:	call 0x24650                        
0x214b6:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x214ba:	mov eax, ebx                        #  strncpy (temp, &string[local_index], (i |-| local_index));
0x214bc:	sub eax, dword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x214bf:	movsxd rdx, eax                     #  |s|trncpy (temp, &string[local_index], (i - local_index));
0x214c2:	mov eax, dword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x214c5:	movsxd rcx, eax                     
0x214c8:	mov rax, qword ptr [rbp - 0x48]     #  strncpy (temp, |&|string[local_index], (i - local_index));
MEMORY OFFSET:     -0x48     -72  >>-64

0x214cc:	add rcx, rax                        
0x214cf:	mov rax, qword ptr [rbp - 0x18]     #  |s|trncpy (temp, &string[local_index], (i - local_index));
MEMORY OFFSET:     -0x18     -24  >>-16

0x214d3:	mov rsi, rcx                        
0x214d6:	mov rdi, rax                        
0x214d9:	call 0x4840                         
0x214de:	mov eax, ebx                        #  temp[i |-| local_index] = '\0';
0x214e0:	sub eax, dword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x214e3:	movsxd rdx, eax                     
0x214e6:	mov rax, qword ptr [rbp - 0x18]     #  temp|[|i - local_index] = '\0';
MEMORY OFFSET:     -0x18     -24  >>-16

0x214ea:	add rax, rdx                        
0x214ed:	mov byte ptr [rax], 0               #  temp[i - local_index] |=| '\0';
0x214f0:	cmp dword ptr [rbp - 0x2c], 0       #  if |(|substring_okay && string[i] == '?')
MEMORY OFFSET:     -0x2c     -44  >>-36

0x214f4:	je 0x2150a                          
0x214f6:	movsxd rdx, ebx                     #  if (substring_okay && string|[|i] == '?')
0x214f9:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x214fd:	add rax, rdx                        
0x21500:	movzx eax, byte ptr [rax]           
0x21503:	cmp al, 0x3f                        #  if (substring_okay |&|& string[i] == '?')
0x21505:	jne 0x2150a                         
0x21507:	add ebx, 1                          #    i|+|+;
0x2150a:	mov rax, qword ptr [rbp - 0x50]     #  *caller_index |=| i;
MEMORY OFFSET:     -0x50     -80  >>-72

0x2150e:	mov dword ptr [rax], ebx            
0x21510:	cmp dword ptr [rbp - 0x2c], 0       #  search_mode = substring_okay ? NON_ANCHORED_SEARCH |:| ANCHORED_SEARCH;
MEMORY OFFSET:     -0x2c     -44  >>-36

0x21514:	sete al                             
0x21517:	movzx eax, al                       #  search_mode |=| substring_okay ? NON_ANCHORED_SEARCH : ANCHORED_SEARCH;
0x2151a:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x2151d:	mov edx, dword ptr [rbp - 0x24]     #      local_index = |h|istory_search_internal (temp, -1, search_mode);
MEMORY OFFSET:     -0x24     -36  >>-28

0x21520:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x21524:	mov esi, 0xffffffff                 
0x21529:	mov rdi, rax                        
0x2152c:	mov eax, 0                          
0x21531:	call 0x20465                        
0x21536:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x21539:	cmp dword ptr [rbp - 0x28], 0       #      if |(|local_index < 0)
MEMORY OFFSET:     -0x28     -40  >>-32

0x2153d:	jns 0x21561                         
0x2153f:	mov eax, dword ptr [rip + 0x105df]  #	|F|AIL_SEARCH ();
MEMORY OFFSET:     0x105df     67039  >>67047

0x21545:	mov dword ptr [rip + 0x105d5], eax  
MEMORY OFFSET:     0x105d5     67029  >>67037

0x2154b:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x2154f:	mov rdi, rax                        
0x21552:	call 0x1eeae                        
0x21557:	mov eax, 0                          
0x2155c:	jmp 0x21605                         
0x21561:	cmp dword ptr [rbp - 0x28], 0       #      if |(|local_index == 0 || substring_okay)
MEMORY OFFSET:     -0x28     -40  >>-32

0x21565:	je 0x2156d                          
0x21567:	cmp dword ptr [rbp - 0x2c], 0       #      if (local_index == 0 |||| substring_okay)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x2156b:	je 0x215ca                          
0x2156d:	mov eax, 0                          #	  entry = |c|urrent_history ();
0x21572:	call 0x21080                        
0x21577:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x2157b:	mov eax, dword ptr [rip + 0x105a3]  #	  history_offset |=| history_length;
MEMORY OFFSET:     0x105a3     66979  >>66987

0x21581:	mov dword ptr [rip + 0x10599], eax  
MEMORY OFFSET:     0x10599     66969  >>66977

0x21587:	cmp dword ptr [rbp - 0x2c], 0       #	  if |(|substring_okay)
MEMORY OFFSET:     -0x2c     -44  >>-36

0x2158b:	je 0x215b5                          
0x2158d:	mov rax, qword ptr [rip + 0x1059c]  #	      if (|s|earch_string)
MEMORY OFFSET:     0x1059c     66972  >>66980

0x21594:	test rax, rax                       #	      if |(|search_string)
0x21597:	je 0x215a8                          
0x21599:	mov rax, qword ptr [rip + 0x10590]  #		|x|free (search_string);
MEMORY OFFSET:     0x10590     66960  >>66968

0x215a0:	mov rdi, rax                        
0x215a3:	call 0x1eeae                        
0x215a8:	mov rax, qword ptr [rbp - 0x18]     #	      search_string |=| temp;
MEMORY OFFSET:     -0x18     -24  >>-16

0x215ac:	mov qword ptr [rip + 0x1057d], rax  
MEMORY OFFSET:     0x1057d     66941  >>66949

0x215b3:	jmp 0x215c1                         
0x215b5:	mov rax, qword ptr [rbp - 0x18]     #	    |x|free (temp);
MEMORY OFFSET:     -0x18     -24  >>-16

0x215b9:	mov rdi, rax                        
0x215bc:	call 0x1eeae                        
0x215c1:	mov rax, qword ptr [rbp - 0x20]     #	  return (entry|-|>line);
MEMORY OFFSET:     -0x20     -32  >>-24

0x215c5:	mov rax, qword ptr [rax]            
0x215c8:	jmp 0x21605                         
0x215ca:	mov eax, dword ptr [rip + 0x10550]  #      if (|h|istory_offset)
MEMORY OFFSET:     0x10550     66896  >>66904

0x215d0:	test eax, eax                       #      if |(|history_offset)
0x215d2:	je 0x215e8                          
0x215d4:	mov eax, dword ptr [rip + 0x10546]  #	history_offset|-|-;
MEMORY OFFSET:     0x10546     66886  >>66894

0x215da:	sub eax, 1                          
0x215dd:	mov dword ptr [rip + 0x1053d], eax  
MEMORY OFFSET:     0x1053d     66877  >>66885

0x215e3:	jmp 0x2151d                         
0x215e8:	mov eax, dword ptr [rip + 0x10536]  #	|F|AIL_SEARCH ();
MEMORY OFFSET:     0x10536     66870  >>66878

0x215ee:	mov dword ptr [rip + 0x1052c], eax  
MEMORY OFFSET:     0x1052c     66860  >>66868

0x215f4:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x215f8:	mov rdi, rax                        
0x215fb:	call 0x1eeae                        
0x21600:	mov eax, 0                          
0x21605:	add rsp, 0x50                       #|}|
0x21609:	pop rbx                             
0x2160a:	pop r12                             
0x2160c:	pop rbp                             
0x2160d:	ret                                 
0x2160e:	endbr64                             #|{|
0x21612:	push rbp                            
0x21613:	mov rbp, rsp                        
0x21616:	sub rsp, 0x40                       
0x2161a:	mov qword ptr [rbp - 0x28], rdi     
MEMORY OFFSET:     -0x28     -40  >>-32

0x2161e:	mov dword ptr [rbp - 0x2c], esi     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x21621:	mov dword ptr [rbp - 0x30], edx     
MEMORY OFFSET:     -0x30     -48  >>-40

0x21624:	mov dword ptr [rbp - 0x34], ecx     
MEMORY OFFSET:     -0x34     -52  >>-44

0x21627:	mov eax, dword ptr [rbp - 0x30]     #  ll |=| current - start;
MEMORY OFFSET:     -0x30     -48  >>-40

0x2162a:	sub eax, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x2162d:	mov dword ptr [rbp - 0x14], eax     
MEMORY OFFSET:     -0x14     -20  >>-12

0x21630:	cmp dword ptr [rbp - 0x34], 3       #  |s|witch (errtype)
MEMORY OFFSET:     -0x34     -52  >>-44

0x21634:	je 0x21692                          
0x21636:	cmp dword ptr [rbp - 0x34], 3       
MEMORY OFFSET:     -0x34     -52  >>-44

0x2163a:	jg 0x216a6                          
0x2163c:	cmp dword ptr [rbp - 0x34], 2       
MEMORY OFFSET:     -0x34     -52  >>-44

0x21640:	je 0x2167e                          
0x21642:	cmp dword ptr [rbp - 0x34], 2       
MEMORY OFFSET:     -0x34     -52  >>-44

0x21646:	jg 0x216a6                          
0x21648:	cmp dword ptr [rbp - 0x34], 0       
MEMORY OFFSET:     -0x34     -52  >>-44

0x2164c:	je 0x21656                          
0x2164e:	cmp dword ptr [rbp - 0x34], 1       
MEMORY OFFSET:     -0x34     -52  >>-44

0x21652:	je 0x2166a                          
0x21654:	jmp 0x216a6                         
0x21656:	lea rax, [rip + 0x7ee0]             #      emsg |=| "event not found";
MEMORY OFFSET:     0x7ee0     32480  >>32488

0x2165d:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x21661:	mov dword ptr [rbp - 0x18], 0xf     #      elen |=| 15;
MEMORY OFFSET:     -0x18     -24  >>-16

0x21668:	jmp 0x216b9                         #      |b|reak;
0x2166a:	lea rax, [rip + 0x7edc]             #      emsg |=| "bad word specifier";
MEMORY OFFSET:     0x7edc     32476  >>32484

0x21671:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x21675:	mov dword ptr [rbp - 0x18], 0x12    #      elen |=| 18;
MEMORY OFFSET:     -0x18     -24  >>-16

0x2167c:	jmp 0x216b9                         #      |b|reak;
0x2167e:	lea rax, [rip + 0x7edb]             #      emsg |=| "substitution failed";
MEMORY OFFSET:     0x7edb     32475  >>32483

0x21685:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x21689:	mov dword ptr [rbp - 0x18], 0x13    #      elen |=| 19;
MEMORY OFFSET:     -0x18     -24  >>-16

0x21690:	jmp 0x216b9                         #      |b|reak;
0x21692:	lea rax, [rip + 0x7edb]             #      emsg |=| "unrecognized history modifier";
MEMORY OFFSET:     0x7edb     32475  >>32483

0x21699:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x2169d:	mov dword ptr [rbp - 0x18], 0x1d    #      elen |=| 29;
MEMORY OFFSET:     -0x18     -24  >>-16

0x216a4:	jmp 0x216b9                         #      |b|reak;
0x216a6:	lea rax, [rip + 0x7ee5]             #      emsg |=| "unknown expansion error";
MEMORY OFFSET:     0x7ee5     32485  >>32493

0x216ad:	mov qword ptr [rbp - 0x10], rax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x216b1:	mov dword ptr [rbp - 0x18], 0x17    #      elen |=| 23;
MEMORY OFFSET:     -0x18     -24  >>-16

0x216b8:	nop                                 #      |b|reak;
0x216b9:	mov edx, dword ptr [rbp - 0x14]     #  temp = xmalloc (ll |+| elen + 3);
MEMORY OFFSET:     -0x14     -20  >>-12

0x216bc:	mov eax, dword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x216bf:	add eax, edx                        
0x216c1:	add eax, 3                          #  temp = xmalloc (ll + elen |+| 3);
0x216c4:	cdqe                                #  temp = |x|malloc (ll + elen + 3);
0x216c6:	mov rdi, rax                        
0x216c9:	call 0x24650                        
0x216ce:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x216d2:	mov eax, dword ptr [rbp - 0x14]     #  |s|trncpy (temp, s + start, ll);
MEMORY OFFSET:     -0x14     -20  >>-12

0x216d5:	movsxd rdx, eax                     
0x216d8:	mov eax, dword ptr [rbp - 0x2c]     
MEMORY OFFSET:     -0x2c     -44  >>-36

0x216db:	movsxd rcx, eax                     
0x216de:	mov rax, qword ptr [rbp - 0x28]     #  strncpy (temp, s |+| start, ll);
MEMORY OFFSET:     -0x28     -40  >>-32

0x216e2:	add rcx, rax                        
0x216e5:	mov rax, qword ptr [rbp - 8]        #  |s|trncpy (temp, s + start, ll);
MEMORY OFFSET:     -0x8     -8  >>0

0x216e9:	mov rsi, rcx                        
0x216ec:	mov rdi, rax                        
0x216ef:	call 0x4840                         
0x216f4:	mov eax, dword ptr [rbp - 0x14]     #  temp|[|ll] = ':';
MEMORY OFFSET:     -0x14     -20  >>-12

0x216f7:	movsxd rdx, eax                     
0x216fa:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x216fe:	add rax, rdx                        
0x21701:	mov byte ptr [rax], 0x3a            #  temp[ll] |=| ':';
0x21704:	mov eax, dword ptr [rbp - 0x14]     #  temp|[|ll + 1] = ' ';
MEMORY OFFSET:     -0x14     -20  >>-12

0x21707:	cdqe                                
0x21709:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x2170d:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x21711:	add rax, rdx                        
0x21714:	mov byte ptr [rax], 0x20            #  temp[ll + 1] |=| ' ';
0x21717:	mov eax, dword ptr [rbp - 0x14]     #  strcpy (temp + ll |+| 2, emsg);
MEMORY OFFSET:     -0x14     -20  >>-12

0x2171a:	cdqe                                
0x2171c:	lea rdx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x21720:	mov rax, qword ptr [rbp - 8]        #  |s|trcpy (temp + ll + 2, emsg);
MEMORY OFFSET:     -0x8     -8  >>0

0x21724:	add rdx, rax                        
0x21727:	mov rax, qword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x2172b:	mov rsi, rax                        
0x2172e:	mov rdi, rdx                        
0x21731:	call 0x4870                         
0x21736:	mov rax, qword ptr [rbp - 8]        #  return |(|temp);
MEMORY OFFSET:     -0x8     -8  >>0

0x2173a:	leave                               #|}|
0x2173b:	ret                                 
0x2173c:	endbr64                             #|{|
0x21740:	push rbp                            
0x21741:	mov rbp, rsp                        
0x21744:	push r13                            
0x21746:	push r12                            
0x21748:	push rbx                            
0x21749:	sub rsp, 0x38                       
0x2174d:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x21751:	mov qword ptr [rbp - 0x40], rsi     
MEMORY OFFSET:     -0x40     -64  >>-56

0x21755:	mov dword ptr [rbp - 0x44], edx     
MEMORY OFFSET:     -0x44     -68  >>-60

0x21758:	mov dword ptr [rbp - 0x48], ecx     
MEMORY OFFSET:     -0x48     -72  >>-64

0x2175b:	mov qword ptr [rbp - 0x50], r8      
MEMORY OFFSET:     -0x50     -80  >>-72

0x2175f:	mov qword ptr [rbp - 0x28], 0       #  char *|s| = (char *) NULL;
MEMORY OFFSET:     -0x28     -40  >>-32

0x21767:	mov rax, qword ptr [rbp - 0x40]     #  i |=| *iptr;
MEMORY OFFSET:     -0x40     -64  >>-56

0x2176b:	mov r12d, dword ptr [rax]           
0x2176e:	mov ebx, r12d                       #  for (si |=| i; str[si] && str[si] != delimiter; si++)
0x21771:	jmp 0x217a3                         #  |f|or (si = i; str[si] && str[si] != delimiter; si++)
0x21773:	movsxd rdx, ebx                     #    if (str|[|si] == '\\' && str[si + 1] == delimiter)
0x21776:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x2177a:	add rax, rdx                        
0x2177d:	movzx eax, byte ptr [rax]           
0x21780:	cmp al, 0x5c                        #    if |(|str[si] == '\\' && str[si + 1] == delimiter)
0x21782:	jne 0x217a0                         
0x21784:	movsxd rax, ebx                     #    if (str[si] == '\\' && str|[|si + 1] == delimiter)
0x21787:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x2178b:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x2178f:	add rax, rdx                        
0x21792:	movzx eax, byte ptr [rax]           
0x21795:	movsx eax, al                       
0x21798:	cmp dword ptr [rbp - 0x44], eax     #    if (str[si] == '\\' |&|& str[si + 1] == delimiter)
MEMORY OFFSET:     -0x44     -68  >>-60

0x2179b:	jne 0x217a0                         
0x2179d:	add ebx, 1                          #      si|+|+;
0x217a0:	add ebx, 1                          #  for (si = i; str[si] && str[si] != delimiter; si|+|+)
0x217a3:	movsxd rdx, ebx                     #  for (si = i; str|[|si] && str[si] != delimiter; si++)
0x217a6:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x217aa:	add rax, rdx                        
0x217ad:	movzx eax, byte ptr [rax]           
0x217b0:	test al, al                         #  for (si = i; str[si] |&|& str[si] != delimiter; si++)
0x217b2:	je 0x217c9                          
0x217b4:	movsxd rdx, ebx                     #  for (si = i; str[si] && str|[|si] != delimiter; si++)
0x217b7:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x217bb:	add rax, rdx                        
0x217be:	movzx eax, byte ptr [rax]           
0x217c1:	movsx eax, al                       
0x217c4:	cmp dword ptr [rbp - 0x44], eax     #  for (si = i; str[si] |&|& str[si] != delimiter; si++)
MEMORY OFFSET:     -0x44     -68  >>-60

0x217c7:	jne 0x21773                         
0x217c9:	cmp ebx, r12d                       #  if |(|si > i || is_rhs)
0x217cc:	jg 0x217d8                          
0x217ce:	cmp dword ptr [rbp - 0x48], 0       #  if (si > i |||| is_rhs)
MEMORY OFFSET:     -0x48     -72  >>-64

0x217d2:	je 0x21865                          
0x217d8:	mov eax, ebx                        #      s = xmalloc (si |-| i + 1);
0x217da:	sub eax, r12d                       
0x217dd:	add eax, 1                          #      s = xmalloc (si - i |+| 1);
0x217e0:	cdqe                                #      s = |x|malloc (si - i + 1);
0x217e2:	mov rdi, rax                        
0x217e5:	call 0x24650                        
0x217ea:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x217ee:	mov r13d, 0                         #      for (j |=| 0, k = i; k < si; j++, k++)
0x217f4:	jmp 0x21845                         #      |f|or (j = 0, k = i; k < si; j++, k++)
0x217f6:	movsxd rdx, r12d                    #	  if (str|[|k] == '\\' && str[k + 1] == delimiter)
0x217f9:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x217fd:	add rax, rdx                        
0x21800:	movzx eax, byte ptr [rax]           
0x21803:	cmp al, 0x5c                        #	  if |(|str[k] == '\\' && str[k + 1] == delimiter)
0x21805:	jne 0x21824                         
0x21807:	movsxd rax, r12d                    #	  if (str[k] == '\\' && str|[|k + 1] == delimiter)
0x2180a:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x2180e:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x21812:	add rax, rdx                        
0x21815:	movzx eax, byte ptr [rax]           
0x21818:	movsx eax, al                       
0x2181b:	cmp dword ptr [rbp - 0x44], eax     #	  if (str[k] == '\\' |&|& str[k + 1] == delimiter)
MEMORY OFFSET:     -0x44     -68  >>-60

0x2181e:	jne 0x21824                         
0x21820:	add r12d, 1                         #	    k|+|+;
0x21824:	movsxd rdx, r12d                    #	  s[j] = str|[|k];
0x21827:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x2182b:	add rax, rdx                        
0x2182e:	movsxd rcx, r13d                    #	  s|[|j] = str[k];
0x21831:	mov rdx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x21835:	add rdx, rcx                        
0x21838:	movzx eax, byte ptr [rax]           #	  s[j] = str|[|k];
0x2183b:	mov byte ptr [rdx], al              #	  s[j] |=| str[k];
0x2183d:	add r13d, 1                         #      for (j = 0, k = i; k < si; j|+|+, k++)
0x21841:	add r12d, 1                         #      for (j = 0, k = i; k < si; j++, k|+|+)
0x21845:	cmp r12d, ebx                       #      for (j = 0, k = i; k |<| si; j++, k++)
0x21848:	jl 0x217f6                          
0x2184a:	movsxd rdx, r13d                    #      s|[|j] = '\0';
0x2184d:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x21851:	add rax, rdx                        
0x21854:	mov byte ptr [rax], 0               #      s[j] |=| '\0';
0x21857:	cmp qword ptr [rbp - 0x50], 0       #      if |(|lenptr)
MEMORY OFFSET:     -0x50     -80  >>-72

0x2185c:	je 0x21865                          
0x2185e:	mov rax, qword ptr [rbp - 0x50]     #	*lenptr |=| j;
MEMORY OFFSET:     -0x50     -80  >>-72

0x21862:	mov dword ptr [rax], r13d           
0x21865:	mov r12d, ebx                       #  i |=| si;
0x21868:	movsxd rdx, r12d                    #  if (str|[|i])
0x2186b:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x2186f:	add rax, rdx                        
0x21872:	movzx eax, byte ptr [rax]           
0x21875:	test al, al                         #  if |(|str[i])
0x21877:	je 0x2187d                          
0x21879:	add r12d, 1                         #    i|+|+;
0x2187d:	mov rax, qword ptr [rbp - 0x40]     #  *iptr |=| i;
MEMORY OFFSET:     -0x40     -64  >>-56

0x21881:	mov dword ptr [rax], r12d           
0x21884:	mov rax, qword ptr [rbp - 0x28]     #  return |s|;
MEMORY OFFSET:     -0x28     -40  >>-32

0x21888:	add rsp, 0x38                       #|}|
0x2188c:	pop rbx                             
0x2188d:	pop r12                             
0x2188f:	pop r13                             
0x21891:	pop rbp                             
0x21892:	ret                                 
0x21893:	endbr64                             #|{|
0x21897:	push rbp                            
0x21898:	mov rbp, rsp                        
0x2189b:	sub rsp, 0x20                       
0x2189f:	mov edx, dword ptr [rip + 0x10267]  #  new = xmalloc (new_size = subst_rhs_len |+| subst_lhs_len);
MEMORY OFFSET:     0x10267     66151  >>66159

0x218a5:	mov eax, dword ptr [rip + 0x1025d]  
MEMORY OFFSET:     0x1025d     66141  >>66149

0x218ab:	add eax, edx                        #  new = xmalloc (new_size |=| subst_rhs_len + subst_lhs_len);
0x218ad:	mov dword ptr [rbp - 0xc], eax      
MEMORY OFFSET:     -0xc     -12  >>-4

0x218b0:	mov eax, dword ptr [rbp - 0xc]      #  new = |x|malloc (new_size = subst_rhs_len + subst_lhs_len);
MEMORY OFFSET:     -0xc     -12  >>-4

0x218b3:	cdqe                                
0x218b5:	mov rdi, rax                        
0x218b8:	call 0x24650                        
0x218bd:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x218c1:	mov dword ptr [rbp - 0x10], 0       #  for (i = j |=| 0; i < subst_rhs_len; i++)
MEMORY OFFSET:     -0x10     -16  >>-8

0x218c8:	mov eax, dword ptr [rbp - 0x10]     #  for (i |=| j = 0; i < subst_rhs_len; i++)
MEMORY OFFSET:     -0x10     -16  >>-8

0x218cb:	mov dword ptr [rbp - 0x14], eax     
MEMORY OFFSET:     -0x14     -20  >>-12

0x218ce:	jmp 0x219d4                         #  |f|or (i = j = 0; i < subst_rhs_len; i++)
0x218d3:	mov rdx, qword ptr [rip + 0x10226]  #      if (subst_rhs|[|i] == '&')
MEMORY OFFSET:     0x10226     66086  >>66094

0x218da:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x218dd:	cdqe                                
0x218df:	add rax, rdx                        
0x218e2:	movzx eax, byte ptr [rax]           
0x218e5:	cmp al, 0x26                        #      if |(|subst_rhs[i] == '&')
0x218e7:	jne 0x21950                         
0x218e9:	mov edx, dword ptr [rip + 0x10219]  #	  if (j |+| subst_lhs_len >= new_size)
MEMORY OFFSET:     0x10219     66073  >>66081

0x218ef:	mov eax, dword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x218f2:	add eax, edx                        
0x218f4:	cmp dword ptr [rbp - 0xc], eax      #	  if |(|j + subst_lhs_len >= new_size)
MEMORY OFFSET:     -0xc     -12  >>-4

0x218f7:	jg 0x21923                          
0x218f9:	mov eax, dword ptr [rbp - 0xc]      #	    new = xrealloc (new, (new_size = new_size |*| 2 + subst_lhs_len));
MEMORY OFFSET:     -0xc     -12  >>-4

0x218fc:	lea edx, [rax + rax]                
0x218ff:	mov eax, dword ptr [rip + 0x10203]  #	    new = xrealloc (new, (new_size = new_size * 2 |+| subst_lhs_len));
MEMORY OFFSET:     0x10203     66051  >>66059

0x21905:	add eax, edx                        #	    new = xrealloc (new, (new_size |=| new_size * 2 + subst_lhs_len));
0x21907:	mov dword ptr [rbp - 0xc], eax      
MEMORY OFFSET:     -0xc     -12  >>-4

0x2190a:	mov eax, dword ptr [rbp - 0xc]      #	    new = |x|realloc (new, (new_size = new_size * 2 + subst_lhs_len));
MEMORY OFFSET:     -0xc     -12  >>-4

0x2190d:	movsxd rdx, eax                     
0x21910:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x21914:	mov rsi, rdx                        
0x21917:	mov rdi, rax                        
0x2191a:	call 0x24670                        
0x2191f:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x21923:	mov rax, qword ptr [rip + 0x101ce]  #	  |s|trcpy (new + j, subst_lhs);
MEMORY OFFSET:     0x101ce     65998  >>66006

0x2192a:	mov edx, dword ptr [rbp - 0x10]     
MEMORY OFFSET:     -0x10     -16  >>-8

0x2192d:	movsxd rcx, edx                     
0x21930:	mov rdx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x21934:	add rdx, rcx                        
0x21937:	mov rsi, rax                        
0x2193a:	mov rdi, rdx                        
0x2193d:	call 0x4870                         
0x21942:	mov eax, dword ptr [rip + 0x101c0]  #	  j |+|= subst_lhs_len;
MEMORY OFFSET:     0x101c0     65984  >>65992

0x21948:	add dword ptr [rbp - 0x10], eax     
MEMORY OFFSET:     -0x10     -16  >>-8

0x2194b:	jmp 0x219d0                         
0x21950:	mov rdx, qword ptr [rip + 0x101a9]  #	  if (subst_rhs|[|i] == '\\' && subst_rhs[i + 1] == '&')
MEMORY OFFSET:     0x101a9     65961  >>65969

0x21957:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x2195a:	cdqe                                
0x2195c:	add rax, rdx                        
0x2195f:	movzx eax, byte ptr [rax]           
0x21962:	cmp al, 0x5c                        #	  if |(|subst_rhs[i] == '\\' && subst_rhs[i + 1] == '&')
0x21964:	jne 0x21984                         
0x21966:	mov rdx, qword ptr [rip + 0x10193]  #	  if (subst_rhs[i] == '\\' && subst_rhs|[|i + 1] == '&')
MEMORY OFFSET:     0x10193     65939  >>65947

0x2196d:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x21970:	cdqe                                
0x21972:	add rax, 1                          
0x21976:	add rax, rdx                        
0x21979:	movzx eax, byte ptr [rax]           
0x2197c:	cmp al, 0x26                        #	  if (subst_rhs[i] == '\\' |&|& subst_rhs[i + 1] == '&')
0x2197e:	jne 0x21984                         
0x21980:	add dword ptr [rbp - 0x14], 1       #	    i|+|+;
MEMORY OFFSET:     -0x14     -20  >>-12

0x21984:	mov eax, dword ptr [rbp - 0x10]     #	  if |(|j >= new_size)
MEMORY OFFSET:     -0x10     -16  >>-8

0x21987:	cmp eax, dword ptr [rbp - 0xc]      
MEMORY OFFSET:     -0xc     -12  >>-4

0x2198a:	jl 0x219a8                          
0x2198c:	shl dword ptr [rbp - 0xc], 1        #	    new = xrealloc (new, new_size |*|= 2);
MEMORY OFFSET:     -0xc     -12  >>-4

0x2198f:	mov eax, dword ptr [rbp - 0xc]      #	    new = |x|realloc (new, new_size *= 2);
MEMORY OFFSET:     -0xc     -12  >>-4

0x21992:	movsxd rdx, eax                     
0x21995:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x21999:	mov rsi, rdx                        
0x2199c:	mov rdi, rax                        
0x2199f:	call 0x24670                        
0x219a4:	mov qword ptr [rbp - 8], rax        
MEMORY OFFSET:     -0x8     -8  >>0

0x219a8:	mov rdx, qword ptr [rip + 0x10151]  #	  new[j++] = subst_rhs|[|i];
MEMORY OFFSET:     0x10151     65873  >>65881

0x219af:	mov eax, dword ptr [rbp - 0x14]     
MEMORY OFFSET:     -0x14     -20  >>-12

0x219b2:	cdqe                                
0x219b4:	lea rcx, [rdx + rax]                
0x219b8:	mov eax, dword ptr [rbp - 0x10]     #	  new[j|+|+] = subst_rhs[i];
MEMORY OFFSET:     -0x10     -16  >>-8

0x219bb:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x219be:	mov dword ptr [rbp - 0x10], edx     
MEMORY OFFSET:     -0x10     -16  >>-8

0x219c1:	movsxd rdx, eax                     
0x219c4:	mov rax, qword ptr [rbp - 8]        #	  new|[|j++] = subst_rhs[i];
MEMORY OFFSET:     -0x8     -8  >>0

0x219c8:	add rdx, rax                        
0x219cb:	movzx eax, byte ptr [rcx]           #	  new[j++] = subst_rhs|[|i];
0x219ce:	mov byte ptr [rdx], al              #	  new[j++] |=| subst_rhs[i];
0x219d0:	add dword ptr [rbp - 0x14], 1       #  for (i = j = 0; i < subst_rhs_len; i|+|+)
MEMORY OFFSET:     -0x14     -20  >>-12

0x219d4:	mov eax, dword ptr [rip + 0x10132]  #  for (i = j = 0; i |<| subst_rhs_len; i++)
MEMORY OFFSET:     0x10132     65842  >>65850

0x219da:	cmp dword ptr [rbp - 0x14], eax     
MEMORY OFFSET:     -0x14     -20  >>-12

0x219dd:	jl 0x218d3                          
0x219e3:	mov eax, dword ptr [rbp - 0x10]     #  new|[|j] = '\0';
MEMORY OFFSET:     -0x10     -16  >>-8

0x219e6:	movsxd rdx, eax                     
0x219e9:	mov rax, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x219ed:	add rax, rdx                        
0x219f0:	mov byte ptr [rax], 0               #  new[j] |=| '\0';
0x219f3:	mov rax, qword ptr [rip + 0x10106]  #  |x|free (subst_rhs);
MEMORY OFFSET:     0x10106     65798  >>65806

0x219fa:	mov rdi, rax                        
0x219fd:	call 0x1eeae                        
0x21a02:	mov rax, qword ptr [rbp - 8]        #  subst_rhs |=| new;
MEMORY OFFSET:     -0x8     -8  >>0

0x21a06:	mov qword ptr [rip + 0x100f3], rax  
MEMORY OFFSET:     0x100f3     65779  >>65787

0x21a0d:	mov eax, dword ptr [rbp - 0x10]     #  subst_rhs_len |=| j;
MEMORY OFFSET:     -0x10     -16  >>-8

0x21a10:	mov dword ptr [rip + 0x100f6], eax  
MEMORY OFFSET:     0x100f6     65782  >>65790

0x21a16:	nop                                 #|}|
0x21a17:	leave                               
0x21a18:	ret                                 
0x21a19:	endbr64                             #|{|
0x21a1d:	push rbp                            
0x21a1e:	mov rbp, rsp                        
0x21a21:	push rbx                            
0x21a22:	sub rsp, 0xc8                       
0x21a29:	mov qword ptr [rbp - 0xa8], rdi     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21a30:	mov dword ptr [rbp - 0xac], esi     
MEMORY OFFSET:     -0xac     -172  >>-164

0x21a36:	mov qword ptr [rbp - 0xb8], rdx     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x21a3d:	mov qword ptr [rbp - 0xc0], rcx     
MEMORY OFFSET:     -0xc0     -192  >>-184

0x21a44:	mov qword ptr [rbp - 0xc8], r8      
MEMORY OFFSET:     -0xc8     -200  >>-192

0x21a4b:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x21a54:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x21a58:	xor eax, eax                        
0x21a5a:	mov dword ptr [rbp - 0x78], 0x80    #  result = xmalloc (result_len |=| 128);
MEMORY OFFSET:     -0x78     -120  >>-112

0x21a61:	mov edi, 0x80                       #  result = |x|malloc (result_len = 128);
0x21a66:	call 0x24650                        
0x21a6b:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x21a6f:	mov eax, dword ptr [rbp - 0xac]     #  i |=| start;
MEMORY OFFSET:     -0xac     -172  >>-164

0x21a75:	mov dword ptr [rbp - 0x98], eax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x21a7b:	mov eax, dword ptr [rbp - 0x98]     #  if (|m|ember (string[i + 1], ":$*%^"))
MEMORY OFFSET:     -0x98     -152  >>-144

0x21a81:	cdqe                                
0x21a83:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x21a87:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21a8e:	add rax, rdx                        
0x21a91:	movzx eax, byte ptr [rax]           
0x21a94:	test al, al                         #  if |(|member (string[i + 1], ":$*%^"))
0x21a96:	je 0x21b25                          
0x21a9c:	mov eax, dword ptr [rbp - 0x98]     #  if (|m|ember (string[i + 1], ":$*%^"))
MEMORY OFFSET:     -0x98     -152  >>-144

0x21aa2:	cdqe                                
0x21aa4:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x21aa8:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21aaf:	add rax, rdx                        
0x21ab2:	movzx eax, byte ptr [rax]           
0x21ab5:	movsx eax, al                       
0x21ab8:	mov esi, eax                        
0x21aba:	lea rax, [rip + 0x7ae9]             
MEMORY OFFSET:     0x7ae9     31465  >>31473

0x21ac1:	mov rdi, rax                        
0x21ac4:	call 0x49b0                         
0x21ac9:	test rax, rax                       
0x21acc:	je 0x21b25                          
0x21ace:	mov dword ptr [rbp - 0x94], 0       #      int |f|ake_i = 0;
MEMORY OFFSET:     -0x94     -148  >>-140

0x21ad8:	mov eax, dword ptr [rbp - 0x98]     #      i|+|+;
MEMORY OFFSET:     -0x98     -152  >>-144

0x21ade:	add eax, 1                          
0x21ae1:	mov dword ptr [rbp - 0x98], eax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x21ae7:	movzx eax, byte ptr [rip + 0xed4a]  #      fake_s[0] = fake_s[1] |=| history_expansion_char;
MEMORY OFFSET:     0xed4a     60746  >>60754

0x21aee:	mov byte ptr [rbp - 0x1a], al       
MEMORY OFFSET:     -0x1a     -26  >>-18

0x21af1:	movzx eax, byte ptr [rbp - 0x1a]    #      fake_s[0] = fake_s|[|1] = history_expansion_char;
MEMORY OFFSET:     -0x1a     -26  >>-18

0x21af5:	mov byte ptr [rbp - 0x1b], al       #      fake_s[0] |=| fake_s[1] = history_expansion_char;
MEMORY OFFSET:     -0x1b     -27  >>-19

0x21af8:	mov byte ptr [rbp - 0x19], 0        #      fake_s[2] |=| '\0';
MEMORY OFFSET:     -0x19     -25  >>-17

0x21afc:	lea rcx, [rbp - 0x94]               #      event = |g|et_history_event (fake_s, &fake_i, 0);
MEMORY OFFSET:     -0x94     -148  >>-140

0x21b03:	lea rax, [rbp - 0x1b]               
MEMORY OFFSET:     -0x1b     -27  >>-19

0x21b07:	mov edx, 0                          
0x21b0c:	mov rsi, rcx                        
0x21b0f:	mov rdi, rax                        
0x21b12:	mov eax, 0                          
0x21b17:	call 0x2127b                        
0x21b1c:	mov qword ptr [rbp - 0x60], rax     
MEMORY OFFSET:     -0x60     -96  >>-88

0x21b20:	jmp 0x21bf9                         #    |{|
0x21b25:	mov eax, dword ptr [rbp - 0x98]     #  else if (string|[|i + 1] == '#')
MEMORY OFFSET:     -0x98     -152  >>-144

0x21b2b:	cdqe                                
0x21b2d:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x21b31:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21b38:	add rax, rdx                        
0x21b3b:	movzx eax, byte ptr [rax]           
0x21b3e:	cmp al, 0x23                        #  else if |(|string[i + 1] == '#')
0x21b40:	jne 0x21b61                         
0x21b42:	mov eax, dword ptr [rbp - 0x98]     #      i |+|= 2;
MEMORY OFFSET:     -0x98     -152  >>-144

0x21b48:	add eax, 2                          
0x21b4b:	mov dword ptr [rbp - 0x98], eax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x21b51:	mov rax, qword ptr [rbp - 0xc8]     #      event |=| current_line;
MEMORY OFFSET:     -0xc8     -200  >>-192

0x21b58:	mov qword ptr [rbp - 0x60], rax     
MEMORY OFFSET:     -0x60     -96  >>-88

0x21b5c:	jmp 0x21bf9                         
0x21b61:	mov dword ptr [rbp - 0x88], 0       #      int |q|uoted_search_delimiter = 0;
MEMORY OFFSET:     -0x88     -136  >>-128

0x21b6b:	mov eax, dword ptr [rbp - 0x98]     #      if (|i| && (string[i - 1] == '\'' || string[i - 1] == '"'))
MEMORY OFFSET:     -0x98     -152  >>-144

0x21b71:	test eax, eax                       #      if |(|i && (string[i - 1] == '\'' || string[i - 1] == '"'))
0x21b73:	je 0x21bd1                          
0x21b75:	mov eax, dword ptr [rbp - 0x98]     #      if (i && (string|[|i - 1] == '\'' || string[i - 1] == '"'))
MEMORY OFFSET:     -0x98     -152  >>-144

0x21b7b:	cdqe                                
0x21b7d:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x21b81:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21b88:	add rax, rdx                        
0x21b8b:	movzx eax, byte ptr [rax]           
0x21b8e:	cmp al, 0x27                        #      if (i |&|& (string[i - 1] == '\'' || string[i - 1] == '"'))
0x21b90:	je 0x21baf                          
0x21b92:	mov eax, dword ptr [rbp - 0x98]     #      if (i && (string[i - 1] == '\'' || string|[|i - 1] == '"'))
MEMORY OFFSET:     -0x98     -152  >>-144

0x21b98:	cdqe                                
0x21b9a:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x21b9e:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21ba5:	add rax, rdx                        
0x21ba8:	movzx eax, byte ptr [rax]           
0x21bab:	cmp al, 0x22                        #      if (i && (string[i - 1] == '\'' |||| string[i - 1] == '"'))
0x21bad:	jne 0x21bd1                         
0x21baf:	mov eax, dword ptr [rbp - 0x98]     #	quoted_search_delimiter = string|[|i - 1];
MEMORY OFFSET:     -0x98     -152  >>-144

0x21bb5:	cdqe                                
0x21bb7:	lea rdx, [rax - 1]                  
MEMORY OFFSET:     -0x1     -1  >>7

0x21bbb:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21bc2:	add rax, rdx                        
0x21bc5:	movzx eax, byte ptr [rax]           
0x21bc8:	movsx eax, al                       #	quoted_search_delimiter |=| string[i - 1];
0x21bcb:	mov dword ptr [rbp - 0x88], eax     
MEMORY OFFSET:     -0x88     -136  >>-128

0x21bd1:	mov edx, dword ptr [rbp - 0x88]     #      event = |g|et_history_event (string, &i, quoted_search_delimiter);
MEMORY OFFSET:     -0x88     -136  >>-128

0x21bd7:	lea rcx, [rbp - 0x98]               
MEMORY OFFSET:     -0x98     -152  >>-144

0x21bde:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21be5:	mov rsi, rcx                        
0x21be8:	mov rdi, rax                        
0x21beb:	mov eax, 0                          
0x21bf0:	call 0x2127b                        
0x21bf5:	mov qword ptr [rbp - 0x60], rax     
MEMORY OFFSET:     -0x60     -96  >>-88

0x21bf9:	cmp qword ptr [rbp - 0x60], 0       #  if |(|!event)
MEMORY OFFSET:     -0x60     -96  >>-88

0x21bfe:	jne 0x21c45                         
0x21c00:	mov edx, dword ptr [rbp - 0x98]     #      *ret_string = |h|ist_error (string, start, i, EVENT_NOT_FOUND);
MEMORY OFFSET:     -0x98     -152  >>-144

0x21c06:	mov esi, dword ptr [rbp - 0xac]     
MEMORY OFFSET:     -0xac     -172  >>-164

0x21c0c:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21c13:	mov ecx, 0                          
0x21c18:	mov rdi, rax                        
0x21c1b:	mov eax, 0                          
0x21c20:	call 0x2160e                        
0x21c25:	mov rdx, qword ptr [rbp - 0xc0]     #      *ret_string |=| hist_error (string, start, i, EVENT_NOT_FOUND);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x21c2c:	mov qword ptr [rdx], rax            
0x21c2f:	mov rax, qword ptr [rbp - 0x50]     #      |x|free (result);
MEMORY OFFSET:     -0x50     -80  >>-72

0x21c33:	mov rdi, rax                        
0x21c36:	call 0x1eeae                        
0x21c3b:	mov eax, 0xffffffff                 #      return |(|-1);
0x21c40:	jmp 0x224dd                         
0x21c45:	mov eax, dword ptr [rbp - 0x98]     #  starting_index |=| i;
MEMORY OFFSET:     -0x98     -152  >>-144

0x21c4b:	mov dword ptr [rbp - 0x74], eax     
MEMORY OFFSET:     -0x74     -116  >>-108

0x21c4e:	lea rdx, [rbp - 0x98]               #  word_spec = |g|et_history_word_specifier (string, event, &i);
MEMORY OFFSET:     -0x98     -152  >>-144

0x21c55:	mov rcx, qword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x21c59:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21c60:	mov rsi, rcx                        
0x21c63:	mov rdi, rax                        
0x21c66:	mov eax, 0                          
0x21c6b:	call 0x22a33                        
0x21c70:	mov qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x21c74:	lea rax, [rip + 0xfe75]             #  if |(|word_spec == (char *)&error_pointer)
MEMORY OFFSET:     0xfe75     65141  >>65149

0x21c7b:	cmp qword ptr [rbp - 0x48], rax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x21c7f:	jne 0x21cc3                         
0x21c81:	mov edx, dword ptr [rbp - 0x98]     #      *ret_string = |h|ist_error (string, starting_index, i, BAD_WORD_SPEC);
MEMORY OFFSET:     -0x98     -152  >>-144

0x21c87:	mov esi, dword ptr [rbp - 0x74]     
MEMORY OFFSET:     -0x74     -116  >>-108

0x21c8a:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21c91:	mov ecx, 1                          
0x21c96:	mov rdi, rax                        
0x21c99:	mov eax, 0                          
0x21c9e:	call 0x2160e                        
0x21ca3:	mov rdx, qword ptr [rbp - 0xc0]     #      *ret_string |=| hist_error (string, starting_index, i, BAD_WORD_SPEC);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x21caa:	mov qword ptr [rdx], rax            
0x21cad:	mov rax, qword ptr [rbp - 0x50]     #      |x|free (result);
MEMORY OFFSET:     -0x50     -80  >>-72

0x21cb1:	mov rdi, rax                        
0x21cb4:	call 0x1eeae                        
0x21cb9:	mov eax, 0xffffffff                 #      return |(|-1);
0x21cbe:	jmp 0x224dd                         
0x21cc3:	cmp qword ptr [rbp - 0x48], 0       #  if |(|!word_spec)
MEMORY OFFSET:     -0x48     -72  >>-64

0x21cc8:	jne 0x21cfa                         
0x21cca:	mov rax, qword ptr [rbp - 0x60]     #    temp = |s|avestring (event);
MEMORY OFFSET:     -0x60     -96  >>-88

0x21cce:	mov rdi, rax                        
0x21cd1:	call 0x4960                         
0x21cd6:	add rax, 1                          
0x21cda:	mov rdi, rax                        
0x21cdd:	call 0x24650                        
0x21ce2:	mov rdx, rax                        
0x21ce5:	mov rax, qword ptr [rbp - 0x60]     
MEMORY OFFSET:     -0x60     -96  >>-88

0x21ce9:	mov rsi, rax                        
0x21cec:	mov rdi, rdx                        
0x21cef:	call 0x4870                         
0x21cf4:	mov qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x21cf8:	jmp 0x21d34                         
0x21cfa:	mov rax, qword ptr [rbp - 0x48]     #      temp = |s|avestring (word_spec);
MEMORY OFFSET:     -0x48     -72  >>-64

0x21cfe:	mov rdi, rax                        
0x21d01:	call 0x4960                         
0x21d06:	add rax, 1                          
0x21d0a:	mov rdi, rax                        
0x21d0d:	call 0x24650                        
0x21d12:	mov rdx, rax                        
0x21d15:	mov rax, qword ptr [rbp - 0x48]     
MEMORY OFFSET:     -0x48     -72  >>-64

0x21d19:	mov rsi, rax                        
0x21d1c:	mov rdi, rdx                        
0x21d1f:	call 0x4870                         
0x21d24:	mov qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x21d28:	mov rax, qword ptr [rbp - 0x48]     #      |x|free (word_spec);
MEMORY OFFSET:     -0x48     -72  >>-64

0x21d2c:	mov rdi, rax                        
0x21d2f:	call 0x1eeae                        
0x21d34:	mov dword ptr [rbp - 0x8c], 0       #  want_quotes = substitute_globally = print_only |=| 0;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x21d3e:	mov eax, dword ptr [rbp - 0x8c]     #  want_quotes = substitute_globally |=| print_only = 0;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x21d44:	mov dword ptr [rbp - 0x90], eax     
MEMORY OFFSET:     -0x90     -144  >>-136

0x21d4a:	mov eax, dword ptr [rbp - 0x90]     #  want_quotes |=| substitute_globally = print_only = 0;
MEMORY OFFSET:     -0x90     -144  >>-136

0x21d50:	mov dword ptr [rbp - 0x70], eax     
MEMORY OFFSET:     -0x70     -112  >>-104

0x21d53:	mov eax, dword ptr [rbp - 0x98]     #  starting_index |=| i;
MEMORY OFFSET:     -0x98     -152  >>-144

0x21d59:	mov dword ptr [rbp - 0x74], eax     
MEMORY OFFSET:     -0x74     -116  >>-108

0x21d5c:	jmp 0x2243b                         #  while |(|string[i] == ':')
0x21d61:	mov eax, dword ptr [rbp - 0x98]     #      c = string|[|i + 1];
MEMORY OFFSET:     -0x98     -152  >>-144

0x21d67:	cdqe                                
0x21d69:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x21d6d:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21d74:	add rax, rdx                        
0x21d77:	movzx eax, byte ptr [rax]           #      c |=| string[i + 1];
0x21d7a:	mov byte ptr [rbp - 0x99], al       
MEMORY OFFSET:     -0x99     -153  >>-145

0x21d80:	cmp byte ptr [rbp - 0x99], 0x67     #      if |(|c == 'g')
MEMORY OFFSET:     -0x99     -153  >>-145

0x21d87:	jne 0x21dc1                         
0x21d89:	mov dword ptr [rbp - 0x90], 1       #	  substitute_globally |=| 1;
MEMORY OFFSET:     -0x90     -144  >>-136

0x21d93:	mov eax, dword ptr [rbp - 0x98]     #	  i|+|+;
MEMORY OFFSET:     -0x98     -152  >>-144

0x21d99:	add eax, 1                          
0x21d9c:	mov dword ptr [rbp - 0x98], eax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x21da2:	mov eax, dword ptr [rbp - 0x98]     #	  c = string|[|i + 1];
MEMORY OFFSET:     -0x98     -152  >>-144

0x21da8:	cdqe                                
0x21daa:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x21dae:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21db5:	add rax, rdx                        
0x21db8:	movzx eax, byte ptr [rax]           #	  c |=| string[i + 1];
0x21dbb:	mov byte ptr [rbp - 0x99], al       
MEMORY OFFSET:     -0x99     -153  >>-145

0x21dc1:	movsx eax, byte ptr [rbp - 0x99]    #      |s|witch (c)
MEMORY OFFSET:     -0x99     -153  >>-145

0x21dc8:	cmp eax, 0x26                       
0x21dcb:	je 0x21f99                          
0x21dd1:	cmp eax, 0x26                       
0x21dd4:	jl 0x21e0b                          
0x21dd6:	cmp eax, 0x74                       
0x21dd9:	jg 0x21e0b                          
0x21ddb:	cmp eax, 0x65                       
0x21dde:	jl 0x21e0b                          
0x21de0:	sub eax, 0x65                       
0x21de3:	cmp eax, 0xf                        
0x21de6:	ja 0x21e0b                          
0x21de8:	mov eax, eax                        
0x21dea:	lea rdx, [rax*4]                    
0x21df2:	lea rax, [rip + 0x77d7]             
MEMORY OFFSET:     0x77d7     30679  >>30687

0x21df9:	mov eax, dword ptr [rdx + rax]      
0x21dfc:	cdqe                                
0x21dfe:	lea rdx, [rip + 0x77cb]             
MEMORY OFFSET:     0x77cb     30667  >>30675

0x21e05:	add rax, rdx                        
0x21e08:	jmp rax                             
0x21e0b:	mov eax, dword ptr [rbp - 0x98]     #	  *ret_string = |h|ist_error (string, i+1, i+2, BAD_MODIFIER);
MEMORY OFFSET:     -0x98     -152  >>-144

0x21e11:	lea edx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x21e14:	mov eax, dword ptr [rbp - 0x98]     
MEMORY OFFSET:     -0x98     -152  >>-144

0x21e1a:	lea esi, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x21e1d:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21e24:	mov ecx, 3                          
0x21e29:	mov rdi, rax                        
0x21e2c:	mov eax, 0                          
0x21e31:	call 0x2160e                        
0x21e36:	mov rdx, qword ptr [rbp - 0xc0]     #	  *ret_string |=| hist_error (string, i+1, i+2, BAD_MODIFIER);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x21e3d:	mov qword ptr [rdx], rax            
0x21e40:	mov rax, qword ptr [rbp - 0x50]     #	  |x|free (result);
MEMORY OFFSET:     -0x50     -80  >>-72

0x21e44:	mov rdi, rax                        
0x21e47:	call 0x1eeae                        
0x21e4c:	mov rax, qword ptr [rbp - 0x58]     #	  |x|free (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x21e50:	mov rdi, rax                        
0x21e53:	call 0x1eeae                        
0x21e58:	mov eax, 0xffffffff                 #	  return |-|1;
0x21e5d:	jmp 0x224dd                         
0x21e62:	add dword ptr [rbp - 0x8c], 1       #	  print_only|+|+;
MEMORY OFFSET:     -0x8c     -140  >>-132

0x21e69:	jmp 0x2242c                         #	  |b|reak;
0x21e6e:	mov rax, qword ptr [rbp - 0x58]     #	  tstr = |s|trrchr (temp, '/');
MEMORY OFFSET:     -0x58     -88  >>-80

0x21e72:	mov esi, 0x2f                       
0x21e77:	mov rdi, rax                        
0x21e7a:	call 0x49e0                         
0x21e7f:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x21e83:	cmp qword ptr [rbp - 0x40], 0       #	  if |(|tstr)
MEMORY OFFSET:     -0x40     -64  >>-56

0x21e88:	je 0x2241f                          
0x21e8e:	add qword ptr [rbp - 0x40], 1       #	      tstr|+|+;
MEMORY OFFSET:     -0x40     -64  >>-56

0x21e93:	mov rax, qword ptr [rbp - 0x40]     #	      t = |s|avestring (tstr);
MEMORY OFFSET:     -0x40     -64  >>-56

0x21e97:	mov rdi, rax                        
0x21e9a:	call 0x4960                         
0x21e9f:	add rax, 1                          
0x21ea3:	mov rdi, rax                        
0x21ea6:	call 0x24650                        
0x21eab:	mov rdx, rax                        
0x21eae:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x21eb2:	mov rsi, rax                        
0x21eb5:	mov rdi, rdx                        
0x21eb8:	call 0x4870                         
0x21ebd:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x21ec1:	mov rax, qword ptr [rbp - 0x58]     #	      |x|free (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x21ec5:	mov rdi, rax                        
0x21ec8:	call 0x1eeae                        
0x21ecd:	mov rax, qword ptr [rbp - 0x38]     #	      temp |=| t;
MEMORY OFFSET:     -0x38     -56  >>-48

0x21ed1:	mov qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x21ed5:	jmp 0x2241f                         #	  |b|reak;
0x21eda:	mov rax, qword ptr [rbp - 0x58]     #	  tstr = |s|trrchr (temp, '/');
MEMORY OFFSET:     -0x58     -88  >>-80

0x21ede:	mov esi, 0x2f                       
0x21ee3:	mov rdi, rax                        
0x21ee6:	call 0x49e0                         
0x21eeb:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x21eef:	cmp qword ptr [rbp - 0x40], 0       #	  if |(|tstr)
MEMORY OFFSET:     -0x40     -64  >>-56

0x21ef4:	je 0x22422                          
0x21efa:	mov rax, qword ptr [rbp - 0x40]     #	    *tstr |=| '\0';
MEMORY OFFSET:     -0x40     -64  >>-56

0x21efe:	mov byte ptr [rax], 0               
0x21f01:	jmp 0x22422                         #	  |b|reak;
0x21f06:	mov rax, qword ptr [rbp - 0x58]     #	  tstr = |s|trrchr (temp, '.');
MEMORY OFFSET:     -0x58     -88  >>-80

0x21f0a:	mov esi, 0x2e                       
0x21f0f:	mov rdi, rax                        
0x21f12:	call 0x49e0                         
0x21f17:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x21f1b:	cmp qword ptr [rbp - 0x40], 0       #	  if |(|tstr)
MEMORY OFFSET:     -0x40     -64  >>-56

0x21f20:	je 0x22425                          
0x21f26:	mov rax, qword ptr [rbp - 0x40]     #	    *tstr |=| '\0';
MEMORY OFFSET:     -0x40     -64  >>-56

0x21f2a:	mov byte ptr [rax], 0               
0x21f2d:	jmp 0x22425                         #	  |b|reak;
0x21f32:	mov rax, qword ptr [rbp - 0x58]     #	  tstr = |s|trrchr (temp, '.');
MEMORY OFFSET:     -0x58     -88  >>-80

0x21f36:	mov esi, 0x2e                       
0x21f3b:	mov rdi, rax                        
0x21f3e:	call 0x49e0                         
0x21f43:	mov qword ptr [rbp - 0x40], rax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x21f47:	cmp qword ptr [rbp - 0x40], 0       #	  if |(|tstr)
MEMORY OFFSET:     -0x40     -64  >>-56

0x21f4c:	je 0x22428                          
0x21f52:	mov rax, qword ptr [rbp - 0x40]     #	      t = |s|avestring (tstr);
MEMORY OFFSET:     -0x40     -64  >>-56

0x21f56:	mov rdi, rax                        
0x21f59:	call 0x4960                         
0x21f5e:	add rax, 1                          
0x21f62:	mov rdi, rax                        
0x21f65:	call 0x24650                        
0x21f6a:	mov rdx, rax                        
0x21f6d:	mov rax, qword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x21f71:	mov rsi, rax                        
0x21f74:	mov rdi, rdx                        
0x21f77:	call 0x4870                         
0x21f7c:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x21f80:	mov rax, qword ptr [rbp - 0x58]     #	      |x|free (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x21f84:	mov rdi, rax                        
0x21f87:	call 0x1eeae                        
0x21f8c:	mov rax, qword ptr [rbp - 0x38]     #	      temp |=| t;
MEMORY OFFSET:     -0x38     -56  >>-48

0x21f90:	mov qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x21f94:	jmp 0x22428                         #	  |b|reak;
0x21f99:	cmp byte ptr [rbp - 0x99], 0x73     #	    if |(|c == 's')
MEMORY OFFSET:     -0x99     -153  >>-145

0x21fa0:	jne 0x221a3                         
0x21fa6:	mov eax, dword ptr [rbp - 0x98]     #		if (i |+| 2 < (int)strlen (string))
MEMORY OFFSET:     -0x98     -152  >>-144

0x21fac:	lea ebx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x21faf:	mov rax, qword ptr [rbp - 0xa8]     #		if (i + 2 < (int)|s|trlen (string))
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21fb6:	mov rdi, rax                        
0x21fb9:	call 0x4960                         
0x21fbe:	cmp ebx, eax                        #		if |(|i + 2 < (int)strlen (string))
0x21fc0:	jge 0x2242b                         
0x21fc6:	mov eax, dword ptr [rbp - 0x98]     #		  delimiter = string|[|i + 2];
MEMORY OFFSET:     -0x98     -152  >>-144

0x21fcc:	cdqe                                
0x21fce:	lea rdx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x21fd2:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x21fd9:	add rax, rdx                        
0x21fdc:	movzx eax, byte ptr [rax]           
0x21fdf:	movsx eax, al                       #		  delimiter |=| string[i + 2];
0x21fe2:	mov dword ptr [rbp - 0x68], eax     
MEMORY OFFSET:     -0x68     -104  >>-96

0x21fe5:	mov eax, dword ptr [rbp - 0x98]     #		i |+|= 3;
MEMORY OFFSET:     -0x98     -152  >>-144

0x21feb:	add eax, 3                          
0x21fee:	mov dword ptr [rbp - 0x98], eax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x21ff4:	mov edx, dword ptr [rbp - 0x68]     #		t = |g|et_subst_pattern (string, &i, delimiter, 0, &subst_lhs_len);
MEMORY OFFSET:     -0x68     -104  >>-96

0x21ff7:	lea rsi, [rbp - 0x98]               
MEMORY OFFSET:     -0x98     -152  >>-144

0x21ffe:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x22005:	lea r8, [rip + 0xfafc]              
MEMORY OFFSET:     0xfafc     64252  >>64260

0x2200c:	mov ecx, 0                          
0x22011:	mov rdi, rax                        
0x22014:	mov eax, 0                          
0x22019:	call 0x2173c                        
0x2201e:	mov qword ptr [rbp - 0x30], rax     
MEMORY OFFSET:     -0x30     -48  >>-40

0x22022:	cmp qword ptr [rbp - 0x30], 0       #		if |(|t)
MEMORY OFFSET:     -0x30     -48  >>-40

0x22027:	je 0x22054                          
0x22029:	mov rax, qword ptr [rip + 0xfac8]   #		    if (|s|ubst_lhs)
MEMORY OFFSET:     0xfac8     64200  >>64208

0x22030:	test rax, rax                       #		    if |(|subst_lhs)
0x22033:	je 0x22044                          
0x22035:	mov rax, qword ptr [rip + 0xfabc]   #		      |x|free (subst_lhs);
MEMORY OFFSET:     0xfabc     64188  >>64196

0x2203c:	mov rdi, rax                        
0x2203f:	call 0x1eeae                        
0x22044:	mov rax, qword ptr [rbp - 0x30]     #		    subst_lhs |=| t;
MEMORY OFFSET:     -0x30     -48  >>-40

0x22048:	mov qword ptr [rip + 0xfaa9], rax   
MEMORY OFFSET:     0xfaa9     64169  >>64177

0x2204f:	jmp 0x220da                         
0x22054:	mov rax, qword ptr [rip + 0xfa9d]   #		else if (|!|subst_lhs)
MEMORY OFFSET:     0xfa9d     64157  >>64165

0x2205b:	test rax, rax                       #		else if |(|!subst_lhs)
0x2205e:	jne 0x220da                         
0x22060:	mov rax, qword ptr [rip + 0xfac9]   #		    if (|s|earch_string && *search_string)
MEMORY OFFSET:     0xfac9     64201  >>64209

0x22067:	test rax, rax                       #		    if |(|search_string && *search_string)
0x2206a:	je 0x220c5                          
0x2206c:	mov rax, qword ptr [rip + 0xfabd]   #		    if (search_string && |*|search_string)
MEMORY OFFSET:     0xfabd     64189  >>64197

0x22073:	movzx eax, byte ptr [rax]           
0x22076:	test al, al                         #		    if (search_string |&|& *search_string)
0x22078:	je 0x220c5                          
0x2207a:	mov rbx, qword ptr [rip + 0xfaaf]   #			subst_lhs = |s|avestring (search_string);
MEMORY OFFSET:     0xfaaf     64175  >>64183

0x22081:	mov rax, qword ptr [rip + 0xfaa8]   
MEMORY OFFSET:     0xfaa8     64168  >>64176

0x22088:	mov rdi, rax                        
0x2208b:	call 0x4960                         
0x22090:	add rax, 1                          
0x22094:	mov rdi, rax                        
0x22097:	call 0x24650                        
0x2209c:	mov rsi, rbx                        
0x2209f:	mov rdi, rax                        
0x220a2:	call 0x4870                         
0x220a7:	mov qword ptr [rip + 0xfa4a], rax   #			subst_lhs |=| savestring (search_string);
MEMORY OFFSET:     0xfa4a     64074  >>64082

0x220ae:	mov rax, qword ptr [rip + 0xfa43]   #			subst_lhs_len = |s|trlen (subst_lhs);
MEMORY OFFSET:     0xfa43     64067  >>64075

0x220b5:	mov rdi, rax                        
0x220b8:	call 0x4960                         
0x220bd:	mov dword ptr [rip + 0xfa45], eax   #			subst_lhs_len |=| strlen (subst_lhs);
MEMORY OFFSET:     0xfa45     64069  >>64077

0x220c3:	jmp 0x220da                         
0x220c5:	mov qword ptr [rip + 0xfa28], 0     #			subst_lhs |=| (char *) NULL;
MEMORY OFFSET:     0xfa28     64040  >>64048

0x220d0:	mov dword ptr [rip + 0xfa2e], 0     #			subst_lhs_len |=| 0;
MEMORY OFFSET:     0xfa2e     64046  >>64054

0x220da:	mov eax, dword ptr [rip + 0xfa28]   #		if (subst_lhs_len |=|= 0)
MEMORY OFFSET:     0xfa28     64040  >>64048

0x220e0:	test eax, eax                       #		if |(|subst_lhs_len == 0)
0x220e2:	jne 0x22132                         
0x220e4:	mov edx, dword ptr [rbp - 0x98]     #		    *ret_string = |h|ist_error (string, starting_index, i, SUBST_FAILED);
MEMORY OFFSET:     -0x98     -152  >>-144

0x220ea:	mov esi, dword ptr [rbp - 0x74]     
MEMORY OFFSET:     -0x74     -116  >>-108

0x220ed:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x220f4:	mov ecx, 2                          
0x220f9:	mov rdi, rax                        
0x220fc:	mov eax, 0                          
0x22101:	call 0x2160e                        
0x22106:	mov rdx, qword ptr [rbp - 0xc0]     #		    *ret_string |=| hist_error (string, starting_index, i, SUBST_FAILED);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x2210d:	mov qword ptr [rdx], rax            
0x22110:	mov rax, qword ptr [rbp - 0x50]     #		    |x|free (result);
MEMORY OFFSET:     -0x50     -80  >>-72

0x22114:	mov rdi, rax                        
0x22117:	call 0x1eeae                        
0x2211c:	mov rax, qword ptr [rbp - 0x58]     #		    |x|free (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x22120:	mov rdi, rax                        
0x22123:	call 0x1eeae                        
0x22128:	mov eax, 0xffffffff                 #		    return |-|1;
0x2212d:	jmp 0x224dd                         
0x22132:	mov rax, qword ptr [rip + 0xf9c7]   #		if (|s|ubst_rhs)
MEMORY OFFSET:     0xf9c7     63943  >>63951

0x22139:	test rax, rax                       #		if |(|subst_rhs)
0x2213c:	je 0x2214d                          
0x2213e:	mov rax, qword ptr [rip + 0xf9bb]   #		  |x|free (subst_rhs);
MEMORY OFFSET:     0xf9bb     63931  >>63939

0x22145:	mov rdi, rax                        
0x22148:	call 0x1eeae                        
0x2214d:	mov edx, dword ptr [rbp - 0x68]     #		subst_rhs = |g|et_subst_pattern (string, &i, delimiter, 1, &subst_rhs_len);
MEMORY OFFSET:     -0x68     -104  >>-96

0x22150:	lea rsi, [rbp - 0x98]               
MEMORY OFFSET:     -0x98     -152  >>-144

0x22157:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x2215e:	lea r8, [rip + 0xf9a7]              
MEMORY OFFSET:     0xf9a7     63911  >>63919

0x22165:	mov ecx, 1                          
0x2216a:	mov rdi, rax                        
0x2216d:	mov eax, 0                          
0x22172:	call 0x2173c                        
0x22177:	mov qword ptr [rip + 0xf982], rax   #		subst_rhs |=| get_subst_pattern (string, &i, delimiter, 1, &subst_rhs_len);
MEMORY OFFSET:     0xf982     63874  >>63882

0x2217e:	mov rax, qword ptr [rip + 0xf97b]   #		if (|m|ember ('&', subst_rhs))
MEMORY OFFSET:     0xf97b     63867  >>63875

0x22185:	mov esi, 0x26                       
0x2218a:	mov rdi, rax                        
0x2218d:	call 0x49b0                         
0x22192:	test rax, rax                       #		if |(|member ('&', subst_rhs))
0x22195:	je 0x221b2                          
0x22197:	mov eax, 0                          #		  |p|ostproc_subst_rhs ();
0x2219c:	call 0x21893                        
0x221a1:	jmp 0x221b2                         
0x221a3:	mov eax, dword ptr [rbp - 0x98]     #	      i |+|= 2;
MEMORY OFFSET:     -0x98     -152  >>-144

0x221a9:	add eax, 2                          
0x221ac:	mov dword ptr [rbp - 0x98], eax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x221b2:	mov rax, qword ptr [rbp - 0x58]     #	    l_temp = |s|trlen (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x221b6:	mov rdi, rax                        
0x221b9:	call 0x4960                         
0x221be:	mov dword ptr [rbp - 0x7c], eax     #	    l_temp |=| strlen (temp);
MEMORY OFFSET:     -0x7c     -124  >>-116

0x221c1:	mov eax, dword ptr [rip + 0xf941]   #	    if (subst_lhs_len |>| l_temp)
MEMORY OFFSET:     0xf941     63809  >>63817

0x221c7:	cmp dword ptr [rbp - 0x7c], eax     #	    if |(|subst_lhs_len > l_temp)
MEMORY OFFSET:     -0x7c     -124  >>-116

0x221ca:	jge 0x2221a                         
0x221cc:	mov edx, dword ptr [rbp - 0x98]     #		*ret_string = |h|ist_error (string, starting_index, i, SUBST_FAILED);
MEMORY OFFSET:     -0x98     -152  >>-144

0x221d2:	mov esi, dword ptr [rbp - 0x74]     
MEMORY OFFSET:     -0x74     -116  >>-108

0x221d5:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x221dc:	mov ecx, 2                          
0x221e1:	mov rdi, rax                        
0x221e4:	mov eax, 0                          
0x221e9:	call 0x2160e                        
0x221ee:	mov rdx, qword ptr [rbp - 0xc0]     #		*ret_string |=| hist_error (string, starting_index, i, SUBST_FAILED);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x221f5:	mov qword ptr [rdx], rax            
0x221f8:	mov rax, qword ptr [rbp - 0x50]     #		|x|free (result);
MEMORY OFFSET:     -0x50     -80  >>-72

0x221fc:	mov rdi, rax                        
0x221ff:	call 0x1eeae                        
0x22204:	mov rax, qword ptr [rbp - 0x58]     #		|x|free (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x22208:	mov rdi, rax                        
0x2220b:	call 0x1eeae                        
0x22210:	mov eax, 0xffffffff                 #		return |(|-1);
0x22215:	jmp 0x224dd                         
0x2221a:	mov dword ptr [rbp - 0x80], 0       #	    si |=| 0;
MEMORY OFFSET:     -0x80     -128  >>-120

0x22221:	mov dword ptr [rbp - 0x84], 1       #	    for (failed |=| 1; (si + subst_lhs_len) <= l_temp; si++)
MEMORY OFFSET:     -0x84     -132  >>-124

0x2222b:	jmp 0x2239a                         #	    |f|or (failed = 1; (si + subst_lhs_len) <= l_temp; si++)
0x22230:	mov eax, dword ptr [rbp - 0x80]     #	      if (|S|TREQN (temp+si, subst_lhs, subst_lhs_len))
MEMORY OFFSET:     -0x80     -128  >>-120

0x22233:	movsxd rdx, eax                     
0x22236:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2223a:	add rax, rdx                        
0x2223d:	movzx edx, byte ptr [rax]           
0x22240:	mov rax, qword ptr [rip + 0xf8b1]   
MEMORY OFFSET:     0xf8b1     63665  >>63673

0x22247:	movzx eax, byte ptr [rax]           
0x2224a:	cmp dl, al                          #	      if |(|STREQN (temp+si, subst_lhs, subst_lhs_len))
0x2224c:	jne 0x22396                         
0x22252:	mov eax, dword ptr [rip + 0xf8b0]   #	      if (|S|TREQN (temp+si, subst_lhs, subst_lhs_len))
MEMORY OFFSET:     0xf8b0     63664  >>63672

0x22258:	movsxd rdx, eax                     
0x2225b:	mov rax, qword ptr [rip + 0xf896]   
MEMORY OFFSET:     0xf896     63638  >>63646

0x22262:	mov ecx, dword ptr [rbp - 0x80]     
MEMORY OFFSET:     -0x80     -128  >>-120

0x22265:	movsxd rsi, ecx                     
0x22268:	mov rcx, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2226c:	add rcx, rsi                        
0x2226f:	mov rsi, rax                        
0x22272:	mov rdi, rcx                        
0x22275:	call 0x4850                         
0x2227a:	test eax, eax                       
0x2227c:	jne 0x22396                         
0x22282:	mov eax, dword ptr [rip + 0xf884]   #		  int len = subst_rhs_len |-| subst_lhs_len + l_temp;
MEMORY OFFSET:     0xf884     63620  >>63628

0x22288:	mov edx, dword ptr [rip + 0xf87a]   
MEMORY OFFSET:     0xf87a     63610  >>63618

0x2228e:	sub eax, edx                        
0x22290:	mov ecx, eax                        
0x22292:	mov eax, dword ptr [rbp - 0x7c]     #		  int |l|en = subst_rhs_len - subst_lhs_len + l_temp;
MEMORY OFFSET:     -0x7c     -124  >>-116

0x22295:	add eax, ecx                        
0x22297:	mov dword ptr [rbp - 0x64], eax     
MEMORY OFFSET:     -0x64     -100  >>-92

0x2229a:	mov eax, dword ptr [rbp - 0x64]     #		  new_event = xmalloc (1 |+| len);
MEMORY OFFSET:     -0x64     -100  >>-92

0x2229d:	add eax, 1                          
0x222a0:	cdqe                                #		  new_event = |x|malloc (1 + len);
0x222a2:	mov rdi, rax                        
0x222a5:	call 0x24650                        
0x222aa:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x222ae:	mov eax, dword ptr [rbp - 0x80]     #		  |s|trncpy (new_event, temp, si);
MEMORY OFFSET:     -0x80     -128  >>-120

0x222b1:	movsxd rdx, eax                     
0x222b4:	mov rcx, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x222b8:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x222bc:	mov rsi, rcx                        
0x222bf:	mov rdi, rax                        
0x222c2:	call 0x4840                         
0x222c7:	mov eax, dword ptr [rip + 0xf83f]   #		  |s|trncpy (new_event + si, subst_rhs, subst_rhs_len);
MEMORY OFFSET:     0xf83f     63551  >>63559

0x222cd:	movsxd rdx, eax                     
0x222d0:	mov rax, qword ptr [rip + 0xf829]   
MEMORY OFFSET:     0xf829     63529  >>63537

0x222d7:	mov ecx, dword ptr [rbp - 0x80]     
MEMORY OFFSET:     -0x80     -128  >>-120

0x222da:	movsxd rsi, ecx                     
0x222dd:	mov rcx, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x222e1:	add rcx, rsi                        
0x222e4:	mov rsi, rax                        
0x222e7:	mov rdi, rcx                        
0x222ea:	call 0x4840                         
0x222ef:	mov edx, dword ptr [rip + 0xf813]   #			   l_temp - (si |+| subst_lhs_len));
MEMORY OFFSET:     0xf813     63507  >>63515

0x222f5:	mov eax, dword ptr [rbp - 0x80]     
MEMORY OFFSET:     -0x80     -128  >>-120

0x222f8:	add edx, eax                        
0x222fa:	mov eax, dword ptr [rbp - 0x7c]     #			   l_temp |-| (si + subst_lhs_len));
MEMORY OFFSET:     -0x7c     -124  >>-116

0x222fd:	sub eax, edx                        
0x222ff:	cdqe                                #		  |s|trncpy (new_event + si + subst_rhs_len,
0x22301:	mov edx, dword ptr [rbp - 0x80]     #			   temp + si |+| subst_lhs_len,
MEMORY OFFSET:     -0x80     -128  >>-120

0x22304:	movsxd rcx, edx                     
0x22307:	mov edx, dword ptr [rip + 0xf7fb]   
MEMORY OFFSET:     0xf7fb     63483  >>63491

0x2230d:	movsxd rdx, edx                     
0x22310:	add rcx, rdx                        
0x22313:	mov rdx, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x22317:	lea rsi, [rcx + rdx]                
0x2231b:	mov edx, dword ptr [rbp - 0x80]     #		  strncpy (new_event + si |+| subst_rhs_len,
MEMORY OFFSET:     -0x80     -128  >>-120

0x2231e:	movsxd rcx, edx                     
0x22321:	mov edx, dword ptr [rip + 0xf7e5]   
MEMORY OFFSET:     0xf7e5     63461  >>63469

0x22327:	movsxd rdx, edx                     
0x2232a:	add rcx, rdx                        
0x2232d:	mov rdx, qword ptr [rbp - 0x28]     #		  |s|trncpy (new_event + si + subst_rhs_len,
MEMORY OFFSET:     -0x28     -40  >>-32

0x22331:	add rcx, rdx                        
0x22334:	mov rdx, rax                        
0x22337:	mov rdi, rcx                        
0x2233a:	call 0x4840                         
0x2233f:	mov eax, dword ptr [rbp - 0x64]     #		  new_event|[|len] = '\0';
MEMORY OFFSET:     -0x64     -100  >>-92

0x22342:	movsxd rdx, eax                     
0x22345:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x22349:	add rax, rdx                        
0x2234c:	mov byte ptr [rax], 0               #		  new_event[len] |=| '\0';
0x2234f:	mov rax, qword ptr [rbp - 0x58]     #		  |x|free (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x22353:	mov rdi, rax                        
0x22356:	call 0x1eeae                        
0x2235b:	mov rax, qword ptr [rbp - 0x28]     #		  temp |=| new_event;
MEMORY OFFSET:     -0x28     -40  >>-32

0x2235f:	mov qword ptr [rbp - 0x58], rax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x22363:	mov dword ptr [rbp - 0x84], 0       #		  failed |=| 0;
MEMORY OFFSET:     -0x84     -132  >>-124

0x2236d:	cmp dword ptr [rbp - 0x90], 0       #		  if |(|substitute_globally)
MEMORY OFFSET:     -0x90     -144  >>-136

0x22374:	je 0x223b0                          
0x22376:	mov eax, dword ptr [rip + 0xf790]   #		      si |+|= subst_rhs_len;
MEMORY OFFSET:     0xf790     63376  >>63384

0x2237c:	add dword ptr [rbp - 0x80], eax     
MEMORY OFFSET:     -0x80     -128  >>-120

0x2237f:	mov rax, qword ptr [rbp - 0x58]     #		      l_temp = |s|trlen (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x22383:	mov rdi, rax                        
0x22386:	call 0x4960                         
0x2238b:	mov dword ptr [rbp - 0x7c], eax     #		      l_temp |=| strlen (temp);
MEMORY OFFSET:     -0x7c     -124  >>-116

0x2238e:	add dword ptr [rbp - 0x90], 1       #		      substitute_globally|+|+;
MEMORY OFFSET:     -0x90     -144  >>-136

0x22395:	nop                                 #		      |c|ontinue;
0x22396:	add dword ptr [rbp - 0x80], 1       #	    for (failed = 1; (si + subst_lhs_len) <= l_temp; si|+|+)
MEMORY OFFSET:     -0x80     -128  >>-120

0x2239a:	mov edx, dword ptr [rip + 0xf768]   #	    for (failed = 1; (si |+| subst_lhs_len) <= l_temp; si++)
MEMORY OFFSET:     0xf768     63336  >>63344

0x223a0:	mov eax, dword ptr [rbp - 0x80]     
MEMORY OFFSET:     -0x80     -128  >>-120

0x223a3:	add eax, edx                        
0x223a5:	cmp dword ptr [rbp - 0x7c], eax     #	    for (failed = 1; (si + subst_lhs_len) |<|= l_temp; si++)
MEMORY OFFSET:     -0x7c     -124  >>-116

0x223a8:	jge 0x22230                         
0x223ae:	jmp 0x223b1                         
0x223b0:	nop                                 #		    |b|reak;
0x223b1:	cmp dword ptr [rbp - 0x90], 1       #	    if |(|substitute_globally > 1)
MEMORY OFFSET:     -0x90     -144  >>-136

0x223b8:	jle 0x223c6                         
0x223ba:	mov dword ptr [rbp - 0x90], 0       #		substitute_globally |=| 0;
MEMORY OFFSET:     -0x90     -144  >>-136

0x223c4:	jmp 0x2243b                         #		|c|ontinue;       /* don't want to increment i */
0x223c6:	cmp dword ptr [rbp - 0x84], 0       #	    if |(|failed == 0)
MEMORY OFFSET:     -0x84     -132  >>-124

0x223cd:	jne 0x223d1                         
0x223cf:	jmp 0x2243b                         #	      |c|ontinue;         /* don't want to increment i */
0x223d1:	mov edx, dword ptr [rbp - 0x98]     #	    *ret_string = |h|ist_error (string, starting_index, i, SUBST_FAILED);
MEMORY OFFSET:     -0x98     -152  >>-144

0x223d7:	mov esi, dword ptr [rbp - 0x74]     
MEMORY OFFSET:     -0x74     -116  >>-108

0x223da:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x223e1:	mov ecx, 2                          
0x223e6:	mov rdi, rax                        
0x223e9:	mov eax, 0                          
0x223ee:	call 0x2160e                        
0x223f3:	mov rdx, qword ptr [rbp - 0xc0]     #	    *ret_string |=| hist_error (string, starting_index, i, SUBST_FAILED);
MEMORY OFFSET:     -0xc0     -192  >>-184

0x223fa:	mov qword ptr [rdx], rax            
0x223fd:	mov rax, qword ptr [rbp - 0x50]     #	    |x|free (result);
MEMORY OFFSET:     -0x50     -80  >>-72

0x22401:	mov rdi, rax                        
0x22404:	call 0x1eeae                        
0x22409:	mov rax, qword ptr [rbp - 0x58]     #	    |x|free (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x2240d:	mov rdi, rax                        
0x22410:	call 0x1eeae                        
0x22415:	mov eax, 0xffffffff                 #	    return |(|-1);
0x2241a:	jmp 0x224dd                         
0x2241f:	nop                                 #	  |b|reak;
0x22420:	jmp 0x2242c                         
0x22422:	nop                                 #	  |b|reak;
0x22423:	jmp 0x2242c                         
0x22425:	nop                                 #	  |b|reak;
0x22426:	jmp 0x2242c                         
0x22428:	nop                                 #	  |b|reak;
0x22429:	jmp 0x2242c                         
0x2242b:	nop                                 #		  |b|reak;        /* no search delimiter */
0x2242c:	mov eax, dword ptr [rbp - 0x98]     #      i |+|= 2;
MEMORY OFFSET:     -0x98     -152  >>-144

0x22432:	add eax, 2                          
0x22435:	mov dword ptr [rbp - 0x98], eax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x2243b:	mov eax, dword ptr [rbp - 0x98]     #  while (string|[|i] == ':')
MEMORY OFFSET:     -0x98     -152  >>-144

0x22441:	movsxd rdx, eax                     
0x22444:	mov rax, qword ptr [rbp - 0xa8]     
MEMORY OFFSET:     -0xa8     -168  >>-160

0x2244b:	add rax, rdx                        
0x2244e:	movzx eax, byte ptr [rax]           
0x22451:	cmp al, 0x3a                        #  while (string[i] |=|= ':')
0x22453:	je 0x21d61                          
0x22459:	mov eax, dword ptr [rbp - 0x98]     #  |-|-i;
MEMORY OFFSET:     -0x98     -152  >>-144

0x2245f:	sub eax, 1                          
0x22462:	mov dword ptr [rbp - 0x98], eax     
MEMORY OFFSET:     -0x98     -152  >>-144

0x22468:	mov rax, qword ptr [rbp - 0x58]     #  n = |s|trlen (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x2246c:	mov rdi, rax                        
0x2246f:	call 0x4960                         
0x22474:	mov dword ptr [rbp - 0x6c], eax     #  n |=| strlen (temp);
MEMORY OFFSET:     -0x6c     -108  >>-100

0x22477:	mov eax, dword ptr [rbp - 0x6c]     #  if |(|n > result_len)
MEMORY OFFSET:     -0x6c     -108  >>-100

0x2247a:	cmp eax, dword ptr [rbp - 0x78]     
MEMORY OFFSET:     -0x78     -120  >>-112

0x2247d:	jle 0x2249b                         
0x2247f:	mov eax, dword ptr [rbp - 0x6c]     #    result = xrealloc (result, n |+| 1);
MEMORY OFFSET:     -0x6c     -108  >>-100

0x22482:	add eax, 1                          
0x22485:	movsxd rdx, eax                     #    result = |x|realloc (result, n + 1);
0x22488:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x2248c:	mov rsi, rdx                        
0x2248f:	mov rdi, rax                        
0x22492:	call 0x24670                        
0x22497:	mov qword ptr [rbp - 0x50], rax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x2249b:	mov rdx, qword ptr [rbp - 0x58]     #  |s|trcpy (result, temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x2249f:	mov rax, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x224a3:	mov rsi, rdx                        
0x224a6:	mov rdi, rax                        
0x224a9:	call 0x4870                         
0x224ae:	mov rax, qword ptr [rbp - 0x58]     #  |x|free (temp);
MEMORY OFFSET:     -0x58     -88  >>-80

0x224b2:	mov rdi, rax                        
0x224b5:	call 0x1eeae                        
0x224ba:	mov edx, dword ptr [rbp - 0x98]     #  *end_index_ptr |=| i;
MEMORY OFFSET:     -0x98     -152  >>-144

0x224c0:	mov rax, qword ptr [rbp - 0xb8]     
MEMORY OFFSET:     -0xb8     -184  >>-176

0x224c7:	mov dword ptr [rax], edx            
0x224c9:	mov rax, qword ptr [rbp - 0xc0]     #  *ret_string |=| result;
MEMORY OFFSET:     -0xc0     -192  >>-184

0x224d0:	mov rdx, qword ptr [rbp - 0x50]     
MEMORY OFFSET:     -0x50     -80  >>-72

0x224d4:	mov qword ptr [rax], rdx            
0x224d7:	mov eax, dword ptr [rbp - 0x8c]     #  return |(|print_only);
MEMORY OFFSET:     -0x8c     -140  >>-132

0x224dd:	mov rdx, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x224e1:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x224ea:	je 0x224f1                          
0x224ec:	call 0x4980                         #|}|
0x224f1:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x224f5:	leave                               
0x224f6:	ret                                 
0x224f7:	endbr64                             #|{|
0x224fb:	push rbp                            
0x224fc:	mov rbp, rsp                        
0x224ff:	push rbx                            
0x22500:	sub rsp, 0x68                       
0x22504:	mov qword ptr [rbp - 0x68], rdi     
MEMORY OFFSET:     -0x68     -104  >>-96

0x22508:	mov qword ptr [rbp - 0x70], rsi     
MEMORY OFFSET:     -0x70     -112  >>-104

0x2250c:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x22515:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x22519:	xor eax, eax                        
0x2251b:	movzx eax, byte ptr [rip + 0xe316]  #  if (history_expansion_char |=|= 0)
MEMORY OFFSET:     0xe316     58134  >>58142

0x22522:	test al, al                         #  if |(|history_expansion_char == 0)
0x22524:	jne 0x22561                         
0x22526:	mov rax, qword ptr [rbp - 0x68]     #      *output = |s|avestring (hstring);
MEMORY OFFSET:     -0x68     -104  >>-96

0x2252a:	mov rdi, rax                        
0x2252d:	call 0x4960                         
0x22532:	add rax, 1                          
0x22536:	mov rdi, rax                        
0x22539:	call 0x24650                        
0x2253e:	mov rdx, rax                        
0x22541:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x22545:	mov rsi, rax                        
0x22548:	mov rdi, rdx                        
0x2254b:	call 0x4870                         
0x22550:	mov rdx, qword ptr [rbp - 0x70]     #      *output |=| savestring (hstring);
MEMORY OFFSET:     -0x70     -112  >>-104

0x22554:	mov qword ptr [rdx], rax            
0x22557:	mov eax, 0                          #      return |(|0);
0x2255c:	jmp 0x22a19                         
0x22561:	mov dword ptr [rbp - 0x44], 0x100   #  result = xmalloc (result_len |=| 256);
MEMORY OFFSET:     -0x44     -68  >>-60

0x22568:	mov edi, 0x100                      #  result = |x|malloc (result_len = 256);
0x2256d:	call 0x24650                        
0x22572:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22576:	mov rax, qword ptr [rbp - 0x20]     #  result[0] |=| '\0';
MEMORY OFFSET:     -0x20     -32  >>-24

0x2257a:	mov byte ptr [rax], 0               
0x2257d:	mov dword ptr [rbp - 0x4c], 0       #  only_printing = modified |=| 0;
MEMORY OFFSET:     -0x4c     -76  >>-68

0x22584:	mov eax, dword ptr [rbp - 0x4c]     #  only_printing |=| modified = 0;
MEMORY OFFSET:     -0x4c     -76  >>-68

0x22587:	mov dword ptr [rbp - 0x48], eax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x2258a:	mov rax, qword ptr [rbp - 0x68]     #  l = |s|trlen (hstring);
MEMORY OFFSET:     -0x68     -104  >>-96

0x2258e:	mov rdi, rax                        
0x22591:	call 0x4960                         
0x22596:	mov dword ptr [rbp - 0x54], eax     #  l |=| strlen (hstring);
MEMORY OFFSET:     -0x54     -84  >>-76

0x22599:	mov rax, qword ptr [rbp - 0x68]     #  if (hstring|[|0] == history_subst_char)
MEMORY OFFSET:     -0x68     -104  >>-96

0x2259d:	movzx edx, byte ptr [rax]           
0x225a0:	movzx eax, byte ptr [rip + 0xe292]  #  if (hstring[0] |=|= history_subst_char)
MEMORY OFFSET:     0xe292     58002  >>58010

0x225a7:	cmp dl, al                          #  if |(|hstring[0] == history_subst_char)
0x225a9:	jne 0x2260f                         
0x225ab:	mov eax, dword ptr [rbp - 0x54]     #      string = xmalloc (l |+| 5);
MEMORY OFFSET:     -0x54     -84  >>-76

0x225ae:	add eax, 5                          
0x225b1:	cdqe                                #      string = |x|malloc (l + 5);
0x225b3:	mov rdi, rax                        
0x225b6:	call 0x24650                        
0x225bb:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x225bf:	mov rax, qword ptr [rbp - 0x28]     #      string[0] = string|[|1] = history_expansion_char;
MEMORY OFFSET:     -0x28     -40  >>-32

0x225c3:	add rax, 1                          
0x225c7:	movzx edx, byte ptr [rip + 0xe26a]  #      string[0] = string[1] |=| history_expansion_char;
MEMORY OFFSET:     0xe26a     57962  >>57970

0x225ce:	mov byte ptr [rax], dl              
0x225d0:	movzx edx, byte ptr [rax]           #      string[0] = string|[|1] = history_expansion_char;
0x225d3:	mov rax, qword ptr [rbp - 0x28]     #      string[0] |=| string[1] = history_expansion_char;
MEMORY OFFSET:     -0x28     -40  >>-32

0x225d7:	mov byte ptr [rax], dl              
0x225d9:	mov rax, qword ptr [rbp - 0x28]     #      string|[|2] = ':';
MEMORY OFFSET:     -0x28     -40  >>-32

0x225dd:	add rax, 2                          
0x225e1:	mov byte ptr [rax], 0x3a            #      string[2] |=| ':';
0x225e4:	mov rax, qword ptr [rbp - 0x28]     #      string|[|3] = 's';
MEMORY OFFSET:     -0x28     -40  >>-32

0x225e8:	add rax, 3                          
0x225ec:	mov byte ptr [rax], 0x73            #      string[3] |=| 's';
0x225ef:	mov rax, qword ptr [rbp - 0x28]     #      |s|trcpy (string + 4, hstring);
MEMORY OFFSET:     -0x28     -40  >>-32

0x225f3:	lea rdx, [rax + 4]                  
MEMORY OFFSET:     0x4     4  >>12

0x225f7:	mov rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x225fb:	mov rsi, rax                        
0x225fe:	mov rdi, rdx                        
0x22601:	call 0x4870                         
0x22606:	add dword ptr [rbp - 0x54], 4       #      l |+|= 4;
MEMORY OFFSET:     -0x54     -84  >>-76

0x2260a:	jmp 0x226f4                         
0x2260f:	mov rax, qword ptr [rbp - 0x68]     #      string |=| hstring;
MEMORY OFFSET:     -0x68     -104  >>-96

0x22613:	mov qword ptr [rbp - 0x28], rax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x22617:	mov dword ptr [rbp - 0x58], 0       #      for (i |=| 0; string[i]; i++)
MEMORY OFFSET:     -0x58     -88  >>-80

0x2261e:	jmp 0x2267e                         #      |f|or (i = 0; string[i]; i++)
0x22620:	mov eax, dword ptr [rbp - 0x58]     #	  cc = string|[|i + 1];
MEMORY OFFSET:     -0x58     -88  >>-80

0x22623:	cdqe                                
0x22625:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x22629:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x2262d:	add rax, rdx                        
0x22630:	movzx eax, byte ptr [rax]           
0x22633:	movsx eax, al                       #	  cc |=| string[i + 1];
0x22636:	mov dword ptr [rbp - 0x3c], eax     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x22639:	mov eax, dword ptr [rbp - 0x58]     #	  if (string|[|i] == history_expansion_char)
MEMORY OFFSET:     -0x58     -88  >>-80

0x2263c:	movsxd rdx, eax                     
0x2263f:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x22643:	add rax, rdx                        
0x22646:	movzx edx, byte ptr [rax]           
0x22649:	movzx eax, byte ptr [rip + 0xe1e8]  #	  if (string[i] |=|= history_expansion_char)
MEMORY OFFSET:     0xe1e8     57832  >>57840

0x22650:	cmp dl, al                          #	  if |(|string[i] == history_expansion_char)
0x22652:	jne 0x2267a                         
0x22654:	cmp dword ptr [rbp - 0x3c], 0       #	      if |(|!cc || member (cc, history_no_expand_chars))
MEMORY OFFSET:     -0x3c     -60  >>-52

0x22658:	je 0x22679                          
0x2265a:	cmp dword ptr [rbp - 0x3c], 0       #	      if (!cc |||| member (cc, history_no_expand_chars))
MEMORY OFFSET:     -0x3c     -60  >>-52

0x2265e:	je 0x22692                          
0x22660:	mov rax, qword ptr [rip + 0xe1d9]   #	      if (!cc || |m|ember (cc, history_no_expand_chars))
MEMORY OFFSET:     0xe1d9     57817  >>57825

0x22667:	mov edx, dword ptr [rbp - 0x3c]     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x2266a:	mov esi, edx                        
0x2266c:	mov rdi, rax                        
0x2266f:	call 0x49b0                         
0x22674:	test rax, rax                       #	      if (!cc |||| member (cc, history_no_expand_chars))
0x22677:	je 0x22692                          
0x22679:	nop                                 #		|c|ontinue;
0x2267a:	add dword ptr [rbp - 0x58], 1       #      for (i = 0; string[i]; i|+|+)
MEMORY OFFSET:     -0x58     -88  >>-80

0x2267e:	mov eax, dword ptr [rbp - 0x58]     #      for (i = 0; string|[|i]; i++)
MEMORY OFFSET:     -0x58     -88  >>-80

0x22681:	movsxd rdx, eax                     
0x22684:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x22688:	add rax, rdx                        
0x2268b:	movzx eax, byte ptr [rax]           
0x2268e:	test al, al                         #      for (i = 0; |s|tring[i]; i++)
0x22690:	jne 0x22620                         
0x22692:	mov eax, dword ptr [rbp - 0x58]     #      if (string|[|i] != history_expansion_char)
MEMORY OFFSET:     -0x58     -88  >>-80

0x22695:	movsxd rdx, eax                     
0x22698:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x2269c:	add rax, rdx                        
0x2269f:	movzx edx, byte ptr [rax]           
0x226a2:	movzx eax, byte ptr [rip + 0xe18f]  #      if (string[i] |!|= history_expansion_char)
MEMORY OFFSET:     0xe18f     57743  >>57751

0x226a9:	cmp dl, al                          #      if |(|string[i] != history_expansion_char)
0x226ab:	je 0x226f4                          
0x226ad:	mov rax, qword ptr [rbp - 0x20]     #	  |x|free (result);
MEMORY OFFSET:     -0x20     -32  >>-24

0x226b1:	mov rdi, rax                        
0x226b4:	call 0x1eeae                        
0x226b9:	mov rax, qword ptr [rbp - 0x28]     #	  *output = |s|avestring (string);
MEMORY OFFSET:     -0x28     -40  >>-32

0x226bd:	mov rdi, rax                        
0x226c0:	call 0x4960                         
0x226c5:	add rax, 1                          
0x226c9:	mov rdi, rax                        
0x226cc:	call 0x24650                        
0x226d1:	mov rdx, rax                        
0x226d4:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x226d8:	mov rsi, rax                        
0x226db:	mov rdi, rdx                        
0x226de:	call 0x4870                         
0x226e3:	mov rdx, qword ptr [rbp - 0x70]     #	  *output |=| savestring (string);
MEMORY OFFSET:     -0x70     -112  >>-104

0x226e7:	mov qword ptr [rdx], rax            
0x226ea:	mov eax, 0                          #	  return |(|0);
0x226ef:	jmp 0x22a19                         
0x226f4:	mov ebx, 0                          #  for (passc = i = j |=| 0; i < l; i++)
0x226f9:	mov dword ptr [rbp - 0x58], ebx     #  for (passc = i |=| j = 0; i < l; i++)
MEMORY OFFSET:     -0x58     -88  >>-80

0x226fc:	mov eax, dword ptr [rbp - 0x58]     #  for (passc |=| i = j = 0; i < l; i++)
MEMORY OFFSET:     -0x58     -88  >>-80

0x226ff:	mov dword ptr [rbp - 0x50], eax     
MEMORY OFFSET:     -0x50     -80  >>-72

0x22702:	jmp 0x229c4                         #  |f|or (passc = i = j = 0; i < l; i++)
0x22707:	mov eax, dword ptr [rbp - 0x58]     #      int tchar = string|[|i];
MEMORY OFFSET:     -0x58     -88  >>-80

0x2270a:	movsxd rdx, eax                     
0x2270d:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x22711:	add rax, rdx                        
0x22714:	movzx eax, byte ptr [rax]           
0x22717:	movsx eax, al                       #      int |t|char = string[i];
0x2271a:	mov dword ptr [rbp - 0x40], eax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x2271d:	cmp dword ptr [rbp - 0x50], 0       #      if |(|passc)
MEMORY OFFSET:     -0x50     -80  >>-72

0x22721:	je 0x22772                          
0x22723:	mov dword ptr [rbp - 0x50], 0       #	  passc |=| 0;
MEMORY OFFSET:     -0x50     -80  >>-72

0x2272a:	cmp ebx, dword ptr [rbp - 0x44]     #	  |A|DD_CHAR (tchar);
MEMORY OFFSET:     -0x44     -68  >>-60

0x2272d:	jl 0x2274c                          
0x2272f:	add dword ptr [rbp - 0x44], 0x40    #	  |A|DD_CHAR (tchar);
MEMORY OFFSET:     -0x44     -68  >>-60

0x22733:	mov eax, dword ptr [rbp - 0x44]     
MEMORY OFFSET:     -0x44     -68  >>-60

0x22736:	movsxd rdx, eax                     
0x22739:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x2273d:	mov rsi, rdx                        
0x22740:	mov rdi, rax                        
0x22743:	call 0x24670                        
0x22748:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x2274c:	mov eax, ebx                        #	  |A|DD_CHAR (tchar);
0x2274e:	lea ebx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x22751:	movsxd rdx, eax                     
0x22754:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22758:	add rax, rdx                        
0x2275b:	mov edx, dword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x2275e:	mov byte ptr [rax], dl              
0x22760:	movsxd rdx, ebx                     
0x22763:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22767:	add rax, rdx                        
0x2276a:	mov byte ptr [rax], 0               
0x2276d:	jmp 0x229c0                         #	  |c|ontinue;
0x22772:	movzx eax, byte ptr [rip + 0xe0bf]  #      if (tchar |=|= history_expansion_char)
MEMORY OFFSET:     0xe0bf     57535  >>57543

0x22779:	movsx eax, al                       
0x2277c:	cmp dword ptr [rbp - 0x40], eax     #      if |(|tchar == history_expansion_char)
MEMORY OFFSET:     -0x40     -64  >>-56

0x2277f:	jne 0x22788                         
0x22781:	mov dword ptr [rbp - 0x40], 0xfffffffd#	tchar |=| -3;
MEMORY OFFSET:     -0x40     -64  >>-56

0x22788:	cmp dword ptr [rbp - 0x40], -3      #      |s|witch (tchar)
MEMORY OFFSET:     -0x40     -64  >>-56

0x2278c:	je 0x22839                          
0x22792:	cmp dword ptr [rbp - 0x40], 0x5c    
MEMORY OFFSET:     -0x40     -64  >>-56

0x22796:	je 0x227ed                          
0x22798:	cmp ebx, dword ptr [rbp - 0x44]     #	  |A|DD_CHAR (string[i]);
MEMORY OFFSET:     -0x44     -68  >>-60

0x2279b:	jl 0x227ba                          
0x2279d:	add dword ptr [rbp - 0x44], 0x40    #	  |A|DD_CHAR (string[i]);
MEMORY OFFSET:     -0x44     -68  >>-60

0x227a1:	mov eax, dword ptr [rbp - 0x44]     
MEMORY OFFSET:     -0x44     -68  >>-60

0x227a4:	movsxd rdx, eax                     
0x227a7:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x227ab:	mov rsi, rdx                        
0x227ae:	mov rdi, rax                        
0x227b1:	call 0x24670                        
0x227b6:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x227ba:	mov eax, dword ptr [rbp - 0x58]     #	  |A|DD_CHAR (string[i]);
MEMORY OFFSET:     -0x58     -88  >>-80

0x227bd:	movsxd rdx, eax                     
0x227c0:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x227c4:	add rax, rdx                        
0x227c7:	mov edx, ebx                        
0x227c9:	lea ebx, [rdx + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x227cc:	movsxd rcx, edx                     
0x227cf:	mov rdx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x227d3:	add rdx, rcx                        
0x227d6:	movzx eax, byte ptr [rax]           
0x227d9:	mov byte ptr [rdx], al              
0x227db:	movsxd rdx, ebx                     
0x227de:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x227e2:	add rax, rdx                        
0x227e5:	mov byte ptr [rax], 0               
0x227e8:	jmp 0x229c0                         #	  |b|reak;
0x227ed:	add dword ptr [rbp - 0x50], 1       #	  passc|+|+;
MEMORY OFFSET:     -0x50     -80  >>-72

0x227f1:	cmp ebx, dword ptr [rbp - 0x44]     #	  |A|DD_CHAR (tchar);
MEMORY OFFSET:     -0x44     -68  >>-60

0x227f4:	jl 0x22813                          
0x227f6:	add dword ptr [rbp - 0x44], 0x40    #	  |A|DD_CHAR (tchar);
MEMORY OFFSET:     -0x44     -68  >>-60

0x227fa:	mov eax, dword ptr [rbp - 0x44]     
MEMORY OFFSET:     -0x44     -68  >>-60

0x227fd:	movsxd rdx, eax                     
0x22800:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22804:	mov rsi, rdx                        
0x22807:	mov rdi, rax                        
0x2280a:	call 0x24670                        
0x2280f:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22813:	mov eax, ebx                        #	  |A|DD_CHAR (tchar);
0x22815:	lea ebx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x22818:	movsxd rdx, eax                     
0x2281b:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x2281f:	add rax, rdx                        
0x22822:	mov edx, dword ptr [rbp - 0x40]     
MEMORY OFFSET:     -0x40     -64  >>-56

0x22825:	mov byte ptr [rax], dl              
0x22827:	movsxd rdx, ebx                     
0x2282a:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x2282e:	add rax, rdx                        
0x22831:	mov byte ptr [rax], 0               
0x22834:	jmp 0x229c0                         #	  |b|reak;
0x22839:	mov eax, dword ptr [rbp - 0x58]     #	  cc = string|[|i + 1];
MEMORY OFFSET:     -0x58     -88  >>-80

0x2283c:	cdqe                                
0x2283e:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x22842:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x22846:	add rax, rdx                        
0x22849:	movzx eax, byte ptr [rax]           
0x2284c:	movsx eax, al                       #	  cc |=| string[i + 1];
0x2284f:	mov dword ptr [rbp - 0x3c], eax     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x22852:	cmp dword ptr [rbp - 0x3c], 0       #	  if |(|member (cc, history_no_expand_chars))
MEMORY OFFSET:     -0x3c     -60  >>-52

0x22856:	je 0x228c6                          
0x22858:	mov rax, qword ptr [rip + 0xdfe1]   #	  if (|m|ember (cc, history_no_expand_chars))
MEMORY OFFSET:     0xdfe1     57313  >>57321

0x2285f:	mov edx, dword ptr [rbp - 0x3c]     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x22862:	mov esi, edx                        
0x22864:	mov rdi, rax                        
0x22867:	call 0x49b0                         
0x2286c:	test rax, rax                       
0x2286f:	je 0x228c6                          
0x22871:	cmp ebx, dword ptr [rbp - 0x44]     #	      |A|DD_CHAR (string[i]);
MEMORY OFFSET:     -0x44     -68  >>-60

0x22874:	jl 0x22893                          
0x22876:	add dword ptr [rbp - 0x44], 0x40    #	      |A|DD_CHAR (string[i]);
MEMORY OFFSET:     -0x44     -68  >>-60

0x2287a:	mov eax, dword ptr [rbp - 0x44]     
MEMORY OFFSET:     -0x44     -68  >>-60

0x2287d:	movsxd rdx, eax                     
0x22880:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22884:	mov rsi, rdx                        
0x22887:	mov rdi, rax                        
0x2288a:	call 0x24670                        
0x2288f:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22893:	mov eax, dword ptr [rbp - 0x58]     #	      |A|DD_CHAR (string[i]);
MEMORY OFFSET:     -0x58     -88  >>-80

0x22896:	movsxd rdx, eax                     
0x22899:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x2289d:	add rax, rdx                        
0x228a0:	mov edx, ebx                        
0x228a2:	lea ebx, [rdx + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x228a5:	movsxd rcx, edx                     
0x228a8:	mov rdx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x228ac:	add rdx, rcx                        
0x228af:	movzx eax, byte ptr [rax]           
0x228b2:	mov byte ptr [rdx], al              
0x228b4:	movsxd rdx, ebx                     
0x228b7:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x228bb:	add rax, rdx                        
0x228be:	mov byte ptr [rax], 0               
0x228c1:	jmp 0x229c0                         #	      |b|reak;
0x228c6:	mov rdi, qword ptr [rbp - 0x20]     #	  r = |h|istory_expand_internal (string, i, &eindex, &temp, result);
MEMORY OFFSET:     -0x20     -32  >>-24

0x228ca:	lea rcx, [rbp - 0x30]               
MEMORY OFFSET:     -0x30     -48  >>-40

0x228ce:	lea rdx, [rbp - 0x5c]               
MEMORY OFFSET:     -0x5c     -92  >>-84

0x228d2:	mov esi, dword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x228d5:	mov rax, qword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x228d9:	mov r8, rdi                         
0x228dc:	mov rdi, rax                        
0x228df:	mov eax, 0                          
0x228e4:	call 0x21a19                        
0x228e9:	mov dword ptr [rbp - 0x38], eax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x228ec:	cmp dword ptr [rbp - 0x38], 0       #	  if |(|r < 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x228f0:	jns 0x22929                         
0x228f2:	mov rdx, qword ptr [rbp - 0x30]     #	      *output |=| temp;
MEMORY OFFSET:     -0x30     -48  >>-40

0x228f6:	mov rax, qword ptr [rbp - 0x70]     
MEMORY OFFSET:     -0x70     -112  >>-104

0x228fa:	mov qword ptr [rax], rdx            
0x228fd:	mov rax, qword ptr [rbp - 0x20]     #	      |x|free (result);
MEMORY OFFSET:     -0x20     -32  >>-24

0x22901:	mov rdi, rax                        
0x22904:	call 0x1eeae                        
0x22909:	mov rax, qword ptr [rbp - 0x28]     #	      if |(|string != hstring)
MEMORY OFFSET:     -0x28     -40  >>-32

0x2290d:	cmp rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x22911:	je 0x2291f                          
0x22913:	mov rax, qword ptr [rbp - 0x28]     #		|x|free (string);
MEMORY OFFSET:     -0x28     -40  >>-32

0x22917:	mov rdi, rax                        
0x2291a:	call 0x1eeae                        
0x2291f:	mov eax, 0xffffffff                 #	      return |-|1;
0x22924:	jmp 0x22a19                         
0x22929:	mov rax, qword ptr [rbp - 0x30]     #	      if (|t|emp)
MEMORY OFFSET:     -0x30     -48  >>-40

0x2292d:	test rax, rax                       #	      if |(|temp)
0x22930:	je 0x229ac                          
0x22932:	add dword ptr [rbp - 0x4c], 1       #		  modified|+|+;
MEMORY OFFSET:     -0x4c     -76  >>-68

0x22936:	mov rax, qword ptr [rbp - 0x30]     #		  if (|*|temp)
MEMORY OFFSET:     -0x30     -48  >>-40

0x2293a:	movzx eax, byte ptr [rax]           
0x2293d:	test al, al                         #		  if |(|*temp)
0x2293f:	je 0x229a0                          
0x22941:	mov rax, qword ptr [rbp - 0x30]     #		    |A|DD_STRING (temp);
MEMORY OFFSET:     -0x30     -48  >>-40

0x22945:	mov rdi, rax                        
0x22948:	call 0x4960                         
0x2294d:	mov dword ptr [rbp - 0x34], eax     
MEMORY OFFSET:     -0x34     -52  >>-44

0x22950:	mov eax, dword ptr [rbp - 0x34]     
MEMORY OFFSET:     -0x34     -52  >>-44

0x22953:	add eax, ebx                        
0x22955:	mov ebx, eax                        
0x22957:	jmp 0x22976                         
0x22959:	sub dword ptr [rbp - 0x44], -0x80   #		    |A|DD_STRING (temp);
MEMORY OFFSET:     -0x44     -68  >>-60

0x2295d:	mov eax, dword ptr [rbp - 0x44]     
MEMORY OFFSET:     -0x44     -68  >>-60

0x22960:	movsxd rdx, eax                     
0x22963:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22967:	mov rsi, rdx                        
0x2296a:	mov rdi, rax                        
0x2296d:	call 0x24670                        
0x22972:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22976:	cmp ebx, dword ptr [rbp - 0x44]     #		    |A|DD_STRING (temp);
MEMORY OFFSET:     -0x44     -68  >>-60

0x22979:	jge 0x22959                         
0x2297b:	mov rax, qword ptr [rbp - 0x30]     #		    |A|DD_STRING (temp);
MEMORY OFFSET:     -0x30     -48  >>-40

0x2297f:	movsxd rdx, ebx                     
0x22982:	mov ecx, dword ptr [rbp - 0x34]     
MEMORY OFFSET:     -0x34     -52  >>-44

0x22985:	movsxd rcx, ecx                     
0x22988:	mov rsi, rdx                        
0x2298b:	sub rsi, rcx                        
0x2298e:	mov rdx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22992:	add rdx, rsi                        
0x22995:	mov rsi, rax                        
0x22998:	mov rdi, rdx                        
0x2299b:	call 0x4870                         
0x229a0:	mov rax, qword ptr [rbp - 0x30]     #		  |x|free (temp);
MEMORY OFFSET:     -0x30     -48  >>-40

0x229a4:	mov rdi, rax                        
0x229a7:	call 0x1eeae                        
0x229ac:	cmp dword ptr [rbp - 0x38], 1       #	      only_printing = r |=|= 1;
MEMORY OFFSET:     -0x38     -56  >>-48

0x229b0:	sete al                             
0x229b3:	movzx eax, al                       #	      only_printing |=| r == 1;
0x229b6:	mov dword ptr [rbp - 0x48], eax     
MEMORY OFFSET:     -0x48     -72  >>-64

0x229b9:	mov eax, dword ptr [rbp - 0x5c]     #	      i |=| eindex;
MEMORY OFFSET:     -0x5c     -92  >>-84

0x229bc:	mov dword ptr [rbp - 0x58], eax     
MEMORY OFFSET:     -0x58     -88  >>-80

0x229bf:	nop                                 #	  |b|reak;
0x229c0:	add dword ptr [rbp - 0x58], 1       #  for (passc = i = j = 0; i < l; i|+|+)
MEMORY OFFSET:     -0x58     -88  >>-80

0x229c4:	mov eax, dword ptr [rbp - 0x58]     #  for (passc = i = j = 0; i |<| l; i++)
MEMORY OFFSET:     -0x58     -88  >>-80

0x229c7:	cmp eax, dword ptr [rbp - 0x54]     
MEMORY OFFSET:     -0x54     -84  >>-76

0x229ca:	jl 0x22707                          
0x229d0:	mov rax, qword ptr [rbp - 0x70]     #  *output |=| result;
MEMORY OFFSET:     -0x70     -112  >>-104

0x229d4:	mov rdx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x229d8:	mov qword ptr [rax], rdx            
0x229db:	mov rax, qword ptr [rbp - 0x28]     #  if |(|string != hstring)
MEMORY OFFSET:     -0x28     -40  >>-32

0x229df:	cmp rax, qword ptr [rbp - 0x68]     
MEMORY OFFSET:     -0x68     -104  >>-96

0x229e3:	je 0x229f1                          
0x229e5:	mov rax, qword ptr [rbp - 0x28]     #    |x|free (string);
MEMORY OFFSET:     -0x28     -40  >>-32

0x229e9:	mov rdi, rax                        
0x229ec:	call 0x1eeae                        
0x229f1:	cmp dword ptr [rbp - 0x48], 0       #  if |(|only_printing)
MEMORY OFFSET:     -0x48     -72  >>-64

0x229f5:	je 0x22a0f                          
0x229f7:	mov rax, qword ptr [rbp - 0x20]     #      |a|dd_history (result);
MEMORY OFFSET:     -0x20     -32  >>-24

0x229fb:	mov rdi, rax                        
0x229fe:	mov eax, 0                          
0x22a03:	call 0x201b5                        
0x22a08:	mov eax, 2                          #      return |(|2);
0x22a0d:	jmp 0x22a19                         
0x22a0f:	cmp dword ptr [rbp - 0x4c], 0       #  return (modified |!|= 0);
MEMORY OFFSET:     -0x4c     -76  >>-68

0x22a13:	setne al                            
0x22a16:	movzx eax, al                       
0x22a19:	mov rdx, qword ptr [rbp - 0x18]     #|}|
MEMORY OFFSET:     -0x18     -24  >>-16

0x22a1d:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x22a26:	je 0x22a2d                          
0x22a28:	call 0x4980                         #|}|
0x22a2d:	mov rbx, qword ptr [rbp - 8]        
MEMORY OFFSET:     -0x8     -8  >>0

0x22a31:	leave                               
0x22a32:	ret                                 
0x22a33:	endbr64                             #|{|
0x22a37:	push rbp                            
0x22a38:	mov rbp, rsp                        
0x22a3b:	push rbx                            
0x22a3c:	sub rsp, 0x48                       
0x22a40:	mov qword ptr [rbp - 0x38], rdi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22a44:	mov qword ptr [rbp - 0x40], rsi     
MEMORY OFFSET:     -0x40     -64  >>-56

0x22a48:	mov qword ptr [rbp - 0x48], rdx     
MEMORY OFFSET:     -0x48     -72  >>-64

0x22a4c:	mov rax, qword ptr [rbp - 0x48]     #  register int |i| = *caller_index;
MEMORY OFFSET:     -0x48     -72  >>-64

0x22a50:	mov ebx, dword ptr [rax]            
0x22a52:	mov dword ptr [rbp - 0x1c], 0       #  int |e|xpecting_word_spec = 0;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x22a59:	mov dword ptr [rbp - 0x20], 0       #  first = last |=| 0;
MEMORY OFFSET:     -0x20     -32  >>-24

0x22a60:	mov eax, dword ptr [rbp - 0x20]     #  first |=| last = 0;
MEMORY OFFSET:     -0x20     -32  >>-24

0x22a63:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x22a66:	mov qword ptr [rbp - 0x18], 0       #  result |=| (char *)NULL;
MEMORY OFFSET:     -0x18     -24  >>-16

0x22a6e:	movsxd rdx, ebx                     #  if (spec|[|i] == ':')
0x22a71:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22a75:	add rax, rdx                        
0x22a78:	movzx eax, byte ptr [rax]           
0x22a7b:	cmp al, 0x3a                        #  if |(|spec[i] == ':')
0x22a7d:	jne 0x22a86                         
0x22a7f:	add ebx, 1                          #      i|+|+;
0x22a82:	add dword ptr [rbp - 0x1c], 1       #      expecting_word_spec|+|+;
MEMORY OFFSET:     -0x1c     -28  >>-20

0x22a86:	movsxd rdx, ebx                     #  if (spec|[|i] == '%')
0x22a89:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22a8d:	add rax, rdx                        
0x22a90:	movzx eax, byte ptr [rax]           
0x22a93:	cmp al, 0x25                        #  if |(|spec[i] == '%')
0x22a95:	jne 0x22af0                         
0x22a97:	lea edx, [rbx + 1]                  #      *caller_index = i |+| 1;
MEMORY OFFSET:     0x1     1  >>9

0x22a9a:	mov rax, qword ptr [rbp - 0x48]     #      *caller_index |=| i + 1;
MEMORY OFFSET:     -0x48     -72  >>-64

0x22a9e:	mov dword ptr [rax], edx            
0x22aa0:	mov rax, qword ptr [rip + 0xf089]   #      return (search_string |?| savestring (search_string) : savestring (""));
MEMORY OFFSET:     0xf089     61577  >>61585

0x22aa7:	test rax, rax                       #      return (search_string ? savestring (search_string) |:| savestring (""));
0x22aaa:	je 0x22ade                          
0x22aac:	mov rbx, qword ptr [rip + 0xf07d]   #      return (search_string ? |s|avestring (search_string) : savestring (""));
MEMORY OFFSET:     0xf07d     61565  >>61573

0x22ab3:	mov rax, qword ptr [rip + 0xf076]   
MEMORY OFFSET:     0xf076     61558  >>61566

0x22aba:	mov rdi, rax                        
0x22abd:	call 0x4960                         
0x22ac2:	add rax, 1                          
0x22ac6:	mov rdi, rax                        
0x22ac9:	call 0x24650                        
0x22ace:	mov rsi, rbx                        
0x22ad1:	mov rdi, rax                        
0x22ad4:	call 0x4870                         
0x22ad9:	jmp 0x22dbc                         #      return (search_string ? savestring (search_string) |:| savestring (""));
0x22ade:	mov edi, 1                          #      return (search_string ? savestring (search_string) : |s|avestring (""));
0x22ae3:	call 0x24650                        
0x22ae8:	mov byte ptr [rax], 0               
0x22aeb:	jmp 0x22dbc                         #      return (search_string ? savestring (search_string) |:| savestring (""));
0x22af0:	movsxd rdx, ebx                     #  if (spec|[|i] == '*')
0x22af3:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22af7:	add rax, rdx                        
0x22afa:	movzx eax, byte ptr [rax]           
0x22afd:	cmp al, 0x2a                        #  if |(|spec[i] == '*')
0x22aff:	jne 0x22b4b                         
0x22b01:	lea edx, [rbx + 1]                  #      *caller_index = i |+| 1;
MEMORY OFFSET:     0x1     1  >>9

0x22b04:	mov rax, qword ptr [rbp - 0x48]     #      *caller_index |=| i + 1;
MEMORY OFFSET:     -0x48     -72  >>-64

0x22b08:	mov dword ptr [rax], edx            
0x22b0a:	mov rax, qword ptr [rbp - 0x40]     #      result = |h|istory_arg_extract (1, '$', from);
MEMORY OFFSET:     -0x40     -64  >>-56

0x22b0e:	mov rdx, rax                        
0x22b11:	mov esi, 0x24                       
0x22b16:	mov edi, 1                          
0x22b1b:	mov eax, 0                          
0x22b20:	call 0x22dc2                        
0x22b25:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x22b29:	cmp qword ptr [rbp - 0x18], 0       #      return (result ? result |:| savestring (""));
MEMORY OFFSET:     -0x18     -24  >>-16

0x22b2e:	jne 0x22b42                         
0x22b30:	mov edi, 1                          #      return (result ? result : |s|avestring (""));
0x22b35:	call 0x24650                        
0x22b3a:	mov byte ptr [rax], 0               
0x22b3d:	jmp 0x22dbc                         #      return (result ? result |:| savestring (""));
0x22b42:	mov rax, qword ptr [rbp - 0x18]     #      return (result ? result |:| savestring (""));
MEMORY OFFSET:     -0x18     -24  >>-16

0x22b46:	jmp 0x22dbc                         
0x22b4b:	movsxd rdx, ebx                     #  if (spec|[|i] == '$')
0x22b4e:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22b52:	add rax, rdx                        
0x22b55:	movzx eax, byte ptr [rax]           
0x22b58:	cmp al, 0x24                        #  if |(|spec[i] == '$')
0x22b5a:	jne 0x22b85                         
0x22b5c:	lea edx, [rbx + 1]                  #      *caller_index = i |+| 1;
MEMORY OFFSET:     0x1     1  >>9

0x22b5f:	mov rax, qword ptr [rbp - 0x48]     #      *caller_index |=| i + 1;
MEMORY OFFSET:     -0x48     -72  >>-64

0x22b63:	mov dword ptr [rax], edx            
0x22b65:	mov rax, qword ptr [rbp - 0x40]     #      return (|h|istory_arg_extract ('$', '$', from));
MEMORY OFFSET:     -0x40     -64  >>-56

0x22b69:	mov rdx, rax                        
0x22b6c:	mov esi, 0x24                       
0x22b71:	mov edi, 0x24                       
0x22b76:	mov eax, 0                          
0x22b7b:	call 0x22dc2                        
0x22b80:	jmp 0x22dbc                         
0x22b85:	movsxd rdx, ebx                     #  if (spec|[|i] == '-')
0x22b88:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22b8c:	add rax, rdx                        
0x22b8f:	movzx eax, byte ptr [rax]           
0x22b92:	cmp al, 0x2d                        #  if |(|spec[i] == '-')
0x22b94:	jne 0x22ba2                         
0x22b96:	mov dword ptr [rbp - 0x24], 0       #    first |=| 0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x22b9d:	jmp 0x22c48                         
0x22ba2:	movsxd rdx, ebx                     #  else if (spec|[|i] == '^')
0x22ba5:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22ba9:	add rax, rdx                        
0x22bac:	movzx eax, byte ptr [rax]           
0x22baf:	cmp al, 0x5e                        #  else if |(|spec[i] == '^')
0x22bb1:	jne 0x22bbf                         
0x22bb3:	mov dword ptr [rbp - 0x24], 1       #    first |=| 1;
MEMORY OFFSET:     -0x24     -36  >>-28

0x22bba:	jmp 0x22c48                         
0x22bbf:	movsxd rdx, ebx                     #  else if (|d|igit (spec[i]) && expecting_word_spec)
0x22bc2:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22bc6:	add rax, rdx                        
0x22bc9:	movzx eax, byte ptr [rax]           
0x22bcc:	cmp al, 0x2f                        #  else if |(|digit (spec[i]) && expecting_word_spec)
0x22bce:	jle 0x22c3d                         
0x22bd0:	movsxd rdx, ebx                     #  else if (|d|igit (spec[i]) && expecting_word_spec)
0x22bd3:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22bd7:	add rax, rdx                        
0x22bda:	movzx eax, byte ptr [rax]           
0x22bdd:	cmp al, 0x39                        
0x22bdf:	jg 0x22c3d                          
0x22be1:	cmp dword ptr [rbp - 0x1c], 0       #  else if (digit (spec[i]) |&|& expecting_word_spec)
MEMORY OFFSET:     -0x1c     -28  >>-20

0x22be5:	je 0x22c3d                          
0x22be7:	mov dword ptr [rbp - 0x24], 0       #      for (first |=| 0; digit (spec[i]); i++)
MEMORY OFFSET:     -0x24     -36  >>-28

0x22bee:	jmp 0x22c19                         #      |f|or (first = 0; digit (spec[i]); i++)
0x22bf0:	mov edx, dword ptr [rbp - 0x24]     #	first = (first |*| 10) + digit_value (spec[i]);
MEMORY OFFSET:     -0x24     -36  >>-28

0x22bf3:	mov eax, edx                        
0x22bf5:	shl eax, 2                          
0x22bf8:	add eax, edx                        
0x22bfa:	add eax, eax                        
0x22bfc:	mov ecx, eax                        
0x22bfe:	movsxd rdx, ebx                     #	first = (first * 10) + |d|igit_value (spec[i]);
0x22c01:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22c05:	add rax, rdx                        
0x22c08:	movzx eax, byte ptr [rax]           
0x22c0b:	movsx eax, al                       
0x22c0e:	sub eax, 0x30                       
0x22c11:	add eax, ecx                        #	first |=| (first * 10) + digit_value (spec[i]);
0x22c13:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x22c16:	add ebx, 1                          #      for (first = 0; digit (spec[i]); i|+|+)
0x22c19:	movsxd rdx, ebx                     #      for (first = 0; |d|igit (spec[i]); i++)
0x22c1c:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22c20:	add rax, rdx                        
0x22c23:	movzx eax, byte ptr [rax]           
0x22c26:	cmp al, 0x2f                        
0x22c28:	jle 0x22c47                         
0x22c2a:	movsxd rdx, ebx                     #      for (first = 0; |d|igit (spec[i]); i++)
0x22c2d:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22c31:	add rax, rdx                        
0x22c34:	movzx eax, byte ptr [rax]           
0x22c37:	cmp al, 0x39                        
0x22c39:	jle 0x22bf0                         
0x22c3b:	jmp 0x22c47                         #  else if |(|digit (spec[i]) && expecting_word_spec)
0x22c3d:	mov eax, 0                          #    return (|(|char *)NULL);      /* no valid `first' for word specifier */
0x22c42:	jmp 0x22dbc                         
0x22c47:	nop                                 #  else if |(|digit (spec[i]) && expecting_word_spec)
0x22c48:	movsxd rdx, ebx                     #  if (spec|[|i] == '^' || spec[i] == '*')
0x22c4b:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22c4f:	add rax, rdx                        
0x22c52:	movzx eax, byte ptr [rax]           
0x22c55:	cmp al, 0x5e                        #  if |(|spec[i] == '^' || spec[i] == '*')
0x22c57:	je 0x22c6a                          
0x22c59:	movsxd rdx, ebx                     #  if (spec[i] == '^' || spec|[|i] == '*')
0x22c5c:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22c60:	add rax, rdx                        
0x22c63:	movzx eax, byte ptr [rax]           
0x22c66:	cmp al, 0x2a                        #  if (spec[i] == '^' |||| spec[i] == '*')
0x22c68:	jne 0x22c92                         
0x22c6a:	movsxd rdx, ebx                     #      last = (spec|[|i] == '^') ? 1 : '$';        /* x* abbreviates x-$ */
0x22c6d:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22c71:	add rax, rdx                        
0x22c74:	movzx eax, byte ptr [rax]           
0x22c77:	cmp al, 0x5e                        #      last = (spec[i] == '^') ? 1 |:| '$';        /* x* abbreviates x-$ */
0x22c79:	jne 0x22c82                         
0x22c7b:	mov eax, 1                          #      last = (spec[i] == '^') ? 1 |:| '$';        /* x* abbreviates x-$ */
0x22c80:	jmp 0x22c87                         
0x22c82:	mov eax, 0x24                       #      last = (spec[i] == '^') ? 1 |:| '$';        /* x* abbreviates x-$ */
0x22c87:	mov dword ptr [rbp - 0x20], eax     #      last |=| (spec[i] == '^') ? 1 : '$';        /* x* abbreviates x-$ */
MEMORY OFFSET:     -0x20     -32  >>-24

0x22c8a:	add ebx, 1                          #      i|+|+;
0x22c8d:	jmp 0x22d72                         
0x22c92:	movsxd rdx, ebx                     #  else if (spec|[|i] != '-')
0x22c95:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22c99:	add rax, rdx                        
0x22c9c:	movzx eax, byte ptr [rax]           
0x22c9f:	cmp al, 0x2d                        #  else if |(|spec[i] != '-')
0x22ca1:	je 0x22cae                          
0x22ca3:	mov eax, dword ptr [rbp - 0x24]     #    last |=| first;
MEMORY OFFSET:     -0x24     -36  >>-28

0x22ca6:	mov dword ptr [rbp - 0x20], eax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22ca9:	jmp 0x22d72                         
0x22cae:	add ebx, 1                          #      i|+|+;
0x22cb1:	movsxd rdx, ebx                     #      if (|d|igit (spec[i]))
0x22cb4:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22cb8:	add rax, rdx                        
0x22cbb:	movzx eax, byte ptr [rax]           
0x22cbe:	cmp al, 0x2f                        #      if |(|digit (spec[i]))
0x22cc0:	jle 0x22d29                         
0x22cc2:	movsxd rdx, ebx                     #      if (|d|igit (spec[i]))
0x22cc5:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22cc9:	add rax, rdx                        
0x22ccc:	movzx eax, byte ptr [rax]           
0x22ccf:	cmp al, 0x39                        
0x22cd1:	jg 0x22d29                          
0x22cd3:	mov dword ptr [rbp - 0x20], 0       #	  for (last |=| 0; digit (spec[i]); i++)
MEMORY OFFSET:     -0x20     -32  >>-24

0x22cda:	jmp 0x22d05                         #	  |f|or (last = 0; digit (spec[i]); i++)
0x22cdc:	mov edx, dword ptr [rbp - 0x20]     #	    last = (last |*| 10) + digit_value (spec[i]);
MEMORY OFFSET:     -0x20     -32  >>-24

0x22cdf:	mov eax, edx                        
0x22ce1:	shl eax, 2                          
0x22ce4:	add eax, edx                        
0x22ce6:	add eax, eax                        
0x22ce8:	mov ecx, eax                        
0x22cea:	movsxd rdx, ebx                     #	    last = (last * 10) + |d|igit_value (spec[i]);
0x22ced:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22cf1:	add rax, rdx                        
0x22cf4:	movzx eax, byte ptr [rax]           
0x22cf7:	movsx eax, al                       
0x22cfa:	sub eax, 0x30                       
0x22cfd:	add eax, ecx                        #	    last |=| (last * 10) + digit_value (spec[i]);
0x22cff:	mov dword ptr [rbp - 0x20], eax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22d02:	add ebx, 1                          #	  for (last = 0; digit (spec[i]); i|+|+)
0x22d05:	movsxd rdx, ebx                     #	  for (last = 0; |d|igit (spec[i]); i++)
0x22d08:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22d0c:	add rax, rdx                        
0x22d0f:	movzx eax, byte ptr [rax]           
0x22d12:	cmp al, 0x2f                        
0x22d14:	jle 0x22d71                         
0x22d16:	movsxd rdx, ebx                     #	  for (last = 0; |d|igit (spec[i]); i++)
0x22d19:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22d1d:	add rax, rdx                        
0x22d20:	movzx eax, byte ptr [rax]           
0x22d23:	cmp al, 0x39                        
0x22d25:	jle 0x22cdc                         
0x22d27:	jmp 0x22d71                         #      if |(|digit (spec[i]))
0x22d29:	movsxd rdx, ebx                     #      else if (spec|[|i] == '$')
0x22d2c:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22d30:	add rax, rdx                        
0x22d33:	movzx eax, byte ptr [rax]           
0x22d36:	cmp al, 0x24                        #      else if |(|spec[i] == '$')
0x22d38:	jne 0x22d46                         
0x22d3a:	add ebx, 1                          #	  i|+|+;
0x22d3d:	mov dword ptr [rbp - 0x20], 0x24    #	  last |=| '$';
MEMORY OFFSET:     -0x20     -32  >>-24

0x22d44:	jmp 0x22d72                         
0x22d46:	movsxd rdx, ebx                     #      else if (!spec|[|i] || spec[i] == ':')  /* could be modifier separator */
0x22d49:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22d4d:	add rax, rdx                        
0x22d50:	movzx eax, byte ptr [rax]           
0x22d53:	test al, al                         #      else if |(|!spec[i] || spec[i] == ':')  /* could be modifier separator */
0x22d55:	je 0x22d68                          
0x22d57:	movsxd rdx, ebx                     #      else if (!spec[i] || spec|[|i] == ':')  /* could be modifier separator */
0x22d5a:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22d5e:	add rax, rdx                        
0x22d61:	movzx eax, byte ptr [rax]           
0x22d64:	cmp al, 0x3a                        #      else if (!spec[i] |||| spec[i] == ':')  /* could be modifier separator */
0x22d66:	jne 0x22d72                         
0x22d68:	mov dword ptr [rbp - 0x20], 0xffffffff#	last |=| -1;              /* x- abbreviates x-$ omitting word `$' */
MEMORY OFFSET:     -0x20     -32  >>-24

0x22d6f:	jmp 0x22d72                         
0x22d71:	nop                                 #      if |(|digit (spec[i]))
0x22d72:	mov rax, qword ptr [rbp - 0x48]     #  *caller_index |=| i;
MEMORY OFFSET:     -0x48     -72  >>-64

0x22d76:	mov dword ptr [rax], ebx            
0x22d78:	mov eax, dword ptr [rbp - 0x20]     #  if |(|last >= first || last == '$' || last < 0)
MEMORY OFFSET:     -0x20     -32  >>-24

0x22d7b:	cmp eax, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x22d7e:	jge 0x22d8c                         
0x22d80:	cmp dword ptr [rbp - 0x20], 0x24    #  if (last >= first |||| last == '$' || last < 0)
MEMORY OFFSET:     -0x20     -32  >>-24

0x22d84:	je 0x22d8c                          
0x22d86:	cmp dword ptr [rbp - 0x20], 0       #  if (last >= first || last == '$' |||| last < 0)
MEMORY OFFSET:     -0x20     -32  >>-24

0x22d8a:	jns 0x22da8                         
0x22d8c:	mov rdx, qword ptr [rbp - 0x40]     #    result = |h|istory_arg_extract (first, last, from);
MEMORY OFFSET:     -0x40     -64  >>-56

0x22d90:	mov ecx, dword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22d93:	mov eax, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x22d96:	mov esi, ecx                        
0x22d98:	mov edi, eax                        
0x22d9a:	mov eax, 0                          
0x22d9f:	call 0x22dc2                        
0x22da4:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x22da8:	cmp qword ptr [rbp - 0x18], 0       #  return (result ? result |:| (char *)&error_pointer);
MEMORY OFFSET:     -0x18     -24  >>-16

0x22dad:	je 0x22db5                          
0x22daf:	mov rax, qword ptr [rbp - 0x18]     #  return (result ? result |:| (char *)&error_pointer);
MEMORY OFFSET:     -0x18     -24  >>-16

0x22db3:	jmp 0x22dbc                         
0x22db5:	lea rax, [rip + 0xed34]             #  return (result ? result |:| (char *)&error_pointer);
MEMORY OFFSET:     0xed34     60724  >>60732

0x22dbc:	mov rbx, qword ptr [rbp - 8]        #|}|
MEMORY OFFSET:     -0x8     -8  >>0

0x22dc0:	leave                               
0x22dc1:	ret                                 
0x22dc2:	endbr64                             #|{|
0x22dc6:	push rbp                            
0x22dc7:	mov rbp, rsp                        
0x22dca:	push r12                            
0x22dcc:	push rbx                            
0x22dcd:	sub rsp, 0x30                       
0x22dd1:	mov dword ptr [rbp - 0x34], edi     
MEMORY OFFSET:     -0x34     -52  >>-44

0x22dd4:	mov dword ptr [rbp - 0x38], esi     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22dd7:	mov qword ptr [rbp - 0x40], rdx     
MEMORY OFFSET:     -0x40     -64  >>-56

0x22ddb:	mov qword ptr [rbp - 0x20], 0       #  char *|r|esult = (char *)NULL;
MEMORY OFFSET:     -0x20     -32  >>-24

0x22de3:	mov dword ptr [rbp - 0x28], 0       #  int |s|ize = 0, offset = 0;
MEMORY OFFSET:     -0x28     -40  >>-32

0x22dea:	mov dword ptr [rbp - 0x24], 0       #  int size = 0, |o|ffset = 0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x22df1:	mov rax, qword ptr [rbp - 0x40]     #  if ((list = |h|istory_tokenize (string)) == NULL)
MEMORY OFFSET:     -0x40     -64  >>-56

0x22df5:	mov rdi, rax                        
0x22df8:	mov eax, 0                          
0x22dfd:	call 0x22fd3                        
0x22e02:	mov qword ptr [rbp - 0x18], rax     
MEMORY OFFSET:     -0x18     -24  >>-16

0x22e06:	cmp qword ptr [rbp - 0x18], 0       #  if |(|(list = history_tokenize (string)) == NULL)
MEMORY OFFSET:     -0x18     -24  >>-16

0x22e0b:	jne 0x22e17                         
0x22e0d:	mov eax, 0                          #    return (|(|char *)NULL);
0x22e12:	jmp 0x22fca                         
0x22e17:	mov r12d, 0                         #  for (len |=| 0; list[len]; len++)
0x22e1d:	jmp 0x22e23                         #  |f|or (len = 0; list[len]; len++)
0x22e1f:	add r12d, 1                         #  for (len = 0; list[len]; len|+|+)
0x22e23:	movsxd rax, r12d                    #  for (len = 0; list|[|len]; len++)
0x22e26:	lea rdx, [rax*8]                    
0x22e2e:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x22e32:	add rax, rdx                        
0x22e35:	mov rax, qword ptr [rax]            
0x22e38:	test rax, rax                       #  for (len = 0; |l|ist[len]; len++)
0x22e3b:	jne 0x22e1f                         
0x22e3d:	cmp dword ptr [rbp - 0x38], 0       #  if |(|last < 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x22e41:	jns 0x22e4f                         
0x22e43:	mov eax, dword ptr [rbp - 0x38]     #    last = len |+| last - 1;
MEMORY OFFSET:     -0x38     -56  >>-48

0x22e46:	add eax, r12d                       
0x22e49:	sub eax, 1                          #    last |=| len + last - 1;
0x22e4c:	mov dword ptr [rbp - 0x38], eax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22e4f:	cmp dword ptr [rbp - 0x34], 0       #  if |(|first < 0)
MEMORY OFFSET:     -0x34     -52  >>-44

0x22e53:	jns 0x22e61                         
0x22e55:	mov eax, dword ptr [rbp - 0x34]     #    first = len |+| first - 1;
MEMORY OFFSET:     -0x34     -52  >>-44

0x22e58:	add eax, r12d                       
0x22e5b:	sub eax, 1                          #    first |=| len + first - 1;
0x22e5e:	mov dword ptr [rbp - 0x34], eax     
MEMORY OFFSET:     -0x34     -52  >>-44

0x22e61:	cmp dword ptr [rbp - 0x38], 0x24    #  if |(|last == '$')
MEMORY OFFSET:     -0x38     -56  >>-48

0x22e65:	jne 0x22e6f                         
0x22e67:	lea eax, [r12 - 1]                  #    last |=| len - 1;
MEMORY OFFSET:     -0x1     -1  >>7

0x22e6c:	mov dword ptr [rbp - 0x38], eax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x22e6f:	cmp dword ptr [rbp - 0x34], 0x24    #  if |(|first == '$')
MEMORY OFFSET:     -0x34     -52  >>-44

0x22e73:	jne 0x22e7d                         
0x22e75:	lea eax, [r12 - 1]                  #    first |=| len - 1;
MEMORY OFFSET:     -0x1     -1  >>7

0x22e7a:	mov dword ptr [rbp - 0x34], eax     
MEMORY OFFSET:     -0x34     -52  >>-44

0x22e7d:	add dword ptr [rbp - 0x38], 1       #  last|+|+;
MEMORY OFFSET:     -0x38     -56  >>-48

0x22e81:	cmp dword ptr [rbp - 0x34], r12d    #  if |(|first > len || last > len || first < 0 || last < 0)
MEMORY OFFSET:     -0x34     -52  >>-44

0x22e85:	jg 0x22e99                          
0x22e87:	cmp dword ptr [rbp - 0x38], r12d    #  if (first > len |||| last > len || first < 0 || last < 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x22e8b:	jg 0x22e99                          
0x22e8d:	cmp dword ptr [rbp - 0x34], 0       #  if (first > len || last > len |||| first < 0 || last < 0)
MEMORY OFFSET:     -0x34     -52  >>-44

0x22e91:	js 0x22e99                          
0x22e93:	cmp dword ptr [rbp - 0x38], 0       #  if (first > len || last > len || first < 0 |||| last < 0)
MEMORY OFFSET:     -0x38     -56  >>-48

0x22e97:	jns 0x22ea6                         
0x22e99:	mov qword ptr [rbp - 0x20], 0       #    result |=| ((char *)NULL);
MEMORY OFFSET:     -0x20     -32  >>-24

0x22ea1:	jmp 0x22f8e                         
0x22ea6:	mov dword ptr [rbp - 0x28], 0       #      for (size |=| 0, i = first; i < last; i++)
MEMORY OFFSET:     -0x28     -40  >>-32

0x22ead:	mov ebx, dword ptr [rbp - 0x34]     #      for (size = 0, i |=| first; i < last; i++)
MEMORY OFFSET:     -0x34     -52  >>-44

0x22eb0:	jmp 0x22edf                         #      |f|or (size = 0, i = first; i < last; i++)
0x22eb2:	movsxd rax, ebx                     #	size += strlen (list|[|i]) + 1;
0x22eb5:	lea rdx, [rax*8]                    
0x22ebd:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x22ec1:	add rax, rdx                        
0x22ec4:	mov rax, qword ptr [rax]            #	size += |s|trlen (list[i]) + 1;
0x22ec7:	mov rdi, rax                        
0x22eca:	call 0x4960                         
0x22ecf:	mov edx, eax                        #	size |+|= strlen (list[i]) + 1;
0x22ed1:	mov eax, dword ptr [rbp - 0x28]     
MEMORY OFFSET:     -0x28     -40  >>-32

0x22ed4:	add eax, edx                        
0x22ed6:	add eax, 1                          
0x22ed9:	mov dword ptr [rbp - 0x28], eax     
MEMORY OFFSET:     -0x28     -40  >>-32

0x22edc:	add ebx, 1                          #      for (size = 0, i = first; i < last; i|+|+)
0x22edf:	cmp ebx, dword ptr [rbp - 0x38]     #      for (size = 0, i = first; i |<| last; i++)
MEMORY OFFSET:     -0x38     -56  >>-48

0x22ee2:	jl 0x22eb2                          
0x22ee4:	mov eax, dword ptr [rbp - 0x28]     #      result = xmalloc (size |+| 1);
MEMORY OFFSET:     -0x28     -40  >>-32

0x22ee7:	add eax, 1                          
0x22eea:	cdqe                                #      result = |x|malloc (size + 1);
0x22eec:	mov rdi, rax                        
0x22eef:	call 0x24650                        
0x22ef4:	mov qword ptr [rbp - 0x20], rax     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22ef8:	mov ebx, dword ptr [rbp - 0x34]     #      for (i |=| first; i < last; i++)
MEMORY OFFSET:     -0x34     -52  >>-44

0x22efb:	jmp 0x22f85                         #      |f|or (i = first; i < last; i++)
0x22f00:	movsxd rax, ebx                     #	  strcpy (result + offset, list|[|i]);
0x22f03:	lea rdx, [rax*8]                    
0x22f0b:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x22f0f:	add rax, rdx                        
0x22f12:	mov rax, qword ptr [rax]            #	  |s|trcpy (result + offset, list[i]);
0x22f15:	mov edx, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x22f18:	movsxd rcx, edx                     
0x22f1b:	mov rdx, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22f1f:	add rdx, rcx                        
0x22f22:	mov rsi, rax                        
0x22f25:	mov rdi, rdx                        
0x22f28:	call 0x4870                         
0x22f2d:	movsxd rax, ebx                     #	  offset += strlen (list|[|i]);
0x22f30:	lea rdx, [rax*8]                    
0x22f38:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x22f3c:	add rax, rdx                        
0x22f3f:	mov rax, qword ptr [rax]            #	  offset += |s|trlen (list[i]);
0x22f42:	mov rdi, rax                        
0x22f45:	call 0x4960                         
0x22f4a:	mov edx, eax                        #	  offset |+|= strlen (list[i]);
0x22f4c:	mov eax, dword ptr [rbp - 0x24]     
MEMORY OFFSET:     -0x24     -36  >>-28

0x22f4f:	add eax, edx                        
0x22f51:	mov dword ptr [rbp - 0x24], eax     
MEMORY OFFSET:     -0x24     -36  >>-28

0x22f54:	lea eax, [rbx + 1]                  #	  if (i |+| 1 < last)
MEMORY OFFSET:     0x1     1  >>9

0x22f57:	cmp dword ptr [rbp - 0x38], eax     #	  if |(|i + 1 < last)
MEMORY OFFSET:     -0x38     -56  >>-48

0x22f5a:	jle 0x22f82                         
0x22f5c:	mov eax, dword ptr [rbp - 0x24]     #	      result[offset|+|+] = ' ';
MEMORY OFFSET:     -0x24     -36  >>-28

0x22f5f:	lea edx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x22f62:	mov dword ptr [rbp - 0x24], edx     
MEMORY OFFSET:     -0x24     -36  >>-28

0x22f65:	movsxd rdx, eax                     
0x22f68:	mov rax, qword ptr [rbp - 0x20]     #	      result|[|offset++] = ' ';
MEMORY OFFSET:     -0x20     -32  >>-24

0x22f6c:	add rax, rdx                        
0x22f6f:	mov byte ptr [rax], 0x20            #	      result[offset++] |=| ' ';
0x22f72:	mov eax, dword ptr [rbp - 0x24]     #	      result|[|offset] = 0;
MEMORY OFFSET:     -0x24     -36  >>-28

0x22f75:	movsxd rdx, eax                     
0x22f78:	mov rax, qword ptr [rbp - 0x20]     
MEMORY OFFSET:     -0x20     -32  >>-24

0x22f7c:	add rax, rdx                        
0x22f7f:	mov byte ptr [rax], 0               #	      result[offset] |=| 0;
0x22f82:	add ebx, 1                          #      for (i = first; i < last; i|+|+)
0x22f85:	cmp ebx, dword ptr [rbp - 0x38]     #      for (i = first; i |<| last; i++)
MEMORY OFFSET:     -0x38     -56  >>-48

0x22f88:	jl 0x22f00                          
0x22f8e:	mov ebx, 0                          #  for (i |=| 0; i < len; i++)
0x22f93:	jmp 0x22fb5                         #  |f|or (i = 0; i < len; i++)
0x22f95:	movsxd rax, ebx                     #    xfree (list|[|i]);
0x22f98:	lea rdx, [rax*8]                    
0x22fa0:	mov rax, qword ptr [rbp - 0x18]     
MEMORY OFFSET:     -0x18     -24  >>-16

0x22fa4:	add rax, rdx                        
0x22fa7:	mov rax, qword ptr [rax]            #    |x|free (list[i]);
0x22faa:	mov rdi, rax                        
0x22fad:	call 0x1eeae                        
0x22fb2:	add ebx, 1                          #  for (i = 0; i < len; i|+|+)
0x22fb5:	cmp ebx, r12d                       #  for (i = 0; i |<| len; i++)
0x22fb8:	jl 0x22f95                          
0x22fba:	mov rax, qword ptr [rbp - 0x18]     #  |x|free (list);
MEMORY OFFSET:     -0x18     -24  >>-16

0x22fbe:	mov rdi, rax                        
0x22fc1:	call 0x1eeae                        
0x22fc6:	mov rax, qword ptr [rbp - 0x20]     #  return |(|result);
MEMORY OFFSET:     -0x20     -32  >>-24

0x22fca:	add rsp, 0x30                       #|}|
0x22fce:	pop rbx                             
0x22fcf:	pop r12                             
0x22fd1:	pop rbp                             
0x22fd2:	ret                                 
0x22fd3:	endbr64                             #|{|
0x22fd7:	push rbp                            
0x22fd8:	mov rbp, rsp                        
0x22fdb:	push r15                            
0x22fdd:	push r14                            
0x22fdf:	push r13                            
0x22fe1:	push r12                            
0x22fe3:	push rbx                            
0x22fe4:	sub rsp, 0x38                       
0x22fe8:	mov qword ptr [rbp - 0x58], rdi     
MEMORY OFFSET:     -0x58     -88  >>-80

0x22fec:	mov qword ptr [rbp - 0x38], 0       #  char **|r|esult = (char **)NULL;
MEMORY OFFSET:     -0x38     -56  >>-48

0x22ff4:	mov r13d, 0                         #  i = result_index = size |=| 0;
0x22ffa:	mov r12d, r13d                      #  i = result_index |=| size = 0;
0x22ffd:	mov ebx, r12d                       #  i |=| result_index = size = 0;
0x23000:	jmp 0x23442                         #  while |(|string[i])
0x23005:	mov dword ptr [rbp - 0x44], 0       #      int |d|elimiter = 0;
MEMORY OFFSET:     -0x44     -68  >>-60

0x2300c:	jmp 0x23011                         #      |f|or (; string[i] && whitespace (string[i]); i++)
0x2300e:	add ebx, 1                          #      for (; string[i] && whitespace (string[i]); i|+|+)
0x23011:	movsxd rdx, ebx                     #      for (; string|[|i] && whitespace (string[i]); i++)
0x23014:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23018:	add rax, rdx                        
0x2301b:	movzx eax, byte ptr [rax]           
0x2301e:	test al, al                         #      for (; string[i] |&|& whitespace (string[i]); i++)
0x23020:	je 0x23044                          
0x23022:	movsxd rdx, ebx                     #      for (; string[i] && |w|hitespace (string[i]); i++)
0x23025:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23029:	add rax, rdx                        
0x2302c:	movzx eax, byte ptr [rax]           
0x2302f:	cmp al, 0x20                        #      for (; string[i] |&|& whitespace (string[i]); i++)
0x23031:	je 0x2300e                          
0x23033:	movsxd rdx, ebx                     #      for (; string[i] && |w|hitespace (string[i]); i++)
0x23036:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2303a:	add rax, rdx                        
0x2303d:	movzx eax, byte ptr [rax]           
0x23040:	cmp al, 9                           
0x23042:	je 0x2300e                          
0x23044:	movsxd rdx, ebx                     #      if (!string|[|i] || string[i] == history_comment_char)
0x23047:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2304b:	add rax, rdx                        
0x2304e:	movzx eax, byte ptr [rax]           
0x23051:	test al, al                         #      if |(|!string[i] || string[i] == history_comment_char)
0x23053:	je 0x2306d                          
0x23055:	movsxd rdx, ebx                     #      if (!string[i] || string|[|i] == history_comment_char)
0x23058:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2305c:	add rax, rdx                        
0x2305f:	movzx edx, byte ptr [rax]           
0x23062:	movzx eax, byte ptr [rip + 0xeac3]  #      if (!string[i] || string[i] |=|= history_comment_char)
MEMORY OFFSET:     0xeac3     60099  >>60107

0x23069:	cmp dl, al                          #      if (!string[i] |||| string[i] == history_comment_char)
0x2306b:	jne 0x23076                         
0x2306d:	mov rax, qword ptr [rbp - 0x38]     #	return |(|result);
MEMORY OFFSET:     -0x38     -56  >>-48

0x23071:	jmp 0x2345b                         
0x23076:	mov r15d, ebx                       #      start |=| i;
0x23079:	movsxd rdx, ebx                     #      if (|m|ember (string[i], "()\n"))
0x2307c:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23080:	add rax, rdx                        
0x23083:	movzx eax, byte ptr [rax]           
0x23086:	test al, al                         #      if |(|member (string[i], "()\n"))
0x23088:	je 0x230b8                          
0x2308a:	movsxd rdx, ebx                     #      if (|m|ember (string[i], "()\n"))
0x2308d:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23091:	add rax, rdx                        
0x23094:	movzx eax, byte ptr [rax]           
0x23097:	movsx eax, al                       
0x2309a:	mov esi, eax                        
0x2309c:	lea rax, [rip + 0x650d]             
MEMORY OFFSET:     0x650d     25869  >>25877

0x230a3:	mov rdi, rax                        
0x230a6:	call 0x49b0                         
0x230ab:	test rax, rax                       
0x230ae:	je 0x230b8                          
0x230b0:	add ebx, 1                          #	  i|+|+;
0x230b3:	jmp 0x2337b                         #	  |g|oto got_token;
0x230b8:	movsxd rdx, ebx                     #      if (|m|ember (string[i], "<>;&|$"))
0x230bb:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x230bf:	add rax, rdx                        
0x230c2:	movzx eax, byte ptr [rax]           
0x230c5:	test al, al                         #      if |(|member (string[i], "<>;&|$"))
0x230c7:	je 0x231c6                          
0x230cd:	movsxd rdx, ebx                     #      if (|m|ember (string[i], "<>;&|$"))
0x230d0:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x230d4:	add rax, rdx                        
0x230d7:	movzx eax, byte ptr [rax]           
0x230da:	movsx eax, al                       
0x230dd:	mov esi, eax                        
0x230df:	lea rax, [rip + 0x64ce]             
MEMORY OFFSET:     0x64ce     25806  >>25814

0x230e6:	mov rdi, rax                        
0x230e9:	call 0x49b0                         
0x230ee:	test rax, rax                       
0x230f1:	je 0x231c6                          
0x230f7:	movsxd rax, ebx                     #	  int peek = string|[|i + 1];
0x230fa:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x230fe:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23102:	add rax, rdx                        
0x23105:	movzx eax, byte ptr [rax]           
0x23108:	movsx eax, al                       #	  int |p|eek = string[i + 1];
0x2310b:	mov dword ptr [rbp - 0x40], eax     
MEMORY OFFSET:     -0x40     -64  >>-56

0x2310e:	movsxd rdx, ebx                     #	  if (peek == string|[|i] && peek != '$')
0x23111:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23115:	add rax, rdx                        
0x23118:	movzx eax, byte ptr [rax]           
0x2311b:	movsx eax, al                       
0x2311e:	cmp dword ptr [rbp - 0x40], eax     #	  if |(|peek == string[i] && peek != '$')
MEMORY OFFSET:     -0x40     -64  >>-56

0x23121:	jne 0x2314f                         
0x23123:	cmp dword ptr [rbp - 0x40], 0x24    #	  if (peek == string[i] |&|& peek != '$')
MEMORY OFFSET:     -0x40     -64  >>-56

0x23127:	je 0x2314f                          
0x23129:	cmp dword ptr [rbp - 0x40], 0x3c    #	      if |(|peek == '<' && string[i + 2] == '-')
MEMORY OFFSET:     -0x40     -64  >>-56

0x2312d:	jne 0x23147                         
0x2312f:	movsxd rax, ebx                     #	      if (peek == '<' && string|[|i + 2] == '-')
0x23132:	lea rdx, [rax + 2]                  
MEMORY OFFSET:     0x2     2  >>10

0x23136:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2313a:	add rax, rdx                        
0x2313d:	movzx eax, byte ptr [rax]           
0x23140:	cmp al, 0x2d                        #	      if (peek == '<' |&|& string[i + 2] == '-')
0x23142:	jne 0x23147                         
0x23144:	add ebx, 1                          #		i|+|+;
0x23147:	add ebx, 2                          #	      i |+|= 2;
0x2314a:	jmp 0x2337b                         #	      |g|oto got_token;
0x2314f:	cmp dword ptr [rbp - 0x40], 0x26    #	      if |(|(peek == '&' && (string[i] == '>' || string[i] == '<')) ||
MEMORY OFFSET:     -0x40     -64  >>-56

0x23153:	jne 0x23177                         
0x23155:	movsxd rdx, ebx                     #	      if ((peek == '&' && (string|[|i] == '>' || string[i] == '<')) ||
0x23158:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2315c:	add rax, rdx                        
0x2315f:	movzx eax, byte ptr [rax]           
0x23162:	cmp al, 0x3e                        #	      if ((peek == '&' |&|& (string[i] == '>' || string[i] == '<')) ||
0x23164:	je 0x231a5                          
0x23166:	movsxd rdx, ebx                     #	      if ((peek == '&' && (string[i] == '>' || string|[|i] == '<')) ||
0x23169:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2316d:	add rax, rdx                        
0x23170:	movzx eax, byte ptr [rax]           
0x23173:	cmp al, 0x3c                        #	      if ((peek == '&' && (string[i] == '>' |||| string[i] == '<')) ||
0x23175:	je 0x231a5                          
0x23177:	cmp dword ptr [rbp - 0x40], 0x3e    #	      if ((peek == '&' && (string[i] == '>' || string[i] == '<')) ||||
MEMORY OFFSET:     -0x40     -64  >>-56

0x2317b:	jne 0x2318e                         
0x2317d:	movsxd rdx, ebx                     #		  ((peek == '>') && (string|[|i] == '&')) ||
0x23180:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23184:	add rax, rdx                        
0x23187:	movzx eax, byte ptr [rax]           
0x2318a:	cmp al, 0x26                        #		  ((peek == '>') |&|& (string[i] == '&')) ||
0x2318c:	je 0x231a5                          
0x2318e:	cmp dword ptr [rbp - 0x40], 0x28    #		  ((peek == '>') && (string[i] == '&')) ||||
MEMORY OFFSET:     -0x40     -64  >>-56

0x23192:	jne 0x231ad                         
0x23194:	movsxd rdx, ebx                     #		  ((peek == '(') && (string|[|i] == '$')))
0x23197:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2319b:	add rax, rdx                        
0x2319e:	movzx eax, byte ptr [rax]           
0x231a1:	cmp al, 0x24                        #		  ((peek == '(') |&|& (string[i] == '$')))
0x231a3:	jne 0x231ad                         
0x231a5:	add ebx, 2                          #		  i |+|= 2;
0x231a8:	jmp 0x2337b                         #		  |g|oto got_token;
0x231ad:	movsxd rdx, ebx                     #	  if (string|[|i] != '$')
0x231b0:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x231b4:	add rax, rdx                        
0x231b7:	movzx eax, byte ptr [rax]           
0x231ba:	cmp al, 0x24                        #	  if |(|string[i] != '$')
0x231bc:	je 0x231c6                          
0x231be:	add ebx, 1                          #	      i|+|+;
0x231c1:	jmp 0x2337b                         #	      |g|oto got_token;
0x231c6:	movsxd rdx, ebx                     #      if (|m|ember (string[i], "\"'`"))
0x231c9:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x231cd:	add rax, rdx                        
0x231d0:	movzx eax, byte ptr [rax]           
0x231d3:	test al, al                         #      if |(|member (string[i], "\"'`"))
0x231d5:	je 0x23363                          
0x231db:	movsxd rdx, ebx                     #      if (|m|ember (string[i], "\"'`"))
0x231de:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x231e2:	add rax, rdx                        
0x231e5:	movzx eax, byte ptr [rax]           
0x231e8:	movsx eax, al                       
0x231eb:	mov esi, eax                        
0x231ed:	lea rax, [rip + 0x63c7]             
MEMORY OFFSET:     0x63c7     25543  >>25551

0x231f4:	mov rdi, rax                        
0x231f7:	call 0x49b0                         
0x231fc:	test rax, rax                       
0x231ff:	je 0x23363                          
0x23205:	mov eax, ebx                        #	delimiter = string[i|+|+];
0x23207:	lea ebx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x2320a:	movsxd rdx, eax                     
0x2320d:	mov rax, qword ptr [rbp - 0x58]     #	delimiter = string|[|i++];
MEMORY OFFSET:     -0x58     -88  >>-80

0x23211:	add rax, rdx                        
0x23214:	movzx eax, byte ptr [rax]           
0x23217:	movsx eax, al                       #	delimiter |=| string[i++];
0x2321a:	mov dword ptr [rbp - 0x44], eax     
MEMORY OFFSET:     -0x44     -68  >>-60

0x2321d:	jmp 0x23363                         #      |f|or (; string[i]; i++)
0x23222:	movsxd rdx, ebx                     #	  if (string|[|i] == '\\' && string[i + 1] == '\n')
0x23225:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23229:	add rax, rdx                        
0x2322c:	movzx eax, byte ptr [rax]           
0x2322f:	cmp al, 0x5c                        #	  if |(|string[i] == '\\' && string[i + 1] == '\n')
0x23231:	jne 0x23250                         
0x23233:	movsxd rax, ebx                     #	  if (string[i] == '\\' && string|[|i + 1] == '\n')
0x23236:	lea rdx, [rax + 1]                  
MEMORY OFFSET:     0x1     1  >>9

0x2323a:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2323e:	add rax, rdx                        
0x23241:	movzx eax, byte ptr [rax]           
0x23244:	cmp al, 0xa                         #	  if (string[i] == '\\' |&|& string[i + 1] == '\n')
0x23246:	jne 0x23250                         
0x23248:	add ebx, 1                          #	      i|+|+;
0x2324b:	jmp 0x23360                         #	      |c|ontinue;
0x23250:	movsxd rdx, ebx                     #	  if (string|[|i] == '\\' && delimiter != '\'' &&
0x23253:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23257:	add rax, rdx                        
0x2325a:	movzx eax, byte ptr [rax]           
0x2325d:	cmp al, 0x5c                        #	  if |(|string[i] == '\\' && delimiter != '\'' &&
0x2325f:	jne 0x232ac                         
0x23261:	cmp dword ptr [rbp - 0x44], 0x27    #	  if (string[i] == '\\' |&|& delimiter != '\'' &&
MEMORY OFFSET:     -0x44     -68  >>-60

0x23265:	je 0x232ac                          
0x23267:	cmp dword ptr [rbp - 0x44], 0x22    #	  if (string[i] == '\\' && delimiter != '\'' |&|&
MEMORY OFFSET:     -0x44     -68  >>-60

0x2326b:	jne 0x232a4                         
0x2326d:	movsxd rdx, ebx                     #	      (delimiter != '"' || |m|ember (string[i], slashify_in_quotes)))
0x23270:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23274:	add rax, rdx                        
0x23277:	movzx eax, byte ptr [rax]           
0x2327a:	test al, al                         #	      (delimiter != '"' |||| member (string[i], slashify_in_quotes)))
0x2327c:	je 0x232ac                          
0x2327e:	movsxd rdx, ebx                     #	      (delimiter != '"' || |m|ember (string[i], slashify_in_quotes)))
0x23281:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23285:	add rax, rdx                        
0x23288:	movzx eax, byte ptr [rax]           
0x2328b:	movsx eax, al                       
0x2328e:	mov esi, eax                        
0x23290:	lea rax, [rip + 0x6328]             
MEMORY OFFSET:     0x6328     25384  >>25392

0x23297:	mov rdi, rax                        
0x2329a:	call 0x49b0                         
0x2329f:	test rax, rax                       #	      (delimiter != '"' |||| member (string[i], slashify_in_quotes)))
0x232a2:	je 0x232ac                          
0x232a4:	add ebx, 1                          #	      i|+|+;
0x232a7:	jmp 0x23360                         #	      |c|ontinue;
0x232ac:	cmp dword ptr [rbp - 0x44], 0       #	  if |(|delimiter && string[i] == delimiter)
MEMORY OFFSET:     -0x44     -68  >>-60

0x232b0:	je 0x232d3                          
0x232b2:	movsxd rdx, ebx                     #	  if (delimiter && string|[|i] == delimiter)
0x232b5:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x232b9:	add rax, rdx                        
0x232bc:	movzx eax, byte ptr [rax]           
0x232bf:	movsx eax, al                       
0x232c2:	cmp dword ptr [rbp - 0x44], eax     #	  if (delimiter |&|& string[i] == delimiter)
MEMORY OFFSET:     -0x44     -68  >>-60

0x232c5:	jne 0x232d3                         
0x232c7:	mov dword ptr [rbp - 0x44], 0       #	      delimiter |=| 0;
MEMORY OFFSET:     -0x44     -68  >>-60

0x232ce:	jmp 0x23360                         #	      |c|ontinue;
0x232d3:	cmp dword ptr [rbp - 0x44], 0       #	  if |(|!delimiter && (member (string[i], " \t\n;&()|<>")))
MEMORY OFFSET:     -0x44     -68  >>-60

0x232d7:	jne 0x23310                         
0x232d9:	movsxd rdx, ebx                     #	  if (!delimiter && (|m|ember (string[i], " \t\n;&()|<>")))
0x232dc:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x232e0:	add rax, rdx                        
0x232e3:	movzx eax, byte ptr [rax]           
0x232e6:	test al, al                         #	  if (!delimiter |&|& (member (string[i], " \t\n;&()|<>")))
0x232e8:	je 0x23310                          
0x232ea:	movsxd rdx, ebx                     #	  if (!delimiter && (|m|ember (string[i], " \t\n;&()|<>")))
0x232ed:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x232f1:	add rax, rdx                        
0x232f4:	movzx eax, byte ptr [rax]           
0x232f7:	movsx eax, al                       
0x232fa:	mov esi, eax                        
0x232fc:	lea rax, [rip + 0x62c1]             
MEMORY OFFSET:     0x62c1     25281  >>25289

0x23303:	mov rdi, rax                        
0x23306:	call 0x49b0                         
0x2330b:	test rax, rax                       #	  if (!delimiter |&|& (member (string[i], " \t\n;&()|<>")))
0x2330e:	jne 0x2337a                         
0x23310:	cmp dword ptr [rbp - 0x44], 0       #	  if |(|!delimiter && member (string[i], "\"'`"))
MEMORY OFFSET:     -0x44     -68  >>-60

0x23314:	jne 0x23360                         
0x23316:	movsxd rdx, ebx                     #	  if (!delimiter && |m|ember (string[i], "\"'`"))
0x23319:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2331d:	add rax, rdx                        
0x23320:	movzx eax, byte ptr [rax]           
0x23323:	test al, al                         #	  if (!delimiter |&|& member (string[i], "\"'`"))
0x23325:	je 0x23360                          
0x23327:	movsxd rdx, ebx                     #	  if (!delimiter && |m|ember (string[i], "\"'`"))
0x2332a:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2332e:	add rax, rdx                        
0x23331:	movzx eax, byte ptr [rax]           
0x23334:	movsx eax, al                       
0x23337:	mov esi, eax                        
0x23339:	lea rax, [rip + 0x627b]             
MEMORY OFFSET:     0x627b     25211  >>25219

0x23340:	mov rdi, rax                        
0x23343:	call 0x49b0                         
0x23348:	test rax, rax                       #	  if (!delimiter |&|& member (string[i], "\"'`"))
0x2334b:	je 0x23360                          
0x2334d:	movsxd rdx, ebx                     #	    delimiter = string|[|i];
0x23350:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23354:	add rax, rdx                        
0x23357:	movzx eax, byte ptr [rax]           
0x2335a:	movsx eax, al                       #	    delimiter |=| string[i];
0x2335d:	mov dword ptr [rbp - 0x44], eax     
MEMORY OFFSET:     -0x44     -68  >>-60

0x23360:	add ebx, 1                          #      for (; string[i]; i|+|+)
0x23363:	movsxd rdx, ebx                     #      for (; string|[|i]; i++)
0x23366:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x2336a:	add rax, rdx                        
0x2336d:	movzx eax, byte ptr [rax]           
0x23370:	test al, al                         #      for (; |s|tring[i]; i++)
0x23372:	jne 0x23222                         
0x23378:	jmp 0x2337b                         #    |g|ot_token:
0x2337a:	nop                                 #	    |b|reak;
0x2337b:	mov eax, ebx                        #      len |=| i - start;
0x2337d:	sub eax, r15d                       
0x23380:	mov dword ptr [rbp - 0x3c], eax     
MEMORY OFFSET:     -0x3c     -60  >>-52

0x23383:	lea eax, [r12 + 2]                  #      if (result_index |+| 2 >= size)
MEMORY OFFSET:     0x2     2  >>10

0x23388:	cmp r13d, eax                       #      if |(|result_index + 2 >= size)
0x2338b:	jg 0x233af                          
0x2338d:	add r13d, 0xa                       #	result = (char **)xrealloc (result, ((size |+|= 10) * sizeof (char *)));
0x23391:	movsxd rax, r13d                    
0x23394:	lea rdx, [rax*8]                    #	result = (char **)|x|realloc (result, ((size += 10) * sizeof (char *)));
0x2339c:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x233a0:	mov rsi, rdx                        
0x233a3:	mov rdi, rax                        
0x233a6:	call 0x24670                        
0x233ab:	mov qword ptr [rbp - 0x38], rax     
MEMORY OFFSET:     -0x38     -56  >>-48

0x233af:	mov eax, dword ptr [rbp - 0x3c]     #      result[result_index] = xmalloc (1 |+| len);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x233b2:	add eax, 1                          
0x233b5:	cdqe                                #      result[result_index] = |x|malloc (1 + len);
0x233b7:	movsxd rdx, r12d                    #      result|[|result_index] = xmalloc (1 + len);
0x233ba:	lea rcx, [rdx*8]                    
0x233c2:	mov rdx, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x233c6:	lea r14, [rcx + rdx]                
0x233ca:	mov rdi, rax                        #      result[result_index] = |x|malloc (1 + len);
0x233cd:	call 0x24650                        
0x233d2:	mov qword ptr [r14], rax            #      result[result_index] |=| xmalloc (1 + len);
0x233d5:	mov eax, dword ptr [rbp - 0x3c]     #      |s|trncpy (result[result_index], string + start, len);
MEMORY OFFSET:     -0x3c     -60  >>-52

0x233d8:	movsxd rdx, eax                     
0x233db:	movsxd rcx, r15d                    
0x233de:	mov rax, qword ptr [rbp - 0x58]     #      strncpy (result[result_index], string |+| start, len);
MEMORY OFFSET:     -0x58     -88  >>-80

0x233e2:	add rcx, rax                        
0x233e5:	movsxd rax, r12d                    #      strncpy (result|[|result_index], string + start, len);
0x233e8:	lea rsi, [rax*8]                    
0x233f0:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x233f4:	add rax, rsi                        
0x233f7:	mov rax, qword ptr [rax]            #      |s|trncpy (result[result_index], string + start, len);
0x233fa:	mov rsi, rcx                        
0x233fd:	mov rdi, rax                        
0x23400:	call 0x4840                         
0x23405:	movsxd rax, r12d                    #      result|[|result_index][len] = '\0';
0x23408:	lea rdx, [rax*8]                    
0x23410:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x23414:	add rax, rdx                        
0x23417:	mov rdx, qword ptr [rax]            
0x2341a:	mov eax, dword ptr [rbp - 0x3c]     #      result[result_index]|[|len] = '\0';
MEMORY OFFSET:     -0x3c     -60  >>-52

0x2341d:	cdqe                                
0x2341f:	add rax, rdx                        
0x23422:	mov byte ptr [rax], 0               #      result[result_index][len] |=| '\0';
0x23425:	add r12d, 1                         #      result[++result_index] |=| (char *)NULL;
0x23429:	movsxd rax, r12d                    #      result[|+|+result_index] = (char *)NULL;
0x2342c:	lea rdx, [rax*8]                    #      result|[|++result_index] = (char *)NULL;
0x23434:	mov rax, qword ptr [rbp - 0x38]     
MEMORY OFFSET:     -0x38     -56  >>-48

0x23438:	add rax, rdx                        
0x2343b:	mov qword ptr [rax], 0              #      result[++result_index] |=| (char *)NULL;
0x23442:	movsxd rdx, ebx                     #  while (string|[|i])
0x23445:	mov rax, qword ptr [rbp - 0x58]     
MEMORY OFFSET:     -0x58     -88  >>-80

0x23449:	add rax, rdx                        
0x2344c:	movzx eax, byte ptr [rax]           
0x2344f:	test al, al                         #  while (|s|tring[i])
0x23451:	jne 0x23005                         
0x23457:	mov rax, qword ptr [rbp - 0x38]     #  return |(|result);
MEMORY OFFSET:     -0x38     -56  >>-48

0x2345b:	add rsp, 0x38                       #|}|
0x2345f:	pop rbx                             
0x23460:	pop r12                             
0x23462:	pop r13                             
0x23464:	pop r14                             
0x23466:	pop r15                             
0x23468:	pop rbp                             
0x23469:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/lib/fsusage.c
####################################################################################################

0x23470:	endbr64                             #|{|
0x23474:	push rbx                            
0x23475:	mov rbx, rdx                        
0x23478:	add rsp, -0x80                      
0x2347c:	mov rax, qword ptr fs:[0x28]        #|{|
MEMORY OFFSET:     0x28     40  >>48

0x23485:	mov qword ptr [rsp + 0x78], rax     
MEMORY OFFSET:     0x78     120  >>128

0x2348a:	xor eax, eax                        
0x2348c:	mov rsi, rsp                        #  if (|s|tatvfs (file, &fsd) < 0)
0x2348f:	call 0x4c80                         #  if (|s|tatvfs (file, &fsd) < 0)
0x23494:	test eax, eax                       #  if |(|statvfs (file, &fsd) < 0)
0x23496:	js 0x234f4                          
0x23498:	mov rax, qword ptr [rsp + 8]        #  fsp->fsu_blocksize = (fsd|.|f_frsize
MEMORY OFFSET:     0x8     8  >>16

0x2349d:	test rax, rax                       #			|:| PROPAGATE_ALL_ONES (fsd.f_bsize));
0x234a0:	cmove rax, qword ptr [rsp]          
0x234a5:	mov qword ptr [rbx], rax            #  fsp->fsu_blocksize |=| (fsd.f_frsize
0x234a8:	mov rax, qword ptr [rsp + 0x10]     #  fsp->fsu_blocks |=| PROPAGATE_ALL_ONES (fsd.f_blocks);
MEMORY OFFSET:     0x10     16  >>24

0x234ad:	mov qword ptr [rbx + 8], rax        
MEMORY OFFSET:     0x8     8  >>16

0x234b1:	mov rax, qword ptr [rsp + 0x18]     #  fsp->fsu_bfree |=| PROPAGATE_ALL_ONES (fsd.f_bfree);
MEMORY OFFSET:     0x18     24  >>32

0x234b6:	mov qword ptr [rbx + 0x10], rax     
MEMORY OFFSET:     0x10     16  >>24

0x234ba:	mov rax, qword ptr [rsp + 0x20]     #  fsp->fsu_bavail = |P|ROPAGATE_TOP_BIT (fsd.f_bavail);
MEMORY OFFSET:     0x20     32  >>40

0x234bf:	mov qword ptr [rbx + 0x18], rax     
MEMORY OFFSET:     0x18     24  >>32

0x234c3:	shr rax, 0x3f                       #  fsp->fsu_bavail_top_bit_set = EXTRACT_TOP_BIT (fsd.f_bavail) |!|= 0;
0x234c7:	mov byte ptr [rbx + 0x20], al       #  fsp->fsu_bavail_top_bit_set |=| EXTRACT_TOP_BIT (fsd.f_bavail) != 0;
MEMORY OFFSET:     0x20     32  >>40

0x234ca:	mov rax, qword ptr [rsp + 0x28]     #  fsp->fsu_files |=| PROPAGATE_ALL_ONES (fsd.f_files);
MEMORY OFFSET:     0x28     40  >>48

0x234cf:	mov qword ptr [rbx + 0x28], rax     
MEMORY OFFSET:     0x28     40  >>48

0x234d3:	mov rax, qword ptr [rsp + 0x30]     #  fsp->fsu_ffree |=| PROPAGATE_ALL_ONES (fsd.f_ffree);
MEMORY OFFSET:     0x30     48  >>56

0x234d8:	mov qword ptr [rbx + 0x30], rax     
MEMORY OFFSET:     0x30     48  >>56

0x234dc:	xor eax, eax                        #  return |0|;
0x234de:	mov rdx, qword ptr [rsp + 0x78]     #|}|
MEMORY OFFSET:     0x78     120  >>128

0x234e3:	sub rdx, qword ptr fs:[0x28]        
MEMORY OFFSET:     0x28     40  >>48

0x234ec:	jne 0x234fb                         
0x234ee:	sub rsp, -0x80                      
0x234f2:	pop rbx                             
0x234f3:	ret                                 #|}|
0x234f4:	mov eax, 0xffffffff                 #    return |-|1;
0x234f9:	jmp 0x234de                         
0x234fb:	call 0x4980                         #|}|

####################################################################################################
/home/nahid/reverse/binaries/gnuit/lib/human.c
####################################################################################################

0x23500:	endbr64                             #|{|
0x23504:	push r15                            
0x23506:	push r14                            
0x23508:	push r13                            
0x2350a:	mov r13, r8                         
0x2350d:	push r12                            
0x2350f:	mov r12, rcx                        
0x23512:	push rbp                            
0x23513:	push rbx                            
0x23514:	mov rbx, rdi                        
0x23517:	sub rsp, 0x98                       
0x2351e:	mov qword ptr [rsp], rsi            #|{|
0x23522:	mov qword ptr [rsp + 0x18], r8      
MEMORY OFFSET:     0x18     24  >>32

0x23527:	mov dword ptr [rsp + 0x48], edx     
MEMORY OFFSET:     0x48     72  >>80

0x2352b:	mov rax, qword ptr fs:[0x28]        #  int |i|nexact_style =
MEMORY OFFSET:     0x28     40  >>48

0x23534:	mov qword ptr [rsp + 0x88], rax     
MEMORY OFFSET:     0x88     136  >>144

0x2353c:	mov eax, edx                        
0x2353e:	and edx, 0x20                       #  unsigned int base = opts |&| human_base_1024 ? 1024 : 1000;
0x23541:	mov dword ptr [rsp + 0x30], edx     #  unsigned int base = opts |&| human_base_1024 ? 1024 : 1000;
MEMORY OFFSET:     0x30     48  >>56

0x23545:	and eax, 3                          #  int |i|nexact_style =
0x23548:	cmp edx, 1                          #  unsigned int base = opts & human_base_1024 ? 1024 |:| 1000;
0x2354b:	mov dword ptr [rsp + 0x10], eax     #  int |i|nexact_style =
MEMORY OFFSET:     0x10     16  >>24

0x2354f:	sbb eax, eax                        #  unsigned int base = opts & human_base_1024 ? 1024 |:| 1000;
0x23551:	and eax, 0xffffffe8                 #  unsigned int base = opts & human_base_1024 ? 1024 |:| 1000;
0x23554:	add eax, 0x400                      
0x23559:	mov dword ptr [rsp + 0x34], eax     
MEMORY OFFSET:     0x34     52  >>60

0x2355d:	call 0x48d0                         #  struct lconv const *l = |l|ocaleconv ();
0x23562:	mov r15, qword ptr [rax]            #  size_t pointlen = strlen (l|-|>decimal_point);
0x23565:	mov r14, rax                        #  struct lconv const *l = |l|ocaleconv ();
0x23568:	mov rdi, r15                        #  size_t pointlen = |s|trlen (l->decimal_point);
0x2356b:	call 0x4960                         
0x23570:	mov rcx, qword ptr [r14 + 0x10]     #  grouping |=| l->grouping;
MEMORY OFFSET:     0x10     16  >>24

0x23574:	mov r14, qword ptr [r14 + 8]        #  if (strlen (l|-|>thousands_sep) <= MB_LEN_MAX)
MEMORY OFFSET:     0x8     8  >>16

0x23578:	mov rbp, rax                        #  size_t pointlen = |s|trlen (l->decimal_point);
0x2357b:	sub rax, 1                          #  if (0 < pointlen |&|& pointlen <= MB_LEN_MAX)
0x2357f:	cmp rax, 0x10                       #  size_t |d|ecimal_pointlen = 1;
0x23583:	mov eax, 1                          
0x23588:	mov rdi, r14                        #  if (|s|trlen (l->thousands_sep) <= MB_LEN_MAX)
0x2358b:	mov qword ptr [rsp + 0x38], rcx     #  grouping |=| l->grouping;
MEMORY OFFSET:     0x38     56  >>64

0x23590:	cmovae rbp, rax                     #  size_t |d|ecimal_pointlen = 1;
0x23594:	lea rax, [rip + 0x6075]             #  size_t |d|ecimal_pointlen = 1;
MEMORY OFFSET:     0x6075     24693  >>24701

0x2359b:	cmovae r15, rax                     
0x2359f:	call 0x4960                         #  if (|s|trlen (l->thousands_sep) <= MB_LEN_MAX)
0x235a4:	cmp rax, 0x10                       #  char const *|t|housands_sep = "";
0x235a8:	lea rax, [rip + 0x6300]             
MEMORY OFFSET:     0x6300     25344  >>25352

0x235af:	cmova r14, rax                      
0x235b3:	mov rax, qword ptr [rsp]            #  psuffix |=| buf + LONGEST_HUMAN_READABLE - HUMAN_READABLE_SUFFIX_LENGTH_MAX;
0x235b7:	add rax, 0x288                      
0x235bd:	mov qword ptr [rsp + 8], rax        
MEMORY OFFSET:     0x8     8  >>16

0x235c2:	cmp r13, r12                        #  if |(|to_block_size <= from_block_size)
0x235c5:	ja 0x23720                          
0x235cb:	mov rax, r12                        #      |i|f (from_block_size % to_block_size == 0)
0x235ce:	xor edx, edx                        #      |i|f (from_block_size % to_block_size == 0)
0x235d0:	div r13                             
0x235d3:	test rdx, rdx                       #      if |(|from_block_size % to_block_size == 0)
0x235d6:	jne 0x235e4                         
0x235d8:	mul rbx                             #	  |i|f (amt / multiplier == n)
0x235db:	mov rcx, rax                        
0x235de:	jno 0x23b78                         #	  if |(|amt / multiplier == n)
0x235e4:	mov qword ptr [rsp + 0x20], r12     #    long double damt = n * (from_block_size |/| dto_block_size);
MEMORY OFFSET:     0x20     32  >>40

0x235e9:	fild qword ptr [rsp + 0x20]         
MEMORY OFFSET:     0x20     32  >>40

0x235ed:	test r12, r12                       
0x235f0:	js 0x23908                          
0x235f6:	mov rax, qword ptr [rsp + 0x18]     #    long double |d|to_block_size = to_block_size;
MEMORY OFFSET:     0x18     24  >>32

0x235fb:	mov qword ptr [rsp + 0x20], rax     
MEMORY OFFSET:     0x20     32  >>40

0x23600:	fild qword ptr [rsp + 0x20]         
MEMORY OFFSET:     0x20     32  >>40

0x23604:	test rax, rax                       
0x23607:	js 0x238e8                          
0x2360d:	mov qword ptr [rsp + 0x20], rbx     #    long double damt = n |*| (from_block_size / dto_block_size);
MEMORY OFFSET:     0x20     32  >>40

0x23612:	fdivp st(1)                         #    long double damt = n * (from_block_size |/| dto_block_size);
0x23614:	fild qword ptr [rsp + 0x20]         #    long double damt = n |*| (from_block_size / dto_block_size);
MEMORY OFFSET:     0x20     32  >>40

0x23618:	test rbx, rbx                       
0x2361b:	js 0x238d0                          
0x23621:	fmulp st(1)                         #    long double |d|amt = n * (from_block_size / dto_block_size);
0x23623:	test byte ptr [rsp + 0x48], 0x10    #    if |(|! (opts & human_autoscale))
MEMORY OFFSET:     0x48     72  >>80

0x23628:	je 0x23918                          
0x2362e:	fild dword ptr [rsp + 0x34]         #	    e |*|= base;
MEMORY OFFSET:     0x34     52  >>60

0x23632:	xor ebx, ebx                        #	exponent |=| 0;
0x23634:	fld st(0)                           #	exponent |=| 0;
0x23636:	jmp 0x23644                         
0x23638:	nop dword ptr [rax + rax]           
0x23640:	fstp st(1)                          #	exponent |=| 0;
0x23642:	fxch st(2)                          
0x23644:	fld st(0)                           #	    e |*|= base;
0x23646:	add ebx, 1                          #	    exponent|+|+;
0x23649:	fmul st(2)                          #	while (e |*| base <= damt && exponent < exponent_max);
0x2364b:	fxch st(3)                          #	while (e |*| base <= damt && exponent < exponent_max);
0x2364d:	fcomi st(3)                         #	while (e * base <= damt |&|& exponent < exponent_max);
0x2364f:	jb 0x23660                          
0x23651:	cmp ebx, 8                          #	while (e * base <= damt |&|& exponent < exponent_max);
0x23654:	jne 0x23640                         
0x23656:	fstp st(2)                          
0x23658:	fstp st(2)                          
0x2365a:	jmp 0x23664                         
0x2365c:	nop dword ptr [rax]                 
0x23660:	fstp st(2)                          
0x23662:	fstp st(2)                          
0x23664:	lea r15, [rbp + 1]                  #	nonintegerlen |=| decimal_pointlen + 1;
MEMORY OFFSET:     0x1     1  >>9

0x23668:	fdivrp st(1)                        #	damt |/|= e;
0x2366a:	cmp dword ptr [rsp + 0x30], 1       #	if (1 + nonintegerlen |+| ! (opts & human_base_1024) < buflen
MEMORY OFFSET:     0x30     48  >>56

0x2366f:	adc rbp, 2                          
0x23673:	cmp dword ptr [rsp + 0x10], 1       #  if |(|inexact_style != human_round_to_nearest && value < UINTMAX_MAX)
MEMORY OFFSET:     0x10     16  >>24

0x23678:	je 0x23c50                          
0x2367e:	fld xword ptr [rip + 0x600c]        #  if (inexact_style != human_round_to_nearest |&|& value < UINTMAX_MAX)
MEMORY OFFSET:     0x600c     24588  >>24596

0x23684:	fcomip st(1)                        #  if (inexact_style != human_round_to_nearest |&|& value < UINTMAX_MAX)
0x23686:	jbe 0x23af0                         
0x2368c:	fld dword ptr [rip + 0x5fee]        #      uintmax_t |u| = value;
MEMORY OFFSET:     0x5fee     24558  >>24566

0x23692:	fxch st(1)                          #      uintmax_t |u| = value;
0x23694:	fcomi st(1)                         
0x23696:	jae 0x23de0                         
0x2369c:	fstp st(1)                          
0x2369e:	fnstcw word ptr [rsp + 0x4e]        
MEMORY OFFSET:     0x4e     78  >>86

0x236a2:	movzx eax, word ptr [rsp + 0x4e]    
MEMORY OFFSET:     0x4e     78  >>86

0x236a7:	or ah, 0xc                          
0x236aa:	mov word ptr [rsp + 0x4c], ax       
MEMORY OFFSET:     0x4c     76  >>84

0x236af:	fld st(0)                           
0x236b1:	fldcw word ptr [rsp + 0x4c]         
MEMORY OFFSET:     0x4c     76  >>84

0x236b5:	fistp qword ptr [rsp + 0x20]        
MEMORY OFFSET:     0x20     32  >>40

0x236b9:	fldcw word ptr [rsp + 0x4e]         
MEMORY OFFSET:     0x4e     78  >>86

0x236bd:	mov rax, qword ptr [rsp + 0x20]     #      uintmax_t |u| = value;
MEMORY OFFSET:     0x20     32  >>40

0x236c2:	mov qword ptr [rsp + 0x20], rax     #      value = u + (inexact_style == human_ceiling && u |!|= value);
MEMORY OFFSET:     0x20     32  >>40

0x236c7:	fild qword ptr [rsp + 0x20]         
MEMORY OFFSET:     0x20     32  >>40

0x236cb:	test rax, rax                       
0x236ce:	jns 0x236d6                         
0x236d0:	fadd dword ptr [rip + 0x5fa6]       
MEMORY OFFSET:     0x5fa6     24486  >>24494

0x236d6:	mov ecx, dword ptr [rsp + 0x10]     #      value = u + (inexact_style == human_ceiling |&|& u != value);
MEMORY OFFSET:     0x10     16  >>24

0x236da:	test ecx, ecx                       
0x236dc:	jne 0x23af8                         
0x236e2:	fxch st(1)                          
0x236e4:	fucomi st(1)                        
0x236e6:	jp 0x236f2                          
0x236e8:	je 0x23b00                          
0x236ee:	fstp st(1)                          
0x236f0:	jmp 0x236f8                         
0x236f2:	fstp st(1)                          
0x236f4:	nop dword ptr [rax]                 
0x236f8:	add rax, 1                          #      value = u |+| (inexact_style == human_ceiling && u != value);
0x236fc:	mov qword ptr [rsp + 0x20], rax     #      value |=| u + (inexact_style == human_ceiling && u != value);
MEMORY OFFSET:     0x20     32  >>40

0x23701:	fild qword ptr [rsp + 0x20]         
MEMORY OFFSET:     0x20     32  >>40

0x23705:	jns 0x23afc                         
0x2370b:	fadd dword ptr [rip + 0x5f6b]       
MEMORY OFFSET:     0x5f6b     24427  >>24435

0x23711:	fxch st(1)                          
0x23713:	jmp 0x23b00                         #  |r|eturn value;
0x23718:	nop dword ptr [rax + rax]           
0x23720:	test r12, r12                       #  else if |(|from_block_size != 0 && to_block_size % from_block_size == 0)
0x23723:	je 0x235e4                          
0x23729:	mov rax, qword ptr [rsp + 0x18]     
MEMORY OFFSET:     0x18     24  >>32

0x2372e:	xor edx, edx                        #  else if |(|from_block_size != 0 && to_block_size % from_block_size == 0)
0x23730:	div r12                             
0x23733:	mov r8, rax                         
0x23736:	test rdx, rdx                       #  else if (from_block_size != 0 |&|& to_block_size % from_block_size == 0)
0x23739:	jne 0x235e4                         
0x2373f:	mov rax, rbx                        #      |u|intmax_t r10 = (n % divisor) * 10;
0x23742:	xor edx, edx                        #      |u|intmax_t r10 = (n % divisor) * 10;
0x23744:	div r8                              
0x23747:	mov rcx, rax                        
0x2374a:	lea rax, [rdx + rdx*4]              #      uintmax_t |r|10 = (n % divisor) * 10;
0x2374e:	xor edx, edx                        
0x23750:	add rax, rax                        #      uintmax_t |r|10 = (n % divisor) * 10;
0x23753:	div r8                              
0x23756:	add rdx, rdx                        #      uintmax_t |r|2 = (r10 % divisor) * 2;
0x23759:	mov edi, eax                        #      tenths |=| r10 / divisor;
0x2375b:	cmp r8, rdx                         #      rounding = r2 < divisor ? 0 < r2 |:| 2 + (divisor < r2);
0x2375e:	jbe 0x23dc8                         
0x23764:	xor esi, esi                        #      rounding = r2 < divisor ? 0 |<| r2 : 2 + (divisor < r2);
0x23766:	test rdx, rdx                       
0x23769:	setne sil                           
0x2376d:	mov r10d, dword ptr [rsp + 0x48]    #    if |(|opts & human_autoscale)
MEMORY OFFSET:     0x48     72  >>80

0x23772:	and r10d, 0x10                      
0x23776:	je 0x23b8b                          
0x2377c:	mov r8d, dword ptr [rsp + 0x34]     #	if (base |<|= amt)
MEMORY OFFSET:     0x34     52  >>60

0x23781:	xor ebx, ebx                        #	exponent |=| 0;
0x23783:	mov r11, r8                         #	if (base |<|= amt)
0x23786:	cmp r8, rcx                         #	if |(|base <= amt)
0x23789:	jbe 0x23aaf                         
0x2378f:	cmp dword ptr [rsp + 0x10], 1       #    if (|i|nexact_style == human_round_to_nearest
MEMORY OFFSET:     0x10     16  >>24

0x23794:	mov r8, qword ptr [rsp + 8]         
MEMORY OFFSET:     0x8     8  >>16

0x23799:	je 0x23da0                          
0x2379f:	mov r11d, dword ptr [rsp + 0x10]    #	: inexact_style == human_ceiling |&|& 0 < tenths + rounding)
MEMORY OFFSET:     0x10     16  >>24

0x237a4:	test r11d, r11d                     
0x237a7:	jne 0x237c8                         
0x237a9:	add esi, edi                        #	: inexact_style == human_ceiling && 0 < tenths |+| rounding)
0x237ab:	test esi, esi                       #	: inexact_style == human_ceiling |&|& 0 < tenths + rounding)
0x237ad:	jle 0x237c8                         
0x237af:	add rcx, 1                          #	amt|+|+;
0x237b3:	test r10d, r10d                     #	if |(|(opts & human_autoscale)
0x237b6:	je 0x237c8                          
0x237b8:	mov eax, dword ptr [rsp + 0x34]     #	    && amt |=|= base && exponent < exponent_max)
MEMORY OFFSET:     0x34     52  >>60

0x237bc:	cmp rax, rcx                        #	    |&|& amt == base && exponent < exponent_max)
0x237bf:	je 0x23ea2                          
0x237c5:	nop dword ptr [rax]                 
0x237c8:	movabs rsi, 0xcccccccccccccccd      #	int digit = amt |%| 10;
0x237d2:	mov rbp, r8                         #    if |(|inexact_style == human_round_to_nearest
0x237d5:	nop dword ptr [rax]                 
0x237d8:	mov rax, rcx                        #	int digit = amt |%| 10;
0x237db:	sub rbp, 1                          #	*--p |=| digit + '0';
0x237df:	mul rsi                             #	int digit = amt |%| 10;
0x237e2:	mov rax, rcx                        
0x237e5:	shr rdx, 3                          
0x237e9:	lea rdi, [rdx + rdx*4]              
0x237ed:	add rdi, rdi                        
0x237f0:	sub rax, rdi                        
0x237f3:	add eax, 0x30                       #	*--p = digit |+| '0';
0x237f6:	mov byte ptr [rbp], al              
0x237f9:	mov rax, rcx                        #    while ((amt /= 10) |!|= 0);
0x237fc:	mov rcx, rdx                        #    while ((amt |/|= 10) != 0);
0x237ff:	cmp rax, 9                          #    while ((amt /= 10) |!|= 0);
0x23803:	ja 0x237d8                          
0x23805:	test byte ptr [rsp + 0x48], 4       #  if |(|opts & human_group_digits)
MEMORY OFFSET:     0x48     72  >>80

0x2380a:	je 0x23a0c                          
0x23810:	mov rdi, r14                        #  size_t thousands_seplen = |s|trlen (thousands_sep);
0x23813:	mov r12, r8                         #    p = group_number (p, integerlim |-| p, grouping, thousands_sep);
0x23816:	mov qword ptr [rsp + 0x40], r8      
MEMORY OFFSET:     0x40     64  >>72

0x2381b:	mov r13, -1                         #  size_t |g|rouplen = SIZE_MAX;
0x23822:	call 0x4960                         #  size_t thousands_seplen = |s|trlen (thousands_sep);
0x23827:	sub r12, rbp                        #    p = group_number (p, integerlim |-| p, grouping, thousands_sep);
