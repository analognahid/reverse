
####################################################################################################
/home/nahid/reverse/binaries/gnuit/lib/quotearg.c
####################################################################################################

0x4ee0:	call 0x4810                          #    |a|bort ();

####################################################################################################
 /home/nahid/reverse/binaries/gnuit/src/git.c
####################################################################################################

0x4fd9:	endbr64                              #|{|
0x4fdd:	push rbp                             
0x4fde:	mov rbp, rsp                         
0x4fe1:	mov eax, dword ptr [rip + 0x2b9f5]   #    if (tty_lines |>|= 7)
0x4fe7:	cmp eax, 6                           #    if |(|tty_lines >= 7)
0x4fea:	jle 0x501a                           
0x4fec:	mov eax, dword ptr [rip + 0x2a036]   #	if (|t|wo_panel_mode)
0x4ff2:	test eax, eax                        #	if |(|two_panel_mode)
0x4ff4:	je 0x5008                            
0x4ff6:	mov eax, dword ptr [rip + 0x2b9e4]   #	    if (tty_columns |>|= 6 * 2)
0x4ffc:	cmp eax, 0xb                         #	    if |(|tty_columns >= 6 * 2)
0x4fff:	jle 0x501a                           
0x5001:	mov eax, 1                           #		return |O|N;
0x5006:	jmp 0x501f                           
0x5008:	mov eax, dword ptr [rip + 0x2b9d2]   #	    if (tty_columns |>|= 6)
0x500e:	cmp eax, 5                           #	    if |(|tty_columns >= 6)
0x5011:	jle 0x501a                           
0x5013:	mov eax, 1                           #		return |O|N;
0x5018:	jmp 0x501f                           
0x501a:	mov eax, 0                           #    return |O|FF;
0x501f:	pop rbp                              #|}|
0x5020:	ret                                  
0x5021:	endbr64                              #|{|
0x5025:	push rbp                             
0x5026:	mov rbp, rsp                         
0x5029:	mov eax, dword ptr [rip + 0x2b8b1]   #    return (current_mode |=|= GIT_TERMINAL_MODE);
0x502f:	cmp eax, 1                           
0x5032:	sete al                              
0x5035:	movzx eax, al                        
0x5038:	pop rbp                              #|}|
0x5039:	ret                                  
0x503a:	endbr64                              #|{|
0x503e:	push rbp                             
0x503f:	mov rbp, rsp                         
0x5042:	push rbx                             
0x5043:	sub rsp, 0x38                        
0x5047:	mov dword ptr [rbp - 0x34], edi      
0x504a:	mov dword ptr [rbp - 0x28], 0        #    int |d|isplay_title = OFF;
0x5051:	mov dword ptr [rbp - 0x24], 0        #    int |d|isplay_status = OFF;
0x5058:	mov eax, dword ptr [rip + 0x2b97e]   #    int |o|ld_tty_lines = tty_lines;
0x505e:	mov dword ptr [rbp - 0x20], eax      
0x5061:	mov eax, dword ptr [rip + 0x2b979]   #    int |o|ld_tty_columns = tty_columns;
0x5067:	mov dword ptr [rbp - 0x1c], eax      
0x506a:	mov eax, 0                           #    |t|ty_resize();
0x506f:	call 0xc866                          
0x5074:	cmp dword ptr [rbp - 0x34], 0        #    if |(|!resize_required)
0x5078:	jne 0x5094                           
0x507a:	mov eax, dword ptr [rip + 0x2b95c]   #	if (tty_lines |=|= old_tty_lines && tty_columns == old_tty_columns)
0x5080:	cmp dword ptr [rbp - 0x20], eax      #	if |(|tty_lines == old_tty_lines && tty_columns == old_tty_columns)
0x5083:	jne 0x5094                           
0x5085:	mov eax, dword ptr [rip + 0x2b955]   #	if (tty_lines == old_tty_lines && tty_columns |=|= old_tty_columns)
0x508b:	cmp dword ptr [rbp - 0x1c], eax      #	if (tty_lines == old_tty_lines |&|& tty_columns == old_tty_columns)
0x508e:	je 0x5360                            
0x5094:	mov eax, dword ptr [rip + 0x2b9a6]   #    if (|L|inuxConsole)
0x509a:	test eax, eax                        #    if |(|LinuxConsole)
0x509c:	je 0x50ce                            
0x509e:	mov edx, dword ptr [rip + 0x2b93c]   #	screen = xrealloc(screen, 4 + tty_columns |*| tty_lines * 2);
0x50a4:	mov eax, dword ptr [rip + 0x2b932]   
0x50aa:	imul eax, edx                        
0x50ad:	add eax, 2                           #	screen = xrealloc(screen, 4 |+| tty_columns * tty_lines * 2);
0x50b0:	add eax, eax                         
0x50b2:	movsxd rdx, eax                      #	screen = |x|realloc(screen, 4 + tty_columns * tty_lines * 2);
0x50b5:	mov rax, qword ptr [rip + 0x2b83c]   
0x50bc:	mov rsi, rdx                         
0x50bf:	mov rdi, rax                         
0x50c2:	call 0x24670                         
0x50c7:	mov qword ptr [rip + 0x2b82a], rax   #	screen |=| xrealloc(screen, 4 + tty_columns * tty_lines * 2);
0x50ce:	mov eax, dword ptr [rip + 0x2b908]   #    if (tty_lines |>|= 2)
0x50d4:	cmp eax, 1                           #    if |(|tty_lines >= 2)
0x50d7:	jle 0x50e0                           
0x50d9:	mov dword ptr [rbp - 0x24], 1        #	display_status |=| ON;
0x50e0:	mov eax, dword ptr [rip + 0x2b8f6]   #    if (tty_lines |>|= 3)
0x50e6:	cmp eax, 2                           #    if |(|tty_lines >= 3)
0x50e9:	jle 0x50f2                           
0x50eb:	mov dword ptr [rbp - 0x28], 1        #	display_title |=| ON;
0x50f2:	mov eax, 0                           #    if (|p|anels_can_be_displayed())
0x50f7:	call 0x4fd9                          
0x50fc:	test eax, eax                        #    if |(|panels_can_be_displayed())
0x50fe:	je 0x529e                            
0x5104:	mov eax, dword ptr [rip + 0x29f1e]   #	if (|t|wo_panel_mode)
0x510a:	test eax, eax                        #	if |(|two_panel_mode)
0x510c:	je 0x5234                            
0x5112:	mov eax, dword ptr [rip + 0x2b8c8]   #	    int right_panel_columns = (tty_columns |>|> 1);
0x5118:	sar eax, 1                           #	    int |r|ight_panel_columns = (tty_columns >> 1);
0x511a:	mov dword ptr [rbp - 0x18], eax      
0x511d:	mov eax, dword ptr [rip + 0x2b8bd]   #	    int left_panel_columns = right_panel_columns + (tty_columns |&| 1);
0x5123:	and eax, 1                           
0x5126:	mov edx, eax                         
0x5128:	mov eax, dword ptr [rbp - 0x18]      #	    int |l|eft_panel_columns = right_panel_columns + (tty_columns & 1);
0x512b:	add eax, edx                         
0x512d:	mov dword ptr [rbp - 0x14], eax      
0x5130:	mov rax, qword ptr [rip + 0x2b7d9]   #	    if (|w|indow_x(panel_window(src_panel)) <=
0x5137:	mov rdi, rax                         
0x513a:	call 0x10ced                         
0x513f:	mov rdi, rax                         
0x5142:	call 0xdc6b                          
0x5147:	mov ebx, eax                         
0x5149:	mov rax, qword ptr [rip + 0x2b7c8]   #		|w|indow_x(panel_window(dst_panel)))
0x5150:	mov rdi, rax                         
0x5153:	call 0x10ced                         
0x5158:	mov rdi, rax                         
0x515b:	call 0xdc6b                          
0x5160:	cmp ebx, eax                         #	    if |(|window_x(panel_window(src_panel)) <=
0x5162:	jg 0x51cc                            
0x5164:	mov eax, dword ptr [rbp - 0x14]      #		|p|anel_resize(src_panel, 0, 1,
0x5167:	movsxd rcx, eax                      
0x516a:	mov eax, dword ptr [rip + 0x2b86c]   #			     tty_lines |-| 3, left_panel_columns);
0x5170:	sub eax, 3                           
0x5173:	movsxd rdx, eax                      #		|p|anel_resize(src_panel, 0, 1,
0x5176:	mov rax, qword ptr [rip + 0x2b793]   
0x517d:	mov r8, rcx                          
0x5180:	mov rcx, rdx                         
0x5183:	mov edx, 1                           
0x5188:	mov esi, 0                           
0x518d:	mov rdi, rax                         
0x5190:	call 0x11348                         
0x5195:	mov eax, dword ptr [rbp - 0x18]      #		|p|anel_resize(dst_panel, left_panel_columns, 1,
0x5198:	movsxd rcx, eax                      
0x519b:	mov eax, dword ptr [rip + 0x2b83b]   #			     tty_lines |-| 3, right_panel_columns);
0x51a1:	sub eax, 3                           
0x51a4:	movsxd rdx, eax                      #		|p|anel_resize(dst_panel, left_panel_columns, 1,
0x51a7:	mov eax, dword ptr [rbp - 0x14]      
0x51aa:	movsxd rsi, eax                      
0x51ad:	mov rax, qword ptr [rip + 0x2b764]   
0x51b4:	mov r8, rcx                          
0x51b7:	mov rcx, rdx                         
0x51ba:	mov edx, 1                           
0x51bf:	mov rdi, rax                         
0x51c2:	call 0x11348                         
0x51c7:	jmp 0x52e6                           
0x51cc:	mov eax, dword ptr [rbp - 0x18]      #		|p|anel_resize(src_panel, left_panel_columns, 1,
0x51cf:	movsxd rcx, eax                      
0x51d2:	mov eax, dword ptr [rip + 0x2b804]   #			     tty_lines |-| 3, right_panel_columns);
0x51d8:	sub eax, 3                           
0x51db:	movsxd rdx, eax                      #		|p|anel_resize(src_panel, left_panel_columns, 1,
0x51de:	mov eax, dword ptr [rbp - 0x14]      
0x51e1:	movsxd rsi, eax                      
0x51e4:	mov rax, qword ptr [rip + 0x2b725]   
0x51eb:	mov r8, rcx                          
0x51ee:	mov rcx, rdx                         
0x51f1:	mov edx, 1                           
0x51f6:	mov rdi, rax                         
0x51f9:	call 0x11348                         
0x51fe:	mov eax, dword ptr [rbp - 0x14]      #		|p|anel_resize(dst_panel, 0, 1,
0x5201:	movsxd rcx, eax                      
0x5204:	mov eax, dword ptr [rip + 0x2b7d2]   #			     tty_lines |-| 3, left_panel_columns);
0x520a:	sub eax, 3                           
0x520d:	movsxd rdx, eax                      #		|p|anel_resize(dst_panel, 0, 1,
0x5210:	mov rax, qword ptr [rip + 0x2b701]   
0x5217:	mov r8, rcx                          
0x521a:	mov rcx, rdx                         
0x521d:	mov edx, 1                           
0x5222:	mov esi, 0                           
0x5227:	mov rdi, rax                         
0x522a:	call 0x11348                         
0x522f:	jmp 0x52e6                           
0x5234:	mov eax, dword ptr [rip + 0x2b7a6]   #	    |p|anel_resize(src_panel, 0, 1, tty_lines - 3, tty_columns);
0x523a:	movsxd rcx, eax                      
0x523d:	mov eax, dword ptr [rip + 0x2b799]   #	    panel_resize(src_panel, 0, 1, tty_lines |-| 3, tty_columns);
0x5243:	sub eax, 3                           
0x5246:	movsxd rdx, eax                      #	    |p|anel_resize(src_panel, 0, 1, tty_lines - 3, tty_columns);
0x5249:	mov rax, qword ptr [rip + 0x2b6c0]   
0x5250:	mov r8, rcx                          
0x5253:	mov rcx, rdx                         
0x5256:	mov edx, 1                           
0x525b:	mov esi, 0                           
0x5260:	mov rdi, rax                         
0x5263:	call 0x11348                         
0x5268:	mov eax, dword ptr [rip + 0x2b772]   #	    |p|anel_resize(dst_panel, 0, 1, tty_lines - 3, tty_columns);
0x526e:	movsxd rcx, eax                      
0x5271:	mov eax, dword ptr [rip + 0x2b765]   #	    panel_resize(dst_panel, 0, 1, tty_lines |-| 3, tty_columns);
0x5277:	sub eax, 3                           
0x527a:	movsxd rdx, eax                      #	    |p|anel_resize(dst_panel, 0, 1, tty_lines - 3, tty_columns);
0x527d:	mov rax, qword ptr [rip + 0x2b694]   
0x5284:	mov r8, rcx                          
0x5287:	mov rcx, rdx                         
0x528a:	mov edx, 1                           
0x528f:	mov esi, 0                           
0x5294:	mov rdi, rax                         
0x5297:	call 0x11348                         
0x529c:	jmp 0x52e6                           
0x529e:	mov rax, qword ptr [rip + 0x2b66b]   #	|p|anel_resize(src_panel, 0x10000, 0x10000, 2, 80);
0x52a5:	mov r8d, 0x50                        
0x52ab:	mov ecx, 2                           
0x52b0:	mov edx, 0x10000                     
0x52b5:	mov esi, 0x10000                     
0x52ba:	mov rdi, rax                         
0x52bd:	call 0x11348                         
0x52c2:	mov rax, qword ptr [rip + 0x2b64f]   #	|p|anel_resize(dst_panel, 0x10000, 0x10000, 2, 80);
0x52c9:	mov r8d, 0x50                        
0x52cf:	mov ecx, 2                           
0x52d4:	mov edx, 0x10000                     
0x52d9:	mov esi, 0x10000                     
0x52de:	mov rdi, rax                         
0x52e1:	call 0x11348                         
0x52e6:	cmp dword ptr [rbp - 0x28], 0        #    |t|itle_resize(display_title ? tty_columns : 0, 0);
0x52ea:	je 0x52f6                            
0x52ec:	mov eax, dword ptr [rip + 0x2b6ee]   #    title_resize(display_title ? tty_columns |:| 0, 0);
0x52f2:	cdqe                                 #    |t|itle_resize(display_title ? tty_columns : 0, 0);
0x52f4:	jmp 0x52fb                           
0x52f6:	mov eax, 0                           #    |t|itle_resize(display_title ? tty_columns : 0, 0);
0x52fb:	mov esi, 0                           #    |t|itle_resize(display_title ? tty_columns : 0, 0);
0x5300:	mov rdi, rax                         
0x5303:	call 0x1c4e9                         
0x5308:	mov eax, dword ptr [rip + 0x2b6ce]   #    status_resize(display_status ? tty_columns : 0, tty_lines |-| 1);
0x530e:	sub eax, 1                           
0x5311:	movsxd rdx, eax                      #    |s|tatus_resize(display_status ? tty_columns : 0, tty_lines - 1);
0x5314:	cmp dword ptr [rbp - 0x24], 0        
0x5318:	je 0x5324                            
0x531a:	mov eax, dword ptr [rip + 0x2b6c0]   #    status_resize(display_status ? tty_columns |:| 0, tty_lines - 1);
0x5320:	cdqe                                 #    |s|tatus_resize(display_status ? tty_columns : 0, tty_lines - 1);
0x5322:	jmp 0x5329                           
0x5324:	mov eax, 0                           #    |s|tatus_resize(display_status ? tty_columns : 0, tty_lines - 1);
0x5329:	mov rsi, rdx                         #    |s|tatus_resize(display_status ? tty_columns : 0, tty_lines - 1);
0x532c:	mov rdi, rax                         
0x532f:	call 0x10167                         
0x5334:	mov eax, dword ptr [rip + 0x2b6a2]   #    il_resize(tty_columns, (tty_lines |=|= 1) ? 0 : (tty_lines - 2));
0x533a:	cmp eax, 1                           #    |i|l_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines - 2));
0x533d:	je 0x534a                            
0x533f:	mov eax, dword ptr [rip + 0x2b697]   #    il_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines |-| 2));
0x5345:	lea edx, [rax - 2]                   #    |i|l_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines - 2));
0x5348:	jmp 0x534f                           
0x534a:	mov edx, 0                           #    |i|l_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines - 2));
0x534f:	mov eax, dword ptr [rip + 0x2b68b]   #    |i|l_resize(tty_columns, (tty_lines == 1) ? 0 : (tty_lines - 2));
0x5355:	mov esi, edx                         
0x5357:	mov edi, eax                         
0x5359:	call 0xe1a9                          
0x535e:	jmp 0x5361                           
0x5360:	nop                                  #	    |r|eturn;
0x5361:	mov rbx, qword ptr [rbp - 8]         #|}|
0x5365:	leave                                
0x5366:	ret                                  
0x5367:	endbr64                              #|{|
0x536b:	push rbp                             
0x536c:	mov rbp, rsp                         
0x536f:	sub rsp, 0x10                        
0x5373:	mov dword ptr [rbp - 4], edi         
0x5376:	mov edi, 0                           #    |r|esize(0);
0x537b:	mov eax, 0                           
0x5380:	call 0x503a                          
0x5385:	cmp dword ptr [rbp - 4], 0x12        #    if |(|signum == SIGCONT)
0x5389:	jne 0x539f                           
0x538b:	mov edi, 1                           #	|t|ty_set_mode(TTY_NONCANONIC);
0x5390:	call 0xadac                          
0x5395:	mov eax, 0                           #	|t|ty_defaults();
0x539a:	call 0xc083                          
0x539f:	mov eax, dword ptr [rip + 0x2b543]   #    if (|w|ait_msg)
0x53a5:	test eax, eax                        #    if |(|wait_msg)
0x53a7:	jne 0x549f                           
0x53ad:	mov rax, qword ptr [rip + 0x2b55c]   #    |p|anel_no_optimizations(src_panel);
0x53b4:	mov rdi, rax                         
0x53b7:	call 0x110b0                         
0x53bc:	mov rax, qword ptr [rip + 0x2b555]   #    |p|anel_no_optimizations(dst_panel);
0x53c3:	mov rdi, rax                         
0x53c6:	call 0x110b0                         
0x53cb:	mov rax, qword ptr [rip + 0x2b53e]   #    |p|anel_center_current_entry(src_panel);
0x53d2:	mov rdi, rax                         
0x53d5:	call 0x112ef                         
0x53da:	mov rax, qword ptr [rip + 0x2b537]   #    |p|anel_center_current_entry(dst_panel);
0x53e1:	mov rdi, rax                         
0x53e4:	call 0x112ef                         
0x53e9:	mov eax, dword ptr [rip + 0x2b4f1]   #    if (current_mode |=|= GIT_SCREEN_MODE)
0x53ef:	test eax, eax                        #    if |(|current_mode == GIT_SCREEN_MODE)
0x53f1:	jne 0x5449                           
0x53f3:	mov eax, 0                           #	if (!|p|anels_can_be_displayed())
0x53f8:	call 0x4fd9                          
0x53fd:	test eax, eax                        #	if |(|!panels_can_be_displayed())
0x53ff:	jne 0x5415                           
0x5401:	mov eax, 0                           #	    |t|ty_defaults();
0x5406:	call 0xc083                          
0x540b:	mov eax, 0                           #	    |t|ty_clear();
0x5410:	call 0xb8a5                          
0x5415:	mov eax, 0                           #	|t|itle_update();
0x541a:	call 0x1c9f4                         
0x541f:	mov rax, qword ptr [rip + 0x2b4ea]   #	|p|anel_update(src_panel);
0x5426:	mov rdi, rax                         
0x5429:	call 0x14e6a                         
0x542e:	mov eax, dword ptr [rip + 0x29bf4]   #	if (|t|wo_panel_mode)
0x5434:	test eax, eax                        #	if |(|two_panel_mode)
0x5436:	je 0x5458                            
0x5438:	mov rax, qword ptr [rip + 0x2b4d9]   #	    |p|anel_update(dst_panel);
0x543f:	mov rdi, rax                         
0x5442:	call 0x14e6a                         
0x5447:	jmp 0x5458                           
0x5449:	mov rax, qword ptr [rip + 0x2b4a8]   #	|t|ty_put_screen(screen);
0x5450:	mov rdi, rax                         
0x5453:	call 0xce57                          
0x5458:	mov eax, 0                           #    |s|tatus_update();
0x545d:	call 0x106d4                         
0x5462:	mov eax, 0                           #    |i|l_update();
0x5467:	call 0xf8eb                          
0x546c:	mov eax, 0                           #    |i|l_update_point();
0x5471:	call 0xf768                          
0x5476:	mov eax, 0                           #    |t|ty_update();
0x547b:	call 0xb4b7                          
0x5480:	cmp dword ptr [rbp - 4], 0x12        #    if |(|signum == SIGCONT)
0x5484:	jne 0x54a0                           
0x5486:	mov rax, qword ptr [rip + 0x2b483]   #	|t|ty_update_title(panel_get_path(src_panel));
0x548d:	mov rdi, rax                         
0x5490:	call 0x1504f                         
0x5495:	mov rdi, rax                         
0x5498:	call 0xd875                          
0x549d:	jmp 0x54a0                           
0x549f:	nop                                  #	|r|eturn;
0x54a0:	leave                                #|}|
0x54a1:	ret                                  
0x54a2:	endbr64                              #|{|
0x54a6:	push rbp                             
0x54a7:	mov rbp, rsp                         
0x54aa:	sub rsp, 0x30                        
0x54ae:	mov qword ptr [rbp - 0x28], rdi      
0x54b2:	mov eax, 0                           #    char *prev = |t|ty_get_previous_key_seq();
0x54b7:	call 0xc855                          
0x54bc:	mov qword ptr [rbp - 0x20], rax      
0x54c0:	mov rax, qword ptr [rbp - 0x20]      #    size_t length = |s|trlen(prev);
0x54c4:	mov rdi, rax                         
0x54c7:	call 0x4960                          
0x54cc:	mov qword ptr [rbp - 0x18], rax      
0x54d0:	cmp qword ptr [rbp - 0x18], 0        #    if |(|length && (prev[length - 1] != key_INTERRUPT))
0x54d5:	je 0x5582                            
0x54db:	mov rax, qword ptr [rbp - 0x18]      #    if (length && (prev|[|length - 1] != key_INTERRUPT))
0x54df:	lea rdx, [rax - 1]                   
0x54e3:	mov rax, qword ptr [rbp - 0x20]      
0x54e7:	add rax, rdx                         
0x54ea:	movzx eax, byte ptr [rax]            
0x54ed:	cmp al, 7                            #    if (length |&|& (prev[length - 1] != key_INTERRUPT))
0x54ef:	je 0x5582                            
0x54f5:	mov rax, qword ptr [rbp - 0x20]      #	char *str = (char *)|t|ty_key_machine2human(prev);
0x54f9:	mov rdi, rax                         
0x54fc:	call 0xb2c6                          
0x5501:	mov qword ptr [rbp - 0x10], rax      
0x5505:	mov rax, qword ptr [rbp - 0x10]      #	char *buf = xmalloc(128 + |s|trlen(str));
0x5509:	mov rdi, rax                         
0x550c:	call 0x4960                          
0x5511:	sub rax, -0x80                       #	char *buf = |x|malloc(128 + strlen(str));
0x5515:	mov rdi, rax                         
0x5518:	call 0x24650                         
0x551d:	mov qword ptr [rbp - 8], rax         
0x5521:	mov rdx, qword ptr [rbp - 0x10]      #	|s|printf(buf, "%s: not defined.", str);
0x5525:	mov rax, qword ptr [rbp - 8]         
0x5529:	lea rcx, [rip + 0x21c34]             
0x5530:	mov rsi, rcx                         
0x5533:	mov rdi, rax                         
0x5536:	mov eax, 0                           
0x553b:	call 0x4dd0                          
0x5540:	mov rax, qword ptr [rbp - 8]         #	|s|tatus(buf, STATUS_ERROR, STATUS_LEFT);
0x5544:	mov edx, 1                           
0x5549:	mov esi, 2                           
0x554e:	mov rdi, rax                         
0x5551:	call 0x107d0                         
0x5556:	mov rax, qword ptr [rbp - 8]         #	|x|free(buf);
0x555a:	mov rdi, rax                         
0x555d:	call 0x1eeae                         
0x5562:	mov eax, 0                           #	|t|ty_beep();
0x5567:	call 0xbfbf                          
0x556c:	mov eax, 0                           #	|t|ty_update();
0x5571:	call 0xb4b7                          
0x5576:	mov edi, 1                           #	|s|leep(1);
0x557b:	call 0x4e70                          
0x5580:	jmp 0x558c                           #    |{|
0x5582:	mov eax, 0                           #	|t|ty_beep();
0x5587:	call 0xbfbf                          
0x558c:	cmp qword ptr [rbp - 0x28], 0        #    if |(|status_message)
0x5591:	je 0x55ab                            
0x5593:	mov rax, qword ptr [rbp - 0x28]      #	|s|tatus(status_message, STATUS_OK, STATUS_CENTERED);
0x5597:	mov edx, 0                           
0x559c:	mov esi, 0                           
0x55a1:	mov rdi, rax                         
0x55a4:	call 0x107d0                         
0x55a9:	jmp 0x55b5                           
0x55ab:	mov eax, 0                           #	|s|tatus_default();
0x55b0:	call 0x10857                         
0x55b5:	mov eax, 0                           #    |i|l_update_point();
0x55ba:	call 0xf768                          
0x55bf:	mov eax, 0                           #    |t|ty_update();
0x55c4:	call 0xb4b7                          
0x55c9:	nop                                  #|}|
0x55ca:	leave                                
0x55cb:	ret                                  
0x55cc:	endbr64                              #|{|
0x55d0:	push rbp                             
0x55d1:	mov rbp, rsp                         
0x55d4:	sub rsp, 0x20                        
0x55d8:	mov qword ptr [rbp - 0x18], rdi      
0x55dc:	mov qword ptr [rbp - 0x20], rsi      
0x55e0:	mov rax, qword ptr fs:[0x28]         #|{|
0x55e9:	mov qword ptr [rbp - 8], rax         
0x55ed:	xor eax, eax                         
0x55ef:	lea rcx, [rbp - 0x10]                #    if (|x|stack_preview(history, &history_text, 1) &&
0x55f3:	mov rax, qword ptr [rbp - 0x18]      
0x55f7:	mov edx, 1                           
0x55fc:	mov rsi, rcx                         
0x55ff:	mov rdi, rax                         
0x5602:	call 0x1f4b1                         
0x5607:	test rax, rax                        #    if |(|xstack_preview(history, &history_text, 1) &&
0x560a:	je 0x5623                            
0x560c:	mov rax, qword ptr [rbp - 0x10]      #	|s|trcmp(history_text, text) == 0)
0x5610:	mov rdx, qword ptr [rbp - 0x20]      
0x5614:	mov rsi, rdx                         
0x5617:	mov rdi, rax                         
0x561a:	call 0x4af0                          
0x561f:	test eax, eax                        #    if (xstack_preview(history, &history_text, 1) |&|&
0x5621:	je 0x5648                            
0x5623:	mov rax, qword ptr [rbp - 0x20]      #    history_text = |x|strdup(text);
0x5627:	mov rdi, rax                         
0x562a:	call 0x24780                         
0x562f:	mov qword ptr [rbp - 0x10], rax      #    history_text |=| xstrdup(text);
0x5633:	lea rdx, [rbp - 0x10]                #    |x|stack_push(history, &history_text);
0x5637:	mov rax, qword ptr [rbp - 0x18]      
0x563b:	mov rsi, rdx                         
0x563e:	mov rdi, rax                         
0x5641:	call 0x1f381                         
0x5646:	jmp 0x5649                           
0x5648:	nop                                  #	|r|eturn;
0x5649:	mov rax, qword ptr [rbp - 8]         #|}|
0x564d:	sub rax, qword ptr fs:[0x28]         
0x5656:	je 0x565d                            
0x5658:	call 0x4980                          
0x565d:	leave                                
0x565e:	ret                                  
0x565f:	endbr64                              #|{|
0x5663:	push rbp                             
0x5664:	mov rbp, rsp                         
0x5667:	sub rsp, 0x20                        
0x566b:	mov qword ptr [rbp - 0x18], rdi      
0x566f:	mov dword ptr [rbp - 0x1c], esi      
0x5672:	mov rax, qword ptr fs:[0x28]         #|{|
0x567b:	mov qword ptr [rbp - 8], rax         
0x567f:	xor eax, eax                         
0x5681:	mov edx, dword ptr [rbp - 0x1c]      #    return |x|stack_preview(history, &history_text, offset) ?
0x5684:	lea rcx, [rbp - 0x10]                
0x5688:	mov rax, qword ptr [rbp - 0x18]      
0x568c:	mov rsi, rcx                         
0x568f:	mov rdi, rax                         
0x5692:	call 0x1f4b1                         
0x5697:	test rax, rax                        #	   history_text |:| NULL;
0x569a:	je 0x56a2                            
0x569c:	mov rax, qword ptr [rbp - 0x10]      #	   history_text |:| NULL;
0x56a0:	jmp 0x56a7                           
0x56a2:	mov eax, 0                           #	   history_text |:| NULL;
0x56a7:	mov rdx, qword ptr [rbp - 8]         #|}|
0x56ab:	sub rdx, qword ptr fs:[0x28]         
0x56b4:	je 0x56bb                            
0x56b6:	call 0x4980                          
0x56bb:	leave                                
0x56bc:	ret                                  
0x56bd:	endbr64                              #|{|
0x56c1:	push rbp                             
0x56c2:	mov rbp, rsp                         
0x56c5:	sub rsp, 0x10                        
0x56c9:	mov dword ptr [rbp - 4], edi         
0x56cc:	mov dword ptr [rbp - 8], esi         
0x56cf:	mov eax, dword ptr [rbp - 8]         #    if ((flags |&| IL_MOVE) == 0)
0x56d2:	and eax, 2                           
0x56d5:	test eax, eax                        #    if |(|(flags & IL_MOVE) == 0)
0x56d7:	jne 0x56e3                           
0x56d9:	mov eax, 0                           #	return |0|;
0x56de:	jmp 0x5994                           
0x56e3:	mov eax, dword ptr [rbp - 4]         #    |s|witch (key)
0x56e6:	add eax, 0x42                        
0x56e9:	cmp eax, 0x17                        
0x56ec:	ja 0x5928                            
0x56f2:	mov eax, eax                         
0x56f4:	lea rdx, [rax*4]                     
0x56fc:	lea rax, [rip + 0x21ffd]             
0x5703:	mov eax, dword ptr [rdx + rax]       
0x5706:	cdqe                                 
0x5708:	lea rdx, [rip + 0x21ff1]             
0x570f:	add rax, rdx                         
0x5712:	jmp rax                              
0x5715:	mov eax, 0                           #	    |i|l_backward_char();
0x571a:	call 0xe4db                          
0x571f:	jmp 0x598f                           #	    |b|reak;
0x5724:	mov eax, 0                           #	    |i|l_forward_char();
0x5729:	call 0xe522                          
0x572e:	jmp 0x598f                           #	    |b|reak;
0x5733:	mov eax, 0                           #	    |i|l_backward_word();
0x5738:	call 0xe569                          
0x573d:	jmp 0x598f                           #	    |b|reak;
0x5742:	mov eax, 0                           #	    |i|l_forward_word();
0x5747:	call 0xe655                          
0x574c:	jmp 0x598f                           #	    |b|reak;
0x5751:	mov eax, 0                           #	    |i|l_beginning_of_line();
0x5756:	call 0xe739                          
0x575b:	jmp 0x598f                           #	    |b|reak;
0x5760:	mov eax, 0                           #	    |i|l_end_of_line();
0x5765:	call 0xe768                          
0x576a:	jmp 0x598f                           #	    |b|reak;
0x576f:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x5772:	and eax, 1                           
0x5775:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5777:	je 0x5967                            
0x577d:	mov eax, 0                           #		|i|l_delete_char();
0x5782:	call 0xe901                          
0x5787:	jmp 0x5967                           #	    |b|reak;
0x578c:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x578f:	and eax, 1                           
0x5792:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5794:	je 0x596a                            
0x579a:	mov eax, 0                           #		|i|l_backward_delete_char();
0x579f:	call 0xea22                          
0x57a4:	jmp 0x596a                           #	    |b|reak;
0x57a9:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x57ac:	and eax, 1                           
0x57af:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x57b1:	je 0x596d                            
0x57b7:	mov eax, 0                           #		|i|l_kill_word();
0x57bc:	call 0xeb56                          
0x57c1:	jmp 0x596d                           #	    |b|reak;
0x57c6:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x57c9:	and eax, 1                           
0x57cc:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x57ce:	je 0x5970                            
0x57d4:	mov eax, 0                           #		|i|l_backward_kill_word();
0x57d9:	call 0xec1c                          
0x57de:	jmp 0x5970                           #	    |b|reak;
0x57e3:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x57e6:	and eax, 1                           
0x57e9:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x57eb:	je 0x5973                            
0x57f1:	mov edi, 1                           #		|i|l_kill_line(IL_STORE);
0x57f6:	call 0xed98                          
0x57fb:	jmp 0x5973                           #	    |b|reak;
0x5800:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x5803:	and eax, 1                           
0x5806:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5808:	je 0x5976                            
0x580e:	mov eax, 0                           #		|i|l_kill_to_beginning_of_line();
0x5813:	call 0xedfe                          
0x5818:	jmp 0x5976                           #	    |b|reak;
0x581d:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x5820:	and eax, 1                           
0x5823:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5825:	je 0x5979                            
0x582b:	mov eax, 0                           #		|i|l_kill_to_end_of_line();
0x5830:	call 0xeea7                          
0x5835:	jmp 0x5979                           #	    |b|reak;
0x583a:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x583d:	and eax, 1                           
0x5840:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5842:	je 0x597c                            
0x5848:	mov eax, 0                           #		|i|l_just_one_space();
0x584d:	call 0xef17                          
0x5852:	jmp 0x597c                           #	    |b|reak;
0x5857:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x585a:	and eax, 1                           
0x585d:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x585f:	je 0x597f                            
0x5865:	mov eax, 0                           #		|i|l_delete_horizontal_space();
0x586a:	call 0xef64                          
0x586f:	jmp 0x597f                           #	    |b|reak;
0x5874:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x5877:	and eax, 1                           
0x587a:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x587c:	je 0x5982                            
0x5882:	mov eax, 0                           #		|i|l_downcase_word();
0x5887:	call 0xf009                          
0x588c:	jmp 0x5982                           #	    |b|reak;
0x5891:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x5894:	and eax, 1                           
0x5897:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x5899:	je 0x5985                            
0x589f:	mov eax, 0                           #		|i|l_upcase_word();
0x58a4:	call 0xf0af                          
0x58a9:	jmp 0x5985                           #	    |b|reak;
0x58ae:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x58b1:	and eax, 1                           
0x58b4:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x58b6:	je 0x5988                            
0x58bc:	mov eax, 0                           #		|i|l_capitalize_word();
0x58c1:	call 0xf155                          
0x58c6:	jmp 0x5988                           #	    |b|reak;
0x58cb:	mov eax, 0                           #	    |i|l_set_mark();
0x58d0:	call 0xe3ee                          
0x58d5:	jmp 0x598f                           #	    |b|reak;
0x58da:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x58dd:	and eax, 1                           
0x58e0:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x58e2:	je 0x598b                            
0x58e8:	mov eax, 0                           #		|i|l_kill_region();
0x58ed:	call 0xe40f                          
0x58f2:	jmp 0x598b                           #	    |b|reak;
0x58f7:	mov eax, 0                           #	    |i|l_kill_ring_save();
0x58fc:	call 0xe437                          
0x5901:	jmp 0x598f                           #	    |b|reak;
0x5906:	mov eax, dword ptr [rbp - 8]         #	    if (flags |&| IL_EDIT)
0x5909:	and eax, 1                           
0x590c:	test eax, eax                        #	    if |(|flags & IL_EDIT)
0x590e:	je 0x598e                            
0x5910:	mov eax, 0                           #		|i|l_yank();
0x5915:	call 0xe45f                          
0x591a:	jmp 0x598e                           #	    |b|reak;
0x591c:	mov eax, 0                           #	    |i|l_exchange_point_and_mark();
0x5921:	call 0xe49b                          
0x5926:	jmp 0x598f                           #	    |b|reak;
0x5928:	mov eax, dword ptr [rbp - 8]         #	    if ((flags |&| IL_EDIT) && isprint(key))
0x592b:	and eax, 1                           
0x592e:	test eax, eax                        #	    if |(|(flags & IL_EDIT) && isprint(key))
0x5930:	je 0x5960                            
0x5932:	call 0x4ec0                          #	    if ((flags & IL_EDIT) && |i|sprint(key))
0x5937:	mov rdx, qword ptr [rax]             
0x593a:	mov eax, dword ptr [rbp - 4]         
0x593d:	cdqe                                 
0x593f:	add rax, rax                         
0x5942:	add rax, rdx                         
0x5945:	movzx eax, word ptr [rax]            
0x5948:	movzx eax, ax                        
0x594b:	and eax, 0x4000                      
0x5950:	test eax, eax                        #	    if ((flags & IL_EDIT) |&|& isprint(key))
0x5952:	je 0x5960                            
0x5954:	mov eax, dword ptr [rbp - 4]         #		|i|l_insert_char(key);
0x5957:	mov edi, eax                         
0x5959:	call 0xe797                          
0x595e:	jmp 0x598f                           #	    |b|reak;
0x5960:	mov eax, 0                           #		return |0|;
0x5965:	jmp 0x5994                           
0x5967:	nop                                  #	    |b|reak;
0x5968:	jmp 0x598f                           
0x596a:	nop                                  #	    |b|reak;
0x596b:	jmp 0x598f                           
0x596d:	nop                                  #	    |b|reak;
0x596e:	jmp 0x598f                           
0x5970:	nop                                  #	    |b|reak;
0x5971:	jmp 0x598f                           
0x5973:	nop                                  #	    |b|reak;
0x5974:	jmp 0x598f                           
0x5976:	nop                                  #	    |b|reak;
0x5977:	jmp 0x598f                           
0x5979:	nop                                  #	    |b|reak;
0x597a:	jmp 0x598f                           
0x597c:	nop                                  #	    |b|reak;
0x597d:	jmp 0x598f                           
0x597f:	nop                                  #	    |b|reak;
0x5980:	jmp 0x598f                           
0x5982:	nop                                  #	    |b|reak;
0x5983:	jmp 0x598f                           
0x5985:	nop                                  #	    |b|reak;
0x5986:	jmp 0x598f                           
0x5988:	nop                                  #	    |b|reak;
0x5989:	jmp 0x598f                           
0x598b:	nop                                  #	    |b|reak;
0x598c:	jmp 0x598f                           
0x598e:	nop                                  #	    |b|reak;
0x598f:	mov eax, 1                           #    return |1|;
0x5994:	leave                                #|}|
0x5995:	ret                                  
0x5996:	endbr64                              #|{|
0x599a:	push rbp                             
0x599b:	mov rbp, rsp                         
0x599e:	sub rsp, 0x30                        
0x59a2:	mov qword ptr [rbp - 0x28], rdi      
0x59a6:	cmp qword ptr [rbp - 0x28], 0        #    if |(|text == NULL)
0x59ab:	jne 0x59b7                           
0x59ad:	mov eax, 0                           #	return |N|ULL;
0x59b2:	jmp 0x5ae7                           
0x59b7:	mov rax, qword ptr [rbp - 0x28]      #    fixed_text = xmalloc(fixed_text_length = (|s|trlen(text) + 1));
0x59bb:	mov rdi, rax                         
0x59be:	call 0x4960                          
0x59c3:	add rax, 1                           #    fixed_text = |x|malloc(fixed_text_length = (strlen(text) + 1));
0x59c7:	mov qword ptr [rbp - 8], rax         
0x59cb:	mov rax, qword ptr [rbp - 8]         
0x59cf:	mov rdi, rax                         
0x59d2:	call 0x24650                         
0x59d7:	mov qword ptr [rbp - 0x10], rax      
0x59db:	mov dword ptr [rbp - 0x18], 0        #    for (i |=| 0, j = 0; text[i]; i++)
0x59e2:	mov dword ptr [rbp - 0x14], 0        #    for (i = 0, j |=| 0; text[i]; i++)
0x59e9:	jmp 0x5abb                           #    |f|or (i = 0, j = 0; text[i]; i++)
0x59ee:	mov eax, dword ptr [rbp - 0x18]      #	if (text|[|i] == '\t')
0x59f1:	movsxd rdx, eax                      
0x59f4:	mov rax, qword ptr [rbp - 0x28]      
0x59f8:	add rax, rdx                         
0x59fb:	movzx eax, byte ptr [rax]            
0x59fe:	cmp al, 9                            #	if |(|text[i] == '\t')
0x5a00:	jne 0x5a48                           
0x5a02:	add qword ptr [rbp - 8], 8           #	    fixed_text = |x|realloc(fixed_text, fixed_text_length += 8);
0x5a07:	mov rdx, qword ptr [rbp - 8]         
0x5a0b:	mov rax, qword ptr [rbp - 0x10]      
0x5a0f:	mov rsi, rdx                         
0x5a12:	mov rdi, rax                         
0x5a15:	call 0x24670                         
0x5a1a:	mov qword ptr [rbp - 0x10], rax      
0x5a1e:	mov eax, dword ptr [rbp - 0x14]      #	    |m|emcpy(&fixed_text[j], "        ", 8);
0x5a21:	movsxd rdx, eax                      
0x5a24:	mov rax, qword ptr [rbp - 0x10]      #	    memcpy(|&|fixed_text[j], "        ", 8);
0x5a28:	add rax, rdx                         
0x5a2b:	mov edx, 8                           #	    |m|emcpy(&fixed_text[j], "        ", 8);
0x5a30:	lea rcx, [rip + 0x2173e]             
0x5a37:	mov rsi, rcx                         
0x5a3a:	mov rdi, rax                         
0x5a3d:	call 0x4b70                          
0x5a42:	add dword ptr [rbp - 0x14], 8        #	    j |+|= 8;
0x5a46:	jmp 0x5ab7                           
0x5a48:	call 0x4ec0                          #	    if (|i|sprint((int)text[i]))
0x5a4d:	mov rdx, qword ptr [rax]             
0x5a50:	mov eax, dword ptr [rbp - 0x18]      
0x5a53:	movsxd rcx, eax                      
0x5a56:	mov rax, qword ptr [rbp - 0x28]      
0x5a5a:	add rax, rcx                         
0x5a5d:	movzx eax, byte ptr [rax]            
0x5a60:	movsx rax, al                        
0x5a64:	add rax, rax                         
0x5a67:	add rax, rdx                         
0x5a6a:	movzx eax, word ptr [rax]            
0x5a6d:	movzx eax, ax                        
0x5a70:	and eax, 0x4000                      
0x5a75:	test eax, eax                        #	    if |(|isprint((int)text[i]))
0x5a77:	je 0x5aa1                            
0x5a79:	mov eax, dword ptr [rbp - 0x18]      #		fixed_text[j++] = text|[|i];
0x5a7c:	movsxd rdx, eax                      
0x5a7f:	mov rax, qword ptr [rbp - 0x28]      
0x5a83:	lea rcx, [rdx + rax]                 
0x5a87:	mov eax, dword ptr [rbp - 0x14]      #		fixed_text[j|+|+] = text[i];
0x5a8a:	lea edx, [rax + 1]                   
0x5a8d:	mov dword ptr [rbp - 0x14], edx      
0x5a90:	movsxd rdx, eax                      
0x5a93:	mov rax, qword ptr [rbp - 0x10]      #		fixed_text|[|j++] = text[i];
0x5a97:	add rdx, rax                         
0x5a9a:	movzx eax, byte ptr [rcx]            #		fixed_text[j++] = text|[|i];
0x5a9d:	mov byte ptr [rdx], al               #		fixed_text[j++] |=| text[i];
0x5a9f:	jmp 0x5ab7                           
0x5aa1:	mov eax, dword ptr [rbp - 0x14]      #		fixed_text[j|+|+] = '?';
0x5aa4:	lea edx, [rax + 1]                   
0x5aa7:	mov dword ptr [rbp - 0x14], edx      
0x5aaa:	movsxd rdx, eax                      
0x5aad:	mov rax, qword ptr [rbp - 0x10]      #		fixed_text|[|j++] = '?';
0x5ab1:	add rax, rdx                         
0x5ab4:	mov byte ptr [rax], 0x3f             #		fixed_text[j++] |=| '?';
0x5ab7:	add dword ptr [rbp - 0x18], 1        #    for (i = 0, j = 0; text[i]; i|+|+)
0x5abb:	mov eax, dword ptr [rbp - 0x18]      #    for (i = 0, j = 0; text|[|i]; i++)
0x5abe:	movsxd rdx, eax                      
0x5ac1:	mov rax, qword ptr [rbp - 0x28]      
0x5ac5:	add rax, rdx                         
0x5ac8:	movzx eax, byte ptr [rax]            
0x5acb:	test al, al                          #    for (i = 0, j = 0; |t|ext[i]; i++)
0x5acd:	jne 0x59ee                           
0x5ad3:	mov eax, dword ptr [rbp - 0x14]      #    fixed_text|[|j] = 0;
0x5ad6:	movsxd rdx, eax                      
0x5ad9:	mov rax, qword ptr [rbp - 0x10]      
0x5add:	add rax, rdx                         
0x5ae0:	mov byte ptr [rax], 0                #    fixed_text[j] |=| 0;
0x5ae3:	mov rax, qword ptr [rbp - 0x10]      #    return |f|ixed_text;
0x5ae7:	leave                                #|}|
0x5ae8:	ret                                  
0x5ae9:	endbr64                              #|{|
0x5aed:	push rbp                             
0x5aee:	mov rbp, rsp                         
0x5af1:	sub rsp, 0x30                        
0x5af5:	mov qword ptr [rbp - 0x28], rdi      
0x5af9:	mov qword ptr [rbp - 0x18], 0        #    size_t |l|en = 0;
0x5b01:	mov rax, qword ptr [rbp - 0x28]      #    char *|o|ptions_ptr = options;
0x5b05:	mov qword ptr [rbp - 0x10], rax      
0x5b09:	mov rax, qword ptr [rbp - 0x28]      #    char *help = xmalloc(1 + |s|trlen(options) * 3 + 8);
0x5b0d:	mov rdi, rax                         
0x5b10:	call 0x4960                          
0x5b15:	mov rdx, rax                         
0x5b18:	mov rax, rdx                         #    char *help = xmalloc(1 + strlen(options) |*| 3 + 8);
0x5b1b:	add rax, rax                         
0x5b1e:	add rax, rdx                         
0x5b21:	add rax, 9                           #    char *help = |x|malloc(1 + strlen(options) * 3 + 8);
0x5b25:	mov rdi, rax                         
0x5b28:	call 0x24650                         
0x5b2d:	mov qword ptr [rbp - 8], rax         
0x5b31:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = '(';
0x5b35:	lea rdx, [rax + 1]                   
0x5b39:	mov qword ptr [rbp - 0x18], rdx      
0x5b3d:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = '(';
0x5b41:	add rax, rdx                         
0x5b44:	mov byte ptr [rax], 0x28             #    help[len++] |=| '(';
0x5b47:	jmp 0x5b96                           #    |f|or (; *(options_ptr + 1); options_ptr++)
0x5b49:	mov rax, qword ptr [rbp - 0x18]      #	help[len|+|+] = *options_ptr;
0x5b4d:	lea rdx, [rax + 1]                   
0x5b51:	mov qword ptr [rbp - 0x18], rdx      
0x5b55:	mov rdx, qword ptr [rbp - 8]         #	help|[|len++] = *options_ptr;
0x5b59:	add rdx, rax                         
0x5b5c:	mov rax, qword ptr [rbp - 0x10]      #	help[len++] = |*|options_ptr;
0x5b60:	movzx eax, byte ptr [rax]            
0x5b63:	mov byte ptr [rdx], al               #	help[len++] |=| *options_ptr;
0x5b65:	mov rax, qword ptr [rbp - 0x18]      #	help[len|+|+] = ',';
0x5b69:	lea rdx, [rax + 1]                   
0x5b6d:	mov qword ptr [rbp - 0x18], rdx      
0x5b71:	mov rdx, qword ptr [rbp - 8]         #	help|[|len++] = ',';
0x5b75:	add rax, rdx                         
0x5b78:	mov byte ptr [rax], 0x2c             #	help[len++] |=| ',';
0x5b7b:	mov rax, qword ptr [rbp - 0x18]      #	help[len|+|+] = ' ';
0x5b7f:	lea rdx, [rax + 1]                   
0x5b83:	mov qword ptr [rbp - 0x18], rdx      
0x5b87:	mov rdx, qword ptr [rbp - 8]         #	help|[|len++] = ' ';
0x5b8b:	add rax, rdx                         
0x5b8e:	mov byte ptr [rax], 0x20             #	help[len++] |=| ' ';
0x5b91:	add qword ptr [rbp - 0x10], 1        #    for (; *(options_ptr + 1); options_ptr|+|+)
0x5b96:	mov rax, qword ptr [rbp - 0x10]      #    for (; *(options_ptr |+| 1); options_ptr++)
0x5b9a:	add rax, 1                           
0x5b9e:	movzx eax, byte ptr [rax]            #    for (; |*|(options_ptr + 1); options_ptr++)
0x5ba1:	test al, al                          
0x5ba3:	jne 0x5b49                           
0x5ba5:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = *options_ptr;
0x5ba9:	lea rdx, [rax + 1]                   
0x5bad:	mov qword ptr [rbp - 0x18], rdx      
0x5bb1:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = *options_ptr;
0x5bb5:	add rdx, rax                         
0x5bb8:	mov rax, qword ptr [rbp - 0x10]      #    help[len++] = |*|options_ptr;
0x5bbc:	movzx eax, byte ptr [rax]            
0x5bbf:	mov byte ptr [rdx], al               #    help[len++] |=| *options_ptr;
0x5bc1:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = ')';
0x5bc5:	lea rdx, [rax + 1]                   
0x5bc9:	mov qword ptr [rbp - 0x18], rdx      
0x5bcd:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = ')';
0x5bd1:	add rax, rdx                         
0x5bd4:	mov byte ptr [rax], 0x29             #    help[len++] |=| ')';
0x5bd7:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = ' ';
0x5bdb:	lea rdx, [rax + 1]                   
0x5bdf:	mov qword ptr [rbp - 0x18], rdx      
0x5be3:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = ' ';
0x5be7:	add rax, rdx                         
0x5bea:	mov byte ptr [rax], 0x20             #    help[len++] |=| ' ';
0x5bed:	mov rax, qword ptr [rbp - 0x18]      #    help[len|+|+] = '\0';
0x5bf1:	lea rdx, [rax + 1]                   
0x5bf5:	mov qword ptr [rbp - 0x18], rdx      
0x5bf9:	mov rdx, qword ptr [rbp - 8]         #    help|[|len++] = '\0';
0x5bfd:	add rax, rdx                         
0x5c00:	mov byte ptr [rax], 0                #    help[len++] |=| '\0';
0x5c03:	mov rax, qword ptr [rbp - 8]         #    return |h|elp;
0x5c07:	leave                                #|}|
0x5c08:	ret                                  
0x5c09:	endbr64                              #|{|
0x5c0d:	push rbp                             
0x5c0e:	mov rbp, rsp                         
0x5c11:	sub rsp, 0x60                        
0x5c15:	mov qword ptr [rbp - 0x48], rdi      
0x5c19:	mov qword ptr [rbp - 0x50], rsi      
0x5c1d:	mov dword ptr [rbp - 0x54], edx      
0x5c20:	mov rax, qword ptr fs:[0x28]         #|{|
0x5c29:	mov qword ptr [rbp - 8], rax         
0x5c2d:	xor eax, eax                         
0x5c2f:	mov qword ptr [rbp - 0x30], 0        #    input_line_t *|s|aved_il = NULL;
0x5c37:	mov eax, dword ptr [rbp - 0x54]      #    if (flags |&| IL_SAVE)
0x5c3a:	and eax, 0x10                        
0x5c3d:	test eax, eax                        #    if |(|flags & IL_SAVE)
0x5c3f:	je 0x5c4f                            
0x5c41:	mov eax, 0                           #	saved_il = |i|l_save();
0x5c46:	call 0xe205                          
0x5c4b:	mov qword ptr [rbp - 0x30], rax      
0x5c4f:	mov eax, 0                           #    |i|l_reset_line();
0x5c54:	call 0xece2                          
0x5c59:	cmp qword ptr [rbp - 0x48], 0        #    if |(|message)
0x5c5e:	je 0x5cf2                            
0x5c64:	mov rax, qword ptr [rbp - 0x48]      #	char *text = |i|l_fix_text(message);
0x5c68:	mov rdi, rax                         
0x5c6b:	call 0x5996                          
0x5c70:	mov qword ptr [rbp - 0x28], rax      
0x5c74:	mov eax, dword ptr [rbp - 0x54]      #	if (flags |&| IL_ERROR)
0x5c77:	and eax, 8                           
0x5c7a:	test eax, eax                        #	if |(|flags & IL_ERROR)
0x5c7c:	je 0x5c97                            
0x5c7e:	lea rax, [rip + 0x214f9]             #	    |i|l_insert_text("*** ");
0x5c85:	mov rdi, rax                         
0x5c88:	call 0xf433                          
0x5c8d:	mov edi, 1                           #	    |i|l_set_error_flag(1);
0x5c92:	call 0xfd0b                          
0x5c97:	mov rax, qword ptr [rbp - 0x28]      #	|i|l_insert_text(text);
0x5c9b:	mov rdi, rax                         
0x5c9e:	call 0xf433                          
0x5ca3:	mov eax, dword ptr [rbp - 0x54]      #	if (flags |&| IL_HOME)
0x5ca6:	and eax, 0x20                        
0x5ca9:	test eax, eax                        #	if |(|flags & IL_HOME)
0x5cab:	je 0x5cb7                            
0x5cad:	mov eax, 0                           #	    |i|l_beginning_of_line();
0x5cb2:	call 0xe739                          
0x5cb7:	mov rax, qword ptr [rbp - 0x28]      #	|x|free(text);
0x5cbb:	mov rdi, rax                         
0x5cbe:	call 0x1eeae                         
0x5cc3:	cmp qword ptr [rbp - 0x50], 0        #	if |(|options)
0x5cc8:	je 0x5cf2                            
0x5cca:	mov rax, qword ptr [rbp - 0x50]      #	    help = |i|l_build_help_from_string(options);
0x5cce:	mov rdi, rax                         
0x5cd1:	call 0x5ae9                          
0x5cd6:	mov qword ptr [rbp - 0x20], rax      
0x5cda:	mov rax, qword ptr [rbp - 0x20]      #	    |i|l_insert_text(help);
0x5cde:	mov rdi, rax                         
0x5ce1:	call 0xf433                          
0x5ce6:	mov rax, qword ptr [rbp - 0x20]      #	    |x|free(help);
0x5cea:	mov rdi, rax                         
0x5ced:	call 0x1eeae                         
0x5cf2:	mov eax, 0                           #    |i|l_update();
0x5cf7:	call 0xf8eb                          
0x5cfc:	mov eax, 0                           #    |i|l_update_point();
0x5d01:	call 0xf768                          
0x5d06:	mov eax, 0                           #    |t|ty_update();
0x5d0b:	call 0xb4b7                          
0x5d10:	mov eax, dword ptr [rbp - 0x54]      #    if (flags |&| IL_BEEP)
0x5d13:	and eax, 4                           
0x5d16:	test eax, eax                        #    if |(|flags & IL_BEEP)
0x5d18:	je 0x5d44                            
0x5d1a:	mov eax, 0                           #	|t|ty_beep();
0x5d1f:	call 0xbfbf                          
0x5d24:	jmp 0x5d44                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x5d26:	mov eax, 0                           #	    |t|ty_beep();
0x5d2b:	call 0xbfbf                          
0x5d30:	mov eax, 0                           #	    |s|tatus_update();
0x5d35:	call 0x106d4                         
0x5d3a:	mov eax, 0                           #	    |i|l_update_point();
0x5d3f:	call 0xf768                          
0x5d44:	lea rax, [rbp - 0x38]                #	while ((ks = |t|ty_get_key(&repeat_count)) == NULL)
0x5d48:	mov rdi, rax                         
0x5d4b:	call 0xc5ba                          
0x5d50:	mov qword ptr [rbp - 0x18], rax      
0x5d54:	cmp qword ptr [rbp - 0x18], 0        #	while ((ks = tty_get_key(&repeat_count)) |=|= NULL)
0x5d59:	je 0x5d26                            
0x5d5b:	mov rax, qword ptr [rbp - 0x18]      #	key = ks|-|>key_seq[0];
0x5d5f:	mov rax, qword ptr [rax]             
0x5d62:	movzx eax, byte ptr [rax]            #	key = ks->key_seq|[|0];
0x5d65:	movzx eax, al                        #	key |=| ks->key_seq[0];
0x5d68:	mov dword ptr [rbp - 0x34], eax      
0x5d6b:	mov rax, qword ptr [rbp - 0x18]      #	command |=| (command_t *)ks->aux_data;
0x5d6f:	mov rax, qword ptr [rax + 0x10]      
0x5d73:	mov qword ptr [rbp - 0x10], rax      
0x5d77:	cmp qword ptr [rbp - 0x10], 0        #	if |(|command && command->builtin)
0x5d7c:	je 0x5dc3                            
0x5d7e:	mov rax, qword ptr [rbp - 0x10]      #	if (command && command|-|>builtin)
0x5d82:	movzx eax, byte ptr [rax + 0x1b]     
0x5d86:	test al, al                          #	if (command |&|& command->builtin)
0x5d88:	je 0x5dc3                            
0x5d8a:	mov rax, qword ptr [rbp - 0x10]      #	    key = - 1 - (command|-|>name - builtin[0]) / MAX_BUILTIN_NAME;
0x5d8e:	mov rax, qword ptr [rax]             
0x5d91:	lea rdx, [rip + 0x29308]             #	    key = - 1 - (command->name |-| builtin[0]) / MAX_BUILTIN_NAME;
0x5d98:	sub rax, rdx                         
0x5d9b:	mov rcx, rax                         
0x5d9e:	movabs rdx, 0xea0ea0ea0ea0ea1        #	    key = - 1 - (command->name - builtin[0]) |/| MAX_BUILTIN_NAME;
0x5da8:	mov rax, rcx                         
0x5dab:	imul rdx                             
0x5dae:	mov rax, rdx                         
0x5db1:	sar rax, 1                           
0x5db4:	sar rcx, 0x3f                        
0x5db8:	mov rdx, rcx                         
0x5dbb:	sub rax, rdx                         
0x5dbe:	not eax                              #	    key |=| - 1 - (command->name - builtin[0]) / MAX_BUILTIN_NAME;
0x5dc0:	mov dword ptr [rbp - 0x34], eax      
0x5dc3:	cmp dword ptr [rbp - 0x34], 7        #	|s|witch (key)
0x5dc7:	je 0x5e89                            
0x5dcd:	cmp dword ptr [rbp - 0x34], 7        
0x5dd1:	jg 0x5e1d                            
0x5dd3:	cmp dword ptr [rbp - 0x34], -0x3d    
0x5dd7:	je 0x5df0                            
0x5dd9:	cmp dword ptr [rbp - 0x34], -8       
0x5ddd:	jne 0x5e1d                           
0x5ddf:	mov edi, 0                           #		|r|efresh(0);
0x5de4:	mov eax, 0                           
0x5de9:	call 0x5367                          
0x5dee:	jmp 0x5e66                           #		|b|reak;
0x5df0:	cmp qword ptr [rbp - 0x50], 0        #		if |(|options != NULL)
0x5df5:	je 0x5e89                            
0x5dfb:	mov rax, qword ptr [rbp - 0x50]      #		    key = |*|options;
0x5dff:	movzx eax, byte ptr [rax]            
0x5e02:	movsx eax, al                        #		    key |=| *options;
0x5e05:	mov dword ptr [rbp - 0x34], eax      
0x5e08:	jmp 0x5e89                           #		|g|oto done;
0x5e0a:	mov edx, dword ptr [rbp - 0x54]      #		    if (|i|l_dispatch_commands(key, flags) == 0)
0x5e0d:	mov eax, dword ptr [rbp - 0x34]      
0x5e10:	mov esi, edx                         
0x5e12:	mov edi, eax                         
0x5e14:	call 0x56bd                          
0x5e19:	test eax, eax                        #		    if |(|il_dispatch_commands(key, flags) == 0)
0x5e1b:	je 0x5e36                            
0x5e1d:	mov eax, dword ptr [rbp - 0x38]      #		while (repeat_count|-|-)
0x5e20:	lea edx, [rax - 1]                   
0x5e23:	mov dword ptr [rbp - 0x38], edx      
0x5e26:	test eax, eax                        #		while (|r|epeat_count--)
0x5e28:	jne 0x5e0a                           
0x5e2a:	mov eax, 0                           #		|i|l_update();
0x5e2f:	call 0xf8eb                          
0x5e34:	jmp 0x5e66                           #		|b|reak;
0x5e36:	nop                                  #			|g|oto il_error;
0x5e37:	cmp qword ptr [rbp - 0x50], 0        #		if |(|options == NULL)
0x5e3c:	je 0x5e8c                            
0x5e3e:	cmp qword ptr [rbp - 0x50], 0        #		if |(|options && strchr(options, key))
0x5e43:	je 0x5e5b                            
0x5e45:	mov edx, dword ptr [rbp - 0x34]      #		if (options && |s|trchr(options, key))
0x5e48:	mov rax, qword ptr [rbp - 0x50]      
0x5e4c:	mov esi, edx                         
0x5e4e:	mov rdi, rax                         
0x5e51:	call 0x49b0                          
0x5e56:	test rax, rax                        #		if (options |&|& strchr(options, key))
0x5e59:	jne 0x5e8f                           
0x5e5b:	mov eax, 0                           #		|t|ty_beep();
0x5e60:	call 0xbfbf                          
0x5e65:	nop                                  #		|b|reak;
0x5e66:	mov eax, 0                           #	|s|tatus_update();
0x5e6b:	call 0x106d4                         
0x5e70:	mov eax, 0                           #	|i|l_update_point();
0x5e75:	call 0xf768                          
0x5e7a:	mov eax, 0                           #	|t|ty_update();
0x5e7f:	call 0xb4b7                          
0x5e84:	jmp 0x5d44                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x5e89:	nop                                  #		|g|oto done;
0x5e8a:	jmp 0x5e90                           
0x5e8c:	nop                                  #		    |g|oto done;
0x5e8d:	jmp 0x5e90                           
0x5e8f:	nop                                  #			|g|oto done;
0x5e90:	mov edi, 0                           #    |i|l_set_error_flag(0);
0x5e95:	call 0xfd0b                          
0x5e9a:	mov eax, dword ptr [rbp - 0x54]      #    if ((flags |&| IL_SAVE) && saved_il)
0x5e9d:	and eax, 0x10                        
0x5ea0:	test eax, eax                        #    if |(|(flags & IL_SAVE) && saved_il)
0x5ea2:	je 0x5ed5                            
0x5ea4:	cmp qword ptr [rbp - 0x30], 0        #    if ((flags & IL_SAVE) |&|& saved_il)
0x5ea9:	je 0x5ed5                            
0x5eab:	mov rax, qword ptr [rbp - 0x30]      #	|i|l_restore(saved_il);
0x5eaf:	mov rdi, rax                         
0x5eb2:	call 0xe319                          
0x5eb7:	mov eax, 0                           #	|i|l_update();
0x5ebc:	call 0xf8eb                          
0x5ec1:	mov eax, 0                           #	|i|l_update_point();
0x5ec6:	call 0xf768                          
0x5ecb:	mov eax, 0                           #	|t|ty_update();
0x5ed0:	call 0xb4b7                          
0x5ed5:	cmp dword ptr [rbp - 0x34], 7        #    return (key == key_INTERRUPT) ? 0 |:| key;
0x5ed9:	je 0x5ee0                            
0x5edb:	mov eax, dword ptr [rbp - 0x34]      #    return (key == key_INTERRUPT) ? 0 |:| key;
0x5ede:	jmp 0x5ee5                           
0x5ee0:	mov eax, 0                           #    return (key == key_INTERRUPT) ? 0 |:| key;
0x5ee5:	mov rdx, qword ptr [rbp - 8]         #|}|
0x5ee9:	sub rdx, qword ptr fs:[0x28]         
0x5ef2:	je 0x5ef9                            
0x5ef4:	call 0x4980                          
0x5ef9:	leave                                
0x5efa:	ret                                  
0x5efb:	endbr64                              #|{|
0x5eff:	push rbp                             
0x5f00:	mov rbp, rsp                         
0x5f03:	sub rsp, 0x50                        
0x5f07:	mov qword ptr [rbp - 0x38], rdi      
0x5f0b:	mov qword ptr [rbp - 0x40], rsi      
0x5f0f:	mov qword ptr [rbp - 0x48], rdx      
0x5f13:	mov qword ptr [rbp - 0x50], rcx      
0x5f17:	mov rax, qword ptr fs:[0x28]         #|{|
0x5f20:	mov qword ptr [rbp - 8], rax         
0x5f24:	xor eax, eax                         
0x5f26:	mov dword ptr [rbp - 0x28], 0        #    int |k|ey = 0, repeat_count, offset = 0;
0x5f2d:	mov dword ptr [rbp - 0x24], 0        #    int key = 0, repeat_count, |o|ffset = 0;
0x5f34:	mov eax, 0                           #    |i|l_reset_line();
0x5f39:	call 0xece2                          
0x5f3e:	cmp qword ptr [rbp - 0x38], 0        #    if |(|static_text)
0x5f43:	je 0x5f51                            
0x5f45:	mov rax, qword ptr [rbp - 0x38]      #	|i|l_set_static_text(static_text);
0x5f49:	mov rdi, rax                         
0x5f4c:	call 0xf285                          
0x5f51:	cmp qword ptr [rbp - 0x48], 0        #    if |(|default_string)
0x5f56:	je 0x5f64                            
0x5f58:	mov rax, qword ptr [rbp - 0x48]      #	|i|l_insert_text(default_string);
0x5f5c:	mov rdi, rax                         
0x5f5f:	call 0xf433                          
0x5f64:	cmp qword ptr [rbp - 0x50], 0        #    if |(|history && default_string)
0x5f69:	je 0x5f91                            
0x5f6b:	cmp qword ptr [rbp - 0x48], 0        #    if (history |&|& default_string)
0x5f70:	je 0x5f91                            
0x5f72:	mov rdx, qword ptr [rbp - 0x48]      #	|i|l_history_add_entry(history, default_string);
0x5f76:	mov rax, qword ptr [rbp - 0x50]      
0x5f7a:	mov rsi, rdx                         
0x5f7d:	mov rdi, rax                         
0x5f80:	mov eax, 0                           
0x5f85:	call 0x55cc                          
0x5f8a:	mov dword ptr [rbp - 0x24], 1        #	offset |=| 1;
0x5f91:	mov eax, 0                           #    |i|l_update();
0x5f96:	call 0xf8eb                          
0x5f9b:	mov eax, 0                           #    |i|l_update_point();
0x5fa0:	call 0xf768                          
0x5fa5:	mov eax, 0                           #    |t|ty_update();
0x5faa:	call 0xb4b7                          
0x5faf:	jmp 0x5fcf                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x5fb1:	mov eax, 0                           #	    |t|ty_beep();
0x5fb6:	call 0xbfbf                          
0x5fbb:	mov eax, 0                           #	    |s|tatus_update();
0x5fc0:	call 0x106d4                         
0x5fc5:	mov eax, 0                           #	    |i|l_update_point();
0x5fca:	call 0xf768                          
0x5fcf:	lea rax, [rbp - 0x2c]                #	while ((ks = |t|ty_get_key(&repeat_count)) == NULL)
0x5fd3:	mov rdi, rax                         
0x5fd6:	call 0xc5ba                          
0x5fdb:	mov qword ptr [rbp - 0x20], rax      
0x5fdf:	cmp qword ptr [rbp - 0x20], 0        #	while ((ks = tty_get_key(&repeat_count)) |=|= NULL)
0x5fe4:	je 0x5fb1                            
0x5fe6:	mov rax, qword ptr [rbp - 0x20]      #	key = ks|-|>key_seq[0];
0x5fea:	mov rax, qword ptr [rax]             
0x5fed:	movzx eax, byte ptr [rax]            #	key = ks->key_seq|[|0];
0x5ff0:	movzx eax, al                        #	key |=| ks->key_seq[0];
0x5ff3:	mov dword ptr [rbp - 0x28], eax      
0x5ff6:	mov rax, qword ptr [rbp - 0x20]      #	command |=| (command_t *)ks->aux_data;
0x5ffa:	mov rax, qword ptr [rax + 0x10]      
0x5ffe:	mov qword ptr [rbp - 0x18], rax      
0x6002:	cmp qword ptr [rbp - 0x18], 0        #	if |(|command && command->builtin)
0x6007:	je 0x604e                            
0x6009:	mov rax, qword ptr [rbp - 0x18]      #	if (command && command|-|>builtin)
0x600d:	movzx eax, byte ptr [rax + 0x1b]     
0x6011:	test al, al                          #	if (command |&|& command->builtin)
0x6013:	je 0x604e                            
0x6015:	mov rax, qword ptr [rbp - 0x18]      #	    key = - 1 - (command|-|>name - builtin[0]) / MAX_BUILTIN_NAME;
0x6019:	mov rax, qword ptr [rax]             
0x601c:	lea rdx, [rip + 0x2907d]             #	    key = - 1 - (command->name |-| builtin[0]) / MAX_BUILTIN_NAME;
0x6023:	sub rax, rdx                         
0x6026:	mov rcx, rax                         
0x6029:	movabs rdx, 0xea0ea0ea0ea0ea1        #	    key = - 1 - (command->name - builtin[0]) |/| MAX_BUILTIN_NAME;
0x6033:	mov rax, rcx                         
0x6036:	imul rdx                             
0x6039:	mov rax, rdx                         
0x603c:	sar rax, 1                           
0x603f:	sar rcx, 0x3f                        
0x6043:	mov rdx, rcx                         
0x6046:	sub rax, rdx                         
0x6049:	not eax                              #	    key |=| - 1 - (command->name - builtin[0]) / MAX_BUILTIN_NAME;
0x604b:	mov dword ptr [rbp - 0x28], eax      
0x604e:	cmp dword ptr [rbp - 0x28], -0x3d    #	|s|witch (key)
0x6052:	je 0x61af                            
0x6058:	cmp dword ptr [rbp - 0x28], -0x3d    
0x605c:	jl 0x61da                            
0x6062:	cmp dword ptr [rbp - 0x28], 7        
0x6066:	jg 0x61da                            
0x606c:	cmp dword ptr [rbp - 0x28], -0x22    
0x6070:	jl 0x61da                            
0x6076:	mov eax, dword ptr [rbp - 0x28]      
0x6079:	add eax, 0x22                        
0x607c:	cmp eax, 0x29                        
0x607f:	ja 0x61da                            
0x6085:	mov eax, eax                         
0x6087:	lea rdx, [rax*4]                     
0x608f:	lea rax, [rip + 0x216ca]             
0x6096:	mov eax, dword ptr [rdx + rax]       
0x6099:	cdqe                                 
0x609b:	lea rdx, [rip + 0x216be]             
0x60a2:	add rax, rdx                         
0x60a5:	jmp rax                              
0x60a8:	cmp qword ptr [rbp - 0x50], 0        #		if |(|history == NULL)
0x60ad:	je 0x61f3                            
0x60b3:	add dword ptr [rbp - 0x24], 1        #		history_text |=| il_history_view_entry(history, ++offset);
0x60b7:	mov edx, dword ptr [rbp - 0x24]      #		history_text = |i|l_history_view_entry(history, ++offset);
0x60ba:	mov rax, qword ptr [rbp - 0x50]      
0x60be:	mov esi, edx                         
0x60c0:	mov rdi, rax                         
0x60c3:	mov eax, 0                           
0x60c8:	call 0x565f                          
0x60cd:	mov qword ptr [rbp - 0x10], rax      
0x60d1:	cmp qword ptr [rbp - 0x10], 0        #		if |(|history_text == NULL)
0x60d6:	jne 0x60eb                           
0x60d8:	sub dword ptr [rbp - 0x24], 1        #		    offset|-|-;
0x60dc:	mov eax, 0                           #		    |t|ty_beep();
0x60e1:	call 0xbfbf                          
0x60e6:	jmp 0x61f7                           #		|b|reak;
0x60eb:	mov edi, 0                           #		    |i|l_kill_line(IL_DONT_STORE);
0x60f0:	call 0xed98                          
0x60f5:	mov rax, qword ptr [rbp - 0x10]      #		    |i|l_insert_text(history_text);
0x60f9:	mov rdi, rax                         
0x60fc:	call 0xf433                          
0x6101:	mov eax, 0                           #		    |i|l_update();
0x6106:	call 0xf8eb                          
0x610b:	mov eax, 0                           #		    |i|l_update_point();
0x6110:	call 0xf768                          
0x6115:	jmp 0x61f7                           #		|b|reak;
0x611a:	cmp qword ptr [rbp - 0x50], 0        #		if |(|history == NULL)
0x611f:	je 0x61f6                            
0x6125:	cmp dword ptr [rbp - 0x24], 0        #		if |(|offset == 0)
0x6129:	jne 0x614e                           
0x612b:	mov edi, 0                           #		    |i|l_kill_line(IL_DONT_STORE);
0x6130:	call 0xed98                          
0x6135:	mov eax, 0                           #		    |i|l_update();
0x613a:	call 0xf8eb                          
0x613f:	mov eax, 0                           #		    |i|l_update_point();
0x6144:	call 0xf768                          
0x6149:	jmp 0x61f7                           #		    |b|reak;
0x614e:	mov edi, 0                           #		|i|l_kill_line(IL_DONT_STORE);
0x6153:	call 0xed98                          
0x6158:	sub dword ptr [rbp - 0x24], 1        #		offset|-|-;
0x615c:	cmp dword ptr [rbp - 0x24], 0        #		if |(|offset > 0)
0x6160:	jle 0x6188                           
0x6162:	mov edx, dword ptr [rbp - 0x24]      #		    history_text = |i|l_history_view_entry(history, offset);
0x6165:	mov rax, qword ptr [rbp - 0x50]      
0x6169:	mov esi, edx                         
0x616b:	mov rdi, rax                         
0x616e:	mov eax, 0                           
0x6173:	call 0x565f                          
0x6178:	mov qword ptr [rbp - 0x10], rax      
0x617c:	mov rax, qword ptr [rbp - 0x10]      #		    |i|l_insert_text(history_text);
0x6180:	mov rdi, rax                         
0x6183:	call 0xf433                          
0x6188:	mov eax, 0                           #		|i|l_update();
0x618d:	call 0xf8eb                          
0x6192:	mov eax, 0                           #		|i|l_update_point();
0x6197:	call 0xf768                          
0x619c:	jmp 0x61f7                           #		|b|reak;
0x619e:	mov edi, 0                           #		|r|efresh(0);
0x61a3:	mov eax, 0                           
0x61a8:	call 0x5367                          
0x61ad:	jmp 0x61f7                           #		|b|reak;
0x61af:	mov rax, qword ptr [rbp - 0x40]      #		|i|l_get_contents(dest);
0x61b3:	mov rdi, rax                         
0x61b6:	call 0xfc3f                          
0x61bb:	jmp 0x621a                           #		|g|oto done;
0x61bd:	mov eax, dword ptr [rbp - 0x28]      #		    if (|i|l_dispatch_commands(key, IL_MOVE | IL_EDIT) == 0)
0x61c0:	mov esi, 3                           
0x61c5:	mov edi, eax                         
0x61c7:	call 0x56bd                          
0x61cc:	test eax, eax                        #		    if |(|il_dispatch_commands(key, IL_MOVE | IL_EDIT) == 0)
0x61ce:	jne 0x61da                           
0x61d0:	mov eax, 0                           #			|t|ty_beep();
0x61d5:	call 0xbfbf                          
0x61da:	mov eax, dword ptr [rbp - 0x2c]      #		while (repeat_count|-|-)
0x61dd:	lea edx, [rax - 1]                   
0x61e0:	mov dword ptr [rbp - 0x2c], edx      
0x61e3:	test eax, eax                        #		while (|r|epeat_count--)
0x61e5:	jne 0x61bd                           
0x61e7:	mov eax, 0                           #		|i|l_update();
0x61ec:	call 0xf8eb                          
0x61f1:	jmp 0x61f7                           #		|b|reak;
0x61f3:	nop                                  #		    |b|reak;
0x61f4:	jmp 0x61f7                           
0x61f6:	nop                                  #		    |b|reak;
0x61f7:	mov eax, 0                           #	|s|tatus_update();
0x61fc:	call 0x106d4                         
0x6201:	mov eax, 0                           #	|i|l_update_point();
0x6206:	call 0xf768                          
0x620b:	mov eax, 0                           #	|t|ty_update();
0x6210:	call 0xb4b7                          
0x6215:	jmp 0x5fcf                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x621a:	nop                                  #		|g|oto done;
0x621b:	cmp dword ptr [rbp - 0x28], -0x3d    #    if |(|key == BUILTIN_action)
0x621f:	jne 0x624c                           
0x6221:	cmp qword ptr [rbp - 0x50], 0        #	if |(|history)
0x6226:	je 0x6243                            
0x6228:	mov rax, qword ptr [rbp - 0x40]      #	    |i|l_history_add_entry(history, *dest);
0x622c:	mov rdx, qword ptr [rax]             
0x622f:	mov rax, qword ptr [rbp - 0x50]      
0x6233:	mov rsi, rdx                         
0x6236:	mov rdi, rax                         
0x6239:	mov eax, 0                           
0x623e:	call 0x55cc                          
0x6243:	mov rax, qword ptr [rbp - 0x40]      #	return |*|dest;
0x6247:	mov rax, qword ptr [rax]             
0x624a:	jmp 0x6251                           
0x624c:	mov eax, 0                           #	return |N|ULL;
0x6251:	mov rdx, qword ptr [rbp - 8]         #|}|
0x6255:	sub rdx, qword ptr fs:[0x28]         
0x625e:	je 0x6265                            
0x6260:	call 0x4980                          #|}|
0x6265:	leave                                
0x6266:	ret                                  
0x6267:	endbr64                              #|{|
0x626b:	push rbp                             
0x626c:	mov rbp, rsp                         
0x626f:	sub rsp, 0x40                        
0x6273:	mov qword ptr [rbp - 0x28], rdi      
0x6277:	mov qword ptr [rbp - 0x30], rsi      
0x627b:	mov dword ptr [rbp - 0x34], edx      
0x627e:	mov qword ptr [rbp - 0x40], rcx      
0x6282:	cmp dword ptr [rbp - 0x34], 0        #    if |(|status == IL_ISEARCH_BEGIN)
0x6286:	jne 0x62c0                           
0x6288:	mov eax, 0                           #	saved_il = |i|l_save();
0x628d:	call 0xe205                          
0x6292:	mov qword ptr [rip + 0x2a6a7], rax   #	saved_il |=| il_save();
0x6299:	mov eax, 0                           #	|i|l_reset_line();
0x629e:	call 0xece2                          
0x62a3:	cmp qword ptr [rbp - 0x28], 0        #	if |(|static_text)
0x62a8:	je 0x62b6                            
0x62aa:	mov rax, qword ptr [rbp - 0x28]      #	    |i|l_set_static_text(static_text);
0x62ae:	mov rdi, rax                         
0x62b1:	call 0xf285                          
0x62b6:	mov eax, 0                           #	return |N|ULL;
0x62bb:	jmp 0x6517                           
0x62c0:	cmp dword ptr [rbp - 0x34], 3        #    if |(|status == IL_ISEARCH_END)
0x62c4:	jne 0x62fd                           
0x62c6:	mov rax, qword ptr [rip + 0x2a673]   #	|i|l_restore(saved_il);
0x62cd:	mov rdi, rax                         
0x62d0:	call 0xe319                          
0x62d5:	mov eax, 0                           #	|i|l_update();
0x62da:	call 0xf8eb                          
0x62df:	mov eax, 0                           #	|i|l_update_point();
0x62e4:	call 0xf768                          
0x62e9:	mov eax, 0                           #	|t|ty_update();
0x62ee:	call 0xb4b7                          
0x62f3:	mov eax, 0                           #	return |N|ULL;
0x62f8:	jmp 0x6517                           
0x62fd:	cmp qword ptr [rbp - 0x40], 0        #    if |(|action == NULL)
0x6302:	jne 0x630e                           
0x6304:	mov eax, 0                           #	return |N|ULL;
0x6309:	jmp 0x6517                           
0x630e:	mov rax, qword ptr [rbp - 0x40]      #    *action |=| IL_ISEARCH_ACTION_NONE;
0x6312:	mov dword ptr [rax], 0               
0x6318:	mov eax, 0                           #    |i|l_update();
0x631d:	call 0xf8eb                          
0x6322:	mov eax, 0                           #    |i|l_update_point();
0x6327:	call 0xf768                          
0x632c:	mov eax, 0                           #    |t|ty_update();
0x6331:	call 0xb4b7                          
0x6336:	mov edi, 0                           #    if ((ks = |t|ty_get_key(NULL)) == NULL)
0x633b:	call 0xc5ba                          
0x6340:	mov qword ptr [rbp - 0x10], rax      
0x6344:	cmp qword ptr [rbp - 0x10], 0        #    if |(|(ks = tty_get_key(NULL)) == NULL)
0x6349:	jne 0x6373                           
0x634b:	mov eax, 0                           #	|s|tatus_update();
0x6350:	call 0x106d4                         
0x6355:	mov eax, 0                           #	|i|l_update_point();
0x635a:	call 0xf768                          
0x635f:	mov eax, 0                           #	|t|ty_update();
0x6364:	call 0xb4b7                          
0x6369:	mov eax, 0                           #	return |N|ULL;
0x636e:	jmp 0x6517                           
0x6373:	mov rax, qword ptr [rbp - 0x10]      #    key = ks|-|>key_seq[0];
0x6377:	mov rax, qword ptr [rax]             
0x637a:	movzx eax, byte ptr [rax]            #    key = ks->key_seq|[|0];
0x637d:	movzx eax, al                        #    key |=| ks->key_seq[0];
0x6380:	mov dword ptr [rbp - 0x14], eax      
0x6383:	mov rax, qword ptr [rbp - 0x10]      #    command |=| (command_t *)ks->aux_data;
0x6387:	mov rax, qword ptr [rax + 0x10]      
0x638b:	mov qword ptr [rbp - 8], rax         
0x638f:	cmp qword ptr [rbp - 8], 0           #    if |(|command && command->builtin)
0x6394:	je 0x63db                            
0x6396:	mov rax, qword ptr [rbp - 8]         #    if (command && command|-|>builtin)
0x639a:	movzx eax, byte ptr [rax + 0x1b]     
0x639e:	test al, al                          #    if (command |&|& command->builtin)
0x63a0:	je 0x63db                            
0x63a2:	mov rax, qword ptr [rbp - 8]         #	key = - 1 - (command|-|>name - builtin[0]) / MAX_BUILTIN_NAME;
0x63a6:	mov rax, qword ptr [rax]             
0x63a9:	lea rdx, [rip + 0x28cf0]             #	key = - 1 - (command->name |-| builtin[0]) / MAX_BUILTIN_NAME;
0x63b0:	sub rax, rdx                         
0x63b3:	mov rcx, rax                         
0x63b6:	movabs rdx, 0xea0ea0ea0ea0ea1        #	key = - 1 - (command->name - builtin[0]) |/| MAX_BUILTIN_NAME;
0x63c0:	mov rax, rcx                         
0x63c3:	imul rdx                             
0x63c6:	mov rax, rdx                         
0x63c9:	sar rax, 1                           
0x63cc:	sar rcx, 0x3f                        
0x63d0:	mov rdx, rcx                         
0x63d3:	sub rax, rdx                         
0x63d6:	not eax                              #	key |=| - 1 - (command->name - builtin[0]) / MAX_BUILTIN_NAME;
0x63d8:	mov dword ptr [rbp - 0x14], eax      
0x63db:	cmp dword ptr [rbp - 0x14], 7        #    |s|witch (key)
0x63df:	je 0x64c8                            
0x63e5:	cmp dword ptr [rbp - 0x14], 7        
0x63e9:	jg 0x6449                            
0x63eb:	cmp dword ptr [rbp - 0x14], -8       
0x63ef:	je 0x6409                            
0x63f1:	cmp dword ptr [rbp - 0x14], -8       
0x63f5:	jg 0x6449                            
0x63f7:	cmp dword ptr [rbp - 0x14], -0x3d    
0x63fb:	je 0x64c8                            
0x6401:	cmp dword ptr [rbp - 0x14], -0x32    
0x6405:	je 0x641d                            
0x6407:	jmp 0x6449                           
0x6409:	mov edi, 0                           #	    |r|efresh(0);
0x640e:	mov eax, 0                           
0x6413:	call 0x5367                          
0x6418:	jmp 0x6336                           #	    |g|oto restart;
0x641d:	mov eax, 0                           #	    if (|i|l_is_empty())
0x6422:	call 0xe3d0                          
0x6427:	test eax, eax                        #	    if |(|il_is_empty())
0x6429:	je 0x643a                            
0x642b:	mov eax, 0                           #		|t|ty_beep();
0x6430:	call 0xbfbf                          
0x6435:	jmp 0x64c9                           #	    |b|reak;
0x643a:	mov rax, qword ptr [rbp - 0x40]      #		*action |=| IL_ISEARCH_ACTION_DECREASE;
0x643e:	mov dword ptr [rax], 1               
0x6444:	jmp 0x64c9                           #	    |b|reak;
0x6449:	cmp dword ptr [rbp - 0x14], -0x44    #	    if |(|(key == BUILTIN_isearch_backward &&
0x644d:	jne 0x6455                           
0x644f:	cmp dword ptr [rbp - 0x34], 1        #	    if ((key == BUILTIN_isearch_backward |&|&
0x6453:	je 0x6461                            
0x6455:	cmp dword ptr [rbp - 0x14], -0x45    #		 status == IL_ISEARCH_BACKWARD)  ||||
0x6459:	jne 0x6487                           
0x645b:	cmp dword ptr [rbp - 0x34], 2        #		(key == BUILTIN_isearch_forward  |&|&
0x645f:	jne 0x6487                           
0x6461:	mov eax, 0                           #		if (|i|l_is_empty())
0x6466:	call 0xe3d0                          
0x646b:	test eax, eax                        #		if |(|il_is_empty())
0x646d:	je 0x647b                            
0x646f:	mov rax, qword ptr [rbp - 0x40]      #		    *action |=| IL_ISEARCH_ACTION_INCREASE;
0x6473:	mov dword ptr [rax], 3               
0x6479:	jmp 0x64c9                           #		|b|reak;
0x647b:	mov rax, qword ptr [rbp - 0x40]      #		    *action |=| IL_ISEARCH_ACTION_RETRY;
0x647f:	mov dword ptr [rax], 2               
0x6485:	jmp 0x64c9                           #		|b|reak;
0x6487:	call 0x4ec0                          #	    if (|i|sprint(key))
0x648c:	mov rdx, qword ptr [rax]             
0x648f:	mov eax, dword ptr [rbp - 0x14]      
0x6492:	cdqe                                 
0x6494:	add rax, rax                         
0x6497:	add rax, rdx                         
0x649a:	movzx eax, word ptr [rax]            
0x649d:	movzx eax, ax                        
0x64a0:	and eax, 0x4000                      
0x64a5:	test eax, eax                        #	    if |(|isprint(key))
0x64a7:	je 0x64bf                            
0x64a9:	mov eax, dword ptr [rbp - 0x14]      #		|i|l_insert_char(key);
0x64ac:	mov edi, eax                         
0x64ae:	call 0xe797                          
0x64b3:	mov rax, qword ptr [rbp - 0x40]      #		*action |=| IL_ISEARCH_ACTION_INCREASE;
0x64b7:	mov dword ptr [rax], 3               
0x64bd:	jmp 0x64c9                           #	    |b|reak;
0x64bf:	mov dword ptr [rbp - 0x14], 7        #		key |=| key_INTERRUPT;
0x64c6:	jmp 0x64c9                           #	    |b|reak;
0x64c8:	nop                                  #	    |b|reak;
0x64c9:	mov eax, 0                           #    |s|tatus_update();
0x64ce:	call 0x106d4                         
0x64d3:	mov eax, 0                           #    |i|l_update();
0x64d8:	call 0xf8eb                          
0x64dd:	mov eax, 0                           #    |i|l_update_point();
0x64e2:	call 0xf768                          
0x64e7:	mov eax, 0                           #    |t|ty_update();
0x64ec:	call 0xb4b7                          
0x64f1:	mov rax, qword ptr [rbp - 0x30]      #    |i|l_get_contents(dest);
0x64f5:	mov rdi, rax                         
0x64f8:	call 0xfc3f                          
0x64fd:	cmp dword ptr [rbp - 0x14], -0x3d    #    return (key == BUILTIN_action || key == key_INTERRUPT) ? NULL |:| *dest;
0x6501:	je 0x6512                            
0x6503:	cmp dword ptr [rbp - 0x14], 7        #    return (key == BUILTIN_action |||| key == key_INTERRUPT) ? NULL : *dest;
0x6507:	je 0x6512                            
0x6509:	mov rax, qword ptr [rbp - 0x30]      #    return (key == BUILTIN_action || key == key_INTERRUPT) ? NULL |:| *dest;
0x650d:	mov rax, qword ptr [rax]             
0x6510:	jmp 0x6517                           
0x6512:	mov eax, 0                           #    return (key == BUILTIN_action || key == key_INTERRUPT) ? NULL |:| *dest;
0x6517:	leave                                #|}|
0x6518:	ret                                  
0x6519:	endbr64                              #|{|
0x651d:	push rbp                             
0x651e:	mov rbp, rsp                         
0x6521:	sub rsp, 0x10                        
0x6525:	mov rax, qword ptr [rip + 0x2a404]   #    if (|d|ir_history)
0x652c:	test rax, rax                        #    if |(|dir_history)
0x652f:	je 0x6581                            
0x6531:	mov dword ptr [rbp - 4], 0           #	for (i |=| 0; i < dir_history_count; i++)
0x6538:	jmp 0x655c                           #	|f|or (i = 0; i < dir_history_count; i++)
0x653a:	mov rdx, qword ptr [rip + 0x2a3ef]   #	    xfree(dir_history|[|i]);
0x6541:	mov eax, dword ptr [rbp - 4]         
0x6544:	cdqe                                 
0x6546:	shl rax, 3                           
0x654a:	add rax, rdx                         
0x654d:	mov rax, qword ptr [rax]             #	    |x|free(dir_history[i]);
0x6550:	mov rdi, rax                         
0x6553:	call 0x1eeae                         
0x6558:	add dword ptr [rbp - 4], 1           #	for (i = 0; i < dir_history_count; i|+|+)
0x655c:	mov eax, dword ptr [rip + 0x2a3d6]   #	for (i = 0; i |<| dir_history_count; i++)
0x6562:	cmp dword ptr [rbp - 4], eax         
0x6565:	jl 0x653a                            
0x6567:	mov rax, qword ptr [rip + 0x2a3c2]   #	|x|free(dir_history);
0x656e:	mov rdi, rax                         
0x6571:	call 0x1eeae                         
0x6576:	mov qword ptr [rip + 0x2a3af], 0     #	dir_history |=| NULL;
0x6581:	mov dword ptr [rip + 0x2a3ad], 0     #    dir_history_count |=| 0;
0x658b:	mov dword ptr [rip + 0x2a3a7], 0     #    dir_history_point |=| 0;
0x6595:	nop                                  #|}|
0x6596:	leave                                
0x6597:	ret                                  
0x6598:	endbr64                              #|{|
0x659c:	push rbp                             
0x659d:	mov rbp, rsp                         
0x65a0:	push rbx                             
0x65a1:	sub rsp, 0x18                        
0x65a5:	mov qword ptr [rbp - 0x18], rdi      
0x65a9:	mov eax, dword ptr [rip + 0x2a389]   #    dir_history_point |=| dir_history_count;
0x65af:	mov dword ptr [rip + 0x2a387], eax   
0x65b5:	mov eax, dword ptr [rip + 0x2a37d]   #				    |+|+dir_history_count * sizeof(char *));
0x65bb:	add eax, 1                           
0x65be:	mov dword ptr [rip + 0x2a374], eax   #    dir_history |=| (char **)xrealloc(dir_history,
0x65c4:	mov eax, dword ptr [rip + 0x2a36e]   #				    |+|+dir_history_count * sizeof(char *));
0x65ca:	cdqe                                 
0x65cc:	lea rdx, [rax*8]                     #    dir_history = (char **)|x|realloc(dir_history,
0x65d4:	mov rax, qword ptr [rip + 0x2a355]   
0x65db:	mov rsi, rdx                         
0x65de:	mov rdi, rax                         
0x65e1:	call 0x24670                         
0x65e6:	mov qword ptr [rip + 0x2a343], rax   #    dir_history |=| (char **)xrealloc(dir_history,
0x65ed:	mov rdx, qword ptr [rip + 0x2a33c]   #    dir_history|[|dir_history_point] = xstrdup(directory);
0x65f4:	mov eax, dword ptr [rip + 0x2a342]   
0x65fa:	cdqe                                 
0x65fc:	shl rax, 3                           
0x6600:	lea rbx, [rdx + rax]                 
0x6604:	mov rax, qword ptr [rbp - 0x18]      #    dir_history[dir_history_point] = |x|strdup(directory);
0x6608:	mov rdi, rax                         
0x660b:	call 0x24780                         
0x6610:	mov qword ptr [rbx], rax             #    dir_history[dir_history_point] |=| xstrdup(directory);
0x6613:	nop                                  #|}|
0x6614:	mov rbx, qword ptr [rbp - 8]         
0x6618:	leave                                
0x6619:	ret                                  
0x661a:	endbr64                              #|{|
0x661e:	push rbp                             
0x661f:	mov rbp, rsp                         
0x6622:	sub rsp, 0x10                        
0x6626:	mov qword ptr [rbp - 8], rdi         
0x662a:	mov qword ptr [rbp - 0x10], rsi      
0x662e:	mov eax, dword ptr [rip + 0x2a304]   #    if (dir_history_point < dir_history_count |-| 1)
0x6634:	lea edx, [rax - 1]                   
0x6637:	mov eax, dword ptr [rip + 0x2a2ff]   #    if (dir_history_point |<| dir_history_count - 1)
0x663d:	cmp edx, eax                         #    if |(|dir_history_point < dir_history_count - 1)
0x663f:	jle 0x6686                           
0x6641:	mov rdx, qword ptr [rip + 0x2a2e8]   #		     dir_history|[|++dir_history_point], 1);
0x6648:	mov eax, dword ptr [rip + 0x2a2ee]   #		     dir_history[|+|+dir_history_point], 1);
0x664e:	add eax, 1                           
0x6651:	mov dword ptr [rip + 0x2a2e5], eax   #	|p|anel_action(this, act_CHDIR, link,
0x6657:	mov eax, dword ptr [rip + 0x2a2df]   #		     dir_history[|+|+dir_history_point], 1);
0x665d:	cdqe                                 
0x665f:	shl rax, 3                           #		     dir_history|[|++dir_history_point], 1);
0x6663:	add rax, rdx                         
0x6666:	mov rcx, qword ptr [rax]             #	|p|anel_action(this, act_CHDIR, link,
0x6669:	mov rdx, qword ptr [rbp - 0x10]      
0x666d:	mov rax, qword ptr [rbp - 8]         
0x6671:	mov r8d, 1                           
0x6677:	mov esi, 0x21                        
0x667c:	mov rdi, rax                         
0x667f:	call 0x1a89a                         
0x6684:	jmp 0x6690                           #|}|
0x6686:	mov eax, 0                           #	|t|ty_beep();
0x668b:	call 0xbfbf                          
0x6690:	nop                                  #|}|
0x6691:	leave                                
0x6692:	ret                                  
0x6693:	endbr64                              #|{|
0x6697:	push rbp                             
0x6698:	mov rbp, rsp                         
0x669b:	sub rsp, 0x10                        
0x669f:	mov qword ptr [rbp - 8], rdi         
0x66a3:	mov qword ptr [rbp - 0x10], rsi      
0x66a7:	mov eax, dword ptr [rip + 0x2a28f]   #    if (|d|ir_history_point)
0x66ad:	test eax, eax                        #    if |(|dir_history_point)
0x66af:	je 0x66f6                            
0x66b1:	mov rdx, qword ptr [rip + 0x2a278]   #		     dir_history|[|--dir_history_point], 1);
0x66b8:	mov eax, dword ptr [rip + 0x2a27e]   #		     dir_history[|-|-dir_history_point], 1);
0x66be:	sub eax, 1                           
0x66c1:	mov dword ptr [rip + 0x2a275], eax   #	|p|anel_action(this, act_CHDIR, link,
0x66c7:	mov eax, dword ptr [rip + 0x2a26f]   #		     dir_history[|-|-dir_history_point], 1);
0x66cd:	cdqe                                 
0x66cf:	shl rax, 3                           #		     dir_history|[|--dir_history_point], 1);
0x66d3:	add rax, rdx                         
0x66d6:	mov rcx, qword ptr [rax]             #	|p|anel_action(this, act_CHDIR, link,
0x66d9:	mov rdx, qword ptr [rbp - 0x10]      
0x66dd:	mov rax, qword ptr [rbp - 8]         
0x66e1:	mov r8d, 1                           
0x66e7:	mov esi, 0x21                        
0x66ec:	mov rdi, rax                         
0x66ef:	call 0x1a89a                         
0x66f4:	jmp 0x6700                           #|}|
0x66f6:	mov eax, 0                           #	|t|ty_beep();
0x66fb:	call 0xbfbf                          
0x6700:	nop                                  #|}|
0x6701:	leave                                
0x6702:	ret                                  
0x6703:	endbr64                              #|{|
0x6707:	push rbp                             
0x6708:	mov rbp, rsp                         
0x670b:	mov edi, 0                           #    |t|ty_end(NULL);
0x6710:	call 0xb138                          
0x6715:	mov eax, 0                           #    |s|tatus_end();
0x671a:	call 0x1014d                         
0x671f:	mov eax, 0                           #    |r|emove_log();
0x6724:	call 0x1f7c7                         
0x6729:	nop                                  #|}|
0x672a:	pop rbp                              
0x672b:	ret                                  
0x672c:	endbr64                              #|{|
0x6730:	push rbp                             
0x6731:	mov rbp, rsp                         
0x6734:	sub rsp, 0x10                        
0x6738:	mov qword ptr [rbp - 8], rdi         
0x673c:	mov eax, 0                           #    if (|t|ty_get_mode() == TTY_NONCANONIC)
0x6741:	call 0xaf63                          
0x6746:	cmp eax, 1                           #    if |(|tty_get_mode() == TTY_NONCANONIC)
0x6749:	jne 0x6755                           
0x674b:	mov eax, 0                           #	|c|lean_up();
0x6750:	call 0x6703                          
0x6755:	mov rdx, qword ptr [rip + 0x2a17c]   #    |f|printf(stderr, "%s: fatal error: %s.\n", g_program, postmsg);
0x675c:	mov rax, qword ptr [rip + 0x2a15d]   
0x6763:	mov rcx, qword ptr [rbp - 8]         
0x6767:	lea rsi, [rip + 0x20a15]             
0x676e:	mov rdi, rax                         
0x6771:	mov eax, 0                           
0x6776:	call 0x4b40                          
0x677b:	mov edi, 1                           #    |e|xit(1);
0x6780:	call 0x4df0                          
0x6785:	endbr64                              #|{|
0x6789:	push rbp                             
0x678a:	mov rbp, rsp                         
0x678d:	push rbx                             
0x678e:	sub rsp, 0xb8                        
0x6795:	mov qword ptr [rbp - 0xa8], rdi      
0x679c:	mov qword ptr [rbp - 0xb0], rsi      
0x67a3:	mov qword ptr [rbp - 0xb8], rdx      
0x67aa:	mov qword ptr [rbp - 0xc0], rcx      
0x67b1:	mov rax, qword ptr fs:[0x28]         #|{|
0x67ba:	mov qword ptr [rbp - 0x18], rax      
0x67be:	xor eax, eax                         
0x67c0:	mov qword ptr [rbp - 0x88], 0        #    char *|a|nswer = NULL;
0x67cb:	mov qword ptr [rbp - 0x58], 0        #    char *|q|uestion = NULL;
0x67d3:	mov dword ptr [rbp - 0x9c], 0        #    int |i|_flag = 0, entry;
0x67dd:	mov qword ptr [rbp - 0x80], 0        #    char *ptr, *|t|mp = NULL, *d, *flag;
0x67e5:	mov rax, qword ptr [rbp - 0xa8]      #    char *|s|rc = command->body, *save_body;
0x67ec:	mov rax, qword ptr [rax + 8]         
0x67f0:	mov qword ptr [rbp - 0x60], rax      
0x67f4:	mov rax, qword ptr [rbp - 0x60]      #    len = |s|trlen(src) + 1;
0x67f8:	mov rdi, rax                         
0x67fb:	call 0x4960                          
0x6800:	add rax, 1                           #    len |=| strlen(src) + 1;
0x6804:	mov qword ptr [rbp - 0x78], rax      
0x6808:	mov rax, qword ptr [rbp - 0x78]      #    d = *dest = |x|malloc(len);
0x680c:	mov rdi, rax                         
0x680f:	call 0x24650                         
0x6814:	mov rdx, qword ptr [rbp - 0xb0]      #    d = *dest |=| xmalloc(len);
0x681b:	mov qword ptr [rdx], rax             
0x681e:	mov rax, qword ptr [rbp - 0xb0]      #    d |=| *dest = xmalloc(len);
0x6825:	mov rax, qword ptr [rax]             
0x6828:	mov qword ptr [rbp - 0x68], rax      
0x682c:	jmp 0x7145                           #    while |(|*src)
0x6831:	mov rax, qword ptr [rbp - 0x60]      #	if (|*|src != '%')
0x6835:	movzx eax, byte ptr [rax]            
0x6838:	cmp al, 0x25                         #	if |(|*src != '%')
0x683a:	je 0x685e                            
0x683c:	mov rdx, qword ptr [rbp - 0x60]      #	    *d++ = *src|+|+;
0x6840:	lea rax, [rdx + 1]                   
0x6844:	mov qword ptr [rbp - 0x60], rax      
0x6848:	mov rax, qword ptr [rbp - 0x68]      #	    *d|+|+ = *src++;
0x684c:	lea rcx, [rax + 1]                   
0x6850:	mov qword ptr [rbp - 0x68], rcx      
0x6854:	movzx edx, byte ptr [rdx]            #	    *d++ = |*|src++;
0x6857:	mov byte ptr [rax], dl               #	    *d++ |=| *src++;
0x6859:	jmp 0x7145                           
0x685e:	call 0x4ec0                          #	    t = |i|slower((int)*++src) ? p : l;
0x6863:	mov rdx, qword ptr [rax]             
0x6866:	add qword ptr [rbp - 0x60], 1        #	    t = islower((int)*++src) ? p |:| l;
0x686b:	mov rax, qword ptr [rbp - 0x60]      #	    t = |i|slower((int)*++src) ? p : l;
0x686f:	movzx eax, byte ptr [rax]            
0x6872:	movsx rax, al                        
0x6876:	add rax, rax                         
0x6879:	add rax, rdx                         
0x687c:	movzx eax, word ptr [rax]            
0x687f:	movzx eax, ax                        
0x6882:	and eax, 0x200                       
0x6887:	test eax, eax                        #	    t = islower((int)*++src) ? p |:| l;
0x6889:	je 0x6894                            
0x688b:	mov rax, qword ptr [rbp - 0xb8]      #	    t = islower((int)*++src) ? p |:| l;
0x6892:	jmp 0x689b                           
0x6894:	mov rax, qword ptr [rbp - 0xc0]      #	    t = islower((int)*++src) ? p |:| l;
0x689b:	mov qword ptr [rbp - 0x50], rax      #	    t |=| islower((int)*++src) ? p : l;
0x689f:	mov rax, qword ptr [rbp - 0x60]      #	    switch (|*|src)
0x68a3:	movzx eax, byte ptr [rax]            
0x68a6:	movsx eax, al                        
0x68a9:	sub eax, 0x3f                        #	    |s|witch (*src)
0x68ac:	cmp eax, 0x3b                        
0x68af:	ja 0x7166                            
0x68b5:	mov eax, eax                         
0x68b7:	lea rdx, [rax*4]                     
0x68bf:	lea rax, [rip + 0x20f42]             
0x68c6:	mov eax, dword ptr [rdx + rax]       
0x68c9:	cdqe                                 
0x68cb:	lea rdx, [rip + 0x20f36]             
0x68d2:	add rax, rdx                         
0x68d5:	jmp rax                              
0x68d8:	mov eax, dword ptr [rip + 0x2a06a]   #		    if (|b|usy)
0x68de:	test eax, eax                        #		    if |(|busy)
0x68e0:	je 0x68f1                            
0x68e2:	mov dword ptr [rip + 0x2a05c], 0     #			busy |=| 0;
0x68ec:	jmp 0x7176                           #			|g|oto bad_command;
0x68f1:	add qword ptr [rbp - 0x60], 1        #		    if |(|*++src != '{')
0x68f6:	mov rax, qword ptr [rbp - 0x60]      #		    if (|*|++src != '{')
0x68fa:	movzx eax, byte ptr [rax]            
0x68fd:	cmp al, 0x7b                         #		    if |(|*++src != '{')
0x68ff:	jne 0x7169                           
0x6905:	add qword ptr [rbp - 0x60], 1        #		    if |(|(ptr = strchr(++src, '}')) == NULL)
0x690a:	mov rax, qword ptr [rbp - 0x60]      #		    if ((ptr = |s|trchr(++src, '}')) == NULL)
0x690e:	mov esi, 0x7d                        
0x6913:	mov rdi, rax                         
0x6916:	call 0x49b0                          
0x691b:	mov qword ptr [rbp - 0x48], rax      
0x691f:	cmp qword ptr [rbp - 0x48], 0        #		    if |(|(ptr = strchr(++src, '}')) == NULL)
0x6924:	je 0x716c                            
0x692a:	mov rax, qword ptr [rbp - 0x48]      #		    *ptr |=| 0;
0x692e:	mov byte ptr [rax], 0                
0x6931:	mov rax, qword ptr [rbp - 0x60]      #		     c = |i|l_read_char(src, "yn", IL_MOVE);
0x6935:	mov edx, 2                           
0x693a:	lea rcx, [rip + 0x20858]             
0x6941:	mov rsi, rcx                         
0x6944:	mov rdi, rax                         
0x6947:	call 0x5c09                          
0x694c:	mov byte ptr [rbp - 0x9d], al        
0x6952:	mov rax, qword ptr [rbp - 0x48]      #		    *ptr |=| '}';
0x6956:	mov byte ptr [rax], 0x7d             
0x6959:	cmp byte ptr [rbp - 0x9d], 0x79      #		    if |(|c != 'y')
0x6960:	jne 0x719d                           
0x6966:	mov rax, qword ptr [rbp - 0x48]      #		    src |=| ptr;
0x696a:	mov qword ptr [rbp - 0x60], rax      
0x696e:	jmp 0x70a9                           #		    |b|reak;
0x6973:	mov eax, dword ptr [rip + 0x29fcf]   #		    if (|b|usy)
0x6979:	test eax, eax                        #		    if |(|busy)
0x697b:	je 0x698c                            
0x697d:	mov dword ptr [rip + 0x29fc1], 0     #			busy |=| 0;
0x6987:	jmp 0x7176                           #			|g|oto bad_command;
0x698c:	add qword ptr [rbp - 0x60], 1        #		    if |(|*++src != '{')
0x6991:	mov rax, qword ptr [rbp - 0x60]      #		    if (|*|++src != '{')
0x6995:	movzx eax, byte ptr [rax]            
0x6998:	cmp al, 0x7b                         #		    if |(|*++src != '{')
0x699a:	jne 0x716f                           
0x69a0:	add qword ptr [rbp - 0x60], 1        #		    if |(|(ptr = strchr(++src, ',')) == NULL)
0x69a5:	mov rax, qword ptr [rbp - 0x60]      #		    if ((ptr = |s|trchr(++src, ',')) == NULL)
0x69a9:	mov esi, 0x2c                        
0x69ae:	mov rdi, rax                         
0x69b1:	call 0x49b0                          
0x69b6:	mov qword ptr [rbp - 0x48], rax      
0x69ba:	cmp qword ptr [rbp - 0x48], 0        #		    if |(|(ptr = strchr(++src, ',')) == NULL)
0x69bf:	je 0x7172                            
0x69c5:	mov rax, qword ptr [rbp - 0x48]      #		    *ptr |=| 0;
0x69c9:	mov byte ptr [rax], 0                
0x69cc:	mov dword ptr [rip + 0x29f72], 1     #		    busy |=| 1;
0x69d6:	mov rax, qword ptr [rbp - 0xa8]      #		    save_body |=| command->body;
0x69dd:	mov rax, qword ptr [rax + 8]         
0x69e1:	mov qword ptr [rbp - 0x40], rax      
0x69e5:	mov rax, qword ptr [rbp - 0xa8]      #		    command->body |=| src;
0x69ec:	mov rdx, qword ptr [rbp - 0x60]      
0x69f0:	mov qword ptr [rax + 8], rdx         
0x69f4:	mov rcx, qword ptr [rbp - 0xc0]      #		    retval = |c|ommand_expand(command, &answer, p, l);
0x69fb:	mov rdx, qword ptr [rbp - 0xb8]      
0x6a02:	lea rsi, [rbp - 0x88]                
0x6a09:	mov rax, qword ptr [rbp - 0xa8]      
0x6a10:	mov rdi, rax                         
0x6a13:	mov eax, 0                           
0x6a18:	call 0x6785                          
0x6a1d:	mov dword ptr [rbp - 0x98], eax      
0x6a23:	mov rax, qword ptr [rbp - 0xa8]      #		    command->body |=| save_body;
0x6a2a:	mov rdx, qword ptr [rbp - 0x40]      
0x6a2e:	mov qword ptr [rax + 8], rdx         
0x6a32:	mov dword ptr [rip + 0x29f0c], 0     #		    busy |=| 0;
0x6a3c:	cmp dword ptr [rbp - 0x98], 0        #		    if |(|retval < 1)
0x6a43:	jg 0x6a5e                            
0x6a45:	mov rax, qword ptr [rbp - 0x48]      #			*ptr |=| ',';
0x6a49:	mov byte ptr [rax], 0x2c             
0x6a4c:	cmp dword ptr [rbp - 0x98], 0        #			if |(|retval == 0)
0x6a53:	jne 0x71a0                           
0x6a59:	jmp 0x7176                           #			    |g|oto bad_command;
0x6a5e:	mov rax, qword ptr [rbp - 0xa8]      #		    question = xmalloc(16 + strlen(command|-|>name) +
0x6a65:	mov rax, qword ptr [rax]             
0x6a68:	mov rdi, rax                         #		    question = xmalloc(16 + |s|trlen(command->name) +
0x6a6b:	call 0x4960                          
0x6a70:	mov rbx, rax                         
0x6a73:	mov rax, qword ptr [rbp - 0x88]      #				       |s|trlen(answer) + 1);
0x6a7a:	mov rdi, rax                         
0x6a7d:	call 0x4960                          
0x6a82:	add rax, rbx                         #		    question = xmalloc(16 + strlen(command->name) |+|
0x6a85:	add rax, 0x11                        #		    question = |x|malloc(16 + strlen(command->name) +
0x6a89:	mov rdi, rax                         
0x6a8c:	call 0x24650                         
0x6a91:	mov qword ptr [rbp - 0x58], rax      
0x6a95:	mov rcx, qword ptr [rbp - 0x88]      #		    |s|printf(question, "%s: %s", command->name, answer);
0x6a9c:	mov rax, qword ptr [rbp - 0xa8]      
0x6aa3:	mov rdx, qword ptr [rax]             
0x6aa6:	mov rax, qword ptr [rbp - 0x58]      
0x6aaa:	lea rsi, [rip + 0x206eb]             
0x6ab1:	mov rdi, rax                         
0x6ab4:	mov eax, 0                           
0x6ab9:	call 0x4dd0                          
0x6abe:	mov rax, qword ptr [rbp - 0x88]      #		    |x|free(answer);
0x6ac5:	mov rdi, rax                         
0x6ac8:	call 0x1eeae                         
0x6acd:	mov qword ptr [rbp - 0x88], 0        #		    answer |=|  NULL;
0x6ad8:	mov rax, qword ptr [rbp - 0x48]      #		    *ptr|+|+ = ',';
0x6adc:	lea rdx, [rax + 1]                   
0x6ae0:	mov qword ptr [rbp - 0x48], rdx      
0x6ae4:	mov byte ptr [rax], 0x2c             #		    *ptr++ |=| ',';
0x6ae7:	mov rax, qword ptr [rbp - 0x48]      #		    if ((src = |s|trchr(ptr, '}')) == NULL)
0x6aeb:	mov esi, 0x7d                        
0x6af0:	mov rdi, rax                         
0x6af3:	call 0x49b0                          
0x6af8:	mov qword ptr [rbp - 0x60], rax      
0x6afc:	cmp qword ptr [rbp - 0x60], 0        #		    if |(|(src = strchr(ptr, '}')) == NULL)
0x6b01:	je 0x7175                            
0x6b07:	mov rax, qword ptr [rbp - 0x60]      #		    *src |=| 0;
0x6b0b:	mov byte ptr [rax], 0                
0x6b0e:	mov rax, qword ptr [rbp - 0x58]      #		    if (|s|trlen(question) > MAX_STATIC_SIZE)
0x6b12:	mov rdi, rax                         
0x6b15:	call 0x4960                          
0x6b1a:	cmp rax, 0x32                        #		    if |(|strlen(question) > MAX_STATIC_SIZE)
0x6b1e:	jbe 0x6b2b                           
0x6b20:	mov rax, qword ptr [rbp - 0x58]      #			question|[|MAX_STATIC_SIZE] = 0;
0x6b24:	add rax, 0x32                        
0x6b28:	mov byte ptr [rax], 0                #			question[MAX_STATIC_SIZE] |=| 0;
0x6b2b:	mov dword ptr [rip + 0x29e13], 1     #		    busy |=| 1;
0x6b35:	mov rax, qword ptr [rbp - 0xa8]      #		    save_body |=| command->body;
0x6b3c:	mov rax, qword ptr [rax + 8]         
0x6b40:	mov qword ptr [rbp - 0x40], rax      
0x6b44:	mov rax, qword ptr [rbp - 0xa8]      #		    command->body |=| ptr;
0x6b4b:	mov rdx, qword ptr [rbp - 0x48]      
0x6b4f:	mov qword ptr [rax + 8], rdx         
0x6b53:	mov rcx, qword ptr [rbp - 0xc0]      #		    retval = |c|ommand_expand(command, &answer, p, l);
0x6b5a:	mov rdx, qword ptr [rbp - 0xb8]      
0x6b61:	lea rsi, [rbp - 0x88]                
0x6b68:	mov rax, qword ptr [rbp - 0xa8]      
0x6b6f:	mov rdi, rax                         
0x6b72:	mov eax, 0                           
0x6b77:	call 0x6785                          
0x6b7c:	mov dword ptr [rbp - 0x98], eax      
0x6b82:	mov rax, qword ptr [rbp - 0xa8]      #		    command->body |=| save_body;
0x6b89:	mov rdx, qword ptr [rbp - 0x40]      
0x6b8d:	mov qword ptr [rax + 8], rdx         
0x6b91:	mov dword ptr [rip + 0x29dad], 0     #		    busy |=| 0;
0x6b9b:	cmp dword ptr [rbp - 0x98], 0        #		    if |(|retval < 1)
0x6ba2:	jg 0x6bd1                            
0x6ba4:	mov rax, qword ptr [rbp - 0x60]      #			*src |=| '}';
0x6ba8:	mov byte ptr [rax], 0x7d             
0x6bab:	mov rax, qword ptr [rbp - 0x58]      #			|x|free(question);
0x6baf:	mov rdi, rax                         
0x6bb2:	call 0x1eeae                         
0x6bb7:	mov qword ptr [rbp - 0x58], 0        #			question |=| NULL;
0x6bbf:	cmp dword ptr [rbp - 0x98], 0        #			if |(|retval == 0)
0x6bc6:	jne 0x71a3                           
0x6bcc:	jmp 0x7176                           #			    |g|oto bad_command;
0x6bd1:	mov rax, qword ptr [rbp - 0xa8]      #		    flag = |i|l_read_line(question, &tmp, answer,
0x6bd8:	mov rcx, qword ptr [rax + 0x28]      
0x6bdc:	mov rdx, qword ptr [rbp - 0x88]      
0x6be3:	lea rsi, [rbp - 0x80]                
0x6be7:	mov rax, qword ptr [rbp - 0x58]      
0x6beb:	mov rdi, rax                         
0x6bee:	call 0x5efb                          
0x6bf3:	mov qword ptr [rbp - 0x38], rax      
0x6bf7:	mov rax, qword ptr [rbp - 0x58]      #		    |x|free(question);
0x6bfb:	mov rdi, rax                         
0x6bfe:	call 0x1eeae                         
0x6c03:	mov rax, qword ptr [rbp - 0x88]      #		    |x|free(answer);
0x6c0a:	mov rdi, rax                         
0x6c0d:	call 0x1eeae                         
0x6c12:	mov qword ptr [rbp - 0x88], 0        #		    question = answer |=| NULL;
0x6c1d:	mov rax, qword ptr [rbp - 0x88]      #		    question |=| answer = NULL;
0x6c24:	mov qword ptr [rbp - 0x58], rax      
0x6c28:	cmp qword ptr [rbp - 0x38], 0        #		    if |(|flag == NULL)
0x6c2d:	jne 0x6c3b                           
0x6c2f:	mov rax, qword ptr [rbp - 0x60]      #			*src |=| '}';
0x6c33:	mov byte ptr [rax], 0x7d             
0x6c36:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6c3b:	mov rax, qword ptr [rbp - 0x60]      #		    *src |=| '}';
0x6c3f:	mov byte ptr [rax], 0x7d             
0x6c42:	jmp 0x70a9                           #		    |b|reak;
0x6c47:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != FILE_ENTRY)
0x6c4b:	mov rdi, rax                         
0x6c4e:	call 0x1119a                         
0x6c53:	cmp eax, 1                           #		    if |(|panel_get_current_file_type(t) != FILE_ENTRY)
0x6c56:	jne 0x71a6                           
0x6c5c:	jmp 0x6c6b                           #		  |g|et_file_name:
0x6c5e:	nop                                  #		    |g|oto get_file_name;
0x6c5f:	jmp 0x6c6b                           
0x6c61:	nop                                  #		    |g|oto get_file_name;
0x6c62:	jmp 0x6c6b                           
0x6c64:	nop                                  #		    |g|oto get_file_name;
0x6c65:	jmp 0x6c6b                           
0x6c67:	nop                                  #		    |g|oto get_file_name;
0x6c68:	jmp 0x6c6b                           
0x6c6a:	nop                                  #		    |g|oto get_file_name;
0x6c6b:	mov rax, qword ptr [rbp - 0x50]      #		    ptr = |p|anel_get_current_file_name(t);
0x6c6f:	mov rdi, rax                         
0x6c72:	call 0x110ca                         
0x6c77:	mov qword ptr [rbp - 0x48], rax      
0x6c7b:	mov rax, qword ptr [rbp - 0x48]      #		    tmp = xmalloc(1 + |s|trlen(ptr) + 1 + 1);
0x6c7f:	mov rdi, rax                         
0x6c82:	call 0x4960                          
0x6c87:	add rax, 3                           #		    tmp = |x|malloc(1 + strlen(ptr) + 1 + 1);
0x6c8b:	mov rdi, rax                         
0x6c8e:	call 0x24650                         
0x6c93:	mov qword ptr [rbp - 0x80], rax      #		    tmp |=| xmalloc(1 + strlen(ptr) + 1 + 1);
0x6c97:	mov rax, qword ptr [rbp - 0x80]      #		    |s|printf(tmp, "\"%s\"", ptr);
0x6c9b:	mov rdx, qword ptr [rbp - 0x48]      
0x6c9f:	lea rcx, [rip + 0x204fd]             
0x6ca6:	mov rsi, rcx                         
0x6ca9:	mov rdi, rax                         
0x6cac:	mov eax, 0                           
0x6cb1:	call 0x4dd0                          
0x6cb6:	jmp 0x70a9                           #		    |b|reak;
0x6cbb:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != DIR_ENTRY)
0x6cbf:	mov rdi, rax                         
0x6cc2:	call 0x1119a                         
0x6cc7:	test eax, eax                        #		    if |(|panel_get_current_file_type(t) != DIR_ENTRY)
0x6cc9:	je 0x6c61                            
0x6ccb:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6cd0:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != SYMLINK_ENTRY)
0x6cd4:	mov rdi, rax                         
0x6cd7:	call 0x1119a                         
0x6cdc:	cmp eax, 2                           #		    if |(|panel_get_current_file_type(t) != SYMLINK_ENTRY)
0x6cdf:	je 0x6c64                            
0x6ce1:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6ce6:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != FIFO_ENTRY)
0x6cea:	mov rdi, rax                         
0x6ced:	call 0x1119a                         
0x6cf2:	cmp eax, 3                           #		    if |(|panel_get_current_file_type(t) != FIFO_ENTRY)
0x6cf5:	je 0x6c67                            
0x6cfb:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6d00:	mov rax, qword ptr [rbp - 0x50]      #		    if (|p|anel_get_current_file_type(t) != SOCKET_ENTRY)
0x6d04:	mov rdi, rax                         
0x6d07:	call 0x1119a                         
0x6d0c:	cmp eax, 4                           #		    if |(|panel_get_current_file_type(t) != SOCKET_ENTRY)
0x6d0f:	je 0x6c6a                            
0x6d15:	jmp 0x71aa                           #			|g|oto strings_dont_match;
0x6d1a:	mov edi, 0x10                        #		    tmp = |x|malloc(16);
0x6d1f:	call 0x24650                         
0x6d24:	mov qword ptr [rbp - 0x80], rax      #		    tmp |=| xmalloc(16);
0x6d28:	mov rax, qword ptr [rbp - 0x50]      #			    (int)|p|anel_get_current_file_mode(t) & 07777);
0x6d2c:	mov rdi, rax                         
0x6d2f:	call 0x11166                         
0x6d34:	and eax, 0xfff                       #		    |s|printf(tmp, "%o",
0x6d39:	mov edx, eax                         
0x6d3b:	mov rax, qword ptr [rbp - 0x80]      
0x6d3f:	lea rcx, [rip + 0x20462]             
0x6d46:	mov rsi, rcx                         
0x6d49:	mov rdi, rax                         
0x6d4c:	mov eax, 0                           
0x6d51:	call 0x4dd0                          
0x6d56:	jmp 0x70a9                           #		    |b|reak;
0x6d5b:	mov rax, qword ptr [rbp - 0x50]      #		    uid = |p|anel_get_current_file_uid(t);
0x6d5f:	mov rdi, rax                         
0x6d62:	call 0x110fe                         
0x6d67:	mov dword ptr [rbp - 0x94], eax      
0x6d6d:	mov eax, dword ptr [rbp - 0x94]      #		    pwd = |g|etpwuid(uid);
0x6d73:	mov edi, eax                         
0x6d75:	call 0x4930                          
0x6d7a:	mov qword ptr [rbp - 0x30], rax      
0x6d7e:	cmp qword ptr [rbp - 0x30], 0        #		    if |(|pwd)
0x6d83:	je 0x6d9d                            
0x6d85:	mov rax, qword ptr [rbp - 0x30]      #			tmp = xstrdup(pwd|-|>pw_name);
0x6d89:	mov rax, qword ptr [rax]             
0x6d8c:	mov rdi, rax                         #			tmp = |x|strdup(pwd->pw_name);
0x6d8f:	call 0x24780                         
0x6d94:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xstrdup(pwd->pw_name);
0x6d98:	jmp 0x70a9                           #		    |b|reak;
0x6d9d:	mov edi, 0x10                        #			tmp = |x|malloc(16);
0x6da2:	call 0x24650                         
0x6da7:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xmalloc(16);
0x6dab:	mov edx, dword ptr [rbp - 0x94]      #			|s|printf(tmp, "%o", (int)uid);
0x6db1:	mov rax, qword ptr [rbp - 0x80]      
0x6db5:	lea rcx, [rip + 0x203ec]             
0x6dbc:	mov rsi, rcx                         
0x6dbf:	mov rdi, rax                         
0x6dc2:	mov eax, 0                           
0x6dc7:	call 0x4dd0                          
0x6dcc:	jmp 0x70a9                           #		    |b|reak;
0x6dd1:	mov rax, qword ptr [rbp - 0x50]      #		    gid = |p|anel_get_current_file_gid(t);
0x6dd5:	mov rdi, rax                         
0x6dd8:	call 0x11132                         
0x6ddd:	mov dword ptr [rbp - 0x8c], eax      
0x6de3:	mov eax, dword ptr [rbp - 0x8c]      #		    grp = |g|etgrgid(gid);
0x6de9:	mov edi, eax                         
0x6deb:	call 0x49d0                          
0x6df0:	mov qword ptr [rbp - 0x20], rax      
0x6df4:	cmp qword ptr [rbp - 0x20], 0        #		    if |(|grp)
0x6df9:	je 0x6e13                            
0x6dfb:	mov rax, qword ptr [rbp - 0x20]      #			tmp = xstrdup(grp|-|>gr_name);
0x6dff:	mov rax, qword ptr [rax]             
0x6e02:	mov rdi, rax                         #			tmp = |x|strdup(grp->gr_name);
0x6e05:	call 0x24780                         
0x6e0a:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xstrdup(grp->gr_name);
0x6e0e:	jmp 0x70a9                           #		    |b|reak;
0x6e13:	mov edi, 0x10                        #			tmp = |x|malloc(16);
0x6e18:	call 0x24650                         
0x6e1d:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xmalloc(16);
0x6e21:	mov edx, dword ptr [rbp - 0x8c]      #			|s|printf(tmp, "%o", (int)gid);
0x6e27:	mov rax, qword ptr [rbp - 0x80]      
0x6e2b:	lea rcx, [rip + 0x20376]             
0x6e32:	mov rsi, rcx                         
0x6e35:	mov rdi, rax                         
0x6e38:	mov eax, 0                           
0x6e3d:	call 0x4dd0                          
0x6e42:	jmp 0x70a9                           #		    |b|reak;
0x6e47:	mov rax, qword ptr [rbp - 0x50]      #		    tmp = xmalloc(1 + strlen(t|-|>path) + 1 + 1);
0x6e4b:	mov rax, qword ptr [rax + 0x18]      
0x6e4f:	mov rdi, rax                         #		    tmp = xmalloc(1 + |s|trlen(t->path) + 1 + 1);
0x6e52:	call 0x4960                          
0x6e57:	add rax, 3                           #		    tmp = |x|malloc(1 + strlen(t->path) + 1 + 1);
0x6e5b:	mov rdi, rax                         
0x6e5e:	call 0x24650                         
0x6e63:	mov qword ptr [rbp - 0x80], rax      #		    tmp |=| xmalloc(1 + strlen(t->path) + 1 + 1);
0x6e67:	mov rax, qword ptr [rbp - 0x50]      #		    |s|printf(tmp, "\"%s\"", t->path);
0x6e6b:	mov rdx, qword ptr [rax + 0x18]      
0x6e6f:	mov rax, qword ptr [rbp - 0x80]      
0x6e73:	lea rcx, [rip + 0x20329]             
0x6e7a:	mov rsi, rcx                         
0x6e7d:	mov rdi, rax                         
0x6e80:	mov eax, 0                           
0x6e85:	call 0x4dd0                          
0x6e8a:	jmp 0x70a9                           #		    |b|reak;
0x6e8f:	mov rax, qword ptr [rbp - 0x50]      #		    ptr = strrchr(t|-|>path, '/');
0x6e93:	mov rax, qword ptr [rax + 0x18]      
0x6e97:	mov esi, 0x2f                        #		    ptr = |s|trrchr(t->path, '/');
0x6e9c:	mov rdi, rax                         
0x6e9f:	call 0x49e0                          
0x6ea4:	mov qword ptr [rbp - 0x48], rax      
0x6ea8:	add qword ptr [rbp - 0x48], 1        #		    ptr = (*++ptr) ? ptr |:| "/root";
0x6ead:	mov rax, qword ptr [rbp - 0x48]      #		    ptr = (|*|++ptr) ? ptr : "/root";
0x6eb1:	movzx eax, byte ptr [rax]            
0x6eb4:	test al, al                          #		    ptr = (*++ptr) ? ptr |:| "/root";
0x6eb6:	je 0x6ebe                            
0x6eb8:	mov rax, qword ptr [rbp - 0x48]      #		    ptr = (*++ptr) ? ptr |:| "/root";
0x6ebc:	jmp 0x6ec5                           
0x6ebe:	lea rax, [rip + 0x202e6]             #		    ptr = (*++ptr) ? ptr |:| "/root";
0x6ec5:	mov qword ptr [rbp - 0x48], rax      #		    ptr |=| (*++ptr) ? ptr : "/root";
0x6ec9:	mov rax, qword ptr [rbp - 0x48]      #		    tmp = xmalloc(1 + |s|trlen(ptr) + 1 + 1);
0x6ecd:	mov rdi, rax                         
0x6ed0:	call 0x4960                          
0x6ed5:	add rax, 3                           #		    tmp = |x|malloc(1 + strlen(ptr) + 1 + 1);
0x6ed9:	mov rdi, rax                         
0x6edc:	call 0x24650                         
0x6ee1:	mov qword ptr [rbp - 0x80], rax      #		    tmp |=| xmalloc(1 + strlen(ptr) + 1 + 1);
0x6ee5:	mov rax, qword ptr [rbp - 0x80]      #		    |s|printf(tmp, "\"%s\"", ptr);
0x6ee9:	mov rdx, qword ptr [rbp - 0x48]      
0x6eed:	lea rcx, [rip + 0x202af]             
0x6ef4:	mov rsi, rcx                         
0x6ef7:	mov rdi, rax                         
0x6efa:	mov eax, 0                           
0x6eff:	call 0x4dd0                          
0x6f04:	jmp 0x70a9                           #		    |b|reak;
0x6f09:	mov rax, qword ptr [rbp - 0x60]      #		    i_flag = (|*|src == 'i') ? 1 : 2;
0x6f0d:	movzx eax, byte ptr [rax]            
0x6f10:	cmp al, 0x69                         #		    i_flag = (*src == 'i') ? 1 |:| 2;
0x6f12:	jne 0x6f1b                           
0x6f14:	mov eax, 1                           #		    i_flag = (*src == 'i') ? 1 |:| 2;
0x6f19:	jmp 0x6f20                           
0x6f1b:	mov eax, 2                           #		    i_flag = (*src == 'i') ? 1 |:| 2;
0x6f20:	mov dword ptr [rbp - 0x9c], eax      #		    i_flag |=| (*src == 'i') ? 1 : 2;
0x6f26:	mov eax, dword ptr [rip + 0x29a1c]   #		    if (|b|usy && t->selected_entries)
0x6f2c:	test eax, eax                        #		    if |(|busy && t->selected_entries)
0x6f2e:	je 0x6f7f                            
0x6f30:	mov rax, qword ptr [rbp - 0x50]      #		    if (busy && t|-|>selected_entries)
0x6f34:	mov eax, dword ptr [rax + 0x70]      
0x6f37:	test eax, eax                        #		    if (busy |&|& t->selected_entries)
0x6f39:	je 0x6f7f                            
0x6f3b:	mov qword ptr [rbp - 0x70], 0x14     #			tmplen |=| 20;
0x6f43:	mov rax, qword ptr [rbp - 0x70]      #			tmp = |x|malloc(tmplen + 1);
0x6f47:	add rax, 1                           
0x6f4b:	mov rdi, rax                         
0x6f4e:	call 0x24650                         
0x6f53:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xmalloc(tmplen + 1);
0x6f57:	mov rax, qword ptr [rbp - 0x80]      #			|s|trcpy(tmp, "selected entries");
0x6f5b:	movabs rbx, 0x64657463656c6573       
0x6f65:	movabs rsi, 0x73656972746e6520       
0x6f6f:	mov qword ptr [rax], rbx             
0x6f72:	mov qword ptr [rax + 8], rsi         
0x6f76:	mov byte ptr [rax + 0x10], 0         
0x6f7a:	jmp 0x70a9                           #			|b|reak;
0x6f7f:	mov qword ptr [rbp - 0x80], 0        #		    tmp |=| NULL;
0x6f87:	mov qword ptr [rbp - 0x70], 0        #		    tmplen |=| 0;
0x6f8f:	mov rax, qword ptr [rbp - 0x50]      #		    |p|anel_init_iterator(t);
0x6f93:	mov rdi, rax                         
0x6f96:	call 0x13121                         
0x6f9b:	jmp 0x707e                           #		    while |(|(entry = panel_get_next(t)) != -1)
0x6fa0:	mov rax, qword ptr [rbp - 0x70]      #			oldtmplen |=| tmplen;
0x6fa4:	mov qword ptr [rbp - 0x28], rax      
0x6fa8:	mov rax, qword ptr [rbp - 0x50]      #			tmplen += 1 + strlen(t|-|>dir_entry[entry].name) + 1 + 1;
0x6fac:	mov rcx, qword ptr [rax + 0x38]      
0x6fb0:	mov eax, dword ptr [rbp - 0x90]      #			tmplen += 1 + strlen(t->dir_entry|[|entry].name) + 1 + 1;
0x6fb6:	movsxd rdx, eax                      
0x6fb9:	mov rax, rdx                         
0x6fbc:	shl rax, 2                           
0x6fc0:	add rax, rdx                         
0x6fc3:	shl rax, 4                           
0x6fc7:	add rax, rcx                         
0x6fca:	mov rax, qword ptr [rax]             #			tmplen += 1 + strlen(t->dir_entry[entry]|.|name) + 1 + 1;
0x6fcd:	mov rdi, rax                         #			tmplen += 1 + |s|trlen(t->dir_entry[entry].name) + 1 + 1;
0x6fd0:	call 0x4960                          
0x6fd5:	mov rdx, qword ptr [rbp - 0x70]      #			tmplen |+|= 1 + strlen(t->dir_entry[entry].name) + 1 + 1;
0x6fd9:	add rax, rdx                         
0x6fdc:	add rax, 3                           
0x6fe0:	mov qword ptr [rbp - 0x70], rax      
0x6fe4:	mov rax, qword ptr [rbp - 0x70]      #			tmp = |x|realloc(tmp, tmplen + 1);
0x6fe8:	lea rdx, [rax + 1]                   
0x6fec:	mov rax, qword ptr [rbp - 0x80]      
0x6ff0:	mov rsi, rdx                         
0x6ff3:	mov rdi, rax                         
0x6ff6:	call 0x24670                         
0x6ffb:	mov qword ptr [rbp - 0x80], rax      #			tmp |=| xrealloc(tmp, tmplen + 1);
0x6fff:	mov rdx, qword ptr [rbp - 0x80]      #			tmp|[|oldtmplen] = '"';
0x7003:	mov rax, qword ptr [rbp - 0x28]      
0x7007:	add rax, rdx                         
0x700a:	mov byte ptr [rax], 0x22             #			tmp[oldtmplen] |=| '"';
0x700d:	mov rax, qword ptr [rbp - 0x50]      #			strcpy(tmp + oldtmplen + 1, t|-|>dir_entry[entry].name);
0x7011:	mov rcx, qword ptr [rax + 0x38]      
0x7015:	mov eax, dword ptr [rbp - 0x90]      #			strcpy(tmp + oldtmplen + 1, t->dir_entry|[|entry].name);
0x701b:	movsxd rdx, eax                      
0x701e:	mov rax, rdx                         
0x7021:	shl rax, 2                           
0x7025:	add rax, rdx                         
0x7028:	shl rax, 4                           
0x702c:	add rax, rcx                         
0x702f:	mov rax, qword ptr [rax]             #			strcpy(tmp + oldtmplen + 1, t->dir_entry[entry]|.|name);
0x7032:	mov rcx, qword ptr [rbp - 0x80]      #			|s|trcpy(tmp + oldtmplen + 1, t->dir_entry[entry].name);
0x7036:	mov rdx, qword ptr [rbp - 0x28]      #			strcpy(tmp + oldtmplen |+| 1, t->dir_entry[entry].name);
0x703a:	add rdx, 1                           
0x703e:	add rdx, rcx                         #			|s|trcpy(tmp + oldtmplen + 1, t->dir_entry[entry].name);
0x7041:	mov rsi, rax                         
0x7044:	mov rdi, rdx                         
0x7047:	call 0x4870                          
0x704c:	mov rdx, qword ptr [rbp - 0x80]      #			tmp|[|tmplen - 2] = '"';
0x7050:	mov rax, qword ptr [rbp - 0x70]      
0x7054:	sub rax, 2                           
0x7058:	add rax, rdx                         
0x705b:	mov byte ptr [rax], 0x22             #			tmp[tmplen - 2] |=| '"';
0x705e:	mov rdx, qword ptr [rbp - 0x80]      #			tmp|[|tmplen - 1] = ' ';
0x7062:	mov rax, qword ptr [rbp - 0x70]      
0x7066:	sub rax, 1                           
0x706a:	add rax, rdx                         
0x706d:	mov byte ptr [rax], 0x20             #			tmp[tmplen - 1] |=| ' ';
0x7070:	mov rdx, qword ptr [rbp - 0x80]      #			tmp|[|tmplen    ] = 0;
0x7074:	mov rax, qword ptr [rbp - 0x70]      
0x7078:	add rax, rdx                         
0x707b:	mov byte ptr [rax], 0                #			tmp[tmplen    ] |=| 0;
0x707e:	mov rax, qword ptr [rbp - 0x50]      #		    while ((entry = |p|anel_get_next(t)) != -1)
0x7082:	mov rdi, rax                         
0x7085:	call 0x13149                         
0x708a:	mov dword ptr [rbp - 0x90], eax      
0x7090:	cmp dword ptr [rbp - 0x90], -1       #		    while ((entry = panel_get_next(t)) |!|= -1)
0x7097:	jne 0x6fa0                           
0x709d:	cmp qword ptr [rbp - 0x70], 0        #		    if |(|tmplen == 0)
0x70a2:	je 0x71a9                            
0x70a8:	nop                                  #		    |b|reak;
0x70a9:	add qword ptr [rbp - 0x60], 1        #	    src|+|+;
0x70ae:	mov rax, qword ptr [rbp - 0x68]      #	    *d |=| 0;
0x70b2:	mov byte ptr [rax], 0                
0x70b5:	mov rax, qword ptr [rbp - 0x80]      #	    if (|t|mp)
0x70b9:	test rax, rax                        #	    if |(|tmp)
0x70bc:	je 0x7145                            
0x70c2:	mov rax, qword ptr [rbp - 0x80]      #		*dest = xrealloc(*dest, len += |s|trlen(tmp));
0x70c6:	mov rdi, rax                         
0x70c9:	call 0x4960                          
0x70ce:	add qword ptr [rbp - 0x78], rax      #		*dest = |x|realloc(*dest, len += strlen(tmp));
0x70d2:	mov rax, qword ptr [rbp - 0xb0]      
0x70d9:	mov rax, qword ptr [rax]             
0x70dc:	mov rdx, qword ptr [rbp - 0x78]      
0x70e0:	mov rsi, rdx                         
0x70e3:	mov rdi, rax                         
0x70e6:	call 0x24670                         
0x70eb:	mov rdx, qword ptr [rbp - 0xb0]      #		*dest |=| xrealloc(*dest, len += strlen(tmp));
0x70f2:	mov qword ptr [rdx], rax             
0x70f5:	mov rdx, qword ptr [rbp - 0x80]      #		|s|trcat(*dest, tmp);
0x70f9:	mov rax, qword ptr [rbp - 0xb0]      
0x7100:	mov rax, qword ptr [rax]             
0x7103:	mov rsi, rdx                         
0x7106:	mov rdi, rax                         
0x7109:	call 0x4db0                          
0x710e:	mov rax, qword ptr [rbp - 0xb0]      #		d = |*|dest + strlen(*dest);
0x7115:	mov rbx, qword ptr [rax]             
0x7118:	mov rax, qword ptr [rbp - 0xb0]      #		d = *dest + |s|trlen(*dest);
0x711f:	mov rax, qword ptr [rax]             
0x7122:	mov rdi, rax                         
0x7125:	call 0x4960                          
0x712a:	add rax, rbx                         #		d |=| *dest + strlen(*dest);
0x712d:	mov qword ptr [rbp - 0x68], rax      
0x7131:	mov rax, qword ptr [rbp - 0x80]      #		|x|free(tmp);
0x7135:	mov rdi, rax                         
0x7138:	call 0x1eeae                         
0x713d:	mov qword ptr [rbp - 0x80], 0        #		tmp |=| NULL;
0x7145:	mov rax, qword ptr [rbp - 0x60]      #    while (|*|src)
0x7149:	movzx eax, byte ptr [rax]            
0x714c:	test al, al                          
0x714e:	jne 0x6831                           
0x7154:	mov rax, qword ptr [rbp - 0x68]      #    *d |=| 0;
0x7158:	mov byte ptr [rax], 0                
0x715b:	mov eax, dword ptr [rbp - 0x9c]      #    return 1 |+| i_flag;
0x7161:	add eax, 1                           
0x7164:	jmp 0x71d2                           
0x7166:	nop                                  #		    |g|oto bad_command;
0x7167:	jmp 0x7176                           
0x7169:	nop                                  #			|g|oto bad_command;
0x716a:	jmp 0x7176                           
0x716c:	nop                                  #			|g|oto bad_command;
0x716d:	jmp 0x7176                           
0x716f:	nop                                  #			|g|oto bad_command;
0x7170:	jmp 0x7176                           
0x7172:	nop                                  #			|g|oto bad_command;
0x7173:	jmp 0x7176                           
0x7175:	nop                                  #			|g|oto bad_command;
0x7176:	mov rax, qword ptr [rbp - 0xb0]      #    |x|free(*dest);
0x717d:	mov rax, qword ptr [rax]             
0x7180:	mov rdi, rax                         
0x7183:	call 0x1eeae                         
0x7188:	mov rax, qword ptr [rbp - 0xb0]      #    *dest |=| NULL;
0x718f:	mov qword ptr [rax], 0               
0x7196:	mov eax, 0                           #    return |0|;
0x719b:	jmp 0x71d2                           
0x719d:	nop                                  #			|g|oto strings_dont_match;
0x719e:	jmp 0x71aa                           
0x71a0:	nop                                  #			    |g|oto strings_dont_match;
0x71a1:	jmp 0x71aa                           
0x71a3:	nop                                  #			|g|oto strings_dont_match;
0x71a4:	jmp 0x71aa                           
0x71a6:	nop                                  #			|g|oto strings_dont_match;
0x71a7:	jmp 0x71aa                           
0x71a9:	nop                                  #			|g|oto strings_dont_match;
0x71aa:	mov rax, qword ptr [rbp - 0x80]      #    if (|t|mp)
0x71ae:	test rax, rax                        #    if |(|tmp)
0x71b1:	je 0x71bf                            
0x71b3:	mov rax, qword ptr [rbp - 0x80]      #	|x|free(tmp);
0x71b7:	mov rdi, rax                         
0x71ba:	call 0x1eeae                         
0x71bf:	mov rax, qword ptr [rbp - 0xb0]      #    *dest |=| NULL;
0x71c6:	mov qword ptr [rax], 0               
0x71cd:	mov eax, 0xffffffff                  #    return |-|1;
0x71d2:	mov rdx, qword ptr [rbp - 0x18]      #|}|
0x71d6:	sub rdx, qword ptr fs:[0x28]         
0x71df:	je 0x71e6                            
0x71e1:	call 0x4980                          #|}|
0x71e6:	mov rbx, qword ptr [rbp - 8]         
0x71ea:	leave                                
0x71eb:	ret                                  
0x71ec:	endbr64                              #|{|
0x71f0:	push rbp                             
0x71f1:	mov rbp, rsp                         
0x71f4:	sub rsp, 0x30                        
0x71f8:	mov qword ptr [rbp - 0x18], rdi      
0x71fc:	mov qword ptr [rbp - 0x20], rsi      
0x7200:	mov qword ptr [rbp - 0x28], rdx      
0x7204:	mov rax, qword ptr [rbp - 0x18]      #    if (|g|etenv(variable) == NULL)
0x7208:	mov rdi, rax                         
0x720b:	call 0x47a0                          
0x7210:	test rax, rax                        #    if |(|getenv(variable) == NULL)
0x7213:	jne 0x725b                           
0x7215:	cmp qword ptr [rbp - 0x20], 0        #	if |(|alternate_variable && (alternate_value=getenv(alternate_variable)))
0x721a:	je 0x7248                            
0x721c:	mov rax, qword ptr [rbp - 0x20]      #	if (alternate_variable && (alternate_value=|g|etenv(alternate_variable)))
0x7220:	mov rdi, rax                         
0x7223:	call 0x47a0                          
0x7228:	mov qword ptr [rbp - 8], rax         
0x722c:	cmp qword ptr [rbp - 8], 0           #	if (alternate_variable |&|& (alternate_value=getenv(alternate_variable)))
0x7231:	je 0x7248                            
0x7233:	mov rdx, qword ptr [rbp - 8]         #	    |x|setenv(variable, alternate_value);
0x7237:	mov rax, qword ptr [rbp - 0x18]      
0x723b:	mov rsi, rdx                         
0x723e:	mov rdi, rax                         
0x7241:	call 0x1e50a                         
0x7246:	jmp 0x725b                           #|}|
0x7248:	mov rdx, qword ptr [rbp - 0x28]      #	    |x|setenv(variable, value);
0x724c:	mov rax, qword ptr [rbp - 0x18]      
0x7250:	mov rsi, rdx                         
0x7253:	mov rdi, rax                         
0x7256:	call 0x1e50a                         
0x725b:	nop                                  #|}|
0x725c:	leave                                
0x725d:	ret                                  
0x725e:	endbr64                              #|{|
0x7262:	push rbp                             
0x7263:	mov rbp, rsp                         
0x7266:	sub rsp, 0xc0                        
0x726d:	mov dword ptr [rbp - 0xb4], edi      
0x7273:	mov qword ptr [rbp - 0xc0], rsi      
0x727a:	mov rax, qword ptr fs:[0x28]         #|{|
0x7283:	mov qword ptr [rbp - 8], rax         
0x7287:	xor eax, eax                         
0x7289:	mov rax, qword ptr [rbp - 0xc0]      #    *errors |=| 0;
0x7290:	mov dword ptr [rax], 0               
0x7296:	mov eax, dword ptr [rbp - 0xb4]      #    for (i |=| keys; i < MAX_KEYS; i++)
0x729c:	mov dword ptr [rbp - 0xac], eax      
0x72a2:	jmp 0x763e                           #    |f|or (i = keys; i < MAX_KEYS; i++)
0x72a7:	lea rsi, [rbp - 0x90]                #	|c|onfiguration_getvarinfo(key_seq, contents,
0x72ae:	lea rax, [rbp - 0x60]                
0x72b2:	mov ecx, 0                           
0x72b7:	mov edx, 6                           
0x72bc:	mov rdi, rax                         
0x72bf:	call 0x1cf27                         
0x72c4:	movzx eax, byte ptr [rbp - 0x60]     #	if (|*|key_seq == '\0')
0x72c8:	test al, al                          #	if |(|*key_seq == '\0')
0x72ca:	je 0x7650                            
0x72d0:	movzx eax, byte ptr [rbp - 0x60]     #	if (|*|key_seq != '^')
0x72d4:	cmp al, 0x5e                         #	if |(|*key_seq != '^')
0x72d6:	je 0x7335                            
0x72d8:	lea rax, [rbp - 0x60]                #	    char *key_seq_ptr = |t|ty_get_symbol_key_seq(key_seq);
0x72dc:	mov rdi, rax                         
0x72df:	call 0xcf5e                          
0x72e4:	mov qword ptr [rbp - 0xa0], rax      
0x72eb:	cmp qword ptr [rbp - 0xa0], 0        #	    if |(|key_seq_ptr)
0x72f3:	je 0x7329                            
0x72f5:	mov rax, qword ptr [rbp - 0xa0]      #		if (|*|key_seq_ptr == '\0')
0x72fc:	movzx eax, byte ptr [rax]            
0x72ff:	test al, al                          #		if |(|*key_seq_ptr == '\0')
0x7301:	je 0x7636                            
0x7307:	mov rdx, qword ptr [rbp - 0xa0]      #		|s|trcpy(key_seq, key_seq_ptr);
0x730e:	lea rax, [rbp - 0x60]                
0x7312:	mov rsi, rdx                         
0x7315:	mov rdi, rax                         
0x7318:	call 0x4870                          
0x731d:	mov dword ptr [rbp - 0xa4], 0        #		need_conversion |=| 0;
0x7327:	jmp 0x733f                           
0x7329:	mov dword ptr [rbp - 0xa4], 1        #		need_conversion |=| 1;
0x7333:	jmp 0x733f                           
0x7335:	mov dword ptr [rbp - 0xa4], 1        #	    need_conversion |=| 1;
0x733f:	mov esi, 0x30                        #	command = (command_t *)|x|calloc(1, sizeof(command_t));
0x7344:	mov edi, 1                           
0x7349:	call 0x24720                         
0x734e:	mov qword ptr [rbp - 0x98], rax      
0x7355:	mov rax, qword ptr [rbp - 0x90]      #	if (contents|[|0])
0x735c:	test rax, rax                        #	if |(|contents[0])
0x735f:	je 0x739a                            
0x7361:	mov rax, qword ptr [rbp - 0x90]      #	    command->name = xstrdup(contents|[|0]);
0x7368:	mov rdi, rax                         #	    command->name = |x|strdup(contents[0]);
0x736b:	call 0x24780                         
0x7370:	mov rdx, qword ptr [rbp - 0x98]      #	    command->name |=| xstrdup(contents[0]);
0x7377:	mov qword ptr [rdx], rax             
0x737a:	mov edi, 8                           #	command->history = |x|stack_init(sizeof(char *));
0x737f:	call 0x1f30c                         
0x7384:	mov rdx, qword ptr [rbp - 0x98]      #	command->history |=| xstack_init(sizeof(char *));
0x738b:	mov qword ptr [rdx + 0x28], rax      
0x738f:	mov rax, qword ptr [rbp - 0x80]      #	if (contents|[|2])
0x7393:	test rax, rax                        #	if |(|contents[2])
0x7396:	je 0x73c5                            
0x7398:	jmp 0x73ae                           
0x739a:	mov rax, qword ptr [rbp - 0x98]      #	    |x|free(command);
0x73a1:	mov rdi, rax                         
0x73a4:	call 0x1eeae                         
0x73a9:	jmp 0x7637                           #	    |c|ontinue;
0x73ae:	mov rax, qword ptr [rbp - 0x80]      #	    command->new_dir = xstrdup(contents|[|2]);
0x73b2:	mov rdi, rax                         #	    command->new_dir = |x|strdup(contents[2]);
0x73b5:	call 0x24780                         
0x73ba:	mov rdx, qword ptr [rbp - 0x98]      #	    command->new_dir |=| xstrdup(contents[2]);
0x73c1:	mov qword ptr [rdx + 0x10], rax      
0x73c5:	mov rax, qword ptr [rbp - 0x88]      #	if (contents|[|1])
0x73cc:	test rax, rax                        #	if |(|contents[1])
0x73cf:	je 0x7482                            
0x73d5:	mov rax, qword ptr [rbp - 0x88]      #	    command->body = xstrdup(contents|[|1]);
0x73dc:	mov rdi, rax                         #	    command->body = |x|strdup(contents[1]);
0x73df:	call 0x24780                         
0x73e4:	mov rdx, qword ptr [rbp - 0x98]      #	    command->body |=| xstrdup(contents[1]);
0x73eb:	mov qword ptr [rdx + 8], rax         
0x73ef:	mov rax, qword ptr [rbp - 0x78]      #	if (contents|[|3])
0x73f3:	test rax, rax                        #	if |(|contents[3])
0x73f6:	je 0x741d                            
0x73f8:	mov rax, qword ptr [rbp - 0x78]      #	    command->save_screen = ((tolower((int)contents|[|3][0])=='y')?1:0);
0x73fc:	movzx eax, byte ptr [rax]            #	    command->save_screen = ((tolower((int)contents[3]|[|0])=='y')?1:0);
0x73ff:	movsx eax, al                        #	    command->save_screen = ((|t|olower((int)contents[3][0])=='y')?1:0);
0x7402:	mov edi, eax                         
0x7404:	call 0x4be0                          
0x7409:	cmp eax, 0x79                        #	    command->save_screen = ((tolower((int)contents[3][0])=='y')?1|:|0);
0x740c:	sete al                              
0x740f:	mov edx, eax                         
0x7411:	mov rax, qword ptr [rbp - 0x98]      #	    command->save_screen |=| ((tolower((int)contents[3][0])=='y')?1:0);
0x7418:	mov byte ptr [rax + 0x18], dl        
0x741b:	jmp 0x7428                           
0x741d:	mov rax, qword ptr [rbp - 0x98]      #	    command->save_screen |=| 1;
0x7424:	mov byte ptr [rax + 0x18], 1         
0x7428:	mov rax, qword ptr [rbp - 0x70]      #	if (contents|[|4])
0x742c:	test rax, rax                        #	if |(|contents[4])
0x742f:	je 0x7454                            
0x7431:	mov rax, qword ptr [rbp - 0x70]      #	    command->pause = ((tolower((int)contents|[|4][0])=='y')?1:0);
0x7435:	movzx eax, byte ptr [rax]            #	    command->pause = ((tolower((int)contents[4]|[|0])=='y')?1:0);
0x7438:	movsx eax, al                        #	    command->pause = ((|t|olower((int)contents[4][0])=='y')?1:0);
0x743b:	mov edi, eax                         
0x743d:	call 0x4be0                          
0x7442:	cmp eax, 0x79                        #	    command->pause = ((tolower((int)contents[4][0])=='y')?1|:|0);
0x7445:	sete al                              
0x7448:	mov edx, eax                         
0x744a:	mov rax, qword ptr [rbp - 0x98]      #	    command->pause |=| ((tolower((int)contents[4][0])=='y')?1:0);
0x7451:	mov byte ptr [rax + 0x19], dl        
0x7454:	mov rax, qword ptr [rbp - 0x68]      #	if (contents|[|5])
0x7458:	test rax, rax                        #	if |(|contents[5])
0x745b:	je 0x7485                            
0x745d:	mov rax, qword ptr [rbp - 0x68]      #	    command->hide = ((tolower((int)contents|[|5][0])=='y')?1:0);
0x7461:	movzx eax, byte ptr [rax]            #	    command->hide = ((tolower((int)contents[5]|[|0])=='y')?1:0);
0x7464:	movsx eax, al                        #	    command->hide = ((|t|olower((int)contents[5][0])=='y')?1:0);
0x7467:	mov edi, eax                         
0x7469:	call 0x4be0                          
0x746e:	cmp eax, 0x79                        #	    command->hide = ((tolower((int)contents[5][0])=='y')?1|:|0);
0x7471:	sete al                              
0x7474:	mov edx, eax                         
0x7476:	mov rax, qword ptr [rbp - 0x98]      #	    command->hide |=| ((tolower((int)contents[5][0])=='y')?1:0);
0x747d:	mov byte ptr [rax + 0x1a], dl        
0x7480:	jmp 0x7486                           
0x7482:	nop                                  #	    |g|oto insert;
0x7483:	jmp 0x7486                           
0x7485:	nop                                  #      |i|nsert:
0x7486:	call 0x4ec0                          #	if (|i|slower((int)command->name[0]))
0x748b:	mov rdx, qword ptr [rax]             
0x748e:	mov rax, qword ptr [rbp - 0x98]      
0x7495:	mov rax, qword ptr [rax]             
0x7498:	movzx eax, byte ptr [rax]            
0x749b:	movsx rax, al                        
0x749f:	add rax, rax                         
0x74a2:	add rax, rdx                         
0x74a5:	movzx eax, word ptr [rax]            
0x74a8:	movzx eax, ax                        
0x74ab:	and eax, 0x200                       
0x74b0:	test eax, eax                        #	if |(|islower((int)command->name[0]))
0x74b2:	je 0x7565                            
0x74b8:	mov dword ptr [rbp - 0xa8], 0        #	    for (j |=| 0; j < BUILTIN_OPERATIONS; j++)
0x74c2:	jmp 0x7558                           #	    |f|or (j = 0; j < BUILTIN_OPERATIONS; j++)
0x74c7:	mov eax, dword ptr [rbp - 0xa8]      #		if (strcmp(command->name, builtin|[|j]) == 0)
0x74cd:	movsxd rdx, eax                      
0x74d0:	mov rax, rdx                         
0x74d3:	shl rax, 3                           
0x74d7:	add rax, rdx                         
0x74da:	shl rax, 2                           
0x74de:	sub rax, rdx                         
0x74e1:	lea rdx, [rip + 0x27bb8]             
0x74e8:	add rdx, rax                         
0x74eb:	mov rax, qword ptr [rbp - 0x98]      #		if (strcmp(command|-|>name, builtin[j]) == 0)
0x74f2:	mov rax, qword ptr [rax]             
0x74f5:	mov rsi, rdx                         #		if (|s|trcmp(command->name, builtin[j]) == 0)
0x74f8:	mov rdi, rax                         
0x74fb:	call 0x4af0                          
0x7500:	test eax, eax                        #		if |(|strcmp(command->name, builtin[j]) == 0)
0x7502:	jne 0x7551                           
0x7504:	mov rax, qword ptr [rbp - 0x98]      #		    xfree(command|-|>name);
0x750b:	mov rax, qword ptr [rax]             
0x750e:	mov rdi, rax                         #		    |x|free(command->name);
0x7511:	call 0x1eeae                         
0x7516:	mov eax, dword ptr [rbp - 0xa8]      #		    command->name = |b|uiltin[j];
0x751c:	movsxd rdx, eax                      
0x751f:	mov rax, rdx                         
0x7522:	shl rax, 3                           
0x7526:	add rax, rdx                         
0x7529:	shl rax, 2                           
0x752d:	sub rax, rdx                         
0x7530:	lea rdx, [rip + 0x27b69]             
0x7537:	add rdx, rax                         
0x753a:	mov rax, qword ptr [rbp - 0x98]      #		    command->name |=| builtin[j];
0x7541:	mov qword ptr [rax], rdx             
0x7544:	mov rax, qword ptr [rbp - 0x98]      #		    command->builtin |=| 1;
0x754b:	mov byte ptr [rax + 0x1b], 1         
0x754f:	jmp 0x7565                           #		    |b|reak;
0x7551:	add dword ptr [rbp - 0xa8], 1        #	    for (j = 0; j < BUILTIN_OPERATIONS; j|+|+)
0x7558:	cmp dword ptr [rbp - 0xa8], 0x56     #	    for (j = 0; j |<| BUILTIN_OPERATIONS; j++)
0x755f:	jle 0x74c7                           
0x7565:	lea rax, [rbp - 0x60]                #	command->sequence = |x|strdup(key_seq);
0x7569:	mov rdi, rax                         
0x756c:	call 0x24780                         
0x7571:	mov rdx, qword ptr [rbp - 0x98]      #	command->sequence |=| xstrdup(key_seq);
0x7578:	mov qword ptr [rdx + 0x20], rax      
0x757c:	mov rax, qword ptr [rbp - 0x98]      #	if (command|-|>builtin || command->body || command->new_dir)
0x7583:	movzx eax, byte ptr [rax + 0x1b]     
0x7587:	test al, al                          #	if |(|command->builtin || command->body || command->new_dir)
0x7589:	jne 0x75af                           
0x758b:	mov rax, qword ptr [rbp - 0x98]      #	if (command->builtin || command|-|>body || command->new_dir)
0x7592:	mov rax, qword ptr [rax + 8]         
0x7596:	test rax, rax                        #	if (command->builtin |||| command->body || command->new_dir)
0x7599:	jne 0x75af                           
0x759b:	mov rax, qword ptr [rbp - 0x98]      #	if (command->builtin || command->body || command|-|>new_dir)
0x75a2:	mov rax, qword ptr [rax + 0x10]      
0x75a6:	test rax, rax                        #	if (command->builtin || command->body |||| command->new_dir)
0x75a9:	je 0x7637                            
0x75af:	cmp dword ptr [rbp - 0xa4], 0        #	    if |(|need_conversion)
0x75b6:	je 0x761e                            
0x75b8:	lea rax, [rbp - 0x60]                #		if (|t|ty_key_human2machine((unsigned char *)key_seq))
0x75bc:	mov rdi, rax                         
0x75bf:	call 0xb1b7                          
0x75c4:	test rax, rax                        #		if |(|tty_key_human2machine((unsigned char *)key_seq))
0x75c7:	je 0x75e1                            
0x75c9:	mov rdx, qword ptr [rbp - 0x98]      #		    |t|ty_key_list_insert((unsigned char *)key_seq,
0x75d0:	lea rax, [rbp - 0x60]                
0x75d4:	mov rsi, rdx                         
0x75d7:	mov rdi, rax                         
0x75da:	call 0xc285                          
0x75df:	jmp 0x7637                           
0x75e1:	mov rdx, qword ptr [rip + 0x292f0]   #		    |f|printf(stderr, "%s: warning: invalid key sequence '%s'\n",
0x75e8:	mov rax, qword ptr [rip + 0x292d1]   
0x75ef:	lea rcx, [rbp - 0x60]                
0x75f3:	lea rsi, [rip + 0x1fbbe]             
0x75fa:	mov rdi, rax                         
0x75fd:	mov eax, 0                           
0x7602:	call 0x4b40                          
0x7607:	mov rax, qword ptr [rbp - 0xc0]      #		    (|*|errors)++;
0x760e:	mov eax, dword ptr [rax]             
0x7610:	lea edx, [rax + 1]                   #		    (*errors)|+|+;
0x7613:	mov rax, qword ptr [rbp - 0xc0]      
0x761a:	mov dword ptr [rax], edx             
0x761c:	jmp 0x7637                           
0x761e:	mov rdx, qword ptr [rbp - 0x98]      #		|t|ty_key_list_insert((unsigned char *)key_seq, (void *)command);
0x7625:	lea rax, [rbp - 0x60]                
0x7629:	mov rsi, rdx                         
0x762c:	mov rdi, rax                         
0x762f:	call 0xc285                          
0x7634:	jmp 0x7637                           
0x7636:	nop                                  #		    |c|ontinue;
0x7637:	add dword ptr [rbp - 0xac], 1        #    for (i = keys; i < MAX_KEYS; i|+|+)
0x763e:	cmp dword ptr [rbp - 0xac], 0x7ff    #    for (i = keys; i |<| MAX_KEYS; i++)
0x7648:	jle 0x72a7                           
0x764e:	jmp 0x7651                           
0x7650:	nop                                  #	    |b|reak;
0x7651:	mov eax, dword ptr [rbp - 0xac]      #    return |i|;
0x7657:	mov rdx, qword ptr [rbp - 8]         #|}|
0x765b:	sub rdx, qword ptr fs:[0x28]         
0x7664:	je 0x766b                            
0x7666:	call 0x4980                          
0x766b:	leave                                
0x766c:	ret                                  
0x766d:	endbr64                              #|{|
0x7671:	push rbp                             
0x7672:	mov rbp, rsp                         
0x7675:	mov edi, 0                           #    |t|ty_set_mode(TTY_CANONIC);
0x767a:	call 0xadac                          
0x767f:	mov eax, 0                           #    |t|ty_defaults();
0x7684:	call 0xc083                          
0x7689:	mov rax, qword ptr [rip + 0x29268]   #    |t|ty_put_screen(screen);
0x7690:	mov rdi, rax                         
0x7693:	call 0xce57                          
0x7698:	nop                                  #|}|
0x7699:	pop rbp                              
0x769a:	ret                                  
0x769b:	endbr64                              #|{|
0x769f:	push rbp                             
0x76a0:	mov rbp, rsp                         
0x76a3:	push rbx                             
0x76a4:	sub rsp, 0x48                        
0x76a8:	mov rax, qword ptr fs:[0x28]         #|{|
0x76b1:	mov qword ptr [rbp - 0x18], rax      
0x76b5:	xor eax, eax                         
0x76b7:	lea rax, [rip + 0x279bd]             #					      MAX_STATIC_SIZE-|s|trlen(PS1)+1),
0x76be:	mov rdi, rax                         
0x76c1:	call 0x4960                          
0x76c6:	mov edx, eax                         #					      MAX_STATIC_SIZE-strlen(PS1)|+|1),
0x76c8:	mov eax, 0x33                        
0x76cd:	sub eax, edx                         
0x76cf:	mov ebx, eax                         #    |i|l_set_static_text(strcat(truncate_string(panel_get_path(src_panel), temp,
0x76d1:	mov rax, qword ptr [rip + 0x29238]   
0x76d8:	mov rdi, rax                         
0x76db:	call 0x1504f                         
0x76e0:	mov rcx, rax                         
0x76e3:	lea rax, [rbp - 0x50]                
0x76e7:	mov edx, ebx                         
0x76e9:	mov rsi, rax                         
0x76ec:	mov rdi, rcx                         
0x76ef:	call 0x1e3f1                         
0x76f4:	mov rdx, rax                         
0x76f7:	lea rax, [rip + 0x2797d]             
0x76fe:	mov rsi, rax                         
0x7701:	mov rdi, rdx                         
0x7704:	call 0x4db0                          
0x7709:	mov rdi, rax                         
0x770c:	call 0xf285                          
0x7711:	nop                                  #|}|
0x7712:	mov rax, qword ptr [rbp - 0x18]      
0x7716:	sub rax, qword ptr fs:[0x28]         
0x771f:	je 0x7726                            
0x7721:	call 0x4980                          
0x7726:	mov rbx, qword ptr [rbp - 8]         
0x772a:	leave                                
0x772b:	ret                                  
0x772c:	endbr64                              #|{|
0x7730:	push rbp                             
0x7731:	mov rbp, rsp                         
0x7734:	mov rdx, qword ptr [rip + 0x291d5]   #    |p|anel_action(dst_panel, act_REGET, src_panel, (void *)-1, 1);
0x773b:	mov rax, qword ptr [rip + 0x291d6]   
0x7742:	mov r8d, 1                           
0x7748:	mov rcx, -1                          
0x774f:	mov esi, 0x22                        
0x7754:	mov rdi, rax                         
0x7757:	call 0x1a89a                         
0x775c:	mov rdx, qword ptr [rip + 0x291b5]   #    |p|anel_action(src_panel, act_REGET, dst_panel, (void *)-1, 1);
0x7763:	mov rax, qword ptr [rip + 0x291a6]   
0x776a:	mov r8d, 1                           
0x7770:	mov rcx, -1                          
0x7777:	mov esi, 0x22                        
0x777c:	mov rdi, rax                         
0x777f:	call 0x1a89a                         
0x7784:	nop                                  #|}|
0x7785:	pop rbp                              
0x7786:	ret                                  
0x7787:	endbr64                              #|{|
0x778b:	push rbp                             
0x778c:	mov rbp, rsp                         
0x778f:	mov rax, qword ptr [rip + 0x29142]   #    |p|rintf("usage: %s [-hvcblp] [path1] [path2]\n", g_program);
0x7796:	mov rsi, rax                         
0x7799:	lea rax, [rip + 0x1fa40]             
0x77a0:	mov rdi, rax                         
0x77a3:	mov eax, 0                           
0x77a8:	call 0x49c0                          
0x77ad:	lea rax, [rip + 0x1fa54]             #    |p|rintf(" -h         print this help message\n");
0x77b4:	mov rdi, rax                         
0x77b7:	call 0x48a0                          
0x77bc:	lea rax, [rip + 0x1fa6d]             #    |p|rintf(" -v         print the version number\n");
0x77c3:	mov rdi, rax                         
0x77c6:	call 0x48a0                          
0x77cb:	lea rax, [rip + 0x1fa83]             #    |p|rintf(" -c         use ANSI colors\n");
0x77d2:	mov rdi, rax                         
0x77d5:	call 0x48a0                          
0x77da:	lea rax, [rip + 0x1fa97]             #    |p|rintf(" -b         don't use ANSI colors\n");
0x77e1:	mov rdi, rax                         
0x77e4:	call 0x48a0                          
0x77e9:	lea rax, [rip + 0x1fab0]             #    |p|rintf(" -l         don't use the last screen character\n");
0x77f0:	mov rdi, rax                         
0x77f3:	call 0x48a0                          
0x77f8:	lea rax, [rip + 0x1fad1]             #    |p|rintf(" -p         output final path at exit\n");
0x77ff:	mov rdi, rax                         
0x7802:	call 0x48a0                          
0x7807:	nop                                  #|}|
0x7808:	pop rbp                              
0x7809:	ret                                  
0x780a:	endbr64                              #|{|
0x780e:	push rbp                             
0x780f:	mov rbp, rsp                         
0x7812:	push rbx                             
0x7813:	sub rsp, 0x168                       
0x781a:	mov dword ptr [rbp - 0x164], edi     
0x7820:	mov qword ptr [rbp - 0x170], rsi     
0x7827:	mov rax, qword ptr fs:[0x28]         #|{|
0x7830:	mov qword ptr [rbp - 0x18], rax      
0x7834:	xor eax, eax                         
0x7836:	mov qword ptr [rbp - 0xd0], 0        #    size_t |l|en = 0, ptrlen;
0x7841:	mov dword ptr [rbp - 0x140], 0       #    int |o|utput_final_path = OFF;
0x784b:	mov qword ptr [rbp - 0xc0], 0        #    input_line_t *|s|aved_il = NULL;
0x7856:	mov dword ptr [rbp - 0x134], 0xffffffff#    int c, |a|nsi_colors = -1, use_last_screen_character = ON;
0x7860:	mov dword ptr [rbp - 0x130], 1       #    int c, ansi_colors = -1, |u|se_last_screen_character = ON;
0x786a:	mov dword ptr [rbp - 0x128], 0       #    int entry, key, |a|pp_end = 0, first_time = 1, errors = 0;
0x7874:	mov dword ptr [rbp - 0x124], 1       #    int entry, key, app_end = 0, |f|irst_time = 1, errors = 0;
0x787e:	mov dword ptr [rbp - 0x14c], 0       #    int entry, key, app_end = 0, first_time = 1, |e|rrors = 0;
0x7888:	mov qword ptr [rbp - 0xe0], 0        #    char *|c|mdln = NULL, *input = NULL, *ptr, *srcptr, *search_string = NULL;
0x7893:	mov qword ptr [rbp - 0xd8], 0        #    char *cmdln = NULL, *|i|nput = NULL, *ptr, *srcptr, *search_string = NULL;
0x789e:	mov qword ptr [rbp - 0x90], 0        #    char *cmdln = NULL, *input = NULL, *ptr, *srcptr, *|s|earch_string = NULL;
0x78a9:	mov eax, 0                           #    |s|ignals_init();
0x78ae:	call 0x1edeb                         
0x78b3:	lea rax, [rip + 0x1f8a9]             #    |s|etlocale(LC_ALL,"");
0x78ba:	mov rsi, rax                         
0x78bd:	mov edi, 6                           
0x78c2:	call 0x4cc0                          
0x78c7:	mov rax, qword ptr [rbp - 0x170]     #    g_program = argv|[|0];
0x78ce:	mov rax, qword ptr [rax]             
0x78d1:	mov qword ptr [rip + 0x29000], rax   #    g_program |=| argv[0];
0x78d8:	lea rax, [rip + 0x1fa17]             #    g_home = |g|etenv("HOME");
0x78df:	mov rdi, rax                         
0x78e2:	call 0x47a0                          
0x78e7:	mov qword ptr [rip + 0x28fe2], rax   #    g_home |=| getenv("HOME");
0x78ee:	mov rax, qword ptr [rip + 0x28fdb]   #    if (g_home |=|= NULL)
0x78f5:	test rax, rax                        #    if |(|g_home == NULL)
0x78f8:	jne 0x7908                           
0x78fa:	lea rax, [rip + 0x1f9fa]             #	g_home |=| ".";
0x7901:	mov qword ptr [rip + 0x28fc8], rax   
0x7908:	mov eax, 0                           #    |c|ompute_directories();
0x790d:	call 0x1d3ac                         
0x7912:	mov eax, 0                           #    |u|pdate_path();
0x7917:	call 0x1d461                         
0x791c:	mov eax, 0                           #    |g|et_login_name();
0x7921:	call 0x1e219                         
0x7926:	mov edi, 0x25                        #    exit_msg = |x|malloc(strlen(PRODUCT) + 16);
0x792b:	call 0x24650                         
0x7930:	mov qword ptr [rip + 0x28fb9], rax   #    exit_msg |=| xmalloc(strlen(PRODUCT) + 16);
0x7937:	mov rax, qword ptr [rip + 0x28fb2]   #    |s|printf(exit_msg, "Exit %s? ", PRODUCT);
0x793e:	lea rdx, [rip + 0x1f9b8]             
0x7945:	lea rcx, [rip + 0x1f9c7]             
0x794c:	mov rsi, rcx                         
0x794f:	mov rdi, rax                         
0x7952:	mov eax, 0                           
0x7957:	call 0x4dd0                          
0x795c:	lea rax, [rip + 0x1f9ba]             #    if (|g|etenv("COLORTERM") != NULL)
0x7963:	mov rdi, rax                         
0x7966:	call 0x47a0                          
0x796b:	test rax, rax                        #    if |(|getenv("COLORTERM") != NULL)
0x796e:	je 0x7a67                            
0x7974:	mov dword ptr [rbp - 0x134], 1       #	ansi_colors |=| ON;
0x797e:	jmp 0x7a67                           #    while |(|(c = getopt(argc, argv, "hvcblp")) != -1)
0x7983:	mov eax, dword ptr [rbp - 0x118]     #	|s|witch (c)
0x7989:	sub eax, 0x3f                        
0x798c:	cmp eax, 0x37                        
0x798f:	ja 0x7a38                            
0x7995:	mov eax, eax                         
0x7997:	lea rdx, [rax*4]                     
0x799f:	lea rax, [rip + 0x1ff52]             
0x79a6:	mov eax, dword ptr [rdx + rax]       
0x79a9:	cdqe                                 
0x79ab:	lea rdx, [rip + 0x1ff46]             
0x79b2:	add rax, rdx                         
0x79b5:	jmp rax                              
0x79b8:	mov eax, 0                           #		|u|sage();
0x79bd:	call 0x7787                          
0x79c2:	mov eax, 0                           #		return |0|;
0x79c7:	jmp 0xad7b                           
0x79cc:	lea rax, [rip + 0x1f78a]             #		|p|rintf("%s %s\n", PRODUCT, VERSION);
0x79d3:	mov rdx, rax                         
0x79d6:	lea rax, [rip + 0x1f920]             
0x79dd:	mov rsi, rax                         
0x79e0:	lea rax, [rip + 0x1f940]             
0x79e7:	mov rdi, rax                         
0x79ea:	mov eax, 0                           
0x79ef:	call 0x49c0                          
0x79f4:	mov eax, 0                           #		return |0|;
0x79f9:	jmp 0xad7b                           
0x79fe:	mov dword ptr [rbp - 0x134], 1       #		ansi_colors |=| ON;
0x7a08:	jmp 0x7a67                           #		|b|reak;
0x7a0a:	mov dword ptr [rbp - 0x134], 0       #		ansi_colors |=| OFF;
0x7a14:	jmp 0x7a67                           #		|b|reak;
0x7a16:	mov dword ptr [rbp - 0x130], 0       #		use_last_screen_character |=| OFF;
0x7a20:	jmp 0x7a67                           #		|b|reak;
0x7a22:	mov dword ptr [rbp - 0x140], 1       #		output_final_path |=| ON;
0x7a2c:	jmp 0x7a67                           #		|b|reak;
0x7a2e:	mov eax, 1                           #		return |1|;
0x7a33:	jmp 0xad7b                           
0x7a38:	mov rdx, qword ptr [rip + 0x28e99]   #		|f|printf(stderr, "%s: unknown error\n", g_program);
0x7a3f:	mov rax, qword ptr [rip + 0x28e7a]   
0x7a46:	lea rcx, [rip + 0x1f8e1]             
0x7a4d:	mov rsi, rcx                         
0x7a50:	mov rdi, rax                         
0x7a53:	mov eax, 0                           
0x7a58:	call 0x4b40                          
0x7a5d:	mov eax, 1                           #		return |1|;
0x7a62:	jmp 0xad7b                           
0x7a67:	mov rcx, qword ptr [rbp - 0x170]     #    while ((c = |g|etopt(argc, argv, "hvcblp")) != -1)
0x7a6e:	mov eax, dword ptr [rbp - 0x164]     
0x7a74:	lea rdx, [rip + 0x1f8c6]             
0x7a7b:	mov rsi, rcx                         
0x7a7e:	mov edi, eax                         
0x7a80:	call 0x4d90                          
0x7a85:	mov dword ptr [rbp - 0x118], eax     
0x7a8b:	cmp dword ptr [rbp - 0x118], -1      #    while ((c = getopt(argc, argv, "hvcblp")) |!|= -1)
0x7a92:	jne 0x7983                           
0x7a98:	lea rax, [rip + 0x1f85c]             #    left_panel_path = right_panel_path |=| ".";
0x7a9f:	mov qword ptr [rbp - 0xa8], rax      
0x7aa6:	mov rax, qword ptr [rbp - 0xa8]      #    left_panel_path |=| right_panel_path = ".";
0x7aad:	mov qword ptr [rbp - 0xb0], rax      
0x7ab4:	mov eax, dword ptr [rip + 0x28dce]   #    if (optind |<| argc)
0x7aba:	cmp dword ptr [rbp - 0x164], eax     #    if |(|optind < argc)
0x7ac0:	jle 0x7b4e                           
0x7ac6:	mov eax, dword ptr [rip + 0x28dbc]   #	left_panel_path = xstrdup(argv[optind|+|+]);
0x7acc:	lea edx, [rax + 1]                   
0x7acf:	mov dword ptr [rip + 0x28db3], edx   
0x7ad5:	cdqe                                 
0x7ad7:	lea rdx, [rax*8]                     #	left_panel_path = xstrdup(argv|[|optind++]);
0x7adf:	mov rax, qword ptr [rbp - 0x170]     
0x7ae6:	add rax, rdx                         
0x7ae9:	mov rax, qword ptr [rax]             #	left_panel_path = |x|strdup(argv[optind++]);
0x7aec:	mov rdi, rax                         
0x7aef:	call 0x24780                         
0x7af4:	mov qword ptr [rbp - 0xb0], rax      
0x7afb:	mov eax, dword ptr [rip + 0x28d87]   #	if (optind |<| argc)
0x7b01:	cmp dword ptr [rbp - 0x164], eax     #	if |(|optind < argc)
0x7b07:	jle 0x7b40                           
0x7b09:	mov eax, dword ptr [rip + 0x28d79]   #	    right_panel_path = xstrdup(argv[optind|+|+]);
0x7b0f:	lea edx, [rax + 1]                   
0x7b12:	mov dword ptr [rip + 0x28d70], edx   
0x7b18:	cdqe                                 
0x7b1a:	lea rdx, [rax*8]                     #	    right_panel_path = xstrdup(argv|[|optind++]);
0x7b22:	mov rax, qword ptr [rbp - 0x170]     
0x7b29:	add rax, rdx                         
0x7b2c:	mov rax, qword ptr [rax]             #	    right_panel_path = |x|strdup(argv[optind++]);
0x7b2f:	mov rdi, rax                         
0x7b32:	call 0x24780                         
0x7b37:	mov qword ptr [rbp - 0xa8], rax      
0x7b3e:	jmp 0x7b4e                           
0x7b40:	mov rax, qword ptr [rbp - 0xb0]      #	    right_panel_path |=| left_panel_path;
0x7b47:	mov qword ptr [rbp - 0xa8], rax      
0x7b4e:	mov eax, dword ptr [rip + 0x28d34]   #    if (optind |<| argc)
0x7b54:	cmp dword ptr [rbp - 0x164], eax     #    if |(|optind < argc)
0x7b5a:	jle 0x7b81                           
0x7b5c:	mov rdx, qword ptr [rip + 0x28d75]   #	|f|printf(stderr, "%s: warning: invalid extra options ignored\n",
0x7b63:	mov rax, qword ptr [rip + 0x28d56]   
0x7b6a:	lea rcx, [rip + 0x1f7d7]             
0x7b71:	mov rsi, rcx                         
0x7b74:	mov rdi, rax                         
0x7b77:	mov eax, 0                           
0x7b7c:	call 0x4b40                          
0x7b81:	mov edi, 0xa                         #    |p|rintf("\n");
0x7b86:	call 0x47d0                          
0x7b8b:	lea r9, [rip + 0x1f7e2]              #    |p|rintf("%s %s (%s), %s %s\n",
0x7b92:	lea r8, [rip + 0x1f7e7]              
0x7b99:	lea rax, [rip + 0x1f7e9]             
0x7ba0:	mov rcx, rax                         
0x7ba3:	lea rax, [rip + 0x1f5b3]             
0x7baa:	mov rdx, rax                         
0x7bad:	lea rax, [rip + 0x1f749]             
0x7bb4:	mov rsi, rax                         
0x7bb7:	lea rax, [rip + 0x1f7e4]             
0x7bbe:	mov rdi, rax                         
0x7bc1:	mov eax, 0                           
0x7bc6:	call 0x49c0                          
0x7bcb:	mov rax, qword ptr [rip + 0x2743e]   #    |p|rintf(copyright);
0x7bd2:	mov rdi, rax                         
0x7bd5:	mov eax, 0                           
0x7bda:	call 0x49c0                          
0x7bdf:	lea rax, [rip + 0x1f7cf]             #    |a|dd_to_environment("GIT_EDITOR",  "EDITOR",     "vi");
0x7be6:	mov rdx, rax                         
0x7be9:	lea rax, [rip + 0x1f7c8]             
0x7bf0:	mov rsi, rax                         
0x7bf3:	lea rax, [rip + 0x1f7c5]             
0x7bfa:	mov rdi, rax                         
0x7bfd:	mov eax, 0                           
0x7c02:	call 0x71ec                          
0x7c07:	lea rax, [rip + 0x1f7bc]             #    |a|dd_to_environment("GIT_PAGER",   "PAGER",      "more");
0x7c0e:	mov rdx, rax                         
0x7c11:	lea rax, [rip + 0x1f7b7]             
0x7c18:	mov rsi, rax                         
0x7c1b:	lea rax, [rip + 0x1f7b3]             
0x7c22:	mov rdi, rax                         
0x7c25:	mov eax, 0                           
0x7c2a:	call 0x71ec                          
0x7c2f:	lea rax, [rip + 0x1f7a9]             #    |a|dd_to_environment("GIT_BROWSER", (char *)NULL, "lynx");
0x7c36:	mov rdx, rax                         
0x7c39:	mov esi, 0                           
0x7c3e:	lea rax, [rip + 0x1f79f]             
0x7c45:	mov rdi, rax                         
0x7c48:	mov eax, 0                           
0x7c4d:	call 0x71ec                          
0x7c52:	lea rax, [rip + 0x1f797]             #    |a|dd_to_environment("GIT_SHELL",   "SHELL",      "/bin/sh");
0x7c59:	mov rdx, rax                         
0x7c5c:	lea rax, [rip + 0x1f795]             
0x7c63:	mov rsi, rax                         
0x7c66:	lea rax, [rip + 0x1f791]             
0x7c6d:	mov rdi, rax                         
0x7c70:	mov eax, 0                           
0x7c75:	call 0x71ec                          
0x7c7a:	lea rax, [rip + 0x1f787]             #    |a|dd_to_environment("GIT_RMAIL",   (char *)NULL, "mail");
0x7c81:	mov rdx, rax                         
0x7c84:	mov esi, 0                           
0x7c89:	lea rax, [rip + 0x1f77d]             
0x7c90:	mov rdi, rax                         
0x7c93:	mov eax, 0                           
0x7c98:	call 0x71ec                          
0x7c9d:	lea rax, [rip + 0x1f773]             #    |a|dd_to_environment("GIT_VMSTAT",  (char *)NULL, "free");
0x7ca4:	mov rdx, rax                         
0x7ca7:	mov esi, 0                           
0x7cac:	lea rax, [rip + 0x1f769]             
0x7cb3:	mov rdi, rax                         
0x7cb6:	mov eax, 0                           
0x7cbb:	call 0x71ec                          
0x7cc0:	mov edi, 0                           #    |t|ty_init(TTY_RESTRICTED_INPUT);
0x7cc5:	call 0xd75b                          
0x7cca:	mov eax, 0                           #    |c|ommon_configuration_init();
0x7ccf:	call 0x1d81d                         
0x7cd4:	lea rax, [rip + 0x1f74c]             #    |u|se_section("[GITFM-FTI]");
0x7cdb:	mov rdi, rax                         
0x7cde:	call 0x1dbc4                         
0x7ce3:	mov eax, 0                           #    |g|et_file_type_info();
0x7ce8:	call 0x1e86b                         
0x7ced:	lea rax, [rip + 0x1f73f]             #    |u|se_section("[GITFM-Keys]");
0x7cf4:	mov rdi, rax                         
0x7cf7:	call 0x1dbc4                         
0x7cfc:	lea rax, [rbp - 0x14c]               #    keys = |r|ead_keys(0, &errors);
0x7d03:	mov rsi, rax                         
0x7d06:	mov edi, 0                           
0x7d0b:	mov eax, 0                           
0x7d10:	call 0x725e                          
0x7d15:	mov dword ptr [rbp - 0x114], eax     
0x7d1b:	mov edx, dword ptr [rip + 0x28bc7]   #    wait_msg |+|= errors;
0x7d21:	mov eax, dword ptr [rbp - 0x14c]     
0x7d27:	add eax, edx                         
0x7d29:	mov dword ptr [rip + 0x28bb9], eax   
0x7d2f:	mov eax, 0                           #    |c|onfiguration_end();
0x7d34:	call 0x1cd8b                         
0x7d39:	mov eax, 0                           #    wait_msg += (|s|pecific_configuration_init() == 0);
0x7d3e:	call 0x1d8e2                         
0x7d43:	test eax, eax                        #    wait_msg += (specific_configuration_init() |=|= 0);
0x7d45:	sete al                              
0x7d48:	movzx edx, al                        
0x7d4b:	mov eax, dword ptr [rip + 0x28b97]   #    wait_msg |+|= (specific_configuration_init() == 0);
0x7d51:	add eax, edx                         
0x7d53:	mov dword ptr [rip + 0x28b8f], eax   
0x7d59:	lea rax, [rip + 0x1f6e0]             #    temporary_directory = |g|etenv("TMPDIR");
0x7d60:	mov rdi, rax                         
0x7d63:	call 0x47a0                          
0x7d68:	mov qword ptr [rbp - 0xc8], rax      
0x7d6f:	cmp qword ptr [rbp - 0xc8], 0        #    if |(|temporary_directory == NULL)
0x7d77:	jne 0x7d87                           
0x7d79:	lea rax, [rip + 0x1f6c7]             #	temporary_directory |=| "/tmp";
0x7d80:	mov qword ptr [rbp - 0xc8], rax      
0x7d87:	mov rax, qword ptr [rbp - 0xc8]      #    stdout_log_name = xmalloc(32 + |s|trlen(temporary_directory) + 1);
0x7d8e:	mov rdi, rax                         
0x7d91:	call 0x4960                          
0x7d96:	add rax, 0x21                        #    stdout_log_name = |x|malloc(32 + strlen(temporary_directory) + 1);
0x7d9a:	mov rdi, rax                         
0x7d9d:	call 0x24650                         
0x7da2:	mov qword ptr [rip + 0x29d2f], rax   #    stdout_log_name |=| xmalloc(32 + strlen(temporary_directory) + 1);
0x7da9:	mov rax, qword ptr [rbp - 0xc8]      #    stderr_log_name = xmalloc(32 + |s|trlen(temporary_directory) + 1);
0x7db0:	mov rdi, rax                         
0x7db3:	call 0x4960                          
0x7db8:	add rax, 0x21                        #    stderr_log_name = |x|malloc(32 + strlen(temporary_directory) + 1);
0x7dbc:	mov rdi, rax                         
0x7dbf:	call 0x24650                         
0x7dc4:	mov qword ptr [rip + 0x29d15], rax   #    stderr_log_name |=| xmalloc(32 + strlen(temporary_directory) + 1);
0x7dcb:	mov edi, 0                           #    srand(|t|ime(NULL));
0x7dd0:	call 0x4ba0                          
0x7dd5:	mov edi, eax                         #    |s|rand(time(NULL));
0x7dd7:	call 0x4aa0                          
0x7ddc:	call 0x4eb0                          #    r1 = 1 + (int) (100000000.0 * |r|and() / (RAND_MAX + 1.0));
0x7de1:	pxor xmm1, xmm1                      #    r1 = 1 + (int) (100000000.0 |*| rand() / (RAND_MAX + 1.0));
0x7de5:	cvtsi2sd xmm1, eax                   
0x7de9:	movsd xmm0, qword ptr [rip + 0x1f8ff]
0x7df1:	mulsd xmm0, xmm1                     
0x7df5:	movsd xmm1, qword ptr [rip + 0x1f8fb]#    r1 = 1 + (int) (100000000.0 * rand() |/| (RAND_MAX + 1.0));
0x7dfd:	divsd xmm0, xmm1                     
0x7e01:	cvttsd2si eax, xmm0                  #    r1 = 1 + |(|int) (100000000.0 * rand() / (RAND_MAX + 1.0));
0x7e05:	add eax, 1                           #    r1 |=| 1 + (int) (100000000.0 * rand() / (RAND_MAX + 1.0));
0x7e08:	mov dword ptr [rbp - 0x110], eax     
0x7e0e:	call 0x4eb0                          #    r2 = 1 + (int) (100000000.0 * |r|and() / (RAND_MAX + 1.0));
0x7e13:	pxor xmm1, xmm1                      #    r2 = 1 + (int) (100000000.0 |*| rand() / (RAND_MAX + 1.0));
0x7e17:	cvtsi2sd xmm1, eax                   
0x7e1b:	movsd xmm0, qword ptr [rip + 0x1f8cd]
0x7e23:	mulsd xmm0, xmm1                     
0x7e27:	movsd xmm1, qword ptr [rip + 0x1f8c9]#    r2 = 1 + (int) (100000000.0 * rand() |/| (RAND_MAX + 1.0));
0x7e2f:	divsd xmm0, xmm1                     
0x7e33:	cvttsd2si eax, xmm0                  #    r2 = 1 + |(|int) (100000000.0 * rand() / (RAND_MAX + 1.0));
0x7e37:	add eax, 1                           #    r2 |=| 1 + (int) (100000000.0 * rand() / (RAND_MAX + 1.0));
0x7e3a:	mov dword ptr [rbp - 0x10c], eax     
0x7e40:	call 0x48f0                          #	    temporary_directory, (int)|g|etpid(), r1);
0x7e45:	mov ecx, eax                         
0x7e47:	mov rax, qword ptr [rip + 0x29c8a]   #    |s|printf(stdout_log_name, "%s/git.1.%d.%d",
0x7e4e:	mov esi, dword ptr [rbp - 0x110]     
0x7e54:	mov rdx, qword ptr [rbp - 0xc8]      
0x7e5b:	mov r8d, esi                         
0x7e5e:	lea rsi, [rip + 0x1f5e7]             
0x7e65:	mov rdi, rax                         
0x7e68:	mov eax, 0                           
0x7e6d:	call 0x4dd0                          
0x7e72:	call 0x48f0                          #	    temporary_directory, (int)|g|etpid(), r2);
0x7e77:	mov ecx, eax                         
0x7e79:	mov rax, qword ptr [rip + 0x29c60]   #    |s|printf(stderr_log_name, "%s/git.2.%d.%d",
0x7e80:	mov esi, dword ptr [rbp - 0x10c]     
0x7e86:	mov rdx, qword ptr [rbp - 0xc8]      
0x7e8d:	mov r8d, esi                         
0x7e90:	lea rsi, [rip + 0x1f5c4]             
0x7e97:	mov rdi, rax                         
0x7e9a:	mov eax, 0                           
0x7e9f:	call 0x4dd0                          
0x7ea4:	lea rax, [rip + 0x1f5bf]             #    |u|se_section("[Setup]");
0x7eab:	mov rdi, rax                         
0x7eae:	call 0x1dbc4                         
0x7eb3:	cmp dword ptr [rbp - 0x134], -1      #    if |(|ansi_colors == -1)
0x7eba:	jne 0x7ed8                           
0x7ebc:	mov esi, 0                           #	AnsiColors = |g|et_flag_var("AnsiColors", OFF);
0x7ec1:	lea rax, [rip + 0x1f5aa]             
0x7ec8:	mov rdi, rax                         
0x7ecb:	call 0x1de4c                         
0x7ed0:	mov dword ptr [rip + 0x27142], eax   #	AnsiColors |=| get_flag_var("AnsiColors", OFF);
0x7ed6:	jmp 0x7ee4                           
0x7ed8:	mov eax, dword ptr [rbp - 0x134]     #	AnsiColors |=| ansi_colors;
0x7ede:	mov dword ptr [rip + 0x27134], eax   
0x7ee4:	cmp dword ptr [rbp - 0x130], 0       #    if |(|use_last_screen_character)
0x7eeb:	je 0x7f09                            
0x7eed:	mov esi, 0                           #	UseLastScreenChar = |g|et_flag_var("UseLastScreenChar",  OFF);
0x7ef2:	lea rax, [rip + 0x1f584]             
0x7ef9:	mov rdi, rax                         
0x7efc:	call 0x1de4c                         
0x7f01:	mov dword ptr [rip + 0x289e5], eax   #	UseLastScreenChar |=| get_flag_var("UseLastScreenChar",  OFF);
0x7f07:	jmp 0x7f13                           
0x7f09:	mov dword ptr [rip + 0x289d9], 0     #	UseLastScreenChar |=| OFF;
0x7f13:	mov eax, dword ptr [rip + 0x289d3]   #    |t|ty_set_last_char_flag(UseLastScreenChar);
0x7f19:	mov edi, eax                         
0x7f1b:	call 0xad95                          
0x7f20:	lea rax, [rip + 0x1f568]             #    |u|se_section("[GITFM-Setup]");
0x7f27:	mov rdi, rax                         
0x7f2a:	call 0x1dbc4                         
0x7f2f:	mov eax, dword ptr [rip + 0x270e3]   #    if (AnsiColors |=|= ON)
0x7f35:	cmp eax, 1                           #    if |(|AnsiColors == ON)
0x7f38:	jne 0x7f56                           
0x7f3a:	mov esi, 1                           #	TypeSensitivity = |g|et_flag_var("TypeSensitivity", ON);
0x7f3f:	lea rax, [rip + 0x1f557]             
0x7f46:	mov rdi, rax                         
0x7f49:	call 0x1de4c                         
0x7f4e:	mov dword ptr [rip + 0x270c8], eax   #	TypeSensitivity |=| get_flag_var("TypeSensitivity", ON);
0x7f54:	jmp 0x7f60                           
0x7f56:	mov dword ptr [rip + 0x270bc], 0     #	TypeSensitivity |=| OFF;
0x7f60:	mov esi, 0                           #    ConfirmOnExit       = |g|et_flag_var("ConfirmOnExit", OFF);
0x7f65:	lea rax, [rip + 0x1f541]             
0x7f6c:	mov rdi, rax                         
0x7f6f:	call 0x1de4c                         
0x7f74:	mov dword ptr [rip + 0x289ae], eax   #    ConfirmOnExit       |=| get_flag_var("ConfirmOnExit", OFF);
0x7f7a:	lea rax, [rip + 0x1f1e2]             #    NormalModeHelp      = |g|et_string_var("NormalModeHelp", "");
0x7f81:	mov rsi, rax                         
0x7f84:	lea rax, [rip + 0x1f530]             
0x7f8b:	mov rdi, rax                         
0x7f8e:	call 0x1df1e                         
0x7f93:	mov qword ptr [rip + 0x270e6], rax   #    NormalModeHelp      |=| get_string_var("NormalModeHelp", "");
0x7f9a:	lea rax, [rip + 0x1f1c2]             #    CommandLineModeHelp = |g|et_string_var("CommandLineModeHelp", "");
0x7fa1:	mov rsi, rax                         
0x7fa4:	lea rax, [rip + 0x1f51f]             
0x7fab:	mov rdi, rax                         
0x7fae:	call 0x1df1e                         
0x7fb3:	mov qword ptr [rip + 0x270ce], rax   #    CommandLineModeHelp |=| get_string_var("CommandLineModeHelp", "");
0x7fba:	mov eax, dword ptr [rip + 0x27058]   #    use_section(AnsiColors |?| color_section : monochrome_section);
0x7fc0:	test eax, eax                        #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x7fc2:	je 0x7fcd                            
0x7fc4:	lea rax, [rip + 0x27065]             #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x7fcb:	jmp 0x7fd4                           
0x7fcd:	lea rax, [rip + 0x2706c]             #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x7fd4:	mov rdi, rax                         #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x7fd7:	call 0x1dbc4                         
0x7fdc:	mov edx, 8                           #    |g|et_colorset_var(TitleColors, TitleFields, TITLE_FIELDS);
0x7fe1:	lea rax, [rip + 0x28698]             
0x7fe8:	mov rsi, rax                         
0x7feb:	lea rax, [rip + 0x286ce]             
0x7ff2:	mov rdi, rax                         
0x7ff5:	call 0x1df8c                         
0x7ffa:	lea rax, [rip + 0x1f426]             #    |u|se_section("[GITFM-FTI]");
0x8001:	mov rdi, rax                         
0x8004:	call 0x1dbc4                         
0x8009:	mov eax, 0                           #    |g|et_file_type_info();
0x800e:	call 0x1e86b                         
0x8013:	lea rax, [rip + 0x1f419]             #    |u|se_section("[GITFM-Keys]");
0x801a:	mov rdi, rax                         
0x801d:	call 0x1dbc4                         
0x8022:	lea rdx, [rbp - 0x14c]               #    keys = |r|ead_keys(keys, &errors);
0x8029:	mov eax, dword ptr [rbp - 0x114]     
0x802f:	mov rsi, rdx                         
0x8032:	mov edi, eax                         
0x8034:	mov eax, 0                           
0x8039:	call 0x725e                          
0x803e:	mov dword ptr [rbp - 0x114], eax     
0x8044:	mov edx, dword ptr [rip + 0x2889e]   #    wait_msg |+|= errors;
0x804a:	mov eax, dword ptr [rbp - 0x14c]     
0x8050:	add eax, edx                         
0x8052:	mov dword ptr [rip + 0x28890], eax   
0x8058:	cmp dword ptr [rbp - 0x114], 0x800   #    if |(|keys == MAX_KEYS)
0x8062:	jne 0x808b                           
0x8064:	mov rdx, qword ptr [rip + 0x2886d]   #	|f|printf(stderr, "%s: too many key sequences; only %d are allowed.\n",
0x806b:	mov rax, qword ptr [rip + 0x2884e]   
0x8072:	mov ecx, 0x800                       
0x8077:	lea rsi, [rip + 0x1f462]             
0x807e:	mov rdi, rax                         
0x8081:	mov eax, 0                           
0x8086:	call 0x4b40                          
0x808b:	call 0x4990                          #    if (|g|etuid() == 0)
0x8090:	test eax, eax                        #    if |(|getuid() == 0)
0x8092:	jne 0x809b                           
0x8094:	mov byte ptr [rip + 0x26fe1], 0x23   #	PS1[1] |=| '#';
0x809b:	mov eax, 0                           #    current_path = |x|getcwd();
0x80a0:	call 0x1f18e                         
0x80a5:	mov qword ptr [rbp - 0x88], rax      
0x80ac:	cmp qword ptr [rbp - 0x88], 0        #    if |(|current_path == NULL)
0x80b4:	jne 0x80ca                           
0x80b6:	lea rax, [rip + 0x1f45b]             #	|f|atal("`getcwd' failed: permission denied");
0x80bd:	mov rdi, rax                         
0x80c0:	mov eax, 0                           
0x80c5:	call 0x672c                          
0x80ca:	mov eax, 0                           #    |t|ty_start_cursorapp();
0x80cf:	call 0xb0cc                          
0x80d4:	mov eax, 0                           #    |t|itle_init();
0x80d9:	call 0x1c39d                         
0x80de:	mov eax, 0                           #    |i|l_init();
0x80e3:	call 0xdfbe                          
0x80e8:	mov rax, qword ptr [rip + 0x26f91]   #    |s|tatus_init(NormalModeHelp);
0x80ef:	mov rdi, rax                         
0x80f2:	call 0x100a3                         
0x80f7:	mov rax, qword ptr [rbp - 0xb0]      #    if (left_panel_path|[|0] == '/')
0x80fe:	movzx eax, byte ptr [rax]            
0x8101:	cmp al, 0x2f                         #    if |(|left_panel_path[0] == '/')
0x8103:	jne 0x811d                           
0x8105:	mov rax, qword ptr [rbp - 0xb0]      #	panel_path = |x|strdup(left_panel_path);
0x810c:	mov rdi, rax                         
0x810f:	call 0x24780                         
0x8114:	mov qword ptr [rbp - 0xb8], rax      
0x811b:	jmp 0x817d                           
0x811d:	mov rax, qword ptr [rbp - 0x88]      #	panel_path = xmalloc(|s|trlen(current_path) + 1 +
0x8124:	mov rdi, rax                         
0x8127:	call 0x4960                          
0x812c:	mov rbx, rax                         
0x812f:	mov rax, qword ptr [rbp - 0xb0]      #			     |s|trlen(left_panel_path) + 1);
0x8136:	mov rdi, rax                         
0x8139:	call 0x4960                          
0x813e:	add rax, rbx                         #	panel_path = xmalloc(strlen(current_path) + 1 |+|
0x8141:	add rax, 2                           #	panel_path = |x|malloc(strlen(current_path) + 1 +
0x8145:	mov rdi, rax                         
0x8148:	call 0x24650                         
0x814d:	mov qword ptr [rbp - 0xb8], rax      
0x8154:	mov rcx, qword ptr [rbp - 0xb0]      #	|s|printf(panel_path, "%s/%s", current_path, left_panel_path);
0x815b:	mov rdx, qword ptr [rbp - 0x88]      
0x8162:	mov rax, qword ptr [rbp - 0xb8]      
0x8169:	lea rsi, [rip + 0x1f3cb]             
0x8170:	mov rdi, rax                         
0x8173:	mov eax, 0                           
0x8178:	call 0x4dd0                          
0x817d:	mov rax, qword ptr [rbp - 0xb8]      #    left_panel = |p|anel_init(panel_path);
0x8184:	mov rdi, rax                         
0x8187:	call 0x108b4                         
0x818c:	mov qword ptr [rip + 0x2876d], rax   #    left_panel |=| panel_init(panel_path);
0x8193:	mov rax, qword ptr [rbp - 0xb8]      #    |x|free(panel_path);
0x819a:	mov rdi, rax                         
0x819d:	call 0x1eeae                         
0x81a2:	mov rax, qword ptr [rbp - 0xa8]      #    if (right_panel_path|[|0] == '/')
0x81a9:	movzx eax, byte ptr [rax]            
0x81ac:	cmp al, 0x2f                         #    if |(|right_panel_path[0] == '/')
0x81ae:	jne 0x81c8                           
0x81b0:	mov rax, qword ptr [rbp - 0xa8]      #	panel_path = |x|strdup(right_panel_path);
0x81b7:	mov rdi, rax                         
0x81ba:	call 0x24780                         
0x81bf:	mov qword ptr [rbp - 0xb8], rax      
0x81c6:	jmp 0x8228                           
0x81c8:	mov rax, qword ptr [rbp - 0x88]      #	panel_path = xmalloc(|s|trlen(current_path) + 1 +
0x81cf:	mov rdi, rax                         
0x81d2:	call 0x4960                          
0x81d7:	mov rbx, rax                         
0x81da:	mov rax, qword ptr [rbp - 0xa8]      #			     |s|trlen(right_panel_path) + 1);
0x81e1:	mov rdi, rax                         
0x81e4:	call 0x4960                          
0x81e9:	add rax, rbx                         #	panel_path = xmalloc(strlen(current_path) + 1 |+|
0x81ec:	add rax, 2                           #	panel_path = |x|malloc(strlen(current_path) + 1 +
0x81f0:	mov rdi, rax                         
0x81f3:	call 0x24650                         
0x81f8:	mov qword ptr [rbp - 0xb8], rax      
0x81ff:	mov rcx, qword ptr [rbp - 0xa8]      #	|s|printf(panel_path, "%s/%s", current_path, right_panel_path);
0x8206:	mov rdx, qword ptr [rbp - 0x88]      
0x820d:	mov rax, qword ptr [rbp - 0xb8]      
0x8214:	lea rsi, [rip + 0x1f320]             
0x821b:	mov rdi, rax                         
0x821e:	mov eax, 0                           
0x8223:	call 0x4dd0                          
0x8228:	mov rax, qword ptr [rbp - 0xb8]      #    right_panel = |p|anel_init(panel_path);
0x822f:	mov rdi, rax                         
0x8232:	call 0x108b4                         
0x8237:	mov qword ptr [rip + 0x286ca], rax   #    right_panel |=| panel_init(panel_path);
0x823e:	mov rax, qword ptr [rbp - 0xb8]      #    |x|free(panel_path);
0x8245:	mov rdi, rax                         
0x8248:	call 0x1eeae                         
0x824d:	mov rax, qword ptr [rbp - 0x88]      #    |x|free(current_path);
0x8254:	mov rdi, rax                         
0x8257:	call 0x1eeae                         
0x825c:	mov eax, 0                           #    |c|onfiguration_end();
0x8261:	call 0x1cd8b                         
0x8266:	mov rax, qword ptr [rip + 0x28693]   #    src_panel |=| left_panel;
0x826d:	mov qword ptr [rip + 0x2869c], rax   
0x8274:	mov rax, qword ptr [rip + 0x2868d]   #    dst_panel |=| right_panel;
0x827b:	mov qword ptr [rip + 0x28696], rax   
0x8282:	mov edi, 0                           #    |r|esize(0);
0x8287:	mov eax, 0                           
0x828c:	call 0x503a                          
0x8291:	mov rax, qword ptr [rip + 0x28660]   #    |t|ty_get_screen(screen);
0x8298:	mov rdi, rax                         
0x829b:	call 0xce1e                          
0x82a0:	mov edi, 1                           #    |t|ty_set_mode(TTY_NONCANONIC);
0x82a5:	call 0xadac                          
0x82aa:	mov eax, 0                           #    |t|ty_defaults();
0x82af:	call 0xc083                          
0x82b4:	mov qword ptr [rip + 0x28671], 0     #    dir_history       |=| NULL;
0x82bf:	mov dword ptr [rip + 0x2866f], 0     #    dir_history_count |=| 0;
0x82c9:	mov dword ptr [rip + 0x28669], 0     #    dir_history_point |=| 0;
0x82d3:	mov edi, 1                           #    |s|ignal_handlers(ON);
0x82d8:	call 0x1ed59                         
0x82dd:	mov rax, qword ptr [rip + 0x2862c]   #    |t|ty_update_title(panel_get_path(src_panel));
0x82e4:	mov rdi, rax                         
0x82e7:	call 0x1504f                         
0x82ec:	mov rdi, rax                         
0x82ef:	call 0xd875                          
0x82f4:	mov eax, dword ptr [rip + 0x285ee]   #    if (|w|ait_msg)
0x82fa:	test eax, eax                        #    if |(|wait_msg)
0x82fc:	je 0x8354                            
0x82fe:	mov edi, 0                           #	|a|larm(0);
0x8303:	call 0x4a60                          
0x8308:	mov rax, qword ptr [rip + 0x28571]   #	|f|printf(stdout, "Press almost any key to continue\n");
0x830f:	mov rcx, rax                         
0x8312:	mov edx, 0x21                        
0x8317:	mov esi, 1                           
0x831c:	lea rax, [rip + 0x1f225]             
0x8323:	mov rdi, rax                         
0x8326:	call 0x4e10                          
0x832b:	mov eax, dword ptr [rip + 0x286ab]   #	|t|ty_goto(tty_lines - 1, 0);
0x8331:	sub eax, 1                           
0x8334:	mov esi, 0                           
0x8339:	mov edi, eax                         
0x833b:	call 0xbe95                          
0x8340:	mov edi, 0                           #	|t|ty_get_key(NULL);
0x8345:	call 0xc5ba                          
0x834a:	mov dword ptr [rip + 0x28594], 0     #	wait_msg |=| 0;
0x8354:	mov rax, qword ptr [rip + 0x285b5]   #    |t|ty_update_title(panel_get_path(src_panel));
0x835b:	mov rdi, rax                         
0x835e:	call 0x1504f                         
0x8363:	mov rdi, rax                         
0x8366:	call 0xd875                          
0x836b:	mov eax, 0                           #    alarm(60 - |g|et_local_time()->tm_sec);
0x8370:	call 0x1e4bf                         
0x8375:	mov edx, dword ptr [rax]             #    alarm(60 - get_local_time()|-|>tm_sec);
0x8377:	mov eax, 0x3c                        #    alarm(60 |-| get_local_time()->tm_sec);
0x837c:	sub eax, edx                         
0x837e:	mov edi, eax                         #    |a|larm(60 - get_local_time()->tm_sec);
0x8380:	call 0x4a60                          
0x8385:	mov eax, dword ptr [rip + 0x28559]   #    src_panel = panel_no |?| right_panel : left_panel;
0x838b:	test eax, eax                        #    src_panel = panel_no ? right_panel |:| left_panel;
0x838d:	je 0x8398                            
0x838f:	mov rax, qword ptr [rip + 0x28572]   #    src_panel = panel_no ? right_panel |:| left_panel;
0x8396:	jmp 0x839f                           
0x8398:	mov rax, qword ptr [rip + 0x28561]   #    src_panel = panel_no ? right_panel |:| left_panel;
0x839f:	mov qword ptr [rip + 0x2856a], rax   #    src_panel |=| panel_no ? right_panel : left_panel;
0x83a6:	mov eax, dword ptr [rip + 0x28538]   #    dst_panel = panel_no |?| left_panel  : right_panel;
0x83ac:	test eax, eax                        #    dst_panel = panel_no ? left_panel  |:| right_panel;
0x83ae:	je 0x83b9                            
0x83b0:	mov rax, qword ptr [rip + 0x28549]   #    dst_panel = panel_no ? left_panel  |:| right_panel;
0x83b7:	jmp 0x83c0                           
0x83b9:	mov rax, qword ptr [rip + 0x28548]   #    dst_panel = panel_no ? left_panel  |:| right_panel;
0x83c0:	mov qword ptr [rip + 0x28551], rax   #    dst_panel |=| panel_no ? left_panel  : right_panel;
0x83c7:	mov eax, dword ptr [rip + 0x2860f]   #    if (tty_lines |<| 7)
0x83cd:	cmp eax, 6                           #    if |(|tty_lines < 7)
0x83d0:	jg 0x83e6                            
0x83d2:	mov eax, 0                           #	|t|ty_defaults();
0x83d7:	call 0xc083                          
0x83dc:	mov eax, 0                           #	|t|ty_clear();
0x83e1:	call 0xb8a5                          
0x83e6:	mov eax, 0                           #    |t|itle_update();
0x83eb:	call 0x1c9f4                         
0x83f0:	mov eax, 0                           #    |s|tatus_default();
0x83f5:	call 0x10857                         
0x83fa:	mov rax, qword ptr [rbp - 0xc0]      #    |i|l_restore(saved_il);
0x8401:	mov rdi, rax                         
0x8404:	call 0xe319                          
0x8409:	mov eax, 0                           #    |t|ty_update();
0x840e:	call 0xb4b7                          
0x8413:	mov eax, 0                           #    saved_il = |i|l_save();
0x8418:	call 0xe205                          
0x841d:	mov qword ptr [rbp - 0xc0], rax      
0x8424:	mov eax, 0                           #    |r|eread();
0x8429:	call 0x772c                          
0x842e:	mov edi, 0                           #    |r|efresh(0);
0x8433:	mov eax, 0                           
0x8438:	call 0x5367                          
0x843d:	mov rax, qword ptr [rbp - 0xc0]      #    |i|l_restore(saved_il);
0x8444:	mov rdi, rax                         
0x8447:	call 0xe319                          
0x844c:	mov rax, qword ptr [rip + 0x284bd]   #    |p|anel_set_focus(src_panel, ON);
0x8453:	mov esi, 1                           
0x8458:	mov rdi, rax                         
0x845b:	call 0x14ed2                         
0x8460:	cmp dword ptr [rbp - 0x124], 0       #    if |(|first_time)
0x8467:	je 0x848f                            
0x8469:	mov rax, qword ptr [rip + 0x284a0]   #	|d|ir_history_add(panel_get_path(src_panel));
0x8470:	mov rdi, rax                         
0x8473:	call 0x1504f                         
0x8478:	mov rdi, rax                         
0x847b:	mov eax, 0                           
0x8480:	call 0x6598                          
0x8485:	mov dword ptr [rbp - 0x124], 0       #	first_time |=| 0;
0x848f:	mov eax, 0                           #    |s|et_prompt();
0x8494:	call 0x769b                          
0x8499:	mov eax, 0                           #    saved_il = |i|l_save();
0x849e:	call 0xe205                          
0x84a3:	mov qword ptr [rbp - 0xc0], rax      
0x84aa:	jmp 0xacc2                           #    while|(|!app_end)
0x84af:	mov rax, qword ptr [rbp - 0xc0]      #	|i|l_restore(saved_il);
0x84b6:	mov rdi, rax                         
0x84b9:	call 0xe319                          
0x84be:	mov eax, 0                           #	saved_il = |i|l_save();
0x84c3:	call 0xe205                          
0x84c8:	mov qword ptr [rbp - 0xc0], rax      
0x84cf:	mov eax, 0                           #	|i|l_update();
0x84d4:	call 0xf8eb                          
0x84d9:	mov eax, 0                           #	|i|l_update_point();
0x84de:	call 0xf768                          
0x84e3:	mov eax, 0                           #	|t|ty_update();
0x84e8:	call 0xb4b7                          
0x84ed:	lea rax, [rbp - 0xe0]                #	|i|l_get_contents(&cmdln);
0x84f4:	mov rdi, rax                         
0x84f7:	call 0xfc3f                          
0x84fc:	mov dword ptr [rip + 0x295ba], 0     #	user_heart_attack |=| 0;
0x8506:	jmp 0x8517                           #	while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x8508:	mov edi, 0                           #	    |r|eport_undefined_key(NULL);
0x850d:	mov eax, 0                           
0x8512:	call 0x54a2                          
0x8517:	lea rax, [rbp - 0x158]               #	while ((ks = |t|ty_get_key(&repeat_count)) == NULL)
0x851e:	mov rdi, rax                         
0x8521:	call 0xc5ba                          
0x8526:	mov qword ptr [rbp - 0x78], rax      
0x852a:	cmp qword ptr [rbp - 0x78], 0        #	while ((ks = tty_get_key(&repeat_count)) |=|= NULL)
0x852f:	je 0x8508                            
0x8531:	mov eax, 0                           #	|s|tatus_update();
0x8536:	call 0x106d4                         
0x853b:	mov rax, qword ptr [rbp - 0x78]      #	key = ks|-|>key_seq[0];
0x853f:	mov rax, qword ptr [rax]             
0x8542:	movzx eax, byte ptr [rax]            #	key = ks->key_seq|[|0];
0x8545:	movzx eax, al                        #	key |=| ks->key_seq[0];
0x8548:	mov dword ptr [rbp - 0x12c], eax     
0x854e:	mov rax, qword ptr [rbp - 0x78]      #	command |=| (command_t *)ks->aux_data;
0x8552:	mov rax, qword ptr [rax + 0x10]      
0x8556:	mov qword ptr [rbp - 0x70], rax      
0x855a:	cmp qword ptr [rbp - 0x70], 0        #	if |(|command)
0x855f:	je 0x8a13                            
0x8565:	mov rax, qword ptr [rbp - 0x70]      #	    if (command|-|>builtin)
0x8569:	movzx eax, byte ptr [rax + 0x1b]     
0x856d:	test al, al                          #	    if |(|command->builtin)
0x856f:	je 0x85b2                            
0x8571:	mov rax, qword ptr [rbp - 0x70]      #		key = - 1 - (command|-|>name-builtin[0]) / MAX_BUILTIN_NAME;
0x8575:	mov rax, qword ptr [rax]             
0x8578:	lea rdx, [rip + 0x26b21]             #		key = - 1 - (command->name|-|builtin[0]) / MAX_BUILTIN_NAME;
0x857f:	sub rax, rdx                         
0x8582:	mov rcx, rax                         
0x8585:	movabs rdx, 0xea0ea0ea0ea0ea1        #		key = - 1 - (command->name-builtin[0]) |/| MAX_BUILTIN_NAME;
0x858f:	mov rax, rcx                         
0x8592:	imul rdx                             
0x8595:	mov rax, rdx                         
0x8598:	sar rax, 1                           
0x859b:	sar rcx, 0x3f                        
0x859f:	mov rdx, rcx                         
0x85a2:	sub rax, rdx                         
0x85a5:	not eax                              #		key |=| - 1 - (command->name-builtin[0]) / MAX_BUILTIN_NAME;
0x85a7:	mov dword ptr [rbp - 0x12c], eax     
0x85ad:	jmp 0x8a13                           
0x85b2:	mov rax, qword ptr [rbp - 0x70]      #		if (command|-|>name)
0x85b6:	mov rax, qword ptr [rax]             
0x85b9:	test rax, rax                        #		if |(|command->name)
0x85bc:	je 0x8a13                            
0x85c2:	mov rax, qword ptr [rip + 0x28347]   #		    |p|anel_no_optimizations(src_panel);
0x85c9:	mov rdi, rax                         
0x85cc:	call 0x110b0                         
0x85d1:	mov rax, qword ptr [rip + 0x28340]   #		    |p|anel_no_optimizations(dst_panel);
0x85d8:	mov rdi, rax                         
0x85db:	call 0x110b0                         
0x85e0:	mov rax, qword ptr [rbp - 0x70]      #		    if (command|-|>body)
0x85e4:	mov rax, qword ptr [rax + 8]         
0x85e8:	test rax, rax                        #		    if |(|command->body)
0x85eb:	je 0x8997                            
0x85f1:	mov qword ptr [rbp - 0x30], 0        #			char *|c|md = NULL;
0x85f9:	mov rcx, qword ptr [rip + 0x28318]   #			retval = |c|ommand_expand(command, &cmd,
0x8600:	mov rdx, qword ptr [rip + 0x28309]   
0x8607:	lea rsi, [rbp - 0x30]                
0x860b:	mov rax, qword ptr [rbp - 0x70]      
0x860f:	mov rdi, rax                         
0x8612:	mov eax, 0                           
0x8617:	call 0x6785                          
0x861c:	mov dword ptr [rbp - 0x108], eax     
0x8622:	cmp dword ptr [rbp - 0x108], 0       #			if |(|retval)
0x8629:	je 0x8924                            
0x862f:	cmp dword ptr [rbp - 0x108], 0       #			    if |(|retval > 0)
0x8636:	jle 0x8991                           
0x863c:	mov rax, qword ptr [rbp - 0x70]      #				size_t msglen = 32 + strlen(command|-|>name) +
0x8640:	mov rax, qword ptr [rax]             
0x8643:	mov rdi, rax                         #				size_t msglen = 32 + |s|trlen(command->name) +
0x8646:	call 0x4960                          
0x864b:	mov rbx, rax                         
0x864e:	mov rax, qword ptr [rbp - 0x30]      #				    |s|trlen(cmd) + 1;
0x8652:	mov rdi, rax                         
0x8655:	call 0x4960                          
0x865a:	add rax, rbx                         #				size_t msglen = 32 + strlen(command->name) |+|
0x865d:	add rax, 0x21                        #				size_t |m|sglen = 32 + strlen(command->name) +
0x8661:	mov qword ptr [rbp - 0x58], rax      
0x8665:	mov rax, qword ptr [rbp - 0x58]      #				char *msg = |x|malloc(msglen);
0x8669:	mov rdi, rax                         
0x866c:	call 0x24650                         
0x8671:	mov qword ptr [rbp - 0x50], rax      
0x8675:	mov rcx, qword ptr [rbp - 0x30]      #				|s|printf(msg, "%s: %s", command->name, cmd);
0x8679:	mov rax, qword ptr [rbp - 0x70]      
0x867d:	mov rdx, qword ptr [rax]             
0x8680:	mov rax, qword ptr [rbp - 0x50]      
0x8684:	lea rsi, [rip + 0x1eb11]             
0x868b:	mov rdi, rax                         
0x868e:	mov eax, 0                           
0x8693:	call 0x4dd0                          
0x8698:	mov rax, qword ptr [rbp - 0x50]      #				|s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
0x869c:	mov edx, 1                           
0x86a1:	mov esi, 1                           
0x86a6:	mov rdi, rax                         
0x86a9:	call 0x107d0                         
0x86ae:	mov eax, 0                           #				|t|ty_update();
0x86b3:	call 0xb4b7                          
0x86b8:	mov rax, qword ptr [rbp - 0x50]      #				|x|free(msg);
0x86bc:	mov rdi, rax                         
0x86bf:	call 0x1eeae                         
0x86c4:	mov rax, qword ptr [rbp - 0x70]      #				if (command|-|>hide)
0x86c8:	movzx eax, byte ptr [rax + 0x1a]     
0x86cc:	test al, al                          #				if |(|command->hide)
0x86ce:	je 0x873a                            
0x86d0:	mov rax, qword ptr [rbp - 0x70]      #				    msg = xmalloc(64+strlen(command|-|>name)+1);
0x86d4:	mov rax, qword ptr [rax]             
0x86d7:	mov rdi, rax                         #				    msg = xmalloc(64+|s|trlen(command->name)+1);
0x86da:	call 0x4960                          
0x86df:	add rax, 0x41                        #				    msg = |x|malloc(64+strlen(command->name)+1);
0x86e3:	mov rdi, rax                         
0x86e6:	call 0x24650                         
0x86eb:	mov qword ptr [rbp - 0x50], rax      
0x86ef:	mov rax, qword ptr [rbp - 0x70]      #				    |s|printf(msg,
0x86f3:	mov rdx, qword ptr [rax]             
0x86f6:	mov rax, qword ptr [rbp - 0x50]      
0x86fa:	mov rcx, rdx                         
0x86fd:	lea rdx, [rip + 0x1ee66]             
0x8704:	lea rsi, [rip + 0x1ee6d]             
0x870b:	mov rdi, rax                         
0x870e:	mov eax, 0                           
0x8713:	call 0x4dd0                          
0x8718:	mov rax, qword ptr [rbp - 0x50]      #				    |i|l_message(msg);
0x871c:	mov rdi, rax                         
0x871f:	call 0xfcbe                          
0x8724:	mov eax, 0                           #				    |t|ty_update();
0x8729:	call 0xb4b7                          
0x872e:	mov rax, qword ptr [rbp - 0x50]      #				    |x|free(msg);
0x8732:	mov rdi, rax                         
0x8735:	call 0x1eeae                         
0x873a:	mov rax, qword ptr [rbp - 0x30]      #				if (!|i|s_a_bg_command(cmd))
0x873e:	mov rdi, rax                         
0x8741:	call 0x1e7aa                         
0x8746:	test eax, eax                        #				if |(|!is_a_bg_command(cmd))
0x8748:	jne 0x8756                           
0x874a:	mov rax, qword ptr [rbp - 0x30]      #				    |t|ty_update_title(cmd);
0x874e:	mov rdi, rax                         
0x8751:	call 0xd875                          
0x8756:	mov rax, qword ptr [rbp - 0x70]      #				child_exit_code = start(cmd, command|-|>hide);
0x875a:	movzx eax, byte ptr [rax + 0x1a]     
0x875e:	movsx edx, al                        #				child_exit_code = |s|tart(cmd, command->hide);
0x8761:	mov rax, qword ptr [rbp - 0x30]      
0x8765:	mov esi, edx                         
0x8767:	mov rdi, rax                         
0x876a:	call 0x1f6f0                         
0x876f:	mov dword ptr [rbp - 0x104], eax     
0x8775:	mov rax, qword ptr [rbp - 0x30]      #				|x|free(cmd);
0x8779:	mov rdi, rax                         
0x877c:	call 0x1eeae                         
0x8781:	mov rax, qword ptr [rbp - 0x70]      #				if (command|-|>hide)
0x8785:	movzx eax, byte ptr [rax + 0x1a]     
0x8789:	test al, al                          #				if |(|command->hide)
0x878b:	je 0x87f2                            
0x878d:	mov eax, dword ptr [rbp - 0x104]     #				    if(|W|IFSIGNALED(child_exit_code))
0x8793:	and eax, 0x7f                        
0x8796:	add eax, 1                           
0x8799:	sar al, 1                            
0x879b:	test al, al                          #				    if|(|WIFSIGNALED(child_exit_code))
0x879d:	jle 0x87ba                           
0x879f:	mov edx, 0xc                         #					|i|l_read_char("Command interrupted by signal",
0x87a4:	mov esi, 0                           
0x87a9:	lea rax, [rip + 0x1ede7]             
0x87b0:	mov rdi, rax                         
0x87b3:	call 0x5c09                          
0x87b8:	jmp 0x882d                           
0x87ba:	mov eax, dword ptr [rbp - 0x104]     #				    else if(|W|IFEXITED(child_exit_code) &&
0x87c0:	and eax, 0x7f                        
0x87c3:	test eax, eax                        #				    else if|(|WIFEXITED(child_exit_code) &&
0x87c5:	jne 0x882d                           
0x87c7:	mov eax, dword ptr [rbp - 0x104]     #					    (|W|EXITSTATUS(child_exit_code) != 0))
0x87cd:	sar eax, 8                           
0x87d0:	movzx eax, al                        
0x87d3:	test eax, eax                        #				    else if(WIFEXITED(child_exit_code) |&|&
0x87d5:	je 0x882d                            
0x87d7:	mov eax, 0                           #					|t|ty_beep();
0x87dc:	call 0xbfbf                          
0x87e1:	mov rax, qword ptr [rbp - 0x70]      #					|d|isplay_errors(command->name);
0x87e5:	mov rax, qword ptr [rax]             
0x87e8:	mov rdi, rax                         
0x87eb:	call 0x1f808                         
0x87f0:	jmp 0x882d                           
0x87f2:	mov rax, qword ptr [rbp - 0x70]      #				    if (command|-|>save_screen)
0x87f6:	movzx eax, byte ptr [rax + 0x18]     
0x87fa:	test al, al                          #				    if |(|command->save_screen)
0x87fc:	je 0x880d                            
0x87fe:	mov rax, qword ptr [rip + 0x280f3]   #					|t|ty_get_screen(screen);
0x8805:	mov rdi, rax                         
0x8808:	call 0xce1e                          
0x880d:	mov eax, 0                           #				    |t|ty_touch();
0x8812:	call 0xb9ce                          
0x8817:	mov rax, qword ptr [rbp - 0x70]      #				    if (command|-|>pause)
0x881b:	movzx eax, byte ptr [rax + 0x19]     
0x881f:	test al, al                          #				    if |(|command->pause)
0x8821:	je 0x882d                            
0x8823:	mov dword ptr [rip + 0x280bb], 1     #					wait_msg |=| 1;
0x882d:	mov eax, dword ptr [rbp - 0x104]     #				if (|W|IFEXITED(child_exit_code) &&
0x8833:	and eax, 0x7f                        
0x8836:	test eax, eax                        #				if |(|WIFEXITED(child_exit_code) &&
0x8838:	jne 0x88c1                           
0x883e:	mov eax, dword ptr [rbp - 0x104]     #				    (|W|EXITSTATUS(child_exit_code) == 0) &&
0x8844:	sar eax, 8                           
0x8847:	movzx eax, al                        
0x884a:	test eax, eax                        #				if (WIFEXITED(child_exit_code) |&|&
0x884c:	jne 0x88c1                           
0x884e:	mov rax, qword ptr [rbp - 0x70]      #				    command|-|>new_dir)
0x8852:	mov rax, qword ptr [rax + 0x10]      
0x8856:	test rax, rax                        #				    (WEXITSTATUS(child_exit_code) == 0) |&|&
0x8859:	je 0x88c1                            
0x885b:	mov rax, qword ptr [rbp - 0x70]      #					|t|ilde_expand(command->new_dir);
0x885f:	mov rax, qword ptr [rax + 0x10]      
0x8863:	mov rdi, rax                         
0x8866:	mov eax, 0                           
0x886b:	call 0x1fb51                         
0x8870:	mov qword ptr [rbp - 0x48], rax      
0x8874:	mov rdx, qword ptr [rip + 0x2809d]   #				    |p|anel_action(src_panel, act_CHDIR,
0x887b:	mov rax, qword ptr [rip + 0x2808e]   
0x8882:	mov rcx, qword ptr [rbp - 0x48]      
0x8886:	mov r8d, 1                           
0x888c:	mov esi, 0x21                        
0x8891:	mov rdi, rax                         
0x8894:	call 0x1a89a                         
0x8899:	mov rax, qword ptr [rip + 0x28070]   #				    |d|ir_history_add(panel_get_path(src_panel));
0x88a0:	mov rdi, rax                         
0x88a3:	call 0x1504f                         
0x88a8:	mov rdi, rax                         
0x88ab:	mov eax, 0                           
0x88b0:	call 0x6598                          
0x88b5:	mov rax, qword ptr [rbp - 0x48]      #				    |x|free(expanded_dir);
0x88b9:	mov rdi, rax                         
0x88bc:	call 0x1eeae                         
0x88c1:	mov eax, dword ptr [rbp - 0x104]     #				if (|W|IFEXITED(child_exit_code) &&
0x88c7:	and eax, 0x7f                        
0x88ca:	test eax, eax                        #				if |(|WIFEXITED(child_exit_code) &&
0x88cc:	jne 0x82f4                           
0x88d2:	mov eax, dword ptr [rbp - 0x104]     #				    (|W|EXITSTATUS(child_exit_code) == 0))
0x88d8:	sar eax, 8                           
0x88db:	movzx eax, al                        
0x88de:	test eax, eax                        #				if (WIFEXITED(child_exit_code) |&|&
0x88e0:	jne 0x82f4                           
0x88e6:	cmp dword ptr [rbp - 0x108], 2       #				    if |(|retval == 2)
0x88ed:	jne 0x8903                           
0x88ef:	mov rax, qword ptr [rip + 0x2801a]   #					|p|anel_unselect_all(src_panel);
0x88f6:	mov rdi, rax                         
0x88f9:	call 0x14ff9                         
0x88fe:	jmp 0x82f4                           
0x8903:	cmp dword ptr [rbp - 0x108], 3       #					if |(|retval == 3)
0x890a:	jne 0x82f4                           
0x8910:	mov rax, qword ptr [rip + 0x28001]   #					    |p|anel_unselect_all(dst_panel);
0x8917:	mov rdi, rax                         
0x891a:	call 0x14ff9                         
0x891f:	jmp 0x82f4                           
0x8924:	mov rax, qword ptr [rbp - 0x78]      #			    msg = xmalloc(80+strlen((char *)ks|-|>key_seq)+1);
0x8928:	mov rax, qword ptr [rax]             
0x892b:	mov rdi, rax                         #			    msg = xmalloc(80+|s|trlen((char *)ks->key_seq)+1);
0x892e:	call 0x4960                          
0x8933:	add rax, 0x51                        #			    msg = |x|malloc(80+strlen((char *)ks->key_seq)+1);
0x8937:	mov rdi, rax                         
0x893a:	call 0x24650                         
0x893f:	mov qword ptr [rbp - 0x60], rax      
0x8943:	mov rax, qword ptr [rbp - 0x70]      #			    |s|printf(msg,
0x8947:	mov rcx, qword ptr [rax + 0x20]      
0x894b:	mov rax, qword ptr [rbp - 0x70]      
0x894f:	mov rdx, qword ptr [rax]             
0x8952:	mov rax, qword ptr [rbp - 0x60]      
0x8956:	lea rsi, [rip + 0x1ec5b]             
0x895d:	mov rdi, rax                         
0x8960:	mov eax, 0                           
0x8965:	call 0x4dd0                          
0x896a:	mov rax, qword ptr [rbp - 0x60]      #			    |i|l_read_char(msg, (char *)NULL,
0x896e:	mov edx, 0x1c                        
0x8973:	mov esi, 0                           
0x8978:	mov rdi, rax                         
0x897b:	call 0x5c09                          
0x8980:	mov rax, qword ptr [rbp - 0x60]      #			    |x|free(msg);
0x8984:	mov rdi, rax                         
0x8987:	call 0x1eeae                         
0x898c:	jmp 0xacc2                           #			    |c|ontinue;
0x8991:	nop                                  #				|c|ontinue;
0x8992:	jmp 0xacc2                           
0x8997:	mov rax, qword ptr [rbp - 0x70]      #			if (command|-|>new_dir)
0x899b:	mov rax, qword ptr [rax + 0x10]      
0x899f:	test rax, rax                        #			if |(|command->new_dir)
0x89a2:	je 0x82f4                            
0x89a8:	mov rax, qword ptr [rbp - 0x70]      #			    char *expanded_dir=|t|ilde_expand(command->new_dir);
0x89ac:	mov rax, qword ptr [rax + 0x10]      
0x89b0:	mov rdi, rax                         
0x89b3:	mov eax, 0                           
0x89b8:	call 0x1fb51                         
0x89bd:	mov qword ptr [rbp - 0x68], rax      
0x89c1:	mov rdx, qword ptr [rip + 0x27f50]   #			    |p|anel_action(src_panel, act_CHDIR, dst_panel,
0x89c8:	mov rax, qword ptr [rip + 0x27f41]   
0x89cf:	mov rcx, qword ptr [rbp - 0x68]      
0x89d3:	mov r8d, 1                           
0x89d9:	mov esi, 0x21                        
0x89de:	mov rdi, rax                         
0x89e1:	call 0x1a89a                         
0x89e6:	mov rax, qword ptr [rip + 0x27f23]   #			    |d|ir_history_add(panel_get_path(src_panel));
0x89ed:	mov rdi, rax                         
0x89f0:	call 0x1504f                         
0x89f5:	mov rdi, rax                         
0x89f8:	mov eax, 0                           
0x89fd:	call 0x6598                          
0x8a02:	mov rax, qword ptr [rbp - 0x68]      #			    |x|free(expanded_dir);
0x8a06:	mov rdi, rax                         
0x8a09:	call 0x1eeae                         
0x8a0e:	jmp 0x82f4                           #			|g|oto restart;
0x8a13:	mov eax, dword ptr [rbp - 0x12c]     #	|s|witch (key)
0x8a19:	add eax, 0x57                        
0x8a1c:	cmp eax, 0x5e                        
0x8a1f:	ja 0xac71                            
0x8a25:	mov eax, eax                         
0x8a27:	lea rdx, [rax*4]                     
0x8a2f:	lea rax, [rip + 0x1efa2]             
0x8a36:	mov eax, dword ptr [rdx + rax]       
0x8a39:	cdqe                                 
0x8a3b:	lea rdx, [rip + 0x1ef96]             
0x8a42:	add rax, rdx                         
0x8a45:	jmp rax                              
0x8a48:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
0x8a4f:	mov rdi, rax                         
0x8a52:	call 0xdf09                          
0x8a57:	mov edi, 0                           #		|i|l_kill_line(IL_DONT_STORE);
0x8a5c:	call 0xed98                          
0x8a61:	mov eax, 0                           #		saved_il = |i|l_save();
0x8a66:	call 0xe205                          
0x8a6b:	mov qword ptr [rbp - 0xc0], rax      
0x8a72:	jmp 0xacc2                           #		|b|reak;
0x8a77:	mov eax, dword ptr [rip + 0x265ab]   #		if (|!|two_panel_mode)
0x8a7d:	test eax, eax                        #		if |(|!two_panel_mode)
0x8a7f:	je 0xa65c                            
0x8a85:	mov eax, dword ptr [rbp - 0x158]     #		if ((repeat_count |&| 1) == 0)
0x8a8b:	and eax, 1                           
0x8a8e:	test eax, eax                        #		if |(|(repeat_count & 1) == 0)
0x8a90:	jne 0x8a97                           
0x8a92:	jmp 0xacc2                           #		    |b|reak;
0x8a97:	mov rax, qword ptr [rip + 0x27e72]   #		|p|anel_set_focus(src_panel, OFF);
0x8a9e:	mov esi, 0                           
0x8aa3:	mov rdi, rax                         
0x8aa6:	call 0x14ed2                         
0x8aab:	mov rax, qword ptr [rip + 0x27e5e]   #		tmp_panel |=| src_panel;
0x8ab2:	mov qword ptr [rip + 0x27e67], rax   
0x8ab9:	mov rax, qword ptr [rip + 0x27e58]   #		src_panel |=| dst_panel;
0x8ac0:	mov qword ptr [rip + 0x27e49], rax   
0x8ac7:	mov rax, qword ptr [rip + 0x27e52]   #		dst_panel |=| tmp_panel;
0x8ace:	mov qword ptr [rip + 0x27e43], rax   
0x8ad5:	mov eax, dword ptr [rip + 0x27e09]   #		panel_no = |!|panel_no;
0x8adb:	test eax, eax                        
0x8add:	sete al                              
0x8ae0:	movzx eax, al                        
0x8ae3:	mov dword ptr [rip + 0x27dfb], eax   #		panel_no |=| !panel_no;
0x8ae9:	mov rax, qword ptr [rip + 0x27e20]   #		|p|anel_set_focus(src_panel, ON);
0x8af0:	mov esi, 1                           
0x8af5:	mov rdi, rax                         
0x8af8:	call 0x14ed2                         
0x8afd:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
0x8b04:	mov rdi, rax                         
0x8b07:	call 0xdf09                          
0x8b0c:	mov eax, 0                           #		|s|et_prompt();
0x8b11:	call 0x769b                          
0x8b16:	mov eax, 0                           #		saved_il = |i|l_save();
0x8b1b:	call 0xe205                          
0x8b20:	mov qword ptr [rbp - 0xc0], rax      
0x8b27:	mov rax, qword ptr [rip + 0x27de2]   #		|t|ty_update_title(panel_get_path(src_panel));
0x8b2e:	mov rdi, rax                         
0x8b31:	call 0x1504f                         
0x8b36:	mov rdi, rax                         
0x8b39:	call 0xd875                          
0x8b3e:	jmp 0xacc2                           #		|b|reak;
0x8b43:	mov ecx, dword ptr [rbp - 0x158]     #		|p|anel_action(src_panel,act_UP,dst_panel,NULL,repeat_count);
0x8b49:	mov rdx, qword ptr [rip + 0x27dc8]   
0x8b50:	mov rax, qword ptr [rip + 0x27db9]   
0x8b57:	mov r8d, ecx                         
0x8b5a:	mov ecx, 0                           
0x8b5f:	mov esi, 0x1b                        
0x8b64:	mov rdi, rax                         
0x8b67:	call 0x1a89a                         
0x8b6c:	jmp 0xacc2                           #		|b|reak;
0x8b71:	mov ecx, dword ptr [rbp - 0x158]     #		|p|anel_action(src_panel,act_DOWN,dst_panel,NULL,repeat_count);
0x8b77:	mov rdx, qword ptr [rip + 0x27d9a]   
0x8b7e:	mov rax, qword ptr [rip + 0x27d8b]   
0x8b85:	mov r8d, ecx                         
0x8b88:	mov ecx, 0                           
0x8b8d:	mov esi, 0x1c                        
0x8b92:	mov rdi, rax                         
0x8b95:	call 0x1a89a                         
0x8b9a:	jmp 0xacc2                           #		|b|reak;
0x8b9f:	mov dword ptr [rbp - 0x13c], 0       #		action_status |=| 0;
0x8ba9:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
0x8bb0:	mov rdi, rax                         
0x8bb3:	call 0xdf09                          
0x8bb8:	lea rax, [rbp - 0xe0]                #		|i|l_get_contents(&cmdln);
0x8bbf:	mov rdi, rax                         
0x8bc2:	call 0xfc3f                          
0x8bc7:	mov rax, qword ptr [rbp - 0xe0]      #		for (i = |s|trlen(cmdln) - 1; i >= 0; i--)
0x8bce:	mov rdi, rax                         
0x8bd1:	call 0x4960                          
0x8bd6:	sub eax, 1                           #		for (i = strlen(cmdln) |-| 1; i >= 0; i--)
0x8bd9:	mov dword ptr [rbp - 0x138], eax     #		for (i |=| strlen(cmdln) - 1; i >= 0; i--)
0x8bdf:	jmp 0x8c16                           #		|f|or (i = strlen(cmdln) - 1; i >= 0; i--)
0x8be1:	mov rdx, qword ptr [rbp - 0xe0]      #		    if (cmdln|[|i] == ' ')
0x8be8:	mov eax, dword ptr [rbp - 0x138]     
0x8bee:	cdqe                                 
0x8bf0:	add rax, rdx                         
0x8bf3:	movzx eax, byte ptr [rax]            
0x8bf6:	cmp al, 0x20                         #		    if |(|cmdln[i] == ' ')
0x8bf8:	jne 0x8c21                           
0x8bfa:	mov rdx, qword ptr [rbp - 0xe0]      #			cmdln|[|i] = '\0';
0x8c01:	mov eax, dword ptr [rbp - 0x138]     
0x8c07:	cdqe                                 
0x8c09:	add rax, rdx                         
0x8c0c:	mov byte ptr [rax], 0                #			cmdln[i] |=| '\0';
0x8c0f:	sub dword ptr [rbp - 0x138], 1       #		for (i = strlen(cmdln) - 1; i >= 0; i|-|-)
0x8c16:	cmp dword ptr [rbp - 0x138], 0       #		for (i = strlen(cmdln) - 1; i |>|= 0; i--)
0x8c1d:	jns 0x8be1                           
0x8c1f:	jmp 0x8c22                           
0x8c21:	nop                                  #			|b|reak;
0x8c22:	mov rax, qword ptr [rbp - 0xe0]      #		switch (cmdln|[|0])
0x8c29:	movzx eax, byte ptr [rax]            
0x8c2c:	movsx eax, al                        
0x8c2f:	cmp eax, 0x2d                        
0x8c32:	je 0x8cda                            
0x8c38:	cmp eax, 0x2d                        
0x8c3b:	jg 0x8df4                            
0x8c41:	cmp eax, 0x2b                        
0x8c44:	je 0x8c65                            
0x8c46:	cmp eax, 0x2b                        
0x8c49:	jg 0x8df4                            
0x8c4f:	test eax, eax                        
0x8c51:	je 0x8d4f                            
0x8c57:	cmp eax, 0x2a                        
0x8c5a:	je 0x8dad                            
0x8c60:	jmp 0x8df4                           
0x8c65:	mov rax, qword ptr [rbp - 0xe0]      #			if (cmdln|[|1] == '\0')
0x8c6c:	add rax, 1                           
0x8c70:	movzx eax, byte ptr [rax]            
0x8c73:	test al, al                          #			if |(|cmdln[1] == '\0')
0x8c75:	jne 0x8c9f                           
0x8c77:	mov rdx, qword ptr [rip + 0x27c9a]   #			    |p|anel_action(src_panel, act_SELECT_ALL,
0x8c7e:	mov rax, qword ptr [rip + 0x27c8b]   
0x8c85:	mov r8d, 1                           
0x8c8b:	mov ecx, 0                           
0x8c90:	mov esi, 5                           
0x8c95:	mov rdi, rax                         
0x8c98:	call 0x1a89a                         
0x8c9d:	jmp 0x8ccb                           
0x8c9f:	mov rax, qword ptr [rbp - 0xe0]      #			    |p|anel_action(src_panel, act_PATTERN_SELECT,
0x8ca6:	lea rcx, [rax + 1]                   #					 dst_panel, cmdln |+| 1, 1);
0x8caa:	mov rdx, qword ptr [rip + 0x27c67]   #			    |p|anel_action(src_panel, act_PATTERN_SELECT,
0x8cb1:	mov rax, qword ptr [rip + 0x27c58]   
0x8cb8:	mov r8d, 1                           
0x8cbe:	mov esi, 0x24                        
0x8cc3:	mov rdi, rax                         
0x8cc6:	call 0x1a89a                         
0x8ccb:	mov edi, 0                           #			|i|l_kill_line(IL_DONT_STORE);
0x8cd0:	call 0xed98                          
0x8cd5:	jmp 0x8f3d                           #			|b|reak;
0x8cda:	mov rax, qword ptr [rbp - 0xe0]      #			if (cmdln|[|1] == '\0')
0x8ce1:	add rax, 1                           
0x8ce5:	movzx eax, byte ptr [rax]            
0x8ce8:	test al, al                          #			if |(|cmdln[1] == '\0')
0x8cea:	jne 0x8d14                           
0x8cec:	mov rdx, qword ptr [rip + 0x27c25]   #			    |p|anel_action(src_panel, act_UNSELECT_ALL,
0x8cf3:	mov rax, qword ptr [rip + 0x27c16]   
0x8cfa:	mov r8d, 1                           
0x8d00:	mov ecx, 0                           
0x8d05:	mov esi, 6                           
0x8d0a:	mov rdi, rax                         
0x8d0d:	call 0x1a89a                         
0x8d12:	jmp 0x8d40                           
0x8d14:	mov rax, qword ptr [rbp - 0xe0]      #			    |p|anel_action(src_panel, act_PATTERN_UNSELECT,
0x8d1b:	lea rcx, [rax + 1]                   #					 dst_panel, cmdln |+| 1, 1);
0x8d1f:	mov rdx, qword ptr [rip + 0x27bf2]   #			    |p|anel_action(src_panel, act_PATTERN_UNSELECT,
0x8d26:	mov rax, qword ptr [rip + 0x27be3]   
0x8d2d:	mov r8d, 1                           
0x8d33:	mov esi, 0x25                        
0x8d38:	mov rdi, rax                         
0x8d3b:	call 0x1a89a                         
0x8d40:	mov edi, 0                           #			|i|l_kill_line(IL_DONT_STORE);
0x8d45:	call 0xed98                          
0x8d4a:	jmp 0x8f3d                           #			|b|reak;
0x8d4f:	mov rcx, qword ptr [rip + 0x27ba2]   #			action_status = |p|anel_action(src_panel, act_ENTER,
0x8d56:	mov rdx, qword ptr [rip + 0x27bbb]   
0x8d5d:	mov rax, qword ptr [rip + 0x27bac]   
0x8d64:	mov r8d, 1                           
0x8d6a:	mov esi, 1                           
0x8d6f:	mov rdi, rax                         
0x8d72:	call 0x1a89a                         
0x8d77:	mov dword ptr [rbp - 0x13c], eax     
0x8d7d:	mov rax, qword ptr [rip + 0x27b8c]   #			|t|ty_update_title(panel_get_path(src_panel));
0x8d84:	mov rdi, rax                         
0x8d87:	call 0x1504f                         
0x8d8c:	mov rdi, rax                         
0x8d8f:	call 0xd875                          
0x8d94:	mov edi, 0                           #			|i|l_kill_line(IL_DONT_STORE);
0x8d99:	call 0xed98                          
0x8d9e:	mov eax, 0                           #			|s|et_prompt();
0x8da3:	call 0x769b                          
0x8da8:	jmp 0x8f3d                           #			|b|reak;
0x8dad:	mov rax, qword ptr [rbp - 0xe0]      #			if (cmdln|[|1] == '\0')
0x8db4:	add rax, 1                           
0x8db8:	movzx eax, byte ptr [rax]            
0x8dbb:	test al, al                          #			if |(|cmdln[1] == '\0')
0x8dbd:	jne 0x8df4                           
0x8dbf:	mov rdx, qword ptr [rip + 0x27b52]   #			    |p|anel_action(src_panel, act_TOGGLE,
0x8dc6:	mov rax, qword ptr [rip + 0x27b43]   
0x8dcd:	mov r8d, 1                           
0x8dd3:	mov ecx, 0                           
0x8dd8:	mov esi, 7                           
0x8ddd:	mov rdi, rax                         
0x8de0:	call 0x1a89a                         
0x8de5:	mov edi, 0                           #			    |i|l_kill_line(IL_DONT_STORE);
0x8dea:	call 0xed98                          
0x8def:	jmp 0x8f3d                           #			    |b|reak;
0x8df4:	mov rax, qword ptr [rbp - 0xe0]      #			if (|h|istory_expand(cmdln, &output_string) >= 0)
0x8dfb:	lea rdx, [rbp - 0xe8]                
0x8e02:	mov rsi, rdx                         
0x8e05:	mov rdi, rax                         
0x8e08:	mov eax, 0                           
0x8e0d:	call 0x224f7                         
0x8e12:	test eax, eax                        #			if |(|history_expand(cmdln, &output_string) >= 0)
0x8e14:	js 0x8f23                            
0x8e1a:	mov rax, qword ptr [rbp - 0xe8]      #			    if (|i|s_an_empty_command(output_string))
0x8e21:	mov rdi, rax                         
0x8e24:	call 0x1e829                         
0x8e29:	test eax, eax                        #			    if |(|is_an_empty_command(output_string))
0x8e2b:	je 0x8e5c                            
0x8e2d:	mov eax, 0                           #				saved_il = |i|l_save();
0x8e32:	call 0xe205                          
0x8e37:	mov qword ptr [rbp - 0xc0], rax      
0x8e3e:	mov edx, 0x1c                        #				|i|l_read_char("Void command.", (char *)NULL,
0x8e43:	mov esi, 0                           
0x8e48:	lea rax, [rip + 0x1e792]             
0x8e4f:	mov rdi, rax                         
0x8e52:	call 0x5c09                          
0x8e57:	jmp 0x8f3d                           #				|b|reak;
0x8e5c:	mov rax, qword ptr [rbp - 0xe8]      #			    bg_cmd = |i|s_a_bg_command(output_string);
0x8e63:	mov rdi, rax                         
0x8e66:	call 0x1e7aa                         
0x8e6b:	mov dword ptr [rbp - 0xfc], eax      
0x8e71:	cmp dword ptr [rbp - 0xfc], 0        #			    if |(|!bg_cmd)
0x8e78:	jne 0x8e89                           
0x8e7a:	mov rax, qword ptr [rbp - 0xe8]      #				|t|ty_update_title(output_string);
0x8e81:	mov rdi, rax                         
0x8e84:	call 0xd875                          
0x8e89:	mov edi, 0                           #			    |i|l_kill_line(IL_DONT_STORE);
0x8e8e:	call 0xed98                          
0x8e93:	mov rax, qword ptr [rbp - 0xe8]      #			    |i|l_insert_text(output_string);
0x8e9a:	mov rdi, rax                         
0x8e9d:	call 0xf433                          
0x8ea2:	mov rax, qword ptr [rbp - 0xe8]      #			    |s|tart(output_string, bg_cmd);
0x8ea9:	mov edx, dword ptr [rbp - 0xfc]      
0x8eaf:	mov esi, edx                         
0x8eb1:	mov rdi, rax                         
0x8eb4:	call 0x1f6f0                         
0x8eb9:	mov edi, 0                           #			    |i|l_history(IL_RECORD);
0x8ebe:	call 0xfd26                          
0x8ec3:	mov edi, 0                           #			    |i|l_kill_line(IL_DONT_STORE);
0x8ec8:	call 0xed98                          
0x8ecd:	cmp dword ptr [rbp - 0xfc], 0        #			    if |(|!bg_cmd)
0x8ed4:	jne 0x8f3c                           
0x8ed6:	mov rax, qword ptr [rip + 0x27a33]   #				|p|anel_no_optimizations(src_panel);
0x8edd:	mov rdi, rax                         
0x8ee0:	call 0x110b0                         
0x8ee5:	mov rax, qword ptr [rip + 0x27a2c]   #				|p|anel_no_optimizations(dst_panel);
0x8eec:	mov rdi, rax                         
0x8eef:	call 0x110b0                         
0x8ef4:	mov eax, 0                           #				|t|ty_touch();
0x8ef9:	call 0xb9ce                          
0x8efe:	mov rax, qword ptr [rip + 0x279f3]   #				|t|ty_get_screen(screen);
0x8f05:	mov rdi, rax                         
0x8f08:	call 0xce1e                          
0x8f0d:	mov dword ptr [rbp - 0x13c], 1       #				action_status |=| 1;
0x8f17:	mov dword ptr [rip + 0x279c7], 1     #				wait_msg |=| 1;
0x8f21:	jmp 0x8f3c                           #			|b|reak;
0x8f23:	mov rax, qword ptr [rbp - 0xe8]      #			    |i|l_read_char(output_string, (char *)NULL,
0x8f2a:	mov edx, 0x1c                        
0x8f2f:	mov esi, 0                           
0x8f34:	mov rdi, rax                         
0x8f37:	call 0x5c09                          
0x8f3c:	nop                                  #			|b|reak;
0x8f3d:	mov eax, 0                           #		saved_il = |i|l_save();
0x8f42:	call 0xe205                          
0x8f47:	mov qword ptr [rbp - 0xc0], rax      
0x8f4e:	cmp dword ptr [rbp - 0x13c], 0       #		if |(|action_status)
0x8f55:	je 0xacc2                            
0x8f5b:	jmp 0x82f4                           #		    |g|oto restart;
0x8f60:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
0x8f6a:	jmp 0x8f99                           #		|f|or (i = 0; i < repeat_count; i++)
0x8f6c:	mov rdx, qword ptr [rip + 0x279a5]   #		    |p|anel_action(src_panel, act_SELECT, dst_panel, NULL, 1);
0x8f73:	mov rax, qword ptr [rip + 0x27996]   
0x8f7a:	mov r8d, 1                           
0x8f80:	mov ecx, 0                           
0x8f85:	mov esi, 4                           
0x8f8a:	mov rdi, rax                         
0x8f8d:	call 0x1a89a                         
0x8f92:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
0x8f99:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
0x8f9f:	cmp dword ptr [rbp - 0x138], eax     
0x8fa5:	jl 0x8f6c                            
0x8fa7:	jmp 0xacc2                           #		|b|reak;
0x8fac:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
0x8fb6:	jmp 0x8fe5                           #		|f|or (i = 0; i < repeat_count; i++)
0x8fb8:	mov rdx, qword ptr [rip + 0x27959]   #		    |p|anel_action(src_panel, act_PGUP, dst_panel, NULL, 1);
0x8fbf:	mov rax, qword ptr [rip + 0x2794a]   
0x8fc6:	mov r8d, 1                           
0x8fcc:	mov ecx, 0                           
0x8fd1:	mov esi, 0x1d                        
0x8fd6:	mov rdi, rax                         
0x8fd9:	call 0x1a89a                         
0x8fde:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
0x8fe5:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
0x8feb:	cmp dword ptr [rbp - 0x138], eax     
0x8ff1:	jl 0x8fb8                            
0x8ff3:	jmp 0xacc2                           #		|b|reak;
0x8ff8:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
0x9002:	jmp 0x9031                           #		|f|or (i = 0; i < repeat_count; i++)
0x9004:	mov rdx, qword ptr [rip + 0x2790d]   #		    |p|anel_action(src_panel, act_PGDOWN, dst_panel, NULL, 1);
0x900b:	mov rax, qword ptr [rip + 0x278fe]   
0x9012:	mov r8d, 1                           
0x9018:	mov ecx, 0                           
0x901d:	mov esi, 0x1e                        
0x9022:	mov rdi, rax                         
0x9025:	call 0x1a89a                         
0x902a:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
0x9031:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
0x9037:	cmp dword ptr [rbp - 0x138], eax     
0x903d:	jl 0x9004                            
0x903f:	jmp 0xacc2                           #		|b|reak;
0x9044:	mov rdx, qword ptr [rip + 0x278cd]   #		|p|anel_action(src_panel, act_HOME, dst_panel, NULL, 1);
0x904b:	mov rax, qword ptr [rip + 0x278be]   
0x9052:	mov r8d, 1                           
0x9058:	mov ecx, 0                           
0x905d:	mov esi, 0x1f                        
0x9062:	mov rdi, rax                         
0x9065:	call 0x1a89a                         
0x906a:	jmp 0xacc2                           #		|b|reak;
0x906f:	mov rdx, qword ptr [rip + 0x278a2]   #		|p|anel_action(src_panel, act_END, dst_panel, NULL, 1);
0x9076:	mov rax, qword ptr [rip + 0x27893]   
0x907d:	mov r8d, 1                           
0x9083:	mov ecx, 0                           
0x9088:	mov esi, 0x20                        
0x908d:	mov rdi, rax                         
0x9090:	call 0x1a89a                         
0x9095:	jmp 0xacc2                           #		|b|reak;
0x909a:	mov eax, 0                           #		|r|eread();
0x909f:	call 0x772c                          
0x90a4:	mov rax, qword ptr [rip + 0x27865]   #		|t|ty_update_title(panel_get_path(src_panel));
0x90ab:	mov rdi, rax                         
0x90ae:	call 0x1504f                         
0x90b3:	mov rdi, rax                         
0x90b6:	call 0xd875                          
0x90bb:	mov edi, 0                           #		|r|efresh(0);
0x90c0:	mov eax, 0                           
0x90c5:	call 0x5367                          
0x90ca:	jmp 0xacc2                           #		|b|reak;
0x90cf:	mov eax, dword ptr [rbp - 0x158]     #		if ((repeat_count |&| 1) == 0)
0x90d5:	and eax, 1                           
0x90d8:	test eax, eax                        #		if |(|(repeat_count & 1) == 0)
0x90da:	jne 0x90e1                           
0x90dc:	jmp 0xacc2                           #		    |b|reak;
0x90e1:	mov edi, 0                           #		|a|larm(0);
0x90e6:	call 0x4a60                          
0x90eb:	mov rax, qword ptr [rip + 0x27806]   #		|t|ty_put_screen(screen);
0x90f2:	mov rdi, rax                         
0x90f5:	call 0xce57                          
0x90fa:	mov rax, qword ptr [rip + 0x25f87]   #		|s|tatus(CommandLineModeHelp, STATUS_OK, STATUS_CENTERED);
0x9101:	mov edx, 0                           
0x9106:	mov esi, 0                           
0x910b:	mov rdi, rax                         
0x910e:	call 0x107d0                         
0x9113:	mov eax, 0                           #		|t|ty_update();
0x9118:	call 0xb4b7                          
0x911d:	mov rax, qword ptr [rbp - 0xc0]      #		    |i|l_restore(saved_il);
0x9124:	mov rdi, rax                         
0x9127:	call 0xe319                          
0x912c:	mov eax, 0                           #		    saved_il = |i|l_save();
0x9131:	call 0xe205                          
0x9136:	mov qword ptr [rbp - 0xc0], rax      
0x913d:	mov eax, 0                           #		    |i|l_update();
0x9142:	call 0xf8eb                          
0x9147:	mov eax, 0                           #		    |i|l_update_point();
0x914c:	call 0xf768                          
0x9151:	mov eax, 0                           #		    |t|ty_update();
0x9156:	call 0xb4b7                          
0x915b:	lea rax, [rbp - 0xe0]                #		    |i|l_get_contents(&cmdln);
0x9162:	mov rdi, rax                         
0x9165:	call 0xfc3f                          
0x916a:	mov dword ptr [rip + 0x2776c], 1     #		    current_mode |=| GIT_TERMINAL_MODE;
0x9174:	jmp 0x918a                           #		    while |(|(ks = tty_get_key(&repeat_count)) == NULL)
0x9176:	mov rax, qword ptr [rip + 0x25f0b]   #			|r|eport_undefined_key(CommandLineModeHelp);
0x917d:	mov rdi, rax                         
0x9180:	mov eax, 0                           
0x9185:	call 0x54a2                          
0x918a:	lea rax, [rbp - 0x158]               #		    while ((ks = |t|ty_get_key(&repeat_count)) == NULL)
0x9191:	mov rdi, rax                         
0x9194:	call 0xc5ba                          
0x9199:	mov qword ptr [rbp - 0x78], rax      
0x919d:	cmp qword ptr [rbp - 0x78], 0        #		    while ((ks = tty_get_key(&repeat_count)) |=|= NULL)
0x91a2:	je 0x9176                            
0x91a4:	mov rax, qword ptr [rbp - 0x78]      #		    key = ks|-|>key_seq[0];
0x91a8:	mov rax, qword ptr [rax]             
0x91ab:	movzx eax, byte ptr [rax]            #		    key = ks->key_seq|[|0];
0x91ae:	movzx eax, al                        #		    key |=| ks->key_seq[0];
0x91b1:	mov dword ptr [rbp - 0x12c], eax     
0x91b7:	mov rax, qword ptr [rbp - 0x78]      #		    command |=| (command_t *)ks->aux_data;
0x91bb:	mov rax, qword ptr [rax + 0x10]      
0x91bf:	mov qword ptr [rbp - 0x70], rax      
0x91c3:	cmp qword ptr [rbp - 0x70], 0        #		    if |(|command && command->builtin)
0x91c8:	je 0x9212                            
0x91ca:	mov rax, qword ptr [rbp - 0x70]      #		    if (command && command|-|>builtin)
0x91ce:	movzx eax, byte ptr [rax + 0x1b]     
0x91d2:	test al, al                          #		    if (command |&|& command->builtin)
0x91d4:	je 0x9212                            
0x91d6:	mov rax, qword ptr [rbp - 0x70]      #			key = - 1 - (command|-|>name - builtin[0]) /
0x91da:	mov rax, qword ptr [rax]             
0x91dd:	lea rdx, [rip + 0x25ebc]             #			key = - 1 - (command->name |-| builtin[0]) /
0x91e4:	sub rax, rdx                         
0x91e7:	mov rcx, rax                         
0x91ea:	movabs rdx, 0xea0ea0ea0ea0ea1        #			key = - 1 - (command->name - builtin[0]) |/|
0x91f4:	mov rax, rcx                         
0x91f7:	imul rdx                             
0x91fa:	mov rax, rdx                         
0x91fd:	sar rax, 1                           
0x9200:	sar rcx, 0x3f                        
0x9204:	mov rdx, rcx                         
0x9207:	sub rax, rdx                         
0x920a:	not eax                              #			key |=| - 1 - (command->name - builtin[0]) /
0x920c:	mov dword ptr [rbp - 0x12c], eax     
0x9212:	cmp dword ptr [rbp - 0x12c], -7      #		    if |(|key == BUILTIN_tty_mode && (repeat_count & 1))
0x9219:	jne 0x924d                           
0x921b:	mov eax, dword ptr [rbp - 0x158]     #		    if (key == BUILTIN_tty_mode && (repeat_count |&| 1))
0x9221:	and eax, 1                           
0x9224:	test eax, eax                        #		    if (key == BUILTIN_tty_mode |&|& (repeat_count & 1))
0x9226:	je 0x924d                            
0x9228:	mov rax, qword ptr [rbp - 0xc0]      #			|i|l_free(saved_il);
0x922f:	mov rdi, rax                         
0x9232:	call 0xdf09                          
0x9237:	mov eax, 0                           #			saved_il = |i|l_save();
0x923c:	call 0xe205                          
0x9241:	mov qword ptr [rbp - 0xc0], rax      
0x9248:	jmp 0x95d4                           #			|b|reak;
0x924d:	cmp dword ptr [rbp - 0x12c], -0x3d   
0x9254:	je 0x92e5                            
0x925a:	cmp dword ptr [rbp - 0x12c], -0x3d   
0x9261:	jl 0x956f                            
0x9267:	cmp dword ptr [rbp - 0x12c], 7       
0x926e:	jg 0x956f                            
0x9274:	cmp dword ptr [rbp - 0x12c], -0x22   
0x927b:	jl 0x956f                            
0x9281:	mov eax, dword ptr [rbp - 0x12c]     
0x9287:	add eax, 0x22                        
0x928a:	cmp eax, 0x29                        
0x928d:	ja 0x956f                            
0x9293:	mov eax, eax                         
0x9295:	lea rdx, [rax*4]                     
0x929d:	lea rax, [rip + 0x1e8b0]             
0x92a4:	mov eax, dword ptr [rdx + rax]       
0x92a7:	cdqe                                 
0x92a9:	lea rdx, [rip + 0x1e8a4]             
0x92b0:	add rax, rdx                         
0x92b3:	jmp rax                              
0x92b6:	mov rax, qword ptr [rbp - 0xc0]      #			    |i|l_free(saved_il);
0x92bd:	mov rdi, rax                         
0x92c0:	call 0xdf09                          
0x92c5:	mov edi, 0                           #			    |i|l_kill_line(IL_DONT_STORE);
0x92ca:	call 0xed98                          
0x92cf:	mov eax, 0                           #			    saved_il = |i|l_save();
0x92d4:	call 0xe205                          
0x92d9:	mov qword ptr [rbp - 0xc0], rax      
0x92e0:	jmp 0x95c5                           #			    |b|reak;
0x92e5:	mov rax, qword ptr [rbp - 0xe0]      #			    if (cmdln|[|0])
0x92ec:	movzx eax, byte ptr [rax]            
0x92ef:	test al, al                          #			    if |(|cmdln[0])
0x92f1:	je 0x95c1                            
0x92f7:	mov rax, qword ptr [rbp - 0xc0]      #				|i|l_free(saved_il);
0x92fe:	mov rdi, rax                         
0x9301:	call 0xdf09                          
0x9306:	mov rax, qword ptr [rbp - 0xe0]      #				if (|h|istory_expand(cmdln, &output_string) < 0)
0x930d:	lea rdx, [rbp - 0xe8]                
0x9314:	mov rsi, rdx                         
0x9317:	mov rdi, rax                         
0x931a:	mov eax, 0                           
0x931f:	call 0x224f7                         
0x9324:	test eax, eax                        #				if |(|history_expand(cmdln, &output_string) < 0)
0x9326:	jns 0x9357                           
0x9328:	mov rax, qword ptr [rbp - 0xe8]      #				    |i|l_read_char(output_string, (char *)NULL,
0x932f:	mov edx, 0x1c                        
0x9334:	mov esi, 0                           
0x9339:	mov rdi, rax                         
0x933c:	call 0x5c09                          
0x9341:	mov eax, 0                           #				    saved_il = |i|l_save();
0x9346:	call 0xe205                          
0x934b:	mov qword ptr [rbp - 0xc0], rax      
0x9352:	jmp 0x95c5                           #				    |b|reak;
0x9357:	mov rax, qword ptr [rip + 0x2759a]   #				|t|ty_put_screen(screen);
0x935e:	mov rdi, rax                         
0x9361:	call 0xce57                          
0x9366:	mov edi, 0                           #				|i|l_kill_line(IL_DONT_STORE);
0x936b:	call 0xed98                          
0x9370:	mov rax, qword ptr [rbp - 0xe8]      #				|i|l_insert_text(output_string);
0x9377:	mov rdi, rax                         
0x937a:	call 0xf433                          
0x937f:	mov rax, qword ptr [rbp - 0xe8]      #				|t|ty_update_title(output_string);
0x9386:	mov rdi, rax                         
0x9389:	call 0xd875                          
0x938e:	mov rax, qword ptr [rbp - 0xe8]      #				|s|tart(output_string, 0);
0x9395:	mov esi, 0                           
0x939a:	mov rdi, rax                         
0x939d:	call 0x1f6f0                         
0x93a2:	mov rax, qword ptr [rip + 0x2754f]   #				|t|ty_get_screen(screen);
0x93a9:	mov rdi, rax                         
0x93ac:	call 0xce1e                          
0x93b1:	mov edi, 0                           #				|i|l_history(IL_RECORD);
0x93b6:	call 0xfd26                          
0x93bb:	mov rax, qword ptr [rip + 0x25cc6]   #				|s|tatus(CommandLineModeHelp,
0x93c2:	mov edx, 0                           
0x93c7:	mov esi, 0                           
0x93cc:	mov rdi, rax                         
0x93cf:	call 0x107d0                         
0x93d4:	mov edi, 0                           #				|i|l_kill_line(IL_DONT_STORE);
0x93d9:	call 0xed98                          
0x93de:	mov eax, 0                           #				saved_il = |i|l_save();
0x93e3:	call 0xe205                          
0x93e8:	mov qword ptr [rbp - 0xc0], rax      
0x93ef:	mov rax, qword ptr [rip + 0x2751a]   #				|t|ty_update_title(panel_get_path(src_panel));
0x93f6:	mov rdi, rax                         
0x93f9:	call 0x1504f                         
0x93fe:	mov rdi, rax                         
0x9401:	call 0xd875                          
0x9406:	mov eax, 0                           #				|t|ty_update();
0x940b:	call 0xb4b7                          
0x9410:	jmp 0x95c1                           #			    |b|reak;
0x9415:	mov rax, qword ptr [rbp - 0xc0]      #			    |i|l_free(saved_il);
0x941c:	mov rdi, rax                         
0x941f:	call 0xdf09                          
0x9424:	mov dword ptr [rbp - 0x138], 0       #			    for (i |=| 0; i < repeat_count; i++)
0x942e:	jmp 0x944b                           #			    |f|or (i = 0; i < repeat_count; i++)
0x9430:	mov edi, 1                           #				|i|l_history(IL_PREVIOUS);
0x9435:	call 0xfd26                          
0x943a:	mov eax, 0                           #				|t|ty_update();
0x943f:	call 0xb4b7                          
0x9444:	add dword ptr [rbp - 0x138], 1       #			    for (i = 0; i < repeat_count; i|+|+)
0x944b:	mov eax, dword ptr [rbp - 0x158]     #			    for (i = 0; i |<| repeat_count; i++)
0x9451:	cmp dword ptr [rbp - 0x138], eax     
0x9457:	jl 0x9430                            
0x9459:	mov eax, 0                           #			    saved_il = |i|l_save();
0x945e:	call 0xe205                          
0x9463:	mov qword ptr [rbp - 0xc0], rax      
0x946a:	jmp 0x95c5                           #			    |b|reak;
0x946f:	mov rax, qword ptr [rbp - 0xc0]      #			    |i|l_free(saved_il);
0x9476:	mov rdi, rax                         
0x9479:	call 0xdf09                          
0x947e:	mov dword ptr [rbp - 0x138], 0       #			    for (i |=| 0; i < repeat_count; i++)
0x9488:	jmp 0x94a5                           #			    |f|or (i = 0; i < repeat_count; i++)
0x948a:	mov edi, 2                           #				|i|l_history(IL_NEXT);
0x948f:	call 0xfd26                          
0x9494:	mov eax, 0                           #				|t|ty_update();
0x9499:	call 0xb4b7                          
0x949e:	add dword ptr [rbp - 0x138], 1       #			    for (i = 0; i < repeat_count; i|+|+)
0x94a5:	mov eax, dword ptr [rbp - 0x158]     #			    for (i = 0; i |<| repeat_count; i++)
0x94ab:	cmp dword ptr [rbp - 0x138], eax     
0x94b1:	jl 0x948a                            
0x94b3:	mov eax, 0                           #			    saved_il = |i|l_save();
0x94b8:	call 0xe205                          
0x94bd:	mov qword ptr [rbp - 0xc0], rax      
0x94c4:	jmp 0x95c5                           #			    |b|reak;
0x94c9:	mov edi, 0                           #			    |r|efresh(0);
0x94ce:	mov eax, 0                           
0x94d3:	call 0x5367                          
0x94d8:	mov rax, qword ptr [rip + 0x27419]   #			    |t|ty_put_screen(screen);
0x94df:	mov rdi, rax                         
0x94e2:	call 0xce57                          
0x94e7:	mov rax, qword ptr [rip + 0x25b9a]   #			    |s|tatus(CommandLineModeHelp,
0x94ee:	mov edx, 0                           
0x94f3:	mov esi, 0                           
0x94f8:	mov rdi, rax                         
0x94fb:	call 0x107d0                         
0x9500:	mov eax, 0                           #			    |t|ty_update();
0x9505:	call 0xb4b7                          
0x950a:	jmp 0x95c5                           #			    |b|reak;
0x950f:	mov eax, dword ptr [rip + 0x27413]   #			    if (ConfirmOnExit |=|= OFF ||
0x9515:	test eax, eax                        #			    if |(|ConfirmOnExit == OFF ||
0x9517:	je 0x953b                            
0x9519:	mov rax, qword ptr [rip + 0x273d0]   #				|i|l_read_char(exit_msg,"yn",IL_FREEZED) == 'y')
0x9520:	mov edx, 0                           
0x9525:	lea rcx, [rip + 0x1dc6d]             
0x952c:	mov rsi, rcx                         
0x952f:	mov rdi, rax                         
0x9532:	call 0x5c09                          
0x9537:	cmp al, 0x79                         #			    if (ConfirmOnExit == OFF ||||
0x9539:	jne 0x954a                           
0x953b:	mov dword ptr [rbp - 0x128], 1       #				app_end |=| 1;
0x9545:	jmp 0x95d4                           #				|g|oto end_tty_mode;
0x954a:	mov rax, qword ptr [rip + 0x25b37]   #			    |s|tatus(CommandLineModeHelp,
0x9551:	mov edx, 0                           
0x9556:	mov esi, 0                           
0x955b:	mov rdi, rax                         
0x955e:	call 0x107d0                         
0x9563:	mov eax, 0                           #			    |t|ty_update();
0x9568:	call 0xb4b7                          
0x956d:	jmp 0x95c5                           #			    |b|reak;
0x956f:	cmp dword ptr [rbp - 0x12c], 0       #			    if |(|key)
0x9576:	je 0x95c4                            
0x9578:	mov rax, qword ptr [rbp - 0xc0]      #				|i|l_free(saved_il);
0x957f:	mov rdi, rax                         
0x9582:	call 0xdf09                          
0x9587:	jmp 0x959b                           #				while |(|repeat_count--)
0x9589:	mov eax, dword ptr [rbp - 0x12c]     #				    |i|l_dispatch_commands(key, IL_MOVE|IL_EDIT);
0x958f:	mov esi, 3                           
0x9594:	mov edi, eax                         
0x9596:	call 0x56bd                          
0x959b:	mov eax, dword ptr [rbp - 0x158]     #				while (repeat_count|-|-)
0x95a1:	lea edx, [rax - 1]                   
0x95a4:	mov dword ptr [rbp - 0x158], edx     
0x95aa:	test eax, eax                        #				while (|r|epeat_count--)
0x95ac:	jne 0x9589                           
0x95ae:	mov eax, 0                           #				saved_il = |i|l_save();
0x95b3:	call 0xe205                          
0x95b8:	mov qword ptr [rbp - 0xc0], rax      
0x95bf:	jmp 0x95c4                           #			    |b|reak;
0x95c1:	nop                                  #			    |b|reak;
0x95c2:	jmp 0x95c5                           
0x95c4:	nop                                  #			    |b|reak;
0x95c5:	mov eax, 0                           #		    |s|tatus_update();
0x95ca:	call 0x106d4                         
0x95cf:	jmp 0x911d                           #		    |i|l_restore(saved_il);
0x95d4:	mov rax, qword ptr [rip + 0x27335]   #		|p|anel_no_optimizations(src_panel);
0x95db:	mov rdi, rax                         
0x95de:	call 0x110b0                         
0x95e3:	mov rax, qword ptr [rip + 0x2732e]   #		|p|anel_no_optimizations(dst_panel);
0x95ea:	mov rdi, rax                         
0x95ed:	call 0x110b0                         
0x95f2:	mov eax, 0                           #		|t|ty_touch();
0x95f7:	call 0xb9ce                          
0x95fc:	mov eax, 0                           #		|s|tatus_default();
0x9601:	call 0x10857                         
0x9606:	mov eax, 0                           #		|t|ty_update();
0x960b:	call 0xb4b7                          
0x9610:	mov eax, 0                           #		alarm(60 - |g|et_local_time()->tm_sec);
0x9615:	call 0x1e4bf                         
0x961a:	mov edx, dword ptr [rax]             #		alarm(60 - get_local_time()|-|>tm_sec);
0x961c:	mov eax, 0x3c                        #		alarm(60 |-| get_local_time()->tm_sec);
0x9621:	sub eax, edx                         
0x9623:	mov edi, eax                         #		|a|larm(60 - get_local_time()->tm_sec);
0x9625:	call 0x4a60                          
0x962a:	mov dword ptr [rip + 0x272ac], 0     #		current_mode |=| GIT_SCREEN_MODE;
0x9634:	cmp dword ptr [rbp - 0x128], 0       #		if |(|app_end)
0x963b:	je 0x82f4                            
0x9641:	jmp 0xacc2                           #		    |c|ontinue;
0x9646:	mov rdx, qword ptr [rip + 0x272cb]   #		|p|anel_action(src_panel, act_COPY, dst_panel, NULL, 1);
0x964d:	mov rax, qword ptr [rip + 0x272bc]   
0x9654:	mov r8d, 1                           
0x965a:	mov ecx, 0                           
0x965f:	mov esi, 2                           
0x9664:	mov rdi, rax                         
0x9667:	call 0x1a89a                         
0x966c:	jmp 0xacc2                           #		|b|reak;
0x9671:	mov rdx, qword ptr [rip + 0x272a0]   #		|p|anel_action(src_panel, act_MOVE, dst_panel, NULL, 1);
0x9678:	mov rax, qword ptr [rip + 0x27291]   
0x967f:	mov r8d, 1                           
0x9685:	mov ecx, 0                           
0x968a:	mov esi, 0x1a                        
0x968f:	mov rdi, rax                         
0x9692:	call 0x1a89a                         
0x9697:	jmp 0xacc2                           #		|b|reak;
0x969c:	mov rdx, qword ptr [rip + 0x27275]   #		|p|anel_action(src_panel, act_MKDIR, dst_panel, NULL, 1);
0x96a3:	mov rax, qword ptr [rip + 0x27266]   
0x96aa:	mov r8d, 1                           
0x96b0:	mov ecx, 0                           
0x96b5:	mov esi, 0x19                        
0x96ba:	mov rdi, rax                         
0x96bd:	call 0x1a89a                         
0x96c2:	jmp 0xacc2                           #		|b|reak;
0x96c7:	mov rdx, qword ptr [rip + 0x2724a]   #		|p|anel_action(src_panel, act_DELETE, dst_panel, NULL, 1);
0x96ce:	mov rax, qword ptr [rip + 0x2723b]   
0x96d5:	mov r8d, 1                           
0x96db:	mov ecx, 0                           
0x96e0:	mov esi, 3                           
0x96e5:	mov rdi, rax                         
0x96e8:	call 0x1a89a                         
0x96ed:	jmp 0xacc2                           #		|b|reak;
0x96f2:	mov eax, 0xfffffffd                  #		|p|anel_action(src_panel,
0x96f7:	sub eax, dword ptr [rbp - 0x12c]     
0x96fd:	mov esi, eax                         
0x96ff:	mov rax, qword ptr [rip + 0x2720a]   
0x9706:	mov r8d, 1                           
0x970c:	mov ecx, 0                           
0x9711:	mov edx, 0                           
0x9716:	mov rdi, rax                         
0x9719:	call 0x1a89a                         
0x971e:	jmp 0xacc2                           #		|b|reak;
0x9723:	mov eax, 0xfffffffe                  #		|p|anel_action(src_panel,
0x9728:	sub eax, dword ptr [rbp - 0x12c]     
0x972e:	mov esi, eax                         
0x9730:	mov rax, qword ptr [rip + 0x271d9]   
0x9737:	mov r8d, 1                           
0x973d:	mov ecx, 0                           
0x9742:	mov edx, 0                           
0x9747:	mov rdi, rax                         
0x974a:	call 0x1a89a                         
0x974f:	jmp 0xacc2                           #		|b|reak;
0x9754:	mov eax, dword ptr [rip + 0x271ce]   #		if (ConfirmOnExit |=|= OFF ||
0x975a:	test eax, eax                        #		if |(|ConfirmOnExit == OFF ||
0x975c:	je 0x9784                            
0x975e:	mov rax, qword ptr [rip + 0x2718b]   #		    |i|l_read_char(exit_msg, "yn", IL_FREEZED) == 'y')
0x9765:	mov edx, 0                           
0x976a:	lea rcx, [rip + 0x1da28]             
0x9771:	mov rsi, rcx                         
0x9774:	mov rdi, rax                         
0x9777:	call 0x5c09                          
0x977c:	cmp al, 0x79                         #		if (ConfirmOnExit == OFF ||||
0x977e:	jne 0xacc2                           
0x9784:	mov dword ptr [rbp - 0x128], 1       #		    app_end |=| 1;
0x978e:	jmp 0xacc2                           #		|b|reak;
0x9793:	mov rax, qword ptr [rip + 0x27176]   #		srcptr = |p|anel_get_current_file_name(src_panel);
0x979a:	mov rdi, rax                         
0x979d:	call 0x110ca                         
0x97a2:	mov qword ptr [rbp - 0x98], rax      
0x97a9:	mov rax, qword ptr [rbp - 0x98]      #		ptr = xmalloc(1 + 1 + |s|trlen(srcptr) + 1 + 1 + 1);
0x97b0:	mov rdi, rax                         
0x97b3:	call 0x4960                          
0x97b8:	add rax, 5                           #		ptr = |x|malloc(1 + 1 + strlen(srcptr) + 1 + 1 + 1);
0x97bc:	mov rdi, rax                         
0x97bf:	call 0x24650                         
0x97c4:	mov qword ptr [rbp - 0xa0], rax      
0x97cb:	mov rax, qword ptr [rbp - 0xe0]      #		len = |s|trlen(cmdln);
0x97d2:	mov rdi, rax                         
0x97d5:	call 0x4960                          
0x97da:	mov qword ptr [rbp - 0xd0], rax      
0x97e1:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
0x97e8:	mov rdi, rax                         
0x97eb:	call 0xdf09                          
0x97f0:	cmp qword ptr [rbp - 0xd0], 0        #		if |(|(len != 0) &&
0x97f8:	je 0x98b5                            
0x97fe:	mov rbx, qword ptr [rbp - 0xe0]      #		    ((cmdln|[|il_point() - 1] == '/') ||
0x9805:	mov eax, 0                           #		    ((cmdln[|i|l_point() - 1] == '/') ||
0x980a:	call 0xe380                          
0x980f:	sub rax, 1                           #		    ((cmdln|[|il_point() - 1] == '/') ||
0x9813:	add rax, rbx                         
0x9816:	movzx eax, byte ptr [rax]            
0x9819:	cmp al, 0x2f                         #		if ((len != 0) |&|&
0x981b:	je 0x983c                            
0x981d:	mov rbx, qword ptr [rbp - 0xe0]      #		     (cmdln|[|il_point() - 1] == ' ')))
0x9824:	mov eax, 0                           #		     (cmdln[|i|l_point() - 1] == ' ')))
0x9829:	call 0xe380                          
0x982e:	sub rax, 1                           #		     (cmdln|[|il_point() - 1] == ' ')))
0x9832:	add rax, rbx                         
0x9835:	movzx eax, byte ptr [rax]            
0x9838:	cmp al, 0x20                         #		    ((cmdln[il_point() - 1] == '/') ||||
0x983a:	jne 0x98b5                           
0x983c:	mov rax, qword ptr [rbp - 0x98]      #		    if (|n|eeds_quotes(srcptr, strlen(srcptr)))
0x9843:	mov rdi, rax                         
0x9846:	call 0x4960                          
0x984b:	mov rdx, rax                         
0x984e:	mov rax, qword ptr [rbp - 0x98]      
0x9855:	mov rsi, rdx                         
0x9858:	mov rdi, rax                         
0x985b:	call 0x1e61f                         
0x9860:	test eax, eax                        #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x9862:	je 0x988e                            
0x9864:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, "\"%s\" ", srcptr);
0x986b:	mov rax, qword ptr [rbp - 0xa0]      
0x9872:	lea rcx, [rip + 0x1dd76]             
0x9879:	mov rsi, rcx                         
0x987c:	mov rdi, rax                         
0x987f:	mov eax, 0                           
0x9884:	call 0x4dd0                          
0x9889:	jmp 0x9929                           #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x988e:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, "%s ", srcptr);
0x9895:	mov rax, qword ptr [rbp - 0xa0]      
0x989c:	lea rcx, [rip + 0x1dd52]             
0x98a3:	mov rsi, rcx                         
0x98a6:	mov rdi, rax                         
0x98a9:	mov eax, 0                           
0x98ae:	call 0x4dd0                          
0x98b3:	jmp 0x9929                           #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x98b5:	mov rax, qword ptr [rbp - 0x98]      #		    if (|n|eeds_quotes(srcptr, strlen(srcptr)))
0x98bc:	mov rdi, rax                         
0x98bf:	call 0x4960                          
0x98c4:	mov rdx, rax                         
0x98c7:	mov rax, qword ptr [rbp - 0x98]      
0x98ce:	mov rsi, rdx                         
0x98d1:	mov rdi, rax                         
0x98d4:	call 0x1e61f                         
0x98d9:	test eax, eax                        #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x98db:	je 0x9904                            
0x98dd:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, " \"%s\" ", srcptr);
0x98e4:	mov rax, qword ptr [rbp - 0xa0]      
0x98eb:	lea rcx, [rip + 0x1dd07]             
0x98f2:	mov rsi, rcx                         
0x98f5:	mov rdi, rax                         
0x98f8:	mov eax, 0                           
0x98fd:	call 0x4dd0                          
0x9902:	jmp 0x9929                           
0x9904:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, " %s ", srcptr);
0x990b:	mov rax, qword ptr [rbp - 0xa0]      
0x9912:	lea rcx, [rip + 0x1dce7]             
0x9919:	mov rsi, rcx                         
0x991c:	mov rdi, rax                         
0x991f:	mov eax, 0                           
0x9924:	call 0x4dd0                          
0x9929:	mov rax, qword ptr [rbp - 0xa0]      #		ptrlen = |s|trlen(ptr);
0x9930:	mov rdi, rax                         
0x9933:	call 0x4960                          
0x9938:	mov qword ptr [rbp - 0x38], rax      
0x993c:	mov rax, qword ptr [rbp - 0xa0]      #		|t|oprintable(ptr, strlen(ptr));
0x9943:	mov rdi, rax                         
0x9946:	call 0x4960                          
0x994b:	mov rdx, rax                         
0x994e:	mov rax, qword ptr [rbp - 0xa0]      
0x9955:	mov rsi, rdx                         
0x9958:	mov rdi, rax                         
0x995b:	call 0x1e5b1                         
0x9960:	mov rax, qword ptr [rbp - 0xa0]      #		|i|l_insert_text(ptr);
0x9967:	mov rdi, rax                         
0x996a:	call 0xf433                          
0x996f:	mov rax, qword ptr [rbp - 0xa0]      #		|x|free(ptr);
0x9976:	mov rdi, rax                         
0x9979:	call 0x1eeae                         
0x997e:	mov eax, 0                           #		saved_il = |i|l_save();
0x9983:	call 0xe205                          
0x9988:	mov qword ptr [rbp - 0xc0], rax      
0x998f:	jmp 0xacc2                           #		|b|reak;
0x9994:	mov rax, qword ptr [rip + 0x26f7d]   #		srcptr = dst_panel|-|>path;
0x999b:	mov rax, qword ptr [rax + 0x18]      #		srcptr |=| dst_panel->path;
0x999f:	mov qword ptr [rbp - 0x98], rax      
0x99a6:	mov rax, qword ptr [rip + 0x26f6b]   #		ptr = xmalloc(1 + 1 + dst_panel|-|>pathlen + 1 + 1 + 1);
0x99ad:	mov rax, qword ptr [rax + 0x78]      
0x99b1:	add rax, 5                           #		ptr = |x|malloc(1 + 1 + dst_panel->pathlen + 1 + 1 + 1);
0x99b5:	mov rdi, rax                         
0x99b8:	call 0x24650                         
0x99bd:	mov qword ptr [rbp - 0xa0], rax      
0x99c4:	jmp 0x97cb                           #		|g|oto copy_to_cmdln;
0x99c9:	mov rax, qword ptr [rbp - 0xe0]      #		len = |s|trlen(cmdln);
0x99d0:	mov rdi, rax                         
0x99d3:	call 0x4960                          
0x99d8:	mov qword ptr [rbp - 0xd0], rax      
0x99df:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
0x99e6:	mov rdi, rax                         
0x99e9:	call 0xdf09                          
0x99ee:	mov rax, qword ptr [rip + 0x26f1b]   #		|p|anel_init_iterator(src_panel);
0x99f5:	mov rdi, rax                         
0x99f8:	call 0x13121                         
0x99fd:	jmp 0x9b19                           #		while |(|(entry = panel_get_next(src_panel)) != -1)
0x9a02:	mov rax, qword ptr [rip + 0x26f07]   #		    srcptr = src_panel|-|>dir_entry[entry].name;
0x9a09:	mov rcx, qword ptr [rax + 0x38]      
0x9a0d:	mov eax, dword ptr [rbp - 0x100]     #		    srcptr = src_panel->dir_entry|[|entry].name;
0x9a13:	movsxd rdx, eax                      
0x9a16:	mov rax, rdx                         
0x9a19:	shl rax, 2                           
0x9a1d:	add rax, rdx                         
0x9a20:	shl rax, 4                           
0x9a24:	add rax, rcx                         
0x9a27:	mov rax, qword ptr [rax]             #		    srcptr |=| src_panel->dir_entry[entry].name;
0x9a2a:	mov qword ptr [rbp - 0x98], rax      
0x9a31:	mov rax, qword ptr [rbp - 0x98]      #		    ptr = xmalloc(1 + 1 + |s|trlen(srcptr) + 1 + 1 + 1);
0x9a38:	mov rdi, rax                         
0x9a3b:	call 0x4960                          
0x9a40:	add rax, 5                           #		    ptr = |x|malloc(1 + 1 + strlen(srcptr) + 1 + 1 + 1);
0x9a44:	mov rdi, rax                         
0x9a47:	call 0x24650                         
0x9a4c:	mov qword ptr [rbp - 0xa0], rax      
0x9a53:	mov rax, qword ptr [rbp - 0x98]      #		    if (|n|eeds_quotes(srcptr, strlen(srcptr)))
0x9a5a:	mov rdi, rax                         
0x9a5d:	call 0x4960                          
0x9a62:	mov rdx, rax                         
0x9a65:	mov rax, qword ptr [rbp - 0x98]      
0x9a6c:	mov rsi, rdx                         
0x9a6f:	mov rdi, rax                         
0x9a72:	call 0x1e61f                         
0x9a77:	test eax, eax                        #		    if |(|needs_quotes(srcptr, strlen(srcptr)))
0x9a79:	je 0x9aa2                            
0x9a7b:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, " \"%s\"", srcptr);
0x9a82:	mov rax, qword ptr [rbp - 0xa0]      
0x9a89:	lea rcx, [rip + 0x1db75]             
0x9a90:	mov rsi, rcx                         
0x9a93:	mov rdi, rax                         
0x9a96:	mov eax, 0                           
0x9a9b:	call 0x4dd0                          
0x9aa0:	jmp 0x9ac7                           
0x9aa2:	mov rdx, qword ptr [rbp - 0x98]      #			|s|printf(ptr, " %s", srcptr);
0x9aa9:	mov rax, qword ptr [rbp - 0xa0]      
0x9ab0:	lea rcx, [rip + 0x1db54]             
0x9ab7:	mov rsi, rcx                         
0x9aba:	mov rdi, rax                         
0x9abd:	mov eax, 0                           
0x9ac2:	call 0x4dd0                          
0x9ac7:	mov rax, qword ptr [rbp - 0xa0]      #		    ptrlen = |s|trlen(ptr);
0x9ace:	mov rdi, rax                         
0x9ad1:	call 0x4960                          
0x9ad6:	mov qword ptr [rbp - 0x38], rax      
0x9ada:	mov rax, qword ptr [rbp - 0x38]      #		    len |+|= ptrlen;
0x9ade:	add qword ptr [rbp - 0xd0], rax      
0x9ae5:	mov rdx, qword ptr [rbp - 0x38]      #		    |t|oprintable(ptr, ptrlen);
0x9ae9:	mov rax, qword ptr [rbp - 0xa0]      
0x9af0:	mov rsi, rdx                         
0x9af3:	mov rdi, rax                         
0x9af6:	call 0x1e5b1                         
0x9afb:	mov rax, qword ptr [rbp - 0xa0]      #		    |i|l_insert_text(ptr);
0x9b02:	mov rdi, rax                         
0x9b05:	call 0xf433                          
0x9b0a:	mov rax, qword ptr [rbp - 0xa0]      #		    |x|free(ptr);
0x9b11:	mov rdi, rax                         
0x9b14:	call 0x1eeae                         
0x9b19:	mov rax, qword ptr [rip + 0x26df0]   #		while ((entry = |p|anel_get_next(src_panel)) != -1)
0x9b20:	mov rdi, rax                         
0x9b23:	call 0x13149                         
0x9b28:	mov dword ptr [rbp - 0x100], eax     
0x9b2e:	cmp dword ptr [rbp - 0x100], -1      #		while ((entry = panel_get_next(src_panel)) |!|= -1)
0x9b35:	jne 0x9a02                           
0x9b3b:	lea rax, [rip + 0x1dacd]             #		|i|l_insert_text(" ");
0x9b42:	mov rdi, rax                         
0x9b45:	call 0xf433                          
0x9b4a:	mov eax, 0                           #		saved_il = |i|l_save();
0x9b4f:	call 0xe205                          
0x9b54:	mov qword ptr [rbp - 0xc0], rax      
0x9b5b:	jmp 0xacc2                           #		|b|reak;
0x9b60:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
0x9b67:	mov rdi, rax                         
0x9b6a:	call 0xdf09                          
0x9b6f:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
0x9b79:	jmp 0x9b96                           #		|f|or (i = 0; i < repeat_count; i++)
0x9b7b:	mov edi, 1                           #		    |i|l_history(IL_PREVIOUS);
0x9b80:	call 0xfd26                          
0x9b85:	mov eax, 0                           #		    |t|ty_update();
0x9b8a:	call 0xb4b7                          
0x9b8f:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
0x9b96:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
0x9b9c:	cmp dword ptr [rbp - 0x138], eax     
0x9ba2:	jl 0x9b7b                            
0x9ba4:	mov eax, 0                           #		saved_il = |i|l_save();
0x9ba9:	call 0xe205                          
0x9bae:	mov qword ptr [rbp - 0xc0], rax      
0x9bb5:	jmp 0xacc2                           #		|b|reak;
0x9bba:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
0x9bc1:	mov rdi, rax                         
0x9bc4:	call 0xdf09                          
0x9bc9:	mov dword ptr [rbp - 0x138], 0       #		for (i |=| 0; i < repeat_count; i++)
0x9bd3:	jmp 0x9bf0                           #		|f|or (i = 0; i < repeat_count; i++)
0x9bd5:	mov edi, 2                           #		    |i|l_history(IL_NEXT);
0x9bda:	call 0xfd26                          
0x9bdf:	mov eax, 0                           #		    |t|ty_update();
0x9be4:	call 0xb4b7                          
0x9be9:	add dword ptr [rbp - 0x138], 1       #		for (i = 0; i < repeat_count; i|+|+)
0x9bf0:	mov eax, dword ptr [rbp - 0x158]     #		for (i = 0; i |<| repeat_count; i++)
0x9bf6:	cmp dword ptr [rbp - 0x138], eax     
0x9bfc:	jl 0x9bd5                            
0x9bfe:	mov eax, 0                           #		saved_il = |i|l_save();
0x9c03:	call 0xe205                          
0x9c08:	mov qword ptr [rbp - 0xc0], rax      
0x9c0f:	jmp 0xacc2                           #		|b|reak;
0x9c14:	mov eax, dword ptr [rbp - 0x158]     #		if ((repeat_count |&| 1) == 0)
0x9c1a:	and eax, 1                           
0x9c1d:	test eax, eax                        #		if |(|(repeat_count & 1) == 0)
0x9c1f:	jne 0x9c26                           
0x9c21:	jmp 0xacc2                           #		    |b|reak;
0x9c26:	mov eax, dword ptr [rip + 0x253fc]   #		if (|!|two_panel_mode)
0x9c2c:	test eax, eax                        #		if |(|!two_panel_mode)
0x9c2e:	jne 0x9c35                           
0x9c30:	jmp 0xacc2                           #		    |b|reak;
0x9c35:	mov rax, qword ptr [rip + 0x26cd4]   #		|p|anel_no_optimizations(src_panel);
0x9c3c:	mov rdi, rax                         
0x9c3f:	call 0x110b0                         
0x9c44:	mov rax, qword ptr [rip + 0x26ccd]   #		|p|anel_no_optimizations(dst_panel);
0x9c4b:	mov rdi, rax                         
0x9c4e:	call 0x110b0                         
0x9c53:	mov rdx, qword ptr [rip + 0x26cbe]   #		|p|anel_action(src_panel, act_SWITCH, dst_panel, NULL, 1);
0x9c5a:	mov rax, qword ptr [rip + 0x26caf]   
0x9c61:	mov r8d, 1                           
0x9c67:	mov ecx, 0                           
0x9c6c:	mov esi, 0x23                        
0x9c71:	mov rdi, rax                         
0x9c74:	call 0x1a89a                         
0x9c79:	mov rax, qword ptr [rip + 0x26c90]   #		|p|anel_update(src_panel);
0x9c80:	mov rdi, rax                         
0x9c83:	call 0x14e6a                         
0x9c88:	mov rax, qword ptr [rip + 0x26c89]   #		|p|anel_update(dst_panel);
0x9c8f:	mov rdi, rax                         
0x9c92:	call 0x14e6a                         
0x9c97:	jmp 0xacc2                           #		|b|reak;
0x9c9c:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line("Directory: ", &input, (char *)NULL,
0x9ca0:	mov rdx, qword ptr [rax + 0x28]      
0x9ca4:	lea rax, [rbp - 0xd8]                
0x9cab:	mov rcx, rdx                         
0x9cae:	mov edx, 0                           
0x9cb3:	mov rsi, rax                         
0x9cb6:	lea rax, [rip + 0x1d954]             
0x9cbd:	mov rdi, rax                         
0x9cc0:	call 0x5efb                          
0x9cc5:	test rax, rax                        #		if |(|il_read_line("Directory: ", &input, (char *)NULL,
0x9cc8:	je 0xacc2                            
0x9cce:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
0x9cd5:	movzx eax, byte ptr [rax]            
0x9cd8:	test al, al                          #		    if |(|input[0] == 0)
0x9cda:	jne 0x9ce1                           
0x9cdc:	jmp 0xacc2                           #			|b|reak;
0x9ce1:	mov rax, qword ptr [rbp - 0xd8]      #				 expanded_input = |t|ilde_expand(input), 1);
0x9ce8:	mov rdi, rax                         
0x9ceb:	mov eax, 0                           
0x9cf0:	call 0x1fb51                         
0x9cf5:	mov qword ptr [rbp - 0x40], rax      
0x9cf9:	mov rdx, qword ptr [rip + 0x26c18]   #		    |p|anel_action(src_panel, act_CHDIR, dst_panel,
0x9d00:	mov rax, qword ptr [rip + 0x26c09]   
0x9d07:	mov rcx, qword ptr [rbp - 0x40]      
0x9d0b:	mov r8d, 1                           
0x9d11:	mov esi, 0x21                        
0x9d16:	mov rdi, rax                         
0x9d19:	call 0x1a89a                         
0x9d1e:	mov rax, qword ptr [rip + 0x26beb]   #		    |d|ir_history_add(panel_get_path(src_panel));
0x9d25:	mov rdi, rax                         
0x9d28:	call 0x1504f                         
0x9d2d:	mov rdi, rax                         
0x9d30:	mov eax, 0                           
0x9d35:	call 0x6598                          
0x9d3a:	mov rax, qword ptr [rbp - 0x40]      #		    |x|free(expanded_input);
0x9d3e:	mov rdi, rax                         
0x9d41:	call 0x1eeae                         
0x9d46:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
0x9d4d:	mov rdi, rax                         
0x9d50:	call 0x1eeae                         
0x9d55:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
0x9d60:	mov rax, qword ptr [rbp - 0xc0]      #		    |i|l_restore(saved_il);
0x9d67:	mov rdi, rax                         
0x9d6a:	call 0xe319                          
0x9d6f:	mov eax, 0                           #		    |s|et_prompt();
0x9d74:	call 0x769b                          
0x9d79:	mov eax, 0                           #		    saved_il = |i|l_save();
0x9d7e:	call 0xe205                          
0x9d83:	mov qword ptr [rbp - 0xc0], rax      
0x9d8a:	mov rax, qword ptr [rip + 0x26b7f]   #		    |t|ty_update_title(panel_get_path(src_panel));
0x9d91:	mov rdi, rax                         
0x9d94:	call 0x1504f                         
0x9d99:	mov rdi, rax                         
0x9d9c:	call 0xd875                          
0x9da1:	jmp 0xacc2                           #		|b|reak;
0x9da6:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line(
0x9daa:	mov rdx, qword ptr [rax + 0x28]      
0x9dae:	lea rax, [rbp - 0xd8]                
0x9db5:	mov rcx, rdx                         
0x9db8:	mov edx, 0                           
0x9dbd:	mov rsi, rax                         
0x9dc0:	lea rax, [rip + 0x1d859]             
0x9dc7:	mov rdi, rax                         
0x9dca:	call 0x5efb                          
0x9dcf:	test rax, rax                        #		if |(|il_read_line(
0x9dd2:	je 0xacc2                            
0x9dd8:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
0x9ddf:	movzx eax, byte ptr [rax]            
0x9de2:	test al, al                          #		    if |(|input[0] == 0)
0x9de4:	jne 0x9deb                           
0x9de6:	jmp 0xacc2                           #			|b|reak;
0x9deb:	mov rcx, qword ptr [rbp - 0xd8]      #		    |p|anel_action(src_panel, act_PATTERN_SELECT,
0x9df2:	mov rdx, qword ptr [rip + 0x26b1f]   
0x9df9:	mov rax, qword ptr [rip + 0x26b10]   
0x9e00:	mov r8d, 1                           
0x9e06:	mov esi, 0x24                        
0x9e0b:	mov rdi, rax                         
0x9e0e:	call 0x1a89a                         
0x9e13:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
0x9e1a:	mov rdi, rax                         
0x9e1d:	call 0x1eeae                         
0x9e22:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
0x9e2d:	jmp 0xacc2                           #		|b|reak;
0x9e32:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line(
0x9e36:	mov rdx, qword ptr [rax + 0x28]      
0x9e3a:	lea rax, [rbp - 0xd8]                
0x9e41:	mov rcx, rdx                         
0x9e44:	mov edx, 0                           
0x9e49:	mov rsi, rax                         
0x9e4c:	lea rax, [rip + 0x1d7fd]             
0x9e53:	mov rdi, rax                         
0x9e56:	call 0x5efb                          
0x9e5b:	test rax, rax                        #		if |(|il_read_line(
0x9e5e:	je 0xacc2                            
0x9e64:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
0x9e6b:	movzx eax, byte ptr [rax]            
0x9e6e:	test al, al                          #		    if |(|input[0] == 0)
0x9e70:	jne 0x9e77                           
0x9e72:	jmp 0xacc2                           #			|b|reak;
0x9e77:	mov rcx, qword ptr [rbp - 0xd8]      #		    |p|anel_action(src_panel, act_PATTERN_UNSELECT,
0x9e7e:	mov rdx, qword ptr [rip + 0x26a93]   
0x9e85:	mov rax, qword ptr [rip + 0x26a84]   
0x9e8c:	mov r8d, 1                           
0x9e92:	mov esi, 0x25                        
0x9e97:	mov rdi, rax                         
0x9e9a:	call 0x1a89a                         
0x9e9f:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
0x9ea6:	mov rdi, rax                         
0x9ea9:	call 0x1eeae                         
0x9eae:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
0x9eb9:	jmp 0xacc2                           #		|b|reak;
0x9ebe:	mov rax, qword ptr [rip + 0x26a53]   #			     dst_panel|-|>path, 1);
0x9ec5:	mov rcx, qword ptr [rax + 0x18]      
0x9ec9:	mov rdx, qword ptr [rip + 0x26a48]   #		|p|anel_action(src_panel, act_CHDIR, dst_panel,
0x9ed0:	mov rax, qword ptr [rip + 0x26a39]   
0x9ed7:	mov r8d, 1                           
0x9edd:	mov esi, 0x21                        
0x9ee2:	mov rdi, rax                         
0x9ee5:	call 0x1a89a                         
0x9eea:	mov rax, qword ptr [rip + 0x26a1f]   #		|d|ir_history_add(panel_get_path(src_panel));
0x9ef1:	mov rdi, rax                         
0x9ef4:	call 0x1504f                         
0x9ef9:	mov rdi, rax                         
0x9efc:	mov eax, 0                           
0x9f01:	call 0x6598                          
0x9f06:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
0x9f0d:	mov rdi, rax                         
0x9f10:	call 0xdf09                          
0x9f15:	mov eax, 0                           #		|s|et_prompt();
0x9f1a:	call 0x769b                          
0x9f1f:	mov eax, 0                           #		saved_il = |i|l_save();
0x9f24:	call 0xe205                          
0x9f29:	mov qword ptr [rbp - 0xc0], rax      
0x9f30:	mov rax, qword ptr [rip + 0x269d9]   #		|t|ty_update_title(panel_get_path(src_panel));
0x9f37:	mov rdi, rax                         
0x9f3a:	call 0x1504f                         
0x9f3f:	mov rdi, rax                         
0x9f42:	call 0xd875                          
0x9f47:	jmp 0xacc2                           #		|b|reak;
0x9f4c:	mov rax, qword ptr [rip + 0x269bd]   #			     src_panel|-|>path, 1);
0x9f53:	mov rcx, qword ptr [rax + 0x18]      
0x9f57:	mov rdx, qword ptr [rip + 0x269b2]   #		|p|anel_action(dst_panel, act_CHDIR, src_panel,
0x9f5e:	mov rax, qword ptr [rip + 0x269b3]   
0x9f65:	mov r8d, 1                           
0x9f6b:	mov esi, 0x21                        
0x9f70:	mov rdi, rax                         
0x9f73:	call 0x1a89a                         
0x9f78:	mov rax, qword ptr [rip + 0x26999]   #		|d|ir_history_add(panel_get_path(dst_panel));
0x9f7f:	mov rdi, rax                         
0x9f82:	call 0x1504f                         
0x9f87:	mov rdi, rax                         
0x9f8a:	mov eax, 0                           
0x9f8f:	call 0x6598                          
0x9f94:	jmp 0xacc2                           #		|b|reak;
0x9f99:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line("Scroll step: ", &input, (char *)NULL,
0x9f9d:	mov rdx, qword ptr [rax + 0x28]      
0x9fa1:	lea rax, [rbp - 0xd8]                
0x9fa8:	mov rcx, rdx                         
0x9fab:	mov edx, 0                           
0x9fb0:	mov rsi, rax                         
0x9fb3:	lea rax, [rip + 0x1d6c4]             
0x9fba:	mov rdi, rax                         
0x9fbd:	call 0x5efb                          
0x9fc2:	test rax, rax                        #		if |(|il_read_line("Scroll step: ", &input, (char *)NULL,
0x9fc5:	je 0xacc2                            
0x9fcb:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
0x9fd2:	movzx eax, byte ptr [rax]            
0x9fd5:	test al, al                          #		    if |(|input[0] == 0)
0x9fd7:	jne 0x9fde                           
0x9fd9:	jmp 0xacc2                           #			|b|reak;
0x9fde:	mov rcx, qword ptr [rbp - 0xd8]      #		    |p|anel_action(src_panel, act_SET_SCROLL_STEP,
0x9fe5:	mov rdx, qword ptr [rip + 0x2692c]   
0x9fec:	mov rax, qword ptr [rip + 0x2691d]   
0x9ff3:	mov r8d, 1                           
0x9ff9:	mov esi, 0x26                        
0x9ffe:	mov rdi, rax                         
0xa001:	call 0x1a89a                         
0xa006:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
0xa00d:	mov rdi, rax                         
0xa010:	call 0x1eeae                         
0xa015:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
0xa020:	jmp 0xacc2                           #		|b|reak;
0xa025:	mov dword ptr [rbp - 0x148], 0       #		previous_isearch_failed |=| 0;
0xa02f:	mov dword ptr [rbp - 0x144], 0       #		resuming_previous_isearch |=| 0;
0xa039:	mov ecx, 0                           #		|i|l_isearch("I-search backward: ", (char **)NULL,
0xa03e:	mov edx, 0                           
0xa043:	mov esi, 0                           
0xa048:	lea rax, [rip + 0x1d63d]             
0xa04f:	mov rdi, rax                         
0xa052:	call 0x6267                          
0xa057:	mov rdx, qword ptr [rip + 0x268ba]   #		|p|anel_action(src_panel, act_ISEARCH_BEGIN,
0xa05e:	mov rax, qword ptr [rip + 0x268ab]   
0xa065:	mov r8d, 1                           
0xa06b:	mov ecx, 0                           
0xa070:	mov esi, 0x27                        
0xa075:	mov rdi, rax                         
0xa078:	call 0x1a89a                         
0xa07d:	lea rdx, [rbp - 0x30]                #		    if (|i|l_isearch((char *)NULL, &input, IL_ISEARCH_BACKWARD,
0xa081:	lea rax, [rbp - 0xd8]                
0xa088:	mov rcx, rdx                         
0xa08b:	mov edx, 1                           
0xa090:	mov rsi, rax                         
0xa093:	mov edi, 0                           
0xa098:	call 0x6267                          
0xa09d:	test rax, rax                        #		    if |(|il_isearch((char *)NULL, &input, IL_ISEARCH_BACKWARD,
0xa0a0:	jne 0xa0b5                           
0xa0a2:	cmp qword ptr [rbp - 0x90], 0        #		if |(|search_string)
0xa0aa:	jne 0xa248                           
0xa0b0:	jmp 0xa257                           
0xa0b5:	mov rax, qword ptr [rbp - 0xd8]      #		    if (strlen(input) |=|= 0 &&
0xa0bc:	movzx eax, byte ptr [rax]            
0xa0bf:	test al, al                          #		    if |(|strlen(input) == 0 &&
0xa0c1:	jne 0xa123                           
0xa0c3:	cmp qword ptr [rbp - 0x90], 0        #		    if (strlen(input) == 0 |&|&
0xa0cb:	je 0xa123                            
0xa0cd:	mov rax, qword ptr [rbp - 0x90]      #			search_string |&|& strlen(search_string))
0xa0d4:	movzx eax, byte ptr [rax]            
0xa0d7:	test al, al                          
0xa0d9:	je 0xa123                            
0xa0db:	mov rax, qword ptr [rbp - 0xd8]      #			|x|free(input);
0xa0e2:	mov rdi, rax                         
0xa0e5:	call 0x1eeae                         
0xa0ea:	mov rax, qword ptr [rbp - 0x90]      #			input = |s|trdup(search_string);
0xa0f1:	mov rdi, rax                         
0xa0f4:	call 0x4e40                          
0xa0f9:	mov qword ptr [rbp - 0xd8], rax      #			input |=| strdup(search_string);
0xa100:	mov rax, qword ptr [rbp - 0xd8]      #			|i|l_insert_text(input);
0xa107:	mov rdi, rax                         
0xa10a:	call 0xf433                          
0xa10f:	mov dword ptr [rbp - 0x144], 1       #			resuming_previous_isearch |=| 1;
0xa119:	mov dword ptr [rbp - 0x148], 0       #			previous_isearch_failed |=| 0;
0xa123:	mov eax, dword ptr [rbp - 0x30]      #		    if (iai|.|action == IL_ISEARCH_ACTION_RETRY &&
0xa126:	cmp eax, 2                           #		    if |(|iai.action == IL_ISEARCH_ACTION_RETRY &&
0xa129:	jne 0xa152                           
0xa12b:	cmp dword ptr [rbp - 0x148], 0       #		    if (iai.action == IL_ISEARCH_ACTION_RETRY |&|&
0xa132:	je 0xa152                            
0xa134:	mov rax, qword ptr [rip + 0x267d5]   #			|p|anel_set_wrapped_isearch_flag(src_panel, 1);
0xa13b:	mov esi, 1                           
0xa140:	mov rdi, rax                         
0xa143:	call 0x11460                         
0xa148:	mov dword ptr [rbp - 0x148], 0       #			previous_isearch_failed |=| 0;
0xa152:	mov rax, qword ptr [rbp - 0xd8]      #		    iai.string |=| input;
0xa159:	mov qword ptr [rbp - 0x28], rax      
0xa15d:	mov rdx, qword ptr [rip + 0x267b4]   #		    |p|anel_action(src_panel, act_ISEARCH_BACKWARD,
0xa164:	mov rax, qword ptr [rip + 0x267a5]   
0xa16b:	lea rcx, [rbp - 0x30]                
0xa16f:	mov r8d, 1                           
0xa175:	mov esi, 0x28                        
0xa17a:	mov rdi, rax                         
0xa17d:	call 0x1a89a                         
0xa182:	mov eax, dword ptr [rbp - 0x30]      #		    if (iai|.|action == IL_ISEARCH_ACTION_FAILED)
0xa185:	cmp eax, -1                          #		    if |(|iai.action == IL_ISEARCH_ACTION_FAILED)
0xa188:	jne 0xa1a3                           
0xa18a:	mov dword ptr [rbp - 0x148], 1       #			previous_isearch_failed |=| 1;
0xa194:	mov eax, 0                           #			|t|ty_beep();
0xa199:	call 0xbfbf                          
0xa19e:	jmp 0xa07d                           
0xa1a3:	mov dword ptr [rbp - 0x120], 0       #			int |u|pdate = 0;
0xa1ad:	cmp dword ptr [rbp - 0x144], 0       #			if |(|resuming_previous_isearch)
0xa1b4:	je 0xa1ec                            
0xa1b6:	mov rbx, qword ptr [rbp - 0x20]      #			    if (iai|.|length < strlen(search_string))
0xa1ba:	mov rax, qword ptr [rbp - 0x90]      #			    if (iai.length < |s|trlen(search_string))
0xa1c1:	mov rdi, rax                         
0xa1c4:	call 0x4960                          
0xa1c9:	cmp rbx, rax                         #			    if |(|iai.length < strlen(search_string))
0xa1cc:	jae 0xa1ec                           
0xa1ce:	mov edi, 0                           #				|i|l_kill_line(0);
0xa1d3:	call 0xed98                          
0xa1d8:	mov dword ptr [rbp - 0x144], 0       #				resuming_previous_isearch |=| 0;
0xa1e2:	mov dword ptr [rbp - 0x120], 1       #				update |=| 1;
0xa1ec:	mov rbx, qword ptr [rbp - 0x20]      #			if (iai|.|length < strlen(input))
0xa1f0:	mov rax, qword ptr [rbp - 0xd8]      #			if (iai.length < |s|trlen(input))
0xa1f7:	mov rdi, rax                         
0xa1fa:	call 0x4960                          
0xa1ff:	cmp rbx, rax                         #			if |(|iai.length < strlen(input))
0xa202:	jae 0xa218                           
0xa204:	mov eax, 0                           #			    |i|l_backward_delete_char();
0xa209:	call 0xea22                          
0xa20e:	mov dword ptr [rbp - 0x120], 1       #			    update |=| 1;
0xa218:	cmp dword ptr [rbp - 0x120], 0       #			if |(|update)
0xa21f:	je 0xa07d                            
0xa225:	mov eax, 0                           #			    |i|l_update();
0xa22a:	call 0xf8eb                          
0xa22f:	mov eax, 0                           #			    |i|l_update_point();
0xa234:	call 0xf768                          
0xa239:	mov eax, 0                           #			    |t|ty_update();
0xa23e:	call 0xb4b7                          
0xa243:	jmp 0xa07d                           #		|{|
0xa248:	mov rax, qword ptr [rbp - 0x90]      #		    |x|free(search_string);
0xa24f:	mov rdi, rax                         
0xa252:	call 0x1eeae                         
0xa257:	mov rax, qword ptr [rbp - 0xd8]      #		if (input |=|= NULL)
0xa25e:	test rax, rax                        #		if |(|input == NULL)
0xa261:	jne 0xa268                           
0xa263:	jmp 0xacc2                           #		    |b|reak;
0xa268:	mov rax, qword ptr [rbp - 0xd8]      #		search_string = |s|trdup(input);
0xa26f:	mov rdi, rax                         
0xa272:	call 0x4e40                          
0xa277:	mov qword ptr [rbp - 0x90], rax      
0xa27e:	mov rdx, qword ptr [rip + 0x26693]   #		|p|anel_action(src_panel, act_ISEARCH_END, dst_panel, NULL, 1);
0xa285:	mov rax, qword ptr [rip + 0x26684]   
0xa28c:	mov r8d, 1                           
0xa292:	mov ecx, 0                           
0xa297:	mov esi, 0x2a                        
0xa29c:	mov rdi, rax                         
0xa29f:	call 0x1a89a                         
0xa2a4:	mov ecx, 0                           #		|i|l_isearch((char *)NULL, (char **)NULL,
0xa2a9:	mov edx, 3                           
0xa2ae:	mov esi, 0                           
0xa2b3:	mov edi, 0                           
0xa2b8:	call 0x6267                          
0xa2bd:	jmp 0xacc2                           #		|b|reak;
0xa2c2:	mov dword ptr [rbp - 0x148], 0       #		previous_isearch_failed |=| 0;
0xa2cc:	mov dword ptr [rbp - 0x144], 0       #		resuming_previous_isearch |=| 0;
0xa2d6:	mov ecx, 0                           #		|i|l_isearch("I-search: ", (char **)NULL,
0xa2db:	mov edx, 0                           
0xa2e0:	mov esi, 0                           
0xa2e5:	lea rax, [rip + 0x1d3b4]             
0xa2ec:	mov rdi, rax                         
0xa2ef:	call 0x6267                          
0xa2f4:	mov rdx, qword ptr [rip + 0x2661d]   #		|p|anel_action(src_panel, act_ISEARCH_BEGIN, dst_panel, NULL, 1);
0xa2fb:	mov rax, qword ptr [rip + 0x2660e]   
0xa302:	mov r8d, 1                           
0xa308:	mov ecx, 0                           
0xa30d:	mov esi, 0x27                        
0xa312:	mov rdi, rax                         
0xa315:	call 0x1a89a                         
0xa31a:	lea rdx, [rbp - 0x30]                #		    if (|i|l_isearch((char *)NULL, &input, IL_ISEARCH_FORWARD,
0xa31e:	lea rax, [rbp - 0xd8]                
0xa325:	mov rcx, rdx                         
0xa328:	mov edx, 2                           
0xa32d:	mov rsi, rax                         
0xa330:	mov edi, 0                           
0xa335:	call 0x6267                          
0xa33a:	test rax, rax                        #		    if |(|il_isearch((char *)NULL, &input, IL_ISEARCH_FORWARD,
0xa33d:	jne 0xa352                           
0xa33f:	cmp qword ptr [rbp - 0x90], 0        #		if |(|search_string)
0xa347:	jne 0xa4ef                           
0xa34d:	jmp 0xa4fe                           
0xa352:	mov rax, qword ptr [rbp - 0xd8]      #		    if (strlen(input) |=|= 0 &&
0xa359:	movzx eax, byte ptr [rax]            
0xa35c:	test al, al                          #		    if |(|strlen(input) == 0 &&
0xa35e:	jne 0xa3c0                           
0xa360:	cmp qword ptr [rbp - 0x90], 0        #		    if (strlen(input) == 0 |&|&
0xa368:	je 0xa3c0                            
0xa36a:	mov rax, qword ptr [rbp - 0x90]      #			search_string |&|& strlen(search_string))
0xa371:	movzx eax, byte ptr [rax]            
0xa374:	test al, al                          
0xa376:	je 0xa3c0                            
0xa378:	mov rax, qword ptr [rbp - 0xd8]      #			|x|free(input);
0xa37f:	mov rdi, rax                         
0xa382:	call 0x1eeae                         
0xa387:	mov rax, qword ptr [rbp - 0x90]      #			input = |s|trdup(search_string);
0xa38e:	mov rdi, rax                         
0xa391:	call 0x4e40                          
0xa396:	mov qword ptr [rbp - 0xd8], rax      #			input |=| strdup(search_string);
0xa39d:	mov rax, qword ptr [rbp - 0xd8]      #			|i|l_insert_text(input);
0xa3a4:	mov rdi, rax                         
0xa3a7:	call 0xf433                          
0xa3ac:	mov dword ptr [rbp - 0x144], 1       #			resuming_previous_isearch |=| 1;
0xa3b6:	mov dword ptr [rbp - 0x148], 0       #			previous_isearch_failed |=| 0;
0xa3c0:	mov eax, dword ptr [rbp - 0x30]      #		    if (iai|.|action == IL_ISEARCH_ACTION_RETRY &&
0xa3c3:	cmp eax, 2                           #		    if |(|iai.action == IL_ISEARCH_ACTION_RETRY &&
0xa3c6:	jne 0xa3f9                           
0xa3c8:	cmp dword ptr [rbp - 0x148], 0       #		    if (iai.action == IL_ISEARCH_ACTION_RETRY |&|&
0xa3cf:	je 0xa3f9                            
0xa3d1:	mov eax, 0                           #			|t|ty_beep();
0xa3d6:	call 0xbfbf                          
0xa3db:	mov rax, qword ptr [rip + 0x2652e]   #			|p|anel_set_wrapped_isearch_flag(src_panel, 1);
0xa3e2:	mov esi, 1                           
0xa3e7:	mov rdi, rax                         
0xa3ea:	call 0x11460                         
0xa3ef:	mov dword ptr [rbp - 0x148], 0       #			previous_isearch_failed |=| 0;
0xa3f9:	mov rax, qword ptr [rbp - 0xd8]      #		    iai.string |=| input;
0xa400:	mov qword ptr [rbp - 0x28], rax      
0xa404:	mov rdx, qword ptr [rip + 0x2650d]   #		    |p|anel_action(src_panel, act_ISEARCH_FORWARD,
0xa40b:	mov rax, qword ptr [rip + 0x264fe]   
0xa412:	lea rcx, [rbp - 0x30]                
0xa416:	mov r8d, 1                           
0xa41c:	mov esi, 0x29                        
0xa421:	mov rdi, rax                         
0xa424:	call 0x1a89a                         
0xa429:	mov eax, dword ptr [rbp - 0x30]      #		    if (iai|.|action == IL_ISEARCH_ACTION_FAILED)
0xa42c:	cmp eax, -1                          #		    if |(|iai.action == IL_ISEARCH_ACTION_FAILED)
0xa42f:	jne 0xa44a                           
0xa431:	mov dword ptr [rbp - 0x148], 1       #			previous_isearch_failed |=| 1;
0xa43b:	mov eax, 0                           #			|t|ty_beep();
0xa440:	call 0xbfbf                          
0xa445:	jmp 0xa31a                           
0xa44a:	mov dword ptr [rbp - 0x11c], 0       #			int |u|pdate = 0;
0xa454:	cmp dword ptr [rbp - 0x144], 0       #			if |(|resuming_previous_isearch)
0xa45b:	je 0xa493                            
0xa45d:	mov rbx, qword ptr [rbp - 0x20]      #			    if (iai|.|length < strlen(search_string))
0xa461:	mov rax, qword ptr [rbp - 0x90]      #			    if (iai.length < |s|trlen(search_string))
0xa468:	mov rdi, rax                         
0xa46b:	call 0x4960                          
0xa470:	cmp rbx, rax                         #			    if |(|iai.length < strlen(search_string))
0xa473:	jae 0xa493                           
0xa475:	mov edi, 0                           #				|i|l_kill_line(0);
0xa47a:	call 0xed98                          
0xa47f:	mov dword ptr [rbp - 0x144], 0       #				resuming_previous_isearch |=| 0;
0xa489:	mov dword ptr [rbp - 0x11c], 1       #				update |=| 1;
0xa493:	mov rbx, qword ptr [rbp - 0x20]      #			if (iai|.|length < strlen(input))
0xa497:	mov rax, qword ptr [rbp - 0xd8]      #			if (iai.length < |s|trlen(input))
0xa49e:	mov rdi, rax                         
0xa4a1:	call 0x4960                          
0xa4a6:	cmp rbx, rax                         #			if |(|iai.length < strlen(input))
0xa4a9:	jae 0xa4bf                           
0xa4ab:	mov eax, 0                           #			    |i|l_backward_delete_char();
0xa4b0:	call 0xea22                          
0xa4b5:	mov dword ptr [rbp - 0x11c], 1       #			    update |=| 1;
0xa4bf:	cmp dword ptr [rbp - 0x11c], 0       #			if |(|update)
0xa4c6:	je 0xa31a                            
0xa4cc:	mov eax, 0                           #			    |i|l_update();
0xa4d1:	call 0xf8eb                          
0xa4d6:	mov eax, 0                           #			    |i|l_update_point();
0xa4db:	call 0xf768                          
0xa4e0:	mov eax, 0                           #			    |t|ty_update();
0xa4e5:	call 0xb4b7                          
0xa4ea:	jmp 0xa31a                           #		|{|
0xa4ef:	mov rax, qword ptr [rbp - 0x90]      #		    |x|free(search_string);
0xa4f6:	mov rdi, rax                         
0xa4f9:	call 0x1eeae                         
0xa4fe:	mov rax, qword ptr [rbp - 0xd8]      #		if (input |=|= NULL)
0xa505:	test rax, rax                        #		if |(|input == NULL)
0xa508:	jne 0xa50f                           
0xa50a:	jmp 0xacc2                           #		    |b|reak;
0xa50f:	mov rax, qword ptr [rbp - 0xd8]      #		search_string = |s|trdup(input);
0xa516:	mov rdi, rax                         
0xa519:	call 0x4e40                          
0xa51e:	mov qword ptr [rbp - 0x90], rax      
0xa525:	mov rdx, qword ptr [rip + 0x263ec]   #		|p|anel_action(src_panel, act_ISEARCH_END, dst_panel, NULL, 1);
0xa52c:	mov rax, qword ptr [rip + 0x263dd]   
0xa533:	mov r8d, 1                           
0xa539:	mov ecx, 0                           
0xa53e:	mov esi, 0x2a                        
0xa543:	mov rdi, rax                         
0xa546:	call 0x1a89a                         
0xa54b:	mov ecx, 0                           #		|i|l_isearch((char *)NULL, (char **)NULL,
0xa550:	mov edx, 3                           
0xa555:	mov esi, 0                           
0xa55a:	mov edi, 0                           
0xa55f:	call 0x6267                          
0xa564:	jmp 0xacc2                           #		|b|reak;
0xa569:	mov eax, 0                           #		|d|ir_history_reset();
0xa56e:	call 0x6519                          
0xa573:	mov rax, qword ptr [rip + 0x26396]   #		|d|ir_history_add(panel_get_path(src_panel));
0xa57a:	mov rdi, rax                         
0xa57d:	call 0x1504f                         
0xa582:	mov rdi, rax                         
0xa585:	mov eax, 0                           
0xa58a:	call 0x6598                          
0xa58f:	jmp 0xacc2                           #		|b|reak;
0xa594:	mov rdx, qword ptr [rip + 0x2637d]   #		|d|ir_history_prev(src_panel, dst_panel);
0xa59b:	mov rax, qword ptr [rip + 0x2636e]   
0xa5a2:	mov rsi, rdx                         
0xa5a5:	mov rdi, rax                         
0xa5a8:	mov eax, 0                           
0xa5ad:	call 0x6693                          
0xa5b2:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_restore(saved_il);
0xa5b9:	mov rdi, rax                         
0xa5bc:	call 0xe319                          
0xa5c1:	mov eax, 0                           #		|s|et_prompt();
0xa5c6:	call 0x769b                          
0xa5cb:	mov eax, 0                           #		saved_il = |i|l_save();
0xa5d0:	call 0xe205                          
0xa5d5:	mov qword ptr [rbp - 0xc0], rax      
0xa5dc:	mov rax, qword ptr [rip + 0x2632d]   #		|t|ty_update_title(panel_get_path(src_panel));
0xa5e3:	mov rdi, rax                         
0xa5e6:	call 0x1504f                         
0xa5eb:	mov rdi, rax                         
0xa5ee:	call 0xd875                          
0xa5f3:	jmp 0xacc2                           #		|b|reak;
0xa5f8:	mov rdx, qword ptr [rip + 0x26319]   #		|d|ir_history_next(src_panel, dst_panel);
0xa5ff:	mov rax, qword ptr [rip + 0x2630a]   
0xa606:	mov rsi, rdx                         
0xa609:	mov rdi, rax                         
0xa60c:	mov eax, 0                           
0xa611:	call 0x661a                          
0xa616:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_restore(saved_il);
0xa61d:	mov rdi, rax                         
0xa620:	call 0xe319                          
0xa625:	mov eax, 0                           #		|s|et_prompt();
0xa62a:	call 0x769b                          
0xa62f:	mov eax, 0                           #		saved_il = |i|l_save();
0xa634:	call 0xe205                          
0xa639:	mov qword ptr [rbp - 0xc0], rax      
0xa640:	mov rax, qword ptr [rip + 0x262c9]   #		|t|ty_update_title(panel_get_path(src_panel));
0xa647:	mov rdi, rax                         
0xa64a:	call 0x1504f                         
0xa64f:	mov rdi, rax                         
0xa652:	call 0xd875                          
0xa657:	jmp 0xacc2                           #		|b|reak;
0xa65c:	nop                                  #		    |g|oto one_panel_mode;
0xa65d:	mov rax, qword ptr [rip + 0x262ac]   #		|p|anel_set_focus(src_panel, OFF);
0xa664:	mov esi, 0                           
0xa669:	mov rdi, rax                         
0xa66c:	call 0x14ed2                         
0xa671:	mov rax, qword ptr [rip + 0x26298]   #		tmp_panel |=| src_panel;
0xa678:	mov qword ptr [rip + 0x262a1], rax   
0xa67f:	mov rax, qword ptr [rip + 0x26292]   #		src_panel |=| dst_panel;
0xa686:	mov qword ptr [rip + 0x26283], rax   
0xa68d:	mov rax, qword ptr [rip + 0x2628c]   #		dst_panel |=| tmp_panel;
0xa694:	mov qword ptr [rip + 0x2627d], rax   
0xa69b:	mov eax, dword ptr [rip + 0x26243]   #		panel_no = |!|panel_no;
0xa6a1:	test eax, eax                        
0xa6a3:	sete al                              
0xa6a6:	movzx eax, al                        
0xa6a9:	mov dword ptr [rip + 0x26235], eax   #		panel_no |=| !panel_no;
0xa6af:	mov rax, qword ptr [rip + 0x2625a]   #		|p|anel_set_focus(src_panel, ON);
0xa6b6:	mov esi, 1                           
0xa6bb:	mov rdi, rax                         
0xa6be:	call 0x14ed2                         
0xa6c3:	mov rax, qword ptr [rip + 0x26246]   #		|p|anel_activate(src_panel);
0xa6ca:	mov rdi, rax                         
0xa6cd:	call 0x1131a                         
0xa6d2:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_free(saved_il);
0xa6d9:	mov rdi, rax                         
0xa6dc:	call 0xdf09                          
0xa6e1:	mov eax, 0                           #		|s|et_prompt();
0xa6e6:	call 0x769b                          
0xa6eb:	mov eax, 0                           #		saved_il = |i|l_save();
0xa6f0:	call 0xe205                          
0xa6f5:	mov qword ptr [rbp - 0xc0], rax      
0xa6fc:	mov rax, qword ptr [rip + 0x2620d]   #		|t|ty_update_title(panel_get_path(src_panel));
0xa703:	mov rdi, rax                         
0xa706:	call 0x1504f                         
0xa70b:	mov rdi, rax                         
0xa70e:	call 0xd875                          
0xa713:	mov rax, qword ptr [rip + 0x261f6]   #		|p|anel_no_optimizations(src_panel);
0xa71a:	mov rdi, rax                         
0xa71d:	call 0x110b0                         
0xa722:	mov rax, qword ptr [rip + 0x261ef]   #		|p|anel_no_optimizations(dst_panel);
0xa729:	mov rdi, rax                         
0xa72c:	call 0x110b0                         
0xa731:	mov eax, 0                           #		|t|ty_touch();
0xa736:	call 0xb9ce                          
0xa73b:	mov rax, qword ptr [rip + 0x261d6]   #		|p|anel_deactivate(dst_panel);
0xa742:	mov rdi, rax                         
0xa745:	call 0x11331                         
0xa74a:	mov dword ptr [rip + 0x248d4], 0     #		two_panel_mode |=| 0;
0xa754:	mov edi, 1                           #		|r|esize(1);
0xa759:	mov eax, 0                           
0xa75e:	call 0x503a                          
0xa763:	mov rax, qword ptr [rip + 0x261a6]   #		|p|anel_action(src_panel, act_ENABLE_ALL, NULL, NULL, 1);
0xa76a:	mov r8d, 1                           
0xa770:	mov ecx, 0                           
0xa775:	mov edx, 0                           
0xa77a:	mov esi, 0xe                         
0xa77f:	mov rdi, rax                         
0xa782:	call 0x1a89a                         
0xa787:	mov rax, qword ptr [rip + 0x2618a]   #		|p|anel_action(dst_panel, act_ENABLE_ALL, NULL, NULL, 1);
0xa78e:	mov r8d, 1                           
0xa794:	mov ecx, 0                           
0xa799:	mov edx, 0                           
0xa79e:	mov esi, 0xe                         
0xa7a3:	mov rdi, rax                         
0xa7a6:	call 0x1a89a                         
0xa7ab:	mov rax, qword ptr [rip + 0x2615e]   #		|p|anel_update(src_panel);
0xa7b2:	mov rdi, rax                         
0xa7b5:	call 0x14e6a                         
0xa7ba:	jmp 0xacc2                           #		|b|reak;
0xa7bf:	mov rax, qword ptr [rip + 0x2614a]   #		|p|anel_no_optimizations(src_panel);
0xa7c6:	mov rdi, rax                         
0xa7c9:	call 0x110b0                         
0xa7ce:	mov rax, qword ptr [rip + 0x26143]   #		|p|anel_no_optimizations(dst_panel);
0xa7d5:	mov rdi, rax                         
0xa7d8:	call 0x110b0                         
0xa7dd:	mov eax, 0                           #		|t|ty_touch();
0xa7e2:	call 0xb9ce                          
0xa7e7:	mov rax, qword ptr [rip + 0x2612a]   #		|p|anel_activate(dst_panel);
0xa7ee:	mov rdi, rax                         
0xa7f1:	call 0x1131a                         
0xa7f6:	mov dword ptr [rip + 0x24828], 1     #		two_panel_mode |=| 1;
0xa800:	mov edi, 1                           #		|r|esize(1);
0xa805:	mov eax, 0                           
0xa80a:	call 0x503a                          
0xa80f:	mov eax, dword ptr [rip + 0x261cb]   #		if (tty_columns |<| 6 * 2)
0xa815:	cmp eax, 0xb                         #		if |(|tty_columns < 6 * 2)
0xa818:	jg 0xa829                            
0xa81a:	mov edi, 1                           #		    |r|efresh(1);
0xa81f:	mov eax, 0                           
0xa824:	call 0x5367                          
0xa829:	mov rax, qword ptr [rip + 0x260e0]   #		|p|anel_action(src_panel, act_ENABLE_SIZE, NULL, NULL, 1);
0xa830:	mov r8d, 1                           
0xa836:	mov ecx, 0                           
0xa83b:	mov edx, 0                           
0xa840:	mov esi, 0xb                         
0xa845:	mov rdi, rax                         
0xa848:	call 0x1a89a                         
0xa84d:	mov rax, qword ptr [rip + 0x260c4]   #		|p|anel_action(dst_panel, act_ENABLE_SIZE, NULL, NULL, 1);
0xa854:	mov r8d, 1                           
0xa85a:	mov ecx, 0                           
0xa85f:	mov edx, 0                           
0xa864:	mov esi, 0xb                         
0xa869:	mov rdi, rax                         
0xa86c:	call 0x1a89a                         
0xa871:	mov rax, qword ptr [rip + 0x26098]   #		|p|anel_update(src_panel);
0xa878:	mov rdi, rax                         
0xa87b:	call 0x14e6a                         
0xa880:	mov rax, qword ptr [rip + 0x26091]   #		|p|anel_update(dst_panel);
0xa887:	mov rdi, rax                         
0xa88a:	call 0x14e6a                         
0xa88f:	jmp 0xacc2                           #		|b|reak;
0xa894:	mov edi, 0                           #		|i|l_echo(0);
0xa899:	call 0xe3a6                          
0xa89e:	mov qword ptr [rbp - 0xf8], 0        #		lock_password |=| NULL;
0xa8a9:	lea rax, [rbp - 0xf8]                #		|i|l_read_line("Enter a password: ", &lock_password,
0xa8b0:	mov ecx, 0                           
0xa8b5:	mov edx, 0                           
0xa8ba:	mov rsi, rax                         
0xa8bd:	lea rax, [rip + 0x1cde7]             
0xa8c4:	mov rdi, rax                         
0xa8c7:	call 0x5efb                          
0xa8cc:	mov rax, qword ptr [rbp - 0xf8]      #		if (lock_password |=|= NULL || *lock_password == '\0')
0xa8d3:	test rax, rax                        #		if |(|lock_password == NULL || *lock_password == '\0')
0xa8d6:	je 0xa8e6                            
0xa8d8:	mov rax, qword ptr [rbp - 0xf8]      #		if (lock_password == NULL || |*|lock_password == '\0')
0xa8df:	movzx eax, byte ptr [rax]            
0xa8e2:	test al, al                          #		if (lock_password == NULL |||| *lock_password == '\0')
0xa8e4:	jne 0xa8f5                           
0xa8e6:	mov edi, 1                           #		    |i|l_echo(1);
0xa8eb:	call 0xe3a6                          
0xa8f0:	jmp 0xacc2                           #		    |b|reak;
0xa8f5:	mov qword ptr [rbp - 0xf0], 0        #		for (unlock_password |=| NULL;;)
0xa900:	lea rax, [rbp - 0xf0]                #		    |i|l_read_line("Enter password to unlock: ",
0xa907:	mov ecx, 0                           
0xa90c:	mov edx, 0                           
0xa911:	mov rsi, rax                         
0xa914:	lea rax, [rip + 0x1cda3]             
0xa91b:	mov rdi, rax                         
0xa91e:	call 0x5efb                          
0xa923:	mov eax, 0                           #		    |t|ty_update();
0xa928:	call 0xb4b7                          
0xa92d:	mov rax, qword ptr [rbp - 0xf0]      #		    if (|u|nlock_password &&
0xa934:	test rax, rax                        #		    if |(|unlock_password &&
0xa937:	je 0xa956                            
0xa939:	mov rdx, qword ptr [rbp - 0xf0]      #			|s|trcmp(lock_password, unlock_password) == 0)
0xa940:	mov rax, qword ptr [rbp - 0xf8]      
0xa947:	mov rsi, rdx                         
0xa94a:	mov rdi, rax                         
0xa94d:	call 0x4af0                          
0xa952:	test eax, eax                        #		    if (unlock_password |&|&
0xa954:	je 0xa988                            
0xa956:	lea rax, [rip + 0x24703]             #		    |i|l_message(lock_bad);
0xa95d:	mov rdi, rax                         
0xa960:	call 0xfcbe                          
0xa965:	mov eax, 0                           #		    |t|ty_beep();
0xa96a:	call 0xbfbf                          
0xa96f:	mov eax, 0                           #		    |t|ty_update();
0xa974:	call 0xb4b7                          
0xa979:	mov edi, 2                           #		    |s|leep(2);
0xa97e:	call 0x4e70                          
0xa983:	jmp 0xa900                           #		    |i|l_read_line("Enter password to unlock: ",
0xa988:	nop                                  #			|b|reak;
0xa989:	mov eax, 0                           #		|t|ty_update();
0xa98e:	call 0xb4b7                          
0xa993:	mov rax, qword ptr [rbp - 0xf8]      #		|x|free(lock_password);
0xa99a:	mov rdi, rax                         
0xa99d:	call 0x1eeae                         
0xa9a2:	mov rax, qword ptr [rbp - 0xf0]      #		|x|free(unlock_password);
0xa9a9:	mov rdi, rax                         
0xa9ac:	call 0x1eeae                         
0xa9b1:	mov edi, 1                           #		|i|l_echo(1);
0xa9b6:	call 0xe3a6                          
0xa9bb:	jmp 0xacc2                           #		|b|reak;
0xa9c0:	mov dword ptr [rbp - 0x150], 1       #		cmp_mode |=| CMPDIR_QUICK;
0xa9ca:	mov rdx, qword ptr [rip + 0x25f47]   #		|p|anel_action(src_panel, act_CMPDIR, dst_panel, &cmp_mode, 1);
0xa9d1:	mov rax, qword ptr [rip + 0x25f38]   
0xa9d8:	lea rcx, [rbp - 0x150]               
0xa9df:	mov r8d, 1                           
0xa9e5:	mov esi, 0x2b                        
0xa9ea:	mov rdi, rax                         
0xa9ed:	call 0x1a89a                         
0xa9f2:	jmp 0xacc2                           #		|b|reak;
0xa9f7:	mov dword ptr [rbp - 0x150], 0       #		cmp_mode |=| CMPDIR_THOROUGH;
0xaa01:	mov rdx, qword ptr [rip + 0x25f10]   #		|p|anel_action(src_panel, act_CMPDIR, dst_panel, &cmp_mode, 1);
0xaa08:	mov rax, qword ptr [rip + 0x25f01]   
0xaa0f:	lea rcx, [rbp - 0x150]               
0xaa16:	mov r8d, 1                           
0xaa1c:	mov esi, 0x2b                        
0xaa21:	mov rdi, rax                         
0xaa24:	call 0x1a89a                         
0xaa29:	jmp 0xacc2                           #		|b|reak;
0xaa2e:	mov dword ptr [rbp - 0x154], 0       #		to_case |=| CASE_DOWN;
0xaa38:	mov rdx, qword ptr [rip + 0x25ed9]   #		|p|anel_action(src_panel, act_CASE, dst_panel, &to_case, 1);
0xaa3f:	mov rax, qword ptr [rip + 0x25eca]   
0xaa46:	lea rcx, [rbp - 0x154]               
0xaa4d:	mov r8d, 1                           
0xaa53:	mov esi, 0x2c                        
0xaa58:	mov rdi, rax                         
0xaa5b:	call 0x1a89a                         
0xaa60:	jmp 0xacc2                           #		|b|reak;
0xaa65:	mov dword ptr [rbp - 0x154], 1       #		to_case |=| CASE_UP;
0xaa6f:	mov rdx, qword ptr [rip + 0x25ea2]   #		|p|anel_action(src_panel, act_CASE, dst_panel, &to_case, 1);
0xaa76:	mov rax, qword ptr [rip + 0x25e93]   
0xaa7d:	lea rcx, [rbp - 0x154]               
0xaa84:	mov r8d, 1                           
0xaa8a:	mov esi, 0x2c                        
0xaa8f:	mov rdi, rax                         
0xaa92:	call 0x1a89a                         
0xaa97:	jmp 0xacc2                           #		|b|reak;
0xaa9c:	mov rdx, qword ptr [rip + 0x25e75]   #		|p|anel_action(src_panel, act_UP_ONE_DIR, dst_panel, NULL, 1);
0xaaa3:	mov rax, qword ptr [rip + 0x25e66]   
0xaaaa:	mov r8d, 1                           
0xaab0:	mov ecx, 0                           
0xaab5:	mov esi, 0x2d                        
0xaaba:	mov rdi, rax                         
0xaabd:	call 0x1a89a                         
0xaac2:	mov rax, qword ptr [rbp - 0xc0]      #		|i|l_restore(saved_il);
0xaac9:	mov rdi, rax                         
0xaacc:	call 0xe319                          
0xaad1:	mov eax, 0                           #		|s|et_prompt();
0xaad6:	call 0x769b                          
0xaadb:	mov eax, 0                           #		saved_il = |i|l_save();
0xaae0:	call 0xe205                          
0xaae5:	mov qword ptr [rbp - 0xc0], rax      
0xaaec:	mov rax, qword ptr [rip + 0x25e1d]   #		|t|ty_update_title(panel_get_path(src_panel));
0xaaf3:	mov rdi, rax                         
0xaaf6:	call 0x1504f                         
0xaafb:	mov rdi, rax                         
0xaafe:	call 0xd875                          
0xab03:	jmp 0xacc2                           #		|b|reak;
0xab08:	mov rdx, qword ptr [rip + 0x25e09]   #		|p|anel_action(src_panel, act_COMPARE, dst_panel, NULL, 1);
0xab0f:	mov rax, qword ptr [rip + 0x25dfa]   
0xab16:	mov r8d, 1                           
0xab1c:	mov ecx, 0                           
0xab21:	mov esi, 0x2e                        
0xab26:	mov rdi, rax                         
0xab29:	call 0x1a89a                         
0xab2e:	jmp 0xacc2                           #		|b|reak;
0xab33:	mov rax, qword ptr [rbp - 0x70]      #		if (|i|l_read_line("Bin size (in Kb): ", &input, "0",
0xab37:	mov rdx, qword ptr [rax + 0x28]      
0xab3b:	lea rax, [rbp - 0xd8]                
0xab42:	mov rcx, rdx                         
0xab45:	lea rdx, [rip + 0x1cb8d]             
0xab4c:	mov rsi, rax                         
0xab4f:	lea rax, [rip + 0x1cb85]             
0xab56:	mov rdi, rax                         
0xab59:	call 0x5efb                          
0xab5e:	test rax, rax                        #		if |(|il_read_line("Bin size (in Kb): ", &input, "0",
0xab61:	je 0xacc2                            
0xab67:	mov rax, qword ptr [rbp - 0xd8]      #		    if (input|[|0] == 0)
0xab6e:	movzx eax, byte ptr [rax]            
0xab71:	test al, al                          #		    if |(|input[0] == 0)
0xab73:	jne 0xab7a                           
0xab75:	jmp 0xacc2                           #			|b|reak;
0xab7a:	mov rcx, qword ptr [rbp - 0xd8]      #		    |p|anel_action(src_panel, act_BIN_PACKING,
0xab81:	mov rdx, qword ptr [rip + 0x25d90]   
0xab88:	mov rax, qword ptr [rip + 0x25d81]   
0xab8f:	mov r8d, 1                           
0xab95:	mov esi, 0x2f                        
0xab9a:	mov rdi, rax                         
0xab9d:	call 0x1a89a                         
0xaba2:	mov rax, qword ptr [rbp - 0xd8]      #		    |x|free(input);
0xaba9:	mov rdi, rax                         
0xabac:	call 0x1eeae                         
0xabb1:	mov qword ptr [rbp - 0xd8], 0        #		    input |=| NULL;
0xabbc:	jmp 0xacc2                           #		|b|reak;
0xabc1:	mov esi, dword ptr [rbp - 0x158]     #		|p|anel_action(src_panel, act_HORIZONTAL_SCROLL_LEFT,
0xabc7:	mov rcx, qword ptr [rbp - 0xd8]      
0xabce:	mov rdx, qword ptr [rip + 0x25d43]   
0xabd5:	mov rax, qword ptr [rip + 0x25d34]   
0xabdc:	mov r8d, esi                         
0xabdf:	mov esi, 0x30                        
0xabe4:	mov rdi, rax                         
0xabe7:	call 0x1a89a                         
0xabec:	jmp 0xacc2                           #		|b|reak;
0xabf1:	mov esi, dword ptr [rbp - 0x158]     #		|p|anel_action(src_panel, act_HORIZONTAL_SCROLL_RIGHT,
0xabf7:	mov rcx, qword ptr [rbp - 0xd8]      
0xabfe:	mov rdx, qword ptr [rip + 0x25d13]   
0xac05:	mov rax, qword ptr [rip + 0x25d04]   
0xac0c:	mov r8d, esi                         
0xac0f:	mov esi, 0x31                        
0xac14:	mov rdi, rax                         
0xac17:	call 0x1a89a                         
0xac1c:	jmp 0xacc2                           #		|b|reak;
0xac21:	mov rdx, qword ptr [rip + 0x25cf0]   #		|p|anel_action(src_panel, act_SELECT_EXTENSION, dst_panel,
0xac28:	mov rax, qword ptr [rip + 0x25ce1]   
0xac2f:	mov r8d, 1                           
0xac35:	mov ecx, 0                           
0xac3a:	mov esi, 0x32                        
0xac3f:	mov rdi, rax                         
0xac42:	call 0x1a89a                         
0xac47:	jmp 0xacc2                           #		|b|reak;
0xac49:	mov rdx, qword ptr [rip + 0x25cc8]   #		|p|anel_action(src_panel, act_UNSELECT_EXTENSION, dst_panel,
0xac50:	mov rax, qword ptr [rip + 0x25cb9]   
0xac57:	mov r8d, 1                           
0xac5d:	mov ecx, 0                           
0xac62:	mov esi, 0x33                        
0xac67:	mov rdi, rax                         
0xac6a:	call 0x1a89a                         
0xac6f:	jmp 0xacc2                           #		|b|reak;
0xac71:	cmp dword ptr [rbp - 0x12c], 0       #		if |(|key)
0xac78:	je 0xacc1                            
0xac7a:	mov rax, qword ptr [rbp - 0xc0]      #		    |i|l_free(saved_il);
0xac81:	mov rdi, rax                         
0xac84:	call 0xdf09                          
0xac89:	jmp 0xac9d                           #		    while |(|repeat_count--)
0xac8b:	mov eax, dword ptr [rbp - 0x12c]     #			|i|l_dispatch_commands(key, IL_MOVE | IL_EDIT);
0xac91:	mov esi, 3                           
0xac96:	mov edi, eax                         
0xac98:	call 0x56bd                          
0xac9d:	mov eax, dword ptr [rbp - 0x158]     #		    while (repeat_count|-|-)
0xaca3:	lea edx, [rax - 1]                   
0xaca6:	mov dword ptr [rbp - 0x158], edx     
0xacac:	test eax, eax                        #		    while (|r|epeat_count--)
0xacae:	jne 0xac8b                           
0xacb0:	mov eax, 0                           #		    saved_il = |i|l_save();
0xacb5:	call 0xe205                          
0xacba:	mov qword ptr [rbp - 0xc0], rax      
0xacc1:	nop                                  #		|b|reak;
0xacc2:	cmp dword ptr [rbp - 0x128], 0       #    while(|!|app_end)
0xacc9:	je 0x84af                            
0xaccf:	mov rax, qword ptr [rip + 0x25c3a]   #    final_path = |p|anel_get_path(src_panel);
0xacd6:	mov rdi, rax                         
0xacd9:	call 0x1504f                         
0xacde:	mov qword ptr [rbp - 0x80], rax      
0xace2:	mov rax, qword ptr [rip + 0x25c17]   #    |p|anel_end(left_panel);
0xace9:	mov rdi, rax                         
0xacec:	call 0x10bef                         
0xacf1:	mov rax, qword ptr [rip + 0x25c10]   #    |p|anel_end(right_panel);
0xacf8:	mov rdi, rax                         
0xacfb:	call 0x10bef                         
0xad00:	mov edi, 0                           #    |t|ty_set_mode(TTY_CANONIC);
0xad05:	call 0xadac                          
0xad0a:	mov eax, 0                           #    |t|ty_defaults();
0xad0f:	call 0xc083                          
0xad14:	mov rax, qword ptr [rip + 0x266f5]   #    if (|i|l)
0xad1b:	test rax, rax                        #    if |(|il)
0xad1e:	je 0xad2a                            
0xad20:	mov eax, 0                           #	|i|l_end();
0xad25:	call 0xe15a                          
0xad2a:	mov eax, 0                           #    |s|tatus_end();
0xad2f:	call 0x1014d                         
0xad34:	mov eax, 0                           #    |r|emove_log();
0xad39:	call 0x1f7c7                         
0xad3e:	mov rax, qword ptr [rip + 0x25bb3]   #    |t|ty_end(screen);
0xad45:	mov rdi, rax                         
0xad48:	call 0xb138                          
0xad4d:	cmp dword ptr [rbp - 0x140], 0       #    if |(|output_final_path)
0xad54:	je 0xad76                            
0xad56:	mov rax, qword ptr [rbp - 0x80]      #	|w|rite(3, final_path, strlen(final_path));
0xad5a:	mov rdi, rax                         
0xad5d:	call 0x4960                          
0xad62:	mov rdx, rax                         
0xad65:	mov rax, qword ptr [rbp - 0x80]      
0xad69:	mov rsi, rax                         
0xad6c:	mov edi, 3                           
0xad71:	call 0x4770                          
0xad76:	mov eax, 0                           #    return |0|;
0xad7b:	mov rdx, qword ptr [rbp - 0x18]      #|}|
0xad7f:	sub rdx, qword ptr fs:[0x28]         
0xad88:	je 0xad8f                            
0xad8a:	call 0x4980                          #|}|
0xad8f:	mov rbx, qword ptr [rbp - 8]         
0xad93:	leave                                
0xad94:	ret                                  

####################################################################################################
 /home/nahid/reverse/binaries/gnuit/src/tty.c
####################################################################################################

0xad95:	endbr64                              #|{|
0xad99:	push rbp                             
0xad9a:	mov rbp, rsp                         
0xad9d:	mov dword ptr [rbp - 4], edi         
0xada0:	mov eax, dword ptr [rbp - 4]         #    tty_last_char_flag |=| last_char_flag;
0xada3:	mov dword ptr [rip + 0x25c53], eax   
0xada9:	nop                                  #|}|
0xadaa:	pop rbp                              
0xadab:	ret                                  
0xadac:	endbr64                              #|{|
0xadb0:	push rbp                             
0xadb1:	mov rbp, rsp                         
0xadb4:	sub rsp, 0x10                        
0xadb8:	mov dword ptr [rbp - 4], edi         
0xadbb:	cmp dword ptr [rbp - 4], 1           #    if |(|mode == TTY_NONCANONIC)
0xadbf:	jne 0xaf3e                           
0xadc5:	mov rax, qword ptr [rip + 0x25b94]   #	new_term |=| old_term;
0xadcc:	mov rdx, qword ptr [rip + 0x25b95]   
0xadd3:	mov qword ptr [rip + 0x25bc6], rax   
0xadda:	mov qword ptr [rip + 0x25bc7], rdx   
0xade1:	mov rax, qword ptr [rip + 0x25b88]   
0xade8:	mov rdx, qword ptr [rip + 0x25b89]   
0xadef:	mov qword ptr [rip + 0x25bba], rax   
0xadf6:	mov qword ptr [rip + 0x25bbb], rdx   
0xadfd:	mov rax, qword ptr [rip + 0x25b7c]   
0xae04:	mov rdx, qword ptr [rip + 0x25b7d]   
0xae0b:	mov qword ptr [rip + 0x25bae], rax   
0xae12:	mov qword ptr [rip + 0x25baf], rdx   
0xae19:	mov rax, qword ptr [rip + 0x25b70]   
0xae20:	mov qword ptr [rip + 0x25ba9], rax   
0xae27:	mov eax, dword ptr [rip + 0x25b6b]   
0xae2d:	mov dword ptr [rip + 0x25ba5], eax   
0xae33:	mov eax, dword ptr [rip + 0x25b67]   #	new_term.c_iflag |&|= ~(IXON | ICRNL | IGNCR | INLCR | IGNBRK | BRKINT);
0xae39:	and eax, 0xfffffa3c                  
0xae3e:	mov dword ptr [rip + 0x25b5c], eax   
0xae44:	mov eax, dword ptr [rip + 0x25b5a]   #	new_term.c_oflag |&|= ~OPOST;
0xae4a:	and eax, 0xfffffffe                  
0xae4d:	mov dword ptr [rip + 0x25b51], eax   
0xae53:	mov eax, dword ptr [rip + 0x25b53]   #	new_term.c_lflag |||= ISIG | NOFLSH;
0xae59:	or al, 0x81                          
0xae5b:	mov dword ptr [rip + 0x25b4b], eax   
0xae61:	mov eax, dword ptr [rip + 0x25b45]   #	new_term.c_lflag |&|= ~(ICANON | ECHO);
0xae67:	and eax, 0xfffffff5                  
0xae6a:	mov dword ptr [rip + 0x25b3c], eax   
0xae70:	mov byte ptr [rip + 0x25b3a], 7      #	new_term.c_cc[VINTR] |=| key_INTERRUPT;		/* Ctrl-G */
0xae77:	mov byte ptr [rip + 0x25b34], 0      #	new_term.c_cc[VQUIT] |=| CDISABLE;
0xae7e:	mov byte ptr [rip + 0x25b34], 0      #	new_term.c_cc[VSTART] |=| CDISABLE;		/* START (^Q) */
0xae85:	mov byte ptr [rip + 0x25b2e], 0      #	new_term.c_cc[VSTOP] |=| CDISABLE;		/* STOP (^S) */
0xae8c:	mov byte ptr [rip + 0x25b24], 1      #	new_term.c_cc[VMIN] |=| 1;
0xae93:	mov byte ptr [rip + 0x25b1c], 0      #	new_term.c_cc[VTIME] |=| 0;
0xae9a:	mov byte ptr [rip + 0x25b12], 0      #	new_term.c_cc[VERASE] |=| CDISABLE;
0xaea1:	mov byte ptr [rip + 0x25b0c], 0      #	new_term.c_cc[VKILL] |=| CDISABLE;
0xaea8:	mov byte ptr [rip + 0x25b0d], 0      #	new_term.c_cc[VEOL] |=| CDISABLE;
0xaeaf:	mov byte ptr [rip + 0x25b0b], 0      #	new_term.c_cc[VEOL2] |=| CDISABLE;
0xaeb6:	mov byte ptr [rip + 0x25afe], 0x1a   #	new_term.c_cc[VSUSP] |=| key_SUSPEND;             /* Ctrl-Z */
0xaebd:	mov byte ptr [rip + 0x25af9], 0      #	new_term.c_cc[VREPRINT] |=| CDISABLE;
0xaec4:	mov byte ptr [rip + 0x25af3], 0      #	new_term.c_cc[VDISCARD] |=| CDISABLE;
0xaecb:	mov byte ptr [rip + 0x25aed], 0      #	new_term.c_cc[VWERASE] |=| CDISABLE;
0xaed2:	mov byte ptr [rip + 0x25ae7], 0      #	new_term.c_cc[VLNEXT] |=| CDISABLE;
0xaed9:	lea rax, [rip + 0x25ac0]             #	|t|csetattr(TTY_OUTPUT, TCSADRAIN, &new_term);
0xaee0:	mov rdx, rax                         
0xaee3:	mov esi, 1                           
0xaee8:	mov edi, 1                           
0xaeed:	call 0x4d20                          
0xaef2:	lea rax, [rip + 0x25aa7]             #	ospeed = |c|fgetospeed(&new_term);
0xaef9:	mov rdi, rax                         
0xaefc:	call 0x4cd0                          
0xaf01:	mov dword ptr [rip + 0x25fa1], eax   #	ospeed |=| cfgetospeed(&new_term);
0xaf07:	mov edx, 1                           #	|i|octl(TTY_OUTPUT, TCXONC, 1);
0xaf0c:	mov esi, 0x540a                      
0xaf11:	mov edi, 1                           
0xaf16:	mov eax, 0                           
0xaf1b:	call 0x4a30                          
0xaf20:	mov esi, 1                           #	|t|cflow(TTY_OUTPUT, TCOON);
0xaf25:	mov edi, 1                           
0xaf2a:	call 0x4d60                          
0xaf2f:	mov eax, dword ptr [rip + 0x24d53]   #	|t|ty_set_interrupt_char(tty_interrupt_char);
0xaf35:	mov edi, eax                         
0xaf37:	call 0xaf73                          
0xaf3c:	jmp 0xaf57                           
0xaf3e:	lea rax, [rip + 0x25a1b]             #	|t|csetattr(TTY_OUTPUT, TCSADRAIN, &old_term);
0xaf45:	mov rdx, rax                         
0xaf48:	mov esi, 1                           
0xaf4d:	mov edi, 1                           
0xaf52:	call 0x4d20                          
0xaf57:	mov eax, dword ptr [rbp - 4]         #    tty_mode |=| mode;
0xaf5a:	mov dword ptr [rip + 0x25f24], eax   
0xaf60:	nop                                  #|}|
0xaf61:	leave                                
0xaf62:	ret                                  
0xaf63:	endbr64                              #|{|
0xaf67:	push rbp                             
0xaf68:	mov rbp, rsp                         
0xaf6b:	mov eax, dword ptr [rip + 0x25f13]   #    return |t|ty_mode;
0xaf71:	pop rbp                              #|}|
0xaf72:	ret                                  
0xaf73:	endbr64                              #|{|
0xaf77:	push rbp                             
0xaf78:	mov rbp, rsp                         
0xaf7b:	sub rsp, 0x60                        
0xaf7f:	mov dword ptr [rbp - 0x54], edi      
0xaf82:	mov rax, qword ptr fs:[0x28]         #|{|
0xaf8b:	mov qword ptr [rbp - 8], rax         
0xaf8f:	xor eax, eax                         
0xaf91:	lea rax, [rbp - 0x50]                #    |t|cgetattr(TTY_OUTPUT, &current_term);
0xaf95:	mov rsi, rax                         
0xaf98:	mov edi, 1                           
0xaf9d:	call 0x4d10                          
0xafa2:	mov eax, dword ptr [rbp - 0x54]      #    current_term.c_cc[VINTR] |=| c;
0xafa5:	mov byte ptr [rbp - 0x3f], al        
0xafa8:	mov byte ptr [rbp - 0x3e], 0         #    current_term.c_cc[VQUIT] |=| CDISABLE;
0xafac:	lea rax, [rbp - 0x50]                #    |t|csetattr(TTY_OUTPUT, TCSADRAIN, &current_term);
0xafb0:	mov rdx, rax                         
0xafb3:	mov esi, 1                           
0xafb8:	mov edi, 1                           
0xafbd:	call 0x4d20                          
0xafc2:	mov eax, dword ptr [rbp - 0x54]      #    tty_interrupt_char |=| c;
0xafc5:	mov dword ptr [rip + 0x24cbd], eax   
0xafcb:	nop                                  #|}|
0xafcc:	mov rax, qword ptr [rbp - 8]         
0xafd0:	sub rax, qword ptr fs:[0x28]         
0xafd9:	je 0xafe0                            
0xafdb:	call 0x4980                          
0xafe0:	leave                                
0xafe1:	ret                                  
0xafe2:	endbr64                              #|{|
0xafe6:	push rbp                             
0xafe7:	mov rbp, rsp                         
0xafea:	sub rsp, 0x10                        
0xafee:	mov dword ptr [rbp - 8], 0           #    int |b|ytes_transferred = 0;
0xaff5:	jmp 0xb031                           #    while |(|bytes_transferred < tty_index)
0xaff7:	mov eax, dword ptr [rip + 0x25e83]   #			   tty_index |-| bytes_transferred);
0xaffd:	sub eax, dword ptr [rbp - 8]         
0xb000:	cdqe                                 #	int count = |x|write(TTY_OUTPUT,
0xb002:	mov edx, dword ptr [rbp - 8]         
0xb005:	movsxd rdx, edx                      
0xb008:	lea rcx, [rip + 0x25a71]             
0xb00f:	add rcx, rdx                         
0xb012:	mov rdx, rax                         
0xb015:	mov rsi, rcx                         
0xb018:	mov edi, 1                           
0xb01d:	call 0x1ef4c                         
0xb022:	mov dword ptr [rbp - 4], eax         
0xb025:	cmp dword ptr [rbp - 4], 0           #	if |(|count < 0)
0xb029:	js 0xb03e                            
0xb02b:	mov eax, dword ptr [rbp - 4]         #	bytes_transferred |+|= count;
0xb02e:	add dword ptr [rbp - 8], eax         
0xb031:	mov eax, dword ptr [rip + 0x25e49]   #    while (bytes_transferred |<| tty_index)
0xb037:	cmp dword ptr [rbp - 8], eax         
0xb03a:	jl 0xaff7                            
0xb03c:	jmp 0xb03f                           
0xb03e:	nop                                  #	    |b|reak;
0xb03f:	mov dword ptr [rip + 0x25e37], 0     #    tty_index |=| 0;
0xb049:	nop                                  #|}|
0xb04a:	leave                                
0xb04b:	ret                                  
0xb04c:	endbr64                              #|{|
0xb050:	push rbp                             
0xb051:	mov rbp, rsp                         
0xb054:	sub rsp, 0x10                        
0xb058:	mov dword ptr [rbp - 4], edi         
0xb05b:	mov eax, dword ptr [rip + 0x25e1f]   #    if (tty_index |=|= TTY_CACHE_SIZE)
0xb061:	cmp eax, 0x400                       #    if |(|tty_index == TTY_CACHE_SIZE)
0xb066:	jne 0xb072                           
0xb068:	mov eax, 0                           #	|t|ty_flush();
0xb06d:	call 0xafe2                          
0xb072:	mov eax, dword ptr [rip + 0x25e08]   #    tty_cache[tty_index|+|+] = (char)c;
0xb078:	lea edx, [rax + 1]                   
0xb07b:	mov dword ptr [rip + 0x25dff], edx   
0xb081:	mov edx, dword ptr [rbp - 4]         #    tty_cache[tty_index++] = |(|char)c;
0xb084:	mov ecx, edx                         
0xb086:	cdqe                                 #    tty_cache[tty_index++] |=| (char)c;
0xb088:	lea rdx, [rip + 0x259f1]             
0xb08f:	mov byte ptr [rax + rdx], cl         
0xb092:	mov eax, 1                           #    return |1|;
0xb097:	leave                                #|}|
0xb098:	ret                                  
0xb099:	endbr64                              #|{|
0xb09d:	push rbp                             
0xb09e:	mov rbp, rsp                         
0xb0a1:	mov ecx, dword ptr [rip + 0x25935]   #    |t|puts(TTY_CLEAR_SCREEN, tty_lines, tty_writec);
0xb0a7:	mov rax, qword ptr [rip + 0x24c9a]   #    tputs(|T|TY_CLEAR_SCREEN, tty_lines, tty_writec);
0xb0ae:	lea rdx, [rip - 0x69]                #    |t|puts(TTY_CLEAR_SCREEN, tty_lines, tty_writec);
0xb0b5:	mov esi, ecx                         
0xb0b7:	mov rdi, rax                         
0xb0ba:	call 0x47e0                          
0xb0bf:	mov eax, 0                           #    |t|ty_flush();
0xb0c4:	call 0xafe2                          
0xb0c9:	nop                                  #|}|
0xb0ca:	pop rbp                              
0xb0cb:	ret                                  
0xb0cc:	endbr64                              #|{|
0xb0d0:	push rbp                             
0xb0d1:	mov rbp, rsp                         
0xb0d4:	mov eax, dword ptr [rip + 0x25902]   #    |t|puts(TTY_START_CURSORAPP,tty_lines-1,tty_writec);
0xb0da:	lea ecx, [rax - 1]                   
0xb0dd:	mov rax, qword ptr [rip + 0x24da4]   #    tputs(|T|TY_START_CURSORAPP,tty_lines-1,tty_writec);
0xb0e4:	lea rdx, [rip - 0x9f]                #    |t|puts(TTY_START_CURSORAPP,tty_lines-1,tty_writec);
0xb0eb:	mov esi, ecx                         
0xb0ed:	mov rdi, rax                         
0xb0f0:	call 0x47e0                          
0xb0f5:	mov eax, 0                           #    |t|ty_flush();
0xb0fa:	call 0xafe2                          
0xb0ff:	nop                                  #|}|
0xb100:	pop rbp                              
0xb101:	ret                                  
0xb102:	endbr64                              #|{|
0xb106:	push rbp                             
0xb107:	mov rbp, rsp                         
0xb10a:	mov eax, dword ptr [rip + 0x258cc]   #    |t|puts(TTY_END_CURSORAPP,tty_lines-1,tty_writec);
0xb110:	lea ecx, [rax - 1]                   
0xb113:	mov rax, qword ptr [rip + 0x24d8e]   #    tputs(|T|TY_END_CURSORAPP,tty_lines-1,tty_writec);
0xb11a:	lea rdx, [rip - 0xd5]                #    |t|puts(TTY_END_CURSORAPP,tty_lines-1,tty_writec);
0xb121:	mov esi, ecx                         
0xb123:	mov rdi, rax                         
0xb126:	call 0x47e0                          
0xb12b:	mov eax, 0                           #    |t|ty_flush();
0xb130:	call 0xafe2                          
0xb135:	nop                                  #|}|
0xb136:	pop rbp                              
0xb137:	ret                                  
0xb138:	endbr64                              #|{|
0xb13c:	push rbp                             
0xb13d:	mov rbp, rsp                         
0xb140:	sub rsp, 0x10                        
0xb144:	mov qword ptr [rbp - 8], rdi         
0xb148:	mov eax, dword ptr [rip + 0x25d36]   #    if (tty_mode |=|= TTY_NONCANONIC)
0xb14e:	cmp eax, 1                           #    if |(|tty_mode == TTY_NONCANONIC)
0xb151:	jne 0xb15d                           
0xb153:	mov edi, 0                           #	|t|ty_set_mode(TTY_CANONIC);
0xb158:	call 0xadac                          
0xb15d:	mov eax, 0                           #    |t|ty_defaults();
0xb162:	call 0xc083                          
0xb167:	cmp qword ptr [rbp - 8], 0           #    if|(|screen && LinuxConsole)
0xb16c:	je 0xb184                            
0xb16e:	mov eax, dword ptr [rip + 0x258cc]   #    if(screen |&|& LinuxConsole)
0xb174:	test eax, eax                        
0xb176:	je 0xb184                            
0xb178:	mov rax, qword ptr [rbp - 8]         #	|t|ty_put_screen(screen);
0xb17c:	mov rdi, rax                         
0xb17f:	call 0xce57                          
0xb184:	mov eax, 0                           #    |t|ty_end_cursorapp();
0xb189:	call 0xb102                          
0xb18e:	mov eax, dword ptr [rip + 0x25848]   #    |t|ty_io_goto(tty_lines, 0);
0xb194:	mov esi, 0                           
0xb199:	mov edi, eax                         
0xb19b:	call 0xb9ff                          
0xb1a0:	mov eax, 0                           #    |t|ty_flush();
0xb1a5:	call 0xafe2                          
0xb1aa:	mov edi, 0xa                         #    |p|rintf("\n");
0xb1af:	call 0x47d0                          
0xb1b4:	nop                                  #|}|
0xb1b5:	leave                                
0xb1b6:	ret                                  
0xb1b7:	endbr64                              #|{|
0xb1bb:	push rbp                             
0xb1bc:	mov rbp, rsp                         
0xb1bf:	sub rsp, 0x20                        
0xb1c3:	mov qword ptr [rbp - 0x18], rdi      
0xb1c7:	mov rax, qword ptr [rbp - 0x18]      #    first = second |=| key_seq;
0xb1cb:	mov qword ptr [rbp - 8], rax         
0xb1cf:	mov rax, qword ptr [rbp - 8]         #    first |=| second = key_seq;
0xb1d3:	mov qword ptr [rbp - 0x10], rax      
0xb1d7:	mov eax, dword ptr [rip + 0x25777]   #    if (tty_kbdmode |=|= TTY_RESTRICTED_INPUT && *key_seq != '^')
0xb1dd:	test eax, eax                        #    if |(|tty_kbdmode == TTY_RESTRICTED_INPUT && *key_seq != '^')
0xb1df:	jne 0xb2aa                           
0xb1e5:	mov rax, qword ptr [rbp - 0x18]      #    if (tty_kbdmode == TTY_RESTRICTED_INPUT && |*|key_seq != '^')
0xb1e9:	movzx eax, byte ptr [rax]            
0xb1ec:	cmp al, 0x5e                         #    if (tty_kbdmode == TTY_RESTRICTED_INPUT |&|& *key_seq != '^')
0xb1ee:	je 0xb2aa                            
0xb1f4:	mov eax, 0                           #	return |N|ULL;
0xb1f9:	jmp 0xb2c4                           
0xb1fe:	mov rax, qword ptr [rbp - 8]         #	if (|*|second == '^')
0xb202:	movzx eax, byte ptr [rax]            
0xb205:	cmp al, 0x5e                         #	if |(|*second == '^')
0xb207:	jne 0xb28d                           
0xb20d:	add qword ptr [rbp - 8], 1           #	    if |(|*++second)
0xb212:	mov rax, qword ptr [rbp - 8]         #	    if (|*|++second)
0xb216:	movzx eax, byte ptr [rax]            
0xb219:	test al, al                          #	    if |(|*++second)
0xb21b:	je 0xb286                            
0xb21d:	mov rax, qword ptr [rbp - 8]         #		if (toupper(|*|second) == 'G' || toupper(*second) == 'Z')
0xb221:	movzx eax, byte ptr [rax]            
0xb224:	movzx eax, al                        #		if (|t|oupper(*second) == 'G' || toupper(*second) == 'Z')
0xb227:	mov edi, eax                         
0xb229:	call 0x4890                          
0xb22e:	cmp eax, 0x47                        #		if |(|toupper(*second) == 'G' || toupper(*second) == 'Z')
0xb231:	je 0xb249                            
0xb233:	mov rax, qword ptr [rbp - 8]         #		if (toupper(*second) == 'G' || toupper(|*|second) == 'Z')
0xb237:	movzx eax, byte ptr [rax]            
0xb23a:	movzx eax, al                        #		if (toupper(*second) == 'G' || |t|oupper(*second) == 'Z')
0xb23d:	mov edi, eax                         
0xb23f:	call 0x4890                          
0xb244:	cmp eax, 0x5a                        #		if (toupper(*second) == 'G' |||| toupper(*second) == 'Z')
0xb247:	jne 0xb250                           
0xb249:	mov eax, 0                           #		    return |N|ULL;
0xb24e:	jmp 0xb2c4                           
0xb250:	mov rax, qword ptr [rbp - 8]         #		*first++ = key_ctrl_table[(*second|+|+ & 0x7F) - ' '];
0xb254:	lea rdx, [rax + 1]                   
0xb258:	mov qword ptr [rbp - 8], rdx         
0xb25c:	movzx eax, byte ptr [rax]            #		*first++ = key_ctrl_table[(|*|second++ & 0x7F) - ' '];
0xb25f:	movzx eax, al                        #		*first++ = key_ctrl_table[(*second++ |&| 0x7F) - ' '];
0xb262:	and eax, 0x7f                        
0xb265:	lea ecx, [rax - 0x20]                #		*first++ = key_ctrl_table[(*second++ & 0x7F) |-| ' '];
0xb268:	mov rax, qword ptr [rbp - 0x10]      #		*first|+|+ = key_ctrl_table[(*second++ & 0x7F) - ' '];
0xb26c:	lea rdx, [rax + 1]                   
0xb270:	mov qword ptr [rbp - 0x10], rdx      
0xb274:	movsxd rdx, ecx                      #		*first++ = key_ctrl_table|[|(*second++ & 0x7F) - ' '];
0xb277:	lea rcx, [rip + 0x24f62]             
0xb27e:	movzx edx, byte ptr [rdx + rcx]      
0xb282:	mov byte ptr [rax], dl               #		*first++ |=| key_ctrl_table[(*second++ & 0x7F) - ' '];
0xb284:	jmp 0xb2aa                           
0xb286:	mov eax, 0                           #		return |N|ULL;
0xb28b:	jmp 0xb2c4                           
0xb28d:	mov rdx, qword ptr [rbp - 8]         #	    *first++ = *second|+|+;
0xb291:	lea rax, [rdx + 1]                   
0xb295:	mov qword ptr [rbp - 8], rax         
0xb299:	mov rax, qword ptr [rbp - 0x10]      #	    *first|+|+ = *second++;
0xb29d:	lea rcx, [rax + 1]                   
0xb2a1:	mov qword ptr [rbp - 0x10], rcx      
0xb2a5:	movzx edx, byte ptr [rdx]            #	    *first++ = |*|second++;
0xb2a8:	mov byte ptr [rax], dl               #	    *first++ |=| *second++;
0xb2aa:	mov rax, qword ptr [rbp - 8]         #    while (|*|second)
0xb2ae:	movzx eax, byte ptr [rax]            
0xb2b1:	test al, al                          
0xb2b3:	jne 0xb1fe                           
0xb2b9:	mov rax, qword ptr [rbp - 0x10]      #    *first |=| 0;
0xb2bd:	mov byte ptr [rax], 0                
0xb2c0:	mov rax, qword ptr [rbp - 0x18]      #    return |(|char *)key_seq;
0xb2c4:	leave                                #|}|
0xb2c5:	ret                                  
0xb2c6:	endbr64                              #|{|
0xb2ca:	push rbp                             
0xb2cb:	mov rbp, rsp                         
0xb2ce:	sub rsp, 0x30                        
0xb2d2:	mov qword ptr [rbp - 0x28], rdi      
0xb2d6:	mov rax, qword ptr fs:[0x28]         #|{|
0xb2df:	mov qword ptr [rbp - 8], rax         
0xb2e3:	xor eax, eax                         
0xb2e5:	mov byte ptr [rip + 0x25fd4], 0      #    keystr[0] |=| '\0';
0xb2ec:	mov rax, qword ptr [rbp - 0x28]      #    for (ptr |=| (unsigned char *)key_seq; *ptr; ptr++)
0xb2f0:	mov qword ptr [rbp - 0x18], rax      
0xb2f4:	jmp 0xb48b                           #    |f|or (ptr = (unsigned char *)key_seq; *ptr; ptr++)
0xb2f9:	mov rax, qword ptr [rbp - 0x18]      #	if |(|ptr != (unsigned char *)key_seq)
0xb2fd:	cmp rax, qword ptr [rbp - 0x28]      
0xb301:	je 0xb324                            
0xb303:	lea rax, [rip + 0x25fb6]             #	    |s|trcat((char *)keystr, " ");
0xb30a:	mov rdi, rax                         
0xb30d:	call 0x4960                          
0xb312:	mov rdx, rax                         
0xb315:	lea rax, [rip + 0x25fa4]             
0xb31c:	add rax, rdx                         
0xb31f:	mov word ptr [rax], 0x20             
0xb324:	mov rax, qword ptr [rbp - 0x18]      #	if (|*|ptr == key_ESC)
0xb328:	movzx eax, byte ptr [rax]            
0xb32b:	cmp al, 0x1b                         #	if |(|*ptr == key_ESC)
0xb32d:	jne 0xb360                           
0xb32f:	lea rax, [rip + 0x25f8a]             #	    |s|trcat((char *)keystr, "escape");
0xb336:	mov rdi, rax                         
0xb339:	call 0x4960                          
0xb33e:	mov rdx, rax                         
0xb341:	lea rax, [rip + 0x25f78]             
0xb348:	add rax, rdx                         
0xb34b:	mov dword ptr [rax], 0x61637365      
0xb351:	mov word ptr [rax + 4], 0x6570       
0xb357:	mov byte ptr [rax + 6], 0            
0xb35b:	jmp 0xb486                           
0xb360:	mov rax, qword ptr [rbp - 0x18]      #	else if (|*|ptr == ' ')
0xb364:	movzx eax, byte ptr [rax]            
0xb367:	cmp al, 0x20                         #	else if |(|*ptr == ' ')
0xb369:	jne 0xb398                           
0xb36b:	lea rax, [rip + 0x25f4e]             #	    |s|trcat((char *)keystr, "space");
0xb372:	mov rdi, rax                         
0xb375:	call 0x4960                          
0xb37a:	mov rdx, rax                         
0xb37d:	lea rax, [rip + 0x25f3c]             
0xb384:	add rax, rdx                         
0xb387:	mov dword ptr [rax], 0x63617073      
0xb38d:	mov word ptr [rax + 4], 0x65         
0xb393:	jmp 0xb486                           
0xb398:	mov rax, qword ptr [rbp - 0x18]      #	else if (|*|ptr == key_BACKSPACE)
0xb39c:	movzx eax, byte ptr [rax]            
0xb39f:	cmp al, 0x7f                         #	else if |(|*ptr == key_BACKSPACE)
0xb3a1:	jne 0xb3d7                           
0xb3a3:	lea rax, [rip + 0x25f16]             #	    |s|trcat((char *)keystr, "backspace");
0xb3aa:	mov rdi, rax                         
0xb3ad:	call 0x4960                          
0xb3b2:	mov rdx, rax                         
0xb3b5:	lea rax, [rip + 0x25f04]             
0xb3bc:	add rax, rdx                         
0xb3bf:	movabs rcx, 0x636170736b636162       
0xb3c9:	mov qword ptr [rax], rcx             
0xb3cc:	mov word ptr [rax + 8], 0x65         
0xb3d2:	jmp 0xb486                           
0xb3d7:	mov rax, qword ptr [rbp - 0x18]      #	else if (|*|ptr == key_CTRL_SPACE)
0xb3db:	movzx eax, byte ptr [rax]            
0xb3de:	cmp al, 0xff                         #	else if |(|*ptr == key_CTRL_SPACE)
0xb3e0:	jne 0xb410                           
0xb3e2:	lea rax, [rip + 0x25ed7]             #	    |s|trcat((char *)keystr, "^space");
0xb3e9:	mov rdi, rax                         
0xb3ec:	call 0x4960                          
0xb3f1:	mov rdx, rax                         
0xb3f4:	lea rax, [rip + 0x25ec5]             
0xb3fb:	add rax, rdx                         
0xb3fe:	mov dword ptr [rax], 0x6170735e      
0xb404:	mov word ptr [rax + 4], 0x6563       
0xb40a:	mov byte ptr [rax + 6], 0            
0xb40e:	jmp 0xb486                           
0xb410:	call 0x4ec0                          #	else if (|i|scntrl(*ptr))
0xb415:	mov rdx, qword ptr [rax]             
0xb418:	mov rax, qword ptr [rbp - 0x18]      
0xb41c:	movzx eax, byte ptr [rax]            
0xb41f:	movzx eax, al                        
0xb422:	add rax, rax                         
0xb425:	add rax, rdx                         
0xb428:	movzx eax, word ptr [rax]            
0xb42b:	movzx eax, ax                        
0xb42e:	and eax, 2                           
0xb431:	test eax, eax                        #	else if |(|iscntrl(*ptr))
0xb433:	je 0xb462                            
0xb435:	mov byte ptr [rbp - 0xb], 0x5e       #	    x[0] |=| '^';
0xb439:	mov rax, qword ptr [rbp - 0x18]      #	    x[1] = |*|ptr + 'A' - 1;
0xb43d:	movzx eax, byte ptr [rax]            
0xb440:	add eax, 0x40                        #	    x[1] = *ptr + 'A' |-| 1;
0xb443:	mov byte ptr [rbp - 0xa], al         #	    x[1] |=| *ptr + 'A' - 1;
0xb446:	mov byte ptr [rbp - 9], 0            #	    x[2] |=| '\0';
0xb44a:	lea rax, [rbp - 0xb]                 #	    |s|trcat((char *)keystr, x);
0xb44e:	mov rsi, rax                         
0xb451:	lea rax, [rip + 0x25e68]             
0xb458:	mov rdi, rax                         
0xb45b:	call 0x4db0                          
0xb460:	jmp 0xb486                           
0xb462:	mov rax, qword ptr [rbp - 0x18]      #	    x[0] = |*|ptr;
0xb466:	movzx eax, byte ptr [rax]            
0xb469:	mov byte ptr [rbp - 0xb], al         #	    x[0] |=| *ptr;
0xb46c:	mov byte ptr [rbp - 0xa], 0          #	    x[1] |=| '\0';
0xb470:	lea rax, [rbp - 0xb]                 #	    |s|trcat((char *)keystr, x);
0xb474:	mov rsi, rax                         
0xb477:	lea rax, [rip + 0x25e42]             
0xb47e:	mov rdi, rax                         
0xb481:	call 0x4db0                          
0xb486:	add qword ptr [rbp - 0x18], 1        #    for (ptr = (unsigned char *)key_seq; *ptr; ptr|+|+)
0xb48b:	mov rax, qword ptr [rbp - 0x18]      #    for (ptr = (unsigned char *)key_seq; |*|ptr; ptr++)
0xb48f:	movzx eax, byte ptr [rax]            
0xb492:	test al, al                          
0xb494:	jne 0xb2f9                           
0xb49a:	lea rax, [rip + 0x25e1f]             #    return |(|unsigned char *)keystr;
0xb4a1:	mov rdx, qword ptr [rbp - 8]         #|}|
0xb4a5:	sub rdx, qword ptr fs:[0x28]         
0xb4ae:	je 0xb4b5                            
0xb4b0:	call 0x4980                          
0xb4b5:	leave                                
0xb4b6:	ret                                  
0xb4b7:	endbr64                              #|{|
0xb4bb:	push rbp                             
0xb4bc:	mov rbp, rsp                         
0xb4bf:	sub rsp, 0x20                        
0xb4c3:	mov dword ptr [rbp - 0x14], 0xffffffff#    int |t|ty_io_cursor_x = -1;
0xb4ca:	mov dword ptr [rbp - 0x10], 0xffffffff#    int |t|ty_io_cursor_y = -1;
0xb4d1:	mov edx, dword ptr [rip + 0x25509]   #    int last_pos = tty_columns |*| tty_lines;
0xb4d7:	mov eax, dword ptr [rip + 0x254ff]   
0xb4dd:	imul eax, edx                        #    int |l|ast_pos = tty_columns * tty_lines;
0xb4e0:	mov dword ptr [rbp - 0xc], eax       
0xb4e3:	mov eax, dword ptr [rip + 0x25513]   #    if (tty_last_char_flag |=|= OFF)
0xb4e9:	test eax, eax                        #    if |(|tty_last_char_flag == OFF)
0xb4eb:	jne 0xb4f1                           
0xb4ed:	sub dword ptr [rbp - 0xc], 1         #	last_pos|-|-;
0xb4f1:	mov edi, 0                           #    |t|ty_cursor(OFF);
0xb4f6:	call 0xbfe3                          
0xb4fb:	mov dword ptr [rbp - 0x18], 0        #    for (pos |=| 0; pos < last_pos; pos++)
0xb502:	jmp 0xb602                           #    |f|or (pos = 0; pos < last_pos; pos++)
0xb507:	mov rdx, qword ptr [rip + 0x25512]   #	if (tty_scr|[|pos] != tty_prev_scr[pos] ||
0xb50e:	mov eax, dword ptr [rbp - 0x18]      
0xb511:	cdqe                                 
0xb513:	add rax, rdx                         
0xb516:	movzx edx, byte ptr [rax]            
0xb519:	mov rcx, qword ptr [rip + 0x25510]   #	if (tty_scr[pos] != tty_prev_scr|[|pos] ||
0xb520:	mov eax, dword ptr [rbp - 0x18]      
0xb523:	cdqe                                 
0xb525:	add rax, rcx                         
0xb528:	movzx eax, byte ptr [rax]            
0xb52b:	cmp dl, al                           #	if |(|tty_scr[pos] != tty_prev_scr[pos] ||
0xb52d:	jne 0xb55b                           
0xb52f:	mov rdx, qword ptr [rip + 0x254f2]   #	    tty_atr|[|pos] != tty_prev_atr[pos])
0xb536:	mov eax, dword ptr [rbp - 0x18]      
0xb539:	cdqe                                 
0xb53b:	add rax, rdx                         
0xb53e:	movzx edx, byte ptr [rax]            
0xb541:	mov rcx, qword ptr [rip + 0x254f0]   #	    tty_atr[pos] != tty_prev_atr|[|pos])
0xb548:	mov eax, dword ptr [rbp - 0x18]      
0xb54b:	cdqe                                 
0xb54d:	add rax, rcx                         
0xb550:	movzx eax, byte ptr [rax]            
0xb553:	cmp dl, al                           #	if (tty_scr[pos] != tty_prev_scr[pos] ||||
0xb555:	je 0xb5fe                            
0xb55b:	mov esi, dword ptr [rip + 0x2547f]   #	    y = pos |/| tty_columns;
0xb561:	mov eax, dword ptr [rbp - 0x18]      #	    y |=| pos / tty_columns;
0xb564:	cdq                                  
0xb565:	idiv esi                             
0xb567:	mov dword ptr [rbp - 8], eax         
0xb56a:	mov ecx, dword ptr [rip + 0x25470]   #	    x = pos |%| tty_columns;
0xb570:	mov eax, dword ptr [rbp - 0x18]      #	    x |=| pos % tty_columns;
0xb573:	cdq                                  
0xb574:	idiv ecx                             
0xb576:	mov dword ptr [rbp - 4], edx         
0xb579:	mov eax, dword ptr [rbp - 4]         #	    if |(|x != tty_io_cursor_x || y != tty_io_cursor_y)
0xb57c:	cmp eax, dword ptr [rbp - 0x14]      
0xb57f:	jne 0xb589                           
0xb581:	mov eax, dword ptr [rbp - 8]         #	    if (x != tty_io_cursor_x |||| y != tty_io_cursor_y)
0xb584:	cmp eax, dword ptr [rbp - 0x10]      
0xb587:	je 0xb5a4                            
0xb589:	mov eax, dword ptr [rbp - 4]         #		|t|ty_io_goto(tty_io_cursor_y = y, tty_io_cursor_x = x);
0xb58c:	mov dword ptr [rbp - 0x14], eax      
0xb58f:	mov eax, dword ptr [rbp - 8]         
0xb592:	mov dword ptr [rbp - 0x10], eax      
0xb595:	mov edx, dword ptr [rbp - 0x14]      
0xb598:	mov eax, dword ptr [rbp - 0x10]      
0xb59b:	mov esi, edx                         
0xb59d:	mov edi, eax                         
0xb59f:	call 0xb9ff                          
0xb5a4:	mov rdx, qword ptr [rip + 0x2547d]   #	    tty_io_colors(tty_atr|[|pos]);
0xb5ab:	mov eax, dword ptr [rbp - 0x18]      
0xb5ae:	cdqe                                 
0xb5b0:	add rax, rdx                         
0xb5b3:	movzx eax, byte ptr [rax]            
0xb5b6:	movzx eax, al                        #	    |t|ty_io_colors(tty_atr[pos]);
0xb5b9:	mov edi, eax                         
0xb5bb:	call 0xbe56                          
0xb5c0:	mov rdx, qword ptr [rip + 0x25459]   #	    tty_writec(tty_scr|[|pos]);
0xb5c7:	mov eax, dword ptr [rbp - 0x18]      
0xb5ca:	cdqe                                 
0xb5cc:	add rax, rdx                         
0xb5cf:	movzx eax, byte ptr [rax]            
0xb5d2:	movzx eax, al                        #	    |t|ty_writec(tty_scr[pos]);
0xb5d5:	mov edi, eax                         
0xb5d7:	mov eax, 0                           
0xb5dc:	call 0xb04c                          
0xb5e1:	add dword ptr [rbp - 0x14], 1        #	    if |(|++tty_io_cursor_x == tty_columns)
0xb5e5:	mov eax, dword ptr [rip + 0x253f5]   #	    if (++tty_io_cursor_x |=|= tty_columns)
0xb5eb:	cmp dword ptr [rbp - 0x14], eax      #	    if |(|++tty_io_cursor_x == tty_columns)
0xb5ee:	jne 0xb5fe                           
0xb5f0:	mov dword ptr [rbp - 0x14], 0        #		tty_io_cursor_x |=| 0;
0xb5f7:	mov dword ptr [rbp - 0x10], 0xffffffff#		tty_io_cursor_y |=| -1;
0xb5fe:	add dword ptr [rbp - 0x18], 1        #    for (pos = 0; pos < last_pos; pos|+|+)
0xb602:	mov eax, dword ptr [rbp - 0x18]      #    for (pos = 0; pos |<| last_pos; pos++)
0xb605:	cmp eax, dword ptr [rbp - 0xc]       
0xb608:	jl 0xb507                            
0xb60e:	mov edx, dword ptr [rip + 0x253ec]   #    |t|ty_io_goto(tty_cursor_y, tty_cursor_x);
0xb614:	mov eax, dword ptr [rip + 0x253ea]   
0xb61a:	mov esi, edx                         
0xb61c:	mov edi, eax                         
0xb61e:	call 0xb9ff                          
0xb623:	mov edi, 1                           #    |t|ty_cursor(ON);
0xb628:	call 0xbfe3                          
0xb62d:	mov eax, dword ptr [rip + 0x2584d]   #    if (|t|ty_index)
0xb633:	test eax, eax                        #    if |(|tty_index)
0xb635:	je 0xb641                            
0xb637:	mov eax, 0                           #	|t|ty_flush();
0xb63c:	call 0xafe2                          
0xb641:	mov edx, dword ptr [rip + 0x25399]   #    memcpy(tty_prev_scr, tty_scr, tty_columns |*| tty_lines * sizeof(char));
0xb647:	mov eax, dword ptr [rip + 0x2538f]   
0xb64d:	imul eax, edx                        
0xb650:	movsxd rdx, eax                      #    |m|emcpy(tty_prev_scr, tty_scr, tty_columns * tty_lines * sizeof(char));
0xb653:	mov rcx, qword ptr [rip + 0x253c6]   
0xb65a:	mov rax, qword ptr [rip + 0x253cf]   
0xb661:	mov rsi, rcx                         
0xb664:	mov rdi, rax                         
0xb667:	call 0x4b70                          
0xb66c:	mov edx, dword ptr [rip + 0x2536e]   #    memcpy(tty_prev_atr, tty_atr, tty_columns |*| tty_lines * sizeof(char));
0xb672:	mov eax, dword ptr [rip + 0x25364]   
0xb678:	imul eax, edx                        
0xb67b:	movsxd rdx, eax                      #    |m|emcpy(tty_prev_atr, tty_atr, tty_columns * tty_lines * sizeof(char));
0xb67e:	mov rcx, qword ptr [rip + 0x253a3]   
0xb685:	mov rax, qword ptr [rip + 0x253ac]   
0xb68c:	mov rsi, rcx                         
0xb68f:	mov rdi, rax                         
0xb692:	call 0x4b70                          
0xb697:	nop                                  #|}|
0xb698:	leave                                
0xb699:	ret                                  
0xb69a:	endbr64                              #|{|
0xb69e:	push rbp                             
0xb69f:	mov rbp, rsp                         
0xb6a2:	sub rsp, 0x10                        
0xb6a6:	mov qword ptr [rbp - 8], rdi         
0xb6aa:	mov dword ptr [rbp - 0xc], esi       
0xb6ad:	mov edx, dword ptr [rip + 0x257cd]   #    if (tty_index |+| len >= TTY_CACHE_SIZE)
0xb6b3:	mov eax, dword ptr [rbp - 0xc]       
0xb6b6:	add eax, edx                         
0xb6b8:	cmp eax, 0x3ff                       #    if |(|tty_index + len >= TTY_CACHE_SIZE)
0xb6bd:	jle 0xb6c9                           
0xb6bf:	mov eax, 0                           #	|t|ty_flush();
0xb6c4:	call 0xafe2                          
0xb6c9:	mov eax, dword ptr [rbp - 0xc]       #    |m|emcpy(tty_cache + tty_index, s, len);
0xb6cc:	movsxd rdx, eax                      
0xb6cf:	mov eax, dword ptr [rip + 0x257ab]   
0xb6d5:	cdqe                                 
0xb6d7:	lea rcx, [rip + 0x253a2]             
0xb6de:	add rcx, rax                         
0xb6e1:	mov rax, qword ptr [rbp - 8]         
0xb6e5:	mov rsi, rax                         
0xb6e8:	mov rdi, rcx                         
0xb6eb:	call 0x4b70                          
0xb6f0:	mov edx, dword ptr [rip + 0x2578a]   #    tty_index |+|= len;
0xb6f6:	mov eax, dword ptr [rbp - 0xc]       
0xb6f9:	add eax, edx                         
0xb6fb:	mov dword ptr [rip + 0x2577f], eax   
0xb701:	mov eax, dword ptr [rbp - 0xc]       #    return |l|en;
0xb704:	leave                                #|}|
0xb705:	ret                                  
0xb706:	endbr64                              #|{|
0xb70a:	push rbp                             
0xb70b:	mov rbp, rsp                         
0xb70e:	sub rsp, 0x20                        
0xb712:	mov qword ptr [rbp - 0x18], rdi      
0xb716:	mov dword ptr [rbp - 0x1c], esi      
0xb719:	mov eax, dword ptr [rip + 0x252e1]   #    int |x| = tty_cursor_x;
0xb71f:	mov dword ptr [rbp - 8], eax         
0xb722:	mov edx, dword ptr [rip + 0x252d8]   #    tty_cursor_x |+|= length;
0xb728:	mov eax, dword ptr [rbp - 0x1c]      
0xb72b:	add eax, edx                         
0xb72d:	mov dword ptr [rip + 0x252cd], eax   
0xb733:	mov eax, dword ptr [rip + 0x252a7]   #    if (x |>|= tty_columns)
0xb739:	cmp dword ptr [rbp - 8], eax         #    if |(|x >= tty_columns)
0xb73c:	jl 0xb748                            
0xb73e:	mov eax, 0                           #	return |0|;
0xb743:	jmp 0xb7e8                           
0xb748:	mov edx, dword ptr [rip + 0x252b6]   #    if (tty_cursor_y |>|= tty_lines)
0xb74e:	mov eax, dword ptr [rip + 0x25288]   
0xb754:	cmp edx, eax                         #    if |(|tty_cursor_y >= tty_lines)
0xb756:	jl 0xb762                            
0xb758:	mov eax, 0                           #	return |0|;
0xb75d:	jmp 0xb7e8                           
0xb762:	mov edx, dword ptr [rbp - 8]         #    if (x |+| length > tty_columns)
0xb765:	mov eax, dword ptr [rbp - 0x1c]      
0xb768:	add edx, eax                         
0xb76a:	mov eax, dword ptr [rip + 0x25270]   #    if (x + length |>| tty_columns)
0xb770:	cmp edx, eax                         #    if |(|x + length > tty_columns)
0xb772:	jle 0xb780                           
0xb774:	mov eax, dword ptr [rip + 0x25266]   #	length = tty_columns |-| x;
0xb77a:	sub eax, dword ptr [rbp - 8]         #	length |=| tty_columns - x;
0xb77d:	mov dword ptr [rbp - 0x1c], eax      
0xb780:	mov edx, dword ptr [rip + 0x2527e]   #    tty_offset = (tty_cursor_y |*| tty_columns) + x;
0xb786:	mov eax, dword ptr [rip + 0x25254]   
0xb78c:	imul edx, eax                        
0xb78f:	mov eax, dword ptr [rbp - 8]         #    tty_offset |=| (tty_cursor_y * tty_columns) + x;
0xb792:	add eax, edx                         
0xb794:	mov dword ptr [rbp - 4], eax         
0xb797:	mov eax, dword ptr [rbp - 0x1c]      #    |m|emcpy(tty_scr + tty_offset, buf, length);
0xb79a:	movsxd rdx, eax                      
0xb79d:	mov rcx, qword ptr [rip + 0x2527c]   
0xb7a4:	mov eax, dword ptr [rbp - 4]         
0xb7a7:	cdqe                                 
0xb7a9:	add rcx, rax                         #    memcpy(tty_scr |+| tty_offset, buf, length);
0xb7ac:	mov rax, qword ptr [rbp - 0x18]      #    |m|emcpy(tty_scr + tty_offset, buf, length);
0xb7b0:	mov rsi, rax                         
0xb7b3:	mov rdi, rcx                         
0xb7b6:	call 0x4b70                          
0xb7bb:	mov eax, dword ptr [rbp - 0x1c]      #    |m|emset(tty_atr + tty_offset, tty_current_attribute, length);
0xb7be:	movsxd rdx, eax                      
0xb7c1:	movzx eax, byte ptr [rip + 0x25240]  
0xb7c8:	movzx eax, al                        
0xb7cb:	mov rsi, qword ptr [rip + 0x25256]   
0xb7d2:	mov ecx, dword ptr [rbp - 4]         
0xb7d5:	movsxd rcx, ecx                      
0xb7d8:	add rcx, rsi                         #    memset(tty_atr |+| tty_offset, tty_current_attribute, length);
0xb7db:	mov esi, eax                         #    |m|emset(tty_atr + tty_offset, tty_current_attribute, length);
0xb7dd:	mov rdi, rcx                         
0xb7e0:	call 0x4a10                          
0xb7e5:	mov eax, dword ptr [rbp - 0x1c]      #    return |l|ength;
0xb7e8:	leave                                #|}|
0xb7e9:	ret                                  
0xb7ea:	endbr64                              #|{|
0xb7ee:	push rbp                             
0xb7ef:	mov rbp, rsp                         
0xb7f2:	sub rsp, 0x20                        
0xb7f6:	mov dword ptr [rbp - 0x14], edi      
0xb7f9:	mov rax, qword ptr fs:[0x28]         #|{|
0xb802:	mov qword ptr [rbp - 8], rax         
0xb806:	xor eax, eax                         
0xb808:	mov eax, dword ptr [rbp - 0x14]      #    char |c|haracter = c;
0xb80b:	mov byte ptr [rbp - 9], al           
0xb80e:	lea rax, [rbp - 9]                   #    return |t|ty_puts(&character, sizeof(char));
0xb812:	mov esi, 1                           
0xb817:	mov rdi, rax                         
0xb81a:	call 0xb706                          
0xb81f:	mov rdx, qword ptr [rbp - 8]         #|}|
0xb823:	sub rdx, qword ptr fs:[0x28]         
0xb82c:	je 0xb833                            
0xb82e:	call 0x4980                          
0xb833:	leave                                
0xb834:	ret                                  
0xb835:	endbr64                              #|{|
0xb839:	push rbp                             
0xb83a:	mov rbp, rsp                         
0xb83d:	sub rsp, 0x20                        
0xb841:	mov qword ptr [rbp - 0x18], rdi      
0xb845:	mov dword ptr [rbp - 0x1c], esi      
0xb848:	mov eax, 0                           #    |t|ty_update();
0xb84d:	call 0xb4b7                          
0xb852:	mov rax, qword ptr [rip + 0x25b9f]   #    if (|t|ty_enter_idle_hook)
0xb859:	test rax, rax                        #    if |(|tty_enter_idle_hook)
0xb85c:	je 0xb86c                            
0xb85e:	mov rdx, qword ptr [rip + 0x25b93]   #	(|*|tty_enter_idle_hook)();
0xb865:	mov eax, 0                           
0xb86a:	call rdx                             
0xb86c:	mov eax, dword ptr [rbp - 0x1c]      #    bytes = |x|read(TTY_INPUT, buf, length);
0xb86f:	movsxd rdx, eax                      
0xb872:	mov rax, qword ptr [rbp - 0x18]      
0xb876:	mov rsi, rax                         
0xb879:	mov edi, 0                           
0xb87e:	call 0x1eee5                         
0xb883:	mov dword ptr [rbp - 4], eax         
0xb886:	mov rax, qword ptr [rip + 0x25b73]   #    if (|t|ty_exit_idle_hook)
0xb88d:	test rax, rax                        #    if |(|tty_exit_idle_hook)
0xb890:	je 0xb8a0                            
0xb892:	mov rdx, qword ptr [rip + 0x25b67]   #	(|*|tty_exit_idle_hook)();
0xb899:	mov eax, 0                           
0xb89e:	call rdx                             
0xb8a0:	mov eax, dword ptr [rbp - 4]         #    return |b|ytes;
0xb8a3:	leave                                #|}|
0xb8a4:	ret                                  
0xb8a5:	endbr64                              #|{|
0xb8a9:	push rbp                             
0xb8aa:	mov rbp, rsp                         
0xb8ad:	mov eax, 0                           #    |t|ty_io_clear();
0xb8b2:	call 0xb099                          
0xb8b7:	mov edx, dword ptr [rip + 0x2511f]   #    memset(tty_scr,      '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
0xb8bd:	mov eax, dword ptr [rip + 0x2511d]   
0xb8c3:	imul eax, edx                        
0xb8c6:	movsxd rdx, eax                      #    |m|emset(tty_scr,      '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb8c9:	mov rax, qword ptr [rip + 0x25150]   
0xb8d0:	mov esi, 0                           
0xb8d5:	mov rdi, rax                         
0xb8d8:	call 0x4a10                          
0xb8dd:	mov edx, dword ptr [rip + 0x250f9]   #    memset(tty_atr,      '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
0xb8e3:	mov eax, dword ptr [rip + 0x250f7]   
0xb8e9:	imul eax, edx                        
0xb8ec:	movsxd rdx, eax                      #    |m|emset(tty_atr,      '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb8ef:	mov rax, qword ptr [rip + 0x25132]   
0xb8f6:	mov esi, 0                           
0xb8fb:	mov rdi, rax                         
0xb8fe:	call 0x4a10                          
0xb903:	mov edx, dword ptr [rip + 0x250d3]   #    memset(tty_prev_scr, '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
0xb909:	mov eax, dword ptr [rip + 0x250d1]   
0xb90f:	imul eax, edx                        
0xb912:	movsxd rdx, eax                      #    |m|emset(tty_prev_scr, '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb915:	mov rax, qword ptr [rip + 0x25114]   
0xb91c:	mov esi, 0                           
0xb921:	mov rdi, rax                         
0xb924:	call 0x4a10                          
0xb929:	mov edx, dword ptr [rip + 0x250ad]   #    memset(tty_prev_atr, '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
0xb92f:	mov eax, dword ptr [rip + 0x250ab]   
0xb935:	imul eax, edx                        
0xb938:	movsxd rdx, eax                      #    |m|emset(tty_prev_atr, '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb93b:	mov rax, qword ptr [rip + 0x250f6]   
0xb942:	mov esi, 0                           
0xb947:	mov rdi, rax                         
0xb94a:	call 0x4a10                          
0xb94f:	mov dword ptr [rip + 0x250a7], 0     #    tty_cursor_x |=| 0;
0xb959:	mov dword ptr [rip + 0x250a1], 0     #    tty_cursor_y |=| 0;
0xb963:	nop                                  #|}|
0xb964:	pop rbp                              
0xb965:	ret                                  
0xb966:	endbr64                              #|{|
0xb96a:	push rbp                             
0xb96b:	mov rbp, rsp                         
0xb96e:	mov edx, dword ptr [rip + 0x25068]   #	   tty_lines |*| tty_columns * sizeof(unsigned char));
0xb974:	mov eax, dword ptr [rip + 0x25066]   
0xb97a:	imul eax, edx                        
0xb97d:	movsxd rdx, eax                      #    |m|emset(tty_scr, ' ',
0xb980:	mov rax, qword ptr [rip + 0x25099]   
0xb987:	mov esi, 0x20                        
0xb98c:	mov rdi, rax                         
0xb98f:	call 0x4a10                          
0xb994:	mov edx, dword ptr [rip + 0x25042]   #	   tty_lines |*| tty_columns * sizeof(unsigned char));
0xb99a:	mov eax, dword ptr [rip + 0x25040]   
0xb9a0:	imul eax, edx                        
0xb9a3:	movsxd rdx, eax                      #    |m|emset(tty_atr, tty_current_attribute,
0xb9a6:	movzx eax, byte ptr [rip + 0x2505b]  
0xb9ad:	movzx ecx, al                        
0xb9b0:	mov rax, qword ptr [rip + 0x25071]   
0xb9b7:	mov esi, ecx                         
0xb9b9:	mov rdi, rax                         
0xb9bc:	call 0x4a10                          
0xb9c1:	mov eax, 0                           #    |t|ty_touch();
0xb9c6:	call 0xb9ce                          
0xb9cb:	nop                                  #|}|
0xb9cc:	pop rbp                              
0xb9cd:	ret                                  
0xb9ce:	endbr64                              #|{|
0xb9d2:	push rbp                             
0xb9d3:	mov rbp, rsp                         
0xb9d6:	mov edx, dword ptr [rip + 0x25000]   #    memset(tty_prev_scr, '\0', tty_lines|*|tty_columns * sizeof(unsigned char));
0xb9dc:	mov eax, dword ptr [rip + 0x24ffe]   
0xb9e2:	imul eax, edx                        
0xb9e5:	movsxd rdx, eax                      #    |m|emset(tty_prev_scr, '\0', tty_lines*tty_columns * sizeof(unsigned char));
0xb9e8:	mov rax, qword ptr [rip + 0x25041]   
0xb9ef:	mov esi, 0                           
0xb9f4:	mov rdi, rax                         
0xb9f7:	call 0x4a10                          
0xb9fc:	nop                                  #|}|
0xb9fd:	pop rbp                              
0xb9fe:	ret                                  
0xb9ff:	endbr64                              #|{|
0xba03:	push rbp                             
0xba04:	mov rbp, rsp                         
0xba07:	sub rsp, 0x10                        
0xba0b:	mov dword ptr [rbp - 4], edi         
0xba0e:	mov dword ptr [rbp - 8], esi         
0xba11:	mov eax, dword ptr [rip + 0x24419]   #    if (|T|TY_MS_FLAG == 0)
0xba17:	test eax, eax                        #    if |(|TTY_MS_FLAG == 0)
0xba19:	jne 0xba25                           
0xba1b:	mov eax, 0                           #	|t|ty_defaults();
0xba20:	call 0xc083                          
0xba25:	cmp dword ptr [rbp - 8], 0           #    if |(|x < 0 || x >= tty_columns ||
0xba29:	js 0xba47                            
0xba2b:	mov eax, dword ptr [rip + 0x24faf]   #    if (x < 0 || x |>|= tty_columns ||
0xba31:	cmp dword ptr [rbp - 8], eax         #    if (x < 0 |||| x >= tty_columns ||
0xba34:	jge 0xba47                           
0xba36:	cmp dword ptr [rbp - 4], 0           #    if (x < 0 || x >= tty_columns ||||
0xba3a:	js 0xba47                            
0xba3c:	mov eax, dword ptr [rip + 0x24f9a]   #	y < 0 || y |>|= tty_lines)
0xba42:	cmp dword ptr [rbp - 4], eax         #	y < 0 |||| y >= tty_lines)
0xba45:	jl 0xba86                            
0xba47:	mov eax, dword ptr [rip + 0x24f8f]   #	tputs(|t|goto(TTY_CURSOR_MOVE, tty_columns - 1, tty_lines - 1),
0xba4d:	lea edx, [rax - 1]                   
0xba50:	mov eax, dword ptr [rip + 0x24f8a]   
0xba56:	lea ecx, [rax - 1]                   
0xba59:	mov rax, qword ptr [rip + 0x24308]   #	tputs(tgoto(|T|TY_CURSOR_MOVE, tty_columns - 1, tty_lines - 1),
0xba60:	mov esi, ecx                         #	tputs(|t|goto(TTY_CURSOR_MOVE, tty_columns - 1, tty_lines - 1),
0xba62:	mov rdi, rax                         
0xba65:	call 0x4920                          
0xba6a:	mov rcx, rax                         
0xba6d:	lea rax, [rip - 0xa28]               #	|t|puts(tgoto(TTY_CURSOR_MOVE, tty_columns - 1, tty_lines - 1),
0xba74:	mov rdx, rax                         
0xba77:	mov esi, 1                           
0xba7c:	mov rdi, rcx                         
0xba7f:	call 0x47e0                          
0xba84:	jmp 0xbab8                           
0xba86:	mov rax, qword ptr [rip + 0x242db]   #	tputs(tgoto(|T|TY_CURSOR_MOVE, x, y), 1, tty_writec);
0xba8d:	mov edx, dword ptr [rbp - 4]         #	tputs(|t|goto(TTY_CURSOR_MOVE, x, y), 1, tty_writec);
0xba90:	mov ecx, dword ptr [rbp - 8]         
0xba93:	mov esi, ecx                         
0xba95:	mov rdi, rax                         
0xba98:	call 0x4920                          
0xba9d:	mov rcx, rax                         
0xbaa0:	lea rax, [rip - 0xa5b]               #	|t|puts(tgoto(TTY_CURSOR_MOVE, x, y), 1, tty_writec);
0xbaa7:	mov rdx, rax                         
0xbaaa:	mov esi, 1                           
0xbaaf:	mov rdi, rcx                         
0xbab2:	call 0x47e0                          
0xbab7:	nop                                  #|}|
0xbab8:	nop                                  
0xbab9:	leave                                
0xbaba:	ret                                  
0xbabb:	endbr64                              #|{|
0xbabf:	push rbp                             
0xbac0:	mov rbp, rsp                         
0xbac3:	sub rsp, 0x30                        
0xbac7:	mov dword ptr [rbp - 0x24], edi      
0xbaca:	mov rax, qword ptr fs:[0x28]         #|{|
0xbad3:	mov qword ptr [rbp - 8], rax         
0xbad7:	xor eax, eax                         
0xbad9:	mov eax, dword ptr [rip + 0x24f2d]   #    if (fg_cache |=|= VALID_CACHE && color == TTY_IO_FOREGROUND)
0xbadf:	cmp eax, 1                           #    if |(|fg_cache == VALID_CACHE && color == TTY_IO_FOREGROUND)
0xbae2:	jne 0xbaf6                           
0xbae4:	movzx eax, byte ptr [rip + 0x24f1e]  #    if (fg_cache == VALID_CACHE && color == |T|TY_IO_FOREGROUND)
0xbaeb:	movzx eax, al                        
0xbaee:	and eax, 7                           
0xbaf1:	cmp dword ptr [rbp - 0x24], eax      #    if (fg_cache == VALID_CACHE |&|& color == TTY_IO_FOREGROUND)
0xbaf4:	je 0xbb71                            
0xbaf6:	mov eax, dword ptr [rip + 0x2351c]   #    if (AnsiColors |=|= ON)
0xbafc:	cmp eax, 1                           #    if |(|AnsiColors == ON)
0xbaff:	jne 0xbb3a                           
0xbb01:	mov eax, dword ptr [rip + 0x24185]   #	|m|emcpy(str, ansi_foreground, sizeof(ansi_foreground));
0xbb07:	mov dword ptr [rbp - 0x20], eax      
0xbb0a:	movzx eax, byte ptr [rip + 0x2417f]  
0xbb11:	mov byte ptr [rbp - 0x1c], al        
0xbb14:	movzx eax, byte ptr [rbp - 0x1d]     #	str[3] |+|= color;
0xbb18:	mov edx, eax                         
0xbb1a:	mov eax, dword ptr [rbp - 0x24]      
0xbb1d:	add eax, edx                         
0xbb1f:	mov byte ptr [rbp - 0x1d], al        
0xbb22:	lea rax, [rbp - 0x20]                #	|t|ty_writes(str, sizeof(ansi_foreground));
0xbb26:	mov esi, 5                           
0xbb2b:	mov rdi, rax                         
0xbb2e:	mov eax, 0                           
0xbb33:	call 0xb69a                          
0xbb38:	jmp 0xbb4b                           
0xbb3a:	cmp dword ptr [rbp - 0x24], 7        #	|t|ty_io_reversevid(color != WHITE);
0xbb3e:	setne al                             
0xbb41:	movzx eax, al                        
0xbb44:	mov edi, eax                         
0xbb46:	call 0xbd5a                          
0xbb4b:	mov dword ptr [rip + 0x24eb7], 1     #    fg_cache |=| VALID_CACHE;
0xbb55:	movzx eax, byte ptr [rip + 0x24ead]  #    |T|TY_IO_SET_FOREGROUND(color);
0xbb5c:	and eax, 0xfffffff8                  
0xbb5f:	mov edx, eax                         
0xbb61:	mov eax, dword ptr [rbp - 0x24]      
0xbb64:	and eax, 7                           
0xbb67:	or eax, edx                          
0xbb69:	mov byte ptr [rip + 0x24e9a], al     
0xbb6f:	jmp 0xbb72                           
0xbb71:	nop                                  #	|r|eturn;
0xbb72:	mov rax, qword ptr [rbp - 8]         #|}|
0xbb76:	sub rax, qword ptr fs:[0x28]         
0xbb7f:	je 0xbb86                            
0xbb81:	call 0x4980                          
0xbb86:	leave                                
0xbb87:	ret                                  
0xbb88:	endbr64                              #|{|
0xbb8c:	push rbp                             
0xbb8d:	mov rbp, rsp                         
0xbb90:	sub rsp, 0x30                        
0xbb94:	mov dword ptr [rbp - 0x24], edi      
0xbb97:	mov rax, qword ptr fs:[0x28]         #|{|
0xbba0:	mov qword ptr [rbp - 8], rax         
0xbba4:	xor eax, eax                         
0xbba6:	mov eax, dword ptr [rip + 0x24e64]   #    if (bg_cache |=|= VALID_CACHE && color == TTY_IO_BACKGROUND)
0xbbac:	cmp eax, 1                           #    if |(|bg_cache == VALID_CACHE && color == TTY_IO_BACKGROUND)
0xbbaf:	jne 0xbbc6                           
0xbbb1:	movzx eax, byte ptr [rip + 0x24e51]  #    if (bg_cache == VALID_CACHE && color == |T|TY_IO_BACKGROUND)
0xbbb8:	movzx eax, al                        
0xbbbb:	sar eax, 3                           
0xbbbe:	and eax, 7                           
0xbbc1:	cmp dword ptr [rbp - 0x24], eax      #    if (bg_cache == VALID_CACHE |&|& color == TTY_IO_BACKGROUND)
0xbbc4:	je 0xbc44                            
0xbbc6:	mov eax, dword ptr [rip + 0x2344c]   #    if (AnsiColors |=|= ON)
0xbbcc:	cmp eax, 1                           #    if |(|AnsiColors == ON)
0xbbcf:	jne 0xbc0a                           
0xbbd1:	mov eax, dword ptr [rip + 0x240ba]   #	|m|emcpy(str, ansi_background, sizeof(ansi_background));
0xbbd7:	mov dword ptr [rbp - 0x20], eax      
0xbbda:	movzx eax, byte ptr [rip + 0x240b4]  
0xbbe1:	mov byte ptr [rbp - 0x1c], al        
0xbbe4:	movzx eax, byte ptr [rbp - 0x1d]     #	str[3] |+|= color;
0xbbe8:	mov edx, eax                         
0xbbea:	mov eax, dword ptr [rbp - 0x24]      
0xbbed:	add eax, edx                         
0xbbef:	mov byte ptr [rbp - 0x1d], al        
0xbbf2:	lea rax, [rbp - 0x20]                #	|t|ty_writes(str, sizeof(ansi_background));
0xbbf6:	mov esi, 5                           
0xbbfb:	mov rdi, rax                         
0xbbfe:	mov eax, 0                           
0xbc03:	call 0xb69a                          
0xbc08:	jmp 0xbc1b                           
0xbc0a:	cmp dword ptr [rbp - 0x24], 0        #	|t|ty_io_reversevid(color != BLACK);
0xbc0e:	setne al                             
0xbc11:	movzx eax, al                        
0xbc14:	mov edi, eax                         
0xbc16:	call 0xbd5a                          
0xbc1b:	mov dword ptr [rip + 0x24deb], 1     #    bg_cache |=| VALID_CACHE;
0xbc25:	movzx eax, byte ptr [rip + 0x24ddd]  #    |T|TY_IO_SET_BACKGROUND(color);
0xbc2c:	and eax, 0xffffffc7                  
0xbc2f:	mov edx, eax                         
0xbc31:	mov eax, dword ptr [rbp - 0x24]      
0xbc34:	shl eax, 3                           
0xbc37:	and eax, 0x38                        
0xbc3a:	or eax, edx                          
0xbc3c:	mov byte ptr [rip + 0x24dc7], al     
0xbc42:	jmp 0xbc45                           
0xbc44:	nop                                  #	|r|eturn;
0xbc45:	mov rax, qword ptr [rbp - 8]         #|}|
0xbc49:	sub rax, qword ptr fs:[0x28]         
0xbc52:	je 0xbc59                            
0xbc54:	call 0x4980                          
0xbc59:	leave                                
0xbc5a:	ret                                  
0xbc5b:	endbr64                              #|{|
0xbc5f:	push rbp                             
0xbc60:	mov rbp, rsp                         
0xbc63:	sub rsp, 0x10                        
0xbc67:	mov dword ptr [rbp - 4], edi         
0xbc6a:	mov eax, dword ptr [rip + 0x24da4]   #    if (br_cache |=|= VALID_CACHE && status == TTY_IO_BRIGHTNESS)
0xbc70:	cmp eax, 1                           #    if |(|br_cache == VALID_CACHE && status == TTY_IO_BRIGHTNESS)
0xbc73:	jne 0xbc8e                           
0xbc75:	movzx eax, byte ptr [rip + 0x24d8d]  #    if (br_cache == VALID_CACHE && status == |T|TY_IO_BRIGHTNESS)
0xbc7c:	movzx eax, al                        
0xbc7f:	sar eax, 6                           
0xbc82:	and eax, 1                           
0xbc85:	cmp dword ptr [rbp - 4], eax         #    if (br_cache == VALID_CACHE |&|& status == TTY_IO_BRIGHTNESS)
0xbc88:	je 0xbd57                            
0xbc8e:	cmp dword ptr [rbp - 4], 1           #    if |(|status == ON)
0xbc92:	jne 0xbcc1                           
0xbc94:	mov rax, qword ptr [rip + 0x2404d]   #	if (|T|TY_BRIGHT_ON)
0xbc9b:	test rax, rax                        #	if |(|TTY_BRIGHT_ON)
0xbc9e:	je 0xbd2e                            
0xbca4:	mov rax, qword ptr [rip + 0x2403d]   #	    tputs(|T|TY_BRIGHT_ON, 1, tty_writec);
0xbcab:	lea rdx, [rip - 0xc66]               #	    |t|puts(TTY_BRIGHT_ON, 1, tty_writec);
0xbcb2:	mov esi, 1                           
0xbcb7:	mov rdi, rax                         
0xbcba:	call 0x47e0                          
0xbcbf:	jmp 0xbd2e                           
0xbcc1:	mov rax, qword ptr [rip + 0x23fe0]   #	if (|T|TY_ATTRIBUTES_OFF)
0xbcc8:	test rax, rax                        #	if |(|TTY_ATTRIBUTES_OFF)
0xbccb:	je 0xbce8                            
0xbccd:	mov rax, qword ptr [rip + 0x23fd4]   #	    tputs(|T|TY_ATTRIBUTES_OFF, 1, tty_writec);
0xbcd4:	lea rdx, [rip - 0xc8f]               #	    |t|puts(TTY_ATTRIBUTES_OFF, 1, tty_writec);
0xbcdb:	mov esi, 1                           
0xbce0:	mov rdi, rax                         
0xbce3:	call 0x47e0                          
0xbce8:	mov dword ptr [rip + 0x24d1a], 0     #	fg_cache |=| INVALID_CACHE;
0xbcf2:	mov dword ptr [rip + 0x24d14], 0     #	bg_cache |=| INVALID_CACHE;
0xbcfc:	movzx eax, byte ptr [rip + 0x24d06]  #	|T|TY_IO_SET_BRIGHTNESS(OFF);
0xbd03:	and eax, 0xffffffbf                  
0xbd06:	mov byte ptr [rip + 0x24cfd], al     
0xbd0c:	movzx eax, byte ptr [rip + 0x24cf6]  #	if (|T|TY_IO_REVERSEVID == ON)
0xbd13:	shr al, 7                            
0xbd16:	cmp al, 1                            #	if |(|TTY_IO_REVERSEVID == ON)
0xbd18:	jne 0xbd2e                           
0xbd1a:	mov dword ptr [rip + 0x24cf4], 0     #	    rv_cache |=| INVALID_CACHE;
0xbd24:	mov edi, 1                           #	    |t|ty_io_reversevid(ON);
0xbd29:	call 0xbd5a                          
0xbd2e:	mov dword ptr [rip + 0x24cdc], 1     #    br_cache |=| VALID_CACHE;
0xbd38:	movzx eax, byte ptr [rip + 0x24cca]  #    |T|TY_IO_SET_BRIGHTNESS(status);
0xbd3f:	and eax, 0xffffffbf                  
0xbd42:	mov edx, eax                         
0xbd44:	mov eax, dword ptr [rbp - 4]         
0xbd47:	shl eax, 6                           
0xbd4a:	and eax, 0x40                        
0xbd4d:	or eax, edx                          
0xbd4f:	mov byte ptr [rip + 0x24cb4], al     
0xbd55:	jmp 0xbd58                           
0xbd57:	nop                                  #	|r|eturn;
0xbd58:	leave                                #|}|
0xbd59:	ret                                  
0xbd5a:	endbr64                              #|{|
0xbd5e:	push rbp                             
0xbd5f:	mov rbp, rsp                         
0xbd62:	sub rsp, 0x10                        
0xbd66:	mov dword ptr [rbp - 4], edi         
0xbd69:	mov eax, dword ptr [rip + 0x24ca9]   #    if (rv_cache |=|= VALID_CACHE && status == TTY_IO_REVERSEVID)
0xbd6f:	cmp eax, 1                           #    if |(|rv_cache == VALID_CACHE && status == TTY_IO_REVERSEVID)
0xbd72:	jne 0xbd8a                           
0xbd74:	movzx eax, byte ptr [rip + 0x24c8e]  #    if (rv_cache == VALID_CACHE && status == |T|TY_IO_REVERSEVID)
0xbd7b:	shr al, 7                            
0xbd7e:	movzx eax, al                        
0xbd81:	cmp dword ptr [rbp - 4], eax         #    if (rv_cache == VALID_CACHE |&|& status == TTY_IO_REVERSEVID)
0xbd84:	je 0xbe53                            
0xbd8a:	cmp dword ptr [rbp - 4], 1           #    if |(|status == ON)
0xbd8e:	jne 0xbdbd                           
0xbd90:	mov rax, qword ptr [rip + 0x23f31]   #	if (|T|TY_REVERSE_ON)
0xbd97:	test rax, rax                        #	if |(|TTY_REVERSE_ON)
0xbd9a:	je 0xbe2d                            
0xbda0:	mov rax, qword ptr [rip + 0x23f21]   #	    tputs(|T|TY_REVERSE_ON, 1, tty_writec);
0xbda7:	lea rdx, [rip - 0xd62]               #	    |t|puts(TTY_REVERSE_ON, 1, tty_writec);
0xbdae:	mov esi, 1                           
0xbdb3:	mov rdi, rax                         
0xbdb6:	call 0x47e0                          
0xbdbb:	jmp 0xbe2d                           
0xbdbd:	mov rax, qword ptr [rip + 0x23ee4]   #	if (|T|TY_ATTRIBUTES_OFF)
0xbdc4:	test rax, rax                        #	if |(|TTY_ATTRIBUTES_OFF)
0xbdc7:	je 0xbde4                            
0xbdc9:	mov rax, qword ptr [rip + 0x23ed8]   #	    tputs(|T|TY_ATTRIBUTES_OFF, 1, tty_writec);
0xbdd0:	lea rdx, [rip - 0xd8b]               #	    |t|puts(TTY_ATTRIBUTES_OFF, 1, tty_writec);
0xbdd7:	mov esi, 1                           
0xbddc:	mov rdi, rax                         
0xbddf:	call 0x47e0                          
0xbde4:	mov dword ptr [rip + 0x24c1e], 0     #	fg_cache |=| INVALID_CACHE;
0xbdee:	mov dword ptr [rip + 0x24c18], 0     #	bg_cache |=| INVALID_CACHE;
0xbdf8:	movzx eax, byte ptr [rip + 0x24c0a]  #	|T|TY_IO_SET_REVERSEVID(OFF);
0xbdff:	and eax, 0x7f                        
0xbe02:	mov byte ptr [rip + 0x24c01], al     
0xbe08:	movzx eax, byte ptr [rip + 0x24bfa]  #	if (TTY_IO_BRIGHTNESS |=|= ON)
0xbe0f:	movzx eax, al                        
0xbe12:	and eax, 0x40                        
0xbe15:	test eax, eax                        #	if |(|TTY_IO_BRIGHTNESS == ON)
0xbe17:	je 0xbe2d                            
0xbe19:	mov dword ptr [rip + 0x24bf1], 0     #	    br_cache |=| INVALID_CACHE;
0xbe23:	mov edi, 1                           #	    |t|ty_io_brightness(ON);
0xbe28:	call 0xbc5b                          
0xbe2d:	mov dword ptr [rip + 0x24be1], 1     #    rv_cache |=| VALID_CACHE;
0xbe37:	movzx eax, byte ptr [rip + 0x24bcb]  #    |T|TY_IO_SET_REVERSEVID(status);
0xbe3e:	and eax, 0x7f                        
0xbe41:	mov edx, eax                         
0xbe43:	mov eax, dword ptr [rbp - 4]         
0xbe46:	shl eax, 7                           
0xbe49:	or eax, edx                          
0xbe4b:	mov byte ptr [rip + 0x24bb8], al     
0xbe51:	jmp 0xbe54                           
0xbe53:	nop                                  #	|r|eturn;
0xbe54:	leave                                #|}|
0xbe55:	ret                                  
0xbe56:	endbr64                              #|{|
0xbe5a:	push rbp                             
0xbe5b:	mov rbp, rsp                         
0xbe5e:	sub rsp, 0x10                        
0xbe62:	mov dword ptr [rbp - 4], edi         
0xbe65:	mov eax, dword ptr [rbp - 4]         #    tty_io_brightness(|_|TTY_BRIGHTNESS(attributes));
0xbe68:	sar eax, 6                           
0xbe6b:	and eax, 1                           #    |t|ty_io_brightness(_TTY_BRIGHTNESS(attributes));
0xbe6e:	mov edi, eax                         
0xbe70:	call 0xbc5b                          
0xbe75:	mov eax, dword ptr [rbp - 4]         #    |t|ty_io_foreground(_TTY_FOREGROUND(attributes));
0xbe78:	and eax, 7                           
0xbe7b:	mov edi, eax                         
0xbe7d:	call 0xbabb                          
0xbe82:	mov eax, dword ptr [rbp - 4]         #    tty_io_background(|_|TTY_BACKGROUND(attributes));
0xbe85:	sar eax, 3                           
0xbe88:	and eax, 7                           #    |t|ty_io_background(_TTY_BACKGROUND(attributes));
0xbe8b:	mov edi, eax                         
0xbe8d:	call 0xbb88                          
0xbe92:	nop                                  #|}|
0xbe93:	leave                                
0xbe94:	ret                                  
0xbe95:	endbr64                              #|{|
0xbe99:	push rbp                             
0xbe9a:	mov rbp, rsp                         
0xbe9d:	mov dword ptr [rbp - 4], edi         
0xbea0:	mov dword ptr [rbp - 8], esi         
0xbea3:	mov eax, dword ptr [rbp - 4]         #    tty_cursor_y |=| y;
0xbea6:	mov dword ptr [rip + 0x24b58], eax   
0xbeac:	mov eax, dword ptr [rbp - 8]         #    tty_cursor_x |=| x;
0xbeaf:	mov dword ptr [rip + 0x24b4b], eax   
0xbeb5:	nop                                  #|}|
0xbeb6:	pop rbp                              
0xbeb7:	ret                                  
0xbeb8:	endbr64                              #|{|
0xbebc:	push rbp                             
0xbebd:	mov rbp, rsp                         
0xbec0:	mov qword ptr [rbp - 8], rdi         
0xbec4:	mov qword ptr [rbp - 0x10], rsi      
0xbec8:	mov edx, dword ptr [rip + 0x24b36]   #    *y |=| tty_cursor_y;
0xbece:	mov rax, qword ptr [rbp - 8]         
0xbed2:	mov dword ptr [rax], edx             
0xbed4:	mov edx, dword ptr [rip + 0x24b26]   #    *x |=| tty_cursor_x;
0xbeda:	mov rax, qword ptr [rbp - 0x10]      
0xbede:	mov dword ptr [rax], edx             
0xbee0:	nop                                  #|}|
0xbee1:	pop rbp                              
0xbee2:	ret                                  
0xbee3:	endbr64                              #|{|
0xbee7:	push rbp                             
0xbee8:	mov rbp, rsp                         
0xbeeb:	mov dword ptr [rbp - 4], edi         
0xbeee:	movzx eax, byte ptr [rip + 0x24b13]  #    |T|TY_SET_FOREGROUND(color);
0xbef5:	and eax, 0xfffffff8                  
0xbef8:	mov edx, eax                         
0xbefa:	mov eax, dword ptr [rbp - 4]         
0xbefd:	and eax, 7                           
0xbf00:	or eax, edx                          
0xbf02:	mov byte ptr [rip + 0x24b00], al     
0xbf08:	nop                                  #|}|
0xbf09:	pop rbp                              
0xbf0a:	ret                                  
0xbf0b:	endbr64                              #|{|
0xbf0f:	push rbp                             
0xbf10:	mov rbp, rsp                         
0xbf13:	mov dword ptr [rbp - 4], edi         
0xbf16:	movzx eax, byte ptr [rip + 0x24aeb]  #    |T|TY_SET_BACKGROUND(color);
0xbf1d:	and eax, 0xffffffc7                  
0xbf20:	mov edx, eax                         
0xbf22:	mov eax, dword ptr [rbp - 4]         
0xbf25:	shl eax, 3                           
0xbf28:	and eax, 0x38                        
0xbf2b:	or eax, edx                          
0xbf2d:	mov byte ptr [rip + 0x24ad5], al     
0xbf33:	nop                                  #|}|
0xbf34:	pop rbp                              
0xbf35:	ret                                  
0xbf36:	endbr64                              #|{|
0xbf3a:	push rbp                             
0xbf3b:	mov rbp, rsp                         
0xbf3e:	mov dword ptr [rbp - 4], edi         
0xbf41:	movzx eax, byte ptr [rip + 0x24ac0]  #    |T|TY_SET_BRIGHTNESS(status);
0xbf48:	and eax, 0xffffffbf                  
0xbf4b:	mov edx, eax                         
0xbf4d:	mov eax, dword ptr [rbp - 4]         
0xbf50:	shl eax, 6                           
0xbf53:	and eax, 0x40                        
0xbf56:	or eax, edx                          
0xbf58:	mov byte ptr [rip + 0x24aaa], al     
0xbf5e:	nop                                  #|}|
0xbf5f:	pop rbp                              
0xbf60:	ret                                  
0xbf61:	endbr64                              #|{|
0xbf65:	push rbp                             
0xbf66:	mov rbp, rsp                         
0xbf69:	mov dword ptr [rbp - 4], edi         
0xbf6c:	movzx eax, byte ptr [rip + 0x24a95]  #    |T|TY_SET_REVERSEVID(status);
0xbf73:	and eax, 0x7f                        
0xbf76:	mov edx, eax                         
0xbf78:	mov eax, dword ptr [rbp - 4]         
0xbf7b:	shl eax, 7                           
0xbf7e:	or eax, edx                          
0xbf80:	mov byte ptr [rip + 0x24a82], al     
0xbf86:	nop                                  #|}|
0xbf87:	pop rbp                              
0xbf88:	ret                                  
0xbf89:	endbr64                              #|{|
0xbf8d:	push rbp                             
0xbf8e:	mov rbp, rsp                         
0xbf91:	sub rsp, 0x10                        
0xbf95:	mov dword ptr [rbp - 4], edi         
0xbf98:	mov dword ptr [rbp - 8], esi         
0xbf9b:	mov dword ptr [rbp - 0xc], edx       
0xbf9e:	mov eax, dword ptr [rbp - 4]         #    |t|ty_brightness(brightness);
0xbfa1:	mov edi, eax                         
0xbfa3:	call 0xbf36                          
0xbfa8:	mov eax, dword ptr [rbp - 8]         #    |t|ty_foreground(foreground);
0xbfab:	mov edi, eax                         
0xbfad:	call 0xbee3                          
0xbfb2:	mov eax, dword ptr [rbp - 0xc]       #    |t|ty_background(background);
0xbfb5:	mov edi, eax                         
0xbfb7:	call 0xbf0b                          
0xbfbc:	nop                                  #|}|
0xbfbd:	leave                                
0xbfbe:	ret                                  
0xbfbf:	endbr64                              #|{|
0xbfc3:	push rbp                             
0xbfc4:	mov rbp, rsp                         
0xbfc7:	mov edi, 7                           #    |t|ty_writec(7);
0xbfcc:	mov eax, 0                           
0xbfd1:	call 0xb04c                          
0xbfd6:	mov eax, 0                           #    |t|ty_flush();
0xbfdb:	call 0xafe2                          
0xbfe0:	nop                                  #|}|
0xbfe1:	pop rbp                              
0xbfe2:	ret                                  
0xbfe3:	endbr64                              #|{|
0xbfe7:	push rbp                             
0xbfe8:	mov rbp, rsp                         
0xbfeb:	sub rsp, 0x10                        
0xbfef:	mov dword ptr [rbp - 4], edi         
0xbff2:	cmp dword ptr [rbp - 4], 0           #    if |(|status)
0xbff6:	je 0xc021                            
0xbff8:	mov rax, qword ptr [rip + 0x23d29]   #	if (|T|TY_CURSOR_ON)
0xbfff:	test rax, rax                        #	if |(|TTY_CURSOR_ON)
0xc002:	je 0xc048                            
0xc004:	mov rax, qword ptr [rip + 0x23d1d]   #	    tputs(|T|TY_CURSOR_ON, 1, tty_writec);
0xc00b:	lea rdx, [rip - 0xfc6]               #	    |t|puts(TTY_CURSOR_ON, 1, tty_writec);
0xc012:	mov esi, 1                           
0xc017:	mov rdi, rax                         
0xc01a:	call 0x47e0                          
0xc01f:	jmp 0xc048                           #|}|
0xc021:	mov rax, qword ptr [rip + 0x23ce0]   #	if (|T|TY_CURSOR_OFF)
0xc028:	test rax, rax                        #	if |(|TTY_CURSOR_OFF)
0xc02b:	je 0xc048                            
0xc02d:	mov rax, qword ptr [rip + 0x23cd4]   #	    tputs(|T|TY_CURSOR_OFF, 1, tty_writec);
0xc034:	lea rdx, [rip - 0xfef]               #	    |t|puts(TTY_CURSOR_OFF, 1, tty_writec);
0xc03b:	mov esi, 1                           
0xc040:	mov rdi, rax                         
0xc043:	call 0x47e0                          
0xc048:	nop                                  #|}|
0xc049:	leave                                
0xc04a:	ret                                  
0xc04b:	endbr64                              #|{|
0xc04f:	push rbp                             
0xc050:	mov rbp, rsp                         
0xc053:	mov qword ptr [rbp - 8], rdi         
0xc057:	movzx edx, byte ptr [rip + 0x249aa]  #    *status |=| tty_current_attribute;
0xc05e:	mov rax, qword ptr [rbp - 8]         
0xc062:	mov byte ptr [rax], dl               
0xc064:	nop                                  #|}|
0xc065:	pop rbp                              
0xc066:	ret                                  
0xc067:	endbr64                              #|{|
0xc06b:	push rbp                             
0xc06c:	mov rbp, rsp                         
0xc06f:	mov qword ptr [rbp - 8], rdi         
0xc073:	mov rax, qword ptr [rbp - 8]         #    tty_current_attribute = |*|status;
0xc077:	movzx eax, byte ptr [rax]            
0xc07a:	mov byte ptr [rip + 0x24988], al     #    tty_current_attribute |=| *status;
0xc080:	nop                                  #|}|
0xc081:	pop rbp                              
0xc082:	ret                                  
0xc083:	endbr64                              #|{|
0xc087:	push rbp                             
0xc088:	mov rbp, rsp                         
0xc08b:	mov eax, dword ptr [rip + 0x22f87]   #    if (AnsiColors |=|= ON)
0xc091:	cmp eax, 1                           #    if |(|AnsiColors == ON)
0xc094:	jne 0xc0af                           
0xc096:	mov esi, 4                           #	|t|ty_writes(ansi_defaults, sizeof(ansi_defaults));
0xc09b:	lea rax, [rip + 0x23bf4]             
0xc0a2:	mov rdi, rax                         
0xc0a5:	mov eax, 0                           
0xc0aa:	call 0xb69a                          
0xc0af:	mov rax, qword ptr [rip + 0x23bf2]   #    if (|T|TY_ATTRIBUTES_OFF)
0xc0b6:	test rax, rax                        #    if |(|TTY_ATTRIBUTES_OFF)
0xc0b9:	je 0xc0d6                            
0xc0bb:	mov rax, qword ptr [rip + 0x23be6]   #	tputs(|T|TY_ATTRIBUTES_OFF, 1, tty_writec);
0xc0c2:	lea rdx, [rip - 0x107d]              #	|t|puts(TTY_ATTRIBUTES_OFF, 1, tty_writec);
0xc0c9:	mov esi, 1                           
0xc0ce:	mov rdi, rax                         
0xc0d1:	call 0x47e0                          
0xc0d6:	mov dword ptr [rip + 0x2492c], 0     #    fg_cache |=| INVALID_CACHE;
0xc0e0:	mov dword ptr [rip + 0x24926], 0     #    bg_cache |=| INVALID_CACHE;
0xc0ea:	mov dword ptr [rip + 0x24920], 0     #    br_cache |=| INVALID_CACHE;
0xc0f4:	mov dword ptr [rip + 0x2491a], 0     #    rv_cache |=| INVALID_CACHE;
0xc0fe:	nop                                  #|}|
0xc0ff:	pop rbp                              
0xc100:	ret                                  
0xc101:	endbr64                              #|{|
0xc105:	push rbp                             
0xc106:	mov rbp, rsp                         
0xc109:	mov eax, dword ptr [rip + 0x24da1]   #    int key = keybuf|[|keyindex];
0xc10f:	cdqe                                 
0xc111:	lea rdx, [rip + 0x24da8]             
0xc118:	movzx eax, byte ptr [rax + rdx]      
0xc11c:	movsx eax, al                        #    int |k|ey = keybuf[keyindex];
0xc11f:	mov dword ptr [rbp - 4], eax         
0xc122:	mov eax, dword ptr [rbp - 4]         #    if (key |&| 0x80)
0xc125:	and eax, 0x80                        
0xc12a:	test eax, eax                        #    if |(|key & 0x80)
0xc12c:	je 0xc15f                            
0xc12e:	mov eax, dword ptr [rip + 0x24d7c]   #	keybuf[keyindex] |&|= 0x7F;
0xc134:	cdqe                                 
0xc136:	lea rdx, [rip + 0x24d83]             
0xc13d:	movzx edx, byte ptr [rax + rdx]      
0xc141:	mov eax, dword ptr [rip + 0x24d69]   
0xc147:	mov ecx, edx                         
0xc149:	and ecx, 0x7f                        
0xc14c:	cdqe                                 
0xc14e:	lea rdx, [rip + 0x24d6b]             
0xc155:	mov byte ptr [rax + rdx], cl         
0xc158:	mov eax, 0x1b                        #	return |k|ey_ESC;
0xc15d:	jmp 0xc180                           
0xc15f:	mov eax, dword ptr [rip + 0x24d47]   #    keyno|-|-;
0xc165:	sub eax, 1                           
0xc168:	mov dword ptr [rip + 0x24d3e], eax   
0xc16e:	mov eax, dword ptr [rip + 0x24d3c]   #    keyindex|+|+;
0xc174:	add eax, 1                           
0xc177:	mov dword ptr [rip + 0x24d33], eax   
0xc17d:	mov eax, dword ptr [rbp - 4]         #    return |k|ey;
0xc180:	pop rbp                              #|}|
0xc181:	ret                                  
0xc182:	endbr64                              #|{|
0xc186:	push rbp                             
0xc187:	mov rbp, rsp                         
0xc18a:	mov eax, 0                           #    |s|ervice_pending_signals();
0xc18f:	call 0x1ea4b                         
0xc194:	mov eax, dword ptr [rip + 0x24d12]   #    if (|k|eyno)
0xc19a:	test eax, eax                        #    if |(|keyno)
0xc19c:	je 0xc1aa                            
0xc19e:	mov eax, 0                           #	return |t|ty_extract_key();
0xc1a3:	call 0xc101                          
0xc1a8:	jmp 0xc221                           
0xc1aa:	mov edi, 0xffffffff                  #    |t|ty_set_interrupt_char(-1);
0xc1af:	call 0xaf73                          
0xc1b4:	mov edi, 1                           #    |s|ignals(ON);
0xc1b9:	call 0x1eaed                         
0xc1be:	mov dword ptr [rip + 0x24ce8], 0     #    keyindex |=| 0;
0xc1c8:	nop                                  #    while |(|(keyno = tty_read(keybuf, 1024)) < 0)
0xc1c9:	mov esi, 0x400                       #    while ((keyno = |t|ty_read(keybuf, 1024)) < 0)
0xc1ce:	lea rax, [rip + 0x24ceb]             
0xc1d5:	mov rdi, rax                         
0xc1d8:	mov eax, 0                           
0xc1dd:	call 0xb835                          
0xc1e2:	mov dword ptr [rip + 0x24cc4], eax   #    while ((keyno |=| tty_read(keybuf, 1024)) < 0)
0xc1e8:	mov eax, dword ptr [rip + 0x24cbe]   
0xc1ee:	test eax, eax                        #    while ((keyno = tty_read(keybuf, 1024)) |<| 0)
0xc1f0:	js 0xc1c9                            
0xc1f2:	mov edi, 0                           #    |s|ignals(OFF);
0xc1f7:	call 0x1eaed                         
0xc1fc:	mov edi, 7                           #    |t|ty_set_interrupt_char(key_INTERRUPT);
0xc201:	call 0xaf73                          
0xc206:	mov eax, dword ptr [rip + 0x24ca0]   #    return keyno |?| tty_extract_key() : -1;
0xc20c:	test eax, eax                        #    return keyno ? tty_extract_key() |:| -1;
0xc20e:	je 0xc21c                            
0xc210:	mov eax, 0                           #    return keyno ? |t|ty_extract_key() : -1;
0xc215:	call 0xc101                          
0xc21a:	jmp 0xc221                           #    return keyno ? tty_extract_key() |:| -1;
0xc21c:	mov eax, 0xffffffff                  #    return keyno ? tty_extract_key() |:| -1;
0xc221:	pop rbp                              #|}|
0xc222:	ret                                  
0xc223:	endbr64                              #|{|
0xc227:	push rbp                             
0xc228:	mov rbp, rsp                         
0xc22b:	sub rsp, 0x30                        
0xc22f:	mov qword ptr [rbp - 0x18], rdi      
0xc233:	mov qword ptr [rbp - 0x20], rsi      
0xc237:	mov qword ptr [rbp - 0x28], rdx      
0xc23b:	mov edi, 0x18                        #    new_key = (tty_key_t *)|x|malloc(sizeof(tty_key_t));
0xc240:	call 0x24650                         
0xc245:	mov qword ptr [rbp - 8], rax         
0xc249:	mov rax, qword ptr [rbp - 0x20]      #    new_key->key_seq = (unsigned char *)|x|strdup((char *)key_seq);
0xc24d:	mov rdi, rax                         
0xc250:	call 0x24780                         
0xc255:	mov rdx, qword ptr [rbp - 8]         #    new_key->key_seq |=| (unsigned char *)xstrdup((char *)key_seq);
0xc259:	mov qword ptr [rdx], rax             
0xc25c:	mov rax, qword ptr [rbp - 8]         #    new_key->aux_data |=| aux_data;
0xc260:	mov rdx, qword ptr [rbp - 0x28]      
0xc264:	mov qword ptr [rax + 0x10], rdx      
0xc268:	mov rax, qword ptr [rbp - 0x18]      #    new_key->next = |*|key;
0xc26c:	mov rdx, qword ptr [rax]             
0xc26f:	mov rax, qword ptr [rbp - 8]         #    new_key->next |=| *key;
0xc273:	mov qword ptr [rax + 8], rdx         
0xc277:	mov rax, qword ptr [rbp - 0x18]      #    *key |=| new_key;
0xc27b:	mov rdx, qword ptr [rbp - 8]         
0xc27f:	mov qword ptr [rax], rdx             
0xc282:	nop                                  #|}|
0xc283:	leave                                
0xc284:	ret                                  
0xc285:	endbr64                              #|{|
0xc289:	push rbp                             
0xc28a:	mov rbp, rsp                         
0xc28d:	sub rsp, 0x10                        
0xc291:	mov qword ptr [rbp - 8], rdi         
0xc295:	mov qword ptr [rbp - 0x10], rsi      
0xc299:	mov rax, qword ptr [rbp - 8]         #    if (|*|key_seq == 0)
0xc29d:	movzx eax, byte ptr [rax]            
0xc2a0:	test al, al                          #    if |(|*key_seq == 0)
0xc2a2:	je 0xc36a                            
0xc2a8:	mov rax, qword ptr [rip + 0x25159]   #    if (key |=|= NULL || strcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
0xc2af:	test rax, rax                        #    if |(|key == NULL || strcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
0xc2b2:	je 0xc2d4                            
0xc2b4:	mov rax, qword ptr [rip + 0x2514d]   #    if (key == NULL || strcmp((char *)key_seq, (char *)(|*|key)->key_seq) <= 0)
0xc2bb:	mov rax, qword ptr [rax]             
0xc2be:	mov rdx, qword ptr [rax]             #    if (key == NULL || strcmp((char *)key_seq, (char *)(*key)|-|>key_seq) <= 0)
0xc2c1:	mov rax, qword ptr [rbp - 8]         #    if (key == NULL || |s|trcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
0xc2c5:	mov rsi, rdx                         
0xc2c8:	mov rdi, rax                         
0xc2cb:	call 0x4af0                          
0xc2d0:	test eax, eax                        #    if (key == NULL |||| strcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
0xc2d2:	jg 0xc33a                            
0xc2d4:	lea rax, [rip + 0x2476d]             #	key |=| &key_list_head;
0xc2db:	mov qword ptr [rip + 0x25126], rax   
0xc2e2:	jmp 0xc33a                           #    |f|or (; *key; key = &(*key)->next)
0xc2e4:	mov rax, qword ptr [rip + 0x2511d]   #	if (strcmp((char *)key_seq, (char *)(|*|key)->key_seq) <= 0)
0xc2eb:	mov rax, qword ptr [rax]             
0xc2ee:	mov rdx, qword ptr [rax]             #	if (strcmp((char *)key_seq, (char *)(*key)|-|>key_seq) <= 0)
0xc2f1:	mov rax, qword ptr [rbp - 8]         #	if (|s|trcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
0xc2f5:	mov rsi, rdx                         
0xc2f8:	mov rdi, rax                         
0xc2fb:	call 0x4af0                          
0xc300:	test eax, eax                        #	if |(|strcmp((char *)key_seq, (char *)(*key)->key_seq) <= 0)
0xc302:	jg 0xc325                            
0xc304:	mov rax, qword ptr [rip + 0x250fd]   #	    |t|ty_key_list_insert_sequence(key, key_seq, aux_data);
0xc30b:	mov rdx, qword ptr [rbp - 0x10]      
0xc30f:	mov rcx, qword ptr [rbp - 8]         
0xc313:	mov rsi, rcx                         
0xc316:	mov rdi, rax                         
0xc319:	mov eax, 0                           
0xc31e:	call 0xc223                          
0xc323:	jmp 0xc36b                           #	    |r|eturn;
0xc325:	mov rax, qword ptr [rip + 0x250dc]   #    for (; *key; key = &(|*|key)->next)
0xc32c:	mov rax, qword ptr [rax]             
0xc32f:	add rax, 8                           #    for (; *key; key = |&|(*key)->next)
0xc333:	mov qword ptr [rip + 0x250ce], rax   #    for (; *key; key |=| &(*key)->next)
0xc33a:	mov rax, qword ptr [rip + 0x250c7]   #    for (; |*|key; key = &(*key)->next)
0xc341:	mov rax, qword ptr [rax]             
0xc344:	test rax, rax                        
0xc347:	jne 0xc2e4                           
0xc349:	mov rax, qword ptr [rip + 0x250b8]   #    |t|ty_key_list_insert_sequence(key, key_seq, aux_data);
0xc350:	mov rdx, qword ptr [rbp - 0x10]      
0xc354:	mov rcx, qword ptr [rbp - 8]         
0xc358:	mov rsi, rcx                         
0xc35b:	mov rdi, rax                         
0xc35e:	mov eax, 0                           
0xc363:	call 0xc223                          
0xc368:	jmp 0xc36b                           
0xc36a:	nop                                  #	|r|eturn;               /* bad key sequence !  */
0xc36b:	leave                                #|}|
0xc36c:	ret                                  
0xc36d:	endbr64                              #|{|
0xc371:	push rbp                             
0xc372:	mov rbp, rsp                         
0xc375:	mov rax, qword ptr [rip + 0x246cc]   #    current_key |=| key_list_head;
0xc37c:	mov qword ptr [rip + 0x246cd], rax   
0xc383:	nop                                  #|}|
0xc384:	pop rbp                              
0xc385:	ret                                  
0xc386:	endbr64                              #|{|
0xc38a:	push rbp                             
0xc38b:	mov rbp, rsp                         
0xc38e:	sub rsp, 0x20                        
0xc392:	mov qword ptr [rbp - 0x18], rdi      
0xc396:	mov rax, qword ptr [rip + 0x246b3]   #    if (current_key |=|= NULL)
0xc39d:	test rax, rax                        #    if |(|current_key == NULL)
0xc3a0:	jne 0xc3ef                           
0xc3a2:	mov eax, 0                           #	return |N|ULL;
0xc3a7:	jmp 0xc444                           
0xc3ac:	mov rax, qword ptr [rip + 0x2469d]   #	cmp = strcmp(key_seq, (char *)current_key|-|>key_seq);
0xc3b3:	mov rdx, qword ptr [rax]             
0xc3b6:	mov rax, qword ptr [rbp - 0x18]      #	cmp = |s|trcmp(key_seq, (char *)current_key->key_seq);
0xc3ba:	mov rsi, rdx                         
0xc3bd:	mov rdi, rax                         
0xc3c0:	call 0x4af0                          
0xc3c5:	mov dword ptr [rbp - 4], eax         
0xc3c8:	cmp dword ptr [rbp - 4], 0           #	if |(|cmp == 0)
0xc3cc:	jne 0xc3d7                           
0xc3ce:	mov rax, qword ptr [rip + 0x2467b]   #	    return |c|urrent_key;
0xc3d5:	jmp 0xc444                           
0xc3d7:	cmp dword ptr [rbp - 4], 0           #	if |(|cmp  < 0)
0xc3db:	js 0xc3fd                            
0xc3dd:	mov rax, qword ptr [rip + 0x2466c]   #    for (; current_key; current_key = current_key|-|>next)
0xc3e4:	mov rax, qword ptr [rax + 8]         
0xc3e8:	mov qword ptr [rip + 0x24661], rax   #    for (; current_key; current_key |=| current_key->next)
0xc3ef:	mov rax, qword ptr [rip + 0x2465a]   #    for (; |c|urrent_key; current_key = current_key->next)
0xc3f6:	test rax, rax                        
0xc3f9:	jne 0xc3ac                           
0xc3fb:	jmp 0xc3fe                           
0xc3fd:	nop                                  #	    |b|reak;
0xc3fe:	mov rax, qword ptr [rip + 0x2464b]   #    if (current_key |=|= NULL ||
0xc405:	test rax, rax                        #    if |(|current_key == NULL ||
0xc408:	je 0xc436                            
0xc40a:	mov rax, qword ptr [rbp - 0x18]      #	|s|trncmp(key_seq, (char *)current_key->key_seq, strlen(key_seq)) != 0)
0xc40e:	mov rdi, rax                         
0xc411:	call 0x4960                          
0xc416:	mov rdx, rax                         
0xc419:	mov rax, qword ptr [rip + 0x24630]   #	strncmp(key_seq, (char *)current_key|-|>key_seq, strlen(key_seq)) != 0)
0xc420:	mov rcx, qword ptr [rax]             
0xc423:	mov rax, qword ptr [rbp - 0x18]      #	|s|trncmp(key_seq, (char *)current_key->key_seq, strlen(key_seq)) != 0)
0xc427:	mov rsi, rcx                         
0xc42a:	mov rdi, rax                         
0xc42d:	call 0x4850                          
0xc432:	test eax, eax                        #    if (current_key == NULL ||||
0xc434:	je 0xc43f                            
0xc436:	mov rax, -1                          #	return |(|tty_key_t *)-1;
0xc43d:	jmp 0xc444                           
0xc43f:	mov eax, 0                           #	return |N|ULL;
0xc444:	leave                                #|}|
0xc445:	ret                                  
0xc446:	endbr64                              #|{|
0xc44a:	push rbp                             
0xc44b:	mov rbp, rsp                         
0xc44e:	sub rsp, 0x40                        
0xc452:	mov qword ptr [rbp - 0x38], rdi      
0xc456:	mov rax, qword ptr fs:[0x28]         #|{|
0xc45f:	mov qword ptr [rbp - 8], rax         
0xc463:	xor eax, eax                         
0xc465:	lea rax, [rip + 0x1b88e]             #    char *|t|yped = "Keys typed so far: ";
0xc46c:	mov qword ptr [rbp - 0x20], rax      
0xc470:	lea rax, [rip + 0x1b897]             #    char *|i|ncomplete = " ";
0xc477:	mov qword ptr [rbp - 0x18], rax      
0xc47b:	lea rax, [rbp - 0x21]                #    |t|ty_save(&tty_status);
0xc47f:	mov rdi, rax                         
0xc482:	call 0xc04b                          
0xc487:	mov eax, dword ptr [rip + 0x2454f]   #    |t|ty_goto(tty_lines - 1, 0);
0xc48d:	sub eax, 1                           
0xc490:	mov esi, 0                           
0xc495:	mov edi, eax                         
0xc497:	call 0xbe95                          
0xc49c:	mov edi, 7                           #    |t|ty_background(WHITE);
0xc4a1:	call 0xbf0b                          
0xc4a6:	mov edi, 0                           #    |t|ty_foreground(BLACK);
0xc4ab:	call 0xbee3                          
0xc4b0:	mov eax, dword ptr [rip + 0x2452a]   #    spaces = xmalloc(tty_columns|+|1);
0xc4b6:	add eax, 1                           
0xc4b9:	cdqe                                 #    spaces = |x|malloc(tty_columns+1);
0xc4bb:	mov rdi, rax                         
0xc4be:	call 0x24650                         
0xc4c3:	mov qword ptr [rbp - 0x10], rax      
0xc4c7:	mov eax, dword ptr [rip + 0x24513]   #    |m|emset(spaces, ' ', tty_columns);
0xc4cd:	movsxd rdx, eax                      
0xc4d0:	mov rax, qword ptr [rbp - 0x10]      
0xc4d4:	mov esi, 0x20                        
0xc4d9:	mov rdi, rax                         
0xc4dc:	call 0x4a10                          
0xc4e1:	mov eax, dword ptr [rip + 0x244f9]   #    spaces|[|tty_columns] = '\0';
0xc4e7:	movsxd rdx, eax                      
0xc4ea:	mov rax, qword ptr [rbp - 0x10]      
0xc4ee:	add rax, rdx                         
0xc4f1:	mov byte ptr [rax], 0                #    spaces[tty_columns] |=| '\0';
0xc4f4:	mov edx, dword ptr [rip + 0x244e6]   #    |t|ty_puts(spaces, tty_columns);
0xc4fa:	mov rax, qword ptr [rbp - 0x10]      
0xc4fe:	mov esi, edx                         
0xc500:	mov rdi, rax                         
0xc503:	call 0xb706                          
0xc508:	mov rax, qword ptr [rbp - 0x10]      #    |x|free(spaces);
0xc50c:	mov rdi, rax                         
0xc50f:	call 0x1eeae                         
0xc514:	mov eax, dword ptr [rip + 0x244c2]   #    |t|ty_goto(tty_lines - 1, 0);
0xc51a:	sub eax, 1                           
0xc51d:	mov esi, 0                           
0xc522:	mov edi, eax                         
0xc524:	call 0xbe95                          
0xc529:	mov rax, qword ptr [rbp - 0x38]      #    |t|ty_key_machine2human(key_seq);
0xc52d:	mov rdi, rax                         
0xc530:	call 0xb2c6                          
0xc535:	mov rax, qword ptr [rbp - 0x20]      #    tty_puts(typed, |s|trlen(typed));
0xc539:	mov rdi, rax                         
0xc53c:	call 0x4960                          
0xc541:	mov edx, eax                         #    |t|ty_puts(typed, strlen(typed));
0xc543:	mov rax, qword ptr [rbp - 0x20]      
0xc547:	mov esi, edx                         
0xc549:	mov rdi, rax                         
0xc54c:	call 0xb706                          
0xc551:	lea rax, [rip + 0x24d68]             #    tty_puts((char *)keystr, |s|trlen((char *)keystr));
0xc558:	mov rdi, rax                         
0xc55b:	call 0x4960                          
0xc560:	mov esi, eax                         #    |t|ty_puts((char *)keystr, strlen((char *)keystr));
0xc562:	lea rax, [rip + 0x24d57]             
0xc569:	mov rdi, rax                         
0xc56c:	call 0xb706                          
0xc571:	mov rax, qword ptr [rbp - 0x18]      #    tty_puts(incomplete, |s|trlen(incomplete));
0xc575:	mov rdi, rax                         
0xc578:	call 0x4960                          
0xc57d:	mov edx, eax                         #    |t|ty_puts(incomplete, strlen(incomplete));
0xc57f:	mov rax, qword ptr [rbp - 0x18]      
0xc583:	mov esi, edx                         
0xc585:	mov rdi, rax                         
0xc588:	call 0xb706                          
0xc58d:	mov eax, 0                           #    |t|ty_update();
0xc592:	call 0xb4b7                          
0xc597:	lea rax, [rbp - 0x21]                #    |t|ty_restore(&tty_status);
0xc59b:	mov rdi, rax                         
0xc59e:	call 0xc067                          
0xc5a3:	nop                                  #|}|
0xc5a4:	mov rax, qword ptr [rbp - 8]         
0xc5a8:	sub rax, qword ptr fs:[0x28]         
0xc5b1:	je 0xc5b8                            
0xc5b3:	call 0x4980                          
0xc5b8:	leave                                
0xc5b9:	ret                                  
0xc5ba:	endbr64                              #|{|
0xc5be:	push rbp                             
0xc5bf:	mov rbp, rsp                         
0xc5c2:	sub rsp, 0x20                        
0xc5c6:	mov qword ptr [rbp - 0x18], rdi      
0xc5ca:	mov qword ptr [rbp - 8], 0           #    tty_key_t *|k|ey = NULL;
0xc5d2:	nop                                  #    while |(|(c = tty_getc()) == -1)
0xc5d3:	mov eax, 0                           #    while ((c = |t|ty_getc()) == -1)
0xc5d8:	call 0xc182                          
0xc5dd:	mov dword ptr [rbp - 0xc], eax       
0xc5e0:	cmp dword ptr [rbp - 0xc], -1        #    while ((c = tty_getc()) |=|= -1)
0xc5e4:	je 0xc5d3                            
0xc5e6:	cmp qword ptr [rbp - 0x18], 0        #    if |(|repeat_count)
0xc5eb:	je 0xc5f7                            
0xc5ed:	mov rax, qword ptr [rbp - 0x18]      #	*repeat_count |=| 1;
0xc5f1:	mov dword ptr [rax], 1               
0xc5f7:	cmp dword ptr [rbp - 0xc], 0         #    if |(|c == 0)
0xc5fb:	jne 0xc604                           
0xc5fd:	mov dword ptr [rbp - 0xc], 0xff      #	c |=| 0xff;
0xc604:	mov eax, dword ptr [rip + 0x2434a]   #    if (tty_kbdmode |=|= TTY_RESTRICTED_INPUT)
0xc60a:	test eax, eax                        #    if |(|tty_kbdmode == TTY_RESTRICTED_INPUT)
0xc60c:	jne 0xc66f                           
0xc60e:	cmp dword ptr [rbp - 0xc], 0xa       #	if |(|c == '\n' || c == '\r')
0xc612:	je 0xc61a                            
0xc614:	cmp dword ptr [rbp - 0xc], 0xd       #	if (c == '\n' |||| c == '\r')
0xc618:	jne 0xc621                           
0xc61a:	mov dword ptr [rbp - 0xc], 0xa       #	    c |=| key_ENTER;
0xc621:	call 0x4ec0                          #	if (|i|sprint(c) || c == key_INTERRUPT)
0xc626:	mov rdx, qword ptr [rax]             
0xc629:	mov eax, dword ptr [rbp - 0xc]       
0xc62c:	cdqe                                 
0xc62e:	add rax, rax                         
0xc631:	add rax, rdx                         
0xc634:	movzx eax, word ptr [rax]            
0xc637:	movzx eax, ax                        
0xc63a:	and eax, 0x4000                      
0xc63f:	test eax, eax                        #	if |(|isprint(c) || c == key_INTERRUPT)
0xc641:	jne 0xc649                           
0xc643:	cmp dword ptr [rbp - 0xc], 7         #	if (isprint(c) |||| c == key_INTERRUPT)
0xc647:	jne 0xc66f                           
0xc649:	mov rax, qword ptr [rip + 0x24410]   #	    default_key|.|key_seq[0] = c;
0xc650:	mov edx, dword ptr [rbp - 0xc]       #	    default_key.key_seq[0] |=| c;
0xc653:	mov byte ptr [rax], dl               
0xc655:	mov rax, qword ptr [rip + 0x24404]   #	    default_key|.|key_seq[1] = '\0';
0xc65c:	add rax, 1                           #	    default_key.key_seq|[|1] = '\0';
0xc660:	mov byte ptr [rax], 0                #	    default_key.key_seq[1] |=| '\0';
0xc663:	lea rax, [rip + 0x243f6]             #	    return |&|default_key;
0xc66a:	jmp 0xc825                           
0xc66f:	mov dword ptr [rip + 0x24d73], 0     #    partial |=| 0;
0xc679:	mov dword ptr [rip + 0x24d6d], 0     #    key_on_display |=| 0;
0xc683:	mov eax, 0                           #    |t|ty_key_search_restart();
0xc688:	call 0xc36d                          
0xc68d:	mov dword ptr [rbp - 0x10], 0        #    for (i |=| 0; i < MAX_KEY_LENGTH; i++)
0xc694:	jmp 0xc760                           #    |f|or (i = 0; i < MAX_KEY_LENGTH; i++)
0xc699:	cmp dword ptr [rbp - 0xc], 0         #	if |(|c == 0)
0xc69d:	jne 0xc6a6                           
0xc69f:	mov dword ptr [rbp - 0xc], 0xff      #	    c |=| 0xff;
0xc6a6:	mov rdx, qword ptr [rip + 0x24343]   #	tty_key_seq|[|i] = c;
0xc6ad:	mov eax, dword ptr [rbp - 0x10]      
0xc6b0:	cdqe                                 
0xc6b2:	add rax, rdx                         
0xc6b5:	mov edx, dword ptr [rbp - 0xc]       #	tty_key_seq[i] |=| c;
0xc6b8:	mov byte ptr [rax], dl               
0xc6ba:	mov rdx, qword ptr [rip + 0x2432f]   #	tty_key_seq|[|i + 1] = 0;
0xc6c1:	mov eax, dword ptr [rbp - 0x10]      
0xc6c4:	cdqe                                 
0xc6c6:	add rax, 1                           
0xc6ca:	add rax, rdx                         
0xc6cd:	mov byte ptr [rax], 0                #	tty_key_seq[i + 1] |=| 0;
0xc6d0:	mov rax, qword ptr [rip + 0x24319]   #	key = |t|ty_key_search((char *)tty_key_seq);
0xc6d7:	mov rdi, rax                         
0xc6da:	call 0xc386                          
0xc6df:	mov qword ptr [rbp - 8], rax         
0xc6e3:	cmp qword ptr [rbp - 8], -1          #	if |(|key == (tty_key_t *)-1)
0xc6e8:	jne 0xc708                           
0xc6ea:	mov edi, 1                           #	    |a|larm(1);
0xc6ef:	call 0x4a60                          
0xc6f4:	mov dword ptr [rip + 0x24cee], 0     #	    partial |=| 0;
0xc6fe:	mov eax, 0                           #	    return |N|ULL;
0xc703:	jmp 0xc825                           
0xc708:	cmp qword ptr [rbp - 8], 0           #	if |(|key)
0xc70d:	jne 0xc76c                           
0xc70f:	mov eax, dword ptr [rip + 0x24797]   #	if (keyno |=|= 0)
0xc715:	test eax, eax                        #	if |(|keyno == 0)
0xc717:	jne 0xc748                           
0xc719:	mov eax, dword ptr [rip + 0x24cd1]   #	    if (|k|ey_on_display)
0xc71f:	test eax, eax                        #	    if |(|key_on_display)
0xc721:	je 0xc734                            
0xc723:	mov rax, qword ptr [rip + 0x242c6]   #		|t|ty_key_print((char *)tty_key_seq);
0xc72a:	mov rdi, rax                         
0xc72d:	call 0xc446                          
0xc732:	jmp 0xc73e                           
0xc734:	mov edi, 1                           #		|a|larm(1);
0xc739:	call 0x4a60                          
0xc73e:	mov dword ptr [rip + 0x24ca4], 1     #	    partial |=| 1;
0xc748:	nop                                  #	while |(|(c = tty_getc()) == -1)
0xc749:	mov eax, 0                           #	while ((c = |t|ty_getc()) == -1)
0xc74e:	call 0xc182                          
0xc753:	mov dword ptr [rbp - 0xc], eax       
0xc756:	cmp dword ptr [rbp - 0xc], -1        #	while ((c = tty_getc()) |=|= -1)
0xc75a:	je 0xc749                            
0xc75c:	add dword ptr [rbp - 0x10], 1        #    for (i = 0; i < MAX_KEY_LENGTH; i|+|+)
0xc760:	cmp dword ptr [rbp - 0x10], 0xe      #    for (i = 0; i |<| MAX_KEY_LENGTH; i++)
0xc764:	jle 0xc699                           
0xc76a:	jmp 0xc76d                           
0xc76c:	nop                                  #	    |b|reak;
0xc76d:	cmp dword ptr [rbp - 0x10], 0xf      #    if |(|i == MAX_KEY_LENGTH)
0xc771:	jne 0xc791                           
0xc773:	mov edi, 1                           #	|a|larm(1);
0xc778:	call 0x4a60                          
0xc77d:	mov dword ptr [rip + 0x24c65], 0     #	partial |=| 0;
0xc787:	mov eax, 0                           #	return |N|ULL;
0xc78c:	jmp 0xc825                           
0xc791:	cmp qword ptr [rbp - 0x18], 0        #    if |(|repeat_count)
0xc796:	je 0xc80d                            
0xc798:	jmp 0xc7d1                           #	while |(|keyno > i &&
0xc79a:	mov eax, dword ptr [rbp - 0x10]      #	    keyindex += i |+| 1;
0xc79d:	lea edx, [rax + 1]                   
0xc7a0:	mov eax, dword ptr [rip + 0x2470a]   #	    keyindex |+|= i + 1;
0xc7a6:	add eax, edx                         
0xc7a8:	mov dword ptr [rip + 0x24702], eax   
0xc7ae:	mov eax, dword ptr [rip + 0x246f8]   #	    keyno |-|= i + 1;
0xc7b4:	mov edx, dword ptr [rbp - 0x10]      #	    keyno -= i |+| 1;
0xc7b7:	add edx, 1                           
0xc7ba:	sub eax, edx                         #	    keyno |-|= i + 1;
0xc7bc:	mov dword ptr [rip + 0x246ea], eax   
0xc7c2:	mov rax, qword ptr [rbp - 0x18]      #	    (|*|repeat_count)++;
0xc7c6:	mov eax, dword ptr [rax]             
0xc7c8:	lea edx, [rax + 1]                   #	    (*repeat_count)|+|+;
0xc7cb:	mov rax, qword ptr [rbp - 0x18]      
0xc7cf:	mov dword ptr [rax], edx             
0xc7d1:	mov eax, dword ptr [rip + 0x246d5]   #	while (keyno |>| i &&
0xc7d7:	cmp dword ptr [rbp - 0x10], eax      #	while (keyno > i |&|&
0xc7da:	jge 0xc80d                           
0xc7dc:	mov eax, dword ptr [rbp - 0x10]      #	       (memcmp(tty_key_seq, &keybuf[keyindex], i |+| 1) == 0))
0xc7df:	add eax, 1                           
0xc7e2:	movsxd rdx, eax                      #	       (|m|emcmp(tty_key_seq, &keybuf[keyindex], i + 1) == 0))
0xc7e5:	mov eax, dword ptr [rip + 0x246c5]   #	       (memcmp(tty_key_seq, &keybuf|[|keyindex], i + 1) == 0))
0xc7eb:	cdqe                                 #	       (memcmp(tty_key_seq, |&|keybuf[keyindex], i + 1) == 0))
0xc7ed:	lea rcx, [rip + 0x246cc]             
0xc7f4:	add rcx, rax                         
0xc7f7:	mov rax, qword ptr [rip + 0x241f2]   #	       (|m|emcmp(tty_key_seq, &keybuf[keyindex], i + 1) == 0))
0xc7fe:	mov rsi, rcx                         
0xc801:	mov rdi, rax                         
0xc804:	call 0x4ab0                          
0xc809:	test eax, eax                        #	while (keyno > i |&|&
0xc80b:	je 0xc79a                            
0xc80d:	mov edi, 1                           #    |a|larm(1);
0xc812:	call 0x4a60                          
0xc817:	mov dword ptr [rip + 0x24bcb], 0     #    partial |=| 0;
0xc821:	mov rax, qword ptr [rbp - 8]         #    return |k|ey;
0xc825:	leave                                #|}|
0xc826:	ret                                  
0xc827:	endbr64                              #|{|
0xc82b:	push rbp                             
0xc82c:	mov rbp, rsp                         
0xc82f:	mov eax, dword ptr [rip + 0x24bb7]   #    if (|p|artial)
0xc835:	test eax, eax                        #    if |(|partial)
0xc837:	je 0xc852                            
0xc839:	mov rax, qword ptr [rip + 0x241b0]   #	|t|ty_key_print((char *)tty_key_seq);
0xc840:	mov rdi, rax                         
0xc843:	call 0xc446                          
0xc848:	mov dword ptr [rip + 0x24b9e], 1     #	key_on_display |=| 1;
0xc852:	nop                                  #|}|
0xc853:	pop rbp                              
0xc854:	ret                                  
0xc855:	endbr64                              #|{|
0xc859:	push rbp                             
0xc85a:	mov rbp, rsp                         
0xc85d:	mov rax, qword ptr [rip + 0x2418c]   #    return |(|char *)tty_key_seq;
0xc864:	pop rbp                              #|}|
0xc865:	ret                                  
0xc866:	endbr64                              #|{|
0xc86a:	push rbp                             
0xc86b:	mov rbp, rsp                         
0xc86e:	sub rsp, 0x60                        
0xc872:	mov rax, qword ptr fs:[0x28]         #|{|
0xc87b:	mov qword ptr [rbp - 8], rax         
0xc87f:	xor eax, eax                         
0xc881:	mov dword ptr [rbp - 0x58], 0        #    int |s|hell_lines = 0, shell_columns = 0;
0xc888:	mov dword ptr [rbp - 0x54], 0        #    int shell_lines = 0, |s|hell_columns = 0;
0xc88f:	mov dword ptr [rbp - 0x48], 0        #    int |t|ermcap_lines = 0, termcap_columns = 0;
0xc896:	mov dword ptr [rbp - 0x44], 0        #    int termcap_lines = 0, |t|ermcap_columns = 0;
0xc89d:	mov dword ptr [rbp - 0x50], 0        #    int |w|insz_lines = 0, winsz_columns = 0;
0xc8a4:	mov dword ptr [rbp - 0x4c], 0        #    int winsz_lines = 0, |w|insz_columns = 0;
0xc8ab:	lea rax, [rbp - 0x38]                #    if (|i|octl(TTY_OUTPUT, TIOCGWINSZ, &winsz) == 0)
0xc8af:	mov rdx, rax                         
0xc8b2:	mov esi, 0x5413                      
0xc8b7:	mov edi, 1                           
0xc8bc:	mov eax, 0                           
0xc8c1:	call 0x4a30                          
0xc8c6:	test eax, eax                        #    if |(|ioctl(TTY_OUTPUT, TIOCGWINSZ, &winsz) == 0)
0xc8c8:	jne 0xc8f0                           
0xc8ca:	movzx eax, word ptr [rbp - 0x36]     #	if (winsz|.|ws_col && winsz.ws_row)
0xc8ce:	test ax, ax                          #	if |(|winsz.ws_col && winsz.ws_row)
0xc8d1:	je 0xc8f0                            
0xc8d3:	movzx eax, word ptr [rbp - 0x38]     #	if (winsz.ws_col && winsz|.|ws_row)
0xc8d7:	test ax, ax                          #	if (winsz.ws_col |&|& winsz.ws_row)
0xc8da:	je 0xc8f0                            
0xc8dc:	movzx eax, word ptr [rbp - 0x36]     #	    winsz_columns = winsz|.|ws_col;
0xc8e0:	movzx eax, ax                        #	    winsz_columns |=| winsz.ws_col;
0xc8e3:	mov dword ptr [rbp - 0x4c], eax      
0xc8e6:	movzx eax, word ptr [rbp - 0x38]     #	    winsz_lines   = winsz|.|ws_row;
0xc8ea:	movzx eax, ax                        #	    winsz_lines   |=| winsz.ws_row;
0xc8ed:	mov dword ptr [rbp - 0x50], eax      
0xc8f0:	lea rax, [rip + 0x1b419]             #    if ((env = |g|etenv("COLUMNS")))
0xc8f7:	mov rdi, rax                         
0xc8fa:	call 0x47a0                          
0xc8ff:	mov qword ptr [rbp - 0x40], rax      
0xc903:	cmp qword ptr [rbp - 0x40], 0        #    if |(|(env = getenv("COLUMNS")))
0xc908:	je 0xc929                            
0xc90a:	lea rdx, [rbp - 0x54]                #	|s|scanf(env, "%d", &shell_columns);
0xc90e:	mov rax, qword ptr [rbp - 0x40]      
0xc912:	lea rcx, [rip + 0x1b3ff]             
0xc919:	mov rsi, rcx                         
0xc91c:	mov rdi, rax                         
0xc91f:	mov eax, 0                           
0xc924:	call 0x4c30                          
0xc929:	lea rax, [rip + 0x1b3eb]             #    if ((env = |g|etenv("LINES")))
0xc930:	mov rdi, rax                         
0xc933:	call 0x47a0                          
0xc938:	mov qword ptr [rbp - 0x40], rax      
0xc93c:	cmp qword ptr [rbp - 0x40], 0        #    if |(|(env = getenv("LINES")))
0xc941:	je 0xc962                            
0xc943:	lea rdx, [rbp - 0x58]                #	|s|scanf(env, "%d", &shell_lines);
0xc947:	mov rax, qword ptr [rbp - 0x40]      
0xc94b:	lea rcx, [rip + 0x1b3c6]             
0xc952:	mov rsi, rcx                         
0xc955:	mov rdi, rax                         
0xc958:	mov eax, 0                           
0xc95d:	call 0x4c30                          
0xc962:	mov eax, dword ptr [rip + 0x234e8]   #    termcap_columns |=| TTY_COLUMNS;
0xc968:	mov dword ptr [rbp - 0x44], eax      
0xc96b:	mov eax, dword ptr [rip + 0x234ff]   #    termcap_lines   |=| TTY_LINES;
0xc971:	mov dword ptr [rbp - 0x48], eax      
0xc974:	cmp dword ptr [rbp - 0x4c], 0        #    if |(|columns_ok(winsz_columns))
0xc978:	jle 0xc98e                           
0xc97a:	cmp dword ptr [rbp - 0x4c], 0x400    #    if (|c|olumns_ok(winsz_columns))
0xc981:	jg 0xc98e                            
0xc983:	mov eax, dword ptr [rbp - 0x4c]      #	tty_columns |=| winsz_columns;
0xc986:	mov dword ptr [rip + 0x24054], eax   
0xc98c:	jmp 0xc9ce                           
0xc98e:	mov eax, dword ptr [rbp - 0x54]      #	if (|c|olumns_ok(shell_columns))
0xc991:	test eax, eax                        #	if |(|columns_ok(shell_columns))
0xc993:	jle 0xc9aa                           
0xc995:	mov eax, dword ptr [rbp - 0x54]      #	if (|c|olumns_ok(shell_columns))
0xc998:	cmp eax, 0x400                       
0xc99d:	jg 0xc9aa                            
0xc99f:	mov eax, dword ptr [rbp - 0x54]      #	    tty_columns |=| shell_columns;
0xc9a2:	mov dword ptr [rip + 0x24038], eax   
0xc9a8:	jmp 0xc9ce                           
0xc9aa:	cmp dword ptr [rbp - 0x44], 0        #	else if |(|columns_ok(termcap_columns))
0xc9ae:	jle 0xc9c4                           
0xc9b0:	cmp dword ptr [rbp - 0x44], 0x400    #	else if (|c|olumns_ok(termcap_columns))
0xc9b7:	jg 0xc9c4                            
0xc9b9:	mov eax, dword ptr [rbp - 0x44]      #	    tty_columns |=| termcap_columns;
0xc9bc:	mov dword ptr [rip + 0x2401e], eax   
0xc9c2:	jmp 0xc9ce                           
0xc9c4:	mov dword ptr [rip + 0x24012], 0x50  #	    tty_columns |=| 80;
0xc9ce:	cmp dword ptr [rbp - 0x50], 0        #    if |(|lines_ok(winsz_lines))
0xc9d2:	jle 0xc9e8                           
0xc9d4:	cmp dword ptr [rbp - 0x50], 0x400    #    if (|l|ines_ok(winsz_lines))
0xc9db:	jg 0xc9e8                            
0xc9dd:	mov eax, dword ptr [rbp - 0x50]      #	tty_lines |=| winsz_lines;
0xc9e0:	mov dword ptr [rip + 0x23ff6], eax   
0xc9e6:	jmp 0xca28                           
0xc9e8:	mov eax, dword ptr [rbp - 0x58]      #	if (|l|ines_ok(shell_lines))
0xc9eb:	test eax, eax                        #	if |(|lines_ok(shell_lines))
0xc9ed:	jle 0xca04                           
0xc9ef:	mov eax, dword ptr [rbp - 0x58]      #	if (|l|ines_ok(shell_lines))
0xc9f2:	cmp eax, 0x400                       
0xc9f7:	jg 0xca04                            
0xc9f9:	mov eax, dword ptr [rbp - 0x58]      #	    tty_lines |=| shell_lines;
0xc9fc:	mov dword ptr [rip + 0x23fda], eax   
0xca02:	jmp 0xca28                           
0xca04:	cmp dword ptr [rbp - 0x48], 0        #	else if |(|lines_ok(termcap_lines))
0xca08:	jle 0xca1e                           
0xca0a:	cmp dword ptr [rbp - 0x48], 0x400    #	else if (|l|ines_ok(termcap_lines))
0xca11:	jg 0xca1e                            
0xca13:	mov eax, dword ptr [rbp - 0x48]      #	    tty_lines |=| termcap_lines;
0xca16:	mov dword ptr [rip + 0x23fc0], eax   
0xca1c:	jmp 0xca28                           
0xca1e:	mov dword ptr [rip + 0x23fb4], 0x18  #	    tty_lines |=| 24;
0xca28:	mov edx, dword ptr [rip + 0x23fae]   #    |s|printf(buf, "%d", tty_lines);
0xca2e:	lea rax, [rbp - 0x30]                
0xca32:	lea rcx, [rip + 0x1b2df]             
0xca39:	mov rsi, rcx                         
0xca3c:	mov rdi, rax                         
0xca3f:	mov eax, 0                           
0xca44:	call 0x4dd0                          
0xca49:	lea rax, [rbp - 0x30]                #    |x|setenv("LINES", buf);
0xca4d:	mov rsi, rax                         
0xca50:	lea rax, [rip + 0x1b2c4]             
0xca57:	mov rdi, rax                         
0xca5a:	call 0x1e50a                         
0xca5f:	mov edx, dword ptr [rip + 0x23f7b]   #    |s|printf(buf, "%d", tty_columns);
0xca65:	lea rax, [rbp - 0x30]                
0xca69:	lea rcx, [rip + 0x1b2a8]             
0xca70:	mov rsi, rcx                         
0xca73:	mov rdi, rax                         
0xca76:	mov eax, 0                           
0xca7b:	call 0x4dd0                          
0xca80:	lea rax, [rbp - 0x30]                #    |x|setenv("COLUMNS", buf);
0xca84:	mov rsi, rax                         
0xca87:	lea rax, [rip + 0x1b282]             
0xca8e:	mov rdi, rax                         
0xca91:	call 0x1e50a                         
0xca96:	mov rax, qword ptr [rip + 0x23f83]   #    if (|t|ty_scr)
0xca9d:	test rax, rax                        #    if |(|tty_scr)
0xcaa0:	je 0xcab1                            
0xcaa2:	mov rax, qword ptr [rip + 0x23f77]   #	|x|free(tty_scr);
0xcaa9:	mov rdi, rax                         
0xcaac:	call 0x1eeae                         
0xcab1:	mov rax, qword ptr [rip + 0x23f70]   #    if (|t|ty_atr)
0xcab8:	test rax, rax                        #    if |(|tty_atr)
0xcabb:	je 0xcacc                            
0xcabd:	mov rax, qword ptr [rip + 0x23f64]   #	|x|free(tty_atr);
0xcac4:	mov rdi, rax                         
0xcac7:	call 0x1eeae                         
0xcacc:	mov rax, qword ptr [rip + 0x23f5d]   #    if (|t|ty_prev_scr)
0xcad3:	test rax, rax                        #    if |(|tty_prev_scr)
0xcad6:	je 0xcae7                            
0xcad8:	mov rax, qword ptr [rip + 0x23f51]   #	|x|free(tty_prev_scr);
0xcadf:	mov rdi, rax                         
0xcae2:	call 0x1eeae                         
0xcae7:	mov rax, qword ptr [rip + 0x23f4a]   #    if (|t|ty_prev_atr)
0xcaee:	test rax, rax                        #    if |(|tty_prev_atr)
0xcaf1:	je 0xcb02                            
0xcaf3:	mov rax, qword ptr [rip + 0x23f3e]   #	|x|free(tty_prev_atr);
0xcafa:	mov rdi, rax                         
0xcafd:	call 0x1eeae                         
0xcb02:	mov edx, dword ptr [rip + 0x23ed8]   #	tty_columns |*| tty_lines, sizeof(unsigned char));
0xcb08:	mov eax, dword ptr [rip + 0x23ece]   
0xcb0e:	imul eax, edx                        
0xcb11:	cdqe                                 #    tty_scr = (unsigned char *)|x|calloc(
0xcb13:	mov esi, 1                           
0xcb18:	mov rdi, rax                         
0xcb1b:	call 0x24720                         
0xcb20:	mov qword ptr [rip + 0x23ef9], rax   #    tty_scr |=| (unsigned char *)xcalloc(
0xcb27:	mov edx, dword ptr [rip + 0x23eb3]   #	tty_columns |*| tty_lines, sizeof(unsigned char));
0xcb2d:	mov eax, dword ptr [rip + 0x23ea9]   
0xcb33:	imul eax, edx                        
0xcb36:	cdqe                                 #    tty_atr = (unsigned char *)|x|calloc(
0xcb38:	mov esi, 1                           
0xcb3d:	mov rdi, rax                         
0xcb40:	call 0x24720                         
0xcb45:	mov qword ptr [rip + 0x23edc], rax   #    tty_atr |=| (unsigned char *)xcalloc(
0xcb4c:	mov edx, dword ptr [rip + 0x23e8e]   #	tty_columns |*| tty_lines, sizeof(unsigned char));
0xcb52:	mov eax, dword ptr [rip + 0x23e84]   
0xcb58:	imul eax, edx                        
0xcb5b:	cdqe                                 #    tty_prev_scr = (unsigned char *)|x|calloc(
0xcb5d:	mov esi, 1                           
0xcb62:	mov rdi, rax                         
0xcb65:	call 0x24720                         
0xcb6a:	mov qword ptr [rip + 0x23ebf], rax   #    tty_prev_scr |=| (unsigned char *)xcalloc(
0xcb71:	mov edx, dword ptr [rip + 0x23e69]   #	tty_columns |*| tty_lines, sizeof(unsigned char));
0xcb77:	mov eax, dword ptr [rip + 0x23e5f]   
0xcb7d:	imul eax, edx                        
0xcb80:	cdqe                                 #    tty_prev_atr = (unsigned char *)|x|calloc(
0xcb82:	mov esi, 1                           
0xcb87:	mov rdi, rax                         
0xcb8a:	call 0x24720                         
0xcb8f:	mov qword ptr [rip + 0x23ea2], rax   #    tty_prev_atr |=| (unsigned char *)xcalloc(
0xcb96:	nop                                  #|}|
0xcb97:	mov rax, qword ptr [rbp - 8]         
0xcb9b:	sub rax, qword ptr fs:[0x28]         
0xcba4:	je 0xcbab                            
0xcba6:	call 0x4980                          
0xcbab:	leave                                
0xcbac:	ret                                  
0xcbad:	endbr64                              #|{|
0xcbb1:	push rbp                             
0xcbb2:	mov rbp, rsp                         
0xcbb5:	sub rsp, 0x50                        
0xcbb9:	mov qword ptr [rbp - 0x48], rdi      
0xcbbd:	mov dword ptr [rbp - 0x4c], esi      
0xcbc0:	mov rax, qword ptr fs:[0x28]         #|{|
0xcbc9:	mov qword ptr [rbp - 8], rax         
0xcbcd:	xor eax, eax                         
0xcbcf:	lea rax, [rbp - 0x30]                #    |s|trcpy(vcs_name, "/dev/vcsXX");
0xcbd3:	movabs rcx, 0x7363762f7665642f       
0xcbdd:	mov qword ptr [rax], rcx             
0xcbe0:	mov word ptr [rax + 8], 0x5858       
0xcbe6:	mov byte ptr [rax + 0xa], 0          
0xcbea:	lea rax, [rbp - 0x20]                #    |s|trcpy(vcsa_name, "/dev/vcsaXX");
0xcbee:	mov qword ptr [rax], rcx             
0xcbf1:	mov dword ptr [rax + 8], 0x585861    
0xcbf8:	cmp dword ptr [rbp - 0x4c], 1        #    if |(|op == VCS_READ)
0xcbfc:	jne 0xcc12                           
0xcbfe:	mov dword ptr [rbp - 0x3c], 0        #	flag |=| O_RDONLY;
0xcc05:	mov rax, qword ptr [rip + 0x223c4]   #	fn |=| read;
0xcc0c:	mov qword ptr [rbp - 0x38], rax      
0xcc10:	jmp 0xcc32                           
0xcc12:	mov dword ptr [rbp - 0x3c], 1        #	flag |=| O_WRONLY;
0xcc19:	mov rax, qword ptr [rip + 0x223a8]   #	fn |=| write;
0xcc20:	mov qword ptr [rbp - 0x38], rax      
0xcc24:	mov eax, dword ptr [rip + 0x23d26]   #	if (|v|cs_is_monochrome)
0xcc2a:	test eax, eax                        #	if |(|vcs_is_monochrome)
0xcc2c:	jne 0xcd1e                           
0xcc32:	mov dword ptr [rip + 0x23d14], 0     #    vcs_is_monochrome |=| 0;
0xcc3c:	mov rax, qword ptr [rip + 0x23da5]   #    vcsa_name[9] |=| tty_device[8];
0xcc43:	movzx eax, byte ptr [rax + 8]        
0xcc47:	mov byte ptr [rbp - 0x17], al        
0xcc4a:	mov rax, qword ptr [rip + 0x23d97]   #    vcsa_name[10] |=| tty_device[9];
0xcc51:	movzx eax, byte ptr [rax + 9]        
0xcc55:	mov byte ptr [rbp - 0x16], al        
0xcc58:	mov edx, dword ptr [rbp - 0x3c]      #    vcsfd = |o|pen(vcsa_name, flag);
0xcc5b:	lea rax, [rbp - 0x20]                
0xcc5f:	mov esi, edx                         
0xcc61:	mov rdi, rax                         
0xcc64:	mov eax, 0                           
0xcc69:	call 0x4d30                          
0xcc6e:	mov dword ptr [rbp - 0x40], eax      
0xcc71:	cmp dword ptr [rbp - 0x40], -1       #    if |(|vcsfd != -1)
0xcc75:	je 0xccf1                            
0xcc77:	nop                                  #      |v|csa_label:
0xcc78:	jmp 0xcc7b                           
0xcc7a:	nop                                  #	|g|oto vcsa_label;
0xcc7b:	mov edx, dword ptr [rip + 0x23d5b]   #	(*fn)(vcsfd, buf, 4 + tty_lines |*| tty_columns * 2);
0xcc81:	mov eax, dword ptr [rip + 0x23d59]   
0xcc87:	imul eax, edx                        
0xcc8a:	add eax, 2                           #	(*fn)(vcsfd, buf, 4 |+| tty_lines * tty_columns * 2);
0xcc8d:	lea edx, [rax + rax]                 #	(|*|fn)(vcsfd, buf, 4 + tty_lines * tty_columns * 2);
0xcc90:	mov rcx, qword ptr [rbp - 0x48]      
0xcc94:	mov eax, dword ptr [rbp - 0x40]      
0xcc97:	mov r8, qword ptr [rbp - 0x38]       
0xcc9b:	mov rsi, rcx                         
0xcc9e:	mov edi, eax                         
0xcca0:	mov eax, 0                           
0xcca5:	call r8                              
0xcca8:	mov eax, dword ptr [rbp - 0x40]      #	|c|lose(vcsfd);
0xccab:	mov edi, eax                         
0xccad:	call 0x4a70                          
0xccb2:	cmp dword ptr [rbp - 0x4c], 2        #	if |(|op == VCS_WRITE)
0xccb6:	jne 0xcce7                           
0xccb8:	mov rax, qword ptr [rbp - 0x48]      #	    tty_io_goto(buf[3], buf|[|2]);
0xccbc:	add rax, 2                           
0xccc0:	movzx eax, byte ptr [rax]            
0xccc3:	movsx edx, al                        #	    |t|ty_io_goto(buf[3], buf[2]);
0xccc6:	mov rax, qword ptr [rbp - 0x48]      #	    tty_io_goto(buf|[|3], buf[2]);
0xccca:	add rax, 3                           
0xccce:	movzx eax, byte ptr [rax]            
0xccd1:	movsx eax, al                        #	    |t|ty_io_goto(buf[3], buf[2]);
0xccd4:	mov esi, edx                         
0xccd6:	mov edi, eax                         
0xccd8:	call 0xb9ff                          
0xccdd:	mov eax, 0                           #	    |t|ty_flush();
0xcce2:	call 0xafe2                          
0xcce7:	mov eax, 1                           #	return |1|;
0xccec:	jmp 0xce08                           
0xccf1:	mov byte ptr [rbp - 0x17], 0x30      #    vcsa_name[9] |=| '0';
0xccf5:	mov byte ptr [rbp - 0x16], 0         #    vcsa_name[10] |=| '\0';
0xccf9:	mov edx, dword ptr [rbp - 0x3c]      #    vcsfd = |o|pen(vcsa_name, flag);
0xccfc:	lea rax, [rbp - 0x20]                
0xcd00:	mov esi, edx                         
0xcd02:	mov rdi, rax                         
0xcd05:	mov eax, 0                           
0xcd0a:	call 0x4d30                          
0xcd0f:	mov dword ptr [rbp - 0x40], eax      
0xcd12:	cmp dword ptr [rbp - 0x40], -1       #    if |(|vcsfd != -1)
0xcd16:	jne 0xcc7a                           
0xcd1c:	jmp 0xcd1f                           #  |m|onochrome:
0xcd1e:	nop                                  #	    |g|oto monochrome;
0xcd1f:	mov dword ptr [rip + 0x23c27], 1     #    vcs_is_monochrome |=| 1;
0xcd29:	cmp dword ptr [rbp - 0x4c], 2        #    if |(|op == VCS_WRITE)
0xcd2d:	jne 0xcd39                           
0xcd2f:	mov eax, 0                           #	|t|ty_clear();
0xcd34:	call 0xb8a5                          
0xcd39:	mov rax, qword ptr [rip + 0x23ca8]   #    vcs_name[8] |=| tty_device[8];
0xcd40:	movzx eax, byte ptr [rax + 8]        
0xcd44:	mov byte ptr [rbp - 0x28], al        
0xcd47:	mov rax, qword ptr [rip + 0x23c9a]   #    vcs_name[9] |=| tty_device[9];
0xcd4e:	movzx eax, byte ptr [rax + 9]        
0xcd52:	mov byte ptr [rbp - 0x27], al        
0xcd55:	mov edx, dword ptr [rbp - 0x3c]      #    vcsfd = |o|pen(vcs_name, flag);
0xcd58:	lea rax, [rbp - 0x30]                
0xcd5c:	mov esi, edx                         
0xcd5e:	mov rdi, rax                         
0xcd61:	mov eax, 0                           
0xcd66:	call 0x4d30                          
0xcd6b:	mov dword ptr [rbp - 0x40], eax      
0xcd6e:	cmp dword ptr [rbp - 0x40], -1       #    if |(|vcsfd != -1)
0xcd72:	je 0xcdd8                            
0xcd74:	nop                                  #      |v|cs_label:
0xcd75:	jmp 0xcd78                           
0xcd77:	nop                                  #	|g|oto vcs_label;
0xcd78:	mov edx, dword ptr [rip + 0x23c5e]   #	(*fn)(vcsfd, buf, 4 + tty_lines |*| tty_columns);
0xcd7e:	mov eax, dword ptr [rip + 0x23c5c]   
0xcd84:	imul eax, edx                        
0xcd87:	lea edx, [rax + 4]                   #	(|*|fn)(vcsfd, buf, 4 + tty_lines * tty_columns);
0xcd8a:	mov rcx, qword ptr [rbp - 0x48]      
0xcd8e:	mov eax, dword ptr [rbp - 0x40]      
0xcd91:	mov r8, qword ptr [rbp - 0x38]       
0xcd95:	mov rsi, rcx                         
0xcd98:	mov edi, eax                         
0xcd9a:	mov eax, 0                           
0xcd9f:	call r8                              
0xcda2:	mov eax, dword ptr [rbp - 0x40]      #	|c|lose(vcsfd);
0xcda5:	mov edi, eax                         
0xcda7:	call 0x4a70                          
0xcdac:	cmp dword ptr [rbp - 0x4c], 2        #	if |(|op == VCS_WRITE)
0xcdb0:	jne 0xcdd1                           
0xcdb2:	mov eax, dword ptr [rip + 0x23c24]   #	    |t|ty_io_goto(tty_lines - 1, 0);
0xcdb8:	sub eax, 1                           
0xcdbb:	mov esi, 0                           
0xcdc0:	mov edi, eax                         
0xcdc2:	call 0xb9ff                          
0xcdc7:	mov eax, 0                           #	    |t|ty_flush();
0xcdcc:	call 0xafe2                          
0xcdd1:	mov eax, 1                           #	return |1|;
0xcdd6:	jmp 0xce08                           
0xcdd8:	mov byte ptr [rbp - 0x28], 0x30      #    vcs_name[8] |=| '0';
0xcddc:	mov byte ptr [rbp - 0x27], 0         #    vcs_name[9] |=| '\0';
0xcde0:	mov edx, dword ptr [rbp - 0x3c]      #    vcsfd = |o|pen(vcs_name, flag);
0xcde3:	lea rax, [rbp - 0x30]                
0xcde7:	mov esi, edx                         
0xcde9:	mov rdi, rax                         
0xcdec:	mov eax, 0                           
0xcdf1:	call 0x4d30                          
0xcdf6:	mov dword ptr [rbp - 0x40], eax      
0xcdf9:	cmp dword ptr [rbp - 0x40], -1       #    if |(|vcsfd != -1)
0xcdfd:	jne 0xcd77                           
0xce03:	mov eax, 0                           #    return |0|;
0xce08:	mov rdx, qword ptr [rbp - 8]         #|}|
0xce0c:	sub rdx, qword ptr fs:[0x28]         
0xce15:	je 0xce1c                            
0xce17:	call 0x4980                          #|}|
0xce1c:	leave                                
0xce1d:	ret                                  
0xce1e:	endbr64                              #|{|
0xce22:	push rbp                             
0xce23:	mov rbp, rsp                         
0xce26:	sub rsp, 0x10                        
0xce2a:	mov qword ptr [rbp - 8], rdi         
0xce2e:	mov eax, dword ptr [rip + 0x23c0c]   #    if (|L|inuxConsole)
0xce34:	test eax, eax                        #    if |(|LinuxConsole)
0xce36:	je 0xce54                            
0xce38:	mov rax, qword ptr [rbp - 8]         #	vcs_read_ok = |v|cs_io(buf, VCS_READ);
0xce3c:	mov esi, 1                           
0xce41:	mov rdi, rax                         
0xce44:	mov eax, 0                           
0xce49:	call 0xcbad                          
0xce4e:	mov dword ptr [rip + 0x23af8], eax   #	vcs_read_ok |=| vcs_io(buf, VCS_READ);
0xce54:	nop                                  #|}|
0xce55:	leave                                
0xce56:	ret                                  
0xce57:	endbr64                              #|{|
0xce5b:	push rbp                             
0xce5c:	mov rbp, rsp                         
0xce5f:	sub rsp, 0x10                        
0xce63:	mov qword ptr [rbp - 8], rdi         
0xce67:	mov eax, 0                           #    |t|ty_defaults();
0xce6c:	call 0xc083                          
0xce71:	mov eax, dword ptr [rip + 0x23bc9]   #    if (|L|inuxConsole)
0xce77:	test eax, eax                        #    if |(|LinuxConsole)
0xce79:	je 0xcee9                            
0xce7b:	mov eax, dword ptr [rip + 0x23acb]   #	if (|v|cs_read_ok)
0xce81:	test eax, eax                        #	if |(|vcs_read_ok)
0xce83:	je 0xcedd                            
0xce85:	mov eax, 0                           #	    |t|ty_touch();
0xce8a:	call 0xb9ce                          
0xce8f:	mov rax, qword ptr [rbp - 8]         #	    if (|v|cs_io(buf, VCS_WRITE) == 0)
0xce93:	mov esi, 2                           
0xce98:	mov rdi, rax                         
0xce9b:	mov eax, 0                           
0xcea0:	call 0xcbad                          
0xcea5:	test eax, eax                        #	    if |(|vcs_io(buf, VCS_WRITE) == 0)
0xcea7:	jne 0xceb5                           
0xcea9:	mov eax, 0                           #		|t|ty_clear();
0xceae:	call 0xb8a5                          
0xceb3:	jmp 0xcef3                           #|}|
0xceb5:	mov edx, dword ptr [rip + 0x23b21]   #		       tty_lines |*| tty_columns * sizeof(unsigned char));
0xcebb:	mov eax, dword ptr [rip + 0x23b1f]   
0xcec1:	imul eax, edx                        
0xcec4:	movsxd rdx, eax                      #		|m|emset(tty_scr, '\0',
0xcec7:	mov rax, qword ptr [rip + 0x23b52]   
0xcece:	mov esi, 0                           
0xced3:	mov rdi, rax                         
0xced6:	call 0x4a10                          
0xcedb:	jmp 0xcef3                           #|}|
0xcedd:	mov eax, 0                           #	    |t|ty_clear();
0xcee2:	call 0xb8a5                          
0xcee7:	jmp 0xcef3                           #|}|
0xcee9:	mov eax, 0                           #	|t|ty_clear();
0xceee:	call 0xb8a5                          
0xcef3:	nop                                  #|}|
0xcef4:	leave                                
0xcef5:	ret                                  
0xcef6:	endbr64                              #|{|
0xcefa:	push rbp                             
0xcefb:	mov rbp, rsp                         
0xcefe:	sub rsp, 0x20                        
0xcf02:	mov qword ptr [rbp - 0x18], rdi      
0xcf06:	mov dword ptr [rbp - 4], 0           #    for (i |=| 0; i < 10; i++)
0xcf0d:	jmp 0xcf51                           #    |f|or (i = 0; i < 10; i++)
0xcf0f:	mov eax, dword ptr [rbp - 4]         #	if (strcmp(colors|[|i], colorname) == 0)
0xcf12:	cdqe                                 
0xcf14:	lea rdx, [rax*8]                     
0xcf1c:	lea rax, [rip + 0x2325d]             
0xcf23:	mov rax, qword ptr [rdx + rax]       
0xcf27:	mov rdx, qword ptr [rbp - 0x18]      #	if (|s|trcmp(colors[i], colorname) == 0)
0xcf2b:	mov rsi, rdx                         
0xcf2e:	mov rdi, rax                         
0xcf31:	call 0x4af0                          
0xcf36:	test eax, eax                        #	if |(|strcmp(colors[i], colorname) == 0)
0xcf38:	jne 0xcf4d                           
0xcf3a:	cmp dword ptr [rbp - 4], 7           #	    return (i < 8) ? i |:| (i - 8);
0xcf3e:	jle 0xcf48                           
0xcf40:	mov eax, dword ptr [rbp - 4]         #	    return (i < 8) ? i |:| (i - 8);
0xcf43:	sub eax, 8                           
0xcf46:	jmp 0xcf5c                           
0xcf48:	mov eax, dword ptr [rbp - 4]         #	    return (i < 8) ? i |:| (i - 8);
0xcf4b:	jmp 0xcf5c                           
0xcf4d:	add dword ptr [rbp - 4], 1           #    for (i = 0; i < 10; i|+|+)
0xcf51:	cmp dword ptr [rbp - 4], 9           #    for (i = 0; i |<| 10; i++)
0xcf55:	jle 0xcf0f                           
0xcf57:	mov eax, 0xffffffff                  #    return |-|1;
0xcf5c:	leave                                #|}|
0xcf5d:	ret                                  
0xcf5e:	endbr64                              #|{|
0xcf62:	push rbp                             
0xcf63:	mov rbp, rsp                         
0xcf66:	sub rsp, 0x20                        
0xcf6a:	mov qword ptr [rbp - 0x18], rdi      
0xcf6e:	mov dword ptr [rbp - 4], 0x11        #    for (i |=| TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i++)
0xcf75:	jmp 0xcfbe                           #    |f|or (i = TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i++)
0xcf77:	mov eax, dword ptr [rbp - 4]         #	if (strcmp(tty_capability[i]|.|symbol, symbol) == 0)
0xcf7a:	cdqe                                 
0xcf7c:	shl rax, 5                           
0xcf80:	mov rdx, rax                         
0xcf83:	lea rax, [rip + 0x22d2e]             
0xcf8a:	mov rax, qword ptr [rdx + rax]       
0xcf8e:	mov rdx, qword ptr [rbp - 0x18]      #	if (|s|trcmp(tty_capability[i].symbol, symbol) == 0)
0xcf92:	mov rsi, rdx                         
0xcf95:	mov rdi, rax                         
0xcf98:	call 0x4af0                          
0xcf9d:	test eax, eax                        #	if |(|strcmp(tty_capability[i].symbol, symbol) == 0)
0xcf9f:	jne 0xcfba                           
0xcfa1:	mov eax, dword ptr [rbp - 4]         #	    return tty_capability[i]|.|string;
0xcfa4:	cdqe                                 
0xcfa6:	shl rax, 5                           
0xcfaa:	mov rdx, rax                         
0xcfad:	lea rax, [rip + 0x22cf4]             
0xcfb4:	mov rax, qword ptr [rdx + rax]       
0xcfb8:	jmp 0xcfc9                           
0xcfba:	add dword ptr [rbp - 4], 1           #    for (i = TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i|+|+)
0xcfbe:	cmp dword ptr [rbp - 4], 0x25        #    for (i = TTY_FIRST_SYMBOL_KEY; i |<| TTY_CAPABILITIES_USED; i++)
0xcfc2:	jle 0xcf77                           
0xcfc4:	mov eax, 0                           #    return |N|ULL;
0xcfc9:	leave                                #|}|
0xcfca:	ret                                  
0xcfcb:	endbr64                              #|{|
0xcfcf:	push rbp                             
0xcfd0:	mov rbp, rsp                         
0xcfd3:	sub rsp, 0xd0                        
0xcfda:	mov rax, qword ptr fs:[0x28]         #|{|
0xcfe3:	mov qword ptr [rbp - 8], rax         
0xcfe7:	xor eax, eax                         
0xcfe9:	mov dword ptr [rbp - 0xc0], 0        #    int err, i, |t|erm_errors = 0;
0xcff3:	lea rax, [rip + 0x1ad27]             #    char *termtype = |g|etenv("TERM");
0xcffa:	mov rdi, rax                         
0xcffd:	call 0x47a0                          
0xd002:	mov qword ptr [rbp - 0xb0], rax      
0xd009:	lea rax, [rbp - 0xa0]                #    |f|stat(TTY_OUTPUT, &statbuf);
0xd010:	mov rsi, rax                         
0xd013:	mov edi, 1                           
0xd018:	call 0x4e80                          
0xd01d:	mov rax, qword ptr [rbp - 0x78]      #    if ((statbuf|.|st_rdev >> 8) == LINUX_VC_MAJOR)
0xd021:	shr rax, 8                           #    if ((statbuf.st_rdev |>|> 8) == LINUX_VC_MAJOR)
0xd025:	cmp rax, 4                           #    if |(|(statbuf.st_rdev >> 8) == LINUX_VC_MAJOR)
0xd029:	jne 0xd037                           
0xd02b:	mov dword ptr [rip + 0x23a0b], 1     #	LinuxConsole |=| 1;
0xd035:	jmp 0xd041                           
0xd037:	mov dword ptr [rip + 0x239ff], 0     #	LinuxConsole |=| 0;
0xd041:	cmp qword ptr [rbp - 0xb0], 0        #    if |(|termtype == NULL)
0xd049:	jne 0xd072                           
0xd04b:	mov rdx, qword ptr [rip + 0x23886]   #	|f|printf(stderr, "%s: can't find the TERM environment variable, ",
0xd052:	mov rax, qword ptr [rip + 0x23867]   
0xd059:	lea rcx, [rip + 0x1acc8]             
0xd060:	mov rsi, rcx                         
0xd063:	mov rdi, rax                         
0xd066:	mov eax, 0                           
0xd06b:	call 0x4b40                          
0xd070:	jmp 0xd0ac                           #	|g|oto switch_to_vt100;
0xd072:	mov rax, qword ptr [rbp - 0xb0]      #    if (|s|trlen(termtype) > 63)
0xd079:	mov rdi, rax                         
0xd07c:	call 0x4960                          
0xd081:	cmp rax, 0x3f                        #    if |(|strlen(termtype) > 63)
0xd085:	jbe 0xd0df                           
0xd087:	mov rdx, qword ptr [rip + 0x2384a]   #	|f|printf(stderr, "%s: the TERM environment variable is too long, ",
0xd08e:	mov rax, qword ptr [rip + 0x2382b]   
0xd095:	lea rcx, [rip + 0x1acbc]             
0xd09c:	mov rsi, rcx                         
0xd09f:	mov rdi, rax                         
0xd0a2:	mov eax, 0                           
0xd0a7:	call 0x4b40                          
0xd0ac:	mov rax, qword ptr [rip + 0x2380d]   #	|f|printf(stderr, "trying vt100 ...\n");
0xd0b3:	mov rcx, rax                         
0xd0b6:	mov edx, 0x11                        
0xd0bb:	mov esi, 1                           
0xd0c0:	lea rax, [rip + 0x1acc1]             
0xd0c7:	mov rdi, rax                         
0xd0ca:	call 0x4e10                          
0xd0cf:	lea rax, [rip + 0x22bc4]             #	termtype |=| vt100;
0xd0d6:	mov qword ptr [rbp - 0xb0], rax      
0xd0dd:	jmp 0xd0e0                           
0xd0df:	nop                                  #  |r|etry:
0xd0e0:	mov rax, qword ptr [rbp - 0xb0]      #    err = |t|getent(NULL, termtype);
0xd0e7:	mov rsi, rax                         
0xd0ea:	mov edi, 0                           
0xd0ef:	call 0x4e60                          
0xd0f4:	mov dword ptr [rbp - 0xbc], eax      
0xd0fa:	cmp dword ptr [rbp - 0xbc], -1       #    if |(|err == -1)
0xd101:	jne 0xd15f                           
0xd103:	mov rdx, qword ptr [rip + 0x237ce]   #	|f|printf(stderr, "%s: can't find the %s database.\n",
0xd10a:	mov rax, qword ptr [rip + 0x237af]   
0xd111:	lea rcx, [rip + 0x23048]             
0xd118:	lea rsi, [rip + 0x1ac81]             
0xd11f:	mov rdi, rax                         
0xd122:	mov eax, 0                           
0xd127:	call 0x4b40                          
0xd12c:	mov rdx, qword ptr [rip + 0x237a5]   #	|f|printf(stderr, "%s: check your %s environment variable ...\n",
0xd133:	mov rax, qword ptr [rip + 0x23786]   
0xd13a:	lea rcx, [rip + 0x2302f]             
0xd141:	lea rsi, [rip + 0x1ac80]             
0xd148:	mov rdi, rax                         
0xd14b:	mov eax, 0                           
0xd150:	call 0x4b40                          
0xd155:	mov edi, 1                           #	|e|xit(1);
0xd15a:	call 0x4df0                          
0xd15f:	cmp dword ptr [rbp - 0xbc], 0        #    if |(|err == 0)
0xd166:	jne 0xd2b8                           
0xd16c:	mov rdx, qword ptr [rip + 0x23765]   #	|f|printf(stderr,
0xd173:	mov rax, qword ptr [rip + 0x23746]   
0xd17a:	mov rcx, qword ptr [rbp - 0xb0]      
0xd181:	lea r8, [rip + 0x22fd8]              
0xd188:	lea rsi, [rip + 0x1ac69]             
0xd18f:	mov rdi, rax                         
0xd192:	mov eax, 0                           
0xd197:	call 0x4b40                          
0xd19c:	mov rax, qword ptr [rbp - 0xb0]      #	if (|s|trcmp(termtype, "iris-ansi") == 0)
0xd1a3:	lea rdx, [rip + 0x1ac87]             
0xd1aa:	mov rsi, rdx                         
0xd1ad:	mov rdi, rax                         
0xd1b0:	call 0x4af0                          
0xd1b5:	test eax, eax                        #	if |(|strcmp(termtype, "iris-ansi") == 0)
0xd1b7:	jne 0xd1f1                           
0xd1b9:	mov rdx, qword ptr [rip + 0x23718]   #	    |f|printf(stderr, "%s: trying ansi...\n", g_program);
0xd1c0:	mov rax, qword ptr [rip + 0x236f9]   
0xd1c7:	lea rcx, [rip + 0x1ac6d]             
0xd1ce:	mov rsi, rcx                         
0xd1d1:	mov rdi, rax                         
0xd1d4:	mov eax, 0                           
0xd1d9:	call 0x4b40                          
0xd1de:	lea rax, [rip + 0x1ac6a]             #	    termtype |=| "ansi";
0xd1e5:	mov qword ptr [rbp - 0xb0], rax      
0xd1ec:	jmp 0xd0e0                           #	    |g|oto retry;
0xd1f1:	mov rax, qword ptr [rbp - 0xb0]      #	if (|t|ty_is_xterm(termtype))
0xd1f8:	mov rdi, rax                         
0xd1fb:	call 0xd9a3                          
0xd200:	test eax, eax                        #	if |(|tty_is_xterm(termtype))
0xd202:	je 0xd23c                            
0xd204:	mov rdx, qword ptr [rip + 0x236cd]   #	    |f|printf(stderr, "%s: trying xterm...\n", g_program);
0xd20b:	mov rax, qword ptr [rip + 0x236ae]   
0xd212:	lea rcx, [rip + 0x1ac3b]             
0xd219:	mov rsi, rcx                         
0xd21c:	mov rdi, rax                         
0xd21f:	mov eax, 0                           
0xd224:	call 0x4b40                          
0xd229:	lea rax, [rip + 0x1ac39]             #	    termtype |=| "xterm";
0xd230:	mov qword ptr [rbp - 0xb0], rax      
0xd237:	jmp 0xd0e0                           #	    |g|oto retry;
0xd23c:	mov rax, qword ptr [rbp - 0xb0]      #	if (|s|trcmp(termtype, "vt220") == 0 ||
0xd243:	lea rdx, [rip + 0x1ac25]             
0xd24a:	mov rsi, rdx                         
0xd24d:	mov rdi, rax                         
0xd250:	call 0x4af0                          
0xd255:	test eax, eax                        #	if |(|strcmp(termtype, "vt220") == 0 ||
0xd257:	je 0xd276                            
0xd259:	mov rax, qword ptr [rbp - 0xb0]      #	    |s|trcmp(termtype, "vt320") == 0)
0xd260:	lea rdx, [rip + 0x1ac0e]             
0xd267:	mov rsi, rdx                         
0xd26a:	mov rdi, rax                         
0xd26d:	call 0x4af0                          
0xd272:	test eax, eax                        #	if (strcmp(termtype, "vt220") == 0 ||||
0xd274:	jne 0xd2ae                           
0xd276:	mov rdx, qword ptr [rip + 0x2365b]   #	    |f|printf(stderr, "%s: trying vt100...\n", g_program);
0xd27d:	mov rax, qword ptr [rip + 0x2363c]   
0xd284:	lea rcx, [rip + 0x1abf0]             
0xd28b:	mov rsi, rcx                         
0xd28e:	mov rdi, rax                         
0xd291:	mov eax, 0                           
0xd296:	call 0x4b40                          
0xd29b:	lea rax, [rip + 0x1abad]             #	    termtype |=| "ansi";
0xd2a2:	mov qword ptr [rbp - 0xb0], rax      
0xd2a9:	jmp 0xd0e0                           #	    |g|oto retry;
0xd2ae:	mov edi, 1                           #	|e|xit(1);
0xd2b3:	call 0x4df0                          
0xd2b8:	mov rax, qword ptr [rbp - 0xb0]      #    tty_type = |x|strdup(termtype);
0xd2bf:	mov rdi, rax                         
0xd2c2:	call 0x24780                         
0xd2c7:	mov qword ptr [rip + 0x23bba], rax   #    tty_type |=| xstrdup(termtype);
0xd2ce:	mov edi, 0x800                       #    capability_buf = |x|malloc(2048);
0xd2d3:	call 0x24650                         
0xd2d8:	mov qword ptr [rbp - 0xb8], rax      #    capability_buf |=| xmalloc(2048);
0xd2df:	mov rax, qword ptr [rip + 0x22a9a]   #    tmp = tgetstr(|T|TY_PAD_CHAR_NAME, &capability_buf);
0xd2e6:	lea rdx, [rbp - 0xb8]                #    tmp = |t|getstr(TTY_PAD_CHAR_NAME, &capability_buf);
0xd2ed:	mov rsi, rdx                         
0xd2f0:	mov rdi, rax                         
0xd2f3:	call 0x4c70                          
0xd2f8:	mov qword ptr [rbp - 0xa8], rax      
0xd2ff:	cmp qword ptr [rbp - 0xa8], 0        #    PC |=| tmp ? *tmp : 0;
0xd307:	je 0xd315                            
0xd309:	mov rax, qword ptr [rbp - 0xa8]      #    PC |=| tmp ? *tmp : 0;
0xd310:	movzx eax, byte ptr [rax]            
0xd313:	jmp 0xd31a                           
0xd315:	mov eax, 0                           #    PC |=| tmp ? *tmp : 0;
0xd31a:	mov byte ptr [rip + 0x23b70], al     #    PC |=| tmp ? *tmp : 0;
0xd320:	mov rax, qword ptr [rip + 0x22a99]   #    BC = tgetstr(|T|TY_LEFT_ONE_SPACE_NAME, &capability_buf);
0xd327:	lea rdx, [rbp - 0xb8]                #    BC = |t|getstr(TTY_LEFT_ONE_SPACE_NAME, &capability_buf);
0xd32e:	mov rsi, rdx                         
0xd331:	mov rdi, rax                         
0xd334:	call 0x4c70                          
0xd339:	mov qword ptr [rip + 0x23b58], rax   #    BC |=| tgetstr(TTY_LEFT_ONE_SPACE_NAME, &capability_buf);
0xd340:	mov rax, qword ptr [rip + 0x22a59]   #    UP = tgetstr(|T|TY_UP_ONE_LINE_NAME,    &capability_buf);
0xd347:	lea rdx, [rbp - 0xb8]                #    UP = |t|getstr(TTY_UP_ONE_LINE_NAME,    &capability_buf);
0xd34e:	mov rsi, rdx                         
0xd351:	mov rdi, rax                         
0xd354:	call 0x4c70                          
0xd359:	mov qword ptr [rip + 0x23b40], rax   #    UP |=| tgetstr(TTY_UP_ONE_LINE_NAME,    &capability_buf);
0xd360:	mov rax, qword ptr [rip + 0x23b31]   #    if (BC |=|= NULL || UP == NULL)
0xd367:	test rax, rax                        #    if |(|BC == NULL || UP == NULL)
0xd36a:	je 0xd378                            
0xd36c:	mov rax, qword ptr [rip + 0x23b2d]   #    if (BC == NULL || UP |=|= NULL)
0xd373:	test rax, rax                        #    if (BC == NULL |||| UP == NULL)
0xd376:	jne 0xd391                           
0xd378:	mov qword ptr [rip + 0x23b1d], 0     #	BC = UP |=| NULL;
0xd383:	mov rax, qword ptr [rip + 0x23b16]   #	BC |=| UP = NULL;
0xd38a:	mov qword ptr [rip + 0x23b07], rax   
0xd391:	mov rax, qword ptr [rip + 0x22908]   #    TTY_ATTRIBUTES_OFF = tgetstr(|T|TY_ATTRIBUTES_OFF_NAME, &capability_buf);
0xd398:	lea rdx, [rbp - 0xb8]                #    TTY_ATTRIBUTES_OFF = |t|getstr(TTY_ATTRIBUTES_OFF_NAME, &capability_buf);
0xd39f:	mov rsi, rdx                         
0xd3a2:	mov rdi, rax                         
0xd3a5:	call 0x4c70                          
0xd3aa:	mov qword ptr [rip + 0x228f7], rax   #    TTY_ATTRIBUTES_OFF |=| tgetstr(TTY_ATTRIBUTES_OFF_NAME, &capability_buf);
0xd3b1:	mov rax, qword ptr [rip + 0x22928]   #    TTY_BRIGHT_ON      = tgetstr(|T|TY_BRIGHT_ON_NAME,      &capability_buf);
0xd3b8:	lea rdx, [rbp - 0xb8]                #    TTY_BRIGHT_ON      = |t|getstr(TTY_BRIGHT_ON_NAME,      &capability_buf);
0xd3bf:	mov rsi, rdx                         
0xd3c2:	mov rdi, rax                         
0xd3c5:	call 0x4c70                          
0xd3ca:	mov qword ptr [rip + 0x22917], rax   #    TTY_BRIGHT_ON      |=| tgetstr(TTY_BRIGHT_ON_NAME,      &capability_buf);
0xd3d1:	mov rax, qword ptr [rip + 0x228e8]   #    TTY_REVERSE_ON     = tgetstr(|T|TY_REVERSE_ON_NAME,     &capability_buf);
0xd3d8:	lea rdx, [rbp - 0xb8]                #    TTY_REVERSE_ON     = |t|getstr(TTY_REVERSE_ON_NAME,     &capability_buf);
0xd3df:	mov rsi, rdx                         
0xd3e2:	mov rdi, rax                         
0xd3e5:	call 0x4c70                          
0xd3ea:	mov qword ptr [rip + 0x228d7], rax   #    TTY_REVERSE_ON     |=| tgetstr(TTY_REVERSE_ON_NAME,     &capability_buf);
0xd3f1:	mov rax, qword ptr [rip + 0x228b0]   #    if (|T|TY_ATTRIBUTES_OFF == NULL)
0xd3f8:	test rax, rax                        #    if |(|TTY_ATTRIBUTES_OFF == NULL)
0xd3fb:	jne 0xd416                           
0xd3fd:	mov qword ptr [rip + 0x228e0], 0     #	TTY_REVERSE_ON = TTY_BRIGHT_ON |=| NULL;
0xd408:	mov rax, qword ptr [rip + 0x228d9]   #	TTY_REVERSE_ON = |T|TY_BRIGHT_ON = NULL;
0xd40f:	mov qword ptr [rip + 0x228b2], rax   #	TTY_REVERSE_ON |=| TTY_BRIGHT_ON = NULL;
0xd416:	mov rax, qword ptr [rip + 0x229c3]   #    TTY_STANDOUT_ON  = tgetstr(|T|TY_STANDOUT_ON_NAME,  &capability_buf);
0xd41d:	lea rdx, [rbp - 0xb8]                #    TTY_STANDOUT_ON  = |t|getstr(TTY_STANDOUT_ON_NAME,  &capability_buf);
0xd424:	mov rsi, rdx                         
0xd427:	mov rdi, rax                         
0xd42a:	call 0x4c70                          
0xd42f:	mov qword ptr [rip + 0x229b2], rax   #    TTY_STANDOUT_ON  |=| tgetstr(TTY_STANDOUT_ON_NAME,  &capability_buf);
0xd436:	mov rax, qword ptr [rip + 0x229ab]   #    if (|T|TY_STANDOUT_ON == NULL)
0xd43d:	test rax, rax                        #    if |(|TTY_STANDOUT_ON == NULL)
0xd440:	jne 0xd459                           
0xd442:	mov qword ptr [rip + 0x2299b], 0     #	TTY_STANDOUT_ON |=| NULL;
0xd44d:	mov dword ptr [rip + 0x229d9], 0     #	TTY_MS_FLAG |=| 0;
0xd457:	jmp 0xd47c                           
0xd459:	mov rax, qword ptr [rip + 0x22988]   #	TTY_REVERSE_ON = |T|TY_STANDOUT_ON;
0xd460:	mov qword ptr [rip + 0x22861], rax   #	TTY_REVERSE_ON |=| TTY_STANDOUT_ON;
0xd467:	mov rax, qword ptr [rip + 0x229b2]   #	TTY_MS_FLAG = tgetflag(|T|TY_MS_FLAG_NAME);
0xd46e:	mov rdi, rax                         #	TTY_MS_FLAG = |t|getflag(TTY_MS_FLAG_NAME);
0xd471:	call 0x4c60                          
0xd476:	mov dword ptr [rip + 0x229b4], eax   #	TTY_MS_FLAG |=| tgetflag(TTY_MS_FLAG_NAME);
0xd47c:	mov rax, qword ptr [rip + 0x2297d]   #    TTY_MAGIC_COOKIE = tgetnum(|T|TY_MAGIC_COOKIE_NAME);
0xd483:	mov rdi, rax                         #    TTY_MAGIC_COOKIE = |t|getnum(TTY_MAGIC_COOKIE_NAME);
0xd486:	call 0x4c20                          
0xd48b:	mov dword ptr [rip + 0x2297f], eax   #    TTY_MAGIC_COOKIE |=| tgetnum(TTY_MAGIC_COOKIE_NAME);
0xd491:	mov eax, dword ptr [rip + 0x22979]   #    if (|T|TY_MAGIC_COOKIE >= 0)
0xd497:	test eax, eax                        #    if |(|TTY_MAGIC_COOKIE >= 0)
0xd499:	js 0xd4c2                            
0xd49b:	mov qword ptr [rip + 0x22842], 0     #	TTY_ATTRIBUTES_OFF = TTY_REVERSE_ON = TTY_BRIGHT_ON |=| NULL;
0xd4a6:	mov rax, qword ptr [rip + 0x2283b]   #	TTY_ATTRIBUTES_OFF = TTY_REVERSE_ON = |T|TY_BRIGHT_ON = NULL;
0xd4ad:	mov qword ptr [rip + 0x22814], rax   #	TTY_ATTRIBUTES_OFF = TTY_REVERSE_ON |=| TTY_BRIGHT_ON = NULL;
0xd4b4:	mov rax, qword ptr [rip + 0x2280d]   #	TTY_ATTRIBUTES_OFF = |T|TY_REVERSE_ON = TTY_BRIGHT_ON = NULL;
0xd4bb:	mov qword ptr [rip + 0x227e6], rax   #	TTY_ATTRIBUTES_OFF |=| TTY_REVERSE_ON = TTY_BRIGHT_ON = NULL;
0xd4c2:	mov rax, qword ptr [rip + 0x22977]   #    TTY_COLUMNS = tgetnum(|T|TY_COLUMNS_NAME);
0xd4c9:	mov rdi, rax                         #    TTY_COLUMNS = |t|getnum(TTY_COLUMNS_NAME);
0xd4cc:	call 0x4c20                          
0xd4d1:	mov dword ptr [rip + 0x22979], eax   #    TTY_COLUMNS |=| tgetnum(TTY_COLUMNS_NAME);
0xd4d7:	mov rax, qword ptr [rip + 0x22982]   #    TTY_LINES   = tgetnum(|T|TY_LINES_NAME);
0xd4de:	mov rdi, rax                         #    TTY_LINES   = |t|getnum(TTY_LINES_NAME);
0xd4e1:	call 0x4c20                          
0xd4e6:	mov dword ptr [rip + 0x22984], eax   #    TTY_LINES   |=| tgetnum(TTY_LINES_NAME);
0xd4ec:	mov rax, qword ptr [rip + 0x2280d]   #    TTY_CURSOR_OFF = tgetstr(|T|TY_CURSOR_OFF_NAME, &capability_buf);
0xd4f3:	lea rdx, [rbp - 0xb8]                #    TTY_CURSOR_OFF = |t|getstr(TTY_CURSOR_OFF_NAME, &capability_buf);
0xd4fa:	mov rsi, rdx                         
0xd4fd:	mov rdi, rax                         
0xd500:	call 0x4c70                          
0xd505:	mov qword ptr [rip + 0x227fc], rax   #    TTY_CURSOR_OFF |=| tgetstr(TTY_CURSOR_OFF_NAME, &capability_buf);
0xd50c:	mov rax, qword ptr [rip + 0x2280d]   #    TTY_CURSOR_ON  = tgetstr(|T|TY_CURSOR_ON_NAME,  &capability_buf);
0xd513:	lea rdx, [rbp - 0xb8]                #    TTY_CURSOR_ON  = |t|getstr(TTY_CURSOR_ON_NAME,  &capability_buf);
0xd51a:	mov rsi, rdx                         
0xd51d:	mov rdi, rax                         
0xd520:	call 0x4c70                          
0xd525:	mov qword ptr [rip + 0x227fc], rax   #    TTY_CURSOR_ON  |=| tgetstr(TTY_CURSOR_ON_NAME,  &capability_buf);
0xd52c:	mov rax, qword ptr [rip + 0x227d5]   #    if (|T|TY_CURSOR_OFF == NULL || TTY_CURSOR_ON == NULL)
0xd533:	test rax, rax                        #    if |(|TTY_CURSOR_OFF == NULL || TTY_CURSOR_ON == NULL)
0xd536:	je 0xd544                            
0xd538:	mov rax, qword ptr [rip + 0x227e9]   #    if (TTY_CURSOR_OFF == NULL || |T|TY_CURSOR_ON == NULL)
0xd53f:	test rax, rax                        #    if (TTY_CURSOR_OFF == NULL |||| TTY_CURSOR_ON == NULL)
0xd542:	jne 0xd55d                           
0xd544:	mov qword ptr [rip + 0x227b9], 0     #	TTY_CURSOR_ON = TTY_CURSOR_OFF |=| NULL;
0xd54f:	mov rax, qword ptr [rip + 0x227b2]   #	TTY_CURSOR_ON = |T|TY_CURSOR_OFF = NULL;
0xd556:	mov qword ptr [rip + 0x227cb], rax   #	TTY_CURSOR_ON |=| TTY_CURSOR_OFF = NULL;
0xd55d:	mov rax, qword ptr [rip + 0x227dc]   #    TTY_CLEAR_SCREEN = tgetstr(|T|TY_CLEAR_SCREEN_NAME, &capability_buf);
0xd564:	lea rdx, [rbp - 0xb8]                #    TTY_CLEAR_SCREEN = |t|getstr(TTY_CLEAR_SCREEN_NAME, &capability_buf);
0xd56b:	mov rsi, rdx                         
0xd56e:	mov rdi, rax                         
0xd571:	call 0x4c70                          
0xd576:	mov qword ptr [rip + 0x227cb], rax   #    TTY_CLEAR_SCREEN |=| tgetstr(TTY_CLEAR_SCREEN_NAME, &capability_buf);
0xd57d:	mov rax, qword ptr [rip + 0x227dc]   #    TTY_CURSOR_MOVE  = tgetstr(|T|TY_CURSOR_MOVE_NAME,  &capability_buf);
0xd584:	lea rdx, [rbp - 0xb8]                #    TTY_CURSOR_MOVE  = |t|getstr(TTY_CURSOR_MOVE_NAME,  &capability_buf);
0xd58b:	mov rsi, rdx                         
0xd58e:	mov rdi, rax                         
0xd591:	call 0x4c70                          
0xd596:	mov qword ptr [rip + 0x227cb], rax   #    TTY_CURSOR_MOVE  |=| tgetstr(TTY_CURSOR_MOVE_NAME,  &capability_buf);
0xd59d:	mov rax, qword ptr [rip + 0x228dc]   #    TTY_START_CURSORAPP = tgetstr(|T|TY_START_CURSORAPP_NAME, &capability_buf);
0xd5a4:	lea rdx, [rbp - 0xb8]                #    TTY_START_CURSORAPP = |t|getstr(TTY_START_CURSORAPP_NAME, &capability_buf);
0xd5ab:	mov rsi, rdx                         
0xd5ae:	mov rdi, rax                         
0xd5b1:	call 0x4c70                          
0xd5b6:	mov qword ptr [rip + 0x228cb], rax   #    TTY_START_CURSORAPP |=| tgetstr(TTY_START_CURSORAPP_NAME, &capability_buf);
0xd5bd:	mov rax, qword ptr [rip + 0x228dc]   #    TTY_END_CURSORAPP = tgetstr(|T|TY_END_CURSORAPP_NAME, &capability_buf);
0xd5c4:	lea rdx, [rbp - 0xb8]                #    TTY_END_CURSORAPP = |t|getstr(TTY_END_CURSORAPP_NAME, &capability_buf);
0xd5cb:	mov rsi, rdx                         
0xd5ce:	mov rdi, rax                         
0xd5d1:	call 0x4c70                          
0xd5d6:	mov qword ptr [rip + 0x228cb], rax   #    TTY_END_CURSORAPP |=| tgetstr(TTY_END_CURSORAPP_NAME, &capability_buf);
0xd5dd:	mov dword ptr [rbp - 0xc4], 0x11     #    for (i |=| TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i++)
0xd5e7:	jmp 0xd637                           #    |f|or (i = TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i++)
0xd5e9:	mov eax, dword ptr [rbp - 0xc4]      #	tty_capability[i].string = tgetstr(tty_capability[i]|.|name,
0xd5ef:	cdqe                                 
0xd5f1:	shl rax, 5                           
0xd5f5:	mov rdx, rax                         
0xd5f8:	lea rax, [rip + 0x226a1]             
0xd5ff:	mov rax, qword ptr [rdx + rax]       
0xd603:	lea rdx, [rbp - 0xb8]                #	tty_capability[i].string = |t|getstr(tty_capability[i].name,
0xd60a:	mov rsi, rdx                         
0xd60d:	mov rdi, rax                         
0xd610:	call 0x4c70                          
0xd615:	mov edx, dword ptr [rbp - 0xc4]      #	tty_capability[i].string |=| tgetstr(tty_capability[i].name,
0xd61b:	movsxd rdx, edx                      
0xd61e:	mov rcx, rdx                         
0xd621:	shl rcx, 5                           
0xd625:	lea rdx, [rip + 0x2267c]             
0xd62c:	mov qword ptr [rcx + rdx], rax       
0xd630:	add dword ptr [rbp - 0xc4], 1        #    for (i = TTY_FIRST_SYMBOL_KEY; i < TTY_CAPABILITIES_USED; i|+|+)
0xd637:	cmp dword ptr [rbp - 0xc4], 0x25     #    for (i = TTY_FIRST_SYMBOL_KEY; i |<| TTY_CAPABILITIES_USED; i++)
0xd63e:	jle 0xd5e9                           
0xd640:	mov dword ptr [rbp - 0xc4], 0        #    for (i |=| 0; i < TTY_CAPABILITIES_USED; i++)
0xd64a:	jmp 0xd6fc                           #    |f|or (i = 0; i < TTY_CAPABILITIES_USED; i++)
0xd64f:	mov eax, dword ptr [rbp - 0xc4]      #	if (tty_capability[i]|.|string == NULL)
0xd655:	cdqe                                 
0xd657:	shl rax, 5                           
0xd65b:	mov rdx, rax                         
0xd65e:	lea rax, [rip + 0x22643]             
0xd665:	mov rax, qword ptr [rdx + rax]       
0xd669:	test rax, rax                        #	if |(|tty_capability[i].string == NULL)
0xd66c:	jne 0xd6f5                           
0xd672:	mov eax, dword ptr [rbp - 0xc4]      #	    if (tty_capability[i]|.|required)
0xd678:	cdqe                                 
0xd67a:	shl rax, 5                           
0xd67e:	mov rdx, rax                         
0xd681:	lea rax, [rip + 0x2262c]             
0xd688:	mov eax, dword ptr [rdx + rax]       
0xd68b:	test eax, eax                        #	    if |(|tty_capability[i].required)
0xd68d:	je 0xd6d4                            
0xd68f:	add dword ptr [rbp - 0xc0], 1        #		term_errors|+|+;
0xd696:	mov eax, dword ptr [rbp - 0xc4]      #		|f|printf(stderr,
0xd69c:	cdqe                                 
0xd69e:	shl rax, 5                           
0xd6a2:	mov rdx, rax                         
0xd6a5:	lea rax, [rip + 0x225f4]             
0xd6ac:	mov rcx, qword ptr [rdx + rax]       
0xd6b0:	mov rdx, qword ptr [rip + 0x23221]   
0xd6b7:	mov rax, qword ptr [rip + 0x23202]   
0xd6be:	lea rsi, [rip + 0x1a7cb]             
0xd6c5:	mov rdi, rax                         
0xd6c8:	mov eax, 0                           
0xd6cd:	call 0x4b40                          
0xd6d2:	jmp 0xd6f5                           
0xd6d4:	mov eax, dword ptr [rbp - 0xc4]      #		tty_capability[i].string |=| "";
0xd6da:	cdqe                                 
0xd6dc:	shl rax, 5                           
0xd6e0:	mov rdx, rax                         
0xd6e3:	lea rax, [rip + 0x225be]             
0xd6ea:	lea rcx, [rip + 0x1a7cd]             
0xd6f1:	mov qword ptr [rdx + rax], rcx       
0xd6f5:	add dword ptr [rbp - 0xc4], 1        #    for (i = 0; i < TTY_CAPABILITIES_USED; i|+|+)
0xd6fc:	cmp dword ptr [rbp - 0xc4], 0x25     #    for (i = 0; i |<| TTY_CAPABILITIES_USED; i++)
0xd703:	jle 0xd64f                           
0xd709:	cmp dword ptr [rbp - 0xc0], 0        #    if |(|term_errors)
0xd710:	je 0xd744                            
0xd712:	mov rdx, qword ptr [rip + 0x231bf]   #	|f|printf(stderr, "%s: %d errors. Your terminal is too dumb :-< .\n",
0xd719:	mov rax, qword ptr [rip + 0x231a0]   
0xd720:	mov ecx, dword ptr [rbp - 0xc0]      
0xd726:	lea rsi, [rip + 0x1a793]             
0xd72d:	mov rdi, rax                         
0xd730:	mov eax, 0                           
0xd735:	call 0x4b40                          
0xd73a:	mov edi, 1                           #	|e|xit(1);
0xd73f:	call 0x4df0                          
0xd744:	nop                                  #|}|
0xd745:	mov rax, qword ptr [rbp - 8]         
0xd749:	sub rax, qword ptr fs:[0x28]         
0xd752:	je 0xd759                            
0xd754:	call 0x4980                          
0xd759:	leave                                
0xd75a:	ret                                  
0xd75b:	endbr64                              #|{|
0xd75f:	push rbp                             
0xd760:	mov rbp, rsp                         
0xd763:	sub rsp, 0x10                        
0xd767:	mov dword ptr [rbp - 4], edi         
0xd76a:	mov edi, 0                           #    if (!|i|satty(TTY_INPUT) || !isatty(TTY_OUTPUT))
0xd76f:	call 0x48c0                          
0xd774:	test eax, eax                        #    if |(|!isatty(TTY_INPUT) || !isatty(TTY_OUTPUT))
0xd776:	je 0xd786                            
0xd778:	mov edi, 1                           #    if (!isatty(TTY_INPUT) || !|i|satty(TTY_OUTPUT))
0xd77d:	call 0x48c0                          
0xd782:	test eax, eax                        #    if (!isatty(TTY_INPUT) |||| !isatty(TTY_OUTPUT))
0xd784:	jne 0xd7b5                           
0xd786:	mov rdx, qword ptr [rip + 0x2314b]   #	|f|printf(stderr, "%s: only stderr can be redirected.\n", g_program);
0xd78d:	mov rax, qword ptr [rip + 0x2312c]   
0xd794:	lea rcx, [rip + 0x1a755]             
0xd79b:	mov rsi, rcx                         
0xd79e:	mov rdi, rax                         
0xd7a1:	mov eax, 0                           
0xd7a6:	call 0x4b40                          
0xd7ab:	mov edi, 1                           #	|e|xit(1);
0xd7b0:	call 0x4df0                          
0xd7b5:	mov edi, 1                           #    if ((tty_device = |t|tyname(1)) == NULL)
0xd7ba:	call 0x4ca0                          
0xd7bf:	mov qword ptr [rip + 0x23222], rax   #    if ((tty_device |=| ttyname(1)) == NULL)
0xd7c6:	mov rax, qword ptr [rip + 0x2321b]   
0xd7cd:	test rax, rax                        #    if |(|(tty_device = ttyname(1)) == NULL)
0xd7d0:	jne 0xd801                           
0xd7d2:	mov rdx, qword ptr [rip + 0x230ff]   #	|f|printf(stderr, "%s: can't get terminal name.\n", g_program);
0xd7d9:	mov rax, qword ptr [rip + 0x230e0]   
0xd7e0:	lea rcx, [rip + 0x1a72d]             
0xd7e7:	mov rsi, rcx                         
0xd7ea:	mov rdi, rax                         
0xd7ed:	mov eax, 0                           
0xd7f2:	call 0x4b40                          
0xd7f7:	mov edi, 1                           #	|e|xit(1);
0xd7fc:	call 0x4df0                          
0xd801:	lea rax, [rip + 0x23158]             #    |t|cgetattr(TTY_OUTPUT, &old_term);
0xd808:	mov rsi, rax                         
0xd80b:	mov edi, 1                           
0xd810:	call 0x4d10                          
0xd815:	mov edi, 0x40                        #    default_key.key_seq  = tty_key_seq = (unsigned char *)|x|malloc(64);
0xd81a:	call 0x24650                         
0xd81f:	mov qword ptr [rip + 0x231ca], rax   #    default_key.key_seq  = tty_key_seq |=| (unsigned char *)xmalloc(64);
0xd826:	mov rax, qword ptr [rip + 0x231c3]   #    default_key.key_seq  |=| tty_key_seq = (unsigned char *)xmalloc(64);
0xd82d:	mov qword ptr [rip + 0x2322c], rax   
0xd834:	mov qword ptr [rip + 0x23231], 0     #    default_key.aux_data |=| NULL;
0xd83f:	mov qword ptr [rip + 0x2321e], 0     #    default_key.next |=| NULL;
0xd84a:	mov eax, dword ptr [rbp - 4]         #    tty_kbdmode |=| kbd_mode;
0xd84d:	mov dword ptr [rip + 0x23101], eax   
0xd853:	mov rax, qword ptr [rip + 0x2318e]   #    tty_device_length = |s|trlen(tty_device);
0xd85a:	mov rdi, rax                         
0xd85d:	call 0x4960                          
0xd862:	mov dword ptr [rip + 0x23190], eax   #    tty_device_length |=| strlen(tty_device);
0xd868:	mov eax, 0                           #    |t|ty_get_capabilities();
0xd86d:	call 0xcfcb                          
0xd872:	nop                                  #|}|
0xd873:	leave                                
0xd874:	ret                                  
0xd875:	endbr64                              #|{|
0xd879:	push rbp                             
0xd87a:	mov rbp, rsp                         
0xd87d:	sub rsp, 0x30                        
0xd881:	mov qword ptr [rbp - 0x28], rdi      
0xd885:	mov rax, qword ptr [rip + 0x235fc]   #    if (|t|ty_is_xterm(tty_type))
0xd88c:	mov rdi, rax                         
0xd88f:	call 0xd9a3                          
0xd894:	test eax, eax                        #    if |(|tty_is_xterm(tty_type))
0xd896:	je 0xd9a0                            
0xd89c:	mov rax, qword ptr [rbp - 0x28]      #	size_t len = |s|trlen(string);
0xd8a0:	mov rdi, rax                         
0xd8a3:	call 0x4960                          
0xd8a8:	mov qword ptr [rbp - 0x18], rax      
0xd8ac:	mov rax, qword ptr [rbp - 0x18]      #	char *temp = |x|malloc(128 + len + 1);
0xd8b0:	add rax, 0x81                        
0xd8b6:	mov rdi, rax                         
0xd8b9:	call 0x24650                         
0xd8be:	mov qword ptr [rbp - 0x10], rax      
0xd8c2:	mov rax, qword ptr [rbp - 0x28]      #	char *printable_string = |x|strdup(string);
0xd8c6:	mov rdi, rax                         
0xd8c9:	call 0x24780                         
0xd8ce:	mov qword ptr [rbp - 8], rax         
0xd8d2:	mov rdx, qword ptr [rbp - 0x18]      #	|t|oprintable(printable_string, len);
0xd8d6:	mov rax, qword ptr [rbp - 8]         
0xd8da:	mov rsi, rdx                         
0xd8dd:	mov rdi, rax                         
0xd8e0:	call 0x1e5b1                         
0xd8e5:	mov rdx, qword ptr [rbp - 8]         #	|s|printf(temp, "%c]2;%s - %s%c", 0x1b, PRODUCT, printable_string, 0x07);
0xd8e9:	mov rax, qword ptr [rbp - 0x10]      
0xd8ed:	mov r9d, 7                           
0xd8f3:	mov r8, rdx                          
0xd8f6:	lea rdx, [rip + 0x1a635]             
0xd8fd:	mov rcx, rdx                         
0xd900:	mov edx, 0x1b                        
0xd905:	lea rsi, [rip + 0x1a63c]             
0xd90c:	mov rdi, rax                         
0xd90f:	mov eax, 0                           
0xd914:	call 0x4dd0                          
0xd919:	mov rax, qword ptr [rbp - 0x18]      #	if (128 + |(|int)len > 2 * tty_columns)
0xd91d:	lea edx, [rax + 0x7f]                #	if (128 + (int)len |>| 2 * tty_columns)
0xd920:	mov eax, dword ptr [rip + 0x230ba]   #	if (128 + (int)len > 2 |*| tty_columns)
0xd926:	add eax, eax                         
0xd928:	cmp edx, eax                         #	if |(|128 + (int)len > 2 * tty_columns)
0xd92a:	jl 0xd959                            
0xd92c:	mov eax, dword ptr [rip + 0x230ae]   #	    temp[2 |*| tty_columns    ] = 0x07;
0xd932:	add eax, eax                         
0xd934:	movsxd rdx, eax                      
0xd937:	mov rax, qword ptr [rbp - 0x10]      #	    temp|[|2 * tty_columns    ] = 0x07;
0xd93b:	add rax, rdx                         
0xd93e:	mov byte ptr [rax], 7                #	    temp[2 * tty_columns    ] |=| 0x07;
0xd941:	mov eax, dword ptr [rip + 0x23099]   #	    temp[2 |*| tty_columns + 1] = '\0';
0xd947:	add eax, eax                         
0xd949:	cdqe                                 
0xd94b:	lea rdx, [rax + 1]                   #	    temp|[|2 * tty_columns + 1] = '\0';
0xd94f:	mov rax, qword ptr [rbp - 0x10]      
0xd953:	add rax, rdx                         
0xd956:	mov byte ptr [rax], 0                #	    temp[2 * tty_columns + 1] |=| '\0';
0xd959:	mov rax, qword ptr [rbp - 0x10]      #	|x|write(TTY_OUTPUT, temp, strlen(temp));
0xd95d:	mov rdi, rax                         
0xd960:	call 0x4960                          
0xd965:	mov rdx, rax                         
0xd968:	mov rax, qword ptr [rbp - 0x10]      
0xd96c:	mov rsi, rax                         
0xd96f:	mov edi, 1                           
0xd974:	call 0x1ef4c                         
0xd979:	mov rax, qword ptr [rbp - 8]         #	|x|free(printable_string);
0xd97d:	mov rdi, rax                         
0xd980:	call 0x1eeae                         
0xd985:	mov rax, qword ptr [rbp - 0x10]      #	|x|free(temp);
0xd989:	mov rdi, rax                         
0xd98c:	call 0x1eeae                         
0xd991:	mov rax, qword ptr [rip + 0x22ee8]   #	|f|flush(stdout);
0xd998:	mov rdi, rax                         
0xd99b:	call 0x4c10                          
0xd9a0:	nop                                  #|}|
0xd9a1:	leave                                
0xd9a2:	ret                                  
0xd9a3:	endbr64                              #|{|
0xd9a7:	push rbp                             
0xd9a8:	mov rbp, rsp                         
0xd9ab:	sub rsp, 0x10                        
0xd9af:	mov qword ptr [rbp - 8], rdi         
0xd9b3:	mov rax, qword ptr [rbp - 8]         #    if (|s|trncmp(term, "xterm", 5)     == 0 ||
0xd9b7:	mov edx, 5                           
0xd9bc:	lea rcx, [rip + 0x1a4a6]             
0xd9c3:	mov rsi, rcx                         
0xd9c6:	mov rdi, rax                         
0xd9c9:	call 0x4850                          
0xd9ce:	test eax, eax                        #    if |(|strncmp(term, "xterm", 5)     == 0 ||
0xd9d0:	je 0xda62                            
0xd9d6:	mov rax, qword ptr [rbp - 8]         #	|s|trncmp(term, "rxvt", 4)      == 0 ||
0xd9da:	mov edx, 4                           
0xd9df:	lea rcx, [rip + 0x1a571]             
0xd9e6:	mov rsi, rcx                         
0xd9e9:	mov rdi, rax                         
0xd9ec:	call 0x4850                          
0xd9f1:	test eax, eax                        #    if (strncmp(term, "xterm", 5)     == 0 ||||
0xd9f3:	je 0xda62                            
0xd9f5:	mov rax, qword ptr [rbp - 8]         #	|s|trncmp(term, "iris-ansi", 9) == 0 ||
0xd9f9:	mov edx, 9                           
0xd9fe:	lea rcx, [rip + 0x1a42c]             
0xda05:	mov rsi, rcx                         
0xda08:	mov rdi, rax                         
0xda0b:	call 0x4850                          
0xda10:	test eax, eax                        #	strncmp(term, "rxvt", 4)      == 0 ||||
0xda12:	je 0xda62                            
0xda14:	mov rax, qword ptr [rbp - 8]         #	|s|trcmp(term, "aixterm")       == 0 ||
0xda18:	lea rdx, [rip + 0x1a53d]             
0xda1f:	mov rsi, rdx                         
0xda22:	mov rdi, rax                         
0xda25:	call 0x4af0                          
0xda2a:	test eax, eax                        #	strncmp(term, "iris-ansi", 9) == 0 ||||
0xda2c:	je 0xda62                            
0xda2e:	mov rax, qword ptr [rbp - 8]         #	|s|trcmp(term, "Eterm")         == 0 ||
0xda32:	lea rdx, [rip + 0x1a52b]             
0xda39:	mov rsi, rdx                         
0xda3c:	mov rdi, rax                         
0xda3f:	call 0x4af0                          
0xda44:	test eax, eax                        #	strcmp(term, "aixterm")       == 0 ||||
0xda46:	je 0xda62                            
0xda48:	mov rax, qword ptr [rbp - 8]         #	|s|trcmp(term, "dtterm")        == 0)
0xda4c:	lea rdx, [rip + 0x1a517]             
0xda53:	mov rsi, rdx                         
0xda56:	mov rdi, rax                         
0xda59:	call 0x4af0                          
0xda5e:	test eax, eax                        #	strcmp(term, "Eterm")         == 0 ||||
0xda60:	jne 0xda69                           
0xda62:	mov eax, 1                           #	return |1|;
0xda67:	jmp 0xda6e                           
0xda69:	mov eax, 0                           #    return |0|;
0xda6e:	leave                                #|}|
0xda6f:	ret                                  

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/window.c
####################################################################################################

0xda70:	endbr64                              #|{|
0xda74:	push rbp                             
0xda75:	mov rbp, rsp                         
0xda78:	sub rsp, 0x10                        
0xda7c:	mov edi, 0x18                        #    window_t *window  = (window_t *)|x|malloc(sizeof(window_t));
0xda81:	call 0x24650                         
0xda86:	mov qword ptr [rbp - 8], rax         
0xda8a:	mov rax, qword ptr [rbp - 8]         #    |w|indow_resize(window, 0, 0, 0, 0);
0xda8e:	mov r8d, 0                           
0xda94:	mov ecx, 0                           
0xda99:	mov edx, 0                           
0xda9e:	mov esi, 0                           
0xdaa3:	mov rdi, rax                         
0xdaa6:	call 0xdad7                          
0xdaab:	mov rax, qword ptr [rbp - 8]         #    return |w|indow;
0xdaaf:	leave                                #|}|
0xdab0:	ret                                  
0xdab1:	endbr64                              #|{|
0xdab5:	push rbp                             
0xdab6:	mov rbp, rsp                         
0xdab9:	sub rsp, 0x10                        
0xdabd:	mov qword ptr [rbp - 8], rdi         
0xdac1:	cmp qword ptr [rbp - 8], 0           #    if |(|window)
0xdac6:	je 0xdad4                            
0xdac8:	mov rax, qword ptr [rbp - 8]         #	|x|free(window);
0xdacc:	mov rdi, rax                         
0xdacf:	call 0x1eeae                         
0xdad4:	nop                                  #|}|
0xdad5:	leave                                
0xdad6:	ret                                  
0xdad7:	endbr64                              #|{|
0xdadb:	push rbp                             
0xdadc:	mov rbp, rsp                         
0xdadf:	mov qword ptr [rbp - 8], rdi         
0xdae3:	mov dword ptr [rbp - 0xc], esi       
0xdae6:	mov dword ptr [rbp - 0x10], edx      
0xdae9:	mov dword ptr [rbp - 0x14], ecx      
0xdaec:	mov dword ptr [rbp - 0x18], r8d      
0xdaf0:	mov rax, qword ptr [rbp - 8]         #    window->x       |=| x;
0xdaf4:	mov edx, dword ptr [rbp - 0xc]       
0xdaf7:	mov dword ptr [rax], edx             
0xdaf9:	mov rax, qword ptr [rbp - 8]         #    window->y       |=| y;
0xdafd:	mov edx, dword ptr [rbp - 0x10]      
0xdb00:	mov dword ptr [rax + 4], edx         
0xdb03:	mov rax, qword ptr [rbp - 8]         #    window->lines   |=| lines;
0xdb07:	mov edx, dword ptr [rbp - 0x14]      
0xdb0a:	mov dword ptr [rax + 8], edx         
0xdb0d:	mov rax, qword ptr [rbp - 8]         #    window->columns |=| columns;
0xdb11:	mov edx, dword ptr [rbp - 0x18]      
0xdb14:	mov dword ptr [rax + 0xc], edx       
0xdb17:	nop                                  #|}|
0xdb18:	pop rbp                              
0xdb19:	ret                                  
0xdb1a:	endbr64                              #|{|
0xdb1e:	push rbp                             
0xdb1f:	mov rbp, rsp                         
0xdb22:	sub rsp, 0x30                        
0xdb26:	mov qword ptr [rbp - 0x18], rdi      
0xdb2a:	mov qword ptr [rbp - 0x20], rsi      
0xdb2e:	mov dword ptr [rbp - 0x24], edx      
0xdb31:	mov rax, qword ptr [rbp - 0x18]      #    int |x| = window->cursor_x;
0xdb35:	mov eax, dword ptr [rax + 0x10]      
0xdb38:	mov dword ptr [rbp - 4], eax         
0xdb3b:	mov rax, qword ptr [rbp - 0x18]      #    window->cursor_x |+|= length;
0xdb3f:	mov edx, dword ptr [rax + 0x10]      
0xdb42:	mov eax, dword ptr [rbp - 0x24]      
0xdb45:	add edx, eax                         
0xdb47:	mov rax, qword ptr [rbp - 0x18]      
0xdb4b:	mov dword ptr [rax + 0x10], edx      
0xdb4e:	mov rax, qword ptr [rbp - 0x18]      #    if (x >= window|-|>columns)
0xdb52:	mov eax, dword ptr [rax + 0xc]       
0xdb55:	cmp dword ptr [rbp - 4], eax         #    if |(|x >= window->columns)
0xdb58:	jl 0xdb61                            
0xdb5a:	mov eax, 0                           #	return |0|;
0xdb5f:	jmp 0xdbba                           
0xdb61:	mov rax, qword ptr [rbp - 0x18]      #    if (window|-|>cursor_y >= window->lines)
0xdb65:	mov edx, dword ptr [rax + 0x14]      
0xdb68:	mov rax, qword ptr [rbp - 0x18]      #    if (window->cursor_y >= window|-|>lines)
0xdb6c:	mov eax, dword ptr [rax + 8]         
0xdb6f:	cmp edx, eax                         #    if |(|window->cursor_y >= window->lines)
0xdb71:	jl 0xdb7a                            
0xdb73:	mov eax, 0                           #	return |0|;
0xdb78:	jmp 0xdbba                           
0xdb7a:	mov edx, dword ptr [rbp - 4]         #    if (x |+| length <= window->columns)
0xdb7d:	mov eax, dword ptr [rbp - 0x24]      
0xdb80:	add edx, eax                         
0xdb82:	mov rax, qword ptr [rbp - 0x18]      #    if (x + length <= window|-|>columns)
0xdb86:	mov eax, dword ptr [rax + 0xc]       
0xdb89:	cmp edx, eax                         #    if |(|x + length <= window->columns)
0xdb8b:	jg 0xdba0                            
0xdb8d:	mov edx, dword ptr [rbp - 0x24]      #	return |t|ty_puts(str, length);
0xdb90:	mov rax, qword ptr [rbp - 0x20]      
0xdb94:	mov esi, edx                         
0xdb96:	mov rdi, rax                         
0xdb99:	call 0xb706                          
0xdb9e:	jmp 0xdbba                           
0xdba0:	mov rax, qword ptr [rbp - 0x18]      #    return tty_puts(str, window|-|>columns - x);
0xdba4:	mov eax, dword ptr [rax + 0xc]       
0xdba7:	sub eax, dword ptr [rbp - 4]         #    return |t|ty_puts(str, window->columns - x);
0xdbaa:	mov edx, eax                         
0xdbac:	mov rax, qword ptr [rbp - 0x20]      
0xdbb0:	mov esi, edx                         
0xdbb2:	mov rdi, rax                         
0xdbb5:	call 0xb706                          
0xdbba:	leave                                #|}|
0xdbbb:	ret                                  
0xdbbc:	endbr64                              #|{|
0xdbc0:	push rbp                             
0xdbc1:	mov rbp, rsp                         
0xdbc4:	sub rsp, 0x10                        
0xdbc8:	mov qword ptr [rbp - 8], rdi         
0xdbcc:	mov dword ptr [rbp - 0xc], esi       
0xdbcf:	mov rax, qword ptr [rbp - 8]         #    if (++window|-|>cursor_x > window->columns)
0xdbd3:	mov eax, dword ptr [rax + 0x10]      
0xdbd6:	lea edx, [rax + 1]                   #    if (|+|+window->cursor_x > window->columns)
0xdbd9:	mov rax, qword ptr [rbp - 8]         #    if |(|++window->cursor_x > window->columns)
0xdbdd:	mov dword ptr [rax + 0x10], edx      
0xdbe0:	mov rax, qword ptr [rbp - 8]         #    if (++window|-|>cursor_x > window->columns)
0xdbe4:	mov edx, dword ptr [rax + 0x10]      
0xdbe7:	mov rax, qword ptr [rbp - 8]         #    if (++window->cursor_x > window|-|>columns)
0xdbeb:	mov eax, dword ptr [rax + 0xc]       
0xdbee:	cmp edx, eax                         #    if |(|++window->cursor_x > window->columns)
0xdbf0:	jle 0xdbf9                           
0xdbf2:	mov eax, 0                           #	return |0|;
0xdbf7:	jmp 0xdc1c                           
0xdbf9:	mov rax, qword ptr [rbp - 8]         #    if (window|-|>cursor_y >= window->lines)
0xdbfd:	mov edx, dword ptr [rax + 0x14]      
0xdc00:	mov rax, qword ptr [rbp - 8]         #    if (window->cursor_y >= window|-|>lines)
0xdc04:	mov eax, dword ptr [rax + 8]         
0xdc07:	cmp edx, eax                         #    if |(|window->cursor_y >= window->lines)
0xdc09:	jl 0xdc12                            
0xdc0b:	mov eax, 0                           #	return |0|;
0xdc10:	jmp 0xdc1c                           
0xdc12:	mov eax, dword ptr [rbp - 0xc]       #    return |t|ty_putc(c);
0xdc15:	mov edi, eax                         
0xdc17:	call 0xb7ea                          
0xdc1c:	leave                                #|}|
0xdc1d:	ret                                  
0xdc1e:	endbr64                              #|{|
0xdc22:	push rbp                             
0xdc23:	mov rbp, rsp                         
0xdc26:	sub rsp, 0x10                        
0xdc2a:	mov qword ptr [rbp - 8], rdi         
0xdc2e:	mov dword ptr [rbp - 0xc], esi       
0xdc31:	mov dword ptr [rbp - 0x10], edx      
0xdc34:	mov rax, qword ptr [rbp - 8]         #    window->cursor_x |=| x;
0xdc38:	mov edx, dword ptr [rbp - 0x10]      
0xdc3b:	mov dword ptr [rax + 0x10], edx      
0xdc3e:	mov rax, qword ptr [rbp - 8]         #    window->cursor_y |=| y;
0xdc42:	mov edx, dword ptr [rbp - 0xc]       
0xdc45:	mov dword ptr [rax + 0x14], edx      
0xdc48:	mov rax, qword ptr [rbp - 8]         #    tty_goto(y + window->y, x + window|-|>x);
0xdc4c:	mov edx, dword ptr [rax]             
0xdc4e:	mov eax, dword ptr [rbp - 0x10]      #    |t|ty_goto(y + window->y, x + window->x);
0xdc51:	add edx, eax                         
0xdc53:	mov rax, qword ptr [rbp - 8]         #    tty_goto(y + window|-|>y, x + window->x);
0xdc57:	mov ecx, dword ptr [rax + 4]         
0xdc5a:	mov eax, dword ptr [rbp - 0xc]       #    |t|ty_goto(y + window->y, x + window->x);
0xdc5d:	add eax, ecx                         
0xdc5f:	mov esi, edx                         
0xdc61:	mov edi, eax                         
0xdc63:	call 0xbe95                          
0xdc68:	nop                                  #|}|
0xdc69:	leave                                
0xdc6a:	ret                                  
0xdc6b:	endbr64                              #|{|
0xdc6f:	push rbp                             
0xdc70:	mov rbp, rsp                         
0xdc73:	mov qword ptr [rbp - 8], rdi         
0xdc77:	mov rax, qword ptr [rbp - 8]         #    return window|-|>x;
0xdc7b:	mov eax, dword ptr [rax]             
0xdc7d:	pop rbp                              #|}|
0xdc7e:	ret                                  
0xdc7f:	endbr64                              #|{|
0xdc83:	push rbp                             
0xdc84:	mov rbp, rsp                         
0xdc87:	mov qword ptr [rbp - 8], rdi         
0xdc8b:	mov rax, qword ptr [rbp - 8]         #    return window|-|>y;
0xdc8f:	mov eax, dword ptr [rax + 4]         
0xdc92:	pop rbp                              #|}|
0xdc93:	ret                                  
0xdc94:	endbr64                              #|{|
0xdc98:	push rbp                             
0xdc99:	mov rbp, rsp                         
0xdc9c:	mov qword ptr [rbp - 8], rdi         
0xdca0:	mov rax, qword ptr [rbp - 8]         #    return window|-|>lines;
0xdca4:	mov eax, dword ptr [rax + 8]         
0xdca7:	pop rbp                              #|}|
0xdca8:	ret                                  
0xdca9:	endbr64                              #|{|
0xdcad:	push rbp                             
0xdcae:	mov rbp, rsp                         
0xdcb1:	mov qword ptr [rbp - 8], rdi         
0xdcb5:	mov rax, qword ptr [rbp - 8]         #    return window|-|>columns;
0xdcb9:	mov eax, dword ptr [rax + 0xc]       
0xdcbc:	pop rbp                              #|}|
0xdcbd:	ret                                  

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/inputline.c
####################################################################################################

0xdcbe:	endbr64                              #|{|
0xdcc2:	push rbp                             
0xdcc3:	mov rbp, rsp                         
0xdcc6:	mov eax, edi                         
0xdcc8:	mov byte ptr [rbp - 4], al           
0xdccb:	cmp byte ptr [rbp - 4], 0x60         #    if |(|(c >= 'a' && c <= 'z') ||
0xdccf:	jle 0xdcd7                           
0xdcd1:	cmp byte ptr [rbp - 4], 0x7a         #    if ((c >= 'a' |&|& c <= 'z') ||
0xdcd5:	jle 0xdcfb                           
0xdcd7:	cmp byte ptr [rbp - 4], 0x40         #    if ((c >= 'a' && c <= 'z') ||||
0xdcdb:	jle 0xdce3                           
0xdcdd:	cmp byte ptr [rbp - 4], 0x5a         #	(c >= 'A' |&|& c <= 'Z') ||
0xdce1:	jle 0xdcfb                           
0xdce3:	cmp byte ptr [rbp - 4], 0x2f         #	(c >= 'A' && c <= 'Z') ||||
0xdce7:	jle 0xdcef                           
0xdce9:	cmp byte ptr [rbp - 4], 0x39         #	(c >= '0' |&|& c <= '9') ||
0xdced:	jle 0xdcfb                           
0xdcef:	cmp byte ptr [rbp - 4], 0x24         #	(c >= '0' && c <= '9') ||||
0xdcf3:	je 0xdcfb                            
0xdcf5:	cmp byte ptr [rbp - 4], 0x25         #	(c == '$')             ||||
0xdcf9:	jne 0xdd02                           
0xdcfb:	mov eax, 0                           #	return |0|;
0xdd00:	jmp 0xdd07                           
0xdd02:	mov eax, 1                           #	return |1|;
0xdd07:	pop rbp                              #|}|
0xdd08:	ret                                  
0xdd09:	endbr64                              #|{|
0xdd0d:	push rbp                             
0xdd0e:	mov rbp, rsp                         
0xdd11:	push rbx                             
0xdd12:	sub rsp, 0x38                        
0xdd16:	mov dword ptr [rbp - 0x34], edi      
0xdd19:	mov rax, qword ptr [rip + 0x236f0]   #    if (il|-|>mark == il->point)
0xdd20:	mov rdx, qword ptr [rax + 0x20]      
0xdd24:	mov rax, qword ptr [rip + 0x236e5]   #    if (il->mark == il|-|>point)
0xdd2b:	mov rax, qword ptr [rax + 0x18]      
0xdd2f:	cmp rdx, rax                         #    if |(|il->mark == il->point)
0xdd32:	je 0xdf02                            
0xdd38:	mov rax, qword ptr [rip + 0x236d1]   #    if (il|-|>mark > il->point)
0xdd3f:	mov rdx, qword ptr [rax + 0x20]      
0xdd43:	mov rax, qword ptr [rip + 0x236c6]   #    if (il->mark > il|-|>point)
0xdd4a:	mov rax, qword ptr [rax + 0x18]      
0xdd4e:	cmp rdx, rax                         #    if |(|il->mark > il->point)
0xdd51:	jbe 0xdd73                           
0xdd53:	mov rax, qword ptr [rip + 0x236b6]   #	region_start = il|-|>point;
0xdd5a:	mov rax, qword ptr [rax + 0x18]      #	region_start |=| il->point;
0xdd5e:	mov qword ptr [rbp - 0x28], rax      
0xdd62:	mov rax, qword ptr [rip + 0x236a7]   #	region_end   = il|-|>mark;
0xdd69:	mov rax, qword ptr [rax + 0x20]      #	region_end   |=| il->mark;
0xdd6d:	mov qword ptr [rbp - 0x20], rax      
0xdd71:	jmp 0xdd91                           
0xdd73:	mov rax, qword ptr [rip + 0x23696]   #	region_start = il|-|>mark;
0xdd7a:	mov rax, qword ptr [rax + 0x20]      #	region_start |=| il->mark;
0xdd7e:	mov qword ptr [rbp - 0x28], rax      
0xdd82:	mov rax, qword ptr [rip + 0x23687]   #	region_end   = il|-|>point;
0xdd89:	mov rax, qword ptr [rax + 0x18]      #	region_end   |=| il->point;
0xdd8d:	mov qword ptr [rbp - 0x20], rax      
0xdd91:	mov rax, qword ptr [rbp - 0x20]      #    region_size |=| region_end - region_start;
0xdd95:	sub rax, qword ptr [rbp - 0x28]      
0xdd99:	mov qword ptr [rbp - 0x18], rax      
0xdd9d:	mov eax, dword ptr [rbp - 0x34]      #    if (flags |&| IL_STORE)
0xdda0:	and eax, 1                           
0xdda3:	test eax, eax                        #    if |(|flags & IL_STORE)
0xdda5:	je 0xde2b                            
0xddab:	mov rax, qword ptr [rip + 0x2365e]   #	if (il|-|>kill_ring)
0xddb2:	mov rax, qword ptr [rax + 0x60]      
0xddb6:	test rax, rax                        #	if |(|il->kill_ring)
0xddb9:	je 0xddce                            
0xddbb:	mov rax, qword ptr [rip + 0x2364e]   #	    xfree(il|-|>kill_ring);
0xddc2:	mov rax, qword ptr [rax + 0x60]      
0xddc6:	mov rdi, rax                         #	    |x|free(il->kill_ring);
0xddc9:	call 0x1eeae                         
0xddce:	mov rax, qword ptr [rbp - 0x18]      #	il->kill_ring = |x|malloc(region_size + 1);
0xddd2:	add rax, 1                           
0xddd6:	mov rbx, qword ptr [rip + 0x23633]   #	il|-|>kill_ring = xmalloc(region_size + 1);
0xdddd:	mov rdi, rax                         #	il->kill_ring = |x|malloc(region_size + 1);
0xdde0:	call 0x24650                         
0xdde5:	mov qword ptr [rbx + 0x60], rax      #	il->kill_ring |=| xmalloc(region_size + 1);
0xdde9:	mov rax, qword ptr [rip + 0x23620]   #	memcpy(il->kill_ring, il|-|>buffer + region_start, region_size);
0xddf0:	mov rdx, qword ptr [rax + 0x58]      
0xddf4:	mov rax, qword ptr [rbp - 0x28]      #	memcpy(il->kill_ring, il->buffer |+| region_start, region_size);
0xddf8:	lea rcx, [rdx + rax]                 
0xddfc:	mov rax, qword ptr [rip + 0x2360d]   #	memcpy(il|-|>kill_ring, il->buffer + region_start, region_size);
0xde03:	mov rax, qword ptr [rax + 0x60]      
0xde07:	mov rdx, qword ptr [rbp - 0x18]      #	|m|emcpy(il->kill_ring, il->buffer + region_start, region_size);
0xde0b:	mov rsi, rcx                         
0xde0e:	mov rdi, rax                         
0xde11:	call 0x4b70                          
0xde16:	mov rax, qword ptr [rip + 0x235f3]   #	il|-|>kill_ring[region_size] = '\0';
0xde1d:	mov rdx, qword ptr [rax + 0x60]      
0xde21:	mov rax, qword ptr [rbp - 0x18]      #	il->kill_ring|[|region_size] = '\0';
0xde25:	add rax, rdx                         
0xde28:	mov byte ptr [rax], 0                #	il->kill_ring[region_size] |=| '\0';
0xde2b:	mov eax, dword ptr [rbp - 0x34]      #    if (flags |&| IL_KILL)
0xde2e:	and eax, 2                           
0xde31:	test eax, eax                        #    if |(|flags & IL_KILL)
0xde33:	je 0xdf03                            
0xde39:	mov rax, qword ptr [rip + 0x235d0]   #	il->dynamic_length |-|= region_size;
0xde40:	mov rdx, qword ptr [rax + 0x48]      
0xde44:	mov rax, qword ptr [rip + 0x235c5]   
0xde4b:	sub rdx, qword ptr [rbp - 0x18]      
0xde4f:	mov qword ptr [rax + 0x48], rdx      
0xde53:	mov rax, qword ptr [rip + 0x235b6]   #	il->length         |-|= region_size;
0xde5a:	mov rdx, qword ptr [rax + 0x38]      
0xde5e:	mov rax, qword ptr [rip + 0x235ab]   
0xde65:	sub rdx, qword ptr [rbp - 0x18]      
0xde69:	mov qword ptr [rax + 0x38], rdx      
0xde6d:	mov rax, qword ptr [rip + 0x2359c]   #	il|-|>point           = region_start;
0xde74:	mov rdx, qword ptr [rbp - 0x28]      #	il->point           |=| region_start;
0xde78:	mov qword ptr [rax + 0x18], rdx      
0xde7c:	mov rax, qword ptr [rip + 0x2358d]   #	il|-|>mark            = region_start;
0xde83:	mov rdx, qword ptr [rbp - 0x28]      #	il->mark            |=| region_start;
0xde87:	mov qword ptr [rax + 0x20], rdx      
0xde8b:	mov rax, qword ptr [rip + 0x2357e]   #	strcpy(il->buffer + region_start, il|-|>buffer + region_end);
0xde92:	mov rdx, qword ptr [rax + 0x58]      
0xde96:	mov rax, qword ptr [rbp - 0x20]      #	strcpy(il->buffer + region_start, il->buffer |+| region_end);
0xde9a:	add rdx, rax                         
0xde9d:	mov rax, qword ptr [rip + 0x2356c]   #	strcpy(il|-|>buffer + region_start, il->buffer + region_end);
0xdea4:	mov rcx, qword ptr [rax + 0x58]      
0xdea8:	mov rax, qword ptr [rbp - 0x28]      #	|s|trcpy(il->buffer + region_start, il->buffer + region_end);
0xdeac:	add rax, rcx                         
0xdeaf:	mov rsi, rdx                         
0xdeb2:	mov rdi, rax                         
0xdeb5:	call 0x4870                          
0xdeba:	mov rax, qword ptr [rip + 0x2354f]   #	|I|L_RESIZE(il->length + 1);
0xdec1:	mov rdx, qword ptr [rax + 0x38]      
0xdec5:	mov rax, qword ptr [rip + 0x23544]   
0xdecc:	add rdx, 1                           
0xded0:	mov qword ptr [rax + 0x50], rdx      
0xded4:	mov rax, qword ptr [rip + 0x23535]   
0xdedb:	mov rdx, qword ptr [rax + 0x50]      
0xdedf:	mov rax, qword ptr [rip + 0x2352a]   
0xdee6:	mov rax, qword ptr [rax + 0x58]      
0xdeea:	mov rbx, qword ptr [rip + 0x2351f]   
0xdef1:	mov rsi, rdx                         
0xdef4:	mov rdi, rax                         
0xdef7:	call 0x24670                         
0xdefc:	mov qword ptr [rbx + 0x58], rax      
0xdf00:	jmp 0xdf03                           
0xdf02:	nop                                  #	|r|eturn;
0xdf03:	mov rbx, qword ptr [rbp - 8]         #|}|
0xdf07:	leave                                
0xdf08:	ret                                  
0xdf09:	endbr64                              #|{|
0xdf0d:	push rbp                             
0xdf0e:	mov rbp, rsp                         
0xdf11:	sub rsp, 0x10                        
0xdf15:	mov qword ptr [rbp - 8], rdi         
0xdf19:	cmp qword ptr [rbp - 8], 0           #    if |(|some_il == NULL)
0xdf1e:	je 0xdf68                            
0xdf20:	mov rax, qword ptr [rbp - 8]         #    if (some_il|-|>buffer)
0xdf24:	mov rax, qword ptr [rax + 0x58]      
0xdf28:	test rax, rax                        #    if |(|some_il->buffer)
0xdf2b:	je 0xdf3d                            
0xdf2d:	mov rax, qword ptr [rbp - 8]         #	xfree(some_il|-|>buffer);
0xdf31:	mov rax, qword ptr [rax + 0x58]      
0xdf35:	mov rdi, rax                         #	|x|free(some_il->buffer);
0xdf38:	call 0x1eeae                         
0xdf3d:	mov rax, qword ptr [rbp - 8]         #    if (some_il|-|>kill_ring)
0xdf41:	mov rax, qword ptr [rax + 0x60]      
0xdf45:	test rax, rax                        #    if |(|some_il->kill_ring)
0xdf48:	je 0xdf5a                            
0xdf4a:	mov rax, qword ptr [rbp - 8]         #	xfree(some_il|-|>kill_ring);
0xdf4e:	mov rax, qword ptr [rax + 0x60]      
0xdf52:	mov rdi, rax                         #	|x|free(some_il->kill_ring);
0xdf55:	call 0x1eeae                         
0xdf5a:	mov rax, qword ptr [rbp - 8]         #    |x|free(some_il);
0xdf5e:	mov rdi, rax                         
0xdf61:	call 0x1eeae                         
0xdf66:	jmp 0xdf69                           
0xdf68:	nop                                  #	|r|eturn;
0xdf69:	leave                                #|}|
0xdf6a:	ret                                  
0xdf6b:	endbr64                              #|{|
0xdf6f:	push rbp                             
0xdf70:	mov rbp, rsp                         
0xdf73:	mov rax, qword ptr [rip + 0x23496]   #    return |m|ax((il->columns - il->static_length) / 4,  1);
0xdf7a:	mov rdx, qword ptr [rax + 0x28]      
0xdf7e:	mov rax, qword ptr [rip + 0x2348b]   
0xdf85:	mov rcx, qword ptr [rax + 0x40]      
0xdf89:	mov rax, rdx                         
0xdf8c:	sub rax, rcx                         
0xdf8f:	cmp rax, 3                           
0xdf93:	jbe 0xdfb7                           
0xdf95:	mov rax, qword ptr [rip + 0x23474]   #    return |m|ax((il->columns - il->static_length) / 4,  1);
0xdf9c:	mov rdx, qword ptr [rax + 0x28]      
0xdfa0:	mov rax, qword ptr [rip + 0x23469]   
0xdfa7:	mov rcx, qword ptr [rax + 0x40]      
0xdfab:	mov rax, rdx                         
0xdfae:	sub rax, rcx                         
0xdfb1:	shr rax, 2                           
0xdfb5:	jmp 0xdfbc                           
0xdfb7:	mov eax, 1                           #    return |m|ax((il->columns - il->static_length) / 4,  1);
0xdfbc:	pop rbp                              #|}|
0xdfbd:	ret                                  
0xdfbe:	endbr64                              #|{|
0xdfc2:	push rbp                             
0xdfc3:	mov rbp, rsp                         
0xdfc6:	push rbx                             
0xdfc7:	sub rsp, 0x18                        
0xdfcb:	mov rax, qword ptr fs:[0x28]         #|{|
0xdfd4:	mov qword ptr [rbp - 0x18], rax      
0xdfd8:	xor eax, eax                         
0xdfda:	mov edi, 0x70                        #    il = (input_line_t *)|x|malloc(sizeof(input_line_t));
0xdfdf:	call 0x24650                         
0xdfe4:	mov qword ptr [rip + 0x23425], rax   #    il |=| (input_line_t *)xmalloc(sizeof(input_line_t));
0xdfeb:	mov rax, qword ptr [rip + 0x2341e]   #    il|-|>echo = 1;
0xdff2:	mov dword ptr [rax + 8], 1           #    il->echo |=| 1;
0xdff9:	mov rax, qword ptr [rip + 0x23410]   #    il|-|>error = 0;
0xe000:	mov dword ptr [rax + 0xc], 0         #    il->error |=| 0;
0xe007:	mov rax, qword ptr [rip + 0x23402]   #    il|-|>buffer = NULL;
0xe00e:	mov qword ptr [rax + 0x58], 0        #    il->buffer |=| NULL;
0xe016:	mov rax, qword ptr [rip + 0x233f3]   #    il|-|>kill_ring = NULL;
0xe01d:	mov qword ptr [rax + 0x60], 0        #    il->kill_ring |=| NULL;
0xe025:	mov rax, qword ptr [rip + 0x233e4]   #    il|-|>columns = 0;
0xe02c:	mov qword ptr [rax + 0x28], 0        #    il->columns |=| 0;
0xe034:	mov rax, qword ptr [rip + 0x233d5]   #    il|-|>line = 0;
0xe03b:	mov qword ptr [rax + 0x30], 0        #    il->line |=| 0;
0xe043:	mov eax, 0                           #    |i|l_reset_line();
0xe048:	call 0xece2                          
0xe04d:	mov rbx, qword ptr [rip + 0x233bc]   #    il|-|>window = window_init();
0xe054:	mov eax, 0                           #    il->window = |w|indow_init();
0xe059:	call 0xda70                          
0xe05e:	mov qword ptr [rbx], rax             #    il->window |=| window_init();
0xe061:	lea rax, [rip + 0x19f90]             #    |u|se_section("[GITFM-Setup]");
0xe068:	mov rdi, rax                         
0xe06b:	call 0x1dbc4                         
0xe070:	lea rax, [rbp - 0x20]                #    |c|onfiguration_getvarinfo("HistoryFile", &data, 1, DO_SEEK);
0xe074:	mov ecx, 1                           
0xe079:	mov edx, 1                           
0xe07e:	mov rsi, rax                         
0xe081:	lea rax, [rip + 0x19f7e]             
0xe088:	mov rdi, rax                         
0xe08b:	call 0x1cf27                         
0xe090:	mov rax, qword ptr [rbp - 0x20]      #    il->history_file = tilde_expand(data |?| data : "~/.githistory");
0xe094:	test rax, rax                        #    il->history_file = |t|ilde_expand(data ? data : "~/.githistory");
0xe097:	je 0xe09f                            
0xe099:	mov rax, qword ptr [rbp - 0x20]      #    il->history_file = |t|ilde_expand(data ? data : "~/.githistory");
0xe09d:	jmp 0xe0a6                           
0xe09f:	lea rax, [rip + 0x19f6c]             #    il->history_file = |t|ilde_expand(data ? data : "~/.githistory");
0xe0a6:	mov rbx, qword ptr [rip + 0x23363]   #    il|-|>history_file = tilde_expand(data ? data : "~/.githistory");
0xe0ad:	mov rdi, rax                         #    il->history_file = |t|ilde_expand(data ? data : "~/.githistory");
0xe0b0:	mov eax, 0                           
0xe0b5:	call 0x1fb51                         
0xe0ba:	mov qword ptr [rbx + 0x68], rax      #    il->history_file |=| tilde_expand(data ? data : "~/.githistory");
0xe0be:	mov eax, dword ptr [rip + 0x20f54]   #    use_section(AnsiColors |?| color_section : monochrome_section);
0xe0c4:	test eax, eax                        #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0xe0c6:	je 0xe0d1                            
0xe0c8:	lea rax, [rip + 0x20f61]             #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0xe0cf:	jmp 0xe0d8                           
0xe0d1:	lea rax, [rip + 0x20f68]             #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0xe0d8:	mov rdi, rax                         #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0xe0db:	call 0x1dbc4                         
0xe0e0:	mov edx, 6                           #    |g|et_colorset_var(InputLineColors, InputLineFields, INPUTLINE_FIELDS);
0xe0e5:	lea rax, [rip + 0x22154]             
0xe0ec:	mov rsi, rax                         
0xe0ef:	lea rax, [rip + 0x2217a]             
0xe0f6:	mov rdi, rax                         
0xe0f9:	call 0x1df8c                         
0xe0fe:	mov eax, 0                           #    |u|sing_history();
0xe103:	call 0x2012d                         
0xe108:	mov rax, qword ptr [rip + 0x23301]   #    read_history(il|-|>history_file);
0xe10f:	mov rax, qword ptr [rax + 0x68]      #    |r|ead_history(il->history_file);
0xe113:	mov rdi, rax                         
0xe116:	mov eax, 0                           
0xe11b:	call 0x20979                         
0xe120:	nop                                  #    while |(|next_history());
0xe121:	mov eax, 0                           #    while (|n|ext_history());
0xe126:	call 0x21109                         
0xe12b:	test rax, rax                        
0xe12e:	jne 0xe121                           
0xe130:	mov edi, 0x200                       #    |s|tifle_history(MAX_INPUT_HISTORY);
0xe135:	mov eax, 0                           
0xe13a:	call 0x20759                         
0xe13f:	nop                                  #|}|
0xe140:	mov rax, qword ptr [rbp - 0x18]      
0xe144:	sub rax, qword ptr fs:[0x28]         
0xe14d:	je 0xe154                            
0xe14f:	call 0x4980                          
0xe154:	mov rbx, qword ptr [rbp - 8]         
0xe158:	leave                                
0xe159:	ret                                  
0xe15a:	endbr64                              #|{|
0xe15e:	push rbp                             
0xe15f:	mov rbp, rsp                         
0xe162:	mov rax, qword ptr [rip + 0x232a7]   #    write_history(il|-|>history_file);
0xe169:	mov rax, qword ptr [rax + 0x68]      #    |w|rite_history(il->history_file);
0xe16d:	mov rdi, rax                         
0xe170:	mov eax, 0                           
0xe175:	call 0x21050                         
0xe17a:	mov rax, qword ptr [rip + 0x2328f]   #    window_end(il|-|>window);
0xe181:	mov rax, qword ptr [rax]             #    |w|indow_end(il->window);
0xe184:	mov rdi, rax                         
0xe187:	call 0xdab1                          
0xe18c:	mov rax, qword ptr [rip + 0x2327d]   #    |i|l_free(il);
0xe193:	mov rdi, rax                         
0xe196:	call 0xdf09                          
0xe19b:	mov qword ptr [rip + 0x2326a], 0     #    il |=| NULL;
0xe1a6:	nop                                  #|}|
0xe1a7:	pop rbp                              
0xe1a8:	ret                                  
0xe1a9:	endbr64                              #|{|
0xe1ad:	push rbp                             
0xe1ae:	mov rbp, rsp                         
0xe1b1:	sub rsp, 0x10                        
0xe1b5:	mov dword ptr [rbp - 4], edi         
0xe1b8:	mov dword ptr [rbp - 8], esi         
0xe1bb:	mov rax, qword ptr [rip + 0x2324e]   #    il|-|>columns = _columns;
0xe1c2:	mov edx, dword ptr [rbp - 4]         #    il->columns |=| _columns;
0xe1c5:	movsxd rdx, edx                      
0xe1c8:	mov qword ptr [rax + 0x28], rdx      
0xe1cc:	mov rax, qword ptr [rip + 0x2323d]   #    il|-|>line = _line;
0xe1d3:	mov edx, dword ptr [rbp - 8]         #    il->line |=| _line;
0xe1d6:	movsxd rdx, edx                      
0xe1d9:	mov qword ptr [rax + 0x30], rdx      
0xe1dd:	mov rax, qword ptr [rip + 0x2322c]   #    window_resize(il|-|>window, 0, _line, 1, _columns);
0xe1e4:	mov rax, qword ptr [rax]             #    |w|indow_resize(il->window, 0, _line, 1, _columns);
0xe1e7:	mov ecx, dword ptr [rbp - 4]         
0xe1ea:	mov edx, dword ptr [rbp - 8]         
0xe1ed:	mov r8d, ecx                         
0xe1f0:	mov ecx, 1                           
0xe1f5:	mov esi, 0                           
0xe1fa:	mov rdi, rax                         
0xe1fd:	call 0xdad7                          
0xe202:	nop                                  #|}|
0xe203:	leave                                
0xe204:	ret                                  
0xe205:	endbr64                              #|{|
0xe209:	push rbp                             
0xe20a:	mov rbp, rsp                         
0xe20d:	push rbx                             
0xe20e:	sub rsp, 0x18                        
0xe212:	mov edi, 0x70                        #    input_line_t *saved_il = (input_line_t *)|x|malloc(sizeof(input_line_t));
0xe217:	call 0x24650                         
0xe21c:	mov qword ptr [rbp - 0x18], rax      
0xe220:	mov rdx, qword ptr [rip + 0x231e9]   #    *saved_il = |*|il;
0xe227:	mov rax, qword ptr [rbp - 0x18]      #    *saved_il |=| *il;
0xe22b:	mov rcx, qword ptr [rdx]             
0xe22e:	mov rbx, qword ptr [rdx + 8]         
0xe232:	mov qword ptr [rax], rcx             
0xe235:	mov qword ptr [rax + 8], rbx         
0xe239:	mov rcx, qword ptr [rdx + 0x10]      
0xe23d:	mov rbx, qword ptr [rdx + 0x18]      
0xe241:	mov qword ptr [rax + 0x10], rcx      
0xe245:	mov qword ptr [rax + 0x18], rbx      
0xe249:	mov rcx, qword ptr [rdx + 0x20]      
0xe24d:	mov rbx, qword ptr [rdx + 0x28]      
0xe251:	mov qword ptr [rax + 0x20], rcx      
0xe255:	mov qword ptr [rax + 0x28], rbx      
0xe259:	mov rcx, qword ptr [rdx + 0x30]      
0xe25d:	mov rbx, qword ptr [rdx + 0x38]      
0xe261:	mov qword ptr [rax + 0x30], rcx      
0xe265:	mov qword ptr [rax + 0x38], rbx      
0xe269:	mov rcx, qword ptr [rdx + 0x40]      
0xe26d:	mov rbx, qword ptr [rdx + 0x48]      
0xe271:	mov qword ptr [rax + 0x40], rcx      
0xe275:	mov qword ptr [rax + 0x48], rbx      
0xe279:	mov rcx, qword ptr [rdx + 0x50]      
0xe27d:	mov rbx, qword ptr [rdx + 0x58]      
0xe281:	mov qword ptr [rax + 0x50], rcx      
0xe285:	mov qword ptr [rax + 0x58], rbx      
0xe289:	mov rcx, qword ptr [rdx + 0x60]      
0xe28d:	mov rbx, qword ptr [rdx + 0x68]      
0xe291:	mov qword ptr [rax + 0x60], rcx      
0xe295:	mov qword ptr [rax + 0x68], rbx      
0xe299:	mov rax, qword ptr [rbp - 0x18]      #    if (saved_il|-|>buffer)
0xe29d:	mov rax, qword ptr [rax + 0x58]      
0xe2a1:	test rax, rax                        #    if |(|saved_il->buffer)
0xe2a4:	je 0xe2e7                            
0xe2a6:	mov rax, qword ptr [rbp - 0x18]      #	il->buffer = |x|malloc(saved_il->size);
0xe2aa:	mov rax, qword ptr [rax + 0x50]      
0xe2ae:	mov rbx, qword ptr [rip + 0x2315b]   #	il|-|>buffer = xmalloc(saved_il->size);
0xe2b5:	mov rdi, rax                         #	il->buffer = |x|malloc(saved_il->size);
0xe2b8:	call 0x24650                         
0xe2bd:	mov qword ptr [rbx + 0x58], rax      #	il->buffer |=| xmalloc(saved_il->size);
0xe2c1:	mov rax, qword ptr [rbp - 0x18]      #	|m|emcpy(il->buffer, saved_il->buffer, saved_il->size);
0xe2c5:	mov rdx, qword ptr [rax + 0x50]      
0xe2c9:	mov rax, qword ptr [rbp - 0x18]      #	memcpy(il->buffer, saved_il|-|>buffer, saved_il->size);
0xe2cd:	mov rcx, qword ptr [rax + 0x58]      
0xe2d1:	mov rax, qword ptr [rip + 0x23138]   #	memcpy(il|-|>buffer, saved_il->buffer, saved_il->size);
0xe2d8:	mov rax, qword ptr [rax + 0x58]      
0xe2dc:	mov rsi, rcx                         #	|m|emcpy(il->buffer, saved_il->buffer, saved_il->size);
0xe2df:	mov rdi, rax                         
0xe2e2:	call 0x4b70                          
0xe2e7:	mov rax, qword ptr [rbp - 0x18]      #    if (saved_il|-|>kill_ring)
0xe2eb:	mov rax, qword ptr [rax + 0x60]      
0xe2ef:	test rax, rax                        #    if |(|saved_il->kill_ring)
0xe2f2:	je 0xe30f                            
0xe2f4:	mov rax, qword ptr [rbp - 0x18]      #	il->kill_ring = xstrdup(saved_il|-|>kill_ring);
0xe2f8:	mov rax, qword ptr [rax + 0x60]      
0xe2fc:	mov rbx, qword ptr [rip + 0x2310d]   #	il|-|>kill_ring = xstrdup(saved_il->kill_ring);
0xe303:	mov rdi, rax                         #	il->kill_ring = |x|strdup(saved_il->kill_ring);
0xe306:	call 0x24780                         
0xe30b:	mov qword ptr [rbx + 0x60], rax      #	il->kill_ring |=| xstrdup(saved_il->kill_ring);
0xe30f:	mov rax, qword ptr [rbp - 0x18]      #    return |s|aved_il;
0xe313:	mov rbx, qword ptr [rbp - 8]         #|}|
0xe317:	leave                                
0xe318:	ret                                  
0xe319:	endbr64                              #|{|
0xe31d:	push rbp                             
0xe31e:	mov rbp, rsp                         
0xe321:	sub rsp, 0x20                        
0xe325:	mov qword ptr [rbp - 0x18], rdi      
0xe329:	mov rax, qword ptr [rip + 0x230e0]   #    size_t columns = il|-|>columns;
0xe330:	mov rax, qword ptr [rax + 0x28]      #    size_t |c|olumns = il->columns;
0xe334:	mov qword ptr [rbp - 0x10], rax      
0xe338:	mov rax, qword ptr [rip + 0x230d1]   #    size_t line = il|-|>line;
0xe33f:	mov rax, qword ptr [rax + 0x30]      #    size_t |l|ine = il->line;
0xe343:	mov qword ptr [rbp - 8], rax         
0xe347:	cmp qword ptr [rbp - 0x18], 0        #    if |(|saved_il == NULL)
0xe34c:	je 0xe37d                            
0xe34e:	mov rax, qword ptr [rip + 0x230bb]   #    |i|l_free(il);
0xe355:	mov rdi, rax                         
0xe358:	call 0xdf09                          
0xe35d:	mov rax, qword ptr [rbp - 0x18]      #    il |=| saved_il;
0xe361:	mov qword ptr [rip + 0x230a8], rax   
0xe368:	mov rax, qword ptr [rbp - 8]         #    |i|l_resize(columns, line);
0xe36c:	mov edx, eax                         
0xe36e:	mov rax, qword ptr [rbp - 0x10]      
0xe372:	mov esi, edx                         
0xe374:	mov edi, eax                         
0xe376:	call 0xe1a9                          
0xe37b:	jmp 0xe37e                           
0xe37d:	nop                                  #	|r|eturn;
0xe37e:	leave                                #|}|
0xe37f:	ret                                  
0xe380:	endbr64                              #|{|
0xe384:	push rbp                             
0xe385:	mov rbp, rsp                         
0xe388:	mov rax, qword ptr [rip + 0x23081]   #    return il|-|>point - il->static_length;
0xe38f:	mov rdx, qword ptr [rax + 0x18]      
0xe393:	mov rax, qword ptr [rip + 0x23076]   #    return il->point - il|-|>static_length;
0xe39a:	mov rcx, qword ptr [rax + 0x40]      
0xe39e:	mov rax, rdx                         #    return il->point |-| il->static_length;
0xe3a1:	sub rax, rcx                         
0xe3a4:	pop rbp                              #|}|
0xe3a5:	ret                                  
0xe3a6:	endbr64                              #|{|
0xe3aa:	push rbp                             
0xe3ab:	mov rbp, rsp                         
0xe3ae:	mov dword ptr [rbp - 0x14], edi      
0xe3b1:	mov rax, qword ptr [rip + 0x23058]   #    int old_echo_flag = il|-|>echo;
0xe3b8:	mov eax, dword ptr [rax + 8]         #    int |o|ld_echo_flag = il->echo;
0xe3bb:	mov dword ptr [rbp - 4], eax         
0xe3be:	mov rax, qword ptr [rip + 0x2304b]   #    il|-|>echo = echo;
0xe3c5:	mov edx, dword ptr [rbp - 0x14]      #    il->echo |=| echo;
0xe3c8:	mov dword ptr [rax + 8], edx         
0xe3cb:	mov eax, dword ptr [rbp - 4]         #    return |o|ld_echo_flag;
0xe3ce:	pop rbp                              #|}|
0xe3cf:	ret                                  
0xe3d0:	endbr64                              #|{|
0xe3d4:	push rbp                             
0xe3d5:	mov rbp, rsp                         
0xe3d8:	mov rax, qword ptr [rip + 0x23031]   #    return il|-|>dynamic_length == 0;
0xe3df:	mov rax, qword ptr [rax + 0x48]      
0xe3e3:	test rax, rax                        #    return il->dynamic_length |=|= 0;
0xe3e6:	sete al                              
0xe3e9:	movzx eax, al                        
0xe3ec:	pop rbp                              #|}|
0xe3ed:	ret                                  
0xe3ee:	endbr64                              #|{|
0xe3f2:	push rbp                             
0xe3f3:	mov rbp, rsp                         
0xe3f6:	mov rdx, qword ptr [rip + 0x23013]   #    il->mark = il|-|>point;
0xe3fd:	mov rax, qword ptr [rip + 0x2300c]   #    il|-|>mark = il->point;
0xe404:	mov rdx, qword ptr [rdx + 0x18]      #    il->mark = il|-|>point;
0xe408:	mov qword ptr [rax + 0x20], rdx      #    il->mark |=| il->point;
0xe40c:	nop                                  #|}|
0xe40d:	pop rbp                              
0xe40e:	ret                                  
0xe40f:	endbr64                              #|{|
0xe413:	push rbp                             
0xe414:	mov rbp, rsp                         
0xe417:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xe41c:	mov eax, 0                           
0xe421:	call 0xdd09                          
0xe426:	mov rax, qword ptr [rip + 0x22fe3]   #    il|-|>last_operation = IL_KILL_REGION;
0xe42d:	mov dword ptr [rax + 0x10], 0x18     #    il->last_operation |=| IL_KILL_REGION;
0xe434:	nop                                  #|}|
0xe435:	pop rbp                              
0xe436:	ret                                  
0xe437:	endbr64                              #|{|
0xe43b:	push rbp                             
0xe43c:	mov rbp, rsp                         
0xe43f:	mov edi, 1                           #    |i|l_region_command(IL_STORE);
0xe444:	mov eax, 0                           
0xe449:	call 0xdd09                          
0xe44e:	mov rax, qword ptr [rip + 0x22fbb]   #    il|-|>last_operation = IL_KILL_RING_SAVE;
0xe455:	mov dword ptr [rax + 0x10], 0x19     #    il->last_operation |=| IL_KILL_RING_SAVE;
0xe45c:	nop                                  #|}|
0xe45d:	pop rbp                              
0xe45e:	ret                                  
0xe45f:	endbr64                              #|{|
0xe463:	push rbp                             
0xe464:	mov rbp, rsp                         
0xe467:	mov rax, qword ptr [rip + 0x22fa2]   #    if (il|-|>kill_ring)
0xe46e:	mov rax, qword ptr [rax + 0x60]      
0xe472:	test rax, rax                        #    if |(|il->kill_ring)
0xe475:	je 0xe498                            
0xe477:	mov rax, qword ptr [rip + 0x22f92]   #	il_insert_text(il|-|>kill_ring);
0xe47e:	mov rax, qword ptr [rax + 0x60]      #	|i|l_insert_text(il->kill_ring);
0xe482:	mov rdi, rax                         
0xe485:	call 0xf433                          
0xe48a:	mov rax, qword ptr [rip + 0x22f7f]   #	il|-|>last_operation = IL_YANK;
0xe491:	mov dword ptr [rax + 0x10], 0x1a     #	il->last_operation |=| IL_YANK;
0xe498:	nop                                  #|}|
0xe499:	pop rbp                              
0xe49a:	ret                                  
0xe49b:	endbr64                              #|{|
0xe49f:	push rbp                             
0xe4a0:	mov rbp, rsp                         
0xe4a3:	mov rax, qword ptr [rip + 0x22f66]   #    int point = il|-|>point;
0xe4aa:	mov rax, qword ptr [rax + 0x18]      
0xe4ae:	mov dword ptr [rbp - 4], eax         #    int |p|oint = il->point;
0xe4b1:	mov rdx, qword ptr [rip + 0x22f58]   #    il->point = il|-|>mark;
0xe4b8:	mov rax, qword ptr [rip + 0x22f51]   #    il|-|>point = il->mark;
0xe4bf:	mov rdx, qword ptr [rdx + 0x20]      #    il->point = il|-|>mark;
0xe4c3:	mov qword ptr [rax + 0x18], rdx      #    il->point |=| il->mark;
0xe4c7:	mov rax, qword ptr [rip + 0x22f42]   #    il|-|>mark  = point;
0xe4ce:	mov edx, dword ptr [rbp - 4]         #    il->mark  |=| point;
0xe4d1:	movsxd rdx, edx                      
0xe4d4:	mov qword ptr [rax + 0x20], rdx      
0xe4d8:	nop                                  #|}|
0xe4d9:	pop rbp                              
0xe4da:	ret                                  
0xe4db:	endbr64                              #|{|
0xe4df:	push rbp                             
0xe4e0:	mov rbp, rsp                         
0xe4e3:	mov rax, qword ptr [rip + 0x22f26]   #    if (il|-|>point > il->static_length)
0xe4ea:	mov rdx, qword ptr [rax + 0x18]      
0xe4ee:	mov rax, qword ptr [rip + 0x22f1b]   #    if (il->point > il|-|>static_length)
0xe4f5:	mov rax, qword ptr [rax + 0x40]      
0xe4f9:	cmp rdx, rax                         #    if |(|il->point > il->static_length)
0xe4fc:	jbe 0xe51f                           
0xe4fe:	mov rax, qword ptr [rip + 0x22f0b]   #	il|-|>point--;
0xe505:	mov rdx, qword ptr [rax + 0x18]      
0xe509:	sub rdx, 1                           #	il->point|-|-;
0xe50d:	mov qword ptr [rax + 0x18], rdx      
0xe511:	mov rax, qword ptr [rip + 0x22ef8]   #	il|-|>last_operation = IL_BACKWARD_CHAR;
0xe518:	mov dword ptr [rax + 0x10], 1        #	il->last_operation |=| IL_BACKWARD_CHAR;
0xe51f:	nop                                  #|}|
0xe520:	pop rbp                              
0xe521:	ret                                  
0xe522:	endbr64                              #|{|
0xe526:	push rbp                             
0xe527:	mov rbp, rsp                         
0xe52a:	mov rax, qword ptr [rip + 0x22edf]   #    if (il|-|>point < il->length)
0xe531:	mov rdx, qword ptr [rax + 0x18]      
0xe535:	mov rax, qword ptr [rip + 0x22ed4]   #    if (il->point < il|-|>length)
0xe53c:	mov rax, qword ptr [rax + 0x38]      
0xe540:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xe543:	jae 0xe566                           
0xe545:	mov rax, qword ptr [rip + 0x22ec4]   #	il|-|>point++;
0xe54c:	mov rdx, qword ptr [rax + 0x18]      
0xe550:	add rdx, 1                           #	il->point|+|+;
0xe554:	mov qword ptr [rax + 0x18], rdx      
0xe558:	mov rax, qword ptr [rip + 0x22eb1]   #	il|-|>last_operation = IL_FORWARD_CHAR;
0xe55f:	mov dword ptr [rax + 0x10], 2        #	il->last_operation |=| IL_FORWARD_CHAR;
0xe566:	nop                                  #|}|
0xe567:	pop rbp                              
0xe568:	ret                                  
0xe569:	endbr64                              #|{|
0xe56d:	push rbp                             
0xe56e:	mov rbp, rsp                         
0xe571:	mov rax, qword ptr [rip + 0x22e98]   #    if (il|-|>point > il->static_length)
0xe578:	mov rdx, qword ptr [rax + 0x18]      
0xe57c:	mov rax, qword ptr [rip + 0x22e8d]   #    if (il->point > il|-|>static_length)
0xe583:	mov rax, qword ptr [rax + 0x40]      
0xe587:	cmp rdx, rax                         #    if |(|il->point > il->static_length)
0xe58a:	jbe 0xe652                           
0xe590:	jmp 0xe59c                           #	while |(|il->point > il->static_length &&
0xe592:	mov eax, 0                           #	    |i|l_backward_char();
0xe597:	call 0xe4db                          
0xe59c:	mov rax, qword ptr [rip + 0x22e6d]   #	while (il|-|>point > il->static_length &&
0xe5a3:	mov rdx, qword ptr [rax + 0x18]      
0xe5a7:	mov rax, qword ptr [rip + 0x22e62]   #	while (il->point > il|-|>static_length &&
0xe5ae:	mov rax, qword ptr [rax + 0x40]      
0xe5b2:	cmp rdx, rax                         #	while (il->point > il->static_length |&|&
0xe5b5:	jbe 0xe5f6                           
0xe5b7:	mov rax, qword ptr [rip + 0x22e52]   #	       il_separator(il|-|>buffer[il->point - 1]))
0xe5be:	mov rdx, qword ptr [rax + 0x58]      
0xe5c2:	mov rax, qword ptr [rip + 0x22e47]   #	       il_separator(il->buffer[il|-|>point - 1]))
0xe5c9:	mov rax, qword ptr [rax + 0x18]      
0xe5cd:	sub rax, 1                           #	       il_separator(il->buffer|[|il->point - 1]))
0xe5d1:	add rax, rdx                         
0xe5d4:	movzx eax, byte ptr [rax]            
0xe5d7:	movsx eax, al                        #	       |i|l_separator(il->buffer[il->point - 1]))
0xe5da:	mov edi, eax                         
0xe5dc:	mov eax, 0                           
0xe5e1:	call 0xdcbe                          
0xe5e6:	test eax, eax                        #	while (il->point > il->static_length |&|&
0xe5e8:	jne 0xe592                           
0xe5ea:	jmp 0xe5f6                           #	while |(|il->point > il->static_length &&
0xe5ec:	mov eax, 0                           #	    |i|l_backward_char();
0xe5f1:	call 0xe4db                          
0xe5f6:	mov rax, qword ptr [rip + 0x22e13]   #	while (il|-|>point > il->static_length &&
0xe5fd:	mov rdx, qword ptr [rax + 0x18]      
0xe601:	mov rax, qword ptr [rip + 0x22e08]   #	while (il->point > il|-|>static_length &&
0xe608:	mov rax, qword ptr [rax + 0x40]      
0xe60c:	cmp rdx, rax                         #	while (il->point > il->static_length |&|&
0xe60f:	jbe 0xe644                           
0xe611:	mov rax, qword ptr [rip + 0x22df8]   #	       !il_separator(il|-|>buffer[il->point - 1]))
0xe618:	mov rdx, qword ptr [rax + 0x58]      
0xe61c:	mov rax, qword ptr [rip + 0x22ded]   #	       !il_separator(il->buffer[il|-|>point - 1]))
0xe623:	mov rax, qword ptr [rax + 0x18]      
0xe627:	sub rax, 1                           #	       !il_separator(il->buffer|[|il->point - 1]))
0xe62b:	add rax, rdx                         
0xe62e:	movzx eax, byte ptr [rax]            
0xe631:	movsx eax, al                        #	       !|i|l_separator(il->buffer[il->point - 1]))
0xe634:	mov edi, eax                         
0xe636:	mov eax, 0                           
0xe63b:	call 0xdcbe                          
0xe640:	test eax, eax                        #	while (il->point > il->static_length |&|&
0xe642:	je 0xe5ec                            
0xe644:	mov rax, qword ptr [rip + 0x22dc5]   #	il|-|>last_operation = IL_BACKWARD_WORD;
0xe64b:	mov dword ptr [rax + 0x10], 3        #	il->last_operation |=| IL_BACKWARD_WORD;
0xe652:	nop                                  #|}|
0xe653:	pop rbp                              
0xe654:	ret                                  
0xe655:	endbr64                              #|{|
0xe659:	push rbp                             
0xe65a:	mov rbp, rsp                         
0xe65d:	mov rax, qword ptr [rip + 0x22dac]   #    if (il|-|>point < il->length)
0xe664:	mov rdx, qword ptr [rax + 0x18]      
0xe668:	mov rax, qword ptr [rip + 0x22da1]   #    if (il->point < il|-|>length)
0xe66f:	mov rax, qword ptr [rax + 0x38]      
0xe673:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xe676:	jae 0xe736                           
0xe67c:	jmp 0xe688                           #	while |(|il->point < il->length &&
0xe67e:	mov eax, 0                           #	    |i|l_forward_char();
0xe683:	call 0xe522                          
0xe688:	mov rax, qword ptr [rip + 0x22d81]   #	while (il|-|>point < il->length &&
0xe68f:	mov rdx, qword ptr [rax + 0x18]      
0xe693:	mov rax, qword ptr [rip + 0x22d76]   #	while (il->point < il|-|>length &&
0xe69a:	mov rax, qword ptr [rax + 0x38]      
0xe69e:	cmp rdx, rax                         #	while (il->point < il->length |&|&
0xe6a1:	jae 0xe6de                           
0xe6a3:	mov rax, qword ptr [rip + 0x22d66]   #	       il_separator(il|-|>buffer[il->point]))
0xe6aa:	mov rdx, qword ptr [rax + 0x58]      
0xe6ae:	mov rax, qword ptr [rip + 0x22d5b]   #	       il_separator(il->buffer[il|-|>point]))
0xe6b5:	mov rax, qword ptr [rax + 0x18]      
0xe6b9:	add rax, rdx                         #	       il_separator(il->buffer|[|il->point]))
0xe6bc:	movzx eax, byte ptr [rax]            
0xe6bf:	movsx eax, al                        #	       |i|l_separator(il->buffer[il->point]))
0xe6c2:	mov edi, eax                         
0xe6c4:	mov eax, 0                           
0xe6c9:	call 0xdcbe                          
0xe6ce:	test eax, eax                        #	while (il->point < il->length |&|&
0xe6d0:	jne 0xe67e                           
0xe6d2:	jmp 0xe6de                           #	while |(|il->point < il->length &&
0xe6d4:	mov eax, 0                           #	    |i|l_forward_char();
0xe6d9:	call 0xe522                          
0xe6de:	mov rax, qword ptr [rip + 0x22d2b]   #	while (il|-|>point < il->length &&
0xe6e5:	mov rdx, qword ptr [rax + 0x18]      
0xe6e9:	mov rax, qword ptr [rip + 0x22d20]   #	while (il->point < il|-|>length &&
0xe6f0:	mov rax, qword ptr [rax + 0x38]      
0xe6f4:	cmp rdx, rax                         #	while (il->point < il->length |&|&
0xe6f7:	jae 0xe728                           
0xe6f9:	mov rax, qword ptr [rip + 0x22d10]   #	       !il_separator(il|-|>buffer[il->point]))
0xe700:	mov rdx, qword ptr [rax + 0x58]      
0xe704:	mov rax, qword ptr [rip + 0x22d05]   #	       !il_separator(il->buffer[il|-|>point]))
0xe70b:	mov rax, qword ptr [rax + 0x18]      
0xe70f:	add rax, rdx                         #	       !il_separator(il->buffer|[|il->point]))
0xe712:	movzx eax, byte ptr [rax]            
0xe715:	movsx eax, al                        #	       !|i|l_separator(il->buffer[il->point]))
0xe718:	mov edi, eax                         
0xe71a:	mov eax, 0                           
0xe71f:	call 0xdcbe                          
0xe724:	test eax, eax                        #	while (il->point < il->length |&|&
0xe726:	je 0xe6d4                            
0xe728:	mov rax, qword ptr [rip + 0x22ce1]   #	il|-|>last_operation = IL_FORWARD_WORD;
0xe72f:	mov dword ptr [rax + 0x10], 4        #	il->last_operation |=| IL_FORWARD_WORD;
0xe736:	nop                                  #|}|
0xe737:	pop rbp                              
0xe738:	ret                                  
0xe739:	endbr64                              #|{|
0xe73d:	push rbp                             
0xe73e:	mov rbp, rsp                         
0xe741:	mov rdx, qword ptr [rip + 0x22cc8]   #    il->point = il|-|>static_length;
0xe748:	mov rax, qword ptr [rip + 0x22cc1]   #    il|-|>point = il->static_length;
0xe74f:	mov rdx, qword ptr [rdx + 0x40]      #    il->point = il|-|>static_length;
0xe753:	mov qword ptr [rax + 0x18], rdx      #    il->point |=| il->static_length;
0xe757:	mov rax, qword ptr [rip + 0x22cb2]   #    il|-|>last_operation = IL_BEGINNING_OF_LINE;
0xe75e:	mov dword ptr [rax + 0x10], 5        #    il->last_operation |=| IL_BEGINNING_OF_LINE;
0xe765:	nop                                  #|}|
0xe766:	pop rbp                              
0xe767:	ret                                  
0xe768:	endbr64                              #|{|
0xe76c:	push rbp                             
0xe76d:	mov rbp, rsp                         
0xe770:	mov rdx, qword ptr [rip + 0x22c99]   #    il->point = il|-|>length;
0xe777:	mov rax, qword ptr [rip + 0x22c92]   #    il|-|>point = il->length;
0xe77e:	mov rdx, qword ptr [rdx + 0x38]      #    il->point = il|-|>length;
0xe782:	mov qword ptr [rax + 0x18], rdx      #    il->point |=| il->length;
0xe786:	mov rax, qword ptr [rip + 0x22c83]   #    il|-|>last_operation = IL_END_OF_LINE;
0xe78d:	mov dword ptr [rax + 0x10], 6        #    il->last_operation |=| IL_END_OF_LINE;
0xe794:	nop                                  #|}|
0xe795:	pop rbp                              
0xe796:	ret                                  
0xe797:	endbr64                              #|{|
0xe79b:	push rbp                             
0xe79c:	mov rbp, rsp                         
0xe79f:	push rbx                             
0xe7a0:	sub rsp, 0x18                        
0xe7a4:	mov dword ptr [rbp - 0x14], edi      
0xe7a7:	call 0x4ec0                          #    if (!|i|sprint(c))
0xe7ac:	mov rdx, qword ptr [rax]             
0xe7af:	mov eax, dword ptr [rbp - 0x14]      
0xe7b2:	cdqe                                 
0xe7b4:	add rax, rax                         
0xe7b7:	add rax, rdx                         
0xe7ba:	movzx eax, word ptr [rax]            
0xe7bd:	movzx eax, ax                        
0xe7c0:	and eax, 0x4000                      
0xe7c5:	test eax, eax                        #    if |(|!isprint(c))
0xe7c7:	je 0xe8fa                            
0xe7cd:	mov rax, qword ptr [rip + 0x22c3c]   #    if (il|-|>length + 1 >= il->size)
0xe7d4:	mov rax, qword ptr [rax + 0x38]      
0xe7d8:	lea rdx, [rax + 1]                   #    if (il->length |+| 1 >= il->size)
0xe7dc:	mov rax, qword ptr [rip + 0x22c2d]   #    if (il->length + 1 >= il|-|>size)
0xe7e3:	mov rax, qword ptr [rax + 0x50]      
0xe7e7:	cmp rdx, rax                         #    if |(|il->length + 1 >= il->size)
0xe7ea:	jb 0xe832                            
0xe7ec:	mov rax, qword ptr [rip + 0x22c1d]   #	|I|L_RESIZE(il->length + 1 + 32);
0xe7f3:	mov rdx, qword ptr [rax + 0x38]      
0xe7f7:	mov rax, qword ptr [rip + 0x22c12]   
0xe7fe:	add rdx, 0x21                        
0xe802:	mov qword ptr [rax + 0x50], rdx      
0xe806:	mov rax, qword ptr [rip + 0x22c03]   
0xe80d:	mov rdx, qword ptr [rax + 0x50]      
0xe811:	mov rax, qword ptr [rip + 0x22bf8]   
0xe818:	mov rax, qword ptr [rax + 0x58]      
0xe81c:	mov rbx, qword ptr [rip + 0x22bed]   
0xe823:	mov rsi, rdx                         
0xe826:	mov rdi, rax                         
0xe829:	call 0x24670                         
0xe82e:	mov qword ptr [rbx + 0x58], rax      
0xe832:	mov rax, qword ptr [rip + 0x22bd7]   #	    il|-|>length - il->point + 1);
0xe839:	mov rdx, qword ptr [rax + 0x38]      
0xe83d:	mov rax, qword ptr [rip + 0x22bcc]   #	    il->length - il|-|>point + 1);
0xe844:	mov rcx, qword ptr [rax + 0x18]      
0xe848:	mov rax, rdx                         #	    il->length |-| il->point + 1);
0xe84b:	sub rax, rcx                         
0xe84e:	lea rdx, [rax + 1]                   #    |m|emmove(il->buffer + il->point + 1,
0xe852:	mov rax, qword ptr [rip + 0x22bb7]   #	    il|-|>buffer + il->point,
0xe859:	mov rcx, qword ptr [rax + 0x58]      
0xe85d:	mov rax, qword ptr [rip + 0x22bac]   #	    il->buffer + il|-|>point,
0xe864:	mov rax, qword ptr [rax + 0x18]      
0xe868:	add rcx, rax                         #	    il->buffer |+| il->point,
0xe86b:	mov rax, qword ptr [rip + 0x22b9e]   #    memmove(il|-|>buffer + il->point + 1,
0xe872:	mov rsi, qword ptr [rax + 0x58]      
0xe876:	mov rax, qword ptr [rip + 0x22b93]   #    memmove(il->buffer + il|-|>point + 1,
0xe87d:	mov rax, qword ptr [rax + 0x18]      
0xe881:	add rax, 1                           #    memmove(il->buffer + il->point |+| 1,
0xe885:	add rax, rsi                         
0xe888:	mov rsi, rcx                         #    |m|emmove(il->buffer + il->point + 1,
0xe88b:	mov rdi, rax                         
0xe88e:	call 0x4cf0                          
0xe893:	mov rax, qword ptr [rip + 0x22b76]   #    il|-|>buffer[il->point] = c;
0xe89a:	mov rdx, qword ptr [rax + 0x58]      
0xe89e:	mov rax, qword ptr [rip + 0x22b6b]   #    il->buffer[il|-|>point] = c;
0xe8a5:	mov rax, qword ptr [rax + 0x18]      
0xe8a9:	add rax, rdx                         #    il->buffer|[|il->point] = c;
0xe8ac:	mov edx, dword ptr [rbp - 0x14]      #    il->buffer[il->point] |=| c;
0xe8af:	mov byte ptr [rax], dl               
0xe8b1:	mov rax, qword ptr [rip + 0x22b58]   #    il|-|>point++;
0xe8b8:	mov rdx, qword ptr [rax + 0x18]      
0xe8bc:	add rdx, 1                           #    il->point|+|+;
0xe8c0:	mov qword ptr [rax + 0x18], rdx      
0xe8c4:	mov rax, qword ptr [rip + 0x22b45]   #    il|-|>length++;
0xe8cb:	mov rdx, qword ptr [rax + 0x38]      
0xe8cf:	add rdx, 1                           #    il->length|+|+;
0xe8d3:	mov qword ptr [rax + 0x38], rdx      
0xe8d7:	mov rax, qword ptr [rip + 0x22b32]   #    il|-|>dynamic_length++;
0xe8de:	mov rdx, qword ptr [rax + 0x48]      
0xe8e2:	add rdx, 1                           #    il->dynamic_length|+|+;
0xe8e6:	mov qword ptr [rax + 0x48], rdx      
0xe8ea:	mov rax, qword ptr [rip + 0x22b1f]   #    il|-|>last_operation = IL_INSERT_CHAR;
0xe8f1:	mov dword ptr [rax + 0x10], 7        #    il->last_operation |=| IL_INSERT_CHAR;
0xe8f8:	jmp 0xe8fb                           
0xe8fa:	nop                                  #	|r|eturn;
0xe8fb:	mov rbx, qword ptr [rbp - 8]         #|}|
0xe8ff:	leave                                
0xe900:	ret                                  
0xe901:	endbr64                              #|{|
0xe905:	push rbp                             
0xe906:	mov rbp, rsp                         
0xe909:	push rbx                             
0xe90a:	sub rsp, 8                           
0xe90e:	mov rax, qword ptr [rip + 0x22afb]   #    if (il|-|>point < il->length)
0xe915:	mov rdx, qword ptr [rax + 0x18]      
0xe919:	mov rax, qword ptr [rip + 0x22af0]   #    if (il->point < il|-|>length)
0xe920:	mov rax, qword ptr [rax + 0x38]      
0xe924:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xe927:	jae 0xea1b                           
0xe92d:	mov rax, qword ptr [rip + 0x22adc]   #	       il|-|>length - il->point + 1);
0xe934:	mov rdx, qword ptr [rax + 0x38]      
0xe938:	mov rax, qword ptr [rip + 0x22ad1]   #	       il->length - il|-|>point + 1);
0xe93f:	mov rcx, qword ptr [rax + 0x18]      
0xe943:	mov rax, rdx                         #	       il->length |-| il->point + 1);
0xe946:	sub rax, rcx                         
0xe949:	lea rdx, [rax + 1]                   #	|m|emcpy(il->buffer + il->point,
0xe94d:	mov rax, qword ptr [rip + 0x22abc]   #	       il|-|>buffer + il->point + 1,
0xe954:	mov rcx, qword ptr [rax + 0x58]      
0xe958:	mov rax, qword ptr [rip + 0x22ab1]   #	       il->buffer + il|-|>point + 1,
0xe95f:	mov rax, qword ptr [rax + 0x18]      
0xe963:	add rax, 1                           #	       il->buffer + il->point |+| 1,
0xe967:	add rcx, rax                         
0xe96a:	mov rax, qword ptr [rip + 0x22a9f]   #	memcpy(il|-|>buffer + il->point,
0xe971:	mov rsi, qword ptr [rax + 0x58]      
0xe975:	mov rax, qword ptr [rip + 0x22a94]   #	memcpy(il->buffer + il|-|>point,
0xe97c:	mov rax, qword ptr [rax + 0x18]      
0xe980:	add rax, rsi                         #	memcpy(il->buffer |+| il->point,
0xe983:	mov rsi, rcx                         #	|m|emcpy(il->buffer + il->point,
0xe986:	mov rdi, rax                         
0xe989:	call 0x4b70                          
0xe98e:	mov rax, qword ptr [rip + 0x22a7b]   #	il|-|>length--;
0xe995:	mov rdx, qword ptr [rax + 0x38]      
0xe999:	sub rdx, 1                           #	il->length|-|-;
0xe99d:	mov qword ptr [rax + 0x38], rdx      
0xe9a1:	mov rax, qword ptr [rip + 0x22a68]   #	il|-|>dynamic_length--;
0xe9a8:	mov rdx, qword ptr [rax + 0x48]      
0xe9ac:	sub rdx, 1                           #	il->dynamic_length|-|-;
0xe9b0:	mov qword ptr [rax + 0x48], rdx      
0xe9b4:	mov rax, qword ptr [rip + 0x22a55]   #	if (il|-|>length % 16 == 0)
0xe9bb:	mov rax, qword ptr [rax + 0x38]      
0xe9bf:	and eax, 0xf                         #	if (il->length |%| 16 == 0)
0xe9c2:	test rax, rax                        #	if |(|il->length % 16 == 0)
0xe9c5:	jne 0xea0d                           
0xe9c7:	mov rax, qword ptr [rip + 0x22a42]   #	    |I|L_RESIZE(il->length + 1);
0xe9ce:	mov rdx, qword ptr [rax + 0x38]      
0xe9d2:	mov rax, qword ptr [rip + 0x22a37]   
0xe9d9:	add rdx, 1                           
0xe9dd:	mov qword ptr [rax + 0x50], rdx      
0xe9e1:	mov rax, qword ptr [rip + 0x22a28]   
0xe9e8:	mov rdx, qword ptr [rax + 0x50]      
0xe9ec:	mov rax, qword ptr [rip + 0x22a1d]   
0xe9f3:	mov rax, qword ptr [rax + 0x58]      
0xe9f7:	mov rbx, qword ptr [rip + 0x22a12]   
0xe9fe:	mov rsi, rdx                         
0xea01:	mov rdi, rax                         
0xea04:	call 0x24670                         
0xea09:	mov qword ptr [rbx + 0x58], rax      
0xea0d:	mov rax, qword ptr [rip + 0x229fc]   #	il|-|>last_operation = IL_DELETE_CHAR;
0xea14:	mov dword ptr [rax + 0x10], 8        #	il->last_operation |=| IL_DELETE_CHAR;
0xea1b:	nop                                  #|}|
0xea1c:	mov rbx, qword ptr [rbp - 8]         
0xea20:	leave                                
0xea21:	ret                                  
0xea22:	endbr64                              #|{|
0xea26:	push rbp                             
0xea27:	mov rbp, rsp                         
0xea2a:	push rbx                             
0xea2b:	sub rsp, 8                           
0xea2f:	mov rax, qword ptr [rip + 0x229da]   #    if (il|-|>point > il->static_length)
0xea36:	mov rdx, qword ptr [rax + 0x18]      
0xea3a:	mov rax, qword ptr [rip + 0x229cf]   #    if (il->point > il|-|>static_length)
0xea41:	mov rax, qword ptr [rax + 0x40]      
0xea45:	cmp rdx, rax                         #    if |(|il->point > il->static_length)
0xea48:	jbe 0xeb4f                           
0xea4e:	mov rax, qword ptr [rip + 0x229bb]   #	       il|-|>length - il->point + 1);
0xea55:	mov rdx, qword ptr [rax + 0x38]      
0xea59:	mov rax, qword ptr [rip + 0x229b0]   #	       il->length - il|-|>point + 1);
0xea60:	mov rcx, qword ptr [rax + 0x18]      
0xea64:	mov rax, rdx                         #	       il->length |-| il->point + 1);
0xea67:	sub rax, rcx                         
0xea6a:	lea rdx, [rax + 1]                   #	|m|emcpy(il->buffer + il->point - 1,
0xea6e:	mov rax, qword ptr [rip + 0x2299b]   #	       il|-|>buffer + il->point,
0xea75:	mov rcx, qword ptr [rax + 0x58]      
0xea79:	mov rax, qword ptr [rip + 0x22990]   #	       il->buffer + il|-|>point,
0xea80:	mov rax, qword ptr [rax + 0x18]      
0xea84:	add rcx, rax                         #	       il->buffer |+| il->point,
0xea87:	mov rax, qword ptr [rip + 0x22982]   #	memcpy(il|-|>buffer + il->point - 1,
0xea8e:	mov rsi, qword ptr [rax + 0x58]      
0xea92:	mov rax, qword ptr [rip + 0x22977]   #	memcpy(il->buffer + il|-|>point - 1,
0xea99:	mov rax, qword ptr [rax + 0x18]      
0xea9d:	sub rax, 1                           #	memcpy(il->buffer + il->point |-| 1,
0xeaa1:	add rax, rsi                         
0xeaa4:	mov rsi, rcx                         #	|m|emcpy(il->buffer + il->point - 1,
0xeaa7:	mov rdi, rax                         
0xeaaa:	call 0x4b70                          
0xeaaf:	mov rax, qword ptr [rip + 0x2295a]   #	il|-|>point--;
0xeab6:	mov rdx, qword ptr [rax + 0x18]      
0xeaba:	sub rdx, 1                           #	il->point|-|-;
0xeabe:	mov qword ptr [rax + 0x18], rdx      
0xeac2:	mov rax, qword ptr [rip + 0x22947]   #	il|-|>length--;
0xeac9:	mov rdx, qword ptr [rax + 0x38]      
0xeacd:	sub rdx, 1                           #	il->length|-|-;
0xead1:	mov qword ptr [rax + 0x38], rdx      
0xead5:	mov rax, qword ptr [rip + 0x22934]   #	il|-|>dynamic_length--;
0xeadc:	mov rdx, qword ptr [rax + 0x48]      
0xeae0:	sub rdx, 1                           #	il->dynamic_length|-|-;
0xeae4:	mov qword ptr [rax + 0x48], rdx      
0xeae8:	mov rax, qword ptr [rip + 0x22921]   #	if (il|-|>length % 16 == 0)
0xeaef:	mov rax, qword ptr [rax + 0x38]      
0xeaf3:	and eax, 0xf                         #	if (il->length |%| 16 == 0)
0xeaf6:	test rax, rax                        #	if |(|il->length % 16 == 0)
0xeaf9:	jne 0xeb41                           
0xeafb:	mov rax, qword ptr [rip + 0x2290e]   #	    |I|L_RESIZE(il->length + 1);
0xeb02:	mov rdx, qword ptr [rax + 0x38]      
0xeb06:	mov rax, qword ptr [rip + 0x22903]   
0xeb0d:	add rdx, 1                           
0xeb11:	mov qword ptr [rax + 0x50], rdx      
0xeb15:	mov rax, qword ptr [rip + 0x228f4]   
0xeb1c:	mov rdx, qword ptr [rax + 0x50]      
0xeb20:	mov rax, qword ptr [rip + 0x228e9]   
0xeb27:	mov rax, qword ptr [rax + 0x58]      
0xeb2b:	mov rbx, qword ptr [rip + 0x228de]   
0xeb32:	mov rsi, rdx                         
0xeb35:	mov rdi, rax                         
0xeb38:	call 0x24670                         
0xeb3d:	mov qword ptr [rbx + 0x58], rax      
0xeb41:	mov rax, qword ptr [rip + 0x228c8]   #	il|-|>last_operation = IL_BACKWARD_DELETE_CHAR;
0xeb48:	mov dword ptr [rax + 0x10], 9        #	il->last_operation |=| IL_BACKWARD_DELETE_CHAR;
0xeb4f:	nop                                  #|}|
0xeb50:	mov rbx, qword ptr [rbp - 8]         
0xeb54:	leave                                
0xeb55:	ret                                  
0xeb56:	endbr64                              #|{|
0xeb5a:	push rbp                             
0xeb5b:	mov rbp, rsp                         
0xeb5e:	sub rsp, 0x10                        
0xeb62:	mov rax, qword ptr [rip + 0x228a7]   #    size_t old_mark = il|-|>mark;
0xeb69:	mov rax, qword ptr [rax + 0x20]      #    size_t |o|ld_mark = il->mark;
0xeb6d:	mov qword ptr [rbp - 0x10], rax      
0xeb71:	mov eax, 0                           #    |i|l_set_mark();
0xeb76:	call 0xe3ee                          
0xeb7b:	mov eax, 0                           #    |i|l_forward_word();
0xeb80:	call 0xe655                          
0xeb85:	mov rax, qword ptr [rip + 0x22884]   #    end_of_word = il|-|>point;
0xeb8c:	mov rax, qword ptr [rax + 0x18]      #    end_of_word |=| il->point;
0xeb90:	mov qword ptr [rbp - 8], rax         
0xeb94:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xeb99:	mov eax, 0                           
0xeb9e:	call 0xdd09                          
0xeba3:	mov rax, qword ptr [rip + 0x22866]   #    if (old_mark <= il|-|>point)
0xebaa:	mov rax, qword ptr [rax + 0x18]      
0xebae:	cmp qword ptr [rbp - 0x10], rax      #    if |(|old_mark <= il->point)
0xebb2:	ja 0xebc5                            
0xebb4:	mov rax, qword ptr [rip + 0x22855]   #	il|-|>mark = old_mark;
0xebbb:	mov rdx, qword ptr [rbp - 0x10]      #	il->mark |=| old_mark;
0xebbf:	mov qword ptr [rax + 0x20], rdx      
0xebc3:	jmp 0xec0b                           
0xebc5:	mov rax, qword ptr [rbp - 0x10]      #	if |(|old_mark >= end_of_word)
0xebc9:	cmp rax, qword ptr [rbp - 8]         
0xebcd:	jb 0xebf5                            
0xebcf:	mov rax, qword ptr [rip + 0x2283a]   #	    il->mark = old_mark - (end_of_word - il|-|>point);
0xebd6:	mov rax, qword ptr [rax + 0x18]      
0xebda:	sub rax, qword ptr [rbp - 8]         #	    il->mark = old_mark |-| (end_of_word - il->point);
0xebde:	mov rcx, rax                         
0xebe1:	mov rax, qword ptr [rip + 0x22828]   #	    il|-|>mark = old_mark - (end_of_word - il->point);
0xebe8:	mov rdx, qword ptr [rbp - 0x10]      #	    il->mark = old_mark |-| (end_of_word - il->point);
0xebec:	add rdx, rcx                         
0xebef:	mov qword ptr [rax + 0x20], rdx      #	    il->mark |=| old_mark - (end_of_word - il->point);
0xebf3:	jmp 0xec0b                           
0xebf5:	mov rdx, qword ptr [rip + 0x22814]   #	    il->mark = il|-|>point;
0xebfc:	mov rax, qword ptr [rip + 0x2280d]   #	    il|-|>mark = il->point;
0xec03:	mov rdx, qword ptr [rdx + 0x18]      #	    il->mark = il|-|>point;
0xec07:	mov qword ptr [rax + 0x20], rdx      #	    il->mark |=| il->point;
0xec0b:	mov rax, qword ptr [rip + 0x227fe]   #    il|-|>last_operation = IL_KILL_WORD;
0xec12:	mov dword ptr [rax + 0x10], 0xa      #    il->last_operation |=| IL_KILL_WORD;
0xec19:	nop                                  #|}|
0xec1a:	leave                                
0xec1b:	ret                                  
0xec1c:	endbr64                              #|{|
0xec20:	push rbp                             
0xec21:	mov rbp, rsp                         
0xec24:	sub rsp, 0x10                        
0xec28:	mov rax, qword ptr [rip + 0x227e1]   #    size_t old_mark  = il|-|>mark;
0xec2f:	mov rax, qword ptr [rax + 0x20]      #    size_t |o|ld_mark  = il->mark;
0xec33:	mov qword ptr [rbp - 0x10], rax      
0xec37:	mov rax, qword ptr [rip + 0x227d2]   #    size_t old_point = il|-|>point;
0xec3e:	mov rax, qword ptr [rax + 0x18]      #    size_t |o|ld_point = il->point;
0xec42:	mov qword ptr [rbp - 8], rax         
0xec46:	mov eax, 0                           #    |i|l_set_mark();
0xec4b:	call 0xe3ee                          
0xec50:	mov eax, 0                           #    |i|l_backward_word();
0xec55:	call 0xe569                          
0xec5a:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xec5f:	mov eax, 0                           
0xec64:	call 0xdd09                          
0xec69:	mov rax, qword ptr [rip + 0x227a0]   #    if (old_mark <= il|-|>point)
0xec70:	mov rax, qword ptr [rax + 0x18]      
0xec74:	cmp qword ptr [rbp - 0x10], rax      #    if |(|old_mark <= il->point)
0xec78:	ja 0xec8b                            
0xec7a:	mov rax, qword ptr [rip + 0x2278f]   #	il|-|>mark = old_mark;
0xec81:	mov rdx, qword ptr [rbp - 0x10]      #	il->mark |=| old_mark;
0xec85:	mov qword ptr [rax + 0x20], rdx      
0xec89:	jmp 0xecd1                           
0xec8b:	mov rax, qword ptr [rbp - 0x10]      #	if |(|old_mark >= old_point)
0xec8f:	cmp rax, qword ptr [rbp - 8]         
0xec93:	jb 0xecbb                            
0xec95:	mov rax, qword ptr [rip + 0x22774]   #	    il->mark = old_mark - (old_point - il|-|>point);
0xec9c:	mov rax, qword ptr [rax + 0x18]      
0xeca0:	sub rax, qword ptr [rbp - 8]         #	    il->mark = old_mark |-| (old_point - il->point);
0xeca4:	mov rcx, rax                         
0xeca7:	mov rax, qword ptr [rip + 0x22762]   #	    il|-|>mark = old_mark - (old_point - il->point);
0xecae:	mov rdx, qword ptr [rbp - 0x10]      #	    il->mark = old_mark |-| (old_point - il->point);
0xecb2:	add rdx, rcx                         
0xecb5:	mov qword ptr [rax + 0x20], rdx      #	    il->mark |=| old_mark - (old_point - il->point);
0xecb9:	jmp 0xecd1                           
0xecbb:	mov rdx, qword ptr [rip + 0x2274e]   #	    il->mark = il|-|>point;
0xecc2:	mov rax, qword ptr [rip + 0x22747]   #	    il|-|>mark = il->point;
0xecc9:	mov rdx, qword ptr [rdx + 0x18]      #	    il->mark = il|-|>point;
0xeccd:	mov qword ptr [rax + 0x20], rdx      #	    il->mark |=| il->point;
0xecd1:	mov rax, qword ptr [rip + 0x22738]   #    il|-|>last_operation = IL_BACKWARD_KILL_WORD;
0xecd8:	mov dword ptr [rax + 0x10], 0xb      #    il->last_operation |=| IL_BACKWARD_KILL_WORD;
0xecdf:	nop                                  #|}|
0xece0:	leave                                
0xece1:	ret                                  
0xece2:	endbr64                              #|{|
0xece6:	push rbp                             
0xece7:	mov rbp, rsp                         
0xecea:	push rbx                             
0xeceb:	sub rsp, 8                           
0xecef:	mov rax, qword ptr [rip + 0x2271a]   #    il|-|>point          = 0;
0xecf6:	mov qword ptr [rax + 0x18], 0        #    il->point          |=| 0;
0xecfe:	mov rax, qword ptr [rip + 0x2270b]   #    il|-|>mark           = 0;
0xed05:	mov qword ptr [rax + 0x20], 0        #    il->mark           |=| 0;
0xed0d:	mov rax, qword ptr [rip + 0x226fc]   #    il|-|>length         = 0;
0xed14:	mov qword ptr [rax + 0x38], 0        #    il->length         |=| 0;
0xed1c:	mov rax, qword ptr [rip + 0x226ed]   #    il|-|>static_length  = 0;
0xed23:	mov qword ptr [rax + 0x40], 0        #    il->static_length  |=| 0;
0xed2b:	mov rax, qword ptr [rip + 0x226de]   #    il|-|>dynamic_length = 0;
0xed32:	mov qword ptr [rax + 0x48], 0        #    il->dynamic_length |=| 0;
0xed3a:	mov rax, qword ptr [rip + 0x226cf]   #    |I|L_RESIZE(1);
0xed41:	mov qword ptr [rax + 0x50], 1        
0xed49:	mov rax, qword ptr [rip + 0x226c0]   
0xed50:	mov rdx, qword ptr [rax + 0x50]      
0xed54:	mov rax, qword ptr [rip + 0x226b5]   
0xed5b:	mov rax, qword ptr [rax + 0x58]      
0xed5f:	mov rbx, qword ptr [rip + 0x226aa]   
0xed66:	mov rsi, rdx                         
0xed69:	mov rdi, rax                         
0xed6c:	call 0x24670                         
0xed71:	mov qword ptr [rbx + 0x58], rax      
0xed75:	mov rax, qword ptr [rip + 0x22694]   #    il|-|>buffer[0] = '\0';
0xed7c:	mov rax, qword ptr [rax + 0x58]      
0xed80:	mov byte ptr [rax], 0                #    il->buffer[0] |=| '\0';
0xed83:	mov rax, qword ptr [rip + 0x22686]   #    il|-|>last_operation = IL_RESET_LINE;
0xed8a:	mov dword ptr [rax + 0x10], 0xc      #    il->last_operation |=| IL_RESET_LINE;
0xed91:	nop                                  #|}|
0xed92:	mov rbx, qword ptr [rbp - 8]         
0xed96:	leave                                
0xed97:	ret                                  
0xed98:	endbr64                              #|{|
0xed9c:	push rbp                             
0xed9d:	mov rbp, rsp                         
0xeda0:	sub rsp, 0x10                        
0xeda4:	mov dword ptr [rbp - 4], edi         
0xeda7:	mov eax, 0                           #    |i|l_beginning_of_line();
0xedac:	call 0xe739                          
0xedb1:	mov eax, 0                           #    |i|l_set_mark();
0xedb6:	call 0xe3ee                          
0xedbb:	mov eax, 0                           #    |i|l_end_of_line();
0xedc0:	call 0xe768                          
0xedc5:	mov eax, dword ptr [rbp - 4]         #    |i|l_region_command(store | IL_KILL);
0xedc8:	or eax, 2                            
0xedcb:	mov edi, eax                         
0xedcd:	mov eax, 0                           
0xedd2:	call 0xdd09                          
0xedd7:	mov rdx, qword ptr [rip + 0x22632]   #    il->mark = il|-|>point;
0xedde:	mov rax, qword ptr [rip + 0x2262b]   #    il|-|>mark = il->point;
0xede5:	mov rdx, qword ptr [rdx + 0x18]      #    il->mark = il|-|>point;
0xede9:	mov qword ptr [rax + 0x20], rdx      #    il->mark |=| il->point;
0xeded:	mov rax, qword ptr [rip + 0x2261c]   #    il|-|>last_operation = IL_KILL_LINE;
0xedf4:	mov dword ptr [rax + 0x10], 0xd      #    il->last_operation |=| IL_KILL_LINE;
0xedfb:	nop                                  #|}|
0xedfc:	leave                                
0xedfd:	ret                                  
0xedfe:	endbr64                              #|{|
0xee02:	push rbp                             
0xee03:	mov rbp, rsp                         
0xee06:	sub rsp, 0x10                        
0xee0a:	mov rax, qword ptr [rip + 0x225ff]   #    size_t old_mark = (il|-|>mark <= il->point) ? il->static_length :
0xee11:	mov rdx, qword ptr [rax + 0x20]      
0xee15:	mov rax, qword ptr [rip + 0x225f4]   #    size_t old_mark = (il->mark <= il|-|>point) ? il->static_length :
0xee1c:	mov rax, qword ptr [rax + 0x18]      
0xee20:	cmp rdx, rax                         #    size_t old_mark = (il->mark <= il->point) ? il->static_length |:|
0xee23:	ja 0xee32                            
0xee25:	mov rax, qword ptr [rip + 0x225e4]   #    size_t old_mark = (il->mark <= il->point) ? il|-|>static_length :
0xee2c:	mov rax, qword ptr [rax + 0x40]      #    size_t old_mark = (il->mark <= il->point) ? il->static_length |:|
0xee30:	jmp 0xee4e                           
0xee32:	mov rax, qword ptr [rip + 0x225d7]   #						il|-|>mark - il->point;
0xee39:	mov rdx, qword ptr [rax + 0x20]      
0xee3d:	mov rax, qword ptr [rip + 0x225cc]   #						il->mark - il|-|>point;
0xee44:	mov rcx, qword ptr [rax + 0x18]      
0xee48:	mov rax, rdx                         #    size_t old_mark = (il->mark <= il->point) ? il->static_length |:|
0xee4b:	sub rax, rcx                         
0xee4e:	mov qword ptr [rbp - 8], rax         #    size_t |o|ld_mark = (il->mark <= il->point) ? il->static_length :
0xee52:	mov eax, 0                           #    |i|l_set_mark();
0xee57:	call 0xe3ee                          
0xee5c:	mov eax, 0                           #    |i|l_beginning_of_line();
0xee61:	call 0xe739                          
0xee66:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xee6b:	mov eax, 0                           
0xee70:	call 0xdd09                          
0xee75:	mov rax, qword ptr [rip + 0x22594]   #    il->mark = |m|in(old_mark, il->length);
0xee7c:	mov rdx, qword ptr [rax + 0x38]      
0xee80:	mov rcx, qword ptr [rip + 0x22589]   #    il|-|>mark = min(old_mark, il->length);
0xee87:	mov rax, qword ptr [rbp - 8]         #    il->mark = |m|in(old_mark, il->length);
0xee8b:	cmp rdx, rax                         
0xee8e:	cmovbe rax, rdx                      
0xee92:	mov qword ptr [rcx + 0x20], rax      #    il->mark |=| min(old_mark, il->length);
0xee96:	mov rax, qword ptr [rip + 0x22573]   #    il|-|>last_operation = IL_KILL_TO_BEGINNING_OF_LINE;
0xee9d:	mov dword ptr [rax + 0x10], 0xe      #    il->last_operation |=| IL_KILL_TO_BEGINNING_OF_LINE;
0xeea4:	nop                                  #|}|
0xeea5:	leave                                
0xeea6:	ret                                  
0xeea7:	endbr64                              #|{|
0xeeab:	push rbp                             
0xeeac:	mov rbp, rsp                         
0xeeaf:	sub rsp, 0x10                        
0xeeb3:	mov rax, qword ptr [rip + 0x22556]   #    size_t old_mark = il|-|>mark;
0xeeba:	mov rax, qword ptr [rax + 0x20]      #    size_t |o|ld_mark = il->mark;
0xeebe:	mov qword ptr [rbp - 8], rax         
0xeec2:	mov eax, 0                           #    |i|l_set_mark();
0xeec7:	call 0xe3ee                          
0xeecc:	mov eax, 0                           #    |i|l_end_of_line();
0xeed1:	call 0xe768                          
0xeed6:	mov edi, 3                           #    |i|l_region_command(IL_STORE | IL_KILL);
0xeedb:	mov eax, 0                           
0xeee0:	call 0xdd09                          
0xeee5:	mov rax, qword ptr [rip + 0x22524]   #    il->mark = |m|in(old_mark, il->length);
0xeeec:	mov rdx, qword ptr [rax + 0x38]      
0xeef0:	mov rcx, qword ptr [rip + 0x22519]   #    il|-|>mark = min(old_mark, il->length);
0xeef7:	mov rax, qword ptr [rbp - 8]         #    il->mark = |m|in(old_mark, il->length);
0xeefb:	cmp rdx, rax                         
0xeefe:	cmovbe rax, rdx                      
0xef02:	mov qword ptr [rcx + 0x20], rax      #    il->mark |=| min(old_mark, il->length);
0xef06:	mov rax, qword ptr [rip + 0x22503]   #    il|-|>last_operation = IL_KILL_TO_END_OF_LINE;
0xef0d:	mov dword ptr [rax + 0x10], 0xf      #    il->last_operation |=| IL_KILL_TO_END_OF_LINE;
0xef14:	nop                                  #|}|
0xef15:	leave                                
0xef16:	ret                                  
0xef17:	endbr64                              #|{|
0xef1b:	push rbp                             
0xef1c:	mov rbp, rsp                         
0xef1f:	mov rax, qword ptr [rip + 0x224ea]   #    if (il|-|>buffer[il->point] == ' ')
0xef26:	mov rdx, qword ptr [rax + 0x58]      
0xef2a:	mov rax, qword ptr [rip + 0x224df]   #    if (il->buffer[il|-|>point] == ' ')
0xef31:	mov rax, qword ptr [rax + 0x18]      
0xef35:	add rax, rdx                         #    if (il->buffer|[|il->point] == ' ')
0xef38:	movzx eax, byte ptr [rax]            
0xef3b:	cmp al, 0x20                         #    if |(|il->buffer[il->point] == ' ')
0xef3d:	jne 0xef61                           
0xef3f:	mov eax, 0                           #	|i|l_delete_horizontal_space();
0xef44:	call 0xef64                          
0xef49:	mov edi, 0x20                        #	|i|l_insert_char(' ');
0xef4e:	call 0xe797                          
0xef53:	mov rax, qword ptr [rip + 0x224b6]   #	il|-|>last_operation = IL_JUST_ONE_SPACE;
0xef5a:	mov dword ptr [rax + 0x10], 0x10     #	il->last_operation |=| IL_JUST_ONE_SPACE;
0xef61:	nop                                  #|}|
0xef62:	pop rbp                              
0xef63:	ret                                  
0xef64:	endbr64                              #|{|
0xef68:	push rbp                             
0xef69:	mov rbp, rsp                         
0xef6c:	mov rax, qword ptr [rip + 0x2249d]   #    if (il|-|>buffer[il->point] == ' ')
0xef73:	mov rdx, qword ptr [rax + 0x58]      
0xef77:	mov rax, qword ptr [rip + 0x22492]   #    if (il->buffer[il|-|>point] == ' ')
0xef7e:	mov rax, qword ptr [rax + 0x18]      
0xef82:	add rax, rdx                         #    if (il->buffer|[|il->point] == ' ')
0xef85:	movzx eax, byte ptr [rax]            
0xef88:	cmp al, 0x20                         #    if |(|il->buffer[il->point] == ' ')
0xef8a:	jne 0xf006                           
0xef8c:	jmp 0xef98                           #	while |(|il->buffer[il->point] == ' ')
0xef8e:	mov eax, 0                           #	    |i|l_delete_char();
0xef93:	call 0xe901                          
0xef98:	mov rax, qword ptr [rip + 0x22471]   #	while (il|-|>buffer[il->point] == ' ')
0xef9f:	mov rdx, qword ptr [rax + 0x58]      
0xefa3:	mov rax, qword ptr [rip + 0x22466]   #	while (il->buffer[il|-|>point] == ' ')
0xefaa:	mov rax, qword ptr [rax + 0x18]      
0xefae:	add rax, rdx                         #	while (il->buffer|[|il->point] == ' ')
0xefb1:	movzx eax, byte ptr [rax]            
0xefb4:	cmp al, 0x20                         #	while (il->buffer[il->point] |=|= ' ')
0xefb6:	je 0xef8e                            
0xefb8:	jmp 0xefc4                           #	while |(|il->dynamic_length && il->buffer[il->point - 1] == ' ')
0xefba:	mov eax, 0                           #	    |i|l_backward_delete_char();
0xefbf:	call 0xea22                          
0xefc4:	mov rax, qword ptr [rip + 0x22445]   #	while (il|-|>dynamic_length && il->buffer[il->point - 1] == ' ')
0xefcb:	mov rax, qword ptr [rax + 0x48]      
0xefcf:	test rax, rax                        #	while (il->dynamic_length |&|& il->buffer[il->point - 1] == ' ')
0xefd2:	je 0xeff8                            
0xefd4:	mov rax, qword ptr [rip + 0x22435]   #	while (il->dynamic_length && il|-|>buffer[il->point - 1] == ' ')
0xefdb:	mov rdx, qword ptr [rax + 0x58]      
0xefdf:	mov rax, qword ptr [rip + 0x2242a]   #	while (il->dynamic_length && il->buffer[il|-|>point - 1] == ' ')
0xefe6:	mov rax, qword ptr [rax + 0x18]      
0xefea:	sub rax, 1                           #	while (il->dynamic_length && il->buffer|[|il->point - 1] == ' ')
0xefee:	add rax, rdx                         
0xeff1:	movzx eax, byte ptr [rax]            
0xeff4:	cmp al, 0x20                         #	while (il->dynamic_length |&|& il->buffer[il->point - 1] == ' ')
0xeff6:	je 0xefba                            
0xeff8:	mov rax, qword ptr [rip + 0x22411]   #	il|-|>last_operation = IL_DELETE_HORIZONTAL_SPACE;
0xefff:	mov dword ptr [rax + 0x10], 0x11     #	il->last_operation |=| IL_DELETE_HORIZONTAL_SPACE;
0xf006:	nop                                  #|}|
0xf007:	pop rbp                              
0xf008:	ret                                  
0xf009:	endbr64                              #|{|
0xf00d:	push rbp                             
0xf00e:	mov rbp, rsp                         
0xf011:	sub rsp, 0x10                        
0xf015:	mov rax, qword ptr [rip + 0x223f4]   #    if (il|-|>point < il->length)
0xf01c:	mov rdx, qword ptr [rax + 0x18]      
0xf020:	mov rax, qword ptr [rip + 0x223e9]   #    if (il->point < il|-|>length)
0xf027:	mov rax, qword ptr [rax + 0x38]      
0xf02b:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xf02e:	jae 0xf0ac                           
0xf030:	mov rax, qword ptr [rip + 0x223d9]   #	size_t previous_point = il|-|>point;
0xf037:	mov rax, qword ptr [rax + 0x18]      #	size_t |p|revious_point = il->point;
0xf03b:	mov qword ptr [rbp - 8], rax         
0xf03f:	mov eax, 0                           #	|i|l_forward_word();
0xf044:	call 0xe655                          
0xf049:	mov rax, qword ptr [rbp - 8]         #	for (i |=| previous_point; i < il->point; i++)
0xf04d:	mov qword ptr [rbp - 0x10], rax      
0xf051:	jmp 0xf08d                           #	|f|or (i = previous_point; i < il->point; i++)
0xf053:	mov rax, qword ptr [rip + 0x223b6]   #	    il->buffer[i] = tolower((int)il|-|>buffer[i]);
0xf05a:	mov rdx, qword ptr [rax + 0x58]      
0xf05e:	mov rax, qword ptr [rbp - 0x10]      #	    il->buffer[i] = tolower((int)il->buffer|[|i]);
0xf062:	add rax, rdx                         
0xf065:	movzx eax, byte ptr [rax]            
0xf068:	movsx eax, al                        #	    il->buffer[i] = |t|olower((int)il->buffer[i]);
0xf06b:	mov edi, eax                         
0xf06d:	call 0x4be0                          
0xf072:	mov edx, eax                         
0xf074:	mov rax, qword ptr [rip + 0x22395]   #	    il|-|>buffer[i] = tolower((int)il->buffer[i]);
0xf07b:	mov rcx, qword ptr [rax + 0x58]      
0xf07f:	mov rax, qword ptr [rbp - 0x10]      #	    il->buffer|[|i] = tolower((int)il->buffer[i]);
0xf083:	add rax, rcx                         
0xf086:	mov byte ptr [rax], dl               #	    il->buffer[i] |=| tolower((int)il->buffer[i]);
0xf088:	add qword ptr [rbp - 0x10], 1        #	for (i = previous_point; i < il->point; i|+|+)
0xf08d:	mov rax, qword ptr [rip + 0x2237c]   #	for (i = previous_point; i < il|-|>point; i++)
0xf094:	mov rax, qword ptr [rax + 0x18]      
0xf098:	cmp qword ptr [rbp - 0x10], rax      #	for (i = previous_point; i |<| il->point; i++)
0xf09c:	jb 0xf053                            
0xf09e:	mov rax, qword ptr [rip + 0x2236b]   #	il|-|>last_operation = IL_DOWNCASE_WORD;
0xf0a5:	mov dword ptr [rax + 0x10], 0x12     #	il->last_operation |=| IL_DOWNCASE_WORD;
0xf0ac:	nop                                  #|}|
0xf0ad:	leave                                
0xf0ae:	ret                                  
0xf0af:	endbr64                              #|{|
0xf0b3:	push rbp                             
0xf0b4:	mov rbp, rsp                         
0xf0b7:	sub rsp, 0x10                        
0xf0bb:	mov rax, qword ptr [rip + 0x2234e]   #    if (il|-|>point < il->length)
0xf0c2:	mov rdx, qword ptr [rax + 0x18]      
0xf0c6:	mov rax, qword ptr [rip + 0x22343]   #    if (il->point < il|-|>length)
0xf0cd:	mov rax, qword ptr [rax + 0x38]      
0xf0d1:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xf0d4:	jae 0xf152                           
0xf0d6:	mov rax, qword ptr [rip + 0x22333]   #	size_t previous_point = il|-|>point;
0xf0dd:	mov rax, qword ptr [rax + 0x18]      #	size_t |p|revious_point = il->point;
0xf0e1:	mov qword ptr [rbp - 8], rax         
0xf0e5:	mov eax, 0                           #	|i|l_forward_word();
0xf0ea:	call 0xe655                          
0xf0ef:	mov rax, qword ptr [rbp - 8]         #	for (i |=| previous_point; i < il->point; i++)
0xf0f3:	mov qword ptr [rbp - 0x10], rax      
0xf0f7:	jmp 0xf133                           #	|f|or (i = previous_point; i < il->point; i++)
0xf0f9:	mov rax, qword ptr [rip + 0x22310]   #	    il->buffer[i] = toupper((int)il|-|>buffer[i]);
0xf100:	mov rdx, qword ptr [rax + 0x58]      
0xf104:	mov rax, qword ptr [rbp - 0x10]      #	    il->buffer[i] = toupper((int)il->buffer|[|i]);
0xf108:	add rax, rdx                         
0xf10b:	movzx eax, byte ptr [rax]            
0xf10e:	movsx eax, al                        #	    il->buffer[i] = |t|oupper((int)il->buffer[i]);
0xf111:	mov edi, eax                         
0xf113:	call 0x4890                          
0xf118:	mov edx, eax                         
0xf11a:	mov rax, qword ptr [rip + 0x222ef]   #	    il|-|>buffer[i] = toupper((int)il->buffer[i]);
0xf121:	mov rcx, qword ptr [rax + 0x58]      
0xf125:	mov rax, qword ptr [rbp - 0x10]      #	    il->buffer|[|i] = toupper((int)il->buffer[i]);
0xf129:	add rax, rcx                         
0xf12c:	mov byte ptr [rax], dl               #	    il->buffer[i] |=| toupper((int)il->buffer[i]);
0xf12e:	add qword ptr [rbp - 0x10], 1        #	for (i = previous_point; i < il->point; i|+|+)
0xf133:	mov rax, qword ptr [rip + 0x222d6]   #	for (i = previous_point; i < il|-|>point; i++)
0xf13a:	mov rax, qword ptr [rax + 0x18]      
0xf13e:	cmp qword ptr [rbp - 0x10], rax      #	for (i = previous_point; i |<| il->point; i++)
0xf142:	jb 0xf0f9                            
0xf144:	mov rax, qword ptr [rip + 0x222c5]   #	il|-|>last_operation = IL_UPCASE_WORD;
0xf14b:	mov dword ptr [rax + 0x10], 0x13     #	il->last_operation |=| IL_UPCASE_WORD;
0xf152:	nop                                  #|}|
0xf153:	leave                                
0xf154:	ret                                  
0xf155:	endbr64                              #|{|
0xf159:	push rbp                             
0xf15a:	mov rbp, rsp                         
0xf15d:	sub rsp, 0x20                        
0xf161:	mov rax, qword ptr [rip + 0x222a8]   #    if (il|-|>point < il->length)
0xf168:	mov rdx, qword ptr [rax + 0x18]      
0xf16c:	mov rax, qword ptr [rip + 0x2229d]   #    if (il->point < il|-|>length)
0xf173:	mov rax, qword ptr [rax + 0x38]      
0xf177:	cmp rdx, rax                         #    if |(|il->point < il->length)
0xf17a:	jae 0xf282                           
0xf180:	mov dword ptr [rbp - 0x14], 1        #	int |f|irst = 1;
0xf187:	mov rax, qword ptr [rip + 0x22282]   #	size_t previous_point = il|-|>point;
0xf18e:	mov rax, qword ptr [rax + 0x18]      #	size_t |p|revious_point = il->point;
0xf192:	mov qword ptr [rbp - 8], rax         
0xf196:	mov eax, 0                           #	|i|l_forward_word();
0xf19b:	call 0xe655                          
0xf1a0:	mov rax, qword ptr [rbp - 8]         #	for (i |=| previous_point; i < il->point; i++)
0xf1a4:	mov qword ptr [rbp - 0x10], rax      
0xf1a8:	jmp 0xf25f                           #	|f|or (i = previous_point; i < il->point; i++)
0xf1ad:	call 0x4ec0                          #	    if (|i|salnum((int)il->buffer[i]))
0xf1b2:	mov rdx, qword ptr [rax]             
0xf1b5:	mov rax, qword ptr [rip + 0x22254]   
0xf1bc:	mov rcx, qword ptr [rax + 0x58]      
0xf1c0:	mov rax, qword ptr [rbp - 0x10]      
0xf1c4:	add rax, rcx                         
0xf1c7:	movzx eax, byte ptr [rax]            
0xf1ca:	movsx rax, al                        
0xf1ce:	add rax, rax                         
0xf1d1:	add rax, rdx                         
0xf1d4:	movzx eax, word ptr [rax]            
0xf1d7:	movzx eax, ax                        
0xf1da:	and eax, 8                           
0xf1dd:	test eax, eax                        #	    if |(|isalnum((int)il->buffer[i]))
0xf1df:	je 0xf25a                            
0xf1e1:	cmp dword ptr [rbp - 0x14], 0        #		if |(|first)
0xf1e5:	je 0xf225                            
0xf1e7:	mov rax, qword ptr [rip + 0x22222]   #		    il->buffer[i] = toupper((int)il|-|>buffer[i]);
0xf1ee:	mov rdx, qword ptr [rax + 0x58]      
0xf1f2:	mov rax, qword ptr [rbp - 0x10]      #		    il->buffer[i] = toupper((int)il->buffer|[|i]);
0xf1f6:	add rax, rdx                         
0xf1f9:	movzx eax, byte ptr [rax]            
0xf1fc:	movsx eax, al                        #		    il->buffer[i] = |t|oupper((int)il->buffer[i]);
0xf1ff:	mov edi, eax                         
0xf201:	call 0x4890                          
0xf206:	mov edx, eax                         
0xf208:	mov rax, qword ptr [rip + 0x22201]   #		    il|-|>buffer[i] = toupper((int)il->buffer[i]);
0xf20f:	mov rcx, qword ptr [rax + 0x58]      
0xf213:	mov rax, qword ptr [rbp - 0x10]      #		    il->buffer|[|i] = toupper((int)il->buffer[i]);
0xf217:	add rax, rcx                         
0xf21a:	mov byte ptr [rax], dl               #		    il->buffer[i] |=| toupper((int)il->buffer[i]);
0xf21c:	mov dword ptr [rbp - 0x14], 0        #		    first |=| 0;
0xf223:	jmp 0xf25a                           
0xf225:	mov rax, qword ptr [rip + 0x221e4]   #		    il->buffer[i] = tolower((int)il|-|>buffer[i]);
0xf22c:	mov rdx, qword ptr [rax + 0x58]      
0xf230:	mov rax, qword ptr [rbp - 0x10]      #		    il->buffer[i] = tolower((int)il->buffer|[|i]);
0xf234:	add rax, rdx                         
0xf237:	movzx eax, byte ptr [rax]            
0xf23a:	movsx eax, al                        #		    il->buffer[i] = |t|olower((int)il->buffer[i]);
0xf23d:	mov edi, eax                         
0xf23f:	call 0x4be0                          
0xf244:	mov edx, eax                         
0xf246:	mov rax, qword ptr [rip + 0x221c3]   #		    il|-|>buffer[i] = tolower((int)il->buffer[i]);
0xf24d:	mov rcx, qword ptr [rax + 0x58]      
0xf251:	mov rax, qword ptr [rbp - 0x10]      #		    il->buffer|[|i] = tolower((int)il->buffer[i]);
0xf255:	add rax, rcx                         
0xf258:	mov byte ptr [rax], dl               #		    il->buffer[i] |=| tolower((int)il->buffer[i]);
0xf25a:	add qword ptr [rbp - 0x10], 1        #	for (i = previous_point; i < il->point; i|+|+)
0xf25f:	mov rax, qword ptr [rip + 0x221aa]   #	for (i = previous_point; i < il|-|>point; i++)
0xf266:	mov rax, qword ptr [rax + 0x18]      
0xf26a:	cmp qword ptr [rbp - 0x10], rax      #	for (i = previous_point; i |<| il->point; i++)
0xf26e:	jb 0xf1ad                            
0xf274:	mov rax, qword ptr [rip + 0x22195]   #	il|-|>last_operation = IL_CAPITALIZE_WORD;
0xf27b:	mov dword ptr [rax + 0x10], 0x14     #	il->last_operation |=| IL_CAPITALIZE_WORD;
0xf282:	nop                                  #|}|
0xf283:	leave                                
0xf284:	ret                                  
0xf285:	endbr64                              #|{|
0xf289:	push rbp                             
0xf28a:	mov rbp, rsp                         
0xf28d:	push rbx                             
0xf28e:	sub rsp, 0x28                        
0xf292:	mov qword ptr [rbp - 0x28], rdi      
0xf296:	mov rax, qword ptr [rbp - 0x28]      #    len = |s|trlen(static_text);
0xf29a:	mov rdi, rax                         
0xf29d:	call 0x4960                          
0xf2a2:	mov qword ptr [rbp - 0x18], rax      
0xf2a6:	mov rax, qword ptr [rip + 0x22163]   #    il->point |+|= len - il->static_length;
0xf2ad:	mov rdx, qword ptr [rax + 0x18]      
0xf2b1:	mov rax, qword ptr [rip + 0x22158]   #    il->point += len - il|-|>static_length;
0xf2b8:	mov rcx, qword ptr [rax + 0x40]      
0xf2bc:	mov rax, qword ptr [rbp - 0x18]      #    il->point += len |-| il->static_length;
0xf2c0:	sub rax, rcx                         
0xf2c3:	mov rsi, rax                         
0xf2c6:	mov rax, qword ptr [rip + 0x22143]   #    il->point |+|= len - il->static_length;
0xf2cd:	add rdx, rsi                         
0xf2d0:	mov qword ptr [rax + 0x18], rdx      
0xf2d4:	mov rax, qword ptr [rip + 0x22135]   #    il->mark  |+|= len - il->static_length;
0xf2db:	mov rdx, qword ptr [rax + 0x20]      
0xf2df:	mov rax, qword ptr [rip + 0x2212a]   #    il->mark  += len - il|-|>static_length;
0xf2e6:	mov rcx, qword ptr [rax + 0x40]      
0xf2ea:	mov rax, qword ptr [rbp - 0x18]      #    il->mark  += len |-| il->static_length;
0xf2ee:	sub rax, rcx                         
0xf2f1:	mov rsi, rax                         
0xf2f4:	mov rax, qword ptr [rip + 0x22115]   #    il->mark  |+|= len - il->static_length;
0xf2fb:	add rdx, rsi                         
0xf2fe:	mov qword ptr [rax + 0x20], rdx      
0xf302:	mov rax, qword ptr [rip + 0x22107]   #    if (len + il|-|>dynamic_length + 1 > il->size)
0xf309:	mov rdx, qword ptr [rax + 0x48]      
0xf30d:	mov rax, qword ptr [rbp - 0x18]      #    if (len |+| il->dynamic_length + 1 > il->size)
0xf311:	add rax, rdx                         
0xf314:	lea rdx, [rax + 1]                   #    if (len + il->dynamic_length |+| 1 > il->size)
0xf318:	mov rax, qword ptr [rip + 0x220f1]   #    if (len + il->dynamic_length + 1 > il|-|>size)
0xf31f:	mov rax, qword ptr [rax + 0x50]      
0xf323:	cmp rdx, rax                         #    if |(|len + il->dynamic_length + 1 > il->size)
0xf326:	jbe 0xf375                           
0xf328:	mov rax, qword ptr [rip + 0x220e1]   #	|I|L_RESIZE(len + il->dynamic_length + 1);
0xf32f:	mov rdx, qword ptr [rax + 0x48]      
0xf333:	mov rax, qword ptr [rbp - 0x18]      
0xf337:	add rdx, rax                         
0xf33a:	mov rax, qword ptr [rip + 0x220cf]   
0xf341:	add rdx, 1                           
0xf345:	mov qword ptr [rax + 0x50], rdx      
0xf349:	mov rax, qword ptr [rip + 0x220c0]   
0xf350:	mov rdx, qword ptr [rax + 0x50]      
0xf354:	mov rax, qword ptr [rip + 0x220b5]   
0xf35b:	mov rax, qword ptr [rax + 0x58]      
0xf35f:	mov rbx, qword ptr [rip + 0x220aa]   
0xf366:	mov rsi, rdx                         
0xf369:	mov rdi, rax                         
0xf36c:	call 0x24670                         
0xf371:	mov qword ptr [rbx + 0x58], rax      
0xf375:	mov rax, qword ptr [rip + 0x22094]   #	    il|-|>dynamic_length + 1);
0xf37c:	mov rax, qword ptr [rax + 0x48]      
0xf380:	lea rdx, [rax + 1]                   #    |m|emmove(il->buffer + len,
0xf384:	mov rax, qword ptr [rip + 0x22085]   #	    il|-|>buffer + il->static_length,
0xf38b:	mov rcx, qword ptr [rax + 0x58]      
0xf38f:	mov rax, qword ptr [rip + 0x2207a]   #	    il->buffer + il|-|>static_length,
0xf396:	mov rax, qword ptr [rax + 0x40]      
0xf39a:	add rcx, rax                         #	    il->buffer |+| il->static_length,
0xf39d:	mov rax, qword ptr [rip + 0x2206c]   #    memmove(il|-|>buffer + len,
0xf3a4:	mov rsi, qword ptr [rax + 0x58]      
0xf3a8:	mov rax, qword ptr [rbp - 0x18]      #    memmove(il->buffer |+| len,
0xf3ac:	add rax, rsi                         
0xf3af:	mov rsi, rcx                         #    |m|emmove(il->buffer + len,
0xf3b2:	mov rdi, rax                         
0xf3b5:	call 0x4cf0                          
0xf3ba:	mov rax, qword ptr [rip + 0x2204f]   #    memcpy(il|-|>buffer, static_text, len);
0xf3c1:	mov rax, qword ptr [rax + 0x58]      
0xf3c5:	mov rdx, qword ptr [rbp - 0x18]      #    |m|emcpy(il->buffer, static_text, len);
0xf3c9:	mov rcx, qword ptr [rbp - 0x28]      
0xf3cd:	mov rsi, rcx                         
0xf3d0:	mov rdi, rax                         
0xf3d3:	call 0x4b70                          
0xf3d8:	mov rax, qword ptr [rip + 0x22031]   #    toprintable(il|-|>buffer, len);
0xf3df:	mov rax, qword ptr [rax + 0x58]      #    |t|oprintable(il->buffer, len);
0xf3e3:	mov rdx, qword ptr [rbp - 0x18]      
0xf3e7:	mov rsi, rdx                         
0xf3ea:	mov rdi, rax                         
0xf3ed:	call 0x1e5b1                         
0xf3f2:	mov rax, qword ptr [rip + 0x22017]   #    il->length = (il|-|>static_length = len) + il->dynamic_length;
0xf3f9:	mov rdx, qword ptr [rbp - 0x18]      #    il->length = (il->static_length |=| len) + il->dynamic_length;
0xf3fd:	mov qword ptr [rax + 0x40], rdx      
0xf401:	mov rcx, qword ptr [rax + 0x40]      #    il->length = (il|-|>static_length = len) + il->dynamic_length;
0xf405:	mov rax, qword ptr [rip + 0x22004]   #    il->length = (il->static_length = len) + il|-|>dynamic_length;
0xf40c:	mov rdx, qword ptr [rax + 0x48]      
0xf410:	mov rax, qword ptr [rip + 0x21ff9]   #    il|-|>length = (il->static_length = len) + il->dynamic_length;
0xf417:	add rdx, rcx                         #    il->length = (il->static_length = len) |+| il->dynamic_length;
0xf41a:	mov qword ptr [rax + 0x38], rdx      #    il->length |=| (il->static_length = len) + il->dynamic_length;
0xf41e:	mov rax, qword ptr [rip + 0x21feb]   #    il|-|>last_operation = IL_SET_STATIC_TEXT;
0xf425:	mov dword ptr [rax + 0x10], 0x15     #    il->last_operation |=| IL_SET_STATIC_TEXT;
0xf42c:	nop                                  #|}|
0xf42d:	mov rbx, qword ptr [rbp - 8]         
0xf431:	leave                                
0xf432:	ret                                  
0xf433:	endbr64                              #|{|
0xf437:	push rbp                             
0xf438:	mov rbp, rsp                         
0xf43b:	push rbx                             
0xf43c:	sub rsp, 0x28                        
0xf440:	mov qword ptr [rbp - 0x28], rdi      
0xf444:	cmp qword ptr [rbp - 0x28], 0        #    if |(|text == NULL)
0xf449:	je 0xf5f2                            
0xf44f:	mov rax, qword ptr [rbp - 0x28]      #    len = |s|trlen(text);
0xf453:	mov rdi, rax                         
0xf456:	call 0x4960                          
0xf45b:	mov qword ptr [rbp - 0x18], rax      
0xf45f:	mov rax, qword ptr [rip + 0x21faa]   #    if (il|-|>length + len + 1 > il->size)
0xf466:	mov rdx, qword ptr [rax + 0x38]      
0xf46a:	mov rax, qword ptr [rbp - 0x18]      #    if (il->length |+| len + 1 > il->size)
0xf46e:	add rax, rdx                         
0xf471:	lea rdx, [rax + 1]                   #    if (il->length + len |+| 1 > il->size)
0xf475:	mov rax, qword ptr [rip + 0x21f94]   #    if (il->length + len + 1 > il|-|>size)
0xf47c:	mov rax, qword ptr [rax + 0x50]      
0xf480:	cmp rdx, rax                         #    if |(|il->length + len + 1 > il->size)
0xf483:	jbe 0xf4d2                           
0xf485:	mov rax, qword ptr [rip + 0x21f84]   #	|I|L_RESIZE(il->size + len + 1 + 32);
0xf48c:	mov rdx, qword ptr [rax + 0x50]      
0xf490:	mov rax, qword ptr [rbp - 0x18]      
0xf494:	add rdx, rax                         
0xf497:	mov rax, qword ptr [rip + 0x21f72]   
0xf49e:	add rdx, 0x21                        
0xf4a2:	mov qword ptr [rax + 0x50], rdx      
0xf4a6:	mov rax, qword ptr [rip + 0x21f63]   
0xf4ad:	mov rdx, qword ptr [rax + 0x50]      
0xf4b1:	mov rax, qword ptr [rip + 0x21f58]   
0xf4b8:	mov rax, qword ptr [rax + 0x58]      
0xf4bc:	mov rbx, qword ptr [rip + 0x21f4d]   
0xf4c3:	mov rsi, rdx                         
0xf4c6:	mov rdi, rax                         
0xf4c9:	call 0x24670                         
0xf4ce:	mov qword ptr [rbx + 0x58], rax      
0xf4d2:	mov rax, qword ptr [rip + 0x21f37]   #	    il|-|>length - il->point + 1);
0xf4d9:	mov rdx, qword ptr [rax + 0x38]      
0xf4dd:	mov rax, qword ptr [rip + 0x21f2c]   #	    il->length - il|-|>point + 1);
0xf4e4:	mov rcx, qword ptr [rax + 0x18]      
0xf4e8:	mov rax, rdx                         #	    il->length |-| il->point + 1);
0xf4eb:	sub rax, rcx                         
0xf4ee:	lea rdx, [rax + 1]                   #    |m|emmove(il->buffer + il->point + len,
0xf4f2:	mov rax, qword ptr [rip + 0x21f17]   #	    il|-|>buffer + il->point,
0xf4f9:	mov rcx, qword ptr [rax + 0x58]      
0xf4fd:	mov rax, qword ptr [rip + 0x21f0c]   #	    il->buffer + il|-|>point,
0xf504:	mov rax, qword ptr [rax + 0x18]      
0xf508:	add rcx, rax                         #	    il->buffer |+| il->point,
0xf50b:	mov rax, qword ptr [rip + 0x21efe]   #    memmove(il|-|>buffer + il->point + len,
0xf512:	mov rsi, qword ptr [rax + 0x58]      
0xf516:	mov rax, qword ptr [rip + 0x21ef3]   #    memmove(il->buffer + il|-|>point + len,
0xf51d:	mov rdi, qword ptr [rax + 0x18]      
0xf521:	mov rax, qword ptr [rbp - 0x18]      #    memmove(il->buffer + il->point |+| len,
0xf525:	add rax, rdi                         
0xf528:	add rax, rsi                         
0xf52b:	mov rsi, rcx                         #    |m|emmove(il->buffer + il->point + len,
0xf52e:	mov rdi, rax                         
0xf531:	call 0x4cf0                          
0xf536:	mov rax, qword ptr [rip + 0x21ed3]   #    memcpy(il|-|>buffer + il->point, text, len);
0xf53d:	mov rdx, qword ptr [rax + 0x58]      
0xf541:	mov rax, qword ptr [rip + 0x21ec8]   #    memcpy(il->buffer + il|-|>point, text, len);
0xf548:	mov rax, qword ptr [rax + 0x18]      
0xf54c:	lea rcx, [rdx + rax]                 #    memcpy(il->buffer |+| il->point, text, len);
0xf550:	mov rdx, qword ptr [rbp - 0x18]      #    |m|emcpy(il->buffer + il->point, text, len);
0xf554:	mov rax, qword ptr [rbp - 0x28]      
0xf558:	mov rsi, rax                         
0xf55b:	mov rdi, rcx                         
0xf55e:	call 0x4b70                          
0xf563:	mov rax, qword ptr [rip + 0x21ea6]   #    toprintable(il|-|>buffer + il->point, len);
0xf56a:	mov rdx, qword ptr [rax + 0x58]      
0xf56e:	mov rax, qword ptr [rip + 0x21e9b]   #    toprintable(il->buffer + il|-|>point, len);
0xf575:	mov rax, qword ptr [rax + 0x18]      
0xf579:	add rdx, rax                         #    |t|oprintable(il->buffer + il->point, len);
0xf57c:	mov rax, qword ptr [rbp - 0x18]      
0xf580:	mov rsi, rax                         
0xf583:	mov rdi, rdx                         
0xf586:	call 0x1e5b1                         
0xf58b:	mov rax, qword ptr [rip + 0x21e7e]   #    il->point          |+|= len;
0xf592:	mov rcx, qword ptr [rax + 0x18]      
0xf596:	mov rax, qword ptr [rip + 0x21e73]   
0xf59d:	mov rdx, qword ptr [rbp - 0x18]      
0xf5a1:	add rdx, rcx                         
0xf5a4:	mov qword ptr [rax + 0x18], rdx      
0xf5a8:	mov rax, qword ptr [rip + 0x21e61]   #    il->length         |+|= len;
0xf5af:	mov rcx, qword ptr [rax + 0x38]      
0xf5b3:	mov rax, qword ptr [rip + 0x21e56]   
0xf5ba:	mov rdx, qword ptr [rbp - 0x18]      
0xf5be:	add rdx, rcx                         
0xf5c1:	mov qword ptr [rax + 0x38], rdx      
0xf5c5:	mov rax, qword ptr [rip + 0x21e44]   #    il->dynamic_length |+|= len;
0xf5cc:	mov rcx, qword ptr [rax + 0x48]      
0xf5d0:	mov rax, qword ptr [rip + 0x21e39]   
0xf5d7:	mov rdx, qword ptr [rbp - 0x18]      
0xf5db:	add rdx, rcx                         
0xf5de:	mov qword ptr [rax + 0x48], rdx      
0xf5e2:	mov rax, qword ptr [rip + 0x21e27]   #    il|-|>last_operation = IL_INSERT_TEXT;
0xf5e9:	mov dword ptr [rax + 0x10], 0x16     #    il->last_operation |=| IL_INSERT_TEXT;
0xf5f0:	jmp 0xf5f3                           
0xf5f2:	nop                                  #	|r|eturn;
0xf5f3:	mov rbx, qword ptr [rbp - 8]         #|}|
0xf5f7:	leave                                
0xf5f8:	ret                                  
0xf5f9:	endbr64                              #|{|
0xf5fd:	push rbp                             
0xf5fe:	mov rbp, rsp                         
0xf601:	mov rax, qword ptr [rip + 0x21e08]   #    int normal_static_length = il|-|>static_length;
0xf608:	mov rax, qword ptr [rax + 0x40]      
0xf60c:	mov dword ptr [rbp - 4], eax         #    int |n|ormal_static_length = il->static_length;
0xf60f:	mov rax, qword ptr [rip + 0x21dfa]   #    il->buffer |+|= il->static_length;
0xf616:	mov rcx, qword ptr [rax + 0x58]      
0xf61a:	mov rax, qword ptr [rip + 0x21def]   #    il->buffer += il|-|>static_length;
0xf621:	mov rdx, qword ptr [rax + 0x40]      
0xf625:	mov rax, qword ptr [rip + 0x21de4]   #    il->buffer |+|= il->static_length;
0xf62c:	add rdx, rcx                         
0xf62f:	mov qword ptr [rax + 0x58], rdx      
0xf633:	mov rax, qword ptr [rip + 0x21dd6]   #    il->length |-|= il->static_length;
0xf63a:	mov rdx, qword ptr [rax + 0x38]      
0xf63e:	mov rax, qword ptr [rip + 0x21dcb]   #    il->length -= il|-|>static_length;
0xf645:	mov rcx, qword ptr [rax + 0x40]      
0xf649:	mov rax, qword ptr [rip + 0x21dc0]   #    il->length |-|= il->static_length;
0xf650:	sub rdx, rcx                         
0xf653:	mov qword ptr [rax + 0x38], rdx      
0xf657:	mov rax, qword ptr [rip + 0x21db2]   #    il->point |-|= il->static_length;
0xf65e:	mov rdx, qword ptr [rax + 0x18]      
0xf662:	mov rax, qword ptr [rip + 0x21da7]   #    il->point -= il|-|>static_length;
0xf669:	mov rcx, qword ptr [rax + 0x40]      
0xf66d:	mov rax, qword ptr [rip + 0x21d9c]   #    il->point |-|= il->static_length;
0xf674:	sub rdx, rcx                         
0xf677:	mov qword ptr [rax + 0x18], rdx      
0xf67b:	mov rax, qword ptr [rip + 0x21d8e]   #    il->mark |-|= il->static_length;
0xf682:	mov rdx, qword ptr [rax + 0x20]      
0xf686:	mov rax, qword ptr [rip + 0x21d83]   #    il->mark -= il|-|>static_length;
0xf68d:	mov rcx, qword ptr [rax + 0x40]      
0xf691:	mov rax, qword ptr [rip + 0x21d78]   #    il->mark |-|= il->static_length;
0xf698:	sub rdx, rcx                         
0xf69b:	mov qword ptr [rax + 0x20], rdx      
0xf69f:	mov rax, qword ptr [rip + 0x21d6a]   #    il|-|>static_length = 0;
0xf6a6:	mov qword ptr [rax + 0x40], 0        #    il->static_length |=| 0;
0xf6ae:	mov eax, dword ptr [rbp - 4]         #    return |n|ormal_static_length;
0xf6b1:	pop rbp                              #|}|
0xf6b2:	ret                                  
0xf6b3:	endbr64                              #|{|
0xf6b7:	push rbp                             
0xf6b8:	mov rbp, rsp                         
0xf6bb:	mov dword ptr [rbp - 4], edi         
0xf6be:	mov rax, qword ptr [rip + 0x21d4b]   #    il|-|>static_length = normal_static_length;
0xf6c5:	mov edx, dword ptr [rbp - 4]         #    il->static_length |=| normal_static_length;
0xf6c8:	movsxd rdx, edx                      
0xf6cb:	mov qword ptr [rax + 0x40], rdx      
0xf6cf:	mov rax, qword ptr [rip + 0x21d3a]   #    il->buffer |-|= il->static_length;
0xf6d6:	mov rdx, qword ptr [rax + 0x58]      
0xf6da:	mov rax, qword ptr [rip + 0x21d2f]   #    il->buffer -= il|-|>static_length;
0xf6e1:	mov rax, qword ptr [rax + 0x40]      
0xf6e5:	neg rax                              #    il->buffer |-|= il->static_length;
0xf6e8:	mov rcx, rax                         
0xf6eb:	mov rax, qword ptr [rip + 0x21d1e]   
0xf6f2:	add rdx, rcx                         
0xf6f5:	mov qword ptr [rax + 0x58], rdx      
0xf6f9:	mov rax, qword ptr [rip + 0x21d10]   #    il->length |+|= il->static_length;
0xf700:	mov rcx, qword ptr [rax + 0x38]      
0xf704:	mov rax, qword ptr [rip + 0x21d05]   #    il->length += il|-|>static_length;
0xf70b:	mov rdx, qword ptr [rax + 0x40]      
0xf70f:	mov rax, qword ptr [rip + 0x21cfa]   #    il->length |+|= il->static_length;
0xf716:	add rdx, rcx                         
0xf719:	mov qword ptr [rax + 0x38], rdx      
0xf71d:	mov rax, qword ptr [rip + 0x21cec]   #    il->point |+|= il->static_length;
0xf724:	mov rcx, qword ptr [rax + 0x18]      
0xf728:	mov rax, qword ptr [rip + 0x21ce1]   #    il->point += il|-|>static_length;
0xf72f:	mov rdx, qword ptr [rax + 0x40]      
0xf733:	mov rax, qword ptr [rip + 0x21cd6]   #    il->point |+|= il->static_length;
0xf73a:	add rdx, rcx                         
0xf73d:	mov qword ptr [rax + 0x18], rdx      
0xf741:	mov rax, qword ptr [rip + 0x21cc8]   #    il->mark |+|= il->static_length;
0xf748:	mov rcx, qword ptr [rax + 0x20]      
0xf74c:	mov rax, qword ptr [rip + 0x21cbd]   #    il->mark += il|-|>static_length;
0xf753:	mov rdx, qword ptr [rax + 0x40]      
0xf757:	mov rax, qword ptr [rip + 0x21cb2]   #    il->mark |+|= il->static_length;
0xf75e:	add rdx, rcx                         
0xf761:	mov qword ptr [rax + 0x20], rdx      
0xf765:	nop                                  #|}|
0xf766:	pop rbp                              
0xf767:	ret                                  
0xf768:	endbr64                              #|{|
0xf76c:	push rbp                             
0xf76d:	mov rbp, rsp                         
0xf770:	sub rsp, 0x20                        
0xf774:	mov qword ptr [rbp - 0x10], 0        #    size_t |n|ormal_static_length = 0;
0xf77c:	mov rax, qword ptr [rip + 0x21c8d]   #    int il_too_small = il|-|>columns < il->static_length + 3;
0xf783:	mov rdx, qword ptr [rax + 0x28]      
0xf787:	mov rax, qword ptr [rip + 0x21c82]   #    int il_too_small = il->columns < il|-|>static_length + 3;
0xf78e:	mov rax, qword ptr [rax + 0x40]      
0xf792:	add rax, 3                           #    int il_too_small = il->columns < il->static_length |+| 3;
0xf796:	cmp rdx, rax                         #    int il_too_small = il->columns |<| il->static_length + 3;
0xf799:	setb al                              
0xf79c:	movzx eax, al                        #    int |i|l_too_small = il->columns < il->static_length + 3;
0xf79f:	mov dword ptr [rbp - 0x18], eax      
0xf7a2:	mov rax, qword ptr [rip + 0x21c67]   #	       il|-|>error ? InputLineErrorBackground : InputLineBackground);
0xf7a9:	mov eax, dword ptr [rax + 0xc]       
0xf7ac:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7ae:	je 0xf7b8                            
0xf7b0:	mov edx, dword ptr [rip + 0x20aca]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7b6:	jmp 0xf7be                           
0xf7b8:	mov edx, dword ptr [rip + 0x20ab6]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7be:	mov rax, qword ptr [rip + 0x21c4b]   #	       il|-|>error ? InputLineErrorForeground : InputLineForeground,
0xf7c5:	mov eax, dword ptr [rax + 0xc]       
0xf7c8:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7ca:	je 0xf7d4                            
0xf7cc:	mov ecx, dword ptr [rip + 0x20aaa]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7d2:	jmp 0xf7da                           
0xf7d4:	mov ecx, dword ptr [rip + 0x20a96]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7da:	mov rax, qword ptr [rip + 0x21c2f]   #    tty_colors(il|-|>error ? InputLineErrorBrightness : InputLineBrightness,
0xf7e1:	mov eax, dword ptr [rax + 0xc]       
0xf7e4:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7e6:	je 0xf7f0                            
0xf7e8:	mov eax, dword ptr [rip + 0x20a96]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7ee:	jmp 0xf7f6                           
0xf7f0:	mov eax, dword ptr [rip + 0x20a82]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7f6:	mov esi, ecx                         #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf7f8:	mov edi, eax                         
0xf7fa:	call 0xbf89                          
0xf7ff:	cmp dword ptr [rbp - 0x18], 0        #    if |(|il_too_small)
0xf803:	je 0xf815                            
0xf805:	mov eax, 0                           #	normal_static_length = |i|l_hide_static();
0xf80a:	call 0xf5f9                          
0xf80f:	cdqe                                 #	normal_static_length |=| il_hide_static();
0xf811:	mov qword ptr [rbp - 0x10], rax      
0xf815:	mov eax, 0                           #    scroll = |i|l_compute_scroll();
0xf81a:	call 0xdf6b                          
0xf81f:	mov dword ptr [rbp - 0x14], eax      #    scroll |=| il_compute_scroll();
0xf822:	mov rax, qword ptr [rip + 0x21be7]   #    len = ((il|-|>point >= il->columns) ?
0xf829:	mov rdx, qword ptr [rax + 0x18]      
0xf82d:	mov rax, qword ptr [rip + 0x21bdc]   #    len = ((il->point >= il|-|>columns) ?
0xf834:	mov rax, qword ptr [rax + 0x28]      
0xf838:	cmp rdx, rax                         #	   (scroll - 1) - ((il->point - il->columns) % scroll) |:| 0);
0xf83b:	jb 0xf898                            
0xf83d:	mov rax, qword ptr [rip + 0x21bcc]   #	   il|-|>point - il->columns + 1 +
0xf844:	mov rdx, qword ptr [rax + 0x18]      
0xf848:	mov rax, qword ptr [rip + 0x21bc1]   #	   il->point - il|-|>columns + 1 +
0xf84f:	mov rax, qword ptr [rax + 0x28]      
0xf853:	sub rdx, rax                         #	   il->point |-| il->columns + 1 +
0xf856:	mov eax, dword ptr [rbp - 0x14]      #	   (scroll |-| 1) - ((il->point - il->columns) % scroll) : 0);
0xf859:	sub eax, 1                           
0xf85c:	cdqe                                 
0xf85e:	lea rsi, [rdx + rax]                 #	   il->point - il->columns + 1 |+|
0xf862:	mov rax, qword ptr [rip + 0x21ba7]   #	   (scroll - 1) - ((il|-|>point - il->columns) % scroll) : 0);
0xf869:	mov rdx, qword ptr [rax + 0x18]      
0xf86d:	mov rax, qword ptr [rip + 0x21b9c]   #	   (scroll - 1) - ((il->point - il|-|>columns) % scroll) : 0);
0xf874:	mov rcx, qword ptr [rax + 0x28]      
0xf878:	mov rax, rdx                         #	   (scroll - 1) - ((il->point |-| il->columns) % scroll) : 0);
0xf87b:	sub rax, rcx                         
0xf87e:	mov edx, dword ptr [rbp - 0x14]      #	   (scroll - 1) - ((il->point - il->columns) |%| scroll) : 0);
0xf881:	movsxd rcx, edx                      
0xf884:	mov edx, 0                           
0xf889:	div rcx                              
0xf88c:	mov rax, rsi                         #	   (scroll - 1) |-| ((il->point - il->columns) % scroll) : 0);
0xf88f:	sub rax, rdx                         
0xf892:	add rax, 1                           #	   (scroll - 1) - ((il->point - il->columns) % scroll) |:| 0);
0xf896:	jmp 0xf89d                           
0xf898:	mov eax, 0                           #	   (scroll - 1) - ((il->point - il->columns) % scroll) |:| 0);
0xf89d:	mov qword ptr [rbp - 8], rax         #    len |=| ((il->point >= il->columns) ?
0xf8a1:	mov rax, qword ptr [rip + 0x21b68]   #    window_goto(il->window, 0, il|-|>point - len);
0xf8a8:	mov rax, qword ptr [rax + 0x18]      
0xf8ac:	mov edx, eax                         #    window_goto(il->window, 0, il->point |-| len);
0xf8ae:	mov rax, qword ptr [rbp - 8]         
0xf8b2:	mov ecx, eax                         
0xf8b4:	mov eax, edx                         
0xf8b6:	sub eax, ecx                         
0xf8b8:	mov edx, eax                         #    |w|indow_goto(il->window, 0, il->point - len);
0xf8ba:	mov rax, qword ptr [rip + 0x21b4f]   #    window_goto(il|-|>window, 0, il->point - len);
0xf8c1:	mov rax, qword ptr [rax]             #    |w|indow_goto(il->window, 0, il->point - len);
0xf8c4:	mov esi, 0                           
0xf8c9:	mov rdi, rax                         
0xf8cc:	call 0xdc1e                          
0xf8d1:	cmp dword ptr [rbp - 0x18], 0        #    if |(|il_too_small)
0xf8d5:	je 0xf8e8                            
0xf8d7:	mov rax, qword ptr [rbp - 0x10]      #	|i|l_restore_static(normal_static_length);
0xf8db:	mov rdi, rax                         
0xf8de:	mov eax, 0                           
0xf8e3:	call 0xf6b3                          
0xf8e8:	nop                                  #|}|
0xf8e9:	leave                                
0xf8ea:	ret                                  
0xf8eb:	endbr64                              #|{|
0xf8ef:	push rbp                             
0xf8f0:	mov rbp, rsp                         
0xf8f3:	sub rsp, 0x30                        
0xf8f7:	mov rax, qword ptr fs:[0x28]         #|{|
0xf900:	mov qword ptr [rbp - 8], rax         
0xf904:	xor eax, eax                         
0xf906:	mov qword ptr [rbp - 0x18], 0        #    size_t |n|ormal_static_length = 0;
0xf90e:	mov rax, qword ptr [rip + 0x21afb]   #    int il_too_small = il|-|>columns < il->static_length + 3;
0xf915:	mov rdx, qword ptr [rax + 0x28]      
0xf919:	mov rax, qword ptr [rip + 0x21af0]   #    int il_too_small = il->columns < il|-|>static_length + 3;
0xf920:	mov rax, qword ptr [rax + 0x40]      
0xf924:	add rax, 3                           #    int il_too_small = il->columns < il->static_length |+| 3;
0xf928:	cmp rdx, rax                         #    int il_too_small = il->columns |<| il->static_length + 3;
0xf92b:	setb al                              
0xf92e:	movzx eax, al                        #    int |i|l_too_small = il->columns < il->static_length + 3;
0xf931:	mov dword ptr [rbp - 0x24], eax      
0xf934:	lea rax, [rbp - 0x25]                #    |t|ty_save(&status);
0xf938:	mov rdi, rax                         
0xf93b:	call 0xc04b                          
0xf940:	mov rax, qword ptr [rip + 0x21ac9]   #	       il|-|>error ? InputLineErrorBackground : InputLineBackground);
0xf947:	mov eax, dword ptr [rax + 0xc]       
0xf94a:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf94c:	je 0xf956                            
0xf94e:	mov edx, dword ptr [rip + 0x2092c]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf954:	jmp 0xf95c                           
0xf956:	mov edx, dword ptr [rip + 0x20918]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf95c:	mov rax, qword ptr [rip + 0x21aad]   #	       il|-|>error ? InputLineErrorForeground : InputLineForeground,
0xf963:	mov eax, dword ptr [rax + 0xc]       
0xf966:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf968:	je 0xf972                            
0xf96a:	mov ecx, dword ptr [rip + 0x2090c]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf970:	jmp 0xf978                           
0xf972:	mov ecx, dword ptr [rip + 0x208f8]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf978:	mov rax, qword ptr [rip + 0x21a91]   #    tty_colors(il|-|>error ? InputLineErrorBrightness : InputLineBrightness,
0xf97f:	mov eax, dword ptr [rax + 0xc]       
0xf982:	test eax, eax                        #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf984:	je 0xf98e                            
0xf986:	mov eax, dword ptr [rip + 0x208f8]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf98c:	jmp 0xf994                           
0xf98e:	mov eax, dword ptr [rip + 0x208e4]   #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf994:	mov esi, ecx                         #    |t|ty_colors(il->error ? InputLineErrorBrightness : InputLineBrightness,
0xf996:	mov edi, eax                         
0xf998:	call 0xbf89                          
0xf99d:	cmp dword ptr [rbp - 0x24], 0        #    if |(|il_too_small)
0xf9a1:	je 0xf9b3                            
0xf9a3:	mov eax, 0                           #	normal_static_length = |i|l_hide_static();
0xf9a8:	call 0xf5f9                          
0xf9ad:	cdqe                                 #	normal_static_length |=| il_hide_static();
0xf9af:	mov qword ptr [rbp - 0x18], rax      
0xf9b3:	mov eax, 0                           #    scroll = |i|l_compute_scroll();
0xf9b8:	call 0xdf6b                          
0xf9bd:	mov dword ptr [rbp - 0x20], eax      #    scroll |=| il_compute_scroll();
0xf9c0:	mov rax, qword ptr [rip + 0x21a49]   #    len = ((il|-|>point >= il->columns) ?
0xf9c7:	mov rdx, qword ptr [rax + 0x18]      
0xf9cb:	mov rax, qword ptr [rip + 0x21a3e]   #    len = ((il->point >= il|-|>columns) ?
0xf9d2:	mov rax, qword ptr [rax + 0x28]      
0xf9d6:	cmp rdx, rax                         #    len |=| ((il->point >= il->columns) ?
0xf9d9:	jb 0xfa30                            
0xf9db:	mov rax, qword ptr [rip + 0x21a2e]   #	   il|-|>point - il->columns + 1 +
0xf9e2:	mov rax, qword ptr [rax + 0x18]      
0xf9e6:	mov edx, eax                         #	   il->point |-| il->columns + 1 +
0xf9e8:	mov rax, qword ptr [rip + 0x21a21]   #	   il->point - il|-|>columns + 1 +
0xf9ef:	mov rax, qword ptr [rax + 0x28]      
0xf9f3:	sub edx, eax                         #	   il->point |-| il->columns + 1 +
0xf9f5:	mov eax, dword ptr [rbp - 0x20]      #	   il->point - il->columns + 1 |+|
0xf9f8:	lea esi, [rdx + rax]                 
0xf9fb:	mov rax, qword ptr [rip + 0x21a0e]   #	   (scroll - 1) - ((il|-|>point - il->columns) % scroll) : 0);
0xfa02:	mov rdx, qword ptr [rax + 0x18]      
0xfa06:	mov rax, qword ptr [rip + 0x21a03]   #	   (scroll - 1) - ((il->point - il|-|>columns) % scroll) : 0);
0xfa0d:	mov rcx, qword ptr [rax + 0x28]      
0xfa11:	mov rax, rdx                         #	   (scroll - 1) - ((il->point |-| il->columns) % scroll) : 0);
0xfa14:	sub rax, rcx                         
0xfa17:	mov edx, dword ptr [rbp - 0x20]      #	   (scroll - 1) - ((il->point - il->columns) |%| scroll) : 0);
0xfa1a:	movsxd rcx, edx                      
0xfa1d:	mov edx, 0                           
0xfa22:	div rcx                              
0xfa25:	mov rax, rdx                         
0xfa28:	mov edx, eax                         #	   (scroll - 1) |-| ((il->point - il->columns) % scroll) : 0);
0xfa2a:	mov eax, esi                         #    len |=| ((il->point >= il->columns) ?
0xfa2c:	sub eax, edx                         
0xfa2e:	jmp 0xfa35                           
0xfa30:	mov eax, 0                           #    len |=| ((il->point >= il->columns) ?
0xfa35:	mov dword ptr [rbp - 0x1c], eax      #    len |=| ((il->point >= il->columns) ?
0xfa38:	mov rax, qword ptr [rip + 0x219d1]   #    temp = xmalloc(il|-|>columns);
0xfa3f:	mov rax, qword ptr [rax + 0x28]      #    temp = |x|malloc(il->columns);
0xfa43:	mov rdi, rax                         
0xfa46:	call 0x24650                         
0xfa4b:	mov qword ptr [rbp - 0x10], rax      
0xfa4f:	mov rax, qword ptr [rip + 0x219ba]   #    memset(temp, ' ', il|-|>columns);
0xfa56:	mov rdx, qword ptr [rax + 0x28]      #    |m|emset(temp, ' ', il->columns);
0xfa5a:	mov rax, qword ptr [rbp - 0x10]      
0xfa5e:	mov esi, 0x20                        
0xfa63:	mov rdi, rax                         
0xfa66:	call 0x4a10                          
0xfa6b:	mov rax, qword ptr [rip + 0x2199e]   #    if (il|-|>echo)
0xfa72:	mov eax, dword ptr [rax + 8]         
0xfa75:	test eax, eax                        #    if |(|il->echo)
0xfa77:	je 0xfaf1                            
0xfa79:	mov rax, qword ptr [rip + 0x21990]   #	       |m|in(il->length   - il->static_length - len,
0xfa80:	mov rdx, qword ptr [rax + 0x38]      
0xfa84:	mov rax, qword ptr [rip + 0x21985]   
0xfa8b:	mov rcx, qword ptr [rax + 0x40]      
0xfa8f:	mov rax, rdx                         
0xfa92:	sub rax, rcx                         
0xfa95:	mov ecx, dword ptr [rbp - 0x1c]      
0xfa98:	sub rax, rcx                         
0xfa9b:	mov rdx, rax                         
0xfa9e:	mov rax, qword ptr [rip + 0x2196b]   
0xfaa5:	mov rcx, qword ptr [rax + 0x28]      
0xfaa9:	mov rax, qword ptr [rip + 0x21960]   
0xfab0:	mov rsi, qword ptr [rax + 0x40]      
0xfab4:	mov rax, rcx                         
0xfab7:	sub rax, rsi                         
0xfaba:	cmp rdx, rax                         #	|m|emcpy(temp, il->buffer + il->static_length + len,
0xfabd:	cmova rdx, rax                       
0xfac1:	mov rax, qword ptr [rip + 0x21948]   #	memcpy(temp, il|-|>buffer + il->static_length + len,
0xfac8:	mov rcx, qword ptr [rax + 0x58]      
0xfacc:	mov rax, qword ptr [rip + 0x2193d]   #	memcpy(temp, il->buffer + il|-|>static_length + len,
0xfad3:	mov rsi, qword ptr [rax + 0x40]      
0xfad7:	mov eax, dword ptr [rbp - 0x1c]      #	memcpy(temp, il->buffer + il->static_length |+| len,
0xfada:	add rax, rsi                         
0xfadd:	add rcx, rax                         
0xfae0:	mov rax, qword ptr [rbp - 0x10]      #	|m|emcpy(temp, il->buffer + il->static_length + len,
0xfae4:	mov rsi, rcx                         
0xfae7:	mov rdi, rax                         
0xfaea:	call 0x4b70                          
0xfaef:	jmp 0xfb4a                           
0xfaf1:	mov rax, qword ptr [rip + 0x21918]   #	       |m|in(il->length   - il->static_length - len,
0xfaf8:	mov rdx, qword ptr [rax + 0x38]      
0xfafc:	mov rax, qword ptr [rip + 0x2190d]   
0xfb03:	mov rcx, qword ptr [rax + 0x40]      
0xfb07:	mov rax, rdx                         
0xfb0a:	sub rax, rcx                         
0xfb0d:	mov ecx, dword ptr [rbp - 0x1c]      
0xfb10:	sub rax, rcx                         
0xfb13:	mov rdx, rax                         
0xfb16:	mov rax, qword ptr [rip + 0x218f3]   
0xfb1d:	mov rcx, qword ptr [rax + 0x28]      
0xfb21:	mov rax, qword ptr [rip + 0x218e8]   
0xfb28:	mov rsi, qword ptr [rax + 0x40]      
0xfb2c:	mov rax, rcx                         
0xfb2f:	sub rax, rsi                         
0xfb32:	cmp rdx, rax                         #	|m|emset(temp, '*',
0xfb35:	cmova rdx, rax                       
0xfb39:	mov rax, qword ptr [rbp - 0x10]      
0xfb3d:	mov esi, 0x2a                        
0xfb42:	mov rdi, rax                         
0xfb45:	call 0x4a10                          
0xfb4a:	mov rax, qword ptr [rip + 0x218bf]   #    window_goto(il|-|>window, 0, 0);
0xfb51:	mov rax, qword ptr [rax]             #    |w|indow_goto(il->window, 0, 0);
0xfb54:	mov edx, 0                           
0xfb59:	mov esi, 0                           
0xfb5e:	mov rdi, rax                         
0xfb61:	call 0xdc1e                          
0xfb66:	cmp dword ptr [rbp - 0x24], 0        #    if |(|!il_too_small)
0xfb6a:	jne 0xfb99                           
0xfb6c:	mov rax, qword ptr [rip + 0x2189d]   #	window_puts(il->window, il->buffer, il|-|>static_length);
0xfb73:	mov rax, qword ptr [rax + 0x40]      
0xfb77:	mov edx, eax                         #	|w|indow_puts(il->window, il->buffer, il->static_length);
0xfb79:	mov rax, qword ptr [rip + 0x21890]   #	window_puts(il->window, il|-|>buffer, il->static_length);
0xfb80:	mov rcx, qword ptr [rax + 0x58]      #	|w|indow_puts(il->window, il->buffer, il->static_length);
0xfb84:	mov rax, qword ptr [rip + 0x21885]   #	window_puts(il|-|>window, il->buffer, il->static_length);
0xfb8b:	mov rax, qword ptr [rax]             #	|w|indow_puts(il->window, il->buffer, il->static_length);
0xfb8e:	mov rsi, rcx                         
0xfb91:	mov rdi, rax                         
0xfb94:	call 0xdb1a                          
0xfb99:	mov rax, qword ptr [rip + 0x21870]   #    window_puts(il->window, temp, il|-|>columns - il->static_length);
0xfba0:	mov rax, qword ptr [rax + 0x28]      
0xfba4:	mov edx, eax                         #    window_puts(il->window, temp, il->columns |-| il->static_length);
0xfba6:	mov rax, qword ptr [rip + 0x21863]   #    window_puts(il->window, temp, il->columns - il|-|>static_length);
0xfbad:	mov rax, qword ptr [rax + 0x40]      
0xfbb1:	mov ecx, eax                         #    window_puts(il->window, temp, il->columns |-| il->static_length);
0xfbb3:	mov eax, edx                         
0xfbb5:	sub eax, ecx                         
0xfbb7:	mov edx, eax                         #    |w|indow_puts(il->window, temp, il->columns - il->static_length);
0xfbb9:	mov rax, qword ptr [rip + 0x21850]   #    window_puts(il|-|>window, temp, il->columns - il->static_length);
0xfbc0:	mov rax, qword ptr [rax]             #    |w|indow_puts(il->window, temp, il->columns - il->static_length);
0xfbc3:	mov rcx, qword ptr [rbp - 0x10]      
0xfbc7:	mov rsi, rcx                         
0xfbca:	mov rdi, rax                         
0xfbcd:	call 0xdb1a                          
0xfbd2:	mov rax, qword ptr [rip + 0x21837]   #    window_goto(il->window, 0, il|-|>point - len);
0xfbd9:	mov rax, qword ptr [rax + 0x18]      
0xfbdd:	sub eax, dword ptr [rbp - 0x1c]      #    window_goto(il->window, 0, il->point |-| len);
0xfbe0:	mov edx, eax                         #    |w|indow_goto(il->window, 0, il->point - len);
0xfbe2:	mov rax, qword ptr [rip + 0x21827]   #    window_goto(il|-|>window, 0, il->point - len);
0xfbe9:	mov rax, qword ptr [rax]             #    |w|indow_goto(il->window, 0, il->point - len);
0xfbec:	mov esi, 0                           
0xfbf1:	mov rdi, rax                         
0xfbf4:	call 0xdc1e                          
0xfbf9:	cmp dword ptr [rbp - 0x24], 0        #    if |(|il_too_small)
0xfbfd:	je 0xfc10                            
0xfbff:	mov rax, qword ptr [rbp - 0x18]      #	|i|l_restore_static(normal_static_length);
0xfc03:	mov rdi, rax                         
0xfc06:	mov eax, 0                           
0xfc0b:	call 0xf6b3                          
0xfc10:	mov rax, qword ptr [rbp - 0x10]      #    |x|free(temp);
0xfc14:	mov rdi, rax                         
0xfc17:	call 0x1eeae                         
0xfc1c:	lea rax, [rbp - 0x25]                #    |t|ty_restore(&status);
0xfc20:	mov rdi, rax                         
0xfc23:	call 0xc067                          
0xfc28:	nop                                  #|}|
0xfc29:	mov rax, qword ptr [rbp - 8]         
0xfc2d:	sub rax, qword ptr fs:[0x28]         
0xfc36:	je 0xfc3d                            
0xfc38:	call 0x4980                          
0xfc3d:	leave                                
0xfc3e:	ret                                  
0xfc3f:	endbr64                              #|{|
0xfc43:	push rbp                             
0xfc44:	mov rbp, rsp                         
0xfc47:	sub rsp, 0x10                        
0xfc4b:	mov qword ptr [rbp - 8], rdi         
0xfc4f:	mov rax, qword ptr [rip + 0x217ba]   #    *dest = xrealloc(*dest, il|-|>dynamic_length + 1);
0xfc56:	mov rax, qword ptr [rax + 0x48]      
0xfc5a:	lea rdx, [rax + 1]                   #    *dest = |x|realloc(*dest, il->dynamic_length + 1);
0xfc5e:	mov rax, qword ptr [rbp - 8]         
0xfc62:	mov rax, qword ptr [rax]             
0xfc65:	mov rsi, rdx                         
0xfc68:	mov rdi, rax                         
0xfc6b:	call 0x24670                         
0xfc70:	mov rdx, qword ptr [rbp - 8]         #    *dest |=| xrealloc(*dest, il->dynamic_length + 1);
0xfc74:	mov qword ptr [rdx], rax             
0xfc77:	mov rax, qword ptr [rip + 0x21792]   #    memcpy(*dest, il->buffer + il->static_length, il|-|>dynamic_length + 1);
0xfc7e:	mov rax, qword ptr [rax + 0x48]      
0xfc82:	lea rdx, [rax + 1]                   #    |m|emcpy(*dest, il->buffer + il->static_length, il->dynamic_length + 1);
0xfc86:	mov rax, qword ptr [rip + 0x21783]   #    memcpy(*dest, il|-|>buffer + il->static_length, il->dynamic_length + 1);
0xfc8d:	mov rcx, qword ptr [rax + 0x58]      
0xfc91:	mov rax, qword ptr [rip + 0x21778]   #    memcpy(*dest, il->buffer + il|-|>static_length, il->dynamic_length + 1);
0xfc98:	mov rax, qword ptr [rax + 0x40]      
0xfc9c:	add rcx, rax                         #    memcpy(*dest, il->buffer |+| il->static_length, il->dynamic_length + 1);
0xfc9f:	mov rax, qword ptr [rbp - 8]         #    |m|emcpy(*dest, il->buffer + il->static_length, il->dynamic_length + 1);
0xfca3:	mov rax, qword ptr [rax]             
0xfca6:	mov rsi, rcx                         
0xfca9:	mov rdi, rax                         
0xfcac:	call 0x4b70                          
0xfcb1:	mov rax, qword ptr [rip + 0x21758]   #    return il|-|>dynamic_length;
0xfcb8:	mov rax, qword ptr [rax + 0x48]      
0xfcbc:	leave                                #|}|
0xfcbd:	ret                                  
0xfcbe:	endbr64                              #|{|
0xfcc2:	push rbp                             
0xfcc3:	mov rbp, rsp                         
0xfcc6:	sub rsp, 0x10                        
0xfcca:	mov qword ptr [rbp - 8], rdi         
0xfcce:	mov eax, 0                           #    |i|l_reset_line();
0xfcd3:	call 0xece2                          
0xfcd8:	cmp qword ptr [rbp - 8], 0           #    |i|l_set_static_text(message ? message : "Wait....");
0xfcdd:	je 0xfce5                            
0xfcdf:	mov rax, qword ptr [rbp - 8]         #    |i|l_set_static_text(message ? message : "Wait....");
0xfce3:	jmp 0xfcec                           
0xfce5:	lea rax, [rip + 0x18334]             #    |i|l_set_static_text(message ? message : "Wait....");
0xfcec:	mov rdi, rax                         #    |i|l_set_static_text(message ? message : "Wait....");
0xfcef:	call 0xf285                          
0xfcf4:	mov eax, 0                           #    |i|l_update();
0xfcf9:	call 0xf8eb                          
0xfcfe:	mov eax, 0                           #    |i|l_update_point();
0xfd03:	call 0xf768                          
0xfd08:	nop                                  #|}|
0xfd09:	leave                                
0xfd0a:	ret                                  
0xfd0b:	endbr64                              #|{|
0xfd0f:	push rbp                             
0xfd10:	mov rbp, rsp                         
0xfd13:	mov dword ptr [rbp - 4], edi         
0xfd16:	mov rax, qword ptr [rip + 0x216f3]   #    il|-|>error = flag;
0xfd1d:	mov edx, dword ptr [rbp - 4]         #    il->error |=| flag;
0xfd20:	mov dword ptr [rax + 0xc], edx       
0xfd23:	nop                                  #|}|
0xfd24:	pop rbp                              
0xfd25:	ret                                  
0xfd26:	endbr64                              #|{|
0xfd2a:	push rbp                             
0xfd2b:	mov rbp, rsp                         
0xfd2e:	push rbx                             
0xfd2f:	sub rsp, 0x28                        
0xfd33:	mov dword ptr [rbp - 0x24], edi      
0xfd36:	cmp dword ptr [rbp - 0x24], 2        #    |s|witch (dir)
0xfd3a:	je 0xfe8e                            
0xfd40:	cmp dword ptr [rbp - 0x24], 2        
0xfd44:	jg 0x10098                           
0xfd4a:	cmp dword ptr [rbp - 0x24], 0        
0xfd4e:	je 0xffca                            
0xfd54:	cmp dword ptr [rbp - 0x24], 1        
0xfd58:	jne 0x10098                          
0xfd5e:	mov eax, dword ptr [rip + 0x216b4]   #	    if (|!|browsing)
0xfd64:	test eax, eax                        #	    if |(|!browsing)
0xfd66:	jne 0xfd82                           
0xfd68:	mov dword ptr [rip + 0x216a6], 1     #		browsing |=| 1;
0xfd72:	mov eax, 0                           #		last_history_position = |w|here_history();
0xfd77:	call 0x20455                         
0xfd7c:	mov dword ptr [rip + 0x2169a], eax   #		last_history_position |=| where_history();
0xfd82:	mov eax, 0                           #	    if ((hist = |p|revious_history()))
0xfd87:	call 0x210c6                         
0xfd8c:	mov qword ptr [rbp - 0x18], rax      
0xfd90:	cmp qword ptr [rbp - 0x18], 0        #	    if |(|(hist = previous_history()))
0xfd95:	je 0x1009b                           
0xfd9b:	mov rax, qword ptr [rbp - 0x18]      #		il->dynamic_length = strlen(hist|-|>line);
0xfd9f:	mov rax, qword ptr [rax]             
0xfda2:	mov rbx, qword ptr [rip + 0x21667]   #		il|-|>dynamic_length = strlen(hist->line);
0xfda9:	mov rdi, rax                         #		il->dynamic_length = |s|trlen(hist->line);
0xfdac:	call 0x4960                          
0xfdb1:	mov qword ptr [rbx + 0x48], rax      #		il->dynamic_length |=| strlen(hist->line);
0xfdb5:	mov rax, qword ptr [rip + 0x21654]   #		il->length         = il|-|>static_length + il->dynamic_length;
0xfdbc:	mov rcx, qword ptr [rax + 0x40]      
0xfdc0:	mov rax, qword ptr [rip + 0x21649]   #		il->length         = il->static_length + il|-|>dynamic_length;
0xfdc7:	mov rdx, qword ptr [rax + 0x48]      
0xfdcb:	mov rax, qword ptr [rip + 0x2163e]   #		il|-|>length         = il->static_length + il->dynamic_length;
0xfdd2:	add rdx, rcx                         #		il->length         = il->static_length |+| il->dynamic_length;
0xfdd5:	mov qword ptr [rax + 0x38], rdx      #		il->length         |=| il->static_length + il->dynamic_length;
0xfdd9:	mov rdx, qword ptr [rip + 0x21630]   #		il->point          = il|-|>length;
0xfde0:	mov rax, qword ptr [rip + 0x21629]   #		il|-|>point          = il->length;
0xfde7:	mov rdx, qword ptr [rdx + 0x38]      #		il->point          = il|-|>length;
0xfdeb:	mov qword ptr [rax + 0x18], rdx      #		il->point          |=| il->length;
0xfdef:	mov rax, qword ptr [rip + 0x2161a]   #		if (il|-|>length + 1 > il->size)
0xfdf6:	mov rax, qword ptr [rax + 0x38]      
0xfdfa:	lea rdx, [rax + 1]                   #		if (il->length |+| 1 > il->size)
0xfdfe:	mov rax, qword ptr [rip + 0x2160b]   #		if (il->length + 1 > il|-|>size)
0xfe05:	mov rax, qword ptr [rax + 0x50]      
0xfe09:	cmp rdx, rax                         #		if |(|il->length + 1 > il->size)
0xfe0c:	jbe 0xfe54                           
0xfe0e:	mov rax, qword ptr [rip + 0x215fb]   #		    |I|L_RESIZE(il->length + 1);
0xfe15:	mov rdx, qword ptr [rax + 0x38]      
0xfe19:	mov rax, qword ptr [rip + 0x215f0]   
0xfe20:	add rdx, 1                           
0xfe24:	mov qword ptr [rax + 0x50], rdx      
0xfe28:	mov rax, qword ptr [rip + 0x215e1]   
0xfe2f:	mov rdx, qword ptr [rax + 0x50]      
0xfe33:	mov rax, qword ptr [rip + 0x215d6]   
0xfe3a:	mov rax, qword ptr [rax + 0x58]      
0xfe3e:	mov rbx, qword ptr [rip + 0x215cb]   
0xfe45:	mov rsi, rdx                         
0xfe48:	mov rdi, rax                         
0xfe4b:	call 0x24670                         
0xfe50:	mov qword ptr [rbx + 0x58], rax      
0xfe54:	mov rax, qword ptr [rbp - 0x18]      #		strcpy(il->buffer + il->static_length, hist|-|>line);
0xfe58:	mov rax, qword ptr [rax]             
0xfe5b:	mov rdx, qword ptr [rip + 0x215ae]   #		strcpy(il|-|>buffer + il->static_length, hist->line);
0xfe62:	mov rcx, qword ptr [rdx + 0x58]      
0xfe66:	mov rdx, qword ptr [rip + 0x215a3]   #		strcpy(il->buffer + il|-|>static_length, hist->line);
0xfe6d:	mov rdx, qword ptr [rdx + 0x40]      
0xfe71:	add rdx, rcx                         #		|s|trcpy(il->buffer + il->static_length, hist->line);
0xfe74:	mov rsi, rax                         
0xfe77:	mov rdi, rdx                         
0xfe7a:	call 0x4870                          
0xfe7f:	mov eax, 0                           #		|i|l_update();
0xfe84:	call 0xf8eb                          
0xfe89:	jmp 0x1009b                          #	    |b|reak;
0xfe8e:	mov eax, dword ptr [rip + 0x21584]   #	    if (|!|browsing)
0xfe94:	test eax, eax                        #	    if |(|!browsing)
0xfe96:	jne 0xfeb2                           
0xfe98:	mov dword ptr [rip + 0x21576], 1     #		browsing |=| 1;
0xfea2:	mov eax, 0                           #		last_history_position = |w|here_history();
0xfea7:	call 0x20455                         
0xfeac:	mov dword ptr [rip + 0x2156a], eax   #		last_history_position |=| where_history();
0xfeb2:	mov eax, 0                           #	    if ((hist = |n|ext_history()))
0xfeb7:	call 0x21109                         
0xfebc:	mov qword ptr [rbp - 0x18], rax      
0xfec0:	cmp qword ptr [rbp - 0x18], 0        #	    if |(|(hist = next_history()))
0xfec5:	je 0xffb1                            
0xfecb:	mov rax, qword ptr [rbp - 0x18]      #		il->dynamic_length = strlen(hist|-|>line);
0xfecf:	mov rax, qword ptr [rax]             
0xfed2:	mov rbx, qword ptr [rip + 0x21537]   #		il|-|>dynamic_length = strlen(hist->line);
0xfed9:	mov rdi, rax                         #		il->dynamic_length = |s|trlen(hist->line);
0xfedc:	call 0x4960                          
0xfee1:	mov qword ptr [rbx + 0x48], rax      #		il->dynamic_length |=| strlen(hist->line);
0xfee5:	mov rax, qword ptr [rip + 0x21524]   #		il->length         = il|-|>static_length + il->dynamic_length;
0xfeec:	mov rcx, qword ptr [rax + 0x40]      
0xfef0:	mov rax, qword ptr [rip + 0x21519]   #		il->length         = il->static_length + il|-|>dynamic_length;
0xfef7:	mov rdx, qword ptr [rax + 0x48]      
0xfefb:	mov rax, qword ptr [rip + 0x2150e]   #		il|-|>length         = il->static_length + il->dynamic_length;
0xff02:	add rdx, rcx                         #		il->length         = il->static_length |+| il->dynamic_length;
0xff05:	mov qword ptr [rax + 0x38], rdx      #		il->length         |=| il->static_length + il->dynamic_length;
0xff09:	mov rdx, qword ptr [rip + 0x21500]   #		il->point          = il|-|>length;
0xff10:	mov rax, qword ptr [rip + 0x214f9]   #		il|-|>point          = il->length;
0xff17:	mov rdx, qword ptr [rdx + 0x38]      #		il->point          = il|-|>length;
0xff1b:	mov qword ptr [rax + 0x18], rdx      #		il->point          |=| il->length;
0xff1f:	mov rax, qword ptr [rip + 0x214ea]   #		if (il|-|>length + 1 > il->size)
0xff26:	mov rax, qword ptr [rax + 0x38]      
0xff2a:	lea rdx, [rax + 1]                   #		if (il->length |+| 1 > il->size)
0xff2e:	mov rax, qword ptr [rip + 0x214db]   #		if (il->length + 1 > il|-|>size)
0xff35:	mov rax, qword ptr [rax + 0x50]      
0xff39:	cmp rdx, rax                         #		if |(|il->length + 1 > il->size)
0xff3c:	jbe 0xff84                           
0xff3e:	mov rax, qword ptr [rip + 0x214cb]   #		    |I|L_RESIZE(il->length + 1);
0xff45:	mov rdx, qword ptr [rax + 0x38]      
0xff49:	mov rax, qword ptr [rip + 0x214c0]   
0xff50:	add rdx, 1                           
0xff54:	mov qword ptr [rax + 0x50], rdx      
0xff58:	mov rax, qword ptr [rip + 0x214b1]   
0xff5f:	mov rdx, qword ptr [rax + 0x50]      
0xff63:	mov rax, qword ptr [rip + 0x214a6]   
0xff6a:	mov rax, qword ptr [rax + 0x58]      
0xff6e:	mov rbx, qword ptr [rip + 0x2149b]   
0xff75:	mov rsi, rdx                         
0xff78:	mov rdi, rax                         
0xff7b:	call 0x24670                         
0xff80:	mov qword ptr [rbx + 0x58], rax      
0xff84:	mov rax, qword ptr [rbp - 0x18]      #		strcpy(il->buffer + il->static_length, hist|-|>line);
0xff88:	mov rax, qword ptr [rax]             
0xff8b:	mov rdx, qword ptr [rip + 0x2147e]   #		strcpy(il|-|>buffer + il->static_length, hist->line);
0xff92:	mov rcx, qword ptr [rdx + 0x58]      
0xff96:	mov rdx, qword ptr [rip + 0x21473]   #		strcpy(il->buffer + il|-|>static_length, hist->line);
0xff9d:	mov rdx, qword ptr [rdx + 0x40]      
0xffa1:	add rdx, rcx                         #		|s|trcpy(il->buffer + il->static_length, hist->line);
0xffa4:	mov rsi, rax                         
0xffa7:	mov rdi, rdx                         
0xffaa:	call 0x4870                          
0xffaf:	jmp 0xffbb                           
0xffb1:	mov edi, 0                           #		|i|l_kill_line(IL_DONT_STORE);
0xffb6:	call 0xed98                          
0xffbb:	mov eax, 0                           #	    |i|l_update();
0xffc0:	call 0xf8eb                          
0xffc5:	jmp 0x1009c                          #	    |b|reak;
0xffca:	mov eax, dword ptr [rip + 0x21448]   #	    if (|b|rowsing)
0xffd0:	test eax, eax                        #	    if |(|browsing)
0xffd2:	je 0xfff0                            
0xffd4:	mov eax, dword ptr [rip + 0x21442]   #		|h|istory_set_pos(last_history_position);
0xffda:	mov edi, eax                         
0xffdc:	mov eax, 0                           
0xffe1:	call 0x2123c                         
0xffe6:	mov dword ptr [rip + 0x21428], 0     #		browsing |=| 0;
0xfff0:	mov eax, 0                           #	    if ((hist = |p|revious_history()))
0xfff5:	call 0x210c6                         
0xfffa:	mov qword ptr [rbp - 0x18], rax      
0xfffe:	cmp qword ptr [rbp - 0x18], 0        #	    if |(|(hist = previous_history()))
0x10003:	je 0x10066                          
0x10005:	mov rax, qword ptr [rbp - 0x18]     #		if (strcmp(il->buffer + il->static_length, hist|-|>line) != 0)
0x10009:	mov rax, qword ptr [rax]            
0x1000c:	mov rdx, qword ptr [rip + 0x213fd]  #		if (strcmp(il|-|>buffer + il->static_length, hist->line) != 0)
0x10013:	mov rcx, qword ptr [rdx + 0x58]     
0x10017:	mov rdx, qword ptr [rip + 0x213f2]  #		if (strcmp(il->buffer + il|-|>static_length, hist->line) != 0)
0x1001e:	mov rdx, qword ptr [rdx + 0x40]     
0x10022:	add rdx, rcx                        #		if (strcmp(il->buffer |+| il->static_length, hist->line) != 0)
0x10025:	mov rsi, rax                        #		if (|s|trcmp(il->buffer + il->static_length, hist->line) != 0)
0x10028:	mov rdi, rdx                        
0x1002b:	call 0x4af0                         
0x10030:	test eax, eax                       #		if |(|strcmp(il->buffer + il->static_length, hist->line) != 0)
0x10032:	je 0x1008c                          
0x10034:	mov rax, qword ptr [rip + 0x213d5]  #		    add_history(il|-|>buffer + il->static_length);
0x1003b:	mov rdx, qword ptr [rax + 0x58]     
0x1003f:	mov rax, qword ptr [rip + 0x213ca]  #		    add_history(il->buffer + il|-|>static_length);
0x10046:	mov rax, qword ptr [rax + 0x40]     
0x1004a:	add rax, rdx                        #		    |a|dd_history(il->buffer + il->static_length);
0x1004d:	mov rdi, rax                        
0x10050:	mov eax, 0                          
0x10055:	call 0x201b5                        
0x1005a:	mov eax, 0                          #		    |n|ext_history();
0x1005f:	call 0x21109                        
0x10064:	jmp 0x1008c                         
0x10066:	mov rax, qword ptr [rip + 0x213a3]  #		add_history(il|-|>buffer + il->static_length);
0x1006d:	mov rdx, qword ptr [rax + 0x58]     
0x10071:	mov rax, qword ptr [rip + 0x21398]  #		add_history(il->buffer + il|-|>static_length);
0x10078:	mov rax, qword ptr [rax + 0x40]     
0x1007c:	add rax, rdx                        #		|a|dd_history(il->buffer + il->static_length);
0x1007f:	mov rdi, rax                        
0x10082:	mov eax, 0                          
0x10087:	call 0x201b5                        
0x1008c:	mov eax, 0                          #	    |n|ext_history();
0x10091:	call 0x21109                        
0x10096:	jmp 0x1009c                         #	    |b|reak;
0x10098:	nop                                 #	    |b|reak;
0x10099:	jmp 0x1009c                         
0x1009b:	nop                                 #	    |b|reak;
0x1009c:	nop                                 #|}|
0x1009d:	mov rbx, qword ptr [rbp - 8]        
0x100a1:	leave                               
0x100a2:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/status.c
####################################################################################################

0x100a3:	endbr64                             #|{|
0x100a7:	push rbp                            
0x100a8:	mov rbp, rsp                        
0x100ab:	sub rsp, 0x10                       
0x100af:	mov qword ptr [rbp - 8], rdi        
0x100b3:	mov eax, dword ptr [rip + 0x1ef5f]  #    use_section(AnsiColors |?| color_section : monochrome_section);
0x100b9:	test eax, eax                       #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x100bb:	je 0x100c6                          
0x100bd:	lea rax, [rip + 0x1ef6c]            #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x100c4:	jmp 0x100cd                         
0x100c6:	lea rax, [rip + 0x1ef73]            #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x100cd:	mov rdi, rax                        #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x100d0:	call 0x1dbc4                        
0x100d5:	mov edx, 9                          #    |g|et_colorset_var(StatusBarColors, StatusBarFields, STATUSBAR_FIELDS);
0x100da:	lea rax, [rip + 0x201bf]            
0x100e1:	mov rsi, rax                        
0x100e4:	lea rax, [rip + 0x20215]            
0x100eb:	mov rdi, rax                        
0x100ee:	call 0x1df8c                        
0x100f3:	mov rax, qword ptr [rbp - 8]        #    status_default_message = |x|strdup(default_message);
0x100f7:	mov rdi, rax                        
0x100fa:	call 0x24780                        
0x100ff:	mov qword ptr [rip + 0x2133a], rax  #    status_default_message |=| xstrdup(default_message);
0x10106:	mov rax, qword ptr [rip + 0x21333]  #    |t|oprintable(status_default_message, strlen(status_default_message));
0x1010d:	mov rdi, rax                        
0x10110:	call 0x4960                         
0x10115:	mov rdx, rax                        
0x10118:	mov rax, qword ptr [rip + 0x21321]  
0x1011f:	mov rsi, rdx                        
0x10122:	mov rdi, rax                        
0x10125:	call 0x1e5b1                        
0x1012a:	mov eax, 0                          #    status_window = |w|indow_init();
0x1012f:	call 0xda70                         
0x10134:	mov qword ptr [rip + 0x212e5], rax  #    status_window |=| window_init();
0x1013b:	lea rax, [rip + 0x2131e]            #    |u|name(&u);
0x10142:	mov rdi, rax                        
0x10145:	call 0x49f0                         
0x1014a:	nop                                 #|}|
0x1014b:	leave                               
0x1014c:	ret                                 
0x1014d:	endbr64                             #|{|
0x10151:	push rbp                            
0x10152:	mov rbp, rsp                        
0x10155:	mov rax, qword ptr [rip + 0x212c4]  #    |w|indow_end(status_window);
0x1015c:	mov rdi, rax                        
0x1015f:	call 0xdab1                         
0x10164:	nop                                 #|}|
0x10165:	pop rbp                             
0x10166:	ret                                 
0x10167:	endbr64                             #|{|
0x1016b:	push rbp                            
0x1016c:	mov rbp, rsp                        
0x1016f:	sub rsp, 0x10                       
0x10173:	mov qword ptr [rbp - 8], rdi        
0x10177:	mov qword ptr [rbp - 0x10], rsi     
0x1017b:	mov rax, qword ptr [rip + 0x212b6]  #    if (|s|tatus_buffer)
0x10182:	test rax, rax                       #    if |(|status_buffer)
0x10185:	je 0x10196                          
0x10187:	mov rax, qword ptr [rip + 0x212aa]  #	|x|free(status_buffer);
0x1018e:	mov rdi, rax                        
0x10191:	call 0x1eeae                        
0x10196:	mov rax, qword ptr [rbp - 8]        #    status_buffer = |x|malloc(columns * sizeof(char));
0x1019a:	mov rdi, rax                        
0x1019d:	call 0x24650                        
0x101a2:	mov qword ptr [rip + 0x2128f], rax  #    status_buffer |=| xmalloc(columns * sizeof(char));
0x101a9:	mov rax, qword ptr [rbp - 8]        #    |w|indow_resize(status_window, 0, line, 1, columns);
0x101ad:	mov ecx, eax                        
0x101af:	mov rax, qword ptr [rbp - 0x10]     
0x101b3:	mov edx, eax                        
0x101b5:	mov rax, qword ptr [rip + 0x21264]  
0x101bc:	mov r8d, ecx                        
0x101bf:	mov ecx, 1                          
0x101c4:	mov esi, 0                          
0x101c9:	mov rdi, rax                        
0x101cc:	call 0xdad7                         
0x101d1:	nop                                 #|}|
0x101d2:	leave                               
0x101d3:	ret                                 
0x101d4:	endbr64                             #|{|
0x101d8:	push rbp                            
0x101d9:	mov rbp, rsp                        
0x101dc:	sub rsp, 0x60                       
0x101e0:	mov rax, qword ptr fs:[0x28]        #|{|
0x101e9:	mov qword ptr [rbp - 8], rax        
0x101ed:	xor eax, eax                        
0x101ef:	mov rax, qword ptr [rip + 0x2122a]  #    memset(status_buffer, ' ', status_window|-|>columns);
0x101f6:	mov eax, dword ptr [rax + 0xc]      
0x101f9:	movsxd rdx, eax                     #    |m|emset(status_buffer, ' ', status_window->columns);
0x101fc:	mov rax, qword ptr [rip + 0x21235]  
0x10203:	mov esi, 0x20                       
0x10208:	mov rdi, rax                        
0x1020b:	call 0x4a10                         
0x10210:	mov rax, qword ptr [rip + 0x21211]  #    temp_msg = xmalloc(temp_msg_len = (|s|trlen(status_message) + 1));
0x10217:	mov rdi, rax                        
0x1021a:	call 0x4960                         
0x1021f:	add rax, 1                          #    temp_msg = |x|malloc(temp_msg_len = (strlen(status_message) + 1));
0x10223:	mov qword ptr [rbp - 0x40], rax     
0x10227:	mov rax, qword ptr [rbp - 0x40]     
0x1022b:	mov rdi, rax                        
0x1022e:	call 0x24650                        
0x10233:	mov qword ptr [rbp - 0x50], rax     
0x10237:	mov dword ptr [rbp - 0x60], 0       #    for (i |=| 0, j = 0; status_message[i]; i++)
0x1023e:	mov dword ptr [rbp - 0x5c], 0       #    for (i = 0, j |=| 0; status_message[i]; i++)
0x10245:	jmp 0x1059d                         #    |f|or (i = 0, j = 0; status_message[i]; i++)
0x1024a:	mov rdx, qword ptr [rip + 0x211d7]  #	if (status_message|[|i] == '\\')
0x10251:	mov eax, dword ptr [rbp - 0x60]     
0x10254:	cdqe                                
0x10256:	add rax, rdx                        
0x10259:	movzx eax, byte ptr [rax]           
0x1025c:	cmp al, 0x5c                        #	if |(|status_message[i] == '\\')
0x1025e:	jne 0x10515                         
0x10264:	mov rdx, qword ptr [rip + 0x211bd]  #	    switch (status_message|[|i + 1])
0x1026b:	mov eax, dword ptr [rbp - 0x60]     
0x1026e:	cdqe                                
0x10270:	add rax, 1                          
0x10274:	add rax, rdx                        
0x10277:	movzx eax, byte ptr [rax]           
0x1027a:	movsx eax, al                       
0x1027d:	test eax, eax                       #	    |s|witch (status_message[i + 1])
0x1027f:	je 0x104b3                          
0x10285:	test eax, eax                       
0x10287:	js 0x104ce                          
0x1028d:	cmp eax, 0x73                       
0x10290:	jg 0x104ce                          
0x10296:	cmp eax, 0x5c                       
0x10299:	jl 0x104ce                          
0x1029f:	sub eax, 0x5c                       
0x102a2:	cmp eax, 0x17                       
0x102a5:	ja 0x104ce                          
0x102ab:	mov eax, eax                        
0x102ad:	lea rdx, [rax*4]                    
0x102b5:	lea rax, [rip + 0x17e64]            
0x102bc:	mov eax, dword ptr [rdx + rax]      
0x102bf:	cdqe                                
0x102c1:	lea rdx, [rip + 0x17e58]            
0x102c8:	add rax, rdx                        
0x102cb:	jmp rax                             
0x102ce:	lea rax, [rip + 0x211cc]            #		    ptr |=| u.nodename;
0x102d5:	mov qword ptr [rbp - 0x58], rax     
0x102d9:	jmp 0x102f3                         #		    |g|oto get_system_info;
0x102db:	lea rax, [rip + 0x2117e]            #		    ptr |=| u.sysname;
0x102e2:	mov qword ptr [rbp - 0x58], rax     
0x102e6:	jmp 0x102f3                         #		    |g|oto get_system_info;
0x102e8:	lea rax, [rip + 0x21275]            #		    ptr |=| u.machine;
0x102ef:	mov qword ptr [rbp - 0x58], rax     
0x102f3:	mov rax, qword ptr [rbp - 0x58]     #		    if (ptr|[|0])
0x102f7:	movzx eax, byte ptr [rax]           
0x102fa:	test al, al                         #		    if |(|ptr[0])
0x102fc:	je 0x10350                          
0x102fe:	mov rax, qword ptr [rbp - 0x58]     #			len = |s|trlen(ptr);
0x10302:	mov rdi, rax                        
0x10305:	call 0x4960                         
0x1030a:	mov qword ptr [rbp - 0x48], rax     
0x1030e:	mov rax, qword ptr [rbp - 0x48]     #			temp_msg = |x|realloc(temp_msg, temp_msg_len += len);
0x10312:	add qword ptr [rbp - 0x40], rax     
0x10316:	mov rdx, qword ptr [rbp - 0x40]     
0x1031a:	mov rax, qword ptr [rbp - 0x50]     
0x1031e:	mov rsi, rdx                        
0x10321:	mov rdi, rax                        
0x10324:	call 0x24670                        
0x10329:	mov qword ptr [rbp - 0x50], rax     
0x1032d:	mov eax, dword ptr [rbp - 0x5c]     #			|m|emcpy(&temp_msg[j], ptr, len);
0x10330:	movsxd rdx, eax                     
0x10333:	mov rax, qword ptr [rbp - 0x50]     #			memcpy(|&|temp_msg[j], ptr, len);
0x10337:	lea rcx, [rdx + rax]                
0x1033b:	mov rdx, qword ptr [rbp - 0x48]     #			|m|emcpy(&temp_msg[j], ptr, len);
0x1033f:	mov rax, qword ptr [rbp - 0x58]     
0x10343:	mov rsi, rax                        
0x10346:	mov rdi, rcx                        
0x10349:	call 0x4b70                         
0x1034e:	jmp 0x1039e                         
0x10350:	mov qword ptr [rbp - 0x48], 6       #			len |=| 6;
0x10358:	mov rax, qword ptr [rbp - 0x48]     #			temp_msg = |x|realloc(temp_msg, temp_msg_len += len);
0x1035c:	add qword ptr [rbp - 0x40], rax     
0x10360:	mov rdx, qword ptr [rbp - 0x40]     
0x10364:	mov rax, qword ptr [rbp - 0x50]     
0x10368:	mov rsi, rdx                        
0x1036b:	mov rdi, rax                        
0x1036e:	call 0x24670                        
0x10373:	mov qword ptr [rbp - 0x50], rax     
0x10377:	mov eax, dword ptr [rbp - 0x5c]     #			|m|emcpy(&temp_msg[j], "(none)", len);
0x1037a:	movsxd rdx, eax                     
0x1037d:	mov rax, qword ptr [rbp - 0x50]     #			memcpy(|&|temp_msg[j], "(none)", len);
0x10381:	lea rcx, [rdx + rax]                
0x10385:	mov rax, qword ptr [rbp - 0x48]     #			|m|emcpy(&temp_msg[j], "(none)", len);
0x10389:	mov rdx, rax                        
0x1038c:	lea rax, [rip + 0x17d6e]            
0x10393:	mov rsi, rax                        
0x10396:	mov rdi, rcx                        
0x10399:	call 0x4b70                         
0x1039e:	mov rax, qword ptr [rbp - 0x48]     #		    j |+|= len;
0x103a2:	mov edx, eax                        
0x103a4:	mov eax, dword ptr [rbp - 0x5c]     
0x103a7:	add eax, edx                        
0x103a9:	mov dword ptr [rbp - 0x5c], eax     
0x103ac:	add dword ptr [rbp - 0x60], 1       #		    i|+|+;
0x103b0:	jmp 0x10599                         #		    |b|reak;
0x103b5:	mov eax, 0                          #		    time = |g|et_local_time();
0x103ba:	call 0x1e4bf                        
0x103bf:	mov qword ptr [rbp - 0x38], rax     
0x103c3:	mov rax, qword ptr [rbp - 0x38]     #			    time->tm_mday, time|-|>tm_year + 1900);
0x103c7:	mov eax, dword ptr [rax + 0x14]     
0x103ca:	lea edi, [rax + 0x76c]              #		    |s|printf(date_str, "%s %s %02d %d",
0x103d0:	mov rax, qword ptr [rbp - 0x38]     
0x103d4:	mov esi, dword ptr [rax + 0xc]      
0x103d7:	mov rax, qword ptr [rbp - 0x38]     #			    day_name[time->tm_wday], month_name[time|-|>tm_mon],
0x103db:	mov eax, dword ptr [rax + 0x10]     
0x103de:	cdqe                                #		    |s|printf(date_str, "%s %s %02d %d",
0x103e0:	lea rdx, [rax*8]                    
0x103e8:	lea rax, [rip + 0x20391]            
0x103ef:	mov rcx, qword ptr [rdx + rax]      
0x103f3:	mov rax, qword ptr [rbp - 0x38]     #			    day_name[time|-|>tm_wday], month_name[time->tm_mon],
0x103f7:	mov eax, dword ptr [rax + 0x18]     
0x103fa:	cdqe                                #		    |s|printf(date_str, "%s %s %02d %d",
0x103fc:	lea rdx, [rax*8]                    
0x10404:	lea rax, [rip + 0x20335]            
0x1040b:	mov rdx, qword ptr [rdx + rax]      
0x1040f:	lea rax, [rbp - 0x30]               
0x10413:	mov r9d, edi                        
0x10416:	mov r8d, esi                        
0x10419:	lea rsi, [rip + 0x17ce8]            
0x10420:	mov rdi, rax                        
0x10423:	mov eax, 0                          
0x10428:	call 0x4dd0                         
0x1042d:	lea rax, [rbp - 0x30]               #		    len = |s|trlen(date_str);
0x10431:	mov rdi, rax                        
0x10434:	call 0x4960                         
0x10439:	mov qword ptr [rbp - 0x48], rax     
0x1043d:	mov rax, qword ptr [rbp - 0x48]     #		    temp_msg = |x|realloc(temp_msg, temp_msg_len += len);
0x10441:	add qword ptr [rbp - 0x40], rax     
0x10445:	mov rdx, qword ptr [rbp - 0x40]     
0x10449:	mov rax, qword ptr [rbp - 0x50]     
0x1044d:	mov rsi, rdx                        
0x10450:	mov rdi, rax                        
0x10453:	call 0x24670                        
0x10458:	mov qword ptr [rbp - 0x50], rax     
0x1045c:	mov eax, dword ptr [rbp - 0x5c]     #		    |m|emcpy(&temp_msg[j], date_str, len);
0x1045f:	movsxd rdx, eax                     
0x10462:	mov rax, qword ptr [rbp - 0x50]     #		    memcpy(|&|temp_msg[j], date_str, len);
0x10466:	lea rcx, [rdx + rax]                
0x1046a:	mov rdx, qword ptr [rbp - 0x48]     #		    |m|emcpy(&temp_msg[j], date_str, len);
0x1046e:	lea rax, [rbp - 0x30]               
0x10472:	mov rsi, rax                        
0x10475:	mov rdi, rcx                        
0x10478:	call 0x4b70                         
0x1047d:	mov rax, qword ptr [rbp - 0x48]     #		    j |+|= len;
0x10481:	mov edx, eax                        
0x10483:	mov eax, dword ptr [rbp - 0x5c]     
0x10486:	add eax, edx                        
0x10488:	mov dword ptr [rbp - 0x5c], eax     
0x1048b:	add dword ptr [rbp - 0x60], 1       #		    i|+|+;
0x1048f:	jmp 0x10599                         #		    |b|reak;
0x10494:	mov eax, dword ptr [rbp - 0x5c]     #		    temp_msg[j|+|+] = '\\';
0x10497:	lea edx, [rax + 1]                  
0x1049a:	mov dword ptr [rbp - 0x5c], edx     
0x1049d:	movsxd rdx, eax                     
0x104a0:	mov rax, qword ptr [rbp - 0x50]     #		    temp_msg|[|j++] = '\\';
0x104a4:	add rax, rdx                        
0x104a7:	mov byte ptr [rax], 0x5c            #		    temp_msg[j++] |=| '\\';
0x104aa:	add dword ptr [rbp - 0x60], 1       #		    i|+|+;
0x104ae:	jmp 0x10599                         #		    |b|reak;
0x104b3:	mov eax, dword ptr [rbp - 0x5c]     #		    temp_msg[j|+|+] = '\\';
0x104b6:	lea edx, [rax + 1]                  
0x104b9:	mov dword ptr [rbp - 0x5c], edx     
0x104bc:	movsxd rdx, eax                     
0x104bf:	mov rax, qword ptr [rbp - 0x50]     #		    temp_msg|[|j++] = '\\';
0x104c3:	add rax, rdx                        
0x104c6:	mov byte ptr [rax], 0x5c            #		    temp_msg[j++] |=| '\\';
0x104c9:	jmp 0x10599                         #		    |b|reak;
0x104ce:	mov eax, dword ptr [rbp - 0x5c]     #		    temp_msg[j|+|+] = '\\';
0x104d1:	lea edx, [rax + 1]                  
0x104d4:	mov dword ptr [rbp - 0x5c], edx     
0x104d7:	movsxd rdx, eax                     
0x104da:	mov rax, qword ptr [rbp - 0x50]     #		    temp_msg|[|j++] = '\\';
0x104de:	add rax, rdx                        
0x104e1:	mov byte ptr [rax], 0x5c            #		    temp_msg[j++] |=| '\\';
0x104e4:	mov rdx, qword ptr [rip + 0x20f3d]  #		    temp_msg[j++] = status_message|[|++i];
0x104eb:	add dword ptr [rbp - 0x60], 1       #		    temp_msg[j++] |=| status_message[++i];
0x104ef:	mov eax, dword ptr [rbp - 0x60]     #		    temp_msg[j++] = status_message[|+|+i];
0x104f2:	cdqe                                
0x104f4:	lea rcx, [rdx + rax]                #		    temp_msg[j++] = status_message|[|++i];
0x104f8:	mov eax, dword ptr [rbp - 0x5c]     #		    temp_msg[j|+|+] = status_message[++i];
0x104fb:	lea edx, [rax + 1]                  
0x104fe:	mov dword ptr [rbp - 0x5c], edx     
0x10501:	movsxd rdx, eax                     
0x10504:	mov rax, qword ptr [rbp - 0x50]     #		    temp_msg|[|j++] = status_message[++i];
0x10508:	add rdx, rax                        
0x1050b:	movzx eax, byte ptr [rcx]           #		    temp_msg[j++] = status_message|[|++i];
0x1050e:	mov byte ptr [rdx], al              #		    temp_msg[j++] |=| status_message[++i];
0x10510:	jmp 0x10599                         #		    |b|reak;
0x10515:	mov rdx, qword ptr [rip + 0x20f0c]  #	    if (status_message|[|i] == '\t')
0x1051c:	mov eax, dword ptr [rbp - 0x60]     
0x1051f:	cdqe                                
0x10521:	add rax, rdx                        
0x10524:	movzx eax, byte ptr [rax]           
0x10527:	cmp al, 9                           #	    if |(|status_message[i] == '\t')
0x10529:	jne 0x10571                         
0x1052b:	add qword ptr [rbp - 0x40], 8       #		temp_msg = |x|realloc(temp_msg, temp_msg_len += 8);
0x10530:	mov rdx, qword ptr [rbp - 0x40]     
0x10534:	mov rax, qword ptr [rbp - 0x50]     
0x10538:	mov rsi, rdx                        
0x1053b:	mov rdi, rax                        
0x1053e:	call 0x24670                        
0x10543:	mov qword ptr [rbp - 0x50], rax     
0x10547:	mov eax, dword ptr [rbp - 0x5c]     #		|m|emcpy(&temp_msg[j], "        ", 8);
0x1054a:	movsxd rdx, eax                     
0x1054d:	mov rax, qword ptr [rbp - 0x50]     #		memcpy(|&|temp_msg[j], "        ", 8);
0x10551:	add rax, rdx                        
0x10554:	mov edx, 8                          #		|m|emcpy(&temp_msg[j], "        ", 8);
0x10559:	lea rcx, [rip + 0x17bb6]            
0x10560:	mov rsi, rcx                        
0x10563:	mov rdi, rax                        
0x10566:	call 0x4b70                         
0x1056b:	add dword ptr [rbp - 0x5c], 8       #		j |+|= 8;
0x1056f:	jmp 0x10599                         
0x10571:	mov rdx, qword ptr [rip + 0x20eb0]  #		temp_msg[j++] = status_message|[|i];
0x10578:	mov eax, dword ptr [rbp - 0x60]     
0x1057b:	cdqe                                
0x1057d:	lea rcx, [rdx + rax]                
0x10581:	mov eax, dword ptr [rbp - 0x5c]     #		temp_msg[j|+|+] = status_message[i];
0x10584:	lea edx, [rax + 1]                  
0x10587:	mov dword ptr [rbp - 0x5c], edx     
0x1058a:	movsxd rdx, eax                     
0x1058d:	mov rax, qword ptr [rbp - 0x50]     #		temp_msg|[|j++] = status_message[i];
0x10591:	add rdx, rax                        
0x10594:	movzx eax, byte ptr [rcx]           #		temp_msg[j++] = status_message|[|i];
0x10597:	mov byte ptr [rdx], al              #		temp_msg[j++] |=| status_message[i];
0x10599:	add dword ptr [rbp - 0x60], 1       #    for (i = 0, j = 0; status_message[i]; i|+|+)
0x1059d:	mov rdx, qword ptr [rip + 0x20e84]  #    for (i = 0, j = 0; status_message|[|i]; i++)
0x105a4:	mov eax, dword ptr [rbp - 0x60]     
0x105a7:	cdqe                                
0x105a9:	add rax, rdx                        
0x105ac:	movzx eax, byte ptr [rax]           
0x105af:	test al, al                         #    for (i = 0, j = 0; |s|tatus_message[i]; i++)
0x105b1:	jne 0x1024a                         
0x105b7:	mov eax, dword ptr [rbp - 0x5c]     #    temp_msg|[|j] = 0;
0x105ba:	movsxd rdx, eax                     
0x105bd:	mov rax, qword ptr [rbp - 0x50]     
0x105c1:	add rax, rdx                        
0x105c4:	mov byte ptr [rax], 0               #    temp_msg[j] |=| 0;
0x105c7:	mov rax, qword ptr [rbp - 0x50]     #    len = |s|trlen(temp_msg);
0x105cb:	mov rdi, rax                        
0x105ce:	call 0x4960                         
0x105d3:	mov qword ptr [rbp - 0x48], rax     
0x105d7:	movzx eax, byte ptr [rip + 0x20e53] #    if (status_alignment |=|= STATUS_CENTERED &&
0x105de:	test al, al                         #    if |(|status_alignment == STATUS_CENTERED &&
0x105e0:	jne 0x10629                         
0x105e2:	mov rax, qword ptr [rbp - 0x48]     #	|(|int)len < status_window->columns)
0x105e6:	mov edx, eax                        
0x105e8:	mov rax, qword ptr [rip + 0x20e31]  #	(int)len < status_window|-|>columns)
0x105ef:	mov eax, dword ptr [rax + 0xc]      
0x105f2:	cmp edx, eax                        #    if (status_alignment == STATUS_CENTERED |&|&
0x105f4:	jge 0x10629                         
0x105f6:	mov rdx, qword ptr [rip + 0x20e3b]  #	|m|emcpy(status_buffer + ((status_window->columns - len) >> 1),
0x105fd:	mov rax, qword ptr [rip + 0x20e1c]  #	memcpy(status_buffer + ((status_window|-|>columns - len) >> 1),
0x10604:	mov eax, dword ptr [rax + 0xc]      
0x10607:	cdqe                                
0x10609:	sub rax, qword ptr [rbp - 0x48]     #	memcpy(status_buffer + ((status_window->columns |-| len) >> 1),
0x1060d:	shr rax, 1                          #	memcpy(status_buffer + ((status_window->columns - len) |>|> 1),
0x10610:	lea rcx, [rdx + rax]                #	memcpy(status_buffer |+| ((status_window->columns - len) >> 1),
0x10614:	mov rdx, qword ptr [rbp - 0x48]     #	|m|emcpy(status_buffer + ((status_window->columns - len) >> 1),
0x10618:	mov rax, qword ptr [rbp - 0x50]     
0x1061c:	mov rsi, rax                        
0x1061f:	mov rdi, rcx                        
0x10622:	call 0x4b70                         
0x10627:	jmp 0x10657                         
0x10629:	mov rax, qword ptr [rbp - 0x48]     #	memcpy(status_buffer, temp_msg, |m|in((int)len, status_window->columns));
0x1062d:	mov edx, eax                        
0x1062f:	mov rax, qword ptr [rip + 0x20dea]  
0x10636:	mov eax, dword ptr [rax + 0xc]      
0x10639:	cmp edx, eax                        
0x1063b:	cmovle eax, edx                     
0x1063e:	movsxd rdx, eax                     #	|m|emcpy(status_buffer, temp_msg, min((int)len, status_window->columns));
0x10641:	mov rax, qword ptr [rip + 0x20df0]  
0x10648:	mov rcx, qword ptr [rbp - 0x50]     
0x1064c:	mov rsi, rcx                        
0x1064f:	mov rdi, rax                        
0x10652:	call 0x4b70                         
0x10657:	mov rax, qword ptr [rbp - 0x50]     #    |x|free(temp_msg);
0x1065b:	mov rdi, rax                        
0x1065e:	call 0x1eeae                        
0x10663:	mov dword ptr [rbp - 0x60], 0       #    for (i |=| 0; i < status_window->columns; i++)
0x1066a:	jmp 0x106ae                         #    |f|or (i = 0; i < status_window->columns; i++)
0x1066c:	mov rdx, qword ptr [rip + 0x20dc5]  #	if (status_buffer|[|i] == '\r' || status_buffer[i] == '\n')
0x10673:	mov eax, dword ptr [rbp - 0x60]     
0x10676:	cdqe                                
0x10678:	add rax, rdx                        
0x1067b:	movzx eax, byte ptr [rax]           
0x1067e:	cmp al, 0xd                         #	if |(|status_buffer[i] == '\r' || status_buffer[i] == '\n')
0x10680:	je 0x10698                          
0x10682:	mov rdx, qword ptr [rip + 0x20daf]  #	if (status_buffer[i] == '\r' || status_buffer|[|i] == '\n')
0x10689:	mov eax, dword ptr [rbp - 0x60]     
0x1068c:	cdqe                                
0x1068e:	add rax, rdx                        
0x10691:	movzx eax, byte ptr [rax]           
0x10694:	cmp al, 0xa                         #	if (status_buffer[i] == '\r' |||| status_buffer[i] == '\n')
0x10696:	jne 0x106aa                         
0x10698:	mov rdx, qword ptr [rip + 0x20d99]  #	    status_buffer|[|i] = ' ';
0x1069f:	mov eax, dword ptr [rbp - 0x60]     
0x106a2:	cdqe                                
0x106a4:	add rax, rdx                        
0x106a7:	mov byte ptr [rax], 0x20            #	    status_buffer[i] |=| ' ';
0x106aa:	add dword ptr [rbp - 0x60], 1       #    for (i = 0; i < status_window->columns; i|+|+)
0x106ae:	mov rax, qword ptr [rip + 0x20d6b]  #    for (i = 0; i < status_window|-|>columns; i++)
0x106b5:	mov eax, dword ptr [rax + 0xc]      
0x106b8:	cmp dword ptr [rbp - 0x60], eax     #    for (i = 0; i |<| status_window->columns; i++)
0x106bb:	jl 0x1066c                          
0x106bd:	nop                                 #|}|
0x106be:	mov rax, qword ptr [rbp - 8]        
0x106c2:	sub rax, qword ptr fs:[0x28]        
0x106cb:	je 0x106d2                          
0x106cd:	call 0x4980                         
0x106d2:	leave                               
0x106d3:	ret                                 
0x106d4:	endbr64                             #|{|
0x106d8:	push rbp                            
0x106d9:	mov rbp, rsp                        
0x106dc:	sub rsp, 0x10                       
0x106e0:	mov rax, qword ptr fs:[0x28]        #|{|
0x106e9:	mov qword ptr [rbp - 8], rax        
0x106ed:	xor eax, eax                        
0x106ef:	lea rax, [rbp - 9]                  #    |t|ty_save(&status);
0x106f3:	mov rdi, rax                        
0x106f6:	call 0xc04b                         
0x106fb:	mov eax, 0                          #    |b|uild_message();
0x10700:	call 0x101d4                        
0x10705:	movzx eax, byte ptr [rip + 0x20d24] #    |s|witch (status_type)
0x1070c:	movsx eax, al                       
0x1070f:	cmp eax, 1                          
0x10712:	je 0x1071b                          
0x10714:	cmp eax, 2                          
0x10717:	je 0x10738                          
0x10719:	jmp 0x10755                         
0x1071b:	mov edx, dword ptr [rip + 0x1fbef]  #	    |t|ty_colors(StatusBarWarningBrightness,
0x10721:	mov ecx, dword ptr [rip + 0x1fbe5]  
0x10727:	mov eax, dword ptr [rip + 0x1fbe7]  
0x1072d:	mov esi, ecx                        
0x1072f:	mov edi, eax                        
0x10731:	call 0xbf89                         
0x10736:	jmp 0x10771                         #	    |b|reak;
0x10738:	mov edx, dword ptr [rip + 0x1fbde]  #	    |t|ty_colors(StatusBarErrorBrightness,
0x1073e:	mov ecx, dword ptr [rip + 0x1fbd4]  
0x10744:	mov eax, dword ptr [rip + 0x1fbd6]  
0x1074a:	mov esi, ecx                        
0x1074c:	mov edi, eax                        
0x1074e:	call 0xbf89                         
0x10753:	jmp 0x10771                         #	    |b|reak;
0x10755:	mov edx, dword ptr [rip + 0x1fba9]  #	    |t|ty_colors(StatusBarBrightness,
0x1075b:	mov ecx, dword ptr [rip + 0x1fb9f]  
0x10761:	mov eax, dword ptr [rip + 0x1fba1]  
0x10767:	mov esi, ecx                        
0x10769:	mov edi, eax                        
0x1076b:	call 0xbf89                         
0x10770:	nop                                 #	    |b|reak;
0x10771:	mov rax, qword ptr [rip + 0x20ca8]  #    |w|indow_goto(status_window, 0, 0);
0x10778:	mov edx, 0                          
0x1077d:	mov esi, 0                          
0x10782:	mov rdi, rax                        
0x10785:	call 0xdc1e                         
0x1078a:	mov rax, qword ptr [rip + 0x20c8f]  #    window_puts(status_window, status_buffer, status_window|-|>columns);
0x10791:	mov edx, dword ptr [rax + 0xc]      #    |w|indow_puts(status_window, status_buffer, status_window->columns);
0x10794:	mov rcx, qword ptr [rip + 0x20c9d]  
0x1079b:	mov rax, qword ptr [rip + 0x20c7e]  
0x107a2:	mov rsi, rcx                        
0x107a5:	mov rdi, rax                        
0x107a8:	call 0xdb1a                         
0x107ad:	lea rax, [rbp - 9]                  #    |t|ty_restore(&status);
0x107b1:	mov rdi, rax                        
0x107b4:	call 0xc067                         
0x107b9:	nop                                 #|}|
0x107ba:	mov rax, qword ptr [rbp - 8]        
0x107be:	sub rax, qword ptr fs:[0x28]        
0x107c7:	je 0x107ce                          
0x107c9:	call 0x4980                         
0x107ce:	leave                               
0x107cf:	ret                                 
0x107d0:	endbr64                             #|{|
0x107d4:	push rbp                            
0x107d5:	mov rbp, rsp                        
0x107d8:	sub rsp, 0x10                       
0x107dc:	mov qword ptr [rbp - 8], rdi        
0x107e0:	mov dword ptr [rbp - 0xc], esi      
0x107e3:	mov dword ptr [rbp - 0x10], edx     
0x107e6:	mov rax, qword ptr [rip + 0x20c3b]  #    if (|s|tatus_message)
0x107ed:	test rax, rax                       #    if |(|status_message)
0x107f0:	je 0x10801                          
0x107f2:	mov rax, qword ptr [rip + 0x20c2f]  #	|x|free(status_message);
0x107f9:	mov rdi, rax                        
0x107fc:	call 0x1eeae                        
0x10801:	mov rax, qword ptr [rbp - 8]        #    status_message = |x|strdup(message);
0x10805:	mov rdi, rax                        
0x10808:	call 0x24780                        
0x1080d:	mov qword ptr [rip + 0x20c14], rax  #    status_message |=| xstrdup(message);
0x10814:	mov rax, qword ptr [rip + 0x20c0d]  #    |t|oprintable(status_message, strlen(status_message));
0x1081b:	mov rdi, rax                        
0x1081e:	call 0x4960                         
0x10823:	mov rdx, rax                        
0x10826:	mov rax, qword ptr [rip + 0x20bfb]  
0x1082d:	mov rsi, rdx                        
0x10830:	mov rdi, rax                        
0x10833:	call 0x1e5b1                        
0x10838:	mov eax, dword ptr [rbp - 0xc]      #    status_type |=| type;
0x1083b:	mov byte ptr [rip + 0x20bef], al    
0x10841:	mov eax, dword ptr [rbp - 0x10]     #    status_alignment |=| alignment;
0x10844:	mov byte ptr [rip + 0x20be7], al    
0x1084a:	mov eax, 0                          #    |s|tatus_update();
0x1084f:	call 0x106d4                        
0x10854:	nop                                 #|}|
0x10855:	leave                               
0x10856:	ret                                 
0x10857:	endbr64                             #|{|
0x1085b:	push rbp                            
0x1085c:	mov rbp, rsp                        
0x1085f:	mov rax, qword ptr [rip + 0x20bda]  #    |s|tatus(xstrdup(status_default_message), STATUS_OK, STATUS_CENTERED);
0x10866:	mov rdi, rax                        
0x10869:	call 0x24780                        
0x1086e:	mov edx, 0                          
0x10873:	mov esi, 0                          
0x10878:	mov rdi, rax                        
0x1087b:	call 0x107d0                        
0x10880:	nop                                 #|}|
0x10881:	pop rbp                             
0x10882:	ret                                 

####################################################################################################
/home/nahid/reverse/binaries/gnuit/src/panel.c
####################################################################################################

0x10883:	endbr64                             #|{|
0x10887:	push rbp                            
0x10888:	mov rbp, rsp                        
0x1088b:	mov qword ptr [rbp - 0x18], rdi     
0x1088f:	mov qword ptr [rbp - 0x20], rsi     
0x10893:	mov rax, qword ptr [rbp - 0x18]     #    int |t|mp = *a;
0x10897:	mov eax, dword ptr [rax]            
0x10899:	mov dword ptr [rbp - 4], eax        
0x1089c:	mov rax, qword ptr [rbp - 0x20]     #    *a = |*|b;
0x108a0:	mov edx, dword ptr [rax]            
0x108a2:	mov rax, qword ptr [rbp - 0x18]     #    *a |=| *b;
0x108a6:	mov dword ptr [rax], edx            
0x108a8:	mov rax, qword ptr [rbp - 0x20]     #    *b |=| tmp;
0x108ac:	mov edx, dword ptr [rbp - 4]        
0x108af:	mov dword ptr [rax], edx            
0x108b1:	nop                                 #|}|
0x108b2:	pop rbp                             
0x108b3:	ret                                 
0x108b4:	endbr64                             #|{|
0x108b8:	push rbp                            
0x108b9:	mov rbp, rsp                        
0x108bc:	sub rsp, 0x20                       
0x108c0:	mov qword ptr [rbp - 0x18], rdi     
0x108c4:	mov edi, 0x98                       #    panel_t *this = (panel_t *)|x|malloc(sizeof(panel_t));
0x108c9:	call 0x24650                        
0x108ce:	mov qword ptr [rbp - 8], rax        
0x108d2:	mov rax, qword ptr [rbp - 8]        #    this->x		    |=| 0;
0x108d6:	mov dword ptr [rax + 0x58], 0       
0x108dd:	mov rax, qword ptr [rbp - 8]        #    this->y		    |=| 0;
0x108e1:	mov dword ptr [rax + 0x5c], 0       
0x108e8:	mov rax, qword ptr [rbp - 8]        #    this->lines		    |=| 1;
0x108ec:	mov dword ptr [rax + 0x60], 1       
0x108f3:	mov rax, qword ptr [rbp - 8]        #    this->columns	    |=| 1;
0x108f7:	mov dword ptr [rax + 0x64], 1       
0x108fe:	mov rax, qword ptr [rbp - 8]        #    this->focus		    |=| OFF;
0x10902:	mov byte ptr [rax + 0x6c], 0        
0x10906:	mov rax, qword ptr [rbp - 8]        #    this->entries	    |=| 0;
0x1090a:	mov dword ptr [rax + 0x68], 0       
0x10911:	mov rax, qword ptr [rbp - 8]        #    this->selected_entries  |=| 0;
0x10915:	mov dword ptr [rax + 0x70], 0       
0x1091c:	mov rax, qword ptr [rbp - 8]        #    this->last_index	    |=| -1;
0x10920:	mov dword ptr [rax + 0x50], 0xffffffff
0x10927:	mov rax, qword ptr [rbp - 8]        #    this->display_mode	    = this->sort_method |=| 0;
0x1092b:	mov dword ptr [rax + 0x84], 0       
0x10935:	mov rax, qword ptr [rbp - 8]        #    this->display_mode	    = this|-|>sort_method = 0;
0x10939:	mov edx, dword ptr [rax + 0x84]     
0x1093f:	mov rax, qword ptr [rbp - 8]        #    this->display_mode	    |=| this->sort_method = 0;
0x10943:	mov dword ptr [rax + 0x80], edx     
0x10949:	mov rax, qword ptr [rbp - 8]        #    this->current_entry	    |=| 0;
0x1094d:	mov dword ptr [rax + 0x28], 0       
0x10954:	mov rax, qword ptr [rbp - 8]        #    this->first_on_screen   |=| 0;
0x10958:	mov dword ptr [rax + 0x2c], 0       
0x1095f:	mov rax, qword ptr [rbp - 8]        #    this->on_screen	    |=| INT_MAX / 2;
0x10963:	mov dword ptr [rax + 0x14], 0x3fffffff
0x1096a:	mov rax, qword ptr [rbp - 8]        #    this->temp		    |=| NULL;
0x1096e:	mov qword ptr [rax + 0x20], 0       
0x10976:	mov rax, qword ptr [rbp - 8]        #    this->dir		    |=| NULL;
0x1097a:	mov qword ptr [rax], 0              
0x10981:	mov rax, qword ptr [rbp - 8]        #    this->isearch_stack	    |=| NULL;
0x10985:	mov qword ptr [rax + 0x48], 0       
0x1098d:	mov rax, qword ptr [rbp - 8]        #    this->visible	    |=| 1;
0x10991:	mov byte ptr [rax + 0x6d], 1        
0x10995:	mov rax, qword ptr [rbp - 8]        #    this->scroll_step       |=| 1;
0x10999:	mov dword ptr [rax + 0x88], 1       
0x109a3:	mov rax, qword ptr [rbp - 8]        #    this->thumb		    |=| 0;
0x109a7:	mov dword ptr [rax + 0x8c], 0       
0x109b1:	mov rax, qword ptr [rbp - 8]        #    this->horizontal_offset |=| 0;
0x109b5:	mov dword ptr [rax + 0x74], 0       
0x109bc:	mov rax, qword ptr [rbp - 8]        #    this->msdosfs |=| 0;
0x109c0:	mov dword ptr [rax + 0x10], 0       
0x109c7:	mov rax, qword ptr [rbp - 8]        #    this->dir_entry |=| NULL;
0x109cb:	mov qword ptr [rax + 0x38], 0       
0x109d3:	mov rax, qword ptr [rbp - 0x18]     #    if (|c|hdir(path) == -1)
0x109d7:	mov rdi, rax                        
0x109da:	call 0x4970                         
0x109df:	cmp eax, -1                         #    if |(|chdir(path) == -1)
0x109e2:	jne 0x109f3                         
0x109e4:	lea rax, [rip + 0x17ad5]            #	|f|atal("`chdir' failed: permission denied");
0x109eb:	mov rdi, rax                        
0x109ee:	call 0x672c                         
0x109f3:	mov eax, 0                          #    this->path = |x|getcwd();
0x109f8:	call 0x1f18e                        
0x109fd:	mov rdx, qword ptr [rbp - 8]        #    this->path |=| xgetcwd();
0x10a01:	mov qword ptr [rdx + 0x18], rax     
0x10a05:	mov rax, qword ptr [rbp - 8]        #    if (this|-|>path == NULL)
0x10a09:	mov rax, qword ptr [rax + 0x18]     
0x10a0d:	test rax, rax                       #    if |(|this->path == NULL)
0x10a10:	jne 0x10a21                         
0x10a12:	lea rax, [rip + 0x17acf]            #	|f|atal("`getcwd' failed: permission denied");
0x10a19:	mov rdi, rax                        
0x10a1c:	call 0x672c                         
0x10a21:	mov rax, qword ptr [rbp - 8]        #    |m|inimize_path(this->path);
0x10a25:	mov rax, qword ptr [rax + 0x18]     
0x10a29:	mov rdi, rax                        
0x10a2c:	call 0x1e08b                        
0x10a31:	mov rax, qword ptr [rbp - 8]        #    this->pathlen = strlen(this|-|>path);
0x10a35:	mov rax, qword ptr [rax + 0x18]     
0x10a39:	mov rdi, rax                        #    this->pathlen = |s|trlen(this->path);
0x10a3c:	call 0x4960                         
0x10a41:	mov rdx, qword ptr [rbp - 8]        #    this->pathlen |=| strlen(this->path);
0x10a45:	mov qword ptr [rdx + 0x78], rax     
0x10a49:	mov eax, 0                          #    this->window = |w|indow_init();
0x10a4e:	call 0xda70                         
0x10a53:	mov rdx, qword ptr [rbp - 8]        #    this->window |=| window_init();
0x10a57:	mov qword ptr [rdx + 8], rax        
0x10a5b:	mov eax, dword ptr [rip + 0x20bb7]  #    if (|c|onfigured)
0x10a61:	test eax, eax                       #    if |(|configured)
0x10a63:	je 0x10a8e                          
0x10a65:	mov edx, dword ptr [rip + 0x20b7d]  #	this->display_mode |=| StartupFileDisplayMode;
0x10a6b:	mov rax, qword ptr [rbp - 8]        
0x10a6f:	mov dword ptr [rax + 0x80], edx     
0x10a75:	mov edx, dword ptr [rip + 0x20b71]  #	this->sort_method  |=| StartupFileSortMethod;
0x10a7b:	mov rax, qword ptr [rbp - 8]        
0x10a7f:	mov dword ptr [rax + 0x84], edx     
0x10a85:	mov rax, qword ptr [rbp - 8]        #	return |t|his;
0x10a89:	jmp 0x10bed                         
0x10a8e:	lea rax, [rip + 0x17a76]            #    |u|se_section("[Setup]");
0x10a95:	mov rdi, rax                        
0x10a98:	call 0x1dbc4                        
0x10a9d:	mov esi, 0                          #    StartupScrollStep = |g|et_int_var("StartupScrollStep", 0);
0x10aa2:	lea rax, [rip + 0x17a6a]            
0x10aa9:	mov rdi, rax                        
0x10aac:	call 0x1dcfd                        
0x10ab1:	mov dword ptr [rip + 0x20b39], eax  #    StartupScrollStep |=| get_int_var("StartupScrollStep", 0);
0x10ab7:	lea rax, [rip + 0x17a67]            #    |u|se_section("[GITFM-Setup]");
0x10abe:	mov rdi, rax                        
0x10ac1:	call 0x1dbc4                        
0x10ac6:	mov ecx, 0                          #    StartupFileDisplayMode = |g|et_const_var("StartupFileDisplayMode",
0x10acb:	mov edx, 6                          
0x10ad0:	lea rax, [rip + 0x1f869]            
0x10ad7:	mov rsi, rax                        
0x10ada:	lea rax, [rip + 0x17a52]            
0x10ae1:	mov rdi, rax                        
0x10ae4:	call 0x1dd69                        
0x10ae9:	mov dword ptr [rip + 0x20af9], eax  #    StartupFileDisplayMode |=| get_const_var("StartupFileDisplayMode",
0x10aef:	mov edx, dword ptr [rip + 0x20af3]  #    this->display_mode |=| StartupFileDisplayMode;
0x10af5:	mov rax, qword ptr [rbp - 8]        
0x10af9:	mov dword ptr [rax + 0x80], edx     
0x10aff:	mov ecx, 0                          #    StartupFileSortMethod = |g|et_const_var("StartupFileSortMethod",
0x10b04:	mov edx, 9                          
0x10b09:	lea rax, [rip + 0x1f870]            
0x10b10:	mov rsi, rax                        
0x10b13:	lea rax, [rip + 0x17a30]            
0x10b1a:	mov rdi, rax                        
0x10b1d:	call 0x1dd69                        
0x10b22:	mov dword ptr [rip + 0x20ac4], eax  #    StartupFileSortMethod |=| get_const_var("StartupFileSortMethod",
0x10b28:	mov edx, dword ptr [rip + 0x20abe]  #    this->sort_method |=| StartupFileSortMethod;
0x10b2e:	mov rax, qword ptr [rbp - 8]        
0x10b32:	mov dword ptr [rax + 0x84], edx     
0x10b38:	mov esi, 1                          #    InfoDisplay     = |g|et_flag_var("InfoDisplay",     ON);
0x10b3d:	lea rax, [rip + 0x17a1c]            
0x10b44:	mov rdi, rax                        
0x10b47:	call 0x1de4c                        
0x10b4c:	mov dword ptr [rip + 0x20aaa], eax  #    InfoDisplay     |=| get_flag_var("InfoDisplay",     ON);
0x10b52:	mov esi, 1                          #    LeadingDotMatch = |g|et_flag_var("LeadingDotMatch", ON);
0x10b57:	lea rax, [rip + 0x17a0e]            
0x10b5e:	mov rdi, rax                        
0x10b61:	call 0x1de4c                        
0x10b66:	mov dword ptr [rip + 0x20a8c], eax  #    LeadingDotMatch |=| get_flag_var("LeadingDotMatch", ON);
0x10b6c:	mov eax, dword ptr [rip + 0x1e4a6]  #    use_section(AnsiColors |?| color_section : monochrome_section);
0x10b72:	test eax, eax                       #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x10b74:	je 0x10b7f                          
0x10b76:	lea rax, [rip + 0x1e4b3]            #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x10b7d:	jmp 0x10b86                         
0x10b7f:	lea rax, [rip + 0x1e4ba]            #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x10b86:	mov rdi, rax                        #    |u|se_section(AnsiColors ? color_section : monochrome_section);
0x10b89:	call 0x1dbc4                        
0x10b8e:	mov edx, 0x14                       #    |g|et_colorset_var(PanelColors, PanelFields, PANEL_FIELDS);
0x10b93:	lea rax, [rip + 0x1f846]            
0x10b9a:	mov rsi, rax                        
0x10b9d:	lea rax, [rip + 0x1f8dc]            
0x10ba4:	mov rdi, rax                        
0x10ba7:	call 0x1df8c                        
0x10bac:	mov edi, 8                          #    copy_history  = |x|stack_init(sizeof(char *));
0x10bb1:	call 0x1f30c                        
0x10bb6:	mov qword ptr [rip + 0x20a43], rax  #    copy_history  |=| xstack_init(sizeof(char *));
0x10bbd:	mov edi, 8                          #    move_history  = |x|stack_init(sizeof(char *));
0x10bc2:	call 0x1f30c                        
0x10bc7:	mov qword ptr [rip + 0x20a3a], rax  #    move_history  |=| xstack_init(sizeof(char *));
0x10bce:	mov edi, 8                          #    mkdir_history = |x|stack_init(sizeof(char *));
0x10bd3:	call 0x1f30c                        
0x10bd8:	mov qword ptr [rip + 0x20a31], rax  #    mkdir_history |=| xstack_init(sizeof(char *));
0x10bdf:	mov dword ptr [rip + 0x20a2f], 1    #    configured |=| 1;
0x10be9:	mov rax, qword ptr [rbp - 8]        #    return |t|his;
0x10bed:	leave                               #|}|
0x10bee:	ret                                 
0x10bef:	endbr64                             #|{|
0x10bf3:	push rbp                            
0x10bf4:	mov rbp, rsp                        
0x10bf7:	sub rsp, 0x20                       
0x10bfb:	mov qword ptr [rbp - 0x18], rdi     
0x10bff:	mov rax, qword ptr [rbp - 0x18]     #    if (this|-|>dir)
0x10c03:	mov rax, qword ptr [rax]            
0x10c06:	test rax, rax                       #    if |(|this->dir)
0x10c09:	je 0x10c1a                          
0x10c0b:	mov rax, qword ptr [rbp - 0x18]     #	|c|losedir(this->dir);
0x10c0f:	mov rax, qword ptr [rax]            
0x10c12:	mov rdi, rax                        
0x10c15:	call 0x4a80                         
0x10c1a:	mov dword ptr [rbp - 4], 0          #    for (i |=| 0; i < this->entries; i++)
0x10c21:	jmp 0x10c9e                         #    |f|or (i = 0; i < this->entries; i++)
0x10c23:	mov rax, qword ptr [rbp - 0x18]     #	if (this|-|>dir_entry[i].name)
0x10c27:	mov rcx, qword ptr [rax + 0x38]     
0x10c2b:	mov eax, dword ptr [rbp - 4]        #	if (this->dir_entry|[|i].name)
0x10c2e:	movsxd rdx, eax                     
0x10c31:	mov rax, rdx                        
0x10c34:	shl rax, 2                          
0x10c38:	add rax, rdx                        
0x10c3b:	shl rax, 4                          
0x10c3f:	add rax, rcx                        
0x10c42:	mov rax, qword ptr [rax]            #	if (this->dir_entry[i]|.|name)
0x10c45:	test rax, rax                       #	if |(|this->dir_entry[i].name)
0x10c48:	je 0x10c9a                          
0x10c4a:	mov rax, qword ptr [rbp - 0x18]     #	    xfree(this|-|>dir_entry[i].name);
0x10c4e:	mov rcx, qword ptr [rax + 0x38]     
0x10c52:	mov eax, dword ptr [rbp - 4]        #	    xfree(this->dir_entry|[|i].name);
0x10c55:	movsxd rdx, eax                     
0x10c58:	mov rax, rdx                        
0x10c5b:	shl rax, 2                          
0x10c5f:	add rax, rdx                        
0x10c62:	shl rax, 4                          
0x10c66:	add rax, rcx                        
0x10c69:	mov rax, qword ptr [rax]            #	    xfree(this->dir_entry[i]|.|name);
0x10c6c:	mov rdi, rax                        #	    |x|free(this->dir_entry[i].name);
0x10c6f:	call 0x1eeae                        
0x10c74:	mov rax, qword ptr [rbp - 0x18]     #	    this|-|>dir_entry[i].name = NULL;
0x10c78:	mov rcx, qword ptr [rax + 0x38]     
0x10c7c:	mov eax, dword ptr [rbp - 4]        #	    this->dir_entry|[|i].name = NULL;
0x10c7f:	movsxd rdx, eax                     
0x10c82:	mov rax, rdx                        
0x10c85:	shl rax, 2                          
0x10c89:	add rax, rdx                        
0x10c8c:	shl rax, 4                          
0x10c90:	add rax, rcx                        
0x10c93:	mov qword ptr [rax], 0              #	    this->dir_entry[i].name |=| NULL;
0x10c9a:	add dword ptr [rbp - 4], 1          #    for (i = 0; i < this->entries; i|+|+)
0x10c9e:	mov rax, qword ptr [rbp - 0x18]     #    for (i = 0; i < this|-|>entries; i++)
0x10ca2:	mov eax, dword ptr [rax + 0x68]     
0x10ca5:	cmp dword ptr [rbp - 4], eax        #    for (i = 0; i |<| this->entries; i++)
0x10ca8:	jl 0x10c23                          
0x10cae:	mov rax, qword ptr [rbp - 0x18]     #    xfree(this|-|>dir_entry);
0x10cb2:	mov rax, qword ptr [rax + 0x38]     
0x10cb6:	mov rdi, rax                        #    |x|free(this->dir_entry);
0x10cb9:	call 0x1eeae                        
0x10cbe:	mov rax, qword ptr [rbp - 0x18]     #    xfree(this|-|>temp);
0x10cc2:	mov rax, qword ptr [rax + 0x20]     
0x10cc6:	mov rdi, rax                        #    |x|free(this->temp);
0x10cc9:	call 0x1eeae                        
0x10cce:	mov rax, qword ptr [rbp - 0x18]     #    |w|indow_end(this->window);
0x10cd2:	mov rax, qword ptr [rax + 8]        
0x10cd6:	mov rdi, rax                        
0x10cd9:	call 0xdab1                         
0x10cde:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(this);
0x10ce2:	mov rdi, rax                        
0x10ce5:	call 0x1eeae                        
0x10cea:	nop                                 #|}|
0x10ceb:	leave                               
0x10cec:	ret                                 
0x10ced:	endbr64                             #|{|
0x10cf1:	push rbp                            
0x10cf2:	mov rbp, rsp                        
0x10cf5:	mov qword ptr [rbp - 8], rdi        
0x10cf9:	mov rax, qword ptr [rbp - 8]        #    return this|-|>window;
0x10cfd:	mov rax, qword ptr [rax + 8]        
0x10d01:	pop rbp                             #|}|
0x10d02:	ret                                 
0x10d03:	endbr64                             #|{|
0x10d07:	push rbp                            
0x10d08:	mov rbp, rsp                        
0x10d0b:	sub rsp, 0x10                       
0x10d0f:	mov qword ptr [rbp - 8], rdi        
0x10d13:	mov dword ptr [rbp - 0xc], esi      
0x10d16:	mov dword ptr [rbp - 0x10], edx     
0x10d19:	cmp dword ptr [rbp - 0x10], 0       #    if |(|filled)
0x10d1d:	je 0x10db1                          
0x10d23:	mov eax, dword ptr [rbp - 0xc]      #	memset(tname|[|which], ' ', 14);
0x10d26:	cdqe                                
0x10d28:	shl rax, 4                          
0x10d2c:	mov rdx, rax                        
0x10d2f:	lea rax, [rip + 0x208ea]            
0x10d36:	add rax, rdx                        
0x10d39:	mov edx, 0xe                        #	|m|emset(tname[which], ' ', 14);
0x10d3e:	mov esi, 0x20                       
0x10d43:	mov rdi, rax                        
0x10d46:	call 0x4a10                         
0x10d4b:	mov eax, dword ptr [rbp - 0xc]      #	tname[which][14] |=| 0;
0x10d4e:	cdqe                                
0x10d50:	shl rax, 4                          
0x10d54:	mov rdx, rax                        
0x10d57:	lea rax, [rip + 0x208d0]            
0x10d5e:	mov byte ptr [rdx + rax], 0         
0x10d62:	mov rax, qword ptr [rbp - 8]        #	return memcpy(tname[which], name, |m|in(strlen(name), 14));
0x10d66:	mov rdi, rax                        
0x10d69:	call 0x4960                         
0x10d6e:	cmp rax, 0xe                        #	return |m|emcpy(tname[which], name, min(strlen(name), 14));
0x10d72:	ja 0x10d85                          
0x10d74:	mov rax, qword ptr [rbp - 8]        #	return memcpy(tname[which], name, |m|in(strlen(name), 14));
0x10d78:	mov rdi, rax                        
0x10d7b:	call 0x4960                         
0x10d80:	mov rdx, rax                        
0x10d83:	jmp 0x10d8a                         
0x10d85:	mov edx, 0xe                        #	return |m|emcpy(tname[which], name, min(strlen(name), 14));
0x10d8a:	mov eax, dword ptr [rbp - 0xc]      #	return memcpy(tname|[|which], name, min(strlen(name), 14));
0x10d8d:	cdqe                                
0x10d8f:	shl rax, 4                          
0x10d93:	mov rcx, rax                        
0x10d96:	lea rax, [rip + 0x20883]            
0x10d9d:	add rcx, rax                        
0x10da0:	mov rax, qword ptr [rbp - 8]        #	return |m|emcpy(tname[which], name, min(strlen(name), 14));
0x10da4:	mov rsi, rax                        
0x10da7:	mov rdi, rcx                        
0x10daa:	call 0x4b70                         
0x10daf:	jmp 0x10ddc                         
0x10db1:	mov eax, dword ptr [rbp - 0xc]      #	return strncpy(tname|[|which], name, 14);
0x10db4:	cdqe                                
0x10db6:	shl rax, 4                          
0x10dba:	mov rdx, rax                        
0x10dbd:	lea rax, [rip + 0x2085c]            
0x10dc4:	lea rcx, [rdx + rax]                
0x10dc8:	mov rax, qword ptr [rbp - 8]        #	return |s|trncpy(tname[which], name, 14);
0x10dcc:	mov edx, 0xe                        
0x10dd1:	mov rsi, rax                        
0x10dd4:	mov rdi, rcx                        
0x10dd7:	call 0x4840                         
0x10ddc:	leave                               #|}|
0x10ddd:	ret                                 
0x10dde:	endbr64                             #|{|
0x10de2:	push rbp                            
0x10de3:	mov rbp, rsp                        
0x10de6:	sub rsp, 0x40                       
0x10dea:	mov qword ptr [rbp - 0x38], rdi     
0x10dee:	mov qword ptr [rbp - 0x40], rsi     
0x10df2:	mov rax, qword ptr [rbp - 0x38]     #    const dir_entry_t *|f|irst  = (const dir_entry_t *)_first;
0x10df6:	mov qword ptr [rbp - 0x20], rax     
0x10dfa:	mov rax, qword ptr [rbp - 0x40]     #    const dir_entry_t *|s|econd = (const dir_entry_t *)_second;
0x10dfe:	mov qword ptr [rbp - 0x18], rax     
0x10e02:	mov rax, qword ptr [rbp - 0x20]     #    int first_is_dir  = first|-|>type  == DIR_ENTRY;
0x10e06:	movzx eax, byte ptr [rax + 0x48]    
0x10e0a:	test al, al                         #    int first_is_dir  = first->type  |=|= DIR_ENTRY;
0x10e0c:	sete al                             
0x10e0f:	movzx eax, al                       #    int |f|irst_is_dir  = first->type  == DIR_ENTRY;
0x10e12:	mov dword ptr [rbp - 0x2c], eax     
0x10e15:	mov rax, qword ptr [rbp - 0x18]     #    int second_is_dir = second|-|>type == DIR_ENTRY;
0x10e19:	movzx eax, byte ptr [rax + 0x48]    
0x10e1d:	test al, al                         #    int second_is_dir = second->type |=|= DIR_ENTRY;
0x10e1f:	sete al                             
0x10e22:	movzx eax, al                       #    int |s|econd_is_dir = second->type == DIR_ENTRY;
0x10e25:	mov dword ptr [rbp - 0x28], eax     
0x10e28:	mov eax, dword ptr [rbp - 0x2c]     #    if |(|first_is_dir != second_is_dir)
0x10e2b:	cmp eax, dword ptr [rbp - 0x28]     
0x10e2e:	je 0x10e4a                          
0x10e30:	cmp dword ptr [rbp - 0x2c], 0       #	return first_is_dir ? -1 |:| 1;
0x10e34:	je 0x10e40                          
0x10e36:	mov eax, 0xffffffff                 #	return first_is_dir ? -1 |:| 1;
0x10e3b:	jmp 0x110ae                         
0x10e40:	mov eax, 1                          #	return first_is_dir ? -1 |:| 1;
0x10e45:	jmp 0x110ae                         
0x10e4a:	mov eax, dword ptr [rip + 0x207a4]  #    |s|witch (CurrentSortMethod)
0x10e50:	cmp eax, 8                          
0x10e53:	ja 0x1106b                          
0x10e59:	mov eax, eax                        
0x10e5b:	lea rdx, [rax*4]                    
0x10e63:	lea rax, [rip + 0x17f7a]            
0x10e6a:	mov eax, dword ptr [rdx + rax]      
0x10e6d:	cdqe                                
0x10e6f:	lea rdx, [rip + 0x17f6e]            
0x10e76:	add rax, rdx                        
0x10e79:	jmp rax                             
0x10e7c:	mov rax, qword ptr [rbp - 0x20]     #	     pfirst  = strrchr(first|-|>name,  '.');
0x10e80:	mov rax, qword ptr [rax]            
0x10e83:	mov esi, 0x2e                       #	     pfirst  = |s|trrchr(first->name,  '.');
0x10e88:	mov rdi, rax                        
0x10e8b:	call 0x49e0                         
0x10e90:	mov qword ptr [rbp - 0x10], rax     
0x10e94:	mov rax, qword ptr [rbp - 0x18]     #	     psecond = strrchr(second|-|>name, '.');
0x10e98:	mov rax, qword ptr [rax]            
0x10e9b:	mov esi, 0x2e                       #	     psecond = |s|trrchr(second->name, '.');
0x10ea0:	mov rdi, rax                        
0x10ea3:	call 0x49e0                         
0x10ea8:	mov qword ptr [rbp - 8], rax        
0x10eac:	cmp qword ptr [rbp - 0x10], 0       #	     if |(|pfirst && psecond)
0x10eb1:	je 0x10ee8                          
0x10eb3:	cmp qword ptr [rbp - 8], 0          #	     if (pfirst |&|& psecond)
0x10eb8:	je 0x10ee8                          
0x10eba:	add qword ptr [rbp - 8], 1          #		 retval |=| strcmp(++pfirst, ++psecond);
0x10ebf:	add qword ptr [rbp - 0x10], 1       
0x10ec4:	mov rdx, qword ptr [rbp - 8]        #		 retval = |s|trcmp(++pfirst, ++psecond);
0x10ec8:	mov rax, qword ptr [rbp - 0x10]     
0x10ecc:	mov rsi, rdx                        
0x10ecf:	mov rdi, rax                        
0x10ed2:	call 0x4af0                         
0x10ed7:	mov dword ptr [rbp - 0x24], eax     
0x10eda:	cmp dword ptr [rbp - 0x24], 0       #		 if |(|retval != 0)
0x10ede:	je 0x10f15                          
0x10ee0:	mov eax, dword ptr [rbp - 0x24]     #		     return |r|etval;
0x10ee3:	jmp 0x110ae                         
0x10ee8:	cmp qword ptr [rbp - 0x10], 0       #		 if |(|pfirst || psecond)
0x10eed:	jne 0x10efa                         
0x10eef:	cmp qword ptr [rbp - 8], 0          #		 if (pfirst |||| psecond)
0x10ef4:	je 0x1107f                          
0x10efa:	cmp qword ptr [rbp - 0x10], 0       #		     return (pfirst ? -1 |:| 1);
0x10eff:	je 0x10f0b                          
0x10f01:	mov eax, 0xffffffff                 #		     return (pfirst ? -1 |:| 1);
0x10f06:	jmp 0x110ae                         
0x10f0b:	mov eax, 1                          #		     return (pfirst ? -1 |:| 1);
0x10f10:	jmp 0x110ae                         
0x10f15:	jmp 0x1107f                         #	     |b|reak;
0x10f1a:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>size == second->size)
0x10f1e:	mov rdx, qword ptr [rax + 8]        
0x10f22:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->size == second|-|>size)
0x10f26:	mov rax, qword ptr [rax + 8]        
0x10f2a:	cmp rdx, rax                        #	     if |(|first->size == second->size)
0x10f2d:	je 0x11082                          
0x10f33:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>size - second->size;
0x10f37:	mov rax, qword ptr [rax + 8]        
0x10f3b:	mov edx, eax                        #	     return first->size |-| second->size;
0x10f3d:	mov rax, qword ptr [rbp - 0x18]     #	     return first->size - second|-|>size;
0x10f41:	mov rax, qword ptr [rax + 8]        
0x10f45:	mov ecx, eax                        #	     return first->size |-| second->size;
0x10f47:	mov eax, edx                        
0x10f49:	sub eax, ecx                        
0x10f4b:	jmp 0x110ae                         
0x10f50:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>mtime == second->mtime)
0x10f54:	mov rdx, qword ptr [rax + 0x20]     
0x10f58:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->mtime == second|-|>mtime)
0x10f5c:	mov rax, qword ptr [rax + 0x20]     
0x10f60:	cmp rdx, rax                        #	     if |(|first->mtime == second->mtime)
0x10f63:	je 0x11085                          
0x10f69:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>mtime - second->mtime;
0x10f6d:	mov rax, qword ptr [rax + 0x20]     
0x10f71:	mov edx, eax                        #	     return first->mtime |-| second->mtime;
0x10f73:	mov rax, qword ptr [rbp - 0x18]     #	     return first->mtime - second|-|>mtime;
0x10f77:	mov rax, qword ptr [rax + 0x20]     
0x10f7b:	mov ecx, eax                        #	     return first->mtime |-| second->mtime;
0x10f7d:	mov eax, edx                        
0x10f7f:	sub eax, ecx                        
0x10f81:	jmp 0x110ae                         
0x10f86:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>mode == second->mode)
0x10f8a:	mov edx, dword ptr [rax + 0x10]     
0x10f8d:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->mode == second|-|>mode)
0x10f91:	mov eax, dword ptr [rax + 0x10]     
0x10f94:	cmp edx, eax                        #	     if |(|first->mode == second->mode)
0x10f96:	je 0x11088                          
0x10f9c:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>mode - second->mode;
0x10fa0:	mov edx, dword ptr [rax + 0x10]     
0x10fa3:	mov rax, qword ptr [rbp - 0x18]     #	     return first->mode - second|-|>mode;
0x10fa7:	mov ecx, dword ptr [rax + 0x10]     
0x10faa:	mov eax, edx                        #	     return first->mode |-| second->mode;
0x10fac:	sub eax, ecx                        
0x10fae:	jmp 0x110ae                         
0x10fb3:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>uid == second->uid)
0x10fb7:	mov edx, dword ptr [rax + 0x14]     
0x10fba:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->uid == second|-|>uid)
0x10fbe:	mov eax, dword ptr [rax + 0x14]     
0x10fc1:	cmp edx, eax                        #	     if |(|first->uid == second->uid)
0x10fc3:	je 0x1108b                          
0x10fc9:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>uid - second->uid;
0x10fcd:	mov edx, dword ptr [rax + 0x14]     
0x10fd0:	mov rax, qword ptr [rbp - 0x18]     #	     return first->uid - second|-|>uid;
0x10fd4:	mov ecx, dword ptr [rax + 0x14]     
0x10fd7:	mov eax, edx                        #	     return first->uid |-| second->uid;
0x10fd9:	sub eax, ecx                        
0x10fdb:	jmp 0x110ae                         
0x10fe0:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>gid == second->gid)
0x10fe4:	mov edx, dword ptr [rax + 0x18]     
0x10fe7:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->gid == second|-|>gid)
0x10feb:	mov eax, dword ptr [rax + 0x18]     
0x10fee:	cmp edx, eax                        #	     if |(|first->gid == second->gid)
0x10ff0:	je 0x1108e                          
0x10ff6:	mov rax, qword ptr [rbp - 0x20]     #	     return first|-|>gid - second->gid;
0x10ffa:	mov edx, dword ptr [rax + 0x18]     
0x10ffd:	mov rax, qword ptr [rbp - 0x18]     #	     return first->gid - second|-|>gid;
0x11001:	mov ecx, dword ptr [rax + 0x18]     
0x11004:	mov eax, edx                        #	     return first->gid |-| second->gid;
0x11006:	sub eax, ecx                        
0x11008:	jmp 0x110ae                         
0x1100d:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>uid == second->uid)
0x11011:	mov edx, dword ptr [rax + 0x14]     
0x11014:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->uid == second|-|>uid)
0x11018:	mov eax, dword ptr [rax + 0x14]     
0x1101b:	cmp edx, eax                        #	     if |(|first->uid == second->uid)
0x1101d:	je 0x11091                          
0x1101f:	mov rax, qword ptr [rbp - 0x18]     #	     return strcmp(first->owner, second|-|>owner);
0x11023:	mov rdx, qword ptr [rax + 0x28]     
0x11027:	mov rax, qword ptr [rbp - 0x20]     #	     return strcmp(first|-|>owner, second->owner);
0x1102b:	mov rax, qword ptr [rax + 0x28]     
0x1102f:	mov rsi, rdx                        #	     return |s|trcmp(first->owner, second->owner);
0x11032:	mov rdi, rax                        
0x11035:	call 0x4af0                         
0x1103a:	jmp 0x110ae                         
0x1103c:	mov rax, qword ptr [rbp - 0x20]     #	     if (first|-|>gid == second->gid)
0x11040:	mov edx, dword ptr [rax + 0x18]     
0x11043:	mov rax, qword ptr [rbp - 0x18]     #	     if (first->gid == second|-|>gid)
0x11047:	mov eax, dword ptr [rax + 0x18]     
0x1104a:	cmp edx, eax                        #	     if |(|first->gid == second->gid)
0x1104c:	je 0x11094                          
0x1104e:	mov rax, qword ptr [rbp - 0x18]     #	     return strcmp(first->group, second|-|>group);
0x11052:	mov rdx, qword ptr [rax + 0x30]     
0x11056:	mov rax, qword ptr [rbp - 0x20]     #	     return strcmp(first|-|>group, second->group);
0x1105a:	mov rax, qword ptr [rax + 0x30]     
0x1105e:	mov rsi, rdx                        #	     return |s|trcmp(first->group, second->group);
0x11061:	mov rdi, rax                        
0x11064:	call 0x4af0                         
0x11069:	jmp 0x110ae                         
0x1106b:	lea rax, [rip + 0x1750a]            #	     |f|atal("bad sort method");
0x11072:	mov rdi, rax                        
0x11075:	call 0x672c                         
0x1107a:	jmp 0x11095                         
0x1107c:	nop                                 #	     |b|reak;
0x1107d:	jmp 0x11095                         
0x1107f:	nop                                 #	     |b|reak;
0x11080:	jmp 0x11095                         
0x11082:	nop                                 #		 |b|reak;
0x11083:	jmp 0x11095                         
0x11085:	nop                                 #		 |b|reak;
0x11086:	jmp 0x11095                         
0x11088:	nop                                 #		 |b|reak;
0x11089:	jmp 0x11095                         
0x1108b:	nop                                 #		 |b|reak;
0x1108c:	jmp 0x11095                         
0x1108e:	nop                                 #		 |b|reak;
0x1108f:	jmp 0x11095                         
0x11091:	nop                                 #		 |b|reak;
0x11092:	jmp 0x11095                         
0x11094:	nop                                 #		 |b|reak;
0x11095:	mov rax, qword ptr [rbp - 0x18]     #    return strcmp(first->name, second|-|>name);
0x11099:	mov rdx, qword ptr [rax]            
0x1109c:	mov rax, qword ptr [rbp - 0x20]     #    return strcmp(first|-|>name, second->name);
0x110a0:	mov rax, qword ptr [rax]            
0x110a3:	mov rsi, rdx                        #    return |s|trcmp(first->name, second->name);
0x110a6:	mov rdi, rax                        
0x110a9:	call 0x4af0                         
0x110ae:	leave                               #|}|
0x110af:	ret                                 
0x110b0:	endbr64                             #|{|
0x110b4:	push rbp                            
0x110b5:	mov rbp, rsp                        
0x110b8:	mov qword ptr [rbp - 8], rdi        
0x110bc:	mov rax, qword ptr [rbp - 8]        #    this->on_screen |=| INT_MAX / 2;
0x110c0:	mov dword ptr [rax + 0x14], 0x3fffffff
0x110c7:	nop                                 #|}|
0x110c8:	pop rbp                             
0x110c9:	ret                                 
0x110ca:	endbr64                             #|{|
0x110ce:	push rbp                            
0x110cf:	mov rbp, rsp                        
0x110d2:	mov qword ptr [rbp - 8], rdi        
0x110d6:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].name;
0x110da:	mov rcx, qword ptr [rax + 0x38]     
0x110de:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].name;
0x110e2:	mov eax, dword ptr [rax + 0x28]     
0x110e5:	movsxd rdx, eax                     
0x110e8:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].name;
0x110eb:	shl rax, 2                          
0x110ef:	add rax, rdx                        
0x110f2:	shl rax, 4                          
0x110f6:	add rax, rcx                        
0x110f9:	mov rax, qword ptr [rax]            #    return this->dir_entry[this->current_entry]|.|name;
0x110fc:	pop rbp                             #|}|
0x110fd:	ret                                 
0x110fe:	endbr64                             #|{|
0x11102:	push rbp                            
0x11103:	mov rbp, rsp                        
0x11106:	mov qword ptr [rbp - 8], rdi        
0x1110a:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].uid;
0x1110e:	mov rcx, qword ptr [rax + 0x38]     
0x11112:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].uid;
0x11116:	mov eax, dword ptr [rax + 0x28]     
0x11119:	movsxd rdx, eax                     
0x1111c:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].uid;
0x1111f:	shl rax, 2                          
0x11123:	add rax, rdx                        
0x11126:	shl rax, 4                          
0x1112a:	add rax, rcx                        
0x1112d:	mov eax, dword ptr [rax + 0x14]     #    return this->dir_entry[this->current_entry]|.|uid;
0x11130:	pop rbp                             #|}|
0x11131:	ret                                 
0x11132:	endbr64                             #|{|
0x11136:	push rbp                            
0x11137:	mov rbp, rsp                        
0x1113a:	mov qword ptr [rbp - 8], rdi        
0x1113e:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].gid;
0x11142:	mov rcx, qword ptr [rax + 0x38]     
0x11146:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].gid;
0x1114a:	mov eax, dword ptr [rax + 0x28]     
0x1114d:	movsxd rdx, eax                     
0x11150:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].gid;
0x11153:	shl rax, 2                          
0x11157:	add rax, rdx                        
0x1115a:	shl rax, 4                          
0x1115e:	add rax, rcx                        
0x11161:	mov eax, dword ptr [rax + 0x18]     #    return this->dir_entry[this->current_entry]|.|gid;
0x11164:	pop rbp                             #|}|
0x11165:	ret                                 
0x11166:	endbr64                             #|{|
0x1116a:	push rbp                            
0x1116b:	mov rbp, rsp                        
0x1116e:	mov qword ptr [rbp - 8], rdi        
0x11172:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].mode;
0x11176:	mov rcx, qword ptr [rax + 0x38]     
0x1117a:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].mode;
0x1117e:	mov eax, dword ptr [rax + 0x28]     
0x11181:	movsxd rdx, eax                     
0x11184:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].mode;
0x11187:	shl rax, 2                          
0x1118b:	add rax, rdx                        
0x1118e:	shl rax, 4                          
0x11192:	add rax, rcx                        
0x11195:	mov eax, dword ptr [rax + 0x10]     #    return this->dir_entry[this->current_entry]|.|mode;
0x11198:	pop rbp                             #|}|
0x11199:	ret                                 
0x1119a:	endbr64                             #|{|
0x1119e:	push rbp                            
0x1119f:	mov rbp, rsp                        
0x111a2:	mov qword ptr [rbp - 8], rdi        
0x111a6:	mov rax, qword ptr [rbp - 8]        #    return this|-|>dir_entry[this->current_entry].type;
0x111aa:	mov rcx, qword ptr [rax + 0x38]     
0x111ae:	mov rax, qword ptr [rbp - 8]        #    return this->dir_entry[this|-|>current_entry].type;
0x111b2:	mov eax, dword ptr [rax + 0x28]     
0x111b5:	movsxd rdx, eax                     
0x111b8:	mov rax, rdx                        #    return this->dir_entry|[|this->current_entry].type;
0x111bb:	shl rax, 2                          
0x111bf:	add rax, rdx                        
0x111c2:	shl rax, 4                          
0x111c6:	add rax, rcx                        
0x111c9:	movzx eax, byte ptr [rax + 0x48]    #    return this->dir_entry[this->current_entry]|.|type;
0x111cd:	movsx eax, al                       
0x111d0:	pop rbp                             #|}|
0x111d1:	ret                                 
0x111d2:	endbr64                             #|{|
0x111d6:	push rbp                            
0x111d7:	mov rbp, rsp                        
0x111da:	mov qword ptr [rbp - 0x18], rdi     
0x111de:	mov rax, qword ptr [rbp - 0x18]     #    int lines = (this|-|>lines - 2);
0x111e2:	mov eax, dword ptr [rax + 0x60]     
0x111e5:	sub eax, 2                          #    int |l|ines = (this->lines - 2);
0x111e8:	mov dword ptr [rbp - 8], eax        
0x111eb:	mov rax, qword ptr [rbp - 0x18]     #    int tmp = this|-|>current_entry - (lines / 2);
0x111ef:	mov edx, dword ptr [rax + 0x28]     
0x111f2:	mov eax, dword ptr [rbp - 8]        #    int tmp = this->current_entry - (lines |/| 2);
0x111f5:	mov ecx, eax                        
0x111f7:	shr ecx, 0x1f                       
0x111fa:	add eax, ecx                        
0x111fc:	sar eax, 1                          
0x111fe:	neg eax                             
0x11200:	add eax, edx                        #    int |t|mp = this->current_entry - (lines / 2);
0x11202:	mov dword ptr [rbp - 4], eax        
0x11205:	mov edx, dword ptr [rbp - 4]        #    if (tmp |+| lines >= this->entries)
0x11208:	mov eax, dword ptr [rbp - 8]        
0x1120b:	add edx, eax                        
0x1120d:	mov rax, qword ptr [rbp - 0x18]     #    if (tmp + lines >= this|-|>entries)
0x11211:	mov eax, dword ptr [rax + 0x68]     
0x11214:	cmp edx, eax                        #    if |(|tmp + lines >= this->entries)
0x11216:	jl 0x1122e                          
0x11218:	mov rax, qword ptr [rbp - 0x18]     #	return |m|ax(0, this->entries - lines);
0x1121c:	mov eax, dword ptr [rax + 0x68]     
0x1121f:	sub eax, dword ptr [rbp - 8]        
0x11222:	mov edx, 0                          
0x11227:	test eax, eax                       
0x11229:	cmovs eax, edx                      
0x1122c:	jmp 0x1123b                         
0x1122e:	mov eax, dword ptr [rbp - 4]        #	return |m|ax(0, tmp);
0x11231:	mov edx, 0                          
0x11236:	test eax, eax                       
0x11238:	cmovs eax, edx                      
0x1123b:	pop rbp                             #|}|
0x1123c:	ret                                 
0x1123d:	endbr64                             #|{|
0x11241:	push rbp                            
0x11242:	mov rbp, rsp                        
0x11245:	sub rsp, 8                          
0x11249:	mov qword ptr [rbp - 8], rdi        
0x1124d:	mov rax, qword ptr [rbp - 8]        #    if ((this|-|>first_on_screen <= this->current_entry) &&
0x11251:	mov edx, dword ptr [rax + 0x2c]     
0x11254:	mov rax, qword ptr [rbp - 8]        #    if ((this->first_on_screen <= this|-|>current_entry) &&
0x11258:	mov eax, dword ptr [rax + 0x28]     
0x1125b:	cmp edx, eax                        #    if |(|(this->first_on_screen <= this->current_entry) &&
0x1125d:	jg 0x112a4                          
0x1125f:	mov rax, qword ptr [rbp - 8]        #	(this|-|>first_on_screen + this->lines - 2 > this->current_entry) &&
0x11263:	mov edx, dword ptr [rax + 0x2c]     
0x11266:	mov rax, qword ptr [rbp - 8]        #	(this->first_on_screen + this|-|>lines - 2 > this->current_entry) &&
0x1126a:	mov eax, dword ptr [rax + 0x60]     
0x1126d:	add eax, edx                        #	(this->first_on_screen |+| this->lines - 2 > this->current_entry) &&
0x1126f:	lea edx, [rax - 2]                  #	(this->first_on_screen + this->lines |-| 2 > this->current_entry) &&
0x11272:	mov rax, qword ptr [rbp - 8]        #	(this->first_on_screen + this->lines - 2 > this|-|>current_entry) &&
0x11276:	mov eax, dword ptr [rax + 0x28]     
0x11279:	cmp edx, eax                        #    if ((this->first_on_screen <= this->current_entry) |&|&
0x1127b:	jle 0x112a4                         
0x1127d:	mov rax, qword ptr [rbp - 8]        #	(this|-|>first_on_screen + this->lines - 2 <= this->entries))
0x11281:	mov edx, dword ptr [rax + 0x2c]     
0x11284:	mov rax, qword ptr [rbp - 8]        #	(this->first_on_screen + this|-|>lines - 2 <= this->entries))
0x11288:	mov eax, dword ptr [rax + 0x60]     
0x1128b:	add eax, edx                        #	(this->first_on_screen |+| this->lines - 2 <= this->entries))
0x1128d:	lea edx, [rax - 2]                  #	(this->first_on_screen + this->lines |-| 2 <= this->entries))
0x11290:	mov rax, qword ptr [rbp - 8]        #	(this->first_on_screen + this->lines - 2 <= this|-|>entries))
0x11294:	mov eax, dword ptr [rax + 0x68]     
0x11297:	cmp edx, eax                        #	(this->first_on_screen + this->lines - 2 > this->current_entry) |&|&
0x11299:	jg 0x112a4                          
0x1129b:	mov rax, qword ptr [rbp - 8]        #	return this|-|>first_on_screen;
0x1129f:	mov eax, dword ptr [rax + 0x2c]     
0x112a2:	jmp 0x112b5                         
0x112a4:	mov rax, qword ptr [rbp - 8]        #    return |p|anel_get_centered_fos(this);
0x112a8:	mov rdi, rax                        
0x112ab:	mov eax, 0                          
0x112b0:	call 0x111d2                        
0x112b5:	leave                               #|}|
0x112b6:	ret                                 
0x112b7:	endbr64                             #|{|
0x112bb:	push rbp                            
0x112bc:	mov rbp, rsp                        
0x112bf:	sub rsp, 0x10                       
0x112c3:	mov qword ptr [rbp - 8], rdi        
0x112c7:	mov dword ptr [rbp - 0xc], esi      
0x112ca:	mov rax, qword ptr [rbp - 8]        #    this->current_entry |=| entry;
0x112ce:	mov edx, dword ptr [rbp - 0xc]      
0x112d1:	mov dword ptr [rax + 0x28], edx     
0x112d4:	mov rax, qword ptr [rbp - 8]        #    this->first_on_screen = |p|anel_get_fos(this);
0x112d8:	mov rdi, rax                        
0x112db:	mov eax, 0                          
0x112e0:	call 0x1123d                        
0x112e5:	mov rdx, qword ptr [rbp - 8]        #    this->first_on_screen |=| panel_get_fos(this);
0x112e9:	mov dword ptr [rdx + 0x2c], eax     
0x112ec:	nop                                 #|}|
0x112ed:	leave                               
0x112ee:	ret                                 
0x112ef:	endbr64                             #|{|
0x112f3:	push rbp                            
0x112f4:	mov rbp, rsp                        
0x112f7:	sub rsp, 8                          
0x112fb:	mov qword ptr [rbp - 8], rdi        
0x112ff:	mov rax, qword ptr [rbp - 8]        #    this->first_on_screen = |p|anel_get_centered_fos(this);
0x11303:	mov rdi, rax                        
0x11306:	mov eax, 0                          
0x1130b:	call 0x111d2                        
0x11310:	mov rdx, qword ptr [rbp - 8]        #    this->first_on_screen |=| panel_get_centered_fos(this);
0x11314:	mov dword ptr [rdx + 0x2c], eax     
0x11317:	nop                                 #|}|
0x11318:	leave                               
0x11319:	ret                                 
0x1131a:	endbr64                             #|{|
0x1131e:	push rbp                            
0x1131f:	mov rbp, rsp                        
0x11322:	mov qword ptr [rbp - 8], rdi        
0x11326:	mov rax, qword ptr [rbp - 8]        #    this->visible |=| 1;
0x1132a:	mov byte ptr [rax + 0x6d], 1        
0x1132e:	nop                                 #|}|
0x1132f:	pop rbp                             
0x11330:	ret                                 
0x11331:	endbr64                             #|{|
0x11335:	push rbp                            
0x11336:	mov rbp, rsp                        
0x11339:	mov qword ptr [rbp - 8], rdi        
0x1133d:	mov rax, qword ptr [rbp - 8]        #    this->visible |=| 0;
0x11341:	mov byte ptr [rax + 0x6d], 0        
0x11345:	nop                                 #|}|
0x11346:	pop rbp                             
0x11347:	ret                                 
0x11348:	endbr64                             #|{|
0x1134c:	push rbp                            
0x1134d:	mov rbp, rsp                        
0x11350:	sub rsp, 0x30                       
0x11354:	mov qword ptr [rbp - 8], rdi        
0x11358:	mov qword ptr [rbp - 0x10], rsi     
0x1135c:	mov qword ptr [rbp - 0x18], rdx     
0x11360:	mov qword ptr [rbp - 0x20], rcx     
0x11364:	mov qword ptr [rbp - 0x28], r8      
0x11368:	mov rax, qword ptr [rbp - 0x10]     #    this->x |=| x;
0x1136c:	mov edx, eax                        
0x1136e:	mov rax, qword ptr [rbp - 8]        
0x11372:	mov dword ptr [rax + 0x58], edx     
0x11375:	mov rax, qword ptr [rbp - 0x18]     #    this->y |=| y;
0x11379:	mov edx, eax                        
0x1137b:	mov rax, qword ptr [rbp - 8]        
0x1137f:	mov dword ptr [rax + 0x5c], edx     
0x11382:	mov rax, qword ptr [rbp - 0x20]     #    this->lines   |=| lines;
0x11386:	mov edx, eax                        
0x11388:	mov rax, qword ptr [rbp - 8]        
0x1138c:	mov dword ptr [rax + 0x60], edx     
0x1138f:	mov rax, qword ptr [rbp - 0x28]     #    this->columns |=| columns;
0x11393:	mov edx, eax                        
0x11395:	mov rax, qword ptr [rbp - 8]        
0x11399:	mov dword ptr [rax + 0x64], edx     
0x1139c:	mov rax, qword ptr [rbp - 8]        #    this->thumb |=| 0;
0x113a0:	mov dword ptr [rax + 0x8c], 0       
0x113aa:	mov eax, dword ptr [rip + 0x20240]  #    if (StartupScrollStep |<|= 0 || StartupScrollStep >= (this->lines - 1))
0x113b0:	test eax, eax                       #    if |(|StartupScrollStep <= 0 || StartupScrollStep >= (this->lines - 1))
0x113b2:	jle 0x113c8                         
0x113b4:	mov rax, qword ptr [rbp - 8]        #    if (StartupScrollStep <= 0 || StartupScrollStep >= (this|-|>lines - 1))
0x113b8:	mov eax, dword ptr [rax + 0x60]     
0x113bb:	lea edx, [rax - 1]                  #    if (StartupScrollStep <= 0 || StartupScrollStep >= (this->lines |-| 1))
0x113be:	mov eax, dword ptr [rip + 0x2022c]  #    if (StartupScrollStep <= 0 || StartupScrollStep |>|= (this->lines - 1))
0x113c4:	cmp edx, eax                        #    if (StartupScrollStep <= 0 |||| StartupScrollStep >= (this->lines - 1))
0x113c6:	jg 0x113e6                          
0x113c8:	mov rax, qword ptr [rbp - 8]        #	this->scroll_step = this|-|>lines / 2;
0x113cc:	mov eax, dword ptr [rax + 0x60]     
0x113cf:	mov edx, eax                        #	this->scroll_step = this->lines |/| 2;
0x113d1:	shr edx, 0x1f                       
0x113d4:	add eax, edx                        
0x113d6:	sar eax, 1                          
0x113d8:	mov edx, eax                        
0x113da:	mov rax, qword ptr [rbp - 8]        #	this->scroll_step |=| this->lines / 2;
0x113de:	mov dword ptr [rax + 0x88], edx     
0x113e4:	jmp 0x113f6                         
0x113e6:	mov edx, dword ptr [rip + 0x20204]  #	this->scroll_step |=| StartupScrollStep;
0x113ec:	mov rax, qword ptr [rbp - 8]        
0x113f0:	mov dword ptr [rax + 0x88], edx     
0x113f6:	mov rax, qword ptr [rbp - 8]        #    this->temp = xrealloc(this->temp, this|-|>columns);
0x113fa:	mov eax, dword ptr [rax + 0x64]     
0x113fd:	movsxd rdx, eax                     #    this->temp = |x|realloc(this->temp, this->columns);
0x11400:	mov rax, qword ptr [rbp - 8]        #    this->temp = xrealloc(this|-|>temp, this->columns);
0x11404:	mov rax, qword ptr [rax + 0x20]     
0x11408:	mov rsi, rdx                        #    this->temp = |x|realloc(this->temp, this->columns);
0x1140b:	mov rdi, rax                        
0x1140e:	call 0x24670                        
0x11413:	mov rdx, qword ptr [rbp - 8]        #    this->temp |=| xrealloc(this->temp, this->columns);
0x11417:	mov qword ptr [rdx + 0x20], rax     
0x1141b:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_resize(this->window, x, y, lines, columns);
0x1141f:	mov edi, eax                        
0x11421:	mov rax, qword ptr [rbp - 0x20]     
0x11425:	mov ecx, eax                        
0x11427:	mov rax, qword ptr [rbp - 0x18]     
0x1142b:	mov edx, eax                        
0x1142d:	mov rax, qword ptr [rbp - 0x10]     
0x11431:	mov esi, eax                        
0x11433:	mov rax, qword ptr [rbp - 8]        
0x11437:	mov rax, qword ptr [rax + 8]        
0x1143b:	mov r8d, edi                        
0x1143e:	mov rdi, rax                        
0x11441:	call 0xdad7                         
0x11446:	mov rax, qword ptr [rbp - 8]        #    |p|anel_center_current_entry(this);
0x1144a:	mov rdi, rax                        
0x1144d:	call 0x112ef                        
0x11452:	mov rax, qword ptr [rbp - 8]        #    this->horizontal_offset |=| 0;
0x11456:	mov dword ptr [rax + 0x74], 0       
0x1145d:	nop                                 #|}|
0x1145e:	leave                               
0x1145f:	ret                                 
0x11460:	endbr64                             #|{|
0x11464:	push rbp                            
0x11465:	mov rbp, rsp                        
0x11468:	mov qword ptr [rbp - 8], rdi        
0x1146c:	mov dword ptr [rbp - 0xc], esi      
0x1146f:	mov eax, dword ptr [rbp - 0xc]      #    this->wrapped_isearch |=| value;
0x11472:	mov edx, eax                        
0x11474:	mov rax, qword ptr [rbp - 8]        
0x11478:	mov byte ptr [rax + 0x6e], dl       
0x1147b:	nop                                 #|}|
0x1147c:	pop rbp                             
0x1147d:	ret                                 
0x1147e:	endbr64                             #|{|
0x11482:	push rbp                            
0x11483:	mov rbp, rsp                        
0x11486:	sub rsp, 0x30                       
0x1148a:	mov qword ptr [rbp - 0x18], rdi     
0x1148e:	mov qword ptr [rbp - 0x20], rsi     
0x11492:	mov qword ptr [rbp - 0x28], rdx     
0x11496:	mov dword ptr [rbp - 0x2c], ecx     
0x11499:	mov eax, dword ptr [rbp - 0x2c]     #    for (i |=| start_entry; i >= 0; i--)
0x1149c:	mov dword ptr [rbp - 4], eax        
0x1149f:	jmp 0x114e3                         #    |f|or (i = start_entry; i >= 0; i--)
0x114a1:	mov rax, qword ptr [rbp - 0x18]     #	if (strncasecmp(string, this|-|>dir_entry[i].name, len) == 0)
0x114a5:	mov rcx, qword ptr [rax + 0x38]     
0x114a9:	mov eax, dword ptr [rbp - 4]        #	if (strncasecmp(string, this->dir_entry|[|i].name, len) == 0)
0x114ac:	movsxd rdx, eax                     
0x114af:	mov rax, rdx                        
0x114b2:	shl rax, 2                          
0x114b6:	add rax, rdx                        
0x114b9:	shl rax, 4                          
0x114bd:	add rax, rcx                        
0x114c0:	mov rcx, qword ptr [rax]            #	if (strncasecmp(string, this->dir_entry[i]|.|name, len) == 0)
0x114c3:	mov rdx, qword ptr [rbp - 0x28]     #	if (|s|trncasecmp(string, this->dir_entry[i].name, len) == 0)
0x114c7:	mov rax, qword ptr [rbp - 0x20]     
0x114cb:	mov rsi, rcx                        
0x114ce:	mov rdi, rax                        
0x114d1:	call 0x4c00                         
0x114d6:	test eax, eax                       #	if |(|strncasecmp(string, this->dir_entry[i].name, len) == 0)
0x114d8:	jne 0x114df                         
0x114da:	mov eax, dword ptr [rbp - 4]        #	    return |i|;
0x114dd:	jmp 0x114ee                         
0x114df:	sub dword ptr [rbp - 4], 1          #    for (i = start_entry; i >= 0; i|-|-)
0x114e3:	cmp dword ptr [rbp - 4], 0          #    for (i = start_entry; i |>|= 0; i--)
0x114e7:	jns 0x114a1                         
0x114e9:	mov eax, 0xffffffff                 #    return |-|1;
0x114ee:	leave                               #|}|
0x114ef:	ret                                 
0x114f0:	endbr64                             #|{|
0x114f4:	push rbp                            
0x114f5:	mov rbp, rsp                        
0x114f8:	sub rsp, 0x30                       
0x114fc:	mov qword ptr [rbp - 0x18], rdi     
0x11500:	mov qword ptr [rbp - 0x20], rsi     
0x11504:	mov qword ptr [rbp - 0x28], rdx     
0x11508:	mov dword ptr [rbp - 0x2c], ecx     
0x1150b:	mov eax, dword ptr [rbp - 0x2c]     #    for (entry |=| start_entry; entry < this->entries; entry++)
0x1150e:	mov dword ptr [rbp - 4], eax        
0x11511:	jmp 0x11555                         #    |f|or (entry = start_entry; entry < this->entries; entry++)
0x11513:	mov rax, qword ptr [rbp - 0x18]     #	if (strncasecmp(string, this|-|>dir_entry[entry].name, len) == 0)
0x11517:	mov rcx, qword ptr [rax + 0x38]     
0x1151b:	mov eax, dword ptr [rbp - 4]        #	if (strncasecmp(string, this->dir_entry|[|entry].name, len) == 0)
0x1151e:	movsxd rdx, eax                     
0x11521:	mov rax, rdx                        
0x11524:	shl rax, 2                          
0x11528:	add rax, rdx                        
0x1152b:	shl rax, 4                          
0x1152f:	add rax, rcx                        
0x11532:	mov rcx, qword ptr [rax]            #	if (strncasecmp(string, this->dir_entry[entry]|.|name, len) == 0)
0x11535:	mov rdx, qword ptr [rbp - 0x28]     #	if (|s|trncasecmp(string, this->dir_entry[entry].name, len) == 0)
0x11539:	mov rax, qword ptr [rbp - 0x20]     
0x1153d:	mov rsi, rcx                        
0x11540:	mov rdi, rax                        
0x11543:	call 0x4c00                         
0x11548:	test eax, eax                       #	if |(|strncasecmp(string, this->dir_entry[entry].name, len) == 0)
0x1154a:	jne 0x11551                         
0x1154c:	mov eax, dword ptr [rbp - 4]        #	    return |e|ntry;
0x1154f:	jmp 0x11566                         
0x11551:	add dword ptr [rbp - 4], 1          #    for (entry = start_entry; entry < this->entries; entry|+|+)
0x11555:	mov rax, qword ptr [rbp - 0x18]     #    for (entry = start_entry; entry < this|-|>entries; entry++)
0x11559:	mov eax, dword ptr [rax + 0x68]     
0x1155c:	cmp dword ptr [rbp - 4], eax        #    for (entry = start_entry; entry |<| this->entries; entry++)
0x1155f:	jl 0x11513                          
0x11561:	mov eax, 0xffffffff                 #    return |-|1;
0x11566:	leave                               #|}|
0x11567:	ret                                 
0x11568:	endbr64                             #|{|
0x1156c:	push rbp                            
0x1156d:	mov rbp, rsp                        
0x11570:	push rbx                            
0x11571:	sub rsp, 0x38                       
0x11575:	mov qword ptr [rbp - 0x28], rdi     
0x11579:	mov qword ptr [rbp - 0x30], rsi     
0x1157d:	mov qword ptr [rbp - 0x38], rdx     
0x11581:	mov dword ptr [rbp - 0x3c], ecx     
0x11584:	mov rax, qword ptr [rbp - 0x28]     #    char *message = xmalloc(|s|trlen(format) + strlen(string) + 1);
0x11588:	mov rdi, rax                        
0x1158b:	call 0x4960                         
0x11590:	mov rbx, rax                        
0x11593:	mov rax, qword ptr [rbp - 0x30]     #    char *message = xmalloc(strlen(format) + |s|trlen(string) + 1);
0x11597:	mov rdi, rax                        
0x1159a:	call 0x4960                         
0x1159f:	add rax, rbx                        #    char *message = xmalloc(strlen(format) |+| strlen(string) + 1);
0x115a2:	add rax, 1                          #    char *message = |x|malloc(strlen(format) + strlen(string) + 1);
0x115a6:	mov rdi, rax                        
0x115a9:	call 0x24650                        
0x115ae:	mov qword ptr [rbp - 0x18], rax     
0x115b2:	mov rdx, qword ptr [rbp - 0x30]     #    |s|printf(message, format, string);
0x115b6:	mov rcx, qword ptr [rbp - 0x28]     
0x115ba:	mov rax, qword ptr [rbp - 0x18]     
0x115be:	mov rsi, rcx                        
0x115c1:	mov rdi, rax                        
0x115c4:	mov eax, 0                          
0x115c9:	call 0x4dd0                         
0x115ce:	mov edx, dword ptr [rbp - 0x3c]     #    c = |p|anel_1s_message(message, options, flags);
0x115d1:	mov rcx, qword ptr [rbp - 0x38]     
0x115d5:	mov rax, qword ptr [rbp - 0x18]     
0x115d9:	mov rsi, rcx                        
0x115dc:	mov rdi, rax                        
0x115df:	call 0x5c09                         
0x115e4:	mov byte ptr [rbp - 0x19], al       
0x115e7:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(message);
0x115eb:	mov rdi, rax                        
0x115ee:	call 0x1eeae                        
0x115f3:	movzx eax, byte ptr [rbp - 0x19]    #    return |c|;
0x115f7:	mov rbx, qword ptr [rbp - 8]        #|}|
0x115fb:	leave                               
0x115fc:	ret                                 
0x115fd:	endbr64                             #|{|
0x11601:	push rbp                            
0x11602:	mov rbp, rsp                        
0x11605:	push rbx                            
0x11606:	sub rsp, 0x48                       
0x1160a:	mov qword ptr [rbp - 0x28], rdi     
0x1160e:	mov qword ptr [rbp - 0x30], rsi     
0x11612:	mov qword ptr [rbp - 0x38], rdx     
0x11616:	mov qword ptr [rbp - 0x40], rcx     
0x1161a:	mov dword ptr [rbp - 0x44], r8d     
0x1161e:	mov rax, qword ptr [rbp - 0x28]     #    char *message = xmalloc(|s|trlen(format)+strlen(string1)+strlen(string2)+1);
0x11622:	mov rdi, rax                        
0x11625:	call 0x4960                         
0x1162a:	mov rbx, rax                        
0x1162d:	mov rax, qword ptr [rbp - 0x30]     #    char *message = xmalloc(strlen(format)+|s|trlen(string1)+strlen(string2)+1);
0x11631:	mov rdi, rax                        
0x11634:	call 0x4960                         
0x11639:	add rbx, rax                        #    char *message = xmalloc(strlen(format)|+|strlen(string1)+strlen(string2)+1);
0x1163c:	mov rax, qword ptr [rbp - 0x38]     #    char *message = xmalloc(strlen(format)+strlen(string1)+|s|trlen(string2)+1);
0x11640:	mov rdi, rax                        
0x11643:	call 0x4960                         
0x11648:	add rax, rbx                        #    char *message = xmalloc(strlen(format)+strlen(string1)|+|strlen(string2)+1);
0x1164b:	add rax, 1                          #    char *message = |x|malloc(strlen(format)+strlen(string1)+strlen(string2)+1);
0x1164f:	mov rdi, rax                        
0x11652:	call 0x24650                        
0x11657:	mov qword ptr [rbp - 0x18], rax     
0x1165b:	mov rcx, qword ptr [rbp - 0x38]     #    |s|printf(message, format, string1, string2);
0x1165f:	mov rdx, qword ptr [rbp - 0x30]     
0x11663:	mov rsi, qword ptr [rbp - 0x28]     
0x11667:	mov rax, qword ptr [rbp - 0x18]     
0x1166b:	mov rdi, rax                        
0x1166e:	mov eax, 0                          
0x11673:	call 0x4dd0                         
0x11678:	mov edx, dword ptr [rbp - 0x44]     #    c = |p|anel_1s_message(message, options, flags);
0x1167b:	mov rcx, qword ptr [rbp - 0x40]     
0x1167f:	mov rax, qword ptr [rbp - 0x18]     
0x11683:	mov rsi, rcx                        
0x11686:	mov rdi, rax                        
0x11689:	call 0x5c09                         
0x1168e:	mov byte ptr [rbp - 0x19], al       
0x11691:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(message);
0x11695:	mov rdi, rax                        
0x11698:	call 0x1eeae                        
0x1169d:	movzx eax, byte ptr [rbp - 0x19]    #    return |c|;
0x116a1:	mov rbx, qword ptr [rbp - 8]        #|}|
0x116a5:	leave                               
0x116a6:	ret                                 
0x116a7:	endbr64                             #|{|
0x116ab:	push rbp                            
0x116ac:	mov rbp, rsp                        
0x116af:	sub rsp, 0x10                       
0x116b3:	mov qword ptr [rbp - 8], rdi        
0x116b7:	mov rax, qword ptr [rbp - 8]        #    |p|anel_set_current_entry(this, 0);
0x116bb:	mov esi, 0                          
0x116c0:	mov rdi, rax                        
0x116c3:	mov eax, 0                          
0x116c8:	call 0x112b7                        
0x116cd:	mov rax, qword ptr [rbp - 8]        #    |p|anel_2s_message("%s/: Permission denied.",
0x116d1:	mov rax, qword ptr [rax + 0x18]     
0x116d5:	mov ecx, 0x1e                       
0x116da:	mov edx, 0                          
0x116df:	mov rsi, rax                        
0x116e2:	lea rax, [rip + 0x16ea3]            
0x116e9:	mov rdi, rax                        
0x116ec:	mov eax, 0                          
0x116f1:	call 0x11568                        
0x116f6:	mov rax, qword ptr [rbp - 8]        #    if (strcmp(this|-|>path, "/") == 0)
0x116fa:	mov rax, qword ptr [rax + 0x18]     
0x116fe:	lea rdx, [rip + 0x16e9f]            #    if (|s|trcmp(this->path, "/") == 0)
0x11705:	mov rsi, rdx                        
0x11708:	mov rdi, rax                        
0x1170b:	call 0x4af0                         
0x11710:	test eax, eax                       #    if |(|strcmp(this->path, "/") == 0)
0x11712:	jne 0x11723                         
0x11714:	lea rax, [rip + 0x16e8b]            #	|f|atal("/: Permission denied");
0x1171b:	mov rdi, rax                        
0x1171e:	call 0x672c                         
0x11723:	mov rax, qword ptr [rbp - 8]        #    |s|trcpy(this->path, "/");
0x11727:	mov rax, qword ptr [rax + 0x18]     
0x1172b:	mov word ptr [rax], 0x2f            
0x11730:	mov rax, qword ptr [rbp - 8]        #    this->pathlen |=| 1;
0x11734:	mov qword ptr [rax + 0x78], 1       
0x1173c:	mov rax, qword ptr [rbp - 8]        #    chdir(this|-|>path);
0x11740:	mov rax, qword ptr [rax + 0x18]     
0x11744:	mov rdi, rax                        #    |c|hdir(this->path);
0x11747:	call 0x4970                         
0x1174c:	mov rax, qword ptr [rbp - 8]        #    |p|anel_action(this, act_REGET, (panel_t *)NULL, (void *)NULL, 1);
0x11750:	mov r8d, 1                          
0x11756:	mov ecx, 0                          
0x1175b:	mov edx, 0                          
0x11760:	mov esi, 0x22                       
0x11765:	mov rdi, rax                        
0x11768:	call 0x1a89a                        
0x1176d:	nop                                 #|}|
0x1176e:	leave                               
0x1176f:	ret                                 
0x11770:	endbr64                             #|{|
0x11774:	push rbp                            
0x11775:	mov rbp, rsp                        
0x11778:	sub rsp, 0x30                       
0x1177c:	mov qword ptr [rbp - 0x28], rdi     
0x11780:	mov dword ptr [rbp - 0x2c], esi     
0x11783:	mov qword ptr [rbp - 0x20], 0       #    size_t |l|ongest_length = 0;
0x1178b:	mov qword ptr [rbp - 0x10], 0       #    file_type_info_t *|l|ongest_fti = NULL;
0x11793:	mov rax, qword ptr [rbp - 0x28]     #    this|-|>dir_entry[entry].fti_loaded = 1;
0x11797:	mov rcx, qword ptr [rax + 0x38]     
0x1179b:	mov eax, dword ptr [rbp - 0x2c]     #    this->dir_entry|[|entry].fti_loaded = 1;
0x1179e:	movsxd rdx, eax                     
0x117a1:	mov rax, rdx                        
0x117a4:	shl rax, 2                          
0x117a8:	add rax, rdx                        
0x117ab:	shl rax, 4                          
0x117af:	add rax, rcx                        
0x117b2:	mov byte ptr [rax + 0x4b], 1        #    this->dir_entry[entry].fti_loaded |=| 1;
0x117b6:	mov rax, qword ptr [rip + 0x202fb]  #    for (fti |=| fti_head; fti; fti = fti->next)
0x117bd:	mov qword ptr [rbp - 0x18], rax     
0x117c1:	jmp 0x11839                         #    |f|or (fti = fti_head; fti; fti = fti->next)
0x117c3:	mov rax, qword ptr [rbp - 0x28]     #	if (fnmatch(fti->pattern, this|-|>dir_entry[entry].name,
0x117c7:	mov rcx, qword ptr [rax + 0x38]     
0x117cb:	mov eax, dword ptr [rbp - 0x2c]     #	if (fnmatch(fti->pattern, this->dir_entry|[|entry].name,
0x117ce:	movsxd rdx, eax                     
0x117d1:	mov rax, rdx                        
0x117d4:	shl rax, 2                          
0x117d8:	add rax, rdx                        
0x117db:	shl rax, 4                          
0x117df:	add rax, rcx                        
0x117e2:	mov rcx, qword ptr [rax]            #	if (fnmatch(fti->pattern, this->dir_entry[entry]|.|name,
0x117e5:	mov rax, qword ptr [rbp - 0x18]     #	if (fnmatch(fti|-|>pattern, this->dir_entry[entry].name,
0x117e9:	mov rax, qword ptr [rax]            
0x117ec:	mov edx, 0x15                       #	if (|f|nmatch(fti->pattern, this->dir_entry[entry].name,
0x117f1:	mov rsi, rcx                        
0x117f4:	mov rdi, rax                        
0x117f7:	call 0x4a00                         
0x117fc:	test eax, eax                       #	if |(|fnmatch(fti->pattern, this->dir_entry[entry].name,
0x117fe:	jne 0x1182d                         
0x11800:	mov rax, qword ptr [rbp - 0x18]     #	    length = strlen(fti|-|>pattern);
0x11804:	mov rax, qword ptr [rax]            
0x11807:	mov rdi, rax                        #	    length = |s|trlen(fti->pattern);
0x1180a:	call 0x4960                         
0x1180f:	mov qword ptr [rbp - 8], rax        
0x11813:	mov rax, qword ptr [rbp - 8]        #	    if |(|length > longest_length)
0x11817:	cmp rax, qword ptr [rbp - 0x20]     
0x1181b:	jbe 0x1182d                         
0x1181d:	mov rax, qword ptr [rbp - 0x18]     #		longest_fti |=| fti;
0x11821:	mov qword ptr [rbp - 0x10], rax     
0x11825:	mov rax, qword ptr [rbp - 8]        #		longest_length |=| length;
0x11829:	mov qword ptr [rbp - 0x20], rax     
0x1182d:	mov rax, qword ptr [rbp - 0x18]     #    for (fti = fti_head; fti; fti |=| fti->next)
0x11831:	mov rax, qword ptr [rax + 0x18]     
0x11835:	mov qword ptr [rbp - 0x18], rax     
0x11839:	cmp qword ptr [rbp - 0x18], 0       #    for (fti = fti_head; |f|ti; fti = fti->next)
0x1183e:	jne 0x117c3                         
0x11840:	mov rax, qword ptr [rbp - 0x10]     #    fti |=| longest_fti;
0x11844:	mov qword ptr [rbp - 0x18], rax     
0x11848:	cmp qword ptr [rbp - 0x18], 0       #    if |(|fti)
0x1184d:	je 0x11915                          
0x11853:	mov rax, qword ptr [rbp - 0x18]     #	    (fti|-|>brightness == -1) ? OFF : fti->brightness;
0x11857:	mov eax, dword ptr [rax + 0x10]     
0x1185a:	cmp eax, -1                         #	this->dir_entry[entry].brightness |=|
0x1185d:	je 0x1186a                          
0x1185f:	mov rax, qword ptr [rbp - 0x18]     #	    (fti->brightness == -1) ? OFF : fti|-|>brightness;
0x11863:	mov eax, dword ptr [rax + 0x10]     
0x11866:	mov ecx, eax                        #	this->dir_entry[entry].brightness |=|
0x11868:	jmp 0x1186f                         
0x1186a:	mov ecx, 0                          #	this->dir_entry[entry].brightness |=|
0x1186f:	mov rax, qword ptr [rbp - 0x28]     #	this|-|>dir_entry[entry].brightness =
0x11873:	mov rsi, qword ptr [rax + 0x38]     
0x11877:	mov eax, dword ptr [rbp - 0x2c]     #	this->dir_entry|[|entry].brightness =
0x1187a:	movsxd rdx, eax                     
0x1187d:	mov rax, rdx                        
0x11880:	shl rax, 2                          
0x11884:	add rax, rdx                        
0x11887:	shl rax, 4                          
0x1188b:	add rax, rsi                        
0x1188e:	mov byte ptr [rax + 0x4e], cl       #	this->dir_entry[entry].brightness |=|
0x11891:	mov rax, qword ptr [rbp - 0x18]     #	    (fti|-|>foreground == -1) ? PanelNotSelectedFile : fti->foreground;
0x11895:	mov eax, dword ptr [rax + 8]        
0x11898:	cmp eax, -1                         #	this->dir_entry[entry].foreground |=|
0x1189b:	jne 0x118a7                         
0x1189d:	mov eax, dword ptr [rip + 0x1ebf9]  #	    (fti->foreground == -1) ? |P|anelNotSelectedFile : fti->foreground;
0x118a3:	mov ecx, eax                        #	this->dir_entry[entry].foreground |=|
0x118a5:	jmp 0x118b0                         
0x118a7:	mov rax, qword ptr [rbp - 0x18]     #	    (fti->foreground == -1) ? PanelNotSelectedFile : fti|-|>foreground;
0x118ab:	mov eax, dword ptr [rax + 8]        
0x118ae:	mov ecx, eax                        #	this->dir_entry[entry].foreground |=|
0x118b0:	mov rax, qword ptr [rbp - 0x28]     #	this|-|>dir_entry[entry].foreground =
0x118b4:	mov rsi, qword ptr [rax + 0x38]     
0x118b8:	mov eax, dword ptr [rbp - 0x2c]     #	this->dir_entry|[|entry].foreground =
0x118bb:	movsxd rdx, eax                     
0x118be:	mov rax, rdx                        
0x118c1:	shl rax, 2                          
0x118c5:	add rax, rdx                        
0x118c8:	shl rax, 4                          
0x118cc:	add rax, rsi                        
0x118cf:	mov byte ptr [rax + 0x4c], cl       #	this->dir_entry[entry].foreground |=|
0x118d2:	mov rax, qword ptr [rbp - 0x18]     #	    (fti|-|>background == -1) ? PanelBackground : fti->background;
0x118d6:	mov eax, dword ptr [rax + 0xc]      
0x118d9:	cmp eax, -1                         #	this->dir_entry[entry].background |=|
0x118dc:	jne 0x118e8                         
0x118de:	mov eax, dword ptr [rip + 0x1eba0]  #	    (fti->background == -1) ? |P|anelBackground : fti->background;
0x118e4:	mov ecx, eax                        #	this->dir_entry[entry].background |=|
0x118e6:	jmp 0x118f1                         
0x118e8:	mov rax, qword ptr [rbp - 0x18]     #	    (fti->background == -1) ? PanelBackground : fti|-|>background;
0x118ec:	mov eax, dword ptr [rax + 0xc]      
0x118ef:	mov ecx, eax                        #	this->dir_entry[entry].background |=|
0x118f1:	mov rax, qword ptr [rbp - 0x28]     #	this|-|>dir_entry[entry].background =
0x118f5:	mov rsi, qword ptr [rax + 0x38]     
0x118f9:	mov eax, dword ptr [rbp - 0x2c]     #	this->dir_entry|[|entry].background =
0x118fc:	movsxd rdx, eax                     
0x118ff:	mov rax, rdx                        
0x11902:	shl rax, 2                          
0x11906:	add rax, rdx                        
0x11909:	shl rax, 4                          
0x1190d:	add rax, rsi                        
0x11910:	mov byte ptr [rax + 0x4d], cl       #	this->dir_entry[entry].background |=|
0x11913:	jmp 0x11938                         #|}|
0x11915:	mov rax, qword ptr [rbp - 0x28]     #	this|-|>dir_entry[entry].brightness = 2;
0x11919:	mov rcx, qword ptr [rax + 0x38]     
0x1191d:	mov eax, dword ptr [rbp - 0x2c]     #	this->dir_entry|[|entry].brightness = 2;
0x11920:	movsxd rdx, eax                     
0x11923:	mov rax, rdx                        
0x11926:	shl rax, 2                          
0x1192a:	add rax, rdx                        
0x1192d:	shl rax, 4                          
0x11931:	add rax, rcx                        
0x11934:	mov byte ptr [rax + 0x4e], 2        #	this->dir_entry[entry].brightness |=| 2;
0x11938:	nop                                 #|}|
0x11939:	leave                               
0x1193a:	ret                                 
0x1193b:	endbr64                             #|{|
0x1193f:	push rbp                            
0x11940:	mov rbp, rsp                        
0x11943:	push rbx                            
0x11944:	sub rsp, 0x178                      
0x1194b:	mov qword ptr [rbp - 0x178], rdi    
0x11952:	mov dword ptr [rbp - 0x17c], esi    
0x11958:	mov rax, qword ptr fs:[0x28]        #|{|
0x11961:	mov qword ptr [rbp - 0x18], rax     
0x11965:	xor eax, eax                        
0x11967:	lea rax, [rbp - 0x140]              #    |m|emset(&s, 0, sizeof(s));
0x1196e:	mov edx, 0x90                       
0x11973:	mov esi, 0                          
0x11978:	mov rdi, rax                        
0x1197b:	call 0x4a10                         
0x11980:	mov rax, qword ptr [rbp - 0x178]    #    xlstat(this|-|>dir_entry[entry].name, &s);
0x11987:	mov rcx, qword ptr [rax + 0x38]     
0x1198b:	mov eax, dword ptr [rbp - 0x17c]    #    xlstat(this->dir_entry|[|entry].name, &s);
0x11991:	movsxd rdx, eax                     
0x11994:	mov rax, rdx                        
0x11997:	shl rax, 2                          
0x1199b:	add rax, rdx                        
0x1199e:	shl rax, 4                          
0x119a2:	add rax, rcx                        
0x119a5:	mov rax, qword ptr [rax]            #    xlstat(this->dir_entry[entry]|.|name, &s);
0x119a8:	lea rdx, [rbp - 0x140]              #    |x|lstat(this->dir_entry[entry].name, &s);
0x119af:	mov rsi, rdx                        
0x119b2:	mov rdi, rax                        
0x119b5:	call 0x1f139                        
0x119ba:	mov rax, qword ptr [rbp - 0x178]    #    this|-|>dir_entry[entry].mode = s.st_mode;
0x119c1:	mov rcx, qword ptr [rax + 0x38]     
0x119c5:	mov eax, dword ptr [rbp - 0x17c]    #    this->dir_entry|[|entry].mode = s.st_mode;
0x119cb:	movsxd rdx, eax                     
0x119ce:	mov rax, rdx                        
0x119d1:	shl rax, 2                          
0x119d5:	add rax, rdx                        
0x119d8:	shl rax, 4                          
0x119dc:	lea rdx, [rcx + rax]                
0x119e0:	mov eax, dword ptr [rbp - 0x128]    #    this->dir_entry[entry].mode = s|.|st_mode;
0x119e6:	mov dword ptr [rdx + 0x10], eax     #    this->dir_entry[entry].mode |=| s.st_mode;
0x119e9:	mov rax, qword ptr [rbp - 0x178]    #    this|-|>dir_entry[entry].uid  = s.st_uid;
0x119f0:	mov rcx, qword ptr [rax + 0x38]     
0x119f4:	mov eax, dword ptr [rbp - 0x17c]    #    this->dir_entry|[|entry].uid  = s.st_uid;
0x119fa:	movsxd rdx, eax                     
0x119fd:	mov rax, rdx                        
0x11a00:	shl rax, 2                          
0x11a04:	add rax, rdx                        
0x11a07:	shl rax, 4                          
0x11a0b:	lea rdx, [rcx + rax]                
0x11a0f:	mov eax, dword ptr [rbp - 0x124]    #    this->dir_entry[entry].uid  = s|.|st_uid;
0x11a15:	mov dword ptr [rdx + 0x14], eax     #    this->dir_entry[entry].uid  |=| s.st_uid;
0x11a18:	mov rax, qword ptr [rbp - 0x178]    #    this|-|>dir_entry[entry].gid  = s.st_gid;
0x11a1f:	mov rcx, qword ptr [rax + 0x38]     
0x11a23:	mov eax, dword ptr [rbp - 0x17c]    #    this->dir_entry|[|entry].gid  = s.st_gid;
0x11a29:	movsxd rdx, eax                     
0x11a2c:	mov rax, rdx                        
0x11a2f:	shl rax, 2                          
0x11a33:	add rax, rdx                        
0x11a36:	shl rax, 4                          
0x11a3a:	lea rdx, [rcx + rax]                
0x11a3e:	mov eax, dword ptr [rbp - 0x120]    #    this->dir_entry[entry].gid  = s|.|st_gid;
0x11a44:	mov dword ptr [rdx + 0x18], eax     #    this->dir_entry[entry].gid  |=| s.st_gid;
0x11a47:	mov rax, qword ptr [rbp - 0x138]    #    if (s|.|st_ino)
0x11a4e:	test rax, rax                       #    if |(|s.st_ino)
0x11a51:	je 0x11d9a                          
0x11a57:	mov eax, dword ptr [rbp - 0x128]    #	if (|S|_ISDIR(s.st_mode))
0x11a5d:	and eax, 0xf000                     
0x11a62:	cmp eax, 0x4000                     #	if |(|S_ISDIR(s.st_mode))
0x11a67:	jne 0x11a97                         
0x11a69:	mov rax, qword ptr [rbp - 0x178]    #	    this|-|>dir_entry[entry].type = DIR_ENTRY;
0x11a70:	mov rcx, qword ptr [rax + 0x38]     
0x11a74:	mov eax, dword ptr [rbp - 0x17c]    #	    this->dir_entry|[|entry].type = DIR_ENTRY;
0x11a7a:	movsxd rdx, eax                     
0x11a7d:	mov rax, rdx                        
0x11a80:	shl rax, 2                          
0x11a84:	add rax, rdx                        
0x11a87:	shl rax, 4                          
0x11a8b:	add rax, rcx                        
0x11a8e:	mov byte ptr [rax + 0x48], 0        #	    this->dir_entry[entry].type |=| DIR_ENTRY;
0x11a92:	jmp 0x11d64                         
0x11a97:	mov eax, dword ptr [rbp - 0x128]    #	    if (|S|_ISREG(s.st_mode))
0x11a9d:	and eax, 0xf000                     
0x11aa2:	cmp eax, 0x8000                     #	    if |(|S_ISREG(s.st_mode))
0x11aa7:	jne 0x11b28                         
0x11aa9:	mov rax, qword ptr [rbp - 0x178]    #		this|-|>dir_entry[entry].type = FILE_ENTRY;
0x11ab0:	mov rcx, qword ptr [rax + 0x38]     
0x11ab4:	mov eax, dword ptr [rbp - 0x17c]    #		this->dir_entry|[|entry].type = FILE_ENTRY;
0x11aba:	movsxd rdx, eax                     
0x11abd:	mov rax, rdx                        
0x11ac0:	shl rax, 2                          
0x11ac4:	add rax, rdx                        
0x11ac7:	shl rax, 4                          
0x11acb:	add rax, rcx                        
0x11ace:	mov byte ptr [rax + 0x48], 1        #		this->dir_entry[entry].type |=| FILE_ENTRY;
0x11ad2:	mov eax, dword ptr [rbp - 0x128]    #		    ((s|.|st_mode & 0111) && !this->msdosfs) ? 1 : 0;
0x11ad8:	and eax, 0x49                       #		    ((s.st_mode |&| 0111) && !this->msdosfs) ? 1 : 0;
0x11adb:	test eax, eax                       #		    ((s.st_mode & 0111) && !this->msdosfs) ? 1 |:| 0;
0x11add:	je 0x11af4                          
0x11adf:	mov rax, qword ptr [rbp - 0x178]    #		    ((s.st_mode & 0111) && !this|-|>msdosfs) ? 1 : 0;
0x11ae6:	mov eax, dword ptr [rax + 0x10]     
0x11ae9:	test eax, eax                       #		    ((s.st_mode & 0111) && !this->msdosfs) ? 1 |:| 0;
0x11aeb:	jne 0x11af4                         
0x11aed:	mov esi, 1                          #		    ((s.st_mode & 0111) && !this->msdosfs) ? 1 |:| 0;
0x11af2:	jmp 0x11af9                         
0x11af4:	mov esi, 0                          #		    ((s.st_mode & 0111) && !this->msdosfs) ? 1 |:| 0;
0x11af9:	mov rax, qword ptr [rbp - 0x178]    #		this|-|>dir_entry[entry].executable =
0x11b00:	mov rcx, qword ptr [rax + 0x38]     
0x11b04:	mov eax, dword ptr [rbp - 0x17c]    #		this->dir_entry|[|entry].executable =
0x11b0a:	movsxd rdx, eax                     
0x11b0d:	mov rax, rdx                        
0x11b10:	shl rax, 2                          
0x11b14:	add rax, rdx                        
0x11b17:	shl rax, 4                          
0x11b1b:	add rax, rcx                        
0x11b1e:	mov edx, esi                        #		this->dir_entry[entry].executable |=|
0x11b20:	mov byte ptr [rax + 0x4a], dl       
0x11b23:	jmp 0x11d64                         
0x11b28:	mov rax, qword ptr [rbp - 0x178]    #		this|-|>dir_entry[entry].executable = 0;
0x11b2f:	mov rcx, qword ptr [rax + 0x38]     
0x11b33:	mov eax, dword ptr [rbp - 0x17c]    #		this->dir_entry|[|entry].executable = 0;
0x11b39:	movsxd rdx, eax                     
0x11b3c:	mov rax, rdx                        
0x11b3f:	shl rax, 2                          
0x11b43:	add rax, rdx                        
0x11b46:	shl rax, 4                          
0x11b4a:	add rax, rcx                        
0x11b4d:	mov byte ptr [rax + 0x4a], 0        #		this->dir_entry[entry].executable |=| 0;
0x11b51:	mov eax, dword ptr [rbp - 0x128]    #		if (|S|_ISFIFO(s.st_mode))
0x11b57:	and eax, 0xf000                     
0x11b5c:	cmp eax, 0x1000                     #		if |(|S_ISFIFO(s.st_mode))
0x11b61:	jne 0x11b91                         
0x11b63:	mov rax, qword ptr [rbp - 0x178]    #		    this|-|>dir_entry[entry].type = FIFO_ENTRY;
0x11b6a:	mov rcx, qword ptr [rax + 0x38]     
0x11b6e:	mov eax, dword ptr [rbp - 0x17c]    #		    this->dir_entry|[|entry].type = FIFO_ENTRY;
0x11b74:	movsxd rdx, eax                     
0x11b77:	mov rax, rdx                        
0x11b7a:	shl rax, 2                          
0x11b7e:	add rax, rdx                        
0x11b81:	shl rax, 4                          
0x11b85:	add rax, rcx                        
0x11b88:	mov byte ptr [rax + 0x48], 3        #		    this->dir_entry[entry].type |=| FIFO_ENTRY;
0x11b8c:	jmp 0x11d64                         
0x11b91:	mov eax, dword ptr [rbp - 0x128]    #		    if (|S|_ISSOCK(s.st_mode))
0x11b97:	and eax, 0xf000                     
0x11b9c:	cmp eax, 0xc000                     #		    if |(|S_ISSOCK(s.st_mode))
0x11ba1:	jne 0x11bd1                         
0x11ba3:	mov rax, qword ptr [rbp - 0x178]    #			this|-|>dir_entry[entry].type = SOCKET_ENTRY;
0x11baa:	mov rcx, qword ptr [rax + 0x38]     
0x11bae:	mov eax, dword ptr [rbp - 0x17c]    #			this->dir_entry|[|entry].type = SOCKET_ENTRY;
0x11bb4:	movsxd rdx, eax                     
0x11bb7:	mov rax, rdx                        
0x11bba:	shl rax, 2                          
0x11bbe:	add rax, rdx                        
0x11bc1:	shl rax, 4                          
0x11bc5:	add rax, rcx                        
0x11bc8:	mov byte ptr [rax + 0x48], 4        #			this->dir_entry[entry].type |=| SOCKET_ENTRY;
0x11bcc:	jmp 0x11d64                         
0x11bd1:	mov eax, dword ptr [rbp - 0x128]    #			if (|S|_ISLNK(s.st_mode))
0x11bd7:	and eax, 0xf000                     
0x11bdc:	cmp eax, 0xa000                     #			if |(|S_ISLNK(s.st_mode))
0x11be1:	jne 0x11d3b                         
0x11be7:	mov rax, qword ptr [rbp - 0x178]    #				xstat(this|-|>dir_entry[entry].name, &s_tmp);
0x11bee:	mov rcx, qword ptr [rax + 0x38]     
0x11bf2:	mov eax, dword ptr [rbp - 0x17c]    #				xstat(this->dir_entry|[|entry].name, &s_tmp);
0x11bf8:	movsxd rdx, eax                     
0x11bfb:	mov rax, rdx                        
0x11bfe:	shl rax, 2                          
0x11c02:	add rax, rdx                        
0x11c05:	shl rax, 4                          
0x11c09:	add rax, rcx                        
0x11c0c:	mov rax, qword ptr [rax]            #				xstat(this->dir_entry[entry]|.|name, &s_tmp);
0x11c0f:	lea rdx, [rbp - 0xb0]               #				|x|stat(this->dir_entry[entry].name, &s_tmp);
0x11c16:	mov rsi, rdx                        
0x11c19:	mov rdi, rax                        
0x11c1c:	call 0x1f0e4                        
0x11c21:	mov dword ptr [rbp - 0x15c], eax    
0x11c27:	cmp dword ptr [rbp - 0x15c], -1     #			    if |(|stat_error == -1)
0x11c2e:	jne 0x11cb7                         
0x11c34:	mov rax, qword ptr [rbp - 0x178]    #				this|-|>dir_entry[entry].type = SYMLINK_ENTRY;
0x11c3b:	mov rcx, qword ptr [rax + 0x38]     
0x11c3f:	mov eax, dword ptr [rbp - 0x17c]    #				this->dir_entry|[|entry].type = SYMLINK_ENTRY;
0x11c45:	movsxd rdx, eax                     
0x11c48:	mov rax, rdx                        
0x11c4b:	shl rax, 2                          
0x11c4f:	add rax, rdx                        
0x11c52:	shl rax, 4                          
0x11c56:	add rax, rcx                        
0x11c59:	mov byte ptr [rax + 0x48], 2        #				this->dir_entry[entry].type |=| SYMLINK_ENTRY;
0x11c5d:	mov rax, qword ptr [rbp - 0x178]    #				sz = xreadlink(this|-|>dir_entry[entry].name);
0x11c64:	mov rcx, qword ptr [rax + 0x38]     
0x11c68:	mov eax, dword ptr [rbp - 0x17c]    #				sz = xreadlink(this->dir_entry|[|entry].name);
0x11c6e:	movsxd rdx, eax                     
0x11c71:	mov rax, rdx                        
0x11c74:	shl rax, 2                          
0x11c78:	add rax, rdx                        
0x11c7b:	shl rax, 4                          
0x11c7f:	add rax, rcx                        
0x11c82:	mov rax, qword ptr [rax]            #				sz = xreadlink(this->dir_entry[entry]|.|name);
0x11c85:	mov rdi, rax                        #				sz = |x|readlink(this->dir_entry[entry].name);
0x11c88:	call 0x1f01d                        
0x11c8d:	mov dword ptr [rbp - 0x160], eax    
0x11c93:	cmp dword ptr [rbp - 0x160], -1     #				s.st_size = (sz == -1) ? 0 |:| sz;
0x11c9a:	je 0x11ca6                          
0x11c9c:	mov eax, dword ptr [rbp - 0x160]    #				s.st_size = (sz == -1) ? 0 |:| sz;
0x11ca2:	cdqe                                
0x11ca4:	jmp 0x11cab                         
0x11ca6:	mov eax, 0                          #				s.st_size = (sz == -1) ? 0 |:| sz;
0x11cab:	mov qword ptr [rbp - 0x110], rax    #				s.st_size |=| (sz == -1) ? 0 : sz;
0x11cb2:	jmp 0x11d64                         
0x11cb7:	mov eax, dword ptr [rbp - 0x98]     #				    |S|_ISDIR(s_tmp.st_mode) ?  DIR_ENTRY :
0x11cbd:	and eax, 0xf000                     
0x11cc2:	cmp eax, 0x4000                     #				    S_ISDIR(s_tmp.st_mode) ?  DIR_ENTRY |:|
0x11cc7:	setne sil                           
0x11ccb:	mov rax, qword ptr [rbp - 0x178]    #				this|-|>dir_entry[entry].type =
0x11cd2:	mov rcx, qword ptr [rax + 0x38]     
0x11cd6:	mov eax, dword ptr [rbp - 0x17c]    #				this->dir_entry|[|entry].type =
0x11cdc:	movsxd rdx, eax                     
0x11cdf:	mov rax, rdx                        
0x11ce2:	shl rax, 2                          
0x11ce6:	add rax, rdx                        
0x11ce9:	shl rax, 4                          
0x11ced:	add rax, rcx                        
0x11cf0:	mov edx, esi                        #				    S_ISDIR(s_tmp.st_mode) ?  DIR_ENTRY |:|
0x11cf2:	mov byte ptr [rax + 0x48], dl       #				this->dir_entry[entry].type |=|
0x11cf5:	mov rax, qword ptr [rbp - 0x80]     #				s.st_size = s_tmp|.|st_size;
0x11cf9:	mov qword ptr [rbp - 0x110], rax    #				s.st_size |=| s_tmp.st_size;
0x11d00:	mov eax, dword ptr [rbp - 0x98]     #				    (s_tmp|.|st_mode & 0111) ? 1 : 0;
0x11d06:	and eax, 0x49                       #				    (s_tmp.st_mode |&| 0111) ? 1 : 0;
0x11d09:	test eax, eax                       #				    (s_tmp.st_mode & 0111) ? 1 |:| 0;
0x11d0b:	setne sil                           
0x11d0f:	mov rax, qword ptr [rbp - 0x178]    #				this|-|>dir_entry[entry].executable =
0x11d16:	mov rcx, qword ptr [rax + 0x38]     
0x11d1a:	mov eax, dword ptr [rbp - 0x17c]    #				this->dir_entry|[|entry].executable =
0x11d20:	movsxd rdx, eax                     
0x11d23:	mov rax, rdx                        
0x11d26:	shl rax, 2                          
0x11d2a:	add rax, rdx                        
0x11d2d:	shl rax, 4                          
0x11d31:	add rax, rcx                        
0x11d34:	mov edx, esi                        #				    (s_tmp.st_mode & 0111) ? 1 |:| 0;
0x11d36:	mov byte ptr [rax + 0x4a], dl       #				this->dir_entry[entry].executable |=|
0x11d39:	jmp 0x11d64                         
0x11d3b:	mov rax, qword ptr [rbp - 0x178]    #			    this|-|>dir_entry[entry].type = FILE_ENTRY;
0x11d42:	mov rcx, qword ptr [rax + 0x38]     
0x11d46:	mov eax, dword ptr [rbp - 0x17c]    #			    this->dir_entry|[|entry].type = FILE_ENTRY;
0x11d4c:	movsxd rdx, eax                     
0x11d4f:	mov rax, rdx                        
0x11d52:	shl rax, 2                          
0x11d56:	add rax, rdx                        
0x11d59:	shl rax, 4                          
0x11d5d:	add rax, rcx                        
0x11d60:	mov byte ptr [rax + 0x48], 1        #			    this->dir_entry[entry].type |=| FILE_ENTRY;
0x11d64:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].size = s.st_size;
0x11d6b:	mov rcx, qword ptr [rax + 0x38]     
0x11d6f:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].size = s.st_size;
0x11d75:	movsxd rdx, eax                     
0x11d78:	mov rax, rdx                        
0x11d7b:	shl rax, 2                          
0x11d7f:	add rax, rdx                        
0x11d82:	shl rax, 4                          
0x11d86:	lea rdx, [rcx + rax]                
0x11d8a:	mov rax, qword ptr [rbp - 0x110]    #	this->dir_entry[entry].size = s|.|st_size;
0x11d91:	mov qword ptr [rdx + 8], rax        #	this->dir_entry[entry].size |=| s.st_size;
0x11d95:	jmp 0x11e3b                         
0x11d9a:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].type = SYMLINK_ENTRY;
0x11da1:	mov rcx, qword ptr [rax + 0x38]     
0x11da5:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].type = SYMLINK_ENTRY;
0x11dab:	movsxd rdx, eax                     
0x11dae:	mov rax, rdx                        
0x11db1:	shl rax, 2                          
0x11db5:	add rax, rdx                        
0x11db8:	shl rax, 4                          
0x11dbc:	add rax, rcx                        
0x11dbf:	mov byte ptr [rax + 0x48], 2        #	this->dir_entry[entry].type |=| SYMLINK_ENTRY;
0x11dc3:	mov rax, qword ptr [rbp - 0x178]    #	sz = xreadlink(this|-|>dir_entry[entry].name);
0x11dca:	mov rcx, qword ptr [rax + 0x38]     
0x11dce:	mov eax, dword ptr [rbp - 0x17c]    #	sz = xreadlink(this->dir_entry|[|entry].name);
0x11dd4:	movsxd rdx, eax                     
0x11dd7:	mov rax, rdx                        
0x11dda:	shl rax, 2                          
0x11dde:	add rax, rdx                        
0x11de1:	shl rax, 4                          
0x11de5:	add rax, rcx                        
0x11de8:	mov rax, qword ptr [rax]            #	sz = xreadlink(this->dir_entry[entry]|.|name);
0x11deb:	mov rdi, rax                        #	sz = |x|readlink(this->dir_entry[entry].name);
0x11dee:	call 0x1f01d                        
0x11df3:	mov dword ptr [rbp - 0x160], eax    
0x11df9:	cmp dword ptr [rbp - 0x160], -1     #	this->dir_entry[entry].size = (sz == -1) ? 0 |:| sz;
0x11e00:	je 0x11e0d                          
0x11e02:	mov eax, dword ptr [rbp - 0x160]    #	this->dir_entry[entry].size = (sz == -1) ? 0 |:| sz;
0x11e08:	movsxd rdx, eax                     
0x11e0b:	jmp 0x11e12                         
0x11e0d:	mov edx, 0                          #	this->dir_entry[entry].size = (sz == -1) ? 0 |:| sz;
0x11e12:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].size = (sz == -1) ? 0 : sz;
0x11e19:	mov rsi, qword ptr [rax + 0x38]     
0x11e1d:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].size = (sz == -1) ? 0 : sz;
0x11e23:	movsxd rcx, eax                     
0x11e26:	mov rax, rcx                        
0x11e29:	shl rax, 2                          
0x11e2d:	add rax, rcx                        
0x11e30:	shl rax, 4                          
0x11e34:	add rax, rsi                        
0x11e37:	mov qword ptr [rax + 8], rdx        #	this->dir_entry[entry].size |=| (sz == -1) ? 0 : sz;
0x11e3b:	mov eax, dword ptr [rbp - 0x124]    #    owner=|g|etuser(s.st_uid);
0x11e41:	mov edi, eax                        
0x11e43:	call 0x242f0                        
0x11e48:	mov qword ptr [rbp - 0x158], rax    
0x11e4f:	cmp qword ptr [rbp - 0x158], 0      #    if|(|owner)
0x11e57:	je 0x11f07                          
0x11e5d:	mov rax, qword ptr [rbp - 0x158]    #	this->dir_entry[entry].owner=xmalloc(1 + |m|ax(strlen(owner),8));
0x11e64:	mov rdi, rax                        
0x11e67:	call 0x4960                         
0x11e6c:	cmp rax, 7                          #	this->dir_entry[entry].owner=|x|malloc(1 + max(strlen(owner),8));
0x11e70:	jbe 0x11e87                         
0x11e72:	mov rax, qword ptr [rbp - 0x158]    #	this->dir_entry[entry].owner=xmalloc(1 + |m|ax(strlen(owner),8));
0x11e79:	mov rdi, rax                        
0x11e7c:	call 0x4960                         
0x11e81:	lea rdx, [rax + 1]                  #	this->dir_entry[entry].owner=|x|malloc(1 + max(strlen(owner),8));
0x11e85:	jmp 0x11e8c                         
0x11e87:	mov edx, 9                          #	this->dir_entry[entry].owner=|x|malloc(1 + max(strlen(owner),8));
0x11e8c:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].owner=xmalloc(1 + max(strlen(owner),8));
0x11e93:	mov rsi, qword ptr [rax + 0x38]     
0x11e97:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].owner=xmalloc(1 + max(strlen(owner),8));
0x11e9d:	movsxd rcx, eax                     
0x11ea0:	mov rax, rcx                        
0x11ea3:	shl rax, 2                          
0x11ea7:	add rax, rcx                        
0x11eaa:	shl rax, 4                          
0x11eae:	lea rbx, [rsi + rax]                
0x11eb2:	mov rdi, rdx                        #	this->dir_entry[entry].owner=|x|malloc(1 + max(strlen(owner),8));
0x11eb5:	call 0x24650                        
0x11eba:	mov qword ptr [rbx + 0x28], rax     #	this->dir_entry[entry].owner|=|xmalloc(1 + max(strlen(owner),8));
0x11ebe:	mov rax, qword ptr [rbp - 0x178]    #	sprintf(this|-|>dir_entry[entry].owner,"%-7s", owner);
0x11ec5:	mov rcx, qword ptr [rax + 0x38]     
0x11ec9:	mov eax, dword ptr [rbp - 0x17c]    #	sprintf(this->dir_entry|[|entry].owner,"%-7s", owner);
0x11ecf:	movsxd rdx, eax                     
0x11ed2:	mov rax, rdx                        
0x11ed5:	shl rax, 2                          
0x11ed9:	add rax, rdx                        
0x11edc:	shl rax, 4                          
0x11ee0:	add rax, rcx                        
0x11ee3:	mov rax, qword ptr [rax + 0x28]     #	|s|printf(this->dir_entry[entry].owner,"%-7s", owner);
0x11ee7:	mov rdx, qword ptr [rbp - 0x158]    
0x11eee:	lea rcx, [rip + 0x166c6]            
0x11ef5:	mov rsi, rcx                        
0x11ef8:	mov rdi, rax                        
0x11efb:	mov eax, 0                          
0x11f00:	call 0x4dd0                         
0x11f05:	jmp 0x11f81                         
0x11f07:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].owner=xmalloc(32);
0x11f0e:	mov rcx, qword ptr [rax + 0x38]     
0x11f12:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].owner=xmalloc(32);
0x11f18:	movsxd rdx, eax                     
0x11f1b:	mov rax, rdx                        
0x11f1e:	shl rax, 2                          
0x11f22:	add rax, rdx                        
0x11f25:	shl rax, 4                          
0x11f29:	lea rbx, [rcx + rax]                
0x11f2d:	mov edi, 0x20                       #	this->dir_entry[entry].owner=|x|malloc(32);
0x11f32:	call 0x24650                        
0x11f37:	mov qword ptr [rbx + 0x28], rax     #	this->dir_entry[entry].owner|=|xmalloc(32);
0x11f3b:	mov edx, dword ptr [rbp - 0x124]    #	|s|printf(this->dir_entry[entry].owner,"%-7u",s.st_uid);
0x11f41:	mov rax, qword ptr [rbp - 0x178]    #	sprintf(this|-|>dir_entry[entry].owner,"%-7u",s.st_uid);
0x11f48:	mov rsi, qword ptr [rax + 0x38]     
0x11f4c:	mov eax, dword ptr [rbp - 0x17c]    #	sprintf(this->dir_entry|[|entry].owner,"%-7u",s.st_uid);
0x11f52:	movsxd rcx, eax                     
0x11f55:	mov rax, rcx                        
0x11f58:	shl rax, 2                          
0x11f5c:	add rax, rcx                        
0x11f5f:	shl rax, 4                          
0x11f63:	add rax, rsi                        
0x11f66:	mov rax, qword ptr [rax + 0x28]     #	|s|printf(this->dir_entry[entry].owner,"%-7u",s.st_uid);
0x11f6a:	lea rcx, [rip + 0x1664f]            
0x11f71:	mov rsi, rcx                        
0x11f74:	mov rdi, rax                        
0x11f77:	mov eax, 0                          
0x11f7c:	call 0x4dd0                         
0x11f81:	mov eax, dword ptr [rbp - 0x120]    #    group=|g|etgroup(s.st_gid);
0x11f87:	mov edi, eax                        
0x11f89:	call 0x244a0                        
0x11f8e:	mov qword ptr [rbp - 0x150], rax    
0x11f95:	cmp qword ptr [rbp - 0x150], 0      #    if|(|group)
0x11f9d:	je 0x1204d                          
0x11fa3:	mov rax, qword ptr [rbp - 0x150]    #	this->dir_entry[entry].group=xmalloc(1 + |m|ax(strlen(group),8));
0x11faa:	mov rdi, rax                        
0x11fad:	call 0x4960                         
0x11fb2:	cmp rax, 7                          #	this->dir_entry[entry].group=|x|malloc(1 + max(strlen(group),8));
0x11fb6:	jbe 0x11fcd                         
0x11fb8:	mov rax, qword ptr [rbp - 0x150]    #	this->dir_entry[entry].group=xmalloc(1 + |m|ax(strlen(group),8));
0x11fbf:	mov rdi, rax                        
0x11fc2:	call 0x4960                         
0x11fc7:	lea rdx, [rax + 1]                  #	this->dir_entry[entry].group=|x|malloc(1 + max(strlen(group),8));
0x11fcb:	jmp 0x11fd2                         
0x11fcd:	mov edx, 9                          #	this->dir_entry[entry].group=|x|malloc(1 + max(strlen(group),8));
0x11fd2:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].group=xmalloc(1 + max(strlen(group),8));
0x11fd9:	mov rsi, qword ptr [rax + 0x38]     
0x11fdd:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].group=xmalloc(1 + max(strlen(group),8));
0x11fe3:	movsxd rcx, eax                     
0x11fe6:	mov rax, rcx                        
0x11fe9:	shl rax, 2                          
0x11fed:	add rax, rcx                        
0x11ff0:	shl rax, 4                          
0x11ff4:	lea rbx, [rsi + rax]                
0x11ff8:	mov rdi, rdx                        #	this->dir_entry[entry].group=|x|malloc(1 + max(strlen(group),8));
0x11ffb:	call 0x24650                        
0x12000:	mov qword ptr [rbx + 0x30], rax     #	this->dir_entry[entry].group|=|xmalloc(1 + max(strlen(group),8));
0x12004:	mov rax, qword ptr [rbp - 0x178]    #	sprintf(this|-|>dir_entry[entry].group,"%-7s", group);
0x1200b:	mov rcx, qword ptr [rax + 0x38]     
0x1200f:	mov eax, dword ptr [rbp - 0x17c]    #	sprintf(this->dir_entry|[|entry].group,"%-7s", group);
0x12015:	movsxd rdx, eax                     
0x12018:	mov rax, rdx                        
0x1201b:	shl rax, 2                          
0x1201f:	add rax, rdx                        
0x12022:	shl rax, 4                          
0x12026:	add rax, rcx                        
0x12029:	mov rax, qword ptr [rax + 0x30]     #	|s|printf(this->dir_entry[entry].group,"%-7s", group);
0x1202d:	mov rdx, qword ptr [rbp - 0x150]    
0x12034:	lea rcx, [rip + 0x16580]            
0x1203b:	mov rsi, rcx                        
0x1203e:	mov rdi, rax                        
0x12041:	mov eax, 0                          
0x12046:	call 0x4dd0                         
0x1204b:	jmp 0x120c7                         
0x1204d:	mov rax, qword ptr [rbp - 0x178]    #	this|-|>dir_entry[entry].group=xmalloc(32);
0x12054:	mov rcx, qword ptr [rax + 0x38]     
0x12058:	mov eax, dword ptr [rbp - 0x17c]    #	this->dir_entry|[|entry].group=xmalloc(32);
0x1205e:	movsxd rdx, eax                     
0x12061:	mov rax, rdx                        
0x12064:	shl rax, 2                          
0x12068:	add rax, rdx                        
0x1206b:	shl rax, 4                          
0x1206f:	lea rbx, [rcx + rax]                
0x12073:	mov edi, 0x20                       #	this->dir_entry[entry].group=|x|malloc(32);
0x12078:	call 0x24650                        
0x1207d:	mov qword ptr [rbx + 0x30], rax     #	this->dir_entry[entry].group|=|xmalloc(32);
0x12081:	mov edx, dword ptr [rbp - 0x120]    #	|s|printf(this->dir_entry[entry].group,"%-7u",s.st_gid);
0x12087:	mov rax, qword ptr [rbp - 0x178]    #	sprintf(this|-|>dir_entry[entry].group,"%-7u",s.st_gid);
0x1208e:	mov rsi, qword ptr [rax + 0x38]     
0x12092:	mov eax, dword ptr [rbp - 0x17c]    #	sprintf(this->dir_entry|[|entry].group,"%-7u",s.st_gid);
0x12098:	movsxd rcx, eax                     
0x1209b:	mov rax, rcx                        
0x1209e:	shl rax, 2                          
0x120a2:	add rax, rcx                        
0x120a5:	shl rax, 4                          
0x120a9:	add rax, rsi                        
0x120ac:	mov rax, qword ptr [rax + 0x30]     #	|s|printf(this->dir_entry[entry].group,"%-7u",s.st_gid);
0x120b0:	lea rcx, [rip + 0x16509]            
0x120b7:	mov rsi, rcx                        
0x120ba:	mov rdi, rax                        
0x120bd:	mov eax, 0                          
0x120c2:	call 0x4dd0                         
0x120c7:	mov rax, qword ptr [rbp - 0x178]    #    this|-|>dir_entry[entry].mtime = s.st_mtime;
0x120ce:	mov rcx, qword ptr [rax + 0x38]     
0x120d2:	mov eax, dword ptr [rbp - 0x17c]    #    this->dir_entry|[|entry].mtime = s.st_mtime;
0x120d8:	movsxd rdx, eax                     
0x120db:	mov rax, rdx                        
0x120de:	shl rax, 2                          
0x120e2:	add rax, rdx                        
0x120e5:	shl rax, 4                          
0x120e9:	lea rdx, [rcx + rax]                
0x120ed:	mov rax, qword ptr [rbp - 0xe8]     #    this->dir_entry[entry].mtime = s.|s|t_mtime;
0x120f4:	mov qword ptr [rdx + 0x20], rax     #    this->dir_entry[entry].mtime |=| s.st_mtime;
0x120f8:	lea rax, [rbp - 0x140]              #    time = |l|ocaltime(&s.st_mtime);
0x120ff:	add rax, 0x58                       
0x12103:	mov rdi, rax                        
0x12106:	call 0x4800                         
0x1210b:	mov qword ptr [rbp - 0x148], rax    
0x12112:	mov rax, qword ptr [rbp - 0x148]    #    if ((hour = time|-|>tm_hour % 12) == 0)
0x12119:	mov edx, dword ptr [rax + 8]        
0x1211c:	movsxd rax, edx                     #    if ((hour |=| time->tm_hour % 12) == 0)
0x1211f:	imul rax, rax, 0x2aaaaaab           
0x12126:	shr rax, 0x20                       
0x1212a:	sar eax, 1                          
0x1212c:	mov ecx, edx                        
0x1212e:	sar ecx, 0x1f                       
0x12131:	sub eax, ecx                        
0x12133:	mov dword ptr [rbp - 0x164], eax    
0x12139:	mov ecx, dword ptr [rbp - 0x164]    
0x1213f:	mov eax, ecx                        
0x12141:	add eax, eax                        
0x12143:	add eax, ecx                        
0x12145:	shl eax, 2                          
0x12148:	sub edx, eax                        
0x1214a:	mov dword ptr [rbp - 0x164], edx    
0x12150:	cmp dword ptr [rbp - 0x164], 0      #    if |(|(hour = time->tm_hour % 12) == 0)
0x12157:	jne 0x12163                         
0x12159:	mov dword ptr [rbp - 0x164], 0xc    #	hour |=| 12;
0x12163:	mov rax, qword ptr [rbp - 0x148]    #	    hour, time->tm_min, (time|-|>tm_hour < 12) ? 'a' : 'p');
0x1216a:	mov eax, dword ptr [rax + 8]        
0x1216d:	cmp eax, 0xb                        #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x12170:	jg 0x1217a                          
0x12172:	mov r9d, 0x61                       #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x12178:	jmp 0x12180                         
0x1217a:	mov r9d, 0x70                       #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x12180:	mov rax, qword ptr [rbp - 0x148]    #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x12187:	mov edi, dword ptr [rax + 4]        
0x1218a:	mov rax, qword ptr [rbp - 0x148]    #	    time->tm_mon + 1, time->tm_mday, time|-|>tm_year % 100,
0x12191:	mov eax, dword ptr [rax + 0x14]     
0x12194:	movsxd rdx, eax                     #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x12197:	imul rdx, rdx, 0x51eb851f           
0x1219e:	shr rdx, 0x20                       
0x121a2:	sar edx, 5                          
0x121a5:	mov ecx, eax                        
0x121a7:	sar ecx, 0x1f                       
0x121aa:	sub edx, ecx                        
0x121ac:	imul ecx, edx, 0x64                 
0x121af:	sub eax, ecx                        
0x121b1:	mov edx, eax                        
0x121b3:	mov rax, qword ptr [rbp - 0x148]    
0x121ba:	mov ecx, dword ptr [rax + 0xc]      
0x121bd:	mov rax, qword ptr [rbp - 0x148]    #	    time|-|>tm_mon + 1, time->tm_mday, time->tm_year % 100,
0x121c4:	mov eax, dword ptr [rax + 0x10]     
0x121c7:	lea esi, [rax + 1]                  #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x121ca:	mov rax, qword ptr [rbp - 0x178]    #    sprintf(this|-|>dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x121d1:	mov r10, qword ptr [rax + 0x38]     
0x121d5:	mov eax, dword ptr [rbp - 0x17c]    #    sprintf(this->dir_entry|[|entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x121db:	movsxd r8, eax                      
0x121de:	mov rax, r8                         
0x121e1:	shl rax, 2                          
0x121e5:	add rax, r8                         
0x121e8:	shl rax, 4                          
0x121ec:	add rax, r10                        
0x121ef:	add rax, 0x38                       #    sprintf(this->dir_entry[entry]|.|date,"%2d-%02d-%02d %2d:%02d%c",
0x121f3:	mov r8d, dword ptr [rbp - 0x164]    #    |s|printf(this->dir_entry[entry].date,"%2d-%02d-%02d %2d:%02d%c",
0x121fa:	push r9                             
0x121fc:	push rdi                            
0x121fd:	mov r9d, r8d                        
0x12200:	mov r8d, edx                        
0x12203:	mov edx, esi                        
0x12205:	lea rsi, [rip + 0x163b9]            
0x1220c:	mov rdi, rax                        
0x1220f:	mov eax, 0                          
0x12214:	call 0x4dd0                         
0x12219:	add rsp, 0x10                       
0x1221d:	nop                                 #|}|
0x1221e:	mov rax, qword ptr [rbp - 0x18]     
0x12222:	sub rax, qword ptr fs:[0x28]        
0x1222b:	je 0x12232                          
0x1222d:	call 0x4980                         #|}|
0x12232:	mov rbx, qword ptr [rbp - 8]        
0x12236:	leave                               
0x12237:	ret                                 
0x12238:	endbr64                             #|{|
0x1223c:	push rbp                            
0x1223d:	mov rbp, rsp                        
0x12240:	push rbx                            
0x12241:	sub rsp, 0x1e8                      
0x12248:	mov qword ptr [rbp - 0x1d8], rdi    
0x1224f:	mov qword ptr [rbp - 0x1e0], rsi    
0x12256:	mov dword ptr [rbp - 0x1e4], edx    
0x1225c:	mov rax, qword ptr fs:[0x28]        #|{|
0x12265:	mov qword ptr [rbp - 0x18], rax     
0x12269:	xor eax, eax                        
0x1226b:	mov dword ptr [rbp - 0x1cc], 0      #    int |d|otdot_found = 0;
0x12275:	mov qword ptr [rbp - 0x1b0], 0      #    dir_entry_t *|o|ld_dir_entry = NULL, tmp;
0x12280:	mov dword ptr [rbp - 0x1c4], 0      #    int entry, |o|ld_entries = 0, backdir_index = -1;
0x1228a:	mov dword ptr [rbp - 0x1c0], 0xffffffff#    int entry, old_entries = 0, |b|ackdir_index = -1;
0x12294:	mov rax, qword ptr [rbp - 0x1e0]    #    tmpdir = |o|pendir(directory);
0x1229b:	mov rdi, rax                        
0x1229e:	call 0x4910                         
0x122a3:	mov qword ptr [rbp - 0x1b8], rax    
0x122aa:	cmp qword ptr [rbp - 0x1b8], 0      #    if |(|tmpdir == NULL)
0x122b2:	jne 0x1238b                         
0x122b8:	mov rax, qword ptr [rbp - 0x1e0]    #	if (|s|trcmp(directory, "..") != 0)
0x122bf:	lea rdx, [rip + 0x16318]            
0x122c6:	mov rsi, rdx                        
0x122c9:	mov rdi, rax                        
0x122cc:	call 0x4af0                         
0x122d1:	test eax, eax                       #	if |(|strcmp(directory, "..") != 0)
0x122d3:	je 0x122df                          
0x122d5:	mov eax, 0                          #	    return |0|;
0x122da:	jmp 0x13107                         
0x122df:	mov eax, 0                          #	directory = |x|getcwd();
0x122e4:	call 0x1f18e                        
0x122e9:	mov qword ptr [rbp - 0x1e0], rax    
0x122f0:	cmp qword ptr [rbp - 0x1e0], 0      #	if |(|directory == NULL)
0x122f8:	jne 0x12352                         
0x122fa:	mov rax, qword ptr [rbp - 0x1d8]    #	    directory = xstrdup(this|-|>path);
0x12301:	mov rax, qword ptr [rax + 0x18]     
0x12305:	mov rdi, rax                        #	    directory = |x|strdup(this->path);
0x12308:	call 0x24780                        
0x1230d:	mov qword ptr [rbp - 0x1e0], rax    
0x12314:	mov rax, qword ptr [rbp - 0x1e0]    #	    ptr = |s|trrchr(directory, '/');
0x1231b:	mov esi, 0x2f                       
0x12320:	mov rdi, rax                        
0x12323:	call 0x49e0                         
0x12328:	mov qword ptr [rbp - 0x1a8], rax    
0x1232f:	cmp qword ptr [rbp - 0x1a8], 0      #	    if |(|ptr == NULL)
0x12337:	jne 0x12348                         
0x12339:	lea rax, [rip + 0x162a1]            #		|f|atal("bad directory");
0x12340:	mov rdi, rax                        
0x12343:	call 0x672c                         
0x12348:	mov rax, qword ptr [rbp - 0x1a8]    #	    *ptr |=| 0;
0x1234f:	mov byte ptr [rax], 0               
0x12352:	mov rax, qword ptr [rbp - 0x1e0]    #	tmpdir = |o|pendir(directory);
0x12359:	mov rdi, rax                        
0x1235c:	call 0x4910                         
0x12361:	mov qword ptr [rbp - 0x1b8], rax    
0x12368:	cmp qword ptr [rbp - 0x1b8], 0      #	if |(|tmpdir == NULL)
0x12370:	jne 0x1238b                         
0x12372:	mov rax, qword ptr [rbp - 0x1e0]    #	    |x|free(directory);
0x12379:	mov rdi, rax                        
0x1237c:	call 0x1eeae                        
0x12381:	mov eax, 0                          #	    return |0|;
0x12386:	jmp 0x13107                         
0x1238b:	mov rax, qword ptr [rbp - 0x1e0]    #    if (|c|hdir(directory) == -1)
0x12392:	mov rdi, rax                        
0x12395:	call 0x4970                         
0x1239a:	cmp eax, -1                         #    if |(|chdir(directory) == -1)
0x1239d:	jne 0x123b8                         
0x1239f:	mov rax, qword ptr [rbp - 0x1b8]    #	|c|losedir(tmpdir);
0x123a6:	mov rdi, rax                        
0x123a9:	call 0x4a80                         
0x123ae:	mov eax, 0                          #	return |0|;
0x123b3:	jmp 0x13107                         
0x123b8:	mov rax, qword ptr [rbp - 0x1d8]    #    if (this|-|>dir)
0x123bf:	mov rax, qword ptr [rax]            
0x123c2:	test rax, rax                       #    if |(|this->dir)
0x123c5:	je 0x123d9                          
0x123c7:	mov rax, qword ptr [rbp - 0x1d8]    #	|c|losedir(this->dir);
0x123ce:	mov rax, qword ptr [rax]            
0x123d1:	mov rdi, rax                        
0x123d4:	call 0x4a80                         
0x123d9:	mov rax, qword ptr [rbp - 0x1d8]    #    this->dir |=| tmpdir;
0x123e0:	mov rdx, qword ptr [rbp - 0x1b8]    
0x123e7:	mov qword ptr [rax], rdx            
0x123ea:	mov rax, qword ptr [rbp - 0x1d8]    #    old_path = xmalloc(this|-|>pathlen + 1);
0x123f1:	mov rax, qword ptr [rax + 0x78]     
0x123f5:	add rax, 1                          #    old_path = |x|malloc(this->pathlen + 1);
0x123f9:	mov rdi, rax                        
0x123fc:	call 0x24650                        
0x12401:	mov qword ptr [rbp - 0x1a0], rax    
0x12408:	mov rax, qword ptr [rbp - 0x1d8]    #    strcpy(old_path, this|-|>path);
0x1240f:	mov rdx, qword ptr [rax + 0x18]     
0x12413:	mov rax, qword ptr [rbp - 0x1a0]    #    |s|trcpy(old_path, this->path);
0x1241a:	mov rsi, rdx                        
0x1241d:	mov rdi, rax                        
0x12420:	call 0x4870                         
0x12425:	mov rax, qword ptr [rbp - 0x1e0]    #    if (directory|[|0] == '/')
0x1242c:	movzx eax, byte ptr [rax]           
0x1242f:	cmp al, 0x2f                        #    if |(|directory[0] == '/')
0x12431:	jne 0x12452                         
0x12433:	mov rax, qword ptr [rbp - 0x1e0]    #	this->path = |x|strdup(directory);
0x1243a:	mov rdi, rax                        
0x1243d:	call 0x24780                        
0x12442:	mov rdx, qword ptr [rbp - 0x1d8]    #	this->path |=| xstrdup(directory);
0x12449:	mov qword ptr [rdx + 0x18], rax     
0x1244d:	jmp 0x12590                         
0x12452:	mov eax, 0                          #	char *path = |x|getcwd();
0x12457:	call 0x1f18e                        
0x1245c:	mov qword ptr [rbp - 0x198], rax    
0x12463:	cmp qword ptr [rbp - 0x198], 0      #	if |(|path)
0x1246b:	je 0x12497                          
0x1246d:	mov rax, qword ptr [rbp - 0x1d8]    #	    xfree(this|-|>path);
0x12474:	mov rax, qword ptr [rax + 0x18]     
0x12478:	mov rdi, rax                        #	    |x|free(this->path);
0x1247b:	call 0x1eeae                        
0x12480:	mov rax, qword ptr [rbp - 0x1d8]    #	    this->path |=| path;
0x12487:	mov rdx, qword ptr [rbp - 0x198]    
0x1248e:	mov qword ptr [rax + 0x18], rdx     
0x12492:	jmp 0x12590                         
0x12497:	mov rax, qword ptr [rbp - 0x1d8]    #	    this->pathlen = strlen(this|-|>path);
0x1249e:	mov rax, qword ptr [rax + 0x18]     
0x124a2:	mov rdi, rax                        #	    this->pathlen = |s|trlen(this->path);
0x124a5:	call 0x4960                         
0x124aa:	mov rdx, qword ptr [rbp - 0x1d8]    #	    this->pathlen |=| strlen(this->path);
0x124b1:	mov qword ptr [rdx + 0x78], rax     
0x124b5:	mov rax, qword ptr [rbp - 0x1e0]    #	    if (|s|trcmp(directory, "..") == 0)
0x124bc:	lea rdx, [rip + 0x1611b]            
0x124c3:	mov rsi, rdx                        
0x124c6:	mov rdi, rax                        
0x124c9:	call 0x4af0                         
0x124ce:	test eax, eax                       #	    if |(|strcmp(directory, "..") == 0)
0x124d0:	jne 0x12516                         
0x124d2:	mov rax, qword ptr [rbp - 0x1d8]    #		char *ptr = strrchr(this|-|>path, '/');
0x124d9:	mov rax, qword ptr [rax + 0x18]     
0x124dd:	mov esi, 0x2f                       #		char *ptr = |s|trrchr(this->path, '/');
0x124e2:	mov rdi, rax                        
0x124e5:	call 0x49e0                         
0x124ea:	mov qword ptr [rbp - 0x190], rax    
0x124f1:	cmp qword ptr [rbp - 0x190], 0      #		if |(|ptr == NULL)
0x124f9:	jne 0x1250a                         
0x124fb:	lea rax, [rip + 0x160ed]            #		    |f|atal("bad path");
0x12502:	mov rdi, rax                        
0x12505:	call 0x672c                         
0x1250a:	mov rax, qword ptr [rbp - 0x190]    #		*ptr |=| 0;
0x12511:	mov byte ptr [rax], 0               
0x12514:	jmp 0x12590                         
0x12516:	mov rax, qword ptr [rbp - 0x1d8]    #		this->path = xrealloc(this->path, this|-|>pathlen + 1 + 1 +
0x1251d:	mov rbx, qword ptr [rax + 0x78]     
0x12521:	mov rax, qword ptr [rbp - 0x1e0]    #				      |s|trlen(directory));
0x12528:	mov rdi, rax                        
0x1252b:	call 0x4960                         
0x12530:	add rax, rbx                        #		this->path = xrealloc(this->path, this->pathlen + 1 + 1 |+|
0x12533:	lea rdx, [rax + 2]                  #		this->path = |x|realloc(this->path, this->pathlen + 1 + 1 +
0x12537:	mov rax, qword ptr [rbp - 0x1d8]    #		this->path = xrealloc(this|-|>path, this->pathlen + 1 + 1 +
0x1253e:	mov rax, qword ptr [rax + 0x18]     
0x12542:	mov rsi, rdx                        #		this->path = |x|realloc(this->path, this->pathlen + 1 + 1 +
0x12545:	mov rdi, rax                        
0x12548:	call 0x24670                        
0x1254d:	mov rdx, qword ptr [rbp - 0x1d8]    #		this->path |=| xrealloc(this->path, this->pathlen + 1 + 1 +
0x12554:	mov qword ptr [rdx + 0x18], rax     
0x12558:	mov rax, qword ptr [rbp - 0x1d8]    #		|s|trcat(this->path, "/");
0x1255f:	mov rbx, qword ptr [rax + 0x18]     
0x12563:	mov rdi, rbx                        
0x12566:	call 0x4960                         
0x1256b:	add rax, rbx                        
0x1256e:	mov word ptr [rax], 0x2f            
0x12573:	mov rax, qword ptr [rbp - 0x1d8]    #		|s|trcat(this->path, directory);
0x1257a:	mov rax, qword ptr [rax + 0x18]     
0x1257e:	mov rdx, qword ptr [rbp - 0x1e0]    
0x12585:	mov rsi, rdx                        
0x12588:	mov rdi, rax                        
0x1258b:	call 0x4db0                         
0x12590:	mov rax, qword ptr [rbp - 0x1d8]    #    |m|inimize_path(this->path);
0x12597:	mov rax, qword ptr [rax + 0x18]     
0x1259b:	mov rdi, rax                        
0x1259e:	call 0x1e08b                        
0x125a3:	mov rax, qword ptr [rbp - 0x1d8]    #    this->pathlen = strlen(this|-|>path);
0x125aa:	mov rax, qword ptr [rax + 0x18]     
0x125ae:	mov rdi, rax                        #    this->pathlen = |s|trlen(this->path);
0x125b1:	call 0x4960                         
0x125b6:	mov rdx, qword ptr [rbp - 0x1d8]    #    this->pathlen |=| strlen(this->path);
0x125bd:	mov qword ptr [rdx + 0x78], rax     
0x125c1:	mov rax, qword ptr [rbp - 0x1d8]    #    xstat(this|-|>path, &s);
0x125c8:	mov rax, qword ptr [rax + 0x18]     
0x125cc:	lea rdx, [rbp - 0xb0]               #    |x|stat(this->path, &s);
0x125d3:	mov rsi, rdx                        
0x125d6:	mov rdi, rax                        
0x125d9:	call 0x1f0e4                        
0x125de:	mov rax, qword ptr [rbp - 0x80]     #    if (s|.|st_size >= 2048)
0x125e2:	cmp rax, 0x7ff                      #    if |(|s.st_size >= 2048)
0x125e8:	jle 0x12603                         
0x125ea:	mov rax, qword ptr [rip + 0x1deef]  #	|i|l_message(PANEL_READ_DIR_MSG);
0x125f1:	mov rdi, rax                        
0x125f4:	call 0xfcbe                         
0x125f9:	mov eax, 0                          #	|t|ty_update();
0x125fe:	call 0xb4b7                         
0x12603:	lea rax, [rbp - 0x130]              #    |s|tatfs(".", &fstat);
0x1260a:	mov rsi, rax                        
0x1260d:	lea rax, [rip + 0x15fe4]            
0x12614:	mov rdi, rax                        
0x12617:	call 0x4bc0                         
0x1261c:	mov rax, qword ptr [rbp - 0x130]    #    this->msdosfs = fstat|.|f_type == 0x4d44;
0x12623:	cmp rax, 0x4d44                     #    this->msdosfs = fstat.f_type |=|= 0x4d44;
0x12629:	sete al                             
0x1262c:	movzx edx, al                       
0x1262f:	mov rax, qword ptr [rbp - 0x1d8]    #    this->msdosfs |=| fstat.f_type == 0x4d44;
0x12636:	mov dword ptr [rax + 0x10], edx     
0x12639:	cmp dword ptr [rbp - 0x1e4], 0      #	     this->selected_entries |&|&
0x12640:	je 0x12678                          
0x12642:	mov rax, qword ptr [rbp - 0x1d8]    #	     this|-|>selected_entries &&
0x12649:	mov eax, dword ptr [rax + 0x70]     
0x1264c:	test eax, eax                       #    verify = verify |&|&
0x1264e:	je 0x12678                          
0x12650:	mov rax, qword ptr [rbp - 0x1d8]    #	     (strcmp(old_path, this|-|>path) == 0);
0x12657:	mov rdx, qword ptr [rax + 0x18]     
0x1265b:	mov rax, qword ptr [rbp - 0x1a0]    #	     (|s|trcmp(old_path, this->path) == 0);
0x12662:	mov rsi, rdx                        
0x12665:	mov rdi, rax                        
0x12668:	call 0x4af0                         
0x1266d:	test eax, eax                       #	     this->selected_entries |&|&
0x1266f:	jne 0x12678                         
0x12671:	mov eax, 1                          #	     this->selected_entries |&|&
0x12676:	jmp 0x1267d                         
0x12678:	mov eax, 0                          #	     this->selected_entries |&|&
0x1267d:	mov dword ptr [rbp - 0x1e4], eax    #    verify |=| verify &&
0x12683:	cmp dword ptr [rbp - 0x1e4], 0      #    if |(|verify)
0x1268a:	je 0x126c2                          
0x1268c:	mov rax, qword ptr [rbp - 0x1d8]    #	old_dir_entry |=| this->dir_entry;
0x12693:	mov rax, qword ptr [rax + 0x38]     
0x12697:	mov qword ptr [rbp - 0x1b0], rax    
0x1269e:	mov rax, qword ptr [rbp - 0x1d8]    #	old_entries |=| this->entries;
0x126a5:	mov eax, dword ptr [rax + 0x68]     
0x126a8:	mov dword ptr [rbp - 0x1c4], eax    
0x126ae:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry |=| NULL;
0x126b5:	mov qword ptr [rax + 0x38], 0       
0x126bd:	jmp 0x127ad                         
0x126c2:	mov rax, qword ptr [rbp - 0x1d8]    #	if (this|-|>dir_entry)
0x126c9:	mov rax, qword ptr [rax + 0x38]     
0x126cd:	test rax, rax                       #	if |(|this->dir_entry)
0x126d0:	je 0x127ad                          
0x126d6:	mov dword ptr [rbp - 0x1c8], 0      #	    for (entry |=| 0; entry < this->entries; entry++)
0x126e0:	jmp 0x12775                         #	    |f|or (entry = 0; entry < this->entries; entry++)
0x126e5:	mov rax, qword ptr [rbp - 0x1d8]    #		if (this|-|>dir_entry[entry].name)
0x126ec:	mov rcx, qword ptr [rax + 0x38]     
0x126f0:	mov eax, dword ptr [rbp - 0x1c8]    #		if (this->dir_entry|[|entry].name)
0x126f6:	movsxd rdx, eax                     
0x126f9:	mov rax, rdx                        
0x126fc:	shl rax, 2                          
0x12700:	add rax, rdx                        
0x12703:	shl rax, 4                          
0x12707:	add rax, rcx                        
0x1270a:	mov rax, qword ptr [rax]            #		if (this->dir_entry[entry]|.|name)
0x1270d:	test rax, rax                       #		if |(|this->dir_entry[entry].name)
0x12710:	je 0x1276e                          
0x12712:	mov rax, qword ptr [rbp - 0x1d8]    #		    xfree(this|-|>dir_entry[entry].name);
0x12719:	mov rcx, qword ptr [rax + 0x38]     
0x1271d:	mov eax, dword ptr [rbp - 0x1c8]    #		    xfree(this->dir_entry|[|entry].name);
0x12723:	movsxd rdx, eax                     
0x12726:	mov rax, rdx                        
0x12729:	shl rax, 2                          
0x1272d:	add rax, rdx                        
0x12730:	shl rax, 4                          
0x12734:	add rax, rcx                        
0x12737:	mov rax, qword ptr [rax]            #		    xfree(this->dir_entry[entry]|.|name);
0x1273a:	mov rdi, rax                        #		    |x|free(this->dir_entry[entry].name);
0x1273d:	call 0x1eeae                        
0x12742:	mov rax, qword ptr [rbp - 0x1d8]    #		    this|-|>dir_entry[entry].name = NULL;
0x12749:	mov rcx, qword ptr [rax + 0x38]     
0x1274d:	mov eax, dword ptr [rbp - 0x1c8]    #		    this->dir_entry|[|entry].name = NULL;
0x12753:	movsxd rdx, eax                     
0x12756:	mov rax, rdx                        
0x12759:	shl rax, 2                          
0x1275d:	add rax, rdx                        
0x12760:	shl rax, 4                          
0x12764:	add rax, rcx                        
0x12767:	mov qword ptr [rax], 0              #		    this->dir_entry[entry].name |=| NULL;
0x1276e:	add dword ptr [rbp - 0x1c8], 1      #	    for (entry = 0; entry < this->entries; entry|+|+)
0x12775:	mov rax, qword ptr [rbp - 0x1d8]    #	    for (entry = 0; entry < this|-|>entries; entry++)
0x1277c:	mov eax, dword ptr [rax + 0x68]     
0x1277f:	cmp dword ptr [rbp - 0x1c8], eax    #	    for (entry = 0; entry |<| this->entries; entry++)
0x12785:	jl 0x126e5                          
0x1278b:	mov rax, qword ptr [rbp - 0x1d8]    #	    xfree(this|-|>dir_entry);
0x12792:	mov rax, qword ptr [rax + 0x38]     
0x12796:	mov rdi, rax                        #	    |x|free(this->dir_entry);
0x12799:	call 0x1eeae                        
0x1279e:	mov rax, qword ptr [rbp - 0x1d8]    #	    this->dir_entry |=| NULL;
0x127a5:	mov qword ptr [rax + 0x38], 0       
0x127ad:	mov edi, 0x50                       #    this->dir_entry = (dir_entry_t *)|x|malloc(sizeof(dir_entry_t));
0x127b2:	call 0x24650                        
0x127b7:	mov rdx, qword ptr [rbp - 0x1d8]    #    this->dir_entry |=| (dir_entry_t *)xmalloc(sizeof(dir_entry_t));
0x127be:	mov qword ptr [rdx + 0x38], rax     
0x127c2:	mov rax, qword ptr [rbp - 0x1d8]    #    this->selected_entries |=| 0;
0x127c9:	mov dword ptr [rax + 0x70], 0       
0x127d0:	mov rax, qword ptr [rbp - 0x1d8]    #    this->maxname |=| 0;
0x127d7:	mov dword ptr [rax + 0x30], 0       
0x127de:	mov rax, qword ptr [rbp - 0x1d8]    #    for (this->entries |=| 0; (d = readdir(this->dir)); this->entries++)
0x127e5:	mov dword ptr [rax + 0x68], 0       
0x127ec:	jmp 0x12b50                         #    |f|or (this->entries = 0; (d = readdir(this->dir)); this->entries++)
0x127f1:	mov rax, qword ptr [rbp - 0x188]    #	if (d->d_name|[|0] == '.' && d->d_name[1] == 0)
0x127f8:	movzx eax, byte ptr [rax + 0x13]    
0x127fc:	cmp al, 0x2e                        #	if |(|d->d_name[0] == '.' && d->d_name[1] == 0)
0x127fe:	jne 0x1282b                         
0x12800:	mov rax, qword ptr [rbp - 0x188]    #	if (d->d_name[0] == '.' && d->d_name|[|1] == 0)
0x12807:	movzx eax, byte ptr [rax + 0x14]    
0x1280b:	test al, al                         #	if (d->d_name[0] == '.' |&|& d->d_name[1] == 0)
0x1280d:	jne 0x1282b                         
0x1280f:	mov rax, qword ptr [rbp - 0x1d8]    #	    this|-|>entries--;
0x12816:	mov eax, dword ptr [rax + 0x68]     
0x12819:	lea edx, [rax - 1]                  #	    this->entries|-|-;
0x1281c:	mov rax, qword ptr [rbp - 0x1d8]    
0x12823:	mov dword ptr [rax + 0x68], edx     
0x12826:	jmp 0x12b39                         #	    |c|ontinue;
0x1282b:	mov rax, qword ptr [rbp - 0x188]    #	if (strcmp(d|-|>d_name, "..") == 0)
0x12832:	add rax, 0x13                       
0x12836:	lea rdx, [rip + 0x15da1]            #	if (|s|trcmp(d->d_name, "..") == 0)
0x1283d:	mov rsi, rdx                        
0x12840:	mov rdi, rax                        
0x12843:	call 0x4af0                         
0x12848:	test eax, eax                       #	if |(|strcmp(d->d_name, "..") == 0)
0x1284a:	jne 0x1289a                         
0x1284c:	mov dword ptr [rbp - 0x1cc], 1      #	    dotdot_found |=| 1;
0x12856:	mov rax, qword ptr [rbp - 0x1d8]    #	    if (this|-|>path[1])
0x1285d:	mov rax, qword ptr [rax + 0x18]     
0x12861:	add rax, 1                          #	    if (this->path|[|1])
0x12865:	movzx eax, byte ptr [rax]           
0x12868:	test al, al                         #	    if |(|this->path[1])
0x1286a:	je 0x1287e                          
0x1286c:	mov rax, qword ptr [rbp - 0x1d8]    #		backdir_index |=| this->entries;
0x12873:	mov eax, dword ptr [rax + 0x68]     
0x12876:	mov dword ptr [rbp - 0x1c0], eax    
0x1287c:	jmp 0x1289a                         
0x1287e:	mov rax, qword ptr [rbp - 0x1d8]    #		this|-|>entries--;
0x12885:	mov eax, dword ptr [rax + 0x68]     
0x12888:	lea edx, [rax - 1]                  #		this->entries|-|-;
0x1288b:	mov rax, qword ptr [rbp - 0x1d8]    
0x12892:	mov dword ptr [rax + 0x68], edx     
0x12895:	jmp 0x12b39                         #		|c|ontinue;
0x1289a:	mov rax, qword ptr [rbp - 0x1d8]    #						  (this|-|>entries + 1) *
0x128a1:	mov eax, dword ptr [rax + 0x68]     
0x128a4:	add eax, 1                          #						  (this->entries |+| 1) *
0x128a7:	movsxd rdx, eax                     
0x128aa:	mov rax, rdx                        #	this->dir_entry = (dir_entry_t *)|x|realloc(this->dir_entry,
0x128ad:	shl rax, 2                          
0x128b1:	add rax, rdx                        
0x128b4:	shl rax, 4                          
0x128b8:	mov rdx, rax                        
0x128bb:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry = (dir_entry_t *)xrealloc(this|-|>dir_entry,
0x128c2:	mov rax, qword ptr [rax + 0x38]     
0x128c6:	mov rsi, rdx                        #	this->dir_entry = (dir_entry_t *)|x|realloc(this->dir_entry,
0x128c9:	mov rdi, rax                        
0x128cc:	call 0x24670                        
0x128d1:	mov rdx, qword ptr [rbp - 0x1d8]    #	this->dir_entry |=| (dir_entry_t *)xrealloc(this->dir_entry,
0x128d8:	mov qword ptr [rdx + 0x38], rax     
0x128dc:	cmp dword ptr [rbp - 0x1e4], 0      #	if |(|verify)
0x128e3:	je 0x12a04                          
0x128e9:	mov dword ptr [rbp - 0x1c8], 0      #	    for (entry |=| 0; entry < old_entries; entry++)
0x128f3:	jmp 0x129b5                         #	    |f|or (entry = 0; entry < old_entries; entry++)
0x128f8:	mov eax, dword ptr [rbp - 0x1c8]    #		if (strcmp(d->d_name, old_dir_entry|[|entry].name) == 0)
0x128fe:	movsxd rdx, eax                     
0x12901:	mov rax, rdx                        
0x12904:	shl rax, 2                          
0x12908:	add rax, rdx                        
0x1290b:	shl rax, 4                          
0x1290f:	mov rdx, rax                        
0x12912:	mov rax, qword ptr [rbp - 0x1b0]    
0x12919:	add rax, rdx                        
0x1291c:	mov rax, qword ptr [rax]            #		if (strcmp(d->d_name, old_dir_entry[entry]|.|name) == 0)
0x1291f:	mov rdx, qword ptr [rbp - 0x188]    #		if (strcmp(d|-|>d_name, old_dir_entry[entry].name) == 0)
0x12926:	add rdx, 0x13                       
0x1292a:	mov rsi, rax                        #		if (|s|trcmp(d->d_name, old_dir_entry[entry].name) == 0)
0x1292d:	mov rdi, rdx                        
0x12930:	call 0x4af0                         
0x12935:	test eax, eax                       #		if |(|strcmp(d->d_name, old_dir_entry[entry].name) == 0)
0x12937:	jne 0x129ae                         
0x12939:	mov eax, dword ptr [rbp - 0x1c8]    #			 old_dir_entry|[|entry].selected);
0x1293f:	movsxd rdx, eax                     
0x12942:	mov rax, rdx                        
0x12945:	shl rax, 2                          
0x12949:	add rax, rdx                        
0x1294c:	shl rax, 4                          
0x12950:	mov rdx, rax                        
0x12953:	mov rax, qword ptr [rbp - 0x1b0]    
0x1295a:	lea rcx, [rdx + rax]                
0x1295e:	mov rax, qword ptr [rbp - 0x1d8]    #			(this|-|>dir_entry[this->entries].selected =
0x12965:	mov rsi, qword ptr [rax + 0x38]     
0x12969:	mov rax, qword ptr [rbp - 0x1d8]    #			(this->dir_entry[this|-|>entries].selected =
0x12970:	mov eax, dword ptr [rax + 0x68]     
0x12973:	movsxd rdx, eax                     
0x12976:	mov rax, rdx                        #			(this->dir_entry|[|this->entries].selected =
0x12979:	shl rax, 2                          
0x1297d:	add rax, rdx                        
0x12980:	shl rax, 4                          
0x12984:	add rax, rsi                        
0x12987:	movzx edx, byte ptr [rcx + 0x49]    #			 old_dir_entry[entry]|.|selected);
0x1298b:	mov byte ptr [rax + 0x49], dl       #			(this->dir_entry[this->entries].selected |=|
0x1298e:	movzx edx, byte ptr [rax + 0x49]    #			(this->dir_entry[this->entries]|.|selected =
0x12992:	mov rax, qword ptr [rbp - 0x1d8]    #		    this->selected_entries |+|=
0x12999:	mov ecx, dword ptr [rax + 0x70]     
0x1299c:	movsx eax, dl                       #			(this->dir_entry[this->entries].selected |=|
0x1299f:	lea edx, [rcx + rax]                #		    this->selected_entries |+|=
0x129a2:	mov rax, qword ptr [rbp - 0x1d8]    
0x129a9:	mov dword ptr [rax + 0x70], edx     
0x129ac:	jmp 0x129c7                         #		    |b|reak;
0x129ae:	add dword ptr [rbp - 0x1c8], 1      #	    for (entry = 0; entry < old_entries; entry|+|+)
0x129b5:	mov eax, dword ptr [rbp - 0x1c8]    #	    for (entry = 0; entry |<| old_entries; entry++)
0x129bb:	cmp eax, dword ptr [rbp - 0x1c4]    
0x129c1:	jl 0x128f8                          
0x129c7:	mov eax, dword ptr [rbp - 0x1c8]    #	    if |(|entry == old_entries)
0x129cd:	cmp eax, dword ptr [rbp - 0x1c4]    
0x129d3:	jne 0x12a31                         
0x129d5:	mov rax, qword ptr [rbp - 0x1d8]    #		this|-|>dir_entry[this->entries].selected = 0;
0x129dc:	mov rcx, qword ptr [rax + 0x38]     
0x129e0:	mov rax, qword ptr [rbp - 0x1d8]    #		this->dir_entry[this|-|>entries].selected = 0;
0x129e7:	mov eax, dword ptr [rax + 0x68]     
0x129ea:	movsxd rdx, eax                     
0x129ed:	mov rax, rdx                        #		this->dir_entry|[|this->entries].selected = 0;
0x129f0:	shl rax, 2                          
0x129f4:	add rax, rdx                        
0x129f7:	shl rax, 4                          
0x129fb:	add rax, rcx                        
0x129fe:	mov byte ptr [rax + 0x49], 0        #		this->dir_entry[this->entries].selected |=| 0;
0x12a02:	jmp 0x12a31                         
0x12a04:	mov rax, qword ptr [rbp - 0x1d8]    #	    this|-|>dir_entry[this->entries].selected = 0;
0x12a0b:	mov rcx, qword ptr [rax + 0x38]     
0x12a0f:	mov rax, qword ptr [rbp - 0x1d8]    #	    this->dir_entry[this|-|>entries].selected = 0;
0x12a16:	mov eax, dword ptr [rax + 0x68]     
0x12a19:	movsxd rdx, eax                     
0x12a1c:	mov rax, rdx                        #	    this->dir_entry|[|this->entries].selected = 0;
0x12a1f:	shl rax, 2                          
0x12a23:	add rax, rdx                        
0x12a26:	shl rax, 4                          
0x12a2a:	add rax, rcx                        
0x12a2d:	mov byte ptr [rax + 0x49], 0        #	    this->dir_entry[this->entries].selected |=| 0;
0x12a31:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].fti_loaded = 0;
0x12a38:	mov rcx, qword ptr [rax + 0x38]     
0x12a3c:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].fti_loaded = 0;
0x12a43:	mov eax, dword ptr [rax + 0x68]     
0x12a46:	movsxd rdx, eax                     
0x12a49:	mov rax, rdx                        #	this->dir_entry|[|this->entries].fti_loaded = 0;
0x12a4c:	shl rax, 2                          
0x12a50:	add rax, rdx                        
0x12a53:	shl rax, 4                          
0x12a57:	add rax, rcx                        
0x12a5a:	mov byte ptr [rax + 0x4b], 0        #	this->dir_entry[this->entries].fti_loaded |=| 0;
0x12a5e:	mov rax, qword ptr [rbp - 0x188]    #	namelen = strlen(d|-|>d_name);
0x12a65:	add rax, 0x13                       
0x12a69:	mov rdi, rax                        #	namelen = |s|trlen(d->d_name);
0x12a6c:	call 0x4960                         
0x12a71:	mov dword ptr [rbp - 0x1bc], eax    #	namelen |=| strlen(d->d_name);
0x12a77:	mov eax, dword ptr [rbp - 0x1bc]    #	this->dir_entry[this->entries].name = xmalloc(namelen |+| 1);
0x12a7d:	add eax, 1                          
0x12a80:	movsxd rdx, eax                     #	this->dir_entry[this->entries].name = |x|malloc(namelen + 1);
0x12a83:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].name = xmalloc(namelen + 1);
0x12a8a:	mov rsi, qword ptr [rax + 0x38]     
0x12a8e:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].name = xmalloc(namelen + 1);
0x12a95:	mov eax, dword ptr [rax + 0x68]     
0x12a98:	movsxd rcx, eax                     
0x12a9b:	mov rax, rcx                        #	this->dir_entry|[|this->entries].name = xmalloc(namelen + 1);
0x12a9e:	shl rax, 2                          
0x12aa2:	add rax, rcx                        
0x12aa5:	shl rax, 4                          
0x12aa9:	lea rbx, [rsi + rax]                
0x12aad:	mov rdi, rdx                        #	this->dir_entry[this->entries].name = |x|malloc(namelen + 1);
0x12ab0:	call 0x24650                        
0x12ab5:	mov qword ptr [rbx], rax            #	this->dir_entry[this->entries].name |=| xmalloc(namelen + 1);
0x12ab8:	mov rax, qword ptr [rbp - 0x188]    #	strcpy(this->dir_entry[this->entries].name, d|-|>d_name);
0x12abf:	lea rdx, [rax + 0x13]               
0x12ac3:	mov rax, qword ptr [rbp - 0x1d8]    #	strcpy(this|-|>dir_entry[this->entries].name, d->d_name);
0x12aca:	mov rsi, qword ptr [rax + 0x38]     
0x12ace:	mov rax, qword ptr [rbp - 0x1d8]    #	strcpy(this->dir_entry[this|-|>entries].name, d->d_name);
0x12ad5:	mov eax, dword ptr [rax + 0x68]     
0x12ad8:	movsxd rcx, eax                     
0x12adb:	mov rax, rcx                        #	strcpy(this->dir_entry|[|this->entries].name, d->d_name);
0x12ade:	shl rax, 2                          
0x12ae2:	add rax, rcx                        
0x12ae5:	shl rax, 4                          
0x12ae9:	add rax, rsi                        
0x12aec:	mov rax, qword ptr [rax]            #	|s|trcpy(this->dir_entry[this->entries].name, d->d_name);
0x12aef:	mov rsi, rdx                        
0x12af2:	mov rdi, rax                        
0x12af5:	call 0x4870                         
0x12afa:	mov rax, qword ptr [rbp - 0x1d8]    #	this->maxname = |m|ax(this->maxname, namelen);
0x12b01:	mov edx, dword ptr [rax + 0x30]     
0x12b04:	mov eax, dword ptr [rbp - 0x1bc]    
0x12b0a:	cmp edx, eax                        
0x12b0c:	cmovl edx, eax                      
0x12b0f:	mov rax, qword ptr [rbp - 0x1d8]    #	this->maxname |=| max(this->maxname, namelen);
0x12b16:	mov dword ptr [rax + 0x30], edx     
0x12b19:	mov rax, qword ptr [rbp - 0x1d8]    #	|p|anel_load_inode(this, this->entries);
0x12b20:	mov edx, dword ptr [rax + 0x68]     
0x12b23:	mov rax, qword ptr [rbp - 0x1d8]    
0x12b2a:	mov esi, edx                        
0x12b2c:	mov rdi, rax                        
0x12b2f:	mov eax, 0                          
0x12b34:	call 0x1193b                        
0x12b39:	mov rax, qword ptr [rbp - 0x1d8]    #    for (this->entries = 0; (d = readdir(this->dir)); this|-|>entries++)
0x12b40:	mov eax, dword ptr [rax + 0x68]     
0x12b43:	lea edx, [rax + 1]                  #    for (this->entries = 0; (d = readdir(this->dir)); this->entries|+|+)
0x12b46:	mov rax, qword ptr [rbp - 0x1d8]    
0x12b4d:	mov dword ptr [rax + 0x68], edx     
0x12b50:	mov rax, qword ptr [rbp - 0x1d8]    #    for (this->entries = 0; (d = |r|eaddir(this->dir)); this->entries++)
0x12b57:	mov rax, qword ptr [rax]            
0x12b5a:	mov rdi, rax                        
0x12b5d:	call 0x4bd0                         
0x12b62:	mov qword ptr [rbp - 0x188], rax    
0x12b69:	cmp qword ptr [rbp - 0x188], 0      #    for (this->entries = 0; |(|d = readdir(this->dir)); this->entries++)
0x12b71:	jne 0x127f1                         
0x12b77:	cmp dword ptr [rbp - 0x1cc], 0      #    if |(|dotdot_found)
0x12b7e:	je 0x12bf6                          
0x12b80:	cmp dword ptr [rbp - 0x1c0], -1     #	if |(|backdir_index != -1)
0x12b87:	je 0x12dc5                          
0x12b8d:	mov rax, qword ptr [rbp - 0x1d8]    #	    if (!|S|_ISDIR(this->dir_entry[backdir_index].mode))
0x12b94:	mov rcx, qword ptr [rax + 0x38]     
0x12b98:	mov eax, dword ptr [rbp - 0x1c0]    
0x12b9e:	movsxd rdx, eax                     
0x12ba1:	mov rax, rdx                        
0x12ba4:	shl rax, 2                          
0x12ba8:	add rax, rdx                        
0x12bab:	shl rax, 4                          
0x12baf:	add rax, rcx                        
0x12bb2:	mov eax, dword ptr [rax + 0x10]     
0x12bb5:	and eax, 0xf000                     
0x12bba:	cmp eax, 0x4000                     #	    if |(|!S_ISDIR(this->dir_entry[backdir_index].mode))
0x12bbf:	je 0x12dc5                          
0x12bc5:	mov rax, qword ptr [rbp - 0x1d8]    #		this|-|>dir_entry[backdir_index].mode = S_IFDIR;
0x12bcc:	mov rcx, qword ptr [rax + 0x38]     
0x12bd0:	mov eax, dword ptr [rbp - 0x1c0]    #		this->dir_entry|[|backdir_index].mode = S_IFDIR;
0x12bd6:	movsxd rdx, eax                     
0x12bd9:	mov rax, rdx                        
0x12bdc:	shl rax, 2                          
0x12be0:	add rax, rdx                        
0x12be3:	shl rax, 4                          
0x12be7:	add rax, rcx                        
0x12bea:	mov dword ptr [rax + 0x10], 0x4000  #		this->dir_entry[backdir_index].mode |=| S_IFDIR;
0x12bf1:	jmp 0x12dc5                         
0x12bf6:	mov rax, qword ptr [rbp - 0x1d8]    #						  (this|-|>entries + 1) *
0x12bfd:	mov eax, dword ptr [rax + 0x68]     
0x12c00:	add eax, 1                          #						  (this->entries |+| 1) *
0x12c03:	movsxd rdx, eax                     
0x12c06:	mov rax, rdx                        #	this->dir_entry = (dir_entry_t *)|x|realloc(this->dir_entry,
0x12c09:	shl rax, 2                          
0x12c0d:	add rax, rdx                        
0x12c10:	shl rax, 4                          
0x12c14:	mov rdx, rax                        
0x12c17:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry = (dir_entry_t *)xrealloc(this|-|>dir_entry,
0x12c1e:	mov rax, qword ptr [rax + 0x38]     
0x12c22:	mov rsi, rdx                        #	this->dir_entry = (dir_entry_t *)|x|realloc(this->dir_entry,
0x12c25:	mov rdi, rax                        
0x12c28:	call 0x24670                        
0x12c2d:	mov rdx, qword ptr [rbp - 0x1d8]    #	this->dir_entry |=| (dir_entry_t *)xrealloc(this->dir_entry,
0x12c34:	mov qword ptr [rdx + 0x38], rax     
0x12c38:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].selected = 0;
0x12c3f:	mov rcx, qword ptr [rax + 0x38]     
0x12c43:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].selected = 0;
0x12c4a:	mov eax, dword ptr [rax + 0x68]     
0x12c4d:	movsxd rdx, eax                     
0x12c50:	mov rax, rdx                        #	this->dir_entry|[|this->entries].selected = 0;
0x12c53:	shl rax, 2                          
0x12c57:	add rax, rdx                        
0x12c5a:	shl rax, 4                          
0x12c5e:	add rax, rcx                        
0x12c61:	mov byte ptr [rax + 0x49], 0        #	this->dir_entry[this->entries].selected |=| 0;
0x12c65:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].fti_loaded = 1;
0x12c6c:	mov rcx, qword ptr [rax + 0x38]     
0x12c70:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].fti_loaded = 1;
0x12c77:	mov eax, dword ptr [rax + 0x68]     
0x12c7a:	movsxd rdx, eax                     
0x12c7d:	mov rax, rdx                        #	this->dir_entry|[|this->entries].fti_loaded = 1;
0x12c80:	shl rax, 2                          
0x12c84:	add rax, rdx                        
0x12c87:	shl rax, 4                          
0x12c8b:	add rax, rcx                        
0x12c8e:	mov byte ptr [rax + 0x4b], 1        #	this->dir_entry[this->entries].fti_loaded |=| 1;
0x12c92:	mov dword ptr [rbp - 0x1bc], 2      #	namelen |=| strlen("..");
0x12c9c:	mov eax, dword ptr [rbp - 0x1bc]    #	this->dir_entry[this->entries].name = xmalloc(namelen |+| 1);
0x12ca2:	add eax, 1                          
0x12ca5:	movsxd rdx, eax                     #	this->dir_entry[this->entries].name = |x|malloc(namelen + 1);
0x12ca8:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].name = xmalloc(namelen + 1);
0x12caf:	mov rsi, qword ptr [rax + 0x38]     
0x12cb3:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].name = xmalloc(namelen + 1);
0x12cba:	mov eax, dword ptr [rax + 0x68]     
0x12cbd:	movsxd rcx, eax                     
0x12cc0:	mov rax, rcx                        #	this->dir_entry|[|this->entries].name = xmalloc(namelen + 1);
0x12cc3:	shl rax, 2                          
0x12cc7:	add rax, rcx                        
0x12cca:	shl rax, 4                          
0x12cce:	lea rbx, [rsi + rax]                
0x12cd2:	mov rdi, rdx                        #	this->dir_entry[this->entries].name = |x|malloc(namelen + 1);
0x12cd5:	call 0x24650                        
0x12cda:	mov qword ptr [rbx], rax            #	this->dir_entry[this->entries].name |=| xmalloc(namelen + 1);
0x12cdd:	mov rax, qword ptr [rbp - 0x1d8]    #	strcpy(this|-|>dir_entry[this->entries].name, "..");
0x12ce4:	mov rcx, qword ptr [rax + 0x38]     
0x12ce8:	mov rax, qword ptr [rbp - 0x1d8]    #	strcpy(this->dir_entry[this|-|>entries].name, "..");
0x12cef:	mov eax, dword ptr [rax + 0x68]     
0x12cf2:	movsxd rdx, eax                     
0x12cf5:	mov rax, rdx                        #	strcpy(this->dir_entry|[|this->entries].name, "..");
0x12cf8:	shl rax, 2                          
0x12cfc:	add rax, rdx                        
0x12cff:	shl rax, 4                          
0x12d03:	add rax, rcx                        
0x12d06:	mov rax, qword ptr [rax]            #	|s|trcpy(this->dir_entry[this->entries].name, "..");
0x12d09:	mov word ptr [rax], 0x2e2e          
0x12d0e:	mov byte ptr [rax + 2], 0           
0x12d12:	mov rax, qword ptr [rbp - 0x1d8]    #	this->maxname = |m|ax(this->maxname, namelen);
0x12d19:	mov edx, dword ptr [rax + 0x30]     
0x12d1c:	mov eax, dword ptr [rbp - 0x1bc]    
0x12d22:	cmp edx, eax                        
0x12d24:	cmovl edx, eax                      
0x12d27:	mov rax, qword ptr [rbp - 0x1d8]    #	this->maxname |=| max(this->maxname, namelen);
0x12d2e:	mov dword ptr [rax + 0x30], edx     
0x12d31:	mov rax, qword ptr [rbp - 0x1d8]    #	|p|anel_load_inode(this, this->entries);
0x12d38:	mov edx, dword ptr [rax + 0x68]     
0x12d3b:	mov rax, qword ptr [rbp - 0x1d8]    
0x12d42:	mov esi, edx                        
0x12d44:	mov rdi, rax                        
0x12d47:	mov eax, 0                          
0x12d4c:	call 0x1193b                        
0x12d51:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].mode = S_IFDIR;
0x12d58:	mov rcx, qword ptr [rax + 0x38]     
0x12d5c:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].mode = S_IFDIR;
0x12d63:	mov eax, dword ptr [rax + 0x68]     
0x12d66:	movsxd rdx, eax                     
0x12d69:	mov rax, rdx                        #	this->dir_entry|[|this->entries].mode = S_IFDIR;
0x12d6c:	shl rax, 2                          
0x12d70:	add rax, rdx                        
0x12d73:	shl rax, 4                          
0x12d77:	add rax, rcx                        
0x12d7a:	mov dword ptr [rax + 0x10], 0x4000  #	this->dir_entry[this->entries].mode |=| S_IFDIR;
0x12d81:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[this->entries].type = DIR_ENTRY;
0x12d88:	mov rcx, qword ptr [rax + 0x38]     
0x12d8c:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[this|-|>entries].type = DIR_ENTRY;
0x12d93:	mov eax, dword ptr [rax + 0x68]     
0x12d96:	movsxd rdx, eax                     
0x12d99:	mov rax, rdx                        #	this->dir_entry|[|this->entries].type = DIR_ENTRY;
0x12d9c:	shl rax, 2                          
0x12da0:	add rax, rdx                        
0x12da3:	shl rax, 4                          
0x12da7:	add rax, rcx                        
0x12daa:	mov byte ptr [rax + 0x48], 0        #	this->dir_entry[this->entries].type |=| DIR_ENTRY;
0x12dae:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>entries++;
0x12db5:	mov eax, dword ptr [rax + 0x68]     
0x12db8:	lea edx, [rax + 1]                  #	this->entries|+|+;
0x12dbb:	mov rax, qword ptr [rbp - 0x1d8]    
0x12dc2:	mov dword ptr [rax + 0x68], edx     
0x12dc5:	cmp dword ptr [rbp - 0x1e4], 0      #    if |(|verify)
0x12dcc:	je 0x12e8f                          
0x12dd2:	mov dword ptr [rbp - 0x1c8], 0      #	for (entry |=| 0; entry < old_entries; entry++)
0x12ddc:	jmp 0x12e6e                         #	|f|or (entry = 0; entry < old_entries; entry++)
0x12de1:	mov eax, dword ptr [rbp - 0x1c8]    #	    if (old_dir_entry|[|entry].name)
0x12de7:	movsxd rdx, eax                     
0x12dea:	mov rax, rdx                        
0x12ded:	shl rax, 2                          
0x12df1:	add rax, rdx                        
0x12df4:	shl rax, 4                          
0x12df8:	mov rdx, rax                        
0x12dfb:	mov rax, qword ptr [rbp - 0x1b0]    
0x12e02:	add rax, rdx                        
0x12e05:	mov rax, qword ptr [rax]            #	    if (old_dir_entry[entry]|.|name)
0x12e08:	test rax, rax                       #	    if |(|old_dir_entry[entry].name)
0x12e0b:	je 0x12e67                          
0x12e0d:	mov eax, dword ptr [rbp - 0x1c8]    #		xfree(old_dir_entry|[|entry].name);
0x12e13:	movsxd rdx, eax                     
0x12e16:	mov rax, rdx                        
0x12e19:	shl rax, 2                          
0x12e1d:	add rax, rdx                        
0x12e20:	shl rax, 4                          
0x12e24:	mov rdx, rax                        
0x12e27:	mov rax, qword ptr [rbp - 0x1b0]    
0x12e2e:	add rax, rdx                        
0x12e31:	mov rax, qword ptr [rax]            #		xfree(old_dir_entry[entry]|.|name);
0x12e34:	mov rdi, rax                        #		|x|free(old_dir_entry[entry].name);
0x12e37:	call 0x1eeae                        
0x12e3c:	mov eax, dword ptr [rbp - 0x1c8]    #		old_dir_entry|[|entry].name = NULL;
0x12e42:	movsxd rdx, eax                     
0x12e45:	mov rax, rdx                        
0x12e48:	shl rax, 2                          
0x12e4c:	add rax, rdx                        
0x12e4f:	shl rax, 4                          
0x12e53:	mov rdx, rax                        
0x12e56:	mov rax, qword ptr [rbp - 0x1b0]    
0x12e5d:	add rax, rdx                        
0x12e60:	mov qword ptr [rax], 0              #		old_dir_entry[entry].name |=| NULL;
0x12e67:	add dword ptr [rbp - 0x1c8], 1      #	for (entry = 0; entry < old_entries; entry|+|+)
0x12e6e:	mov eax, dword ptr [rbp - 0x1c8]    #	for (entry = 0; entry |<| old_entries; entry++)
0x12e74:	cmp eax, dword ptr [rbp - 0x1c4]    
0x12e7a:	jl 0x12de1                          
0x12e80:	mov rax, qword ptr [rbp - 0x1b0]    #	|x|free(old_dir_entry);
0x12e87:	mov rdi, rax                        
0x12e8a:	call 0x1eeae                        
0x12e8f:	mov rax, qword ptr [rbp - 0x1d8]    #    CurrentSortMethod = this|-|>sort_method;
0x12e96:	mov eax, dword ptr [rax + 0x84]     
0x12e9c:	mov dword ptr [rip + 0x1e752], eax  #    CurrentSortMethod |=| this->sort_method;
0x12ea2:	mov rax, qword ptr [rbp - 0x1d8]    #    this->horizontal_offset |=| 0;
0x12ea9:	mov dword ptr [rax + 0x74], 0       
0x12eb0:	cmp dword ptr [rbp - 0x1c0], -1     #    if |(|backdir_index != -1)
0x12eb7:	je 0x1307d                          
0x12ebd:	mov rax, qword ptr [rbp - 0x1d8]    #	tmp = this|-|>dir_entry[0];
0x12ec4:	mov rax, qword ptr [rax + 0x38]     
0x12ec8:	mov rcx, qword ptr [rax]            #	tmp |=| this->dir_entry[0];
0x12ecb:	mov rbx, qword ptr [rax + 8]        
0x12ecf:	mov qword ptr [rbp - 0x180], rcx    
0x12ed6:	mov qword ptr [rbp - 0x178], rbx    
0x12edd:	mov rcx, qword ptr [rax + 0x10]     
0x12ee1:	mov rbx, qword ptr [rax + 0x18]     
0x12ee5:	mov qword ptr [rbp - 0x170], rcx    
0x12eec:	mov qword ptr [rbp - 0x168], rbx    
0x12ef3:	mov rcx, qword ptr [rax + 0x20]     
0x12ef7:	mov rbx, qword ptr [rax + 0x28]     
0x12efb:	mov qword ptr [rbp - 0x160], rcx    
0x12f02:	mov qword ptr [rbp - 0x158], rbx    
0x12f09:	mov rcx, qword ptr [rax + 0x30]     
0x12f0d:	mov rbx, qword ptr [rax + 0x38]     
0x12f11:	mov qword ptr [rbp - 0x150], rcx    
0x12f18:	mov qword ptr [rbp - 0x148], rbx    
0x12f1f:	mov rdx, qword ptr [rax + 0x48]     
0x12f23:	mov rax, qword ptr [rax + 0x40]     
0x12f27:	mov qword ptr [rbp - 0x140], rax    
0x12f2e:	mov qword ptr [rbp - 0x138], rdx    
0x12f35:	mov rax, qword ptr [rbp - 0x1d8]    #	this->dir_entry[0] = this|-|>dir_entry[backdir_index];
0x12f3c:	mov rcx, qword ptr [rax + 0x38]     
0x12f40:	mov eax, dword ptr [rbp - 0x1c0]    #	this->dir_entry[0] = this->dir_entry|[|backdir_index];
0x12f46:	movsxd rdx, eax                     
0x12f49:	mov rax, rdx                        
0x12f4c:	shl rax, 2                          
0x12f50:	add rax, rdx                        
0x12f53:	shl rax, 4                          
0x12f57:	lea rdx, [rcx + rax]                
0x12f5b:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[0] = this->dir_entry[backdir_index];
0x12f62:	mov rax, qword ptr [rax + 0x38]     
0x12f66:	mov rcx, qword ptr [rdx]            #	this->dir_entry[0] |=| this->dir_entry[backdir_index];
0x12f69:	mov rbx, qword ptr [rdx + 8]        
0x12f6d:	mov qword ptr [rax], rcx            
0x12f70:	mov qword ptr [rax + 8], rbx        
0x12f74:	mov rcx, qword ptr [rdx + 0x10]     
0x12f78:	mov rbx, qword ptr [rdx + 0x18]     
0x12f7c:	mov qword ptr [rax + 0x10], rcx     
0x12f80:	mov qword ptr [rax + 0x18], rbx     
0x12f84:	mov rcx, qword ptr [rdx + 0x20]     
0x12f88:	mov rbx, qword ptr [rdx + 0x28]     
0x12f8c:	mov qword ptr [rax + 0x20], rcx     
0x12f90:	mov qword ptr [rax + 0x28], rbx     
0x12f94:	mov rcx, qword ptr [rdx + 0x30]     
0x12f98:	mov rbx, qword ptr [rdx + 0x38]     
0x12f9c:	mov qword ptr [rax + 0x30], rcx     
0x12fa0:	mov qword ptr [rax + 0x38], rbx     
0x12fa4:	mov rcx, qword ptr [rdx + 0x40]     
0x12fa8:	mov rbx, qword ptr [rdx + 0x48]     
0x12fac:	mov qword ptr [rax + 0x40], rcx     
0x12fb0:	mov qword ptr [rax + 0x48], rbx     
0x12fb4:	mov rax, qword ptr [rbp - 0x1d8]    #	this|-|>dir_entry[backdir_index] = tmp;
0x12fbb:	mov rcx, qword ptr [rax + 0x38]     
0x12fbf:	mov eax, dword ptr [rbp - 0x1c0]    #	this->dir_entry|[|backdir_index] = tmp;
0x12fc5:	movsxd rdx, eax                     
0x12fc8:	mov rax, rdx                        
0x12fcb:	shl rax, 2                          
0x12fcf:	add rax, rdx                        
0x12fd2:	shl rax, 4                          
0x12fd6:	add rax, rcx                        
0x12fd9:	mov rcx, qword ptr [rbp - 0x180]    #	this->dir_entry[backdir_index] |=| tmp;
0x12fe0:	mov rbx, qword ptr [rbp - 0x178]    
0x12fe7:	mov qword ptr [rax], rcx            
0x12fea:	mov qword ptr [rax + 8], rbx        
0x12fee:	mov rcx, qword ptr [rbp - 0x170]    
0x12ff5:	mov rbx, qword ptr [rbp - 0x168]    
0x12ffc:	mov qword ptr [rax + 0x10], rcx     
0x13000:	mov qword ptr [rax + 0x18], rbx     
0x13004:	mov rcx, qword ptr [rbp - 0x160]    
0x1300b:	mov rbx, qword ptr [rbp - 0x158]    
0x13012:	mov qword ptr [rax + 0x20], rcx     
0x13016:	mov qword ptr [rax + 0x28], rbx     
0x1301a:	mov rcx, qword ptr [rbp - 0x150]    
0x13021:	mov rbx, qword ptr [rbp - 0x148]    
0x13028:	mov qword ptr [rax + 0x30], rcx     
0x1302c:	mov qword ptr [rax + 0x38], rbx     
0x13030:	mov rcx, qword ptr [rbp - 0x140]    
0x13037:	mov rbx, qword ptr [rbp - 0x138]    
0x1303e:	mov qword ptr [rax + 0x40], rcx     
0x13042:	mov qword ptr [rax + 0x48], rbx     
0x13046:	mov rax, qword ptr [rbp - 0x1d8]    #	qsort(this->dir_entry + 1, this|-|>entries - 1,
0x1304d:	mov eax, dword ptr [rax + 0x68]     
0x13050:	sub eax, 1                          #	qsort(this->dir_entry + 1, this->entries |-| 1,
0x13053:	cdqe                                #	|q|sort(this->dir_entry + 1, this->entries - 1,
0x13055:	mov rdx, qword ptr [rbp - 0x1d8]    #	qsort(this|-|>dir_entry + 1, this->entries - 1,
0x1305c:	mov rdx, qword ptr [rdx + 0x38]     
0x13060:	lea rdi, [rdx + 0x50]               #	qsort(this->dir_entry |+| 1, this->entries - 1,
0x13064:	lea rdx, [rip - 0x228d]             #	|q|sort(this->dir_entry + 1, this->entries - 1,
0x1306b:	mov rcx, rdx                        
0x1306e:	mov edx, 0x50                       
0x13073:	mov rsi, rax                        
0x13076:	call 0x48b0                         
0x1307b:	jmp 0x130ac                         
0x1307d:	mov rax, qword ptr [rbp - 0x1d8]    #	qsort(this->dir_entry, this|-|>entries,
0x13084:	mov eax, dword ptr [rax + 0x68]     
0x13087:	movsxd rsi, eax                     #	|q|sort(this->dir_entry, this->entries,
0x1308a:	mov rax, qword ptr [rbp - 0x1d8]    #	qsort(this|-|>dir_entry, this->entries,
0x13091:	mov rax, qword ptr [rax + 0x38]     
0x13095:	lea rdx, [rip - 0x22be]             #	|q|sort(this->dir_entry, this->entries,
0x1309c:	mov rcx, rdx                        
0x1309f:	mov edx, 0x50                       
0x130a4:	mov rdi, rax                        
0x130a7:	call 0x48b0                         
0x130ac:	mov rax, qword ptr [rbp - 0x1d8]    #    panel_set_current_entry(this, |m|in(this->current_entry, this->entries - 1));
0x130b3:	mov edx, dword ptr [rax + 0x68]     
0x130b6:	mov rax, qword ptr [rbp - 0x1d8]    
0x130bd:	mov eax, dword ptr [rax + 0x28]     
0x130c0:	cmp edx, eax                        #    |p|anel_set_current_entry(this, min(this->current_entry, this->entries - 1));
0x130c2:	jle 0x130d0                         
0x130c4:	mov rax, qword ptr [rbp - 0x1d8]    #    |p|anel_set_current_entry(this, min(this->current_entry, this->entries - 1));
0x130cb:	mov eax, dword ptr [rax + 0x28]     
0x130ce:	jmp 0x130dd                         
0x130d0:	mov rax, qword ptr [rbp - 0x1d8]    #    panel_set_current_entry(this, |m|in(this->current_entry, this->entries - 1));
0x130d7:	mov eax, dword ptr [rax + 0x68]     
0x130da:	sub eax, 1                          #    |p|anel_set_current_entry(this, min(this->current_entry, this->entries - 1));
0x130dd:	mov rdx, qword ptr [rbp - 0x1d8]    #    |p|anel_set_current_entry(this, min(this->current_entry, this->entries - 1));
0x130e4:	mov esi, eax                        
0x130e6:	mov rdi, rdx                        
0x130e9:	mov eax, 0                          
0x130ee:	call 0x112b7                        
0x130f3:	mov rax, qword ptr [rbp - 0x1a0]    #    |x|free(old_path);
0x130fa:	mov rdi, rax                        
0x130fd:	call 0x1eeae                        
0x13102:	mov eax, 1                          #    return |1|;
0x13107:	mov rdx, qword ptr [rbp - 0x18]     #|}|
0x1310b:	sub rdx, qword ptr fs:[0x28]        
0x13114:	je 0x1311b                          
0x13116:	call 0x4980                         #|}|
0x1311b:	mov rbx, qword ptr [rbp - 8]        
0x1311f:	leave                               
0x13120:	ret                                 
0x13121:	endbr64                             #|{|
0x13125:	push rbp                            
0x13126:	mov rbp, rsp                        
0x13129:	mov qword ptr [rbp - 8], rdi        
0x1312d:	mov rax, qword ptr [rbp - 8]        #    this->last_index |=| -1;
0x13131:	mov dword ptr [rax + 0x50], 0xffffffff
0x13138:	mov rax, qword ptr [rbp - 8]        #    this->multiple_files = this|-|>selected_entries;
0x1313c:	mov edx, dword ptr [rax + 0x70]     
0x1313f:	mov rax, qword ptr [rbp - 8]        #    this->multiple_files |=| this->selected_entries;
0x13143:	mov dword ptr [rax + 0x54], edx     
0x13146:	nop                                 #|}|
0x13147:	pop rbp                             
0x13148:	ret                                 
0x13149:	endbr64                             #|{|
0x1314d:	push rbp                            
0x1314e:	mov rbp, rsp                        
0x13151:	mov qword ptr [rbp - 0x18], rdi     
0x13155:	mov rax, qword ptr [rbp - 0x18]     #    if (this|-|>multiple_files)
0x13159:	mov eax, dword ptr [rax + 0x54]     
0x1315c:	test eax, eax                       #    if |(|this->multiple_files)
0x1315e:	je 0x131c0                          
0x13160:	mov rax, qword ptr [rbp - 0x18]     #	for (i = this|-|>last_index + 1; i < this->entries; i++)
0x13164:	mov eax, dword ptr [rax + 0x50]     
0x13167:	add eax, 1                          #	for (i |=| this->last_index + 1; i < this->entries; i++)
0x1316a:	mov dword ptr [rbp - 4], eax        
0x1316d:	jmp 0x131ad                         #	|f|or (i = this->last_index + 1; i < this->entries; i++)
0x1316f:	mov rax, qword ptr [rbp - 0x18]     #	    if (this|-|>dir_entry[i].selected)
0x13173:	mov rcx, qword ptr [rax + 0x38]     
0x13177:	mov eax, dword ptr [rbp - 4]        #	    if (this->dir_entry|[|i].selected)
0x1317a:	movsxd rdx, eax                     
0x1317d:	mov rax, rdx                        
0x13180:	shl rax, 2                          
0x13184:	add rax, rdx                        
0x13187:	shl rax, 4                          
0x1318b:	add rax, rcx                        
0x1318e:	movzx eax, byte ptr [rax + 0x49]    #	    if (this->dir_entry[i]|.|selected)
0x13192:	test al, al                         #	    if |(|this->dir_entry[i].selected)
0x13194:	je 0x131a9                          
0x13196:	mov rax, qword ptr [rbp - 0x18]     #		return this->last_index |=| i;
0x1319a:	mov edx, dword ptr [rbp - 4]        
0x1319d:	mov dword ptr [rax + 0x50], edx     
0x131a0:	mov rax, qword ptr [rbp - 0x18]     
0x131a4:	mov eax, dword ptr [rax + 0x50]     
0x131a7:	jmp 0x13221                         
0x131a9:	add dword ptr [rbp - 4], 1          #	for (i = this->last_index + 1; i < this->entries; i|+|+)
0x131ad:	mov rax, qword ptr [rbp - 0x18]     #	for (i = this->last_index + 1; i < this|-|>entries; i++)
0x131b1:	mov eax, dword ptr [rax + 0x68]     
0x131b4:	cmp dword ptr [rbp - 4], eax        #	for (i = this->last_index + 1; i |<| this->entries; i++)
0x131b7:	jl 0x1316f                          
0x131b9:	mov eax, 0xffffffff                 #	return |-|1;
0x131be:	jmp 0x13221                         
0x131c0:	mov rax, qword ptr [rbp - 0x18]     #	if (this|-|>last_index == 0)
0x131c4:	mov eax, dword ptr [rax + 0x50]     
0x131c7:	test eax, eax                       #	if |(|this->last_index == 0)
0x131c9:	jne 0x131d2                         
0x131cb:	mov eax, 0xffffffff                 #	    return |-|1;
0x131d0:	jmp 0x13221                         
0x131d2:	mov rax, qword ptr [rbp - 0x18]     #	this->last_index |=| 0;
0x131d6:	mov dword ptr [rax + 0x50], 0       
0x131dd:	mov rax, qword ptr [rbp - 0x18]     #	if (|r|ootdir())
0x131e1:	mov rax, qword ptr [rax + 0x18]     
0x131e5:	movzx eax, byte ptr [rax]           
0x131e8:	cmp al, 0x2f                        #	if |(|rootdir())
0x131ea:	jne 0x13208                         
0x131ec:	mov rax, qword ptr [rbp - 0x18]     #	if (|r|ootdir())
0x131f0:	mov rax, qword ptr [rax + 0x18]     
0x131f4:	add rax, 1                          
0x131f8:	movzx eax, byte ptr [rax]           
0x131fb:	test al, al                         
0x131fd:	jne 0x13208                         
0x131ff:	mov rax, qword ptr [rbp - 0x18]     #	    return this|-|>current_entry;
0x13203:	mov eax, dword ptr [rax + 0x28]     
0x13206:	jmp 0x13221                         
0x13208:	mov rax, qword ptr [rbp - 0x18]     #	    return (this|-|>current_entry != 0) ? this->current_entry : -1;
0x1320c:	mov eax, dword ptr [rax + 0x28]     
0x1320f:	test eax, eax                       #	    return (this->current_entry != 0) ? this->current_entry |:| -1;
0x13211:	je 0x1321c                          
0x13213:	mov rax, qword ptr [rbp - 0x18]     #	    return (this->current_entry != 0) ? this->current_entry |:| -1;
0x13217:	mov eax, dword ptr [rax + 0x28]     
0x1321a:	jmp 0x13221                         
0x1321c:	mov eax, 0xffffffff                 #	    return (this->current_entry != 0) ? this->current_entry |:| -1;
0x13221:	pop rbp                             #|}|
0x13222:	ret                                 
0x13223:	endbr64                             #|{|
0x13227:	push rbp                            
0x13228:	mov rbp, rsp                        
0x1322b:	sub rsp, 0x30                       
0x1322f:	mov qword ptr [rbp - 0x28], rdi     
0x13233:	mov rax, qword ptr fs:[0x28]        #|{|
0x1323c:	mov qword ptr [rbp - 8], rax        
0x13240:	xor eax, eax                        
0x13242:	mov rax, qword ptr [rbp - 0x28]     #    if (!this|-|>visible)
0x13246:	movzx eax, byte ptr [rax + 0x6d]    
0x1324a:	test al, al                         #    if |(|!this->visible)
0x1324c:	je 0x1336b                          
0x13252:	lea rax, [rbp - 0x11]               #    |t|ty_save(&status);
0x13256:	mov rdi, rax                        
0x13259:	call 0xc04b                         
0x1325e:	mov rax, qword ptr [rbp - 0x28]     #    for (i |=| this->first_on_screen;
0x13262:	mov eax, dword ptr [rax + 0x2c]     
0x13265:	mov dword ptr [rbp - 0x10], eax     
0x13268:	jmp 0x1327f                         #    |f|or (i = this->first_on_screen;
0x1326a:	mov edx, dword ptr [rbp - 0x10]     #	|p|anel_update_entry(this, i);
0x1326d:	mov rax, qword ptr [rbp - 0x28]     
0x13271:	mov esi, edx                        
0x13273:	mov rdi, rax                        
0x13276:	call 0x14445                        
0x1327b:	add dword ptr [rbp - 0x10], 1       #	 i|+|+)
0x1327f:	mov rax, qword ptr [rbp - 0x28]     #	 (i < this|-|>entries) && (i - this->first_on_screen < this->lines - 2);
0x13283:	mov eax, dword ptr [rax + 0x68]     
0x13286:	cmp dword ptr [rbp - 0x10], eax     #	 (i < this->entries) |&|& (i - this->first_on_screen < this->lines - 2);
0x13289:	jge 0x132a7                         
0x1328b:	mov rax, qword ptr [rbp - 0x28]     #	 (i < this->entries) && (i - this|-|>first_on_screen < this->lines - 2);
0x1328f:	mov ecx, dword ptr [rax + 0x2c]     
0x13292:	mov eax, dword ptr [rbp - 0x10]     #	 (i < this->entries) && (i |-| this->first_on_screen < this->lines - 2);
0x13295:	sub eax, ecx                        
0x13297:	mov edx, eax                        
0x13299:	mov rax, qword ptr [rbp - 0x28]     #	 (i < this->entries) && (i - this->first_on_screen < this|-|>lines - 2);
0x1329d:	mov eax, dword ptr [rax + 0x60]     
0x132a0:	sub eax, 2                          #	 (i < this->entries) && (i - this->first_on_screen < this->lines |-| 2);
0x132a3:	cmp edx, eax                        #	 (i < this->entries) |&|& (i - this->first_on_screen < this->lines - 2);
0x132a5:	jl 0x1326a                          
0x132a7:	mov eax, dword ptr [rip + 0x1d1d7]  #    |t|ty_colors(OFF, WHITE, PanelBackground);
0x132ad:	mov edx, eax                        
0x132af:	mov esi, 7                          
0x132b4:	mov edi, 0                          
0x132b9:	call 0xbf89                         
0x132be:	mov rax, qword ptr [rbp - 0x28]     #    memset(this->temp, ' ', this|-|>columns);
0x132c2:	mov eax, dword ptr [rax + 0x64]     
0x132c5:	movsxd rdx, eax                     #    |m|emset(this->temp, ' ', this->columns);
0x132c8:	mov rax, qword ptr [rbp - 0x28]     #    memset(this|-|>temp, ' ', this->columns);
0x132cc:	mov rax, qword ptr [rax + 0x20]     
0x132d0:	mov esi, 0x20                       #    |m|emset(this->temp, ' ', this->columns);
0x132d5:	mov rdi, rax                        
0x132d8:	call 0x4a10                         
0x132dd:	mov rax, qword ptr [rbp - 0x28]     #    limit = |m|in(this->lines - 2, this->on_screen);
0x132e1:	mov eax, dword ptr [rax + 0x60]     
0x132e4:	lea edx, [rax - 2]                  
0x132e7:	mov rax, qword ptr [rbp - 0x28]     
0x132eb:	mov eax, dword ptr [rax + 0x14]     
0x132ee:	cmp edx, eax                        #    limit |=| min(this->lines - 2, this->on_screen);
0x132f0:	cmovle eax, edx                     
0x132f3:	mov dword ptr [rbp - 0xc], eax      
0x132f6:	jmp 0x13347                         #    |f|or (; i < limit; i++)
0x132f8:	mov rax, qword ptr [rbp - 0x28]     #	window_goto(this->window, i - this|-|>first_on_screen + 1, 1);
0x132fc:	mov edx, dword ptr [rax + 0x2c]     
0x132ff:	mov eax, dword ptr [rbp - 0x10]     #	window_goto(this->window, i |-| this->first_on_screen + 1, 1);
0x13302:	sub eax, edx                        
0x13304:	lea ecx, [rax + 1]                  #	|w|indow_goto(this->window, i - this->first_on_screen + 1, 1);
0x13307:	mov rax, qword ptr [rbp - 0x28]     
0x1330b:	mov rax, qword ptr [rax + 8]        
0x1330f:	mov edx, 1                          
0x13314:	mov esi, ecx                        
0x13316:	mov rdi, rax                        
0x13319:	call 0xdc1e                         
0x1331e:	mov rax, qword ptr [rbp - 0x28]     #	window_puts(this->window, this->temp, this|-|>columns - 2);
0x13322:	mov eax, dword ptr [rax + 0x64]     
0x13325:	lea edx, [rax - 2]                  #	|w|indow_puts(this->window, this->temp, this->columns - 2);
0x13328:	mov rax, qword ptr [rbp - 0x28]     
0x1332c:	mov rcx, qword ptr [rax + 0x20]     
0x13330:	mov rax, qword ptr [rbp - 0x28]     
0x13334:	mov rax, qword ptr [rax + 8]        
0x13338:	mov rsi, rcx                        
0x1333b:	mov rdi, rax                        
0x1333e:	call 0xdb1a                         
0x13343:	add dword ptr [rbp - 0x10], 1       #    for (; i < limit; i|+|+)
0x13347:	mov eax, dword ptr [rbp - 0x10]     #    for (; i |<| limit; i++)
0x1334a:	cmp eax, dword ptr [rbp - 0xc]      
0x1334d:	jl 0x132f8                          
0x1334f:	mov rax, qword ptr [rbp - 0x28]     #    this->on_screen = this|-|>entries;
0x13353:	mov edx, dword ptr [rax + 0x68]     
0x13356:	mov rax, qword ptr [rbp - 0x28]     #    this->on_screen |=| this->entries;
0x1335a:	mov dword ptr [rax + 0x14], edx     
0x1335d:	lea rax, [rbp - 0x11]               #    |t|ty_restore(&status);
0x13361:	mov rdi, rax                        
0x13364:	call 0xc067                         
0x13369:	jmp 0x1336c                         
0x1336b:	nop                                 #	|r|eturn;
0x1336c:	mov rax, qword ptr [rbp - 8]        #|}|
0x13370:	sub rax, qword ptr fs:[0x28]        
0x13379:	je 0x13380                          
0x1337b:	call 0x4980                         
0x13380:	leave                               
0x13381:	ret                                 
0x13382:	endbr64                             #|{|
0x13386:	push rbp                            
0x13387:	mov rbp, rsp                        
0x1338a:	sub rsp, 0x30                       
0x1338e:	mov qword ptr [rbp - 0x28], rdi     
0x13392:	mov rax, qword ptr fs:[0x28]        #|{|
0x1339b:	mov qword ptr [rbp - 8], rax        
0x1339f:	xor eax, eax                        
0x133a1:	mov rax, qword ptr [rbp - 0x28]     #    if (this|-|>columns < (1 + 1 + 1 + 1 + 14 + 1 + 1))
0x133a5:	mov eax, dword ptr [rax + 0x64]     
0x133a8:	cmp eax, 0x13                       #    if |(|this->columns < (1 + 1 + 1 + 1 + 14 + 1 + 1))
0x133ab:	jle 0x1349b                         
0x133b1:	mov rax, qword ptr [rbp - 0x28]     #    if (!this|-|>visible)
0x133b5:	movzx eax, byte ptr [rax + 0x6d]    
0x133b9:	test al, al                         #    if |(|!this->visible)
0x133bb:	je 0x1349e                          
0x133c1:	lea rax, [rbp - 0x11]               #    |t|ty_save(&status);
0x133c5:	mov rdi, rax                        
0x133c8:	call 0xc04b                         
0x133cd:	mov rax, qword ptr [rbp - 0x28]     #    len = this|-|>columns - (1 + 1 + 1 + 14 + 1 + 1);
0x133d1:	mov eax, dword ptr [rax + 0x64]     
0x133d4:	sub eax, 0x13                       #    len = this->columns |-| (1 + 1 + 1 + 14 + 1 + 1);
0x133d7:	cdqe                                #    len |=| this->columns - (1 + 1 + 1 + 14 + 1 + 1);
0x133d9:	mov qword ptr [rbp - 0x10], rax     
0x133dd:	mov rax, qword ptr [rbp - 0x28]     #    memset(this->temp, ' ', this|-|>columns);
0x133e1:	mov eax, dword ptr [rax + 0x64]     
0x133e4:	movsxd rdx, eax                     #    |m|emset(this->temp, ' ', this->columns);
0x133e7:	mov rax, qword ptr [rbp - 0x28]     #    memset(this|-|>temp, ' ', this->columns);
0x133eb:	mov rax, qword ptr [rax + 0x20]     
0x133ef:	mov esi, 0x20                       #    |m|emset(this->temp, ' ', this->columns);
0x133f4:	mov rdi, rax                        
0x133f7:	call 0x4a10                         
0x133fc:	mov rax, qword ptr [rbp - 0x10]     #    |t|runcate_long_name(this->path, this->temp, len);
0x13400:	mov edx, eax                        
0x13402:	mov rax, qword ptr [rbp - 0x28]     
0x13406:	mov rcx, qword ptr [rax + 0x20]     
0x1340a:	mov rax, qword ptr [rbp - 0x28]     
0x1340e:	mov rax, qword ptr [rax + 0x18]     
0x13412:	mov rsi, rcx                        
0x13415:	mov rdi, rax                        
0x13418:	call 0x1e2d8                        
0x1341d:	mov rax, qword ptr [rbp - 0x28]     #    |t|oprintable(this->temp, len);
0x13421:	mov rax, qword ptr [rax + 0x20]     
0x13425:	mov rdx, qword ptr [rbp - 0x10]     
0x13429:	mov rsi, rdx                        
0x1342c:	mov rdi, rax                        
0x1342f:	call 0x1e5b1                        
0x13434:	mov edx, dword ptr [rip + 0x1d046]  #    |t|ty_colors(PanelPathBrightness, PanelPath, PanelFrame);
0x1343a:	mov ecx, dword ptr [rip + 0x1d070]  
0x13440:	mov eax, dword ptr [rip + 0x1d06e]  
0x13446:	mov esi, ecx                        
0x13448:	mov edi, eax                        
0x1344a:	call 0xbf89                         
0x1344f:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_goto(this->window, 0, 2);
0x13453:	mov rax, qword ptr [rax + 8]        
0x13457:	mov edx, 2                          
0x1345c:	mov esi, 0                          
0x13461:	mov rdi, rax                        
0x13464:	call 0xdc1e                         
0x13469:	mov rax, qword ptr [rbp - 0x10]     #    window_puts(this->window, this->temp, len |+| 1);
0x1346d:	add eax, 1                          
0x13470:	mov edx, eax                        #    |w|indow_puts(this->window, this->temp, len + 1);
0x13472:	mov rax, qword ptr [rbp - 0x28]     
0x13476:	mov rcx, qword ptr [rax + 0x20]     
0x1347a:	mov rax, qword ptr [rbp - 0x28]     
0x1347e:	mov rax, qword ptr [rax + 8]        
0x13482:	mov rsi, rcx                        
0x13485:	mov rdi, rax                        
0x13488:	call 0xdb1a                         
0x1348d:	lea rax, [rbp - 0x11]               #    |t|ty_restore(&status);
0x13491:	mov rdi, rax                        
0x13494:	call 0xc067                         
0x13499:	jmp 0x1349f                         
0x1349b:	nop                                 #	|r|eturn;
0x1349c:	jmp 0x1349f                         
0x1349e:	nop                                 #	|r|eturn;
0x1349f:	mov rax, qword ptr [rbp - 8]        #|}|
0x134a3:	sub rax, qword ptr fs:[0x28]        
0x134ac:	je 0x134b3                          
0x134ae:	call 0x4980                         
0x134b3:	leave                               
0x134b4:	ret                                 
0x134b5:	endbr64                             #|{|
0x134b9:	push rbp                            
0x134ba:	mov rbp, rsp                        
0x134bd:	sub rsp, 0x30                       
0x134c1:	mov qword ptr [rbp - 0x18], rdi     
0x134c5:	mov qword ptr [rbp - 0x20], rsi     
0x134c9:	mov dword ptr [rbp - 0x24], edx     
0x134cc:	mov eax, dword ptr [rbp - 0x24]     #    int |f|lags = ( inflags | human_ceiling | human_group_digits | human_suppress_point_zero );
0x134cf:	or eax, 0xc                         
0x134d2:	mov dword ptr [rbp - 4], eax        
0x134d5:	cmp qword ptr [rbp - 0x20], 0x270f  #    if |(|number > 9999)
0x134dd:	jle 0x134e6                         
0x134df:	or dword ptr [rbp - 4], 0x90        #	flags |||= (human_autoscale | human_SI);
0x134e6:	mov rax, qword ptr [rbp - 0x20]     #    return |h|uman_readable(number, buf, flags, 1, 1);
0x134ea:	mov edx, dword ptr [rbp - 4]        
0x134ed:	mov rsi, qword ptr [rbp - 0x18]     
0x134f1:	mov r8d, 1                          
0x134f7:	mov ecx, 1                          
0x134fc:	mov rdi, rax                        
0x134ff:	call 0x23500                        
0x13504:	leave                               #|}|
0x13505:	ret                                 
0x13506:	endbr64                             #|{|
0x1350a:	push rbp                            
0x1350b:	mov rbp, rsp                        
0x1350e:	push rbx                            
0x1350f:	sub rsp, 0x318                      
0x13516:	mov qword ptr [rbp - 0x318], rdi    
0x1351d:	mov rax, qword ptr fs:[0x28]        #|{|
0x13526:	mov qword ptr [rbp - 0x18], rax     
0x1352a:	xor eax, eax                        
0x1352c:	mov rax, qword ptr [rbp - 0x318]    #    int viewable = this|-|>columns - (1 + 1 + 1 + 1);
0x13533:	mov eax, dword ptr [rax + 0x64]     
0x13536:	sub eax, 4                          #    int |v|iewable = this->columns - (1 + 1 + 1 + 1);
0x13539:	mov dword ptr [rbp - 0x30c], eax    
0x1353f:	mov rax, qword ptr [rbp - 0x318]    #    if (!this|-|>visible)
0x13546:	movzx eax, byte ptr [rax + 0x6d]    
0x1354a:	test al, al                         #    if |(|!this->visible)
0x1354c:	je 0x1374b                          
0x13552:	lea rax, [rbp - 0x30d]              #    |t|ty_save(&status);
0x13559:	mov rdi, rax                        
0x1355c:	call 0xc04b                         
0x13561:	mov qword ptr [rbp - 0x2e8], -1     #    fsu.fsu_blocks |=| (uintmax_t) -1;
0x1356c:	cmp dword ptr [rbp - 0x30c], 5      #    if |(|viewable < 6 ||
0x13573:	jle 0x135a5                         
0x13575:	mov rax, qword ptr [rbp - 0x318]    #	get_fs_usage(this|-|>path, NULL, &fsu) < 0 ||
0x1357c:	mov rax, qword ptr [rax + 0x18]     
0x13580:	lea rdx, [rbp - 0x2f0]              #	|g|et_fs_usage(this->path, NULL, &fsu) < 0 ||
0x13587:	mov esi, 0                          
0x1358c:	mov rdi, rax                        
0x1358f:	call 0x23470                        
0x13594:	test eax, eax                       #    if (viewable < 6 ||||
0x13596:	js 0x135a5                          
0x13598:	mov rax, qword ptr [rbp - 0x2e8]    #	fsu|.|fsu_blocks == (uintmax_t) -1)
0x1359f:	cmp rax, -1                         #	get_fs_usage(this->path, NULL, &fsu) < 0 ||||
0x135a3:	jne 0x135e8                         
0x135a5:	lea rax, [rbp - 0x2b0]              #	|m|emset(buf, ' ', sizeof(buf));
0x135ac:	mov edx, 0x28b                      
0x135b1:	mov esi, 0x20                       
0x135b6:	mov rdi, rax                        
0x135b9:	call 0x4a10                         
0x135be:	lea rax, [rbp - 0x2b0]              #	sz|=|buf;
0x135c5:	mov qword ptr [rbp - 0x308], rax    
0x135cc:	mov edi, 0                          #	|t|ty_brightness(OFF);
0x135d1:	call 0xbf36                         
0x135d6:	mov eax, dword ptr [rip + 0x1cea4]  #	|t|ty_foreground(PanelFrame);
0x135dc:	mov edi, eax                        
0x135de:	call 0xbee3                         
0x135e3:	jmp 0x1367a                         
0x135e8:	call 0x4a20                         #            (|g|eteuid() == 0) ? fsu.fsu_bfree : fsu.fsu_bavail;
0x135ed:	test eax, eax                       #            (geteuid() == 0) ? fsu.fsu_bfree |:| fsu.fsu_bavail;
0x135ef:	jne 0x135fa                         
0x135f1:	mov rax, qword ptr [rbp - 0x2e0]    #            (geteuid() == 0) ? fsu|.|fsu_bfree : fsu.fsu_bavail;
0x135f8:	jmp 0x13601                         
0x135fa:	mov rax, qword ptr [rbp - 0x2d8]    #            (geteuid() == 0) ? fsu.fsu_bfree : fsu|.|fsu_bavail;
0x13601:	mov qword ptr [rbp - 0x300], rax    #	off64_t |f|ree_blocks =
0x13608:	cmp qword ptr [rbp - 0x300], 0      #	if |(|free_blocks < 0)
0x13610:	jns 0x1361d                         
0x13612:	mov qword ptr [rbp - 0x300], 0      #	    free_blocks |=| 0;
0x1361d:	mov rdx, qword ptr [rbp - 0x2f0]    #	n = free_blocks * fsu|.|fsu_blocksize;
0x13624:	mov rax, qword ptr [rbp - 0x300]    #	n = free_blocks |*| fsu.fsu_blocksize;
0x1362b:	imul rax, rdx                       
0x1362f:	mov qword ptr [rbp - 0x2f8], rax    #	n |=| free_blocks * fsu.fsu_blocksize;
0x13636:	mov rcx, qword ptr [rbp - 0x2f8]    #	sz=|p|anel_beautify_number(buf, n, 0);
0x1363d:	lea rax, [rbp - 0x2b0]              
0x13644:	mov edx, 0                          
0x13649:	mov rsi, rcx                        
0x1364c:	mov rdi, rax                        
0x1364f:	mov eax, 0                          
0x13654:	call 0x134b5                        
0x13659:	mov qword ptr [rbp - 0x308], rax    
0x13660:	mov eax, dword ptr [rip + 0x1ce56]  #	|t|ty_brightness(PanelDeviceFreeSpaceBrightness);
0x13666:	mov edi, eax                        
0x13668:	call 0xbf36                         
0x1366d:	mov eax, dword ptr [rip + 0x1ce45]  #	|t|ty_foreground(PanelDeviceFreeSpace);
0x13673:	mov edi, eax                        
0x13675:	call 0xbee3                         
0x1367a:	mov eax, dword ptr [rip + 0x1ce00]  #    |t|ty_background(PanelFrame);
0x13680:	mov edi, eax                        
0x13682:	call 0xbf0b                         
0x13687:	mov rax, qword ptr [rbp - 0x318]    #    window_goto(this->window, 0, this|-|>columns - 2 - min(strlen(sz), viewable));
0x1368e:	mov eax, dword ptr [rax + 0x64]     
0x13691:	mov ebx, eax                        #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
0x13693:	mov rax, qword ptr [rbp - 0x308]    #    window_goto(this->window, 0, this->columns - 2 - |m|in(strlen(sz), viewable));
0x1369a:	mov rdi, rax                        
0x1369d:	call 0x4960                         
0x136a2:	mov edx, dword ptr [rbp - 0x30c]    
0x136a8:	movsxd rdx, edx                     
0x136ab:	cmp rax, rdx                        #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
0x136ae:	ja 0x136c3                          
0x136b0:	mov rax, qword ptr [rbp - 0x308]    #    window_goto(this->window, 0, this->columns - 2 - |m|in(strlen(sz), viewable));
0x136b7:	mov rdi, rax                        
0x136ba:	call 0x4960                         
0x136bf:	mov edx, eax                        #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
0x136c1:	jmp 0x136c9                         
0x136c3:	mov edx, dword ptr [rbp - 0x30c]    #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
0x136c9:	mov eax, ebx                        #    window_goto(this->window, 0, this->columns - 2 |-| min(strlen(sz), viewable));
0x136cb:	sub eax, edx                        
0x136cd:	sub eax, 2                          
0x136d0:	mov edx, eax                        #    |w|indow_goto(this->window, 0, this->columns - 2 - min(strlen(sz), viewable));
0x136d2:	mov rax, qword ptr [rbp - 0x318]    
0x136d9:	mov rax, qword ptr [rax + 8]        
0x136dd:	mov esi, 0                          
0x136e2:	mov rdi, rax                        
0x136e5:	call 0xdc1e                         
0x136ea:	mov rax, qword ptr [rbp - 0x308]    #    window_puts(this->window, sz, |m|in(strlen(sz), viewable));
0x136f1:	mov rdi, rax                        
0x136f4:	call 0x4960                         
0x136f9:	mov edx, dword ptr [rbp - 0x30c]    
0x136ff:	movsxd rdx, edx                     
0x13702:	cmp rax, rdx                        #    |w|indow_puts(this->window, sz, min(strlen(sz), viewable));
0x13705:	ja 0x13718                          
0x13707:	mov rax, qword ptr [rbp - 0x308]    #    window_puts(this->window, sz, |m|in(strlen(sz), viewable));
0x1370e:	mov rdi, rax                        
0x13711:	call 0x4960                         
0x13716:	jmp 0x1371e                         
0x13718:	mov eax, dword ptr [rbp - 0x30c]    #    |w|indow_puts(this->window, sz, min(strlen(sz), viewable));
0x1371e:	mov rdx, qword ptr [rbp - 0x318]    #    |w|indow_puts(this->window, sz, min(strlen(sz), viewable));
0x13725:	mov rcx, qword ptr [rdx + 8]        
0x13729:	mov rsi, qword ptr [rbp - 0x308]    
0x13730:	mov edx, eax                        
0x13732:	mov rdi, rcx                        
0x13735:	call 0xdb1a                         
0x1373a:	lea rax, [rbp - 0x30d]              #    |t|ty_restore(&status);
0x13741:	mov rdi, rax                        
0x13744:	call 0xc067                         
0x13749:	jmp 0x1374c                         
0x1374b:	nop                                 #	|r|eturn;
0x1374c:	mov rax, qword ptr [rbp - 0x18]     #|}|
0x13750:	sub rax, qword ptr fs:[0x28]        
0x13759:	je 0x13760                          
0x1375b:	call 0x4980                         
0x13760:	mov rbx, qword ptr [rbp - 8]        
0x13764:	leave                               
0x13765:	ret                                 
0x13766:	endbr64                             #|{|
0x1376a:	push rbp                            
0x1376b:	mov rbp, rsp                        
0x1376e:	sub rsp, 0x30                       
0x13772:	mov qword ptr [rbp - 0x18], rdi     
0x13776:	mov dword ptr [rbp - 0x1c], esi     
0x13779:	mov qword ptr [rbp - 0x28], rdx     
0x1377d:	mov rax, qword ptr [rbp - 0x28]     #    |s|trcpy(string, rights);
0x13781:	lea rdx, [rip + 0x1cba8]            
0x13788:	mov rsi, rdx                        
0x1378b:	mov rdi, rax                        
0x1378e:	call 0x4870                         
0x13793:	mov rax, qword ptr [rbp - 0x18]     #    mode = this|-|>dir_entry[entry].mode;
0x13797:	mov rcx, qword ptr [rax + 0x38]     
0x1379b:	mov eax, dword ptr [rbp - 0x1c]     #    mode = this->dir_entry|[|entry].mode;
0x1379e:	movsxd rdx, eax                     
0x137a1:	mov rax, rdx                        
0x137a4:	shl rax, 2                          
0x137a8:	add rax, rdx                        
0x137ab:	shl rax, 4                          
0x137af:	add rax, rcx                        
0x137b2:	mov eax, dword ptr [rax + 0x10]     #    mode |=| this->dir_entry[entry].mode;
0x137b5:	mov dword ptr [rbp - 4], eax        
0x137b8:	mov eax, dword ptr [rbp - 4]        #    if (|S|_ISREG(mode))
0x137bb:	and eax, 0xf000                     
0x137c0:	cmp eax, 0x8000                     #    if |(|S_ISREG(mode))
0x137c5:	jne 0x137d3                         
0x137c7:	mov rax, qword ptr [rbp - 0x28]     #	string[0] |=| '-';
0x137cb:	mov byte ptr [rax], 0x2d            
0x137ce:	jmp 0x1386a                         
0x137d3:	mov eax, dword ptr [rbp - 4]        #	if (|S|_ISDIR(mode))
0x137d6:	and eax, 0xf000                     
0x137db:	cmp eax, 0x4000                     #	if |(|S_ISDIR(mode))
0x137e0:	jne 0x137eb                         
0x137e2:	mov rax, qword ptr [rbp - 0x28]     #	    string[0] |=| 'd';
0x137e6:	mov byte ptr [rax], 0x64            
0x137e9:	jmp 0x1386a                         
0x137eb:	mov eax, dword ptr [rbp - 4]        #	    if (|S|_ISCHR(mode))
0x137ee:	and eax, 0xf000                     
0x137f3:	cmp eax, 0x2000                     #	    if |(|S_ISCHR(mode))
0x137f8:	jne 0x13803                         
0x137fa:	mov rax, qword ptr [rbp - 0x28]     #		string[0] |=| 'c';
0x137fe:	mov byte ptr [rax], 0x63            
0x13801:	jmp 0x1386a                         
0x13803:	mov eax, dword ptr [rbp - 4]        #		if (|S|_ISBLK(mode))
0x13806:	and eax, 0xf000                     
0x1380b:	cmp eax, 0x6000                     #		if |(|S_ISBLK(mode))
0x13810:	jne 0x1381b                         
0x13812:	mov rax, qword ptr [rbp - 0x28]     #		    string[0] |=| 'b';
0x13816:	mov byte ptr [rax], 0x62            
0x13819:	jmp 0x1386a                         
0x1381b:	mov eax, dword ptr [rbp - 4]        #		    if (|S|_ISFIFO(mode))
0x1381e:	and eax, 0xf000                     
0x13823:	cmp eax, 0x1000                     #		    if |(|S_ISFIFO(mode))
0x13828:	jne 0x13833                         
0x1382a:	mov rax, qword ptr [rbp - 0x28]     #			string[0] |=| 'p';
0x1382e:	mov byte ptr [rax], 0x70            
0x13831:	jmp 0x1386a                         
0x13833:	mov eax, dword ptr [rbp - 4]        #			if (|S|_ISSOCK(mode))
0x13836:	and eax, 0xf000                     
0x1383b:	cmp eax, 0xc000                     #			if |(|S_ISSOCK(mode))
0x13840:	jne 0x1384b                         
0x13842:	mov rax, qword ptr [rbp - 0x28]     #			    string[0] |=| 's';
0x13846:	mov byte ptr [rax], 0x73            
0x13849:	jmp 0x1386a                         
0x1384b:	mov eax, dword ptr [rbp - 4]        #			    if (|S|_ISLNK(mode))
0x1384e:	and eax, 0xf000                     
0x13853:	cmp eax, 0xa000                     #			    if |(|S_ISLNK(mode))
0x13858:	jne 0x13863                         
0x1385a:	mov rax, qword ptr [rbp - 0x28]     #				string[0] |=| 'l';
0x1385e:	mov byte ptr [rax], 0x6c            
0x13861:	jmp 0x1386a                         
0x13863:	mov rax, qword ptr [rbp - 0x28]     #				string[0] |=| '?';
0x13867:	mov byte ptr [rax], 0x3f            
0x1386a:	mov dword ptr [rbp - 8], 0          #    for (i |=| 0; i < 9; mode >>= 1, i++)
0x13871:	jmp 0x13899                         #    |f|or (i = 0; i < 9; mode >>= 1, i++)
0x13873:	mov eax, dword ptr [rbp - 4]        #	if ((mode |&| 1) == 0)
0x13876:	and eax, 1                          
0x13879:	test eax, eax                       #	if |(|(mode & 1) == 0)
0x1387b:	jne 0x13892                         
0x1387d:	mov eax, 9                          #	    string[9 |-| i] = '-';
0x13882:	sub eax, dword ptr [rbp - 8]        
0x13885:	movsxd rdx, eax                     
0x13888:	mov rax, qword ptr [rbp - 0x28]     #	    string|[|9 - i] = '-';
0x1388c:	add rax, rdx                        
0x1388f:	mov byte ptr [rax], 0x2d            #	    string[9 - i] |=| '-';
0x13892:	shr dword ptr [rbp - 4], 1          #    for (i = 0; i < 9; mode |>|>= 1, i++)
0x13895:	add dword ptr [rbp - 8], 1          #    for (i = 0; i < 9; mode >>= 1, i|+|+)
0x13899:	cmp dword ptr [rbp - 8], 8          #    for (i = 0; i |<| 9; mode >>= 1, i++)
0x1389d:	jle 0x13873                         
0x1389f:	mov rax, qword ptr [rbp - 0x18]     #    mode = this|-|>dir_entry[entry].mode;
0x138a3:	mov rcx, qword ptr [rax + 0x38]     
0x138a7:	mov eax, dword ptr [rbp - 0x1c]     #    mode = this->dir_entry|[|entry].mode;
0x138aa:	movsxd rdx, eax                     
0x138ad:	mov rax, rdx                        
0x138b0:	shl rax, 2                          
0x138b4:	add rax, rdx                        
0x138b7:	shl rax, 4                          
0x138bb:	add rax, rcx                        
0x138be:	mov eax, dword ptr [rax + 0x10]     #    mode |=| this->dir_entry[entry].mode;
0x138c1:	mov dword ptr [rbp - 4], eax        
0x138c4:	mov eax, dword ptr [rbp - 4]        #    if (mode |&| S_ISUID)
0x138c7:	and eax, 0x800                      
0x138cc:	test eax, eax                       #    if |(|mode & S_ISUID)
0x138ce:	je 0x138f5                          
0x138d0:	mov rax, qword ptr [rbp - 0x28]     #	string[3] = (string|[|3] == 'x') ? 's' : 'S';
0x138d4:	add rax, 3                          
0x138d8:	movzx eax, byte ptr [rax]           
0x138db:	cmp al, 0x78                        #	string[3] |=| (string[3] == 'x') ? 's' : 'S';
0x138dd:	jne 0x138e6                         
0x138df:	mov edx, 0x73                       #	string[3] |=| (string[3] == 'x') ? 's' : 'S';
0x138e4:	jmp 0x138eb                         
0x138e6:	mov edx, 0x53                       #	string[3] |=| (string[3] == 'x') ? 's' : 'S';
0x138eb:	mov rax, qword ptr [rbp - 0x28]     #	string|[|3] = (string[3] == 'x') ? 's' : 'S';
0x138ef:	add rax, 3                          
0x138f3:	mov byte ptr [rax], dl              #	string[3] |=| (string[3] == 'x') ? 's' : 'S';
0x138f5:	mov eax, dword ptr [rbp - 4]        #    if (mode |&| S_ISGID)
0x138f8:	and eax, 0x400                      
0x138fd:	test eax, eax                       #    if |(|mode & S_ISGID)
0x138ff:	je 0x13926                          
0x13901:	mov rax, qword ptr [rbp - 0x28]     #	string[6] = (string|[|6] == 'x') ? 's' : 'S';
0x13905:	add rax, 6                          
0x13909:	movzx eax, byte ptr [rax]           
0x1390c:	cmp al, 0x78                        #	string[6] |=| (string[6] == 'x') ? 's' : 'S';
0x1390e:	jne 0x13917                         
0x13910:	mov edx, 0x73                       #	string[6] |=| (string[6] == 'x') ? 's' : 'S';
0x13915:	jmp 0x1391c                         
0x13917:	mov edx, 0x53                       #	string[6] |=| (string[6] == 'x') ? 's' : 'S';
0x1391c:	mov rax, qword ptr [rbp - 0x28]     #	string|[|6] = (string[6] == 'x') ? 's' : 'S';
0x13920:	add rax, 6                          
0x13924:	mov byte ptr [rax], dl              #	string[6] |=| (string[6] == 'x') ? 's' : 'S';
0x13926:	mov eax, dword ptr [rbp - 4]        #    if (mode |&| S_ISVTX)
0x13929:	and eax, 0x200                      
0x1392e:	test eax, eax                       #    if |(|mode & S_ISVTX)
0x13930:	je 0x13957                          
0x13932:	mov rax, qword ptr [rbp - 0x28]     #	string[9] = (string|[|9] == 'x') ? 't' : 'T';
0x13936:	add rax, 9                          
0x1393a:	movzx eax, byte ptr [rax]           
0x1393d:	cmp al, 0x78                        #	string[9] |=| (string[9] == 'x') ? 't' : 'T';
0x1393f:	jne 0x13948                         
0x13941:	mov edx, 0x74                       #	string[9] |=| (string[9] == 'x') ? 't' : 'T';
0x13946:	jmp 0x1394d                         
0x13948:	mov edx, 0x54                       #	string[9] |=| (string[9] == 'x') ? 't' : 'T';
0x1394d:	mov rax, qword ptr [rbp - 0x28]     #	string|[|9] = (string[9] == 'x') ? 't' : 'T';
0x13951:	add rax, 9                          
0x13955:	mov byte ptr [rax], dl              #	string[9] |=| (string[9] == 'x') ? 't' : 'T';
0x13957:	nop                                 #|}|
0x13958:	leave                               
0x13959:	ret                                 
0x1395a:	endbr64                             #|{|
0x1395e:	push rbp                            
0x1395f:	mov rbp, rsp                        
0x13962:	sub rsp, 0x6e0                      
0x13969:	mov qword ptr [rbp - 0x6d8], rdi    
0x13970:	mov rax, qword ptr fs:[0x28]        #|{|
0x13979:	mov qword ptr [rbp - 8], rax        
0x1397d:	xor eax, eax                        
0x1397f:	mov qword ptr [rbp - 0x6c0], 0      #    off64_t |t|otal_size = 0;
0x1398a:	mov rax, qword ptr [rbp - 0x6d8]    #    if (!this|-|>visible)
0x13991:	movzx eax, byte ptr [rax + 0x6d]    
0x13995:	test al, al                         #    if |(|!this->visible)
0x13997:	je 0x14092                          
0x1399d:	lea rax, [rbp - 0x6c9]              #    |t|ty_save(&status);
0x139a4:	mov rdi, rax                        
0x139a7:	call 0xc04b                         
0x139ac:	mov rax, qword ptr [rbp - 0x6d8]    #    if (this|-|>lines >= 3)
0x139b3:	mov eax, dword ptr [rax + 0x60]     
0x139b6:	cmp eax, 2                          #    if |(|this->lines >= 3)
0x139b9:	jle 0x13adb                         
0x139bf:	mov edx, dword ptr [rip + 0x1cabb]  #	|t|ty_colors(OFF, PanelFrame, PanelFrame);
0x139c5:	mov eax, dword ptr [rip + 0x1cab5]  
0x139cb:	mov esi, eax                        
0x139cd:	mov edi, 0                          
0x139d2:	call 0xbf89                         
0x139d7:	mov rax, qword ptr [rbp - 0x6d8]    #	window_goto(this->window, this->thumb + 1, this|-|>columns - 1);
0x139de:	mov eax, dword ptr [rax + 0x64]     
0x139e1:	lea edx, [rax - 1]                  #	|w|indow_goto(this->window, this->thumb + 1, this->columns - 1);
0x139e4:	mov rax, qword ptr [rbp - 0x6d8]    #	window_goto(this->window, this|-|>thumb + 1, this->columns - 1);
0x139eb:	mov eax, dword ptr [rax + 0x8c]     
0x139f1:	lea ecx, [rax + 1]                  #	|w|indow_goto(this->window, this->thumb + 1, this->columns - 1);
0x139f4:	mov rax, qword ptr [rbp - 0x6d8]    
0x139fb:	mov rax, qword ptr [rax + 8]        
0x139ff:	mov esi, ecx                        
0x13a01:	mov rdi, rax                        
0x13a04:	call 0xdc1e                         
0x13a09:	mov rax, qword ptr [rbp - 0x6d8]    #	|w|indow_putc(this->window, ' ');
0x13a10:	mov rax, qword ptr [rax + 8]        
0x13a14:	mov esi, 0x20                       
0x13a19:	mov rdi, rax                        
0x13a1c:	call 0xdbbc                         
0x13a21:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this->entries > this|-|>lines-2)
0x13a28:	mov eax, dword ptr [rax + 0x60]     
0x13a2b:	lea edx, [rax - 1]                  #	if (this->entries |>| this->lines-2)
0x13a2e:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this|-|>entries > this->lines-2)
0x13a35:	mov eax, dword ptr [rax + 0x68]     
0x13a38:	cmp edx, eax                        #	if |(|this->entries > this->lines-2)
0x13a3a:	jg 0x13adb                          
0x13a40:	mov rax, qword ptr [rbp - 0x6d8]    #	    this->thumb = ((this|-|>current_entry * (this->lines-2)) /
0x13a47:	mov edx, dword ptr [rax + 0x28]     
0x13a4a:	mov rax, qword ptr [rbp - 0x6d8]    #	    this->thumb = ((this->current_entry * (this|-|>lines-2)) /
0x13a51:	mov eax, dword ptr [rax + 0x60]     
0x13a54:	sub eax, 2                          #	    this->thumb = ((this->current_entry * (this->lines|-|2)) /
0x13a57:	imul eax, edx                       #	    this->thumb = ((this->current_entry |*| (this->lines-2)) /
0x13a5a:	mov rdx, qword ptr [rbp - 0x6d8]    #			   this|-|>entries);
0x13a61:	mov esi, dword ptr [rdx + 0x68]     
0x13a64:	cdq                                 #	    this->thumb = ((this->current_entry * (this->lines-2)) |/|
0x13a65:	idiv esi                            
0x13a67:	mov edx, eax                        
0x13a69:	mov rax, qword ptr [rbp - 0x6d8]    #	    this->thumb |=| ((this->current_entry * (this->lines-2)) /
0x13a70:	mov dword ptr [rax + 0x8c], edx     
0x13a76:	mov edx, dword ptr [rip + 0x1ca10]  #	    |t|ty_colors(PanelThumbBrightness,
0x13a7c:	mov ecx, dword ptr [rip + 0x1ca06]  
0x13a82:	mov eax, dword ptr [rip + 0x1ca08]  
0x13a88:	mov esi, ecx                        
0x13a8a:	mov edi, eax                        
0x13a8c:	call 0xbf89                         
0x13a91:	mov rax, qword ptr [rbp - 0x6d8]    #	    window_goto(this->window, this->thumb+1, this|-|>columns-1);
0x13a98:	mov eax, dword ptr [rax + 0x64]     
0x13a9b:	lea edx, [rax - 1]                  #	    |w|indow_goto(this->window, this->thumb+1, this->columns-1);
0x13a9e:	mov rax, qword ptr [rbp - 0x6d8]    #	    window_goto(this->window, this|-|>thumb+1, this->columns-1);
0x13aa5:	mov eax, dword ptr [rax + 0x8c]     
0x13aab:	lea ecx, [rax + 1]                  #	    |w|indow_goto(this->window, this->thumb+1, this->columns-1);
0x13aae:	mov rax, qword ptr [rbp - 0x6d8]    
0x13ab5:	mov rax, qword ptr [rax + 8]        
0x13ab9:	mov esi, ecx                        
0x13abb:	mov rdi, rax                        
0x13abe:	call 0xdc1e                         
0x13ac3:	mov rax, qword ptr [rbp - 0x6d8]    #	    |w|indow_putc(this->window, '#');
0x13aca:	mov rax, qword ptr [rax + 8]        
0x13ace:	mov esi, 0x23                       
0x13ad3:	mov rdi, rax                        
0x13ad6:	call 0xdbbc                         
0x13adb:	mov rax, qword ptr [rbp - 0x6d8]    #    if (this|-|>columns < 40)
0x13ae2:	mov eax, dword ptr [rax + 0x64]     
0x13ae5:	cmp eax, 0x27                       #    if |(|this->columns < 40)
0x13ae8:	jg 0x13b56                          
0x13aea:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this|-|>columns < (1 + 1 + 10 + 1 + 1))
0x13af1:	mov eax, dword ptr [rax + 0x64]     
0x13af4:	cmp eax, 0xd                        #	if |(|this->columns < (1 + 1 + 10 + 1 + 1))
0x13af7:	jg 0x13b05                          
0x13af9:	mov byte ptr [rbp - 0x410], 0       #	    *str |=| '\0';
0x13b00:	jmp 0x13f57                         #	|g|oto skip_info_display;
0x13b05:	mov rax, qword ptr [rbp - 0x6d8]    #	    |p|anel_mode2string(this, this->current_entry, temp_rights);
0x13b0c:	mov ecx, dword ptr [rax + 0x28]     
0x13b0f:	lea rdx, [rbp - 0x6a0]              
0x13b16:	mov rax, qword ptr [rbp - 0x6d8]    
0x13b1d:	mov esi, ecx                        
0x13b1f:	mov rdi, rax                        
0x13b22:	mov eax, 0                          
0x13b27:	call 0x13766                        
0x13b2c:	lea rdx, [rbp - 0x6a0]              #	    |s|printf(str, "%10s", temp_rights);
0x13b33:	lea rax, [rbp - 0x410]              
0x13b3a:	lea rcx, [rip + 0x14ab9]            
0x13b41:	mov rsi, rcx                        
0x13b44:	mov rdi, rax                        
0x13b47:	mov eax, 0                          
0x13b4c:	call 0x4dd0                         
0x13b51:	jmp 0x13f57                         #	|g|oto skip_info_display;
0x13b56:	mov rax, qword ptr [rbp - 0x6d8]    #    if (this|-|>selected_entries)
0x13b5d:	mov eax, dword ptr [rax + 0x70]     
0x13b60:	test eax, eax                       #    if |(|this->selected_entries)
0x13b62:	je 0x13cf3                          
0x13b68:	mov dword ptr [rbp - 0x6c8], 0      #	for (entry |=| 0; entry < this->entries; entry++)
0x13b72:	jmp 0x13c08                         #	|f|or (entry = 0; entry < this->entries; entry++)
0x13b77:	mov rax, qword ptr [rbp - 0x6d8]    #	    if (this|-|>dir_entry[entry].selected &&
0x13b7e:	mov rcx, qword ptr [rax + 0x38]     
0x13b82:	mov eax, dword ptr [rbp - 0x6c8]    #	    if (this->dir_entry|[|entry].selected &&
0x13b88:	movsxd rdx, eax                     
0x13b8b:	mov rax, rdx                        
0x13b8e:	shl rax, 2                          
0x13b92:	add rax, rdx                        
0x13b95:	shl rax, 4                          
0x13b99:	add rax, rcx                        
0x13b9c:	movzx eax, byte ptr [rax + 0x49]    #	    if (this->dir_entry[entry]|.|selected &&
0x13ba0:	test al, al                         #	    if |(|this->dir_entry[entry].selected &&
0x13ba2:	je 0x13c01                          
0x13ba4:	mov rax, qword ptr [rbp - 0x6d8]    #		this|-|>dir_entry[entry].type == FILE_ENTRY)
0x13bab:	mov rcx, qword ptr [rax + 0x38]     
0x13baf:	mov eax, dword ptr [rbp - 0x6c8]    #		this->dir_entry|[|entry].type == FILE_ENTRY)
0x13bb5:	movsxd rdx, eax                     
0x13bb8:	mov rax, rdx                        
0x13bbb:	shl rax, 2                          
0x13bbf:	add rax, rdx                        
0x13bc2:	shl rax, 4                          
0x13bc6:	add rax, rcx                        
0x13bc9:	movzx eax, byte ptr [rax + 0x48]    #		this->dir_entry[entry]|.|type == FILE_ENTRY)
0x13bcd:	cmp al, 1                           #	    if (this->dir_entry[entry].selected |&|&
0x13bcf:	jne 0x13c01                         
0x13bd1:	mov rax, qword ptr [rbp - 0x6d8]    #		total_size += this|-|>dir_entry[entry].size;
0x13bd8:	mov rcx, qword ptr [rax + 0x38]     
0x13bdc:	mov eax, dword ptr [rbp - 0x6c8]    #		total_size += this->dir_entry|[|entry].size;
0x13be2:	movsxd rdx, eax                     
0x13be5:	mov rax, rdx                        
0x13be8:	shl rax, 2                          
0x13bec:	add rax, rdx                        
0x13bef:	shl rax, 4                          
0x13bf3:	add rax, rcx                        
0x13bf6:	mov rax, qword ptr [rax + 8]        #		total_size += this->dir_entry[entry]|.|size;
0x13bfa:	add qword ptr [rbp - 0x6c0], rax    #		total_size |+|= this->dir_entry[entry].size;
0x13c01:	add dword ptr [rbp - 0x6c8], 1      #	for (entry = 0; entry < this->entries; entry|+|+)
0x13c08:	mov rax, qword ptr [rbp - 0x6d8]    #	for (entry = 0; entry < this|-|>entries; entry++)
0x13c0f:	mov eax, dword ptr [rax + 0x68]     
0x13c12:	cmp dword ptr [rbp - 0x6c8], eax    #	for (entry = 0; entry |<| this->entries; entry++)
0x13c18:	jl 0x13b77                          
0x13c1e:	mov rcx, qword ptr [rbp - 0x6c0]    #	sz=|p|anel_beautify_number(buf, total_size, (human_SI|human_autoscale|human_B));
0x13c25:	lea rax, [rbp - 0x6a0]              
0x13c2c:	mov edx, 0x190                      
0x13c31:	mov rsi, rcx                        
0x13c34:	mov rdi, rax                        
0x13c37:	mov eax, 0                          
0x13c3c:	call 0x134b5                        
0x13c41:	mov qword ptr [rbp - 0x6a8], rax    
0x13c48:	mov dword ptr [rbp - 0x6c4], 0      #	for (offset |=| 0; sz[offset] == ' '; offset++)
0x13c52:	jmp 0x13c5b                         #	|f|or (offset = 0; sz[offset] == ' '; offset++)
0x13c54:	add dword ptr [rbp - 0x6c4], 1      #	for (offset = 0; sz[offset] == ' '; offset|+|+)
0x13c5b:	mov eax, dword ptr [rbp - 0x6c4]    #	for (offset = 0; sz|[|offset] == ' '; offset++)
0x13c61:	movsxd rdx, eax                     
0x13c64:	mov rax, qword ptr [rbp - 0x6a8]    
0x13c6b:	add rax, rdx                        
0x13c6e:	movzx eax, byte ptr [rax]           
0x13c71:	cmp al, 0x20                        #	for (offset = 0; sz[offset] |=|= ' '; offset++)
0x13c73:	je 0x13c54                          
0x13c75:	mov rax, qword ptr [rbp - 0x6d8]    #		(this|-|>selected_entries > 1) ? "s" : "");
0x13c7c:	mov eax, dword ptr [rax + 0x70]     
0x13c7f:	cmp eax, 1                          #	|s|printf(str, "%s in %d file%s",
0x13c82:	jle 0x13c8d                         
0x13c84:	lea rax, [rip + 0x14974]            #	|s|printf(str, "%s in %d file%s",
0x13c8b:	jmp 0x13c94                         
0x13c8d:	lea rax, [rip + 0x1496d]            #	|s|printf(str, "%s in %d file%s",
0x13c94:	mov rdx, qword ptr [rbp - 0x6d8]    #	|s|printf(str, "%s in %d file%s",
0x13c9b:	mov edx, dword ptr [rdx + 0x70]     
0x13c9e:	mov ecx, dword ptr [rbp - 0x6c4]    
0x13ca4:	movsxd rsi, ecx                     
0x13ca7:	mov rcx, qword ptr [rbp - 0x6a8]    
0x13cae:	add rsi, rcx                        
0x13cb1:	lea rdi, [rbp - 0x410]              
0x13cb8:	mov r8, rax                         
0x13cbb:	mov ecx, edx                        
0x13cbd:	mov rdx, rsi                        
0x13cc0:	lea rax, [rip + 0x1493b]            
0x13cc7:	mov rsi, rax                        
0x13cca:	mov eax, 0                          
0x13ccf:	call 0x4dd0                         
0x13cd4:	mov eax, dword ptr [rip + 0x1c7f2]  #	|t|ty_brightness(PanelFilesInfoBrightness);
0x13cda:	mov edi, eax                        
0x13cdc:	call 0xbf36                         
0x13ce1:	mov eax, dword ptr [rip + 0x1c7e1]  #	|t|ty_foreground(PanelFilesInfo);
0x13ce7:	mov edi, eax                        
0x13ce9:	call 0xbee3                         
0x13cee:	jmp 0x13f71                         
0x13cf3:	mov eax, dword ptr [rip + 0x1d903]  #	if (InfoDisplay |=|= OFF)
0x13cf9:	test eax, eax                       #	if |(|InfoDisplay == OFF)
0x13cfb:	jne 0x13d09                         
0x13cfd:	mov byte ptr [rbp - 0x410], 0       #	    *str |=| '\0';
0x13d04:	jmp 0x13f57                         #	    |g|oto skip_info_display;
0x13d09:	mov rax, qword ptr [rbp - 0x6d8]    #	|p|anel_mode2string(this, this->current_entry, temp_rights);
0x13d10:	mov ecx, dword ptr [rax + 0x28]     
0x13d13:	lea rdx, [rbp - 0x6a0]              
0x13d1a:	mov rax, qword ptr [rbp - 0x6d8]    
0x13d21:	mov esi, ecx                        
0x13d23:	mov rdi, rax                        
0x13d26:	mov eax, 0                          
0x13d2b:	call 0x13766                        
0x13d30:	mov rax, qword ptr [rbp - 0x6d8]    #	maxname = this|-|>columns - 26;  /* FIXME: Huh?  */
0x13d37:	mov eax, dword ptr [rax + 0x64]     
0x13d3a:	sub eax, 0x1a                       #	maxname = this->columns |-| 26;  /* FIXME: Huh?  */
0x13d3d:	cdqe                                #	maxname |=| this->columns - 26;  /* FIXME: Huh?  */
0x13d3f:	mov qword ptr [rbp - 0x6b8], rax    
0x13d46:	mov rax, qword ptr [rbp - 0x6d8]    #	len = |m|in(strlen(this->dir_entry[this->current_entry].name), maxname);
0x13d4d:	mov rcx, qword ptr [rax + 0x38]     
0x13d51:	mov rax, qword ptr [rbp - 0x6d8]    
0x13d58:	mov eax, dword ptr [rax + 0x28]     
0x13d5b:	movsxd rdx, eax                     
0x13d5e:	mov rax, rdx                        
0x13d61:	shl rax, 2                          
0x13d65:	add rax, rdx                        
0x13d68:	shl rax, 4                          
0x13d6c:	add rax, rcx                        
0x13d6f:	mov rax, qword ptr [rax]            
0x13d72:	mov rdi, rax                        
0x13d75:	call 0x4960                         
0x13d7a:	cmp qword ptr [rbp - 0x6b8], rax    
0x13d81:	jb 0x13db9                          
0x13d83:	mov rax, qword ptr [rbp - 0x6d8]    #	len = |m|in(strlen(this->dir_entry[this->current_entry].name), maxname);
0x13d8a:	mov rcx, qword ptr [rax + 0x38]     
0x13d8e:	mov rax, qword ptr [rbp - 0x6d8]    
0x13d95:	mov eax, dword ptr [rax + 0x28]     
0x13d98:	movsxd rdx, eax                     
0x13d9b:	mov rax, rdx                        
0x13d9e:	shl rax, 2                          
0x13da2:	add rax, rdx                        
0x13da5:	shl rax, 4                          
0x13da9:	add rax, rcx                        
0x13dac:	mov rax, qword ptr [rax]            
0x13daf:	mov rdi, rax                        
0x13db2:	call 0x4960                         
0x13db7:	jmp 0x13dc0                         
0x13db9:	mov rax, qword ptr [rbp - 0x6b8]    #	len = |m|in(strlen(this->dir_entry[this->current_entry].name), maxname);
0x13dc0:	mov qword ptr [rbp - 0x6b0], rax    #	len |=| min(strlen(this->dir_entry[this->current_entry].name), maxname);
0x13dc7:	mov rax, qword ptr [rbp - 0x6d8]    #	memcpy(str, this|-|>dir_entry[this->current_entry].name, len);
0x13dce:	mov rcx, qword ptr [rax + 0x38]     
0x13dd2:	mov rax, qword ptr [rbp - 0x6d8]    #	memcpy(str, this->dir_entry[this|-|>current_entry].name, len);
0x13dd9:	mov eax, dword ptr [rax + 0x28]     
0x13ddc:	movsxd rdx, eax                     
0x13ddf:	mov rax, rdx                        #	memcpy(str, this->dir_entry|[|this->current_entry].name, len);
0x13de2:	shl rax, 2                          
0x13de6:	add rax, rdx                        
0x13de9:	shl rax, 4                          
0x13ded:	add rax, rcx                        
0x13df0:	mov rcx, qword ptr [rax]            #	memcpy(str, this->dir_entry[this->current_entry]|.|name, len);
0x13df3:	mov rdx, qword ptr [rbp - 0x6b0]    #	|m|emcpy(str, this->dir_entry[this->current_entry].name, len);
0x13dfa:	lea rax, [rbp - 0x410]              
0x13e01:	mov rsi, rcx                        
0x13e04:	mov rdi, rax                        
0x13e07:	call 0x4b70                         
0x13e0c:	mov rax, qword ptr [rbp - 0x6b8]    #	|m|emset(str + len, ' ', maxname - len);
0x13e13:	sub rax, qword ptr [rbp - 0x6b0]    
0x13e1a:	lea rcx, [rbp - 0x410]              
0x13e21:	mov rdx, qword ptr [rbp - 0x6b0]    
0x13e28:	add rcx, rdx                        
0x13e2b:	mov rdx, rax                        
0x13e2e:	mov esi, 0x20                       
0x13e33:	mov rdi, rcx                        
0x13e36:	call 0x4a10                         
0x13e3b:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this|-|>dir_entry[this->current_entry].type == DIR_ENTRY)
0x13e42:	mov rcx, qword ptr [rax + 0x38]     
0x13e46:	mov rax, qword ptr [rbp - 0x6d8]    #	if (this->dir_entry[this|-|>current_entry].type == DIR_ENTRY)
0x13e4d:	mov eax, dword ptr [rax + 0x28]     
0x13e50:	movsxd rdx, eax                     
0x13e53:	mov rax, rdx                        #	if (this->dir_entry|[|this->current_entry].type == DIR_ENTRY)
0x13e56:	shl rax, 2                          
0x13e5a:	add rax, rdx                        
0x13e5d:	shl rax, 4                          
0x13e61:	add rax, rcx                        
0x13e64:	movzx eax, byte ptr [rax + 0x48]    #	if (this->dir_entry[this->current_entry]|.|type == DIR_ENTRY)
0x13e68:	test al, al                         #	if |(|this->dir_entry[this->current_entry].type == DIR_ENTRY)
0x13e6a:	jne 0x13ef7                         
0x13e70:	mov rax, qword ptr [rbp - 0x6d8]    #		    (strcmp(this|-|>dir_entry[this->current_entry].name, "..") ==
0x13e77:	mov rcx, qword ptr [rax + 0x38]     
0x13e7b:	mov rax, qword ptr [rbp - 0x6d8]    #		    (strcmp(this->dir_entry[this|-|>current_entry].name, "..") ==
0x13e82:	mov eax, dword ptr [rax + 0x28]     
0x13e85:	movsxd rdx, eax                     
0x13e88:	mov rax, rdx                        #		    (strcmp(this->dir_entry|[|this->current_entry].name, "..") ==
0x13e8b:	shl rax, 2                          
0x13e8f:	add rax, rdx                        
0x13e92:	shl rax, 4                          
0x13e96:	add rax, rcx                        
0x13e99:	mov rax, qword ptr [rax]            #		    (strcmp(this->dir_entry[this->current_entry]|.|name, "..") ==
0x13e9c:	lea rdx, [rip + 0x1473b]            #		    (|s|trcmp(this->dir_entry[this->current_entry].name, "..") ==
0x13ea3:	mov rsi, rdx                        
0x13ea6:	mov rdi, rax                        
0x13ea9:	call 0x4af0                         
0x13eae:	test eax, eax                       #	    |s|printf(str + maxname, " %10s %10s",
0x13eb0:	jne 0x13ebb                         
0x13eb2:	lea rax, [rip + 0x14759]            #	    |s|printf(str + maxname, " %10s %10s",
0x13eb9:	jmp 0x13ec2                         
0x13ebb:	lea rax, [rip + 0x14758]            #	    |s|printf(str + maxname, " %10s %10s",
0x13ec2:	lea rcx, [rbp - 0x410]              #	    |s|printf(str + maxname, " %10s %10s",
0x13ec9:	mov rdx, qword ptr [rbp - 0x6b8]    
0x13ed0:	lea rdi, [rcx + rdx]                
0x13ed4:	lea rdx, [rbp - 0x6a0]              
0x13edb:	mov rcx, rdx                        
0x13ede:	mov rdx, rax                        
0x13ee1:	lea rax, [rip + 0x1473a]            
0x13ee8:	mov rsi, rax                        
0x13eeb:	mov eax, 0                          
0x13ef0:	call 0x4dd0                         
0x13ef5:	jmp 0x13f57                         
0x13ef7:	mov rax, qword ptr [rbp - 0x6d8]    #		    (long)this|-|>dir_entry[this->current_entry].size,
0x13efe:	mov rcx, qword ptr [rax + 0x38]     
0x13f02:	mov rax, qword ptr [rbp - 0x6d8]    #		    (long)this->dir_entry[this|-|>current_entry].size,
0x13f09:	mov eax, dword ptr [rax + 0x28]     
0x13f0c:	movsxd rdx, eax                     
0x13f0f:	mov rax, rdx                        #		    (long)this->dir_entry|[|this->current_entry].size,
0x13f12:	shl rax, 2                          
0x13f16:	add rax, rdx                        
0x13f19:	shl rax, 4                          
0x13f1d:	add rax, rcx                        
0x13f20:	mov rax, qword ptr [rax + 8]        #		    (long)this->dir_entry[this->current_entry]|.|size,
0x13f24:	lea rcx, [rbp - 0x410]              #	    |s|printf(str + maxname, " %10ld %10s",
0x13f2b:	mov rdx, qword ptr [rbp - 0x6b8]    
0x13f32:	lea rdi, [rcx + rdx]                
0x13f36:	lea rdx, [rbp - 0x6a0]              
0x13f3d:	mov rcx, rdx                        
0x13f40:	mov rdx, rax                        
0x13f43:	lea rax, [rip + 0x146e3]            
0x13f4a:	mov rsi, rax                        
0x13f4d:	mov eax, 0                          
0x13f52:	call 0x4dd0                         
0x13f57:	mov eax, dword ptr [rip + 0x1c567]  #	|t|ty_brightness(PanelFileInfoBrightness);
0x13f5d:	mov edi, eax                        
0x13f5f:	call 0xbf36                         
0x13f64:	mov eax, dword ptr [rip + 0x1c556]  #	|t|ty_foreground(PanelFileInfo);
0x13f6a:	mov edi, eax                        
0x13f6c:	call 0xbee3                         
0x13f71:	lea rax, [rbp - 0x410]              #    memcpy(this->temp, str, len = |s|trlen(str));
0x13f78:	mov rdi, rax                        
0x13f7b:	call 0x4960                         
0x13f80:	mov qword ptr [rbp - 0x6b0], rax    
0x13f87:	mov rax, qword ptr [rbp - 0x6d8]    #    memcpy(this|-|>temp, str, len = strlen(str));
0x13f8e:	mov rax, qword ptr [rax + 0x20]     
0x13f92:	mov rdx, qword ptr [rbp - 0x6b0]    #    |m|emcpy(this->temp, str, len = strlen(str));
0x13f99:	lea rcx, [rbp - 0x410]              
0x13fa0:	mov rsi, rcx                        
0x13fa3:	mov rdi, rax                        
0x13fa6:	call 0x4b70                         
0x13fab:	mov rax, qword ptr [rbp - 0x6b0]    #    if( (len|+|2) < this->columns)
0x13fb2:	lea rdx, [rax + 2]                  
0x13fb6:	mov rax, qword ptr [rbp - 0x6d8]    #    if( (len+2) < this|-|>columns)
0x13fbd:	mov eax, dword ptr [rax + 0x64]     
0x13fc0:	cdqe                                
0x13fc2:	cmp rdx, rax                        #    if|(| (len+2) < this->columns)
0x13fc5:	jae 0x14002                         
0x13fc7:	mov rax, qword ptr [rbp - 0x6d8]    #	memset(this->temp + len, ' ', this|-|>columns - 2 - len);
0x13fce:	mov eax, dword ptr [rax + 0x64]     
0x13fd1:	sub eax, 2                          #	memset(this->temp + len, ' ', this->columns |-| 2 - len);
0x13fd4:	cdqe                                
0x13fd6:	sub rax, qword ptr [rbp - 0x6b0]    #	|m|emset(this->temp + len, ' ', this->columns - 2 - len);
0x13fdd:	mov rdx, qword ptr [rbp - 0x6d8]    #	memset(this|-|>temp + len, ' ', this->columns - 2 - len);
0x13fe4:	mov rcx, qword ptr [rdx + 0x20]     
0x13fe8:	mov rdx, qword ptr [rbp - 0x6b0]    #	memset(this->temp |+| len, ' ', this->columns - 2 - len);
0x13fef:	add rcx, rdx                        
0x13ff2:	mov rdx, rax                        #	|m|emset(this->temp + len, ' ', this->columns - 2 - len);
0x13ff5:	mov esi, 0x20                       
0x13ffa:	mov rdi, rcx                        
0x13ffd:	call 0x4a10                         
0x14002:	mov rax, qword ptr [rbp - 0x6d8]    #    |t|oprintable(this->temp, len);
0x14009:	mov rax, qword ptr [rax + 0x20]     
0x1400d:	mov rdx, qword ptr [rbp - 0x6b0]    
0x14014:	mov rsi, rdx                        
0x14017:	mov rdi, rax                        
0x1401a:	call 0x1e5b1                        
0x1401f:	mov eax, dword ptr [rip + 0x1c45b]  #    |t|ty_background(PanelFrame);
0x14025:	mov edi, eax                        
0x14027:	call 0xbf0b                         
0x1402c:	mov rax, qword ptr [rbp - 0x6d8]    #    window_goto(this->window, this|-|>lines - 1, 2);
0x14033:	mov eax, dword ptr [rax + 0x60]     
0x14036:	lea ecx, [rax - 1]                  #    |w|indow_goto(this->window, this->lines - 1, 2);
0x14039:	mov rax, qword ptr [rbp - 0x6d8]    
0x14040:	mov rax, qword ptr [rax + 8]        
0x14044:	mov edx, 2                          
0x14049:	mov esi, ecx                        
0x1404b:	mov rdi, rax                        
0x1404e:	call 0xdc1e                         
0x14053:	mov rax, qword ptr [rbp - 0x6d8]    #    window_puts(this->window, this->temp, this|-|>columns - 4);
0x1405a:	mov eax, dword ptr [rax + 0x64]     
0x1405d:	lea edx, [rax - 4]                  #    |w|indow_puts(this->window, this->temp, this->columns - 4);
0x14060:	mov rax, qword ptr [rbp - 0x6d8]    
0x14067:	mov rcx, qword ptr [rax + 0x20]     
0x1406b:	mov rax, qword ptr [rbp - 0x6d8]    
0x14072:	mov rax, qword ptr [rax + 8]        
0x14076:	mov rsi, rcx                        
0x14079:	mov rdi, rax                        
0x1407c:	call 0xdb1a                         
0x14081:	lea rax, [rbp - 0x6c9]              #    |t|ty_restore(&status);
0x14088:	mov rdi, rax                        
0x1408b:	call 0xc067                         
0x14090:	jmp 0x14093                         
0x14092:	nop                                 #	|r|eturn;
0x14093:	mov rax, qword ptr [rbp - 8]        #|}|
0x14097:	sub rax, qword ptr fs:[0x28]        
0x140a0:	je 0x140a7                          
0x140a2:	call 0x4980                         
0x140a7:	leave                               
0x140a8:	ret                                 
0x140a9:	endbr64                             #|{|
0x140ad:	push rbp                            
0x140ae:	mov rbp, rsp                        
0x140b1:	sub rsp, 0x2e0                      
0x140b8:	mov qword ptr [rbp - 0x2c8], rdi    
0x140bf:	mov dword ptr [rbp - 0x2cc], esi    
0x140c5:	mov dword ptr [rbp - 0x2d0], edx    
0x140cb:	mov dword ptr [rbp - 0x2d4], ecx    
0x140d1:	mov rax, qword ptr fs:[0x28]        #|{|
0x140da:	mov qword ptr [rbp - 8], rax        
0x140de:	xor eax, eax                        
0x140e0:	cmp dword ptr [rbp - 0x2d0], 5      #    |s|witch (display_mode)
0x140e7:	ja 0x143c2                          
0x140ed:	mov eax, dword ptr [rbp - 0x2d0]    
0x140f3:	lea rdx, [rax*4]                    
0x140fb:	lea rax, [rip + 0x14d06]            
0x14102:	mov eax, dword ptr [rdx + rax]      
0x14105:	cdqe                                
0x14107:	lea rdx, [rip + 0x14cfa]            
0x1410e:	add rax, rdx                        
0x14111:	jmp rax                             
0x14114:	mov rax, qword ptr [rbp - 0x2c8]    #		   this|-|>dir_entry[entry].owner, 7);
0x1411b:	mov rcx, qword ptr [rax + 0x38]     
0x1411f:	mov eax, dword ptr [rbp - 0x2cc]    #		   this->dir_entry|[|entry].owner, 7);
0x14125:	movsxd rdx, eax                     
0x14128:	mov rax, rdx                        
0x1412b:	shl rax, 2                          
0x1412f:	add rax, rdx                        
0x14132:	shl rax, 4                          
0x14136:	add rax, rcx                        
0x14139:	mov rax, qword ptr [rax + 0x28]     #		   this->dir_entry[entry]|.|owner, 7);
0x1413d:	mov rdx, qword ptr [rbp - 0x2c8]    #	    memcpy(this|-|>temp + this->columns - 2 - offset,
0x14144:	mov rsi, qword ptr [rdx + 0x20]     
0x14148:	mov rdx, qword ptr [rbp - 0x2c8]    #	    memcpy(this->temp + this|-|>columns - 2 - offset,
0x1414f:	mov edx, dword ptr [rdx + 0x64]     
0x14152:	movsxd rdx, edx                     
0x14155:	mov ecx, dword ptr [rbp - 0x2d4]    #	    memcpy(this->temp + this->columns - 2 |-| offset,
0x1415b:	movsxd rcx, ecx                     
0x1415e:	sub rdx, rcx                        
0x14161:	sub rdx, 2                          
0x14165:	lea rcx, [rsi + rdx]                
0x14169:	mov edx, 7                          #	    |m|emcpy(this->temp + this->columns - 2 - offset,
0x1416e:	mov rsi, rax                        
0x14171:	mov rdi, rcx                        
0x14174:	call 0x4b70                         
0x14179:	mov rax, qword ptr [rbp - 0x2c8]    #		   this|-|>dir_entry[entry].group, 7);
0x14180:	mov rcx, qword ptr [rax + 0x38]     
0x14184:	mov eax, dword ptr [rbp - 0x2cc]    #		   this->dir_entry|[|entry].group, 7);
0x1418a:	movsxd rdx, eax                     
0x1418d:	mov rax, rdx                        
0x14190:	shl rax, 2                          
0x14194:	add rax, rdx                        
0x14197:	shl rax, 4                          
0x1419b:	add rax, rcx                        
0x1419e:	mov rax, qword ptr [rax + 0x30]     #		   this->dir_entry[entry]|.|group, 7);
0x141a2:	mov rdx, qword ptr [rbp - 0x2c8]    #	    memcpy(this|-|>temp + this->columns - 2 - offset + 8,
0x141a9:	mov rsi, qword ptr [rdx + 0x20]     
0x141ad:	mov rdx, qword ptr [rbp - 0x2c8]    #	    memcpy(this->temp + this|-|>columns - 2 - offset + 8,
0x141b4:	mov edx, dword ptr [rdx + 0x64]     
0x141b7:	movsxd rdx, edx                     
0x141ba:	mov ecx, dword ptr [rbp - 0x2d4]    #	    memcpy(this->temp + this->columns - 2 |-| offset + 8,
0x141c0:	movsxd rcx, ecx                     
0x141c3:	sub rdx, rcx                        
0x141c6:	add rdx, 6                          #	    memcpy(this->temp + this->columns - 2 - offset |+| 8,
0x141ca:	lea rcx, [rsi + rdx]                
0x141ce:	mov edx, 7                          #	    |m|emcpy(this->temp + this->columns - 2 - offset + 8,
0x141d3:	mov rsi, rax                        
0x141d6:	mov rdi, rcx                        
0x141d9:	call 0x4b70                         
0x141de:	jmp 0x143d4                         #	    |b|reak;
0x141e3:	mov rax, qword ptr [rbp - 0x2c8]    #		   this|-|>dir_entry[entry].date, 15);
0x141ea:	mov rcx, qword ptr [rax + 0x38]     
0x141ee:	mov eax, dword ptr [rbp - 0x2cc]    #		   this->dir_entry|[|entry].date, 15);
0x141f4:	movsxd rdx, eax                     
0x141f7:	mov rax, rdx                        
0x141fa:	shl rax, 2                          
0x141fe:	add rax, rdx                        
0x14201:	shl rax, 4                          
0x14205:	add rax, rcx                        
0x14208:	lea rcx, [rax + 0x38]               #		   this->dir_entry[entry]|.|date, 15);
0x1420c:	mov rax, qword ptr [rbp - 0x2c8]    #	    memcpy(this|-|>temp + this->columns - 2 - offset,
0x14213:	mov rsi, qword ptr [rax + 0x20]     
0x14217:	mov rax, qword ptr [rbp - 0x2c8]    #	    memcpy(this->temp + this|-|>columns - 2 - offset,
0x1421e:	mov eax, dword ptr [rax + 0x64]     
0x14221:	cdqe                                
0x14223:	mov edx, dword ptr [rbp - 0x2d4]    #	    memcpy(this->temp + this->columns - 2 |-| offset,
0x14229:	movsxd rdx, edx                     
0x1422c:	sub rax, rdx                        
0x1422f:	sub rax, 2                          
0x14233:	add rax, rsi                        
0x14236:	mov edx, 0xf                        #	    |m|emcpy(this->temp + this->columns - 2 - offset,
0x1423b:	mov rsi, rcx                        
0x1423e:	mov rdi, rax                        
0x14241:	call 0x4b70                         
0x14246:	jmp 0x143d4                         #	    |b|reak;
0x1424b:	mov rax, qword ptr [rbp - 0x2c8]    #	    sz=panel_beautify_number(hbuf,this|-|>dir_entry[entry].size,0);
0x14252:	mov rcx, qword ptr [rax + 0x38]     
0x14256:	mov eax, dword ptr [rbp - 0x2cc]    #	    sz=panel_beautify_number(hbuf,this->dir_entry|[|entry].size,0);
0x1425c:	movsxd rdx, eax                     
0x1425f:	mov rax, rdx                        
0x14262:	shl rax, 2                          
0x14266:	add rax, rdx                        
0x14269:	shl rax, 4                          
0x1426d:	add rax, rcx                        
0x14270:	mov rcx, qword ptr [rax + 8]        #	    sz=|p|anel_beautify_number(hbuf,this->dir_entry[entry].size,0);
0x14274:	lea rax, [rbp - 0x2a0]              
0x1427b:	mov edx, 0                          
0x14280:	mov rsi, rcx                        
0x14283:	mov rdi, rax                        
0x14286:	mov eax, 0                          
0x1428b:	call 0x134b5                        
0x14290:	mov qword ptr [rbp - 0x2a8], rax    
0x14297:	mov rax, qword ptr [rbp - 0x2a8]    #	    szlen=|m|in(strlen(sz),10);
0x1429e:	mov rdi, rax                        
0x142a1:	call 0x4960                         
0x142a6:	cmp rax, 0xa                        #	    szlen|=|min(strlen(sz),10);
0x142aa:	ja 0x142bd                          
0x142ac:	mov rax, qword ptr [rbp - 0x2a8]    #	    szlen=|m|in(strlen(sz),10);
0x142b3:	mov rdi, rax                        
0x142b6:	call 0x4960                         
0x142bb:	jmp 0x142c2                         
0x142bd:	mov eax, 0xa                        #	    szlen|=|min(strlen(sz),10);
0x142c2:	mov dword ptr [rbp - 0x2b4], eax    #	    szlen|=|min(strlen(sz),10);
0x142c8:	mov rax, qword ptr [rbp - 0x2c8]    #	    ptr=this|-|>temp + this->columns - 2 - offset;
0x142cf:	mov rcx, qword ptr [rax + 0x20]     
0x142d3:	mov rax, qword ptr [rbp - 0x2c8]    #	    ptr=this->temp + this|-|>columns - 2 - offset;
0x142da:	mov eax, dword ptr [rax + 0x64]     
0x142dd:	cdqe                                
0x142df:	mov edx, dword ptr [rbp - 0x2d4]    #	    ptr=this->temp + this->columns - 2 |-| offset;
0x142e5:	movsxd rdx, edx                     
0x142e8:	sub rax, rdx                        
0x142eb:	sub rax, 2                          
0x142ef:	add rax, rcx                        #	    ptr|=|this->temp + this->columns - 2 - offset;
0x142f2:	mov qword ptr [rbp - 0x2b0], rax    
0x142f9:	cmp dword ptr [rbp - 0x2b4], 9      #	    if|(|szlen < 10)
0x14300:	jg 0x14338                          
0x14302:	mov eax, 0xa                        #		memset(ptr,' ',10|-|szlen);
0x14307:	sub eax, dword ptr [rbp - 0x2b4]    
0x1430d:	movsxd rdx, eax                     #		|m|emset(ptr,' ',10-szlen);
0x14310:	mov rax, qword ptr [rbp - 0x2b0]    
0x14317:	mov esi, 0x20                       
0x1431c:	mov rdi, rax                        
0x1431f:	call 0x4a10                         
0x14324:	mov eax, 0xa                        #		ptr += (10|-|szlen);
0x14329:	sub eax, dword ptr [rbp - 0x2b4]    
0x1432f:	cdqe                                
0x14331:	add qword ptr [rbp - 0x2b0], rax    #		ptr |+|= (10-szlen);
0x14338:	mov eax, dword ptr [rbp - 0x2b4]    #	    |m|emcpy(ptr, sz, szlen);
0x1433e:	movsxd rdx, eax                     
0x14341:	mov rcx, qword ptr [rbp - 0x2a8]    
0x14348:	mov rax, qword ptr [rbp - 0x2b0]    
0x1434f:	mov rsi, rcx                        
0x14352:	mov rdi, rax                        
0x14355:	call 0x4b70                         
0x1435a:	jmp 0x143d4                         #	    |b|reak;
0x1435c:	lea rdx, [rbp - 0x2a0]              #	    |p|anel_mode2string(this, entry, temp_rights);
0x14363:	mov ecx, dword ptr [rbp - 0x2cc]    
0x14369:	mov rax, qword ptr [rbp - 0x2c8]    
0x14370:	mov esi, ecx                        
0x14372:	mov rdi, rax                        
0x14375:	mov eax, 0                          
0x1437a:	call 0x13766                        
0x1437f:	mov rax, qword ptr [rbp - 0x2c8]    #	    memcpy(this|-|>temp + this->columns - 2 - offset, temp_rights, 10);
0x14386:	mov rcx, qword ptr [rax + 0x20]     
0x1438a:	mov rax, qword ptr [rbp - 0x2c8]    #	    memcpy(this->temp + this|-|>columns - 2 - offset, temp_rights, 10);
0x14391:	mov eax, dword ptr [rax + 0x64]     
0x14394:	cdqe                                
0x14396:	mov edx, dword ptr [rbp - 0x2d4]    #	    memcpy(this->temp + this->columns - 2 |-| offset, temp_rights, 10);
0x1439c:	movsxd rdx, edx                     
0x1439f:	sub rax, rdx                        
0x143a2:	sub rax, 2                          
0x143a6:	add rcx, rax                        
0x143a9:	lea rax, [rbp - 0x2a0]              #	    |m|emcpy(this->temp + this->columns - 2 - offset, temp_rights, 10);
0x143b0:	mov edx, 0xa                        
0x143b5:	mov rsi, rax                        
0x143b8:	mov rdi, rcx                        
0x143bb:	call 0x4b70                         
0x143c0:	jmp 0x143d4                         #	    |b|reak;
0x143c2:	lea rax, [rip + 0x14270]            #	    |f|atal("invalid mode");
0x143c9:	mov rdi, rax                        
0x143cc:	call 0x672c                         
0x143d1:	jmp 0x143d4                         #|}|
0x143d3:	nop                                 #	    |b|reak;
0x143d4:	nop                                 #|}|
0x143d5:	mov rax, qword ptr [rbp - 8]        
0x143d9:	sub rax, qword ptr fs:[0x28]        
0x143e2:	je 0x143e9                          
0x143e4:	call 0x4980                         
0x143e9:	leave                               
0x143ea:	ret                                 
0x143eb:	endbr64                             #|{|
0x143ef:	push rbp                            
0x143f0:	mov rbp, rsp                        
0x143f3:	mov qword ptr [rbp - 8], rdi        
0x143f7:	mov rax, qword ptr [rbp - 8]        #    if ((this|-|>columns < 40) ||
0x143fb:	mov eax, dword ptr [rax + 0x64]     
0x143fe:	cmp eax, 0x27                       #    if |(|(this->columns < 40) ||
0x14401:	jle 0x1441e                         
0x14403:	mov rax, qword ptr [rbp - 8]        #	((this|-|>columns < 20 + 16 + 16 + 11 + 11) &&
0x14407:	mov eax, dword ptr [rax + 0x64]     
0x1440a:	cmp eax, 0x49                       #    if ((this->columns < 40) ||||
0x1440d:	jg 0x14425                          
0x1440f:	mov rax, qword ptr [rbp - 8]        #	 (this|-|>display_mode == ENABLE_ALL)))
0x14413:	mov eax, dword ptr [rax + 0x80]     
0x14419:	cmp eax, 5                          #	((this->columns < 20 + 16 + 16 + 11 + 11) |&|&
0x1441c:	jne 0x14425                         
0x1441e:	mov eax, 4                          #	return |1| + 1 + 1 + 1;
0x14423:	jmp 0x14443                         
0x14425:	mov rax, qword ptr [rbp - 8]        #	return reserved_characters[this|-|>display_mode];
0x14429:	mov eax, dword ptr [rax + 0x80]     
0x1442f:	cdqe                                #	return reserved_characters|[|this->display_mode];
0x14431:	lea rdx, [rax*4]                    
0x14439:	lea rax, [rip + 0x1c120]            
0x14440:	mov eax, dword ptr [rdx + rax]      
0x14443:	pop rbp                             #|}|
0x14444:	ret                                 
0x14445:	endbr64                             #|{|
0x14449:	push rbp                            
0x1444a:	mov rbp, rsp                        
0x1444d:	sub rsp, 0x40                       
0x14451:	mov qword ptr [rbp - 0x38], rdi     
0x14455:	mov dword ptr [rbp - 0x3c], esi     
0x14458:	mov byte ptr [rbp - 0x2d], 0        #    char |c| = '\0';
0x1445c:	mov rax, qword ptr [rbp - 0x38]     #    if (!this|-|>visible)
0x14460:	movzx eax, byte ptr [rax + 0x6d]    
0x14464:	test al, al                         #    if |(|!this->visible)
0x14466:	je 0x14ca1                          
0x1446c:	mov rax, qword ptr [rbp - 0x38]     #    memset(this->temp, ' ', this|-|>columns);
0x14470:	mov eax, dword ptr [rax + 0x64]     
0x14473:	movsxd rdx, eax                     #    |m|emset(this->temp, ' ', this->columns);
0x14476:	mov rax, qword ptr [rbp - 0x38]     #    memset(this|-|>temp, ' ', this->columns);
0x1447a:	mov rax, qword ptr [rax + 0x20]     
0x1447e:	mov esi, 0x20                       #    |m|emset(this->temp, ' ', this->columns);
0x14483:	mov rdi, rax                        
0x14486:	call 0x4a10                         
0x1448b:	mov rax, qword ptr [rbp - 0x38]     #    reserved = |p|anel_get_reserved_characters(this);
0x1448f:	mov rdi, rax                        
0x14492:	mov eax, 0                          
0x14497:	call 0x143eb                        
0x1449c:	cdqe                                #    reserved |=| panel_get_reserved_characters(this);
0x1449e:	mov qword ptr [rbp - 0x20], rax     
0x144a2:	cmp dword ptr [rbp - 0x3c], 0       #    if |(|(entry > 0) || rootdir())
0x144a6:	jg 0x144d2                          
0x144a8:	mov rax, qword ptr [rbp - 0x38]     #    if ((entry > 0) || |r|ootdir())
0x144ac:	mov rax, qword ptr [rax + 0x18]     
0x144b0:	movzx eax, byte ptr [rax]           
0x144b3:	cmp al, 0x2f                        #    if ((entry > 0) |||| rootdir())
0x144b5:	jne 0x14566                         
0x144bb:	mov rax, qword ptr [rbp - 0x38]     #    if ((entry > 0) || |r|ootdir())
0x144bf:	mov rax, qword ptr [rax + 0x18]     
0x144c3:	add rax, 1                          
0x144c7:	movzx eax, byte ptr [rax]           
0x144ca:	test al, al                         
0x144cc:	jne 0x14566                         
0x144d2:	mov rax, qword ptr [rbp - 0x38]     #	switch (this|-|>dir_entry[entry].type)
0x144d6:	mov rcx, qword ptr [rax + 0x38]     
0x144da:	mov eax, dword ptr [rbp - 0x3c]     #	switch (this->dir_entry|[|entry].type)
0x144dd:	movsxd rdx, eax                     
0x144e0:	mov rax, rdx                        
0x144e3:	shl rax, 2                          
0x144e7:	add rax, rdx                        
0x144ea:	shl rax, 4                          
0x144ee:	add rax, rcx                        
0x144f1:	movzx eax, byte ptr [rax + 0x48]    #	switch (this->dir_entry[entry]|.|type)
0x144f5:	movsx eax, al                       
0x144f8:	cmp eax, 4                          #	|s|witch (this->dir_entry[entry].type)
0x144fb:	ja 0x14566                          
0x144fd:	mov eax, eax                        
0x144ff:	lea rdx, [rax*4]                    
0x14507:	lea rax, [rip + 0x14912]            
0x1450e:	mov eax, dword ptr [rdx + rax]      
0x14511:	cdqe                                
0x14513:	lea rdx, [rip + 0x14906]            
0x1451a:	add rax, rdx                        
0x1451d:	jmp rax                             
0x14520:	mov rax, qword ptr [rbp - 0x38]     #		if (this|-|>dir_entry[entry].executable)
0x14524:	mov rcx, qword ptr [rax + 0x38]     
0x14528:	mov eax, dword ptr [rbp - 0x3c]     #		if (this->dir_entry|[|entry].executable)
0x1452b:	movsxd rdx, eax                     
0x1452e:	mov rax, rdx                        
0x14531:	shl rax, 2                          
0x14535:	add rax, rdx                        
0x14538:	shl rax, 4                          
0x1453c:	add rax, rcx                        
0x1453f:	movzx eax, byte ptr [rax + 0x4a]    #		if (this->dir_entry[entry]|.|executable)
0x14543:	test al, al                         #		if |(|this->dir_entry[entry].executable)
0x14545:	je 0x14565                          
0x14547:	mov byte ptr [rbp - 0x2d], 0x2a     #		    c |=| '*';
0x1454b:	jmp 0x14565                         #		|b|reak;
0x1454d:	mov byte ptr [rbp - 0x2d], 0x2f     #	    case DIR_ENTRY:     c |=| '/'; break;
0x14551:	jmp 0x14566                         #	    case DIR_ENTRY:     c = '/'; |b|reak;
0x14553:	mov byte ptr [rbp - 0x2d], 0x40     #	    case SYMLINK_ENTRY: c |=| '@'; break;
0x14557:	jmp 0x14566                         #	    case SYMLINK_ENTRY: c = '@'; |b|reak;
0x14559:	mov byte ptr [rbp - 0x2d], 0x7c     #	    case FIFO_ENTRY:    c |=| '|'; break;
0x1455d:	jmp 0x14566                         #	    case FIFO_ENTRY:    c = '|'; |b|reak;
0x1455f:	mov byte ptr [rbp - 0x2d], 0x3d     #	    case SOCKET_ENTRY:  c |=| '='; break;
0x14563:	jmp 0x14566                         #	    case SOCKET_ENTRY:  c = '='; |b|reak;
0x14565:	nop                                 #		|b|reak;
0x14566:	cmp byte ptr [rbp - 0x2d], 0        #    if |(|c != '\0')
0x1456a:	je 0x14571                          
0x1456c:	add qword ptr [rbp - 0x20], 1       #	reserved|+|+;
0x14571:	mov rax, qword ptr [rbp - 0x38]     #    entry_length = strlen(this|-|>dir_entry[entry].name);
0x14575:	mov rcx, qword ptr [rax + 0x38]     
0x14579:	mov eax, dword ptr [rbp - 0x3c]     #    entry_length = strlen(this->dir_entry|[|entry].name);
0x1457c:	movsxd rdx, eax                     
0x1457f:	mov rax, rdx                        
0x14582:	shl rax, 2                          
0x14586:	add rax, rdx                        
0x14589:	shl rax, 4                          
0x1458d:	add rax, rcx                        
0x14590:	mov rax, qword ptr [rax]            #    entry_length = strlen(this->dir_entry[entry]|.|name);
0x14593:	mov rdi, rax                        #    entry_length = |s|trlen(this->dir_entry[entry].name);
0x14596:	call 0x4960                         
0x1459b:	mov qword ptr [rbp - 0x10], rax     
0x1459f:	mov rax, qword ptr [rbp - 0x38]     #    if (this|-|>columns - reserved >= entry_length)
0x145a3:	mov eax, dword ptr [rax + 0x64]     
0x145a6:	cdqe                                
0x145a8:	sub rax, qword ptr [rbp - 0x20]     #    if (this->columns |-| reserved >= entry_length)
0x145ac:	cmp qword ptr [rbp - 0x10], rax     #    if |(|this->columns - reserved >= entry_length)
0x145b0:	ja 0x145bc                          
0x145b2:	mov qword ptr [rbp - 0x18], 0       #	offset |=| 0;
0x145ba:	jmp 0x1460c                         
0x145bc:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>columns - reserved + this->horizontal_offset > entry_length)
0x145c0:	mov eax, dword ptr [rax + 0x64]     
0x145c3:	cdqe                                
0x145c5:	sub rax, qword ptr [rbp - 0x20]     #	if (this->columns |-| reserved + this->horizontal_offset > entry_length)
0x145c9:	mov rdx, rax                        
0x145cc:	mov rax, qword ptr [rbp - 0x38]     #	if (this->columns - reserved + this|-|>horizontal_offset > entry_length)
0x145d0:	mov eax, dword ptr [rax + 0x74]     
0x145d3:	cdqe                                
0x145d5:	add rax, rdx                        #	if (this->columns - reserved |+| this->horizontal_offset > entry_length)
0x145d8:	cmp qword ptr [rbp - 0x10], rax     #	if |(|this->columns - reserved + this->horizontal_offset > entry_length)
0x145dc:	jae 0x145ff                         
0x145de:	mov rax, qword ptr [rbp - 0x38]     #	    offset = entry_length - (this|-|>columns - reserved);
0x145e2:	mov eax, dword ptr [rax + 0x64]     
0x145e5:	movsxd rdx, eax                     
0x145e8:	mov rax, qword ptr [rbp - 0x20]     #	    offset = entry_length |-| (this->columns - reserved);
0x145ec:	sub rax, rdx                        
0x145ef:	mov rcx, rax                        
0x145f2:	mov rax, qword ptr [rbp - 0x10]     #	    offset |=| entry_length - (this->columns - reserved);
0x145f6:	add rax, rcx                        
0x145f9:	mov qword ptr [rbp - 0x18], rax     
0x145fd:	jmp 0x1460c                         
0x145ff:	mov rax, qword ptr [rbp - 0x38]     #	    offset = this|-|>horizontal_offset;
0x14603:	mov eax, dword ptr [rax + 0x74]     
0x14606:	cdqe                                #	    offset |=| this->horizontal_offset;
0x14608:	mov qword ptr [rbp - 0x18], rax     
0x1460c:	mov rax, qword ptr [rbp - 0x10]     #    len = |m|in(entry_length - offset, this->columns - reserved);
0x14610:	sub rax, qword ptr [rbp - 0x18]     
0x14614:	mov rdx, rax                        
0x14617:	mov rax, qword ptr [rbp - 0x38]     
0x1461b:	mov eax, dword ptr [rax + 0x64]     
0x1461e:	cdqe                                
0x14620:	sub rax, qword ptr [rbp - 0x20]     
0x14624:	cmp rdx, rax                        #    len |=| min(entry_length - offset, this->columns - reserved);
0x14627:	cmovbe rax, rdx                     
0x1462b:	mov qword ptr [rbp - 8], rax        
0x1462f:	mov rax, qword ptr [rbp - 0x38]     #    memcpy(&this->temp[1], this|-|>dir_entry[entry].name + offset, len);
0x14633:	mov rcx, qword ptr [rax + 0x38]     
0x14637:	mov eax, dword ptr [rbp - 0x3c]     #    memcpy(&this->temp[1], this->dir_entry|[|entry].name + offset, len);
0x1463a:	movsxd rdx, eax                     
0x1463d:	mov rax, rdx                        
0x14640:	shl rax, 2                          
0x14644:	add rax, rdx                        
0x14647:	shl rax, 4                          
0x1464b:	add rax, rcx                        
0x1464e:	mov rdx, qword ptr [rax]            #    memcpy(&this->temp[1], this->dir_entry[entry]|.|name + offset, len);
0x14651:	mov rax, qword ptr [rbp - 0x18]     #    memcpy(&this->temp[1], this->dir_entry[entry].name |+| offset, len);
0x14655:	lea rsi, [rdx + rax]                
0x14659:	mov rax, qword ptr [rbp - 0x38]     #    memcpy(&this|-|>temp[1], this->dir_entry[entry].name + offset, len);
0x1465d:	mov rax, qword ptr [rax + 0x20]     
0x14661:	lea rcx, [rax + 1]                  #    memcpy(|&|this->temp[1], this->dir_entry[entry].name + offset, len);
0x14665:	mov rax, qword ptr [rbp - 8]        #    |m|emcpy(&this->temp[1], this->dir_entry[entry].name + offset, len);
0x14669:	mov rdx, rax                        
0x1466c:	mov rdi, rcx                        
0x1466f:	call 0x4b70                         
0x14674:	mov rax, qword ptr [rbp - 0x38]     #    toprintable(&this|-|>temp[1], len);
0x14678:	mov rax, qword ptr [rax + 0x20]     
0x1467c:	lea rdx, [rax + 1]                  #    |t|oprintable(&this->temp[1], len);
0x14680:	mov rax, qword ptr [rbp - 8]        
0x14684:	mov rsi, rax                        
0x14687:	mov rdi, rdx                        
0x1468a:	call 0x1e5b1                        
0x1468f:	cmp byte ptr [rbp - 0x2d], 0        #    if |(|c != '\0')
0x14693:	je 0x146ae                          
0x14695:	mov rax, qword ptr [rbp - 0x38]     #	this|-|>temp[len + 1] = c;
0x14699:	mov rdx, qword ptr [rax + 0x20]     
0x1469d:	mov rax, qword ptr [rbp - 8]        #	this->temp|[|len + 1] = c;
0x146a1:	add rax, 1                          
0x146a5:	add rdx, rax                        
0x146a8:	movzx eax, byte ptr [rbp - 0x2d]    #	this->temp[len + 1] |=| c;
0x146ac:	mov byte ptr [rdx], al              
0x146ae:	mov rax, qword ptr [rbp - 0x38]     #    if (this|-|>columns >= 40)
0x146b2:	mov eax, dword ptr [rax + 0x64]     
0x146b5:	cmp eax, 0x27                       #    if |(|this->columns >= 40)
0x146b8:	jle 0x147f7                         
0x146be:	mov rax, qword ptr [rbp - 0x38]     #	switch (this|-|>display_mode)
0x146c2:	mov eax, dword ptr [rax + 0x80]     
0x146c8:	cmp eax, 5                          #	|s|witch (this->display_mode)
0x146cb:	je 0x14758                          
0x146d1:	cmp eax, 5                          
0x146d4:	jg 0x147e2                          
0x146da:	cmp eax, 4                          
0x146dd:	je 0x147f3                          
0x146e3:	cmp eax, 4                          
0x146e6:	jg 0x147e2                          
0x146ec:	cmp eax, 1                          
0x146ef:	jg 0x146fa                          
0x146f1:	test eax, eax                       
0x146f3:	jns 0x14708                         
0x146f5:	jmp 0x147e2                         
0x146fa:	sub eax, 2                          
0x146fd:	cmp eax, 1                          
0x14700:	ja 0x147e2                          
0x14706:	jmp 0x14730                         
0x14708:	mov rax, qword ptr [rbp - 0x38]     #		|p|anel_build_entry_field(this, entry, this->display_mode, 16);
0x1470c:	mov edx, dword ptr [rax + 0x80]     
0x14712:	mov esi, dword ptr [rbp - 0x3c]     
0x14715:	mov rax, qword ptr [rbp - 0x38]     
0x14719:	mov ecx, 0x10                       
0x1471e:	mov rdi, rax                        
0x14721:	mov eax, 0                          
0x14726:	call 0x140a9                        
0x1472b:	jmp 0x147f7                         #		|b|reak;
0x14730:	mov rax, qword ptr [rbp - 0x38]     #		|p|anel_build_entry_field(this, entry, this->display_mode, 11);
0x14734:	mov edx, dword ptr [rax + 0x80]     
0x1473a:	mov esi, dword ptr [rbp - 0x3c]     
0x1473d:	mov rax, qword ptr [rbp - 0x38]     
0x14741:	mov ecx, 0xb                        
0x14746:	mov rdi, rax                        
0x14749:	mov eax, 0                          
0x1474e:	call 0x140a9                        
0x14753:	jmp 0x147f7                         #		|b|reak;
0x14758:	mov rax, qword ptr [rbp - 0x38]     #		if (this|-|>columns < 20 + 16 + 16 + 11 + 11)
0x1475c:	mov eax, dword ptr [rax + 0x64]     
0x1475f:	cmp eax, 0x49                       #		if |(|this->columns < 20 + 16 + 16 + 11 + 11)
0x14762:	jle 0x147f6                         
0x14768:	mov esi, dword ptr [rbp - 0x3c]     #		|p|anel_build_entry_field(this, entry, ENABLE_OWNER_GROUP,
0x1476b:	mov rax, qword ptr [rbp - 0x38]     
0x1476f:	mov ecx, 0x36                       
0x14774:	mov edx, 0                          
0x14779:	mov rdi, rax                        
0x1477c:	mov eax, 0                          
0x14781:	call 0x140a9                        
0x14786:	mov esi, dword ptr [rbp - 0x3c]     #		|p|anel_build_entry_field(this, entry, ENABLE_DATE_TIME,
0x14789:	mov rax, qword ptr [rbp - 0x38]     
0x1478d:	mov ecx, 0x26                       
0x14792:	mov edx, 1                          
0x14797:	mov rdi, rax                        
0x1479a:	mov eax, 0                          
0x1479f:	call 0x140a9                        
0x147a4:	mov esi, dword ptr [rbp - 0x3c]     #		|p|anel_build_entry_field(this, entry, ENABLE_SIZE,
0x147a7:	mov rax, qword ptr [rbp - 0x38]     
0x147ab:	mov ecx, 0x16                       
0x147b0:	mov edx, 2                          
0x147b5:	mov rdi, rax                        
0x147b8:	mov eax, 0                          
0x147bd:	call 0x140a9                        
0x147c2:	mov esi, dword ptr [rbp - 0x3c]     #		|p|anel_build_entry_field(this, entry, ENABLE_MODE,
0x147c5:	mov rax, qword ptr [rbp - 0x38]     
0x147c9:	mov ecx, 0xb                        
0x147ce:	mov edx, 3                          
0x147d3:	mov rdi, rax                        
0x147d6:	mov eax, 0                          
0x147db:	call 0x140a9                        
0x147e0:	jmp 0x147f7                         #		|b|reak;
0x147e2:	lea rax, [rip + 0x13e50]            #		|f|atal("invalid mode");
0x147e9:	mov rdi, rax                        
0x147ec:	call 0x672c                         
0x147f1:	jmp 0x147f7                         
0x147f3:	nop                                 #		|b|reak;
0x147f4:	jmp 0x147f7                         
0x147f6:	nop                                 #		    |b|reak;
0x147f7:	mov rax, qword ptr [rbp - 0x38]     #    if (this|-|>dir_entry[entry].selected)
0x147fb:	mov rcx, qword ptr [rax + 0x38]     
0x147ff:	mov eax, dword ptr [rbp - 0x3c]     #    if (this->dir_entry|[|entry].selected)
0x14802:	movsxd rdx, eax                     
0x14805:	mov rax, rdx                        
0x14808:	shl rax, 2                          
0x1480c:	add rax, rdx                        
0x1480f:	shl rax, 4                          
0x14813:	add rax, rcx                        
0x14816:	movzx eax, byte ptr [rax + 0x49]    #    if (this->dir_entry[entry]|.|selected)
0x1481a:	test al, al                         #    if |(|this->dir_entry[entry].selected)
0x1481c:	je 0x14839                          
0x1481e:	mov rax, qword ptr [rbp - 0x38]     #	this|-|>temp[this->columns - 3] = '*';
0x14822:	mov rdx, qword ptr [rax + 0x20]     
0x14826:	mov rax, qword ptr [rbp - 0x38]     #	this->temp[this|-|>columns - 3] = '*';
0x1482a:	mov eax, dword ptr [rax + 0x64]     
0x1482d:	cdqe                                
0x1482f:	sub rax, 3                          #	this->temp|[|this->columns - 3] = '*';
0x14833:	add rax, rdx                        
0x14836:	mov byte ptr [rax], 0x2a            #	this->temp[this->columns - 3] |=| '*';
0x14839:	mov rax, qword ptr [rbp - 0x38]     #    if (entry == this|-|>current_entry)
0x1483d:	mov eax, dword ptr [rax + 0x28]     
0x14840:	cmp dword ptr [rbp - 0x3c], eax     #    if |(|entry == this->current_entry)
0x14843:	jne 0x14867                         
0x14845:	mov rax, qword ptr [rbp - 0x38]     #	this->temp[0] = this|-|>focus ?
0x14849:	movzx eax, byte ptr [rax + 0x6c]    
0x1484d:	test al, al                         #	this->temp[0] |=| this->focus ?
0x1484f:	je 0x14858                          
0x14851:	mov edx, 0x3e                       #	this->temp[0] |=| this->focus ?
0x14856:	jmp 0x1485d                         
0x14858:	mov edx, 0x2a                       #	this->temp[0] |=| this->focus ?
0x1485d:	mov rax, qword ptr [rbp - 0x38]     #	this|-|>temp[0] = this->focus ?
0x14861:	mov rax, qword ptr [rax + 0x20]     
0x14865:	mov byte ptr [rax], dl              #	this->temp[0] |=| this->focus ?
0x14867:	mov eax, dword ptr [rip + 0x1a7af]  #    if (|T|ypeSensitivity && this->dir_entry[entry].type != DIR_ENTRY &&
0x1486d:	test eax, eax                       #    if |(|TypeSensitivity && this->dir_entry[entry].type != DIR_ENTRY &&
0x1486f:	je 0x14b6e                          
0x14875:	mov rax, qword ptr [rbp - 0x38]     #    if (TypeSensitivity && this|-|>dir_entry[entry].type != DIR_ENTRY &&
0x14879:	mov rcx, qword ptr [rax + 0x38]     
0x1487d:	mov eax, dword ptr [rbp - 0x3c]     #    if (TypeSensitivity && this->dir_entry|[|entry].type != DIR_ENTRY &&
0x14880:	movsxd rdx, eax                     
0x14883:	mov rax, rdx                        
0x14886:	shl rax, 2                          
0x1488a:	add rax, rdx                        
0x1488d:	shl rax, 4                          
0x14891:	add rax, rcx                        
0x14894:	movzx eax, byte ptr [rax + 0x48]    #    if (TypeSensitivity && this->dir_entry[entry]|.|type != DIR_ENTRY &&
0x14898:	test al, al                         #    if (TypeSensitivity |&|& this->dir_entry[entry].type != DIR_ENTRY &&
0x1489a:	je 0x14b6e                          
0x148a0:	mov rax, qword ptr [rbp - 0x38]     #	!this|-|>dir_entry[entry].selected)
0x148a4:	mov rcx, qword ptr [rax + 0x38]     
0x148a8:	mov eax, dword ptr [rbp - 0x3c]     #	!this->dir_entry|[|entry].selected)
0x148ab:	movsxd rdx, eax                     
0x148ae:	mov rax, rdx                        
0x148b1:	shl rax, 2                          
0x148b5:	add rax, rdx                        
0x148b8:	shl rax, 4                          
0x148bc:	add rax, rcx                        
0x148bf:	movzx eax, byte ptr [rax + 0x49]    #	!this->dir_entry[entry]|.|selected)
0x148c3:	test al, al                         #    if (TypeSensitivity && this->dir_entry[entry].type != DIR_ENTRY |&|&
0x148c5:	jne 0x14b6e                         
0x148cb:	mov rax, qword ptr [rbp - 0x38]     #	window_goto(this->window, entry - this|-|>first_on_screen + 1, 1);
0x148cf:	mov edx, dword ptr [rax + 0x2c]     
0x148d2:	mov eax, dword ptr [rbp - 0x3c]     #	window_goto(this->window, entry |-| this->first_on_screen + 1, 1);
0x148d5:	sub eax, edx                        
0x148d7:	lea ecx, [rax + 1]                  #	|w|indow_goto(this->window, entry - this->first_on_screen + 1, 1);
0x148da:	mov rax, qword ptr [rbp - 0x38]     
0x148de:	mov rax, qword ptr [rax + 8]        
0x148e2:	mov edx, 1                          
0x148e7:	mov esi, ecx                        
0x148e9:	mov rdi, rax                        
0x148ec:	call 0xdc1e                         
0x148f1:	mov rax, qword ptr [rbp - 0x38]     #	brightness = this|-|>dir_entry[entry].selected ?
0x148f5:	mov rcx, qword ptr [rax + 0x38]     
0x148f9:	mov eax, dword ptr [rbp - 0x3c]     #	brightness = this->dir_entry|[|entry].selected ?
0x148fc:	movsxd rdx, eax                     
0x148ff:	mov rax, rdx                        
0x14902:	shl rax, 2                          
0x14906:	add rax, rdx                        
0x14909:	shl rax, 4                          
0x1490d:	add rax, rcx                        
0x14910:	movzx eax, byte ptr [rax + 0x49]    #	brightness = this->dir_entry[entry]|.|selected ?
0x14914:	test al, al                         #			 PanelSelectedFileBrightness |:|
0x14916:	je 0x14920                          
0x14918:	mov eax, dword ptr [rip + 0x1bb7a]  #			 PanelSelectedFileBrightness |:|
0x1491e:	jmp 0x14926                         
0x14920:	mov eax, dword ptr [rip + 0x1bb7a]  #			 PanelSelectedFileBrightness |:|
0x14926:	mov dword ptr [rbp - 0x24], eax     #	brightness |=| this->dir_entry[entry].selected ?
0x14929:	mov rax, qword ptr [rbp - 0x38]     #	foreground = this|-|>dir_entry[entry].selected ?
0x1492d:	mov rcx, qword ptr [rax + 0x38]     
0x14931:	mov eax, dword ptr [rbp - 0x3c]     #	foreground = this->dir_entry|[|entry].selected ?
0x14934:	movsxd rdx, eax                     
0x14937:	mov rax, rdx                        
0x1493a:	shl rax, 2                          
0x1493e:	add rax, rdx                        
0x14941:	shl rax, 4                          
0x14945:	add rax, rcx                        
0x14948:	movzx eax, byte ptr [rax + 0x49]    #	foreground = this->dir_entry[entry]|.|selected ?
0x1494c:	test al, al                         #			 PanelSelectedFile |:|
0x1494e:	je 0x14958                          
0x14950:	mov eax, dword ptr [rip + 0x1bb3e]  #			 PanelSelectedFile |:|
0x14956:	jmp 0x1495e                         
0x14958:	mov eax, dword ptr [rip + 0x1bb3e]  #			 PanelSelectedFile |:|
0x1495e:	mov dword ptr [rbp - 0x2c], eax     #	foreground |=| this->dir_entry[entry].selected ?
0x14961:	mov rax, qword ptr [rbp - 0x38]     #	if (entry == this|-|>current_entry && this->focus == ON)
0x14965:	mov eax, dword ptr [rax + 0x28]     
0x14968:	cmp dword ptr [rbp - 0x3c], eax     #	if |(|entry == this->current_entry && this->focus == ON)
0x1496b:	jne 0x14984                         
0x1496d:	mov rax, qword ptr [rbp - 0x38]     #	if (entry == this->current_entry && this|-|>focus == ON)
0x14971:	movzx eax, byte ptr [rax + 0x6c]    
0x14975:	cmp al, 1                           #	if (entry == this->current_entry |&|& this->focus == ON)
0x14977:	jne 0x14984                         
0x14979:	mov eax, dword ptr [rip + 0x1bb2d]  #	    background |=| PanelCurrentFile;
0x1497f:	mov dword ptr [rbp - 0x28], eax     
0x14982:	jmp 0x1498d                         
0x14984:	mov eax, dword ptr [rip + 0x1bafa]  #	    background |=| PanelBackground;
0x1498a:	mov dword ptr [rbp - 0x28], eax     
0x1498d:	mov edx, dword ptr [rbp - 0x28]     #	|t|ty_colors(brightness, foreground, background);
0x14990:	mov ecx, dword ptr [rbp - 0x2c]     
0x14993:	mov eax, dword ptr [rbp - 0x24]     
0x14996:	mov esi, ecx                        
0x14998:	mov edi, eax                        
0x1499a:	call 0xbf89                         
0x1499f:	mov rax, qword ptr [rbp - 0x38]     #	window_putc(this->window, *this|-|>temp);
0x149a3:	mov rax, qword ptr [rax + 0x20]     
0x149a7:	movzx eax, byte ptr [rax]           #	window_putc(this->window, |*|this->temp);
0x149aa:	movsx edx, al                       #	|w|indow_putc(this->window, *this->temp);
0x149ad:	mov rax, qword ptr [rbp - 0x38]     
0x149b1:	mov rax, qword ptr [rax + 8]        
0x149b5:	mov esi, edx                        
0x149b7:	mov rdi, rax                        
0x149ba:	call 0xdbbc                         
0x149bf:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>dir_entry[entry].fti_loaded == 0)
0x149c3:	mov rcx, qword ptr [rax + 0x38]     
0x149c7:	mov eax, dword ptr [rbp - 0x3c]     #	if (this->dir_entry|[|entry].fti_loaded == 0)
0x149ca:	movsxd rdx, eax                     
0x149cd:	mov rax, rdx                        
0x149d0:	shl rax, 2                          
0x149d4:	add rax, rdx                        
0x149d7:	shl rax, 4                          
0x149db:	add rax, rcx                        
0x149de:	movzx eax, byte ptr [rax + 0x4b]    #	if (this->dir_entry[entry]|.|fti_loaded == 0)
0x149e2:	test al, al                         #	if |(|this->dir_entry[entry].fti_loaded == 0)
0x149e4:	jne 0x149fc                         
0x149e6:	mov edx, dword ptr [rbp - 0x3c]     #	    |p|anel_load_fti(this, entry);
0x149e9:	mov rax, qword ptr [rbp - 0x38]     
0x149ed:	mov esi, edx                        
0x149ef:	mov rdi, rax                        
0x149f2:	mov eax, 0                          
0x149f7:	call 0x11770                        
0x149fc:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>dir_entry[entry].brightness != 2)
0x14a00:	mov rcx, qword ptr [rax + 0x38]     
0x14a04:	mov eax, dword ptr [rbp - 0x3c]     #	if (this->dir_entry|[|entry].brightness != 2)
0x14a07:	movsxd rdx, eax                     
0x14a0a:	mov rax, rdx                        
0x14a0d:	shl rax, 2                          
0x14a11:	add rax, rdx                        
0x14a14:	shl rax, 4                          
0x14a18:	add rax, rcx                        
0x14a1b:	movzx eax, byte ptr [rax + 0x4e]    #	if (this->dir_entry[entry]|.|brightness != 2)
0x14a1f:	cmp al, 2                           #	if |(|this->dir_entry[entry].brightness != 2)
0x14a21:	je 0x14af1                          
0x14a27:	mov rax, qword ptr [rbp - 0x38]     #	    if (entry == this|-|>current_entry && this->focus == ON)
0x14a2b:	mov eax, dword ptr [rax + 0x28]     
0x14a2e:	cmp dword ptr [rbp - 0x3c], eax     #	    if |(|entry == this->current_entry && this->focus == ON)
0x14a31:	jne 0x14a76                         
0x14a33:	mov rax, qword ptr [rbp - 0x38]     #	    if (entry == this->current_entry && this|-|>focus == ON)
0x14a37:	movzx eax, byte ptr [rax + 0x6c]    
0x14a3b:	cmp al, 1                           #	    if (entry == this->current_entry |&|& this->focus == ON)
0x14a3d:	jne 0x14a76                         
0x14a3f:	mov rax, qword ptr [rbp - 0x38]     #			   this|-|>dir_entry[entry].foreground,
0x14a43:	mov rcx, qword ptr [rax + 0x38]     
0x14a47:	mov eax, dword ptr [rbp - 0x3c]     #			   this->dir_entry|[|entry].foreground,
0x14a4a:	movsxd rdx, eax                     
0x14a4d:	mov rax, rdx                        
0x14a50:	shl rax, 2                          
0x14a54:	add rax, rdx                        
0x14a57:	shl rax, 4                          
0x14a5b:	add rax, rcx                        
0x14a5e:	movzx eax, byte ptr [rax + 0x4c]    #			   this->dir_entry[entry]|.|foreground,
0x14a62:	movsx ecx, al                       #		|t|ty_colors(brightness,
0x14a65:	mov edx, dword ptr [rbp - 0x28]     
0x14a68:	mov eax, dword ptr [rbp - 0x24]     
0x14a6b:	mov esi, ecx                        
0x14a6d:	mov edi, eax                        
0x14a6f:	call 0xbf89                         
0x14a74:	jmp 0x14af1                         
0x14a76:	mov rax, qword ptr [rbp - 0x38]     #			   this|-|>dir_entry[entry].background);
0x14a7a:	mov rcx, qword ptr [rax + 0x38]     
0x14a7e:	mov eax, dword ptr [rbp - 0x3c]     #			   this->dir_entry|[|entry].background);
0x14a81:	movsxd rdx, eax                     
0x14a84:	mov rax, rdx                        
0x14a87:	shl rax, 2                          
0x14a8b:	add rax, rdx                        
0x14a8e:	shl rax, 4                          
0x14a92:	add rax, rcx                        
0x14a95:	movzx eax, byte ptr [rax + 0x4d]    #			   this->dir_entry[entry]|.|background);
0x14a99:	movsx edx, al                       #		|t|ty_colors(this->dir_entry[entry].brightness,
0x14a9c:	mov rax, qword ptr [rbp - 0x38]     #			   this|-|>dir_entry[entry].foreground,
0x14aa0:	mov rsi, qword ptr [rax + 0x38]     
0x14aa4:	mov eax, dword ptr [rbp - 0x3c]     #			   this->dir_entry|[|entry].foreground,
0x14aa7:	movsxd rcx, eax                     
0x14aaa:	mov rax, rcx                        
0x14aad:	shl rax, 2                          
0x14ab1:	add rax, rcx                        
0x14ab4:	shl rax, 4                          
0x14ab8:	add rax, rsi                        
0x14abb:	movzx eax, byte ptr [rax + 0x4c]    #			   this->dir_entry[entry]|.|foreground,
0x14abf:	movsx ecx, al                       #		|t|ty_colors(this->dir_entry[entry].brightness,
0x14ac2:	mov rax, qword ptr [rbp - 0x38]     #		tty_colors(this|-|>dir_entry[entry].brightness,
0x14ac6:	mov rdi, qword ptr [rax + 0x38]     
0x14aca:	mov eax, dword ptr [rbp - 0x3c]     #		tty_colors(this->dir_entry|[|entry].brightness,
0x14acd:	movsxd rsi, eax                     
0x14ad0:	mov rax, rsi                        
0x14ad3:	shl rax, 2                          
0x14ad7:	add rax, rsi                        
0x14ada:	shl rax, 4                          
0x14ade:	add rax, rdi                        
0x14ae1:	movzx eax, byte ptr [rax + 0x4e]    #		tty_colors(this->dir_entry[entry]|.|brightness,
0x14ae5:	movsx eax, al                       #		|t|ty_colors(this->dir_entry[entry].brightness,
0x14ae8:	mov esi, ecx                        
0x14aea:	mov edi, eax                        
0x14aec:	call 0xbf89                         
0x14af1:	mov rax, qword ptr [rbp - 8]        #	window_puts(this->window, this->temp + 1, len |+| 1);
0x14af5:	add eax, 1                          
0x14af8:	mov edx, eax                        #	|w|indow_puts(this->window, this->temp + 1, len + 1);
0x14afa:	mov rax, qword ptr [rbp - 0x38]     #	window_puts(this->window, this|-|>temp + 1, len + 1);
0x14afe:	mov rax, qword ptr [rax + 0x20]     
0x14b02:	lea rcx, [rax + 1]                  #	|w|indow_puts(this->window, this->temp + 1, len + 1);
0x14b06:	mov rax, qword ptr [rbp - 0x38]     
0x14b0a:	mov rax, qword ptr [rax + 8]        
0x14b0e:	mov rsi, rcx                        
0x14b11:	mov rdi, rax                        
0x14b14:	call 0xdb1a                         
0x14b19:	mov rax, qword ptr [rbp - 0x38]     #		    this|-|>columns - len - 2 - 2);
0x14b1d:	mov eax, dword ptr [rax + 0x64]     
0x14b20:	mov edx, eax                        
0x14b22:	mov rax, qword ptr [rbp - 8]        #		    this->columns |-| len - 2 - 2);
0x14b26:	mov ecx, eax                        
0x14b28:	mov eax, edx                        
0x14b2a:	sub eax, ecx                        
0x14b2c:	sub eax, 4                          #		    this->columns - len - 2 |-| 2);
0x14b2f:	mov edx, eax                        #	|w|indow_puts(this->window,
0x14b31:	mov rax, qword ptr [rbp - 0x38]     #		    this|-|>temp + 1 + len + 1,
0x14b35:	mov rcx, qword ptr [rax + 0x20]     
0x14b39:	mov rax, qword ptr [rbp - 8]        #		    this->temp + 1 + len |+| 1,
0x14b3d:	add rax, 2                          
0x14b41:	add rcx, rax                        #	|w|indow_puts(this->window,
0x14b44:	mov rax, qword ptr [rbp - 0x38]     
0x14b48:	mov rax, qword ptr [rax + 8]        
0x14b4c:	mov rsi, rcx                        
0x14b4f:	mov rdi, rax                        
0x14b52:	call 0xdb1a                         
0x14b57:	mov edx, dword ptr [rbp - 0x28]     #	|t|ty_colors(brightness, foreground, background);
0x14b5a:	mov ecx, dword ptr [rbp - 0x2c]     
0x14b5d:	mov eax, dword ptr [rbp - 0x24]     
0x14b60:	mov esi, ecx                        
0x14b62:	mov edi, eax                        
0x14b64:	call 0xbf89                         
0x14b69:	jmp 0x14ca2                         
0x14b6e:	mov rax, qword ptr [rbp - 0x38]     #	if (entry == this|-|>current_entry && this->focus == ON)
0x14b72:	mov eax, dword ptr [rax + 0x28]     
0x14b75:	cmp dword ptr [rbp - 0x3c], eax     #	if |(|entry == this->current_entry && this->focus == ON)
0x14b78:	jne 0x14bc9                         
0x14b7a:	mov rax, qword ptr [rbp - 0x38]     #	if (entry == this->current_entry && this|-|>focus == ON)
0x14b7e:	movzx eax, byte ptr [rax + 0x6c]    
0x14b82:	cmp al, 1                           #	if (entry == this->current_entry |&|& this->focus == ON)
0x14b84:	jne 0x14bc9                         
0x14b86:	mov rax, qword ptr [rbp - 0x38]     #	    foreground = this|-|>dir_entry[entry].selected ?
0x14b8a:	mov rcx, qword ptr [rax + 0x38]     
0x14b8e:	mov eax, dword ptr [rbp - 0x3c]     #	    foreground = this->dir_entry|[|entry].selected ?
0x14b91:	movsxd rdx, eax                     
0x14b94:	mov rax, rdx                        
0x14b97:	shl rax, 2                          
0x14b9b:	add rax, rdx                        
0x14b9e:	shl rax, 4                          
0x14ba2:	add rax, rcx                        
0x14ba5:	movzx eax, byte ptr [rax + 0x49]    #	    foreground = this->dir_entry[entry]|.|selected ?
0x14ba9:	test al, al                         #			     PanelCurrentSelectedFile |:|
0x14bab:	je 0x14bb5                          
0x14bad:	mov eax, dword ptr [rip + 0x1b8f1]  #			     PanelCurrentSelectedFile |:|
0x14bb3:	jmp 0x14bbb                         
0x14bb5:	mov eax, dword ptr [rip + 0x1b8ed]  #			     PanelCurrentSelectedFile |:|
0x14bbb:	mov dword ptr [rbp - 0x2c], eax     #	    foreground |=| this->dir_entry[entry].selected ?
0x14bbe:	mov eax, dword ptr [rip + 0x1b8e8]  #	    background |=| PanelCurrentFile;
0x14bc4:	mov dword ptr [rbp - 0x28], eax     
0x14bc7:	jmp 0x14c0a                         
0x14bc9:	mov rax, qword ptr [rbp - 0x38]     #	    foreground = this|-|>dir_entry[entry].selected ?
0x14bcd:	mov rcx, qword ptr [rax + 0x38]     
0x14bd1:	mov eax, dword ptr [rbp - 0x3c]     #	    foreground = this->dir_entry|[|entry].selected ?
0x14bd4:	movsxd rdx, eax                     
0x14bd7:	mov rax, rdx                        
0x14bda:	shl rax, 2                          
0x14bde:	add rax, rdx                        
0x14be1:	shl rax, 4                          
0x14be5:	add rax, rcx                        
0x14be8:	movzx eax, byte ptr [rax + 0x49]    #	    foreground = this->dir_entry[entry]|.|selected ?
0x14bec:	test al, al                         #			     PanelSelectedFile |:|
0x14bee:	je 0x14bf8                          
0x14bf0:	mov eax, dword ptr [rip + 0x1b89e]  #			     PanelSelectedFile |:|
0x14bf6:	jmp 0x14bfe                         
0x14bf8:	mov eax, dword ptr [rip + 0x1b89e]  #			     PanelSelectedFile |:|
0x14bfe:	mov dword ptr [rbp - 0x2c], eax     #	    foreground |=| this->dir_entry[entry].selected ?
0x14c01:	mov eax, dword ptr [rip + 0x1b87d]  #	    background |=| PanelBackground;
0x14c07:	mov dword ptr [rbp - 0x28], eax     
0x14c0a:	mov rax, qword ptr [rbp - 0x38]     #	brightness = this|-|>dir_entry[entry].selected ?
0x14c0e:	mov rcx, qword ptr [rax + 0x38]     
0x14c12:	mov eax, dword ptr [rbp - 0x3c]     #	brightness = this->dir_entry|[|entry].selected ?
0x14c15:	movsxd rdx, eax                     
0x14c18:	mov rax, rdx                        
0x14c1b:	shl rax, 2                          
0x14c1f:	add rax, rdx                        
0x14c22:	shl rax, 4                          
0x14c26:	add rax, rcx                        
0x14c29:	movzx eax, byte ptr [rax + 0x49]    #	brightness = this->dir_entry[entry]|.|selected ?
0x14c2d:	test al, al                         #			 PanelSelectedFileBrightness |:|
0x14c2f:	je 0x14c39                          
0x14c31:	mov eax, dword ptr [rip + 0x1b861]  #			 PanelSelectedFileBrightness |:|
0x14c37:	jmp 0x14c3f                         
0x14c39:	mov eax, dword ptr [rip + 0x1b861]  #			 PanelSelectedFileBrightness |:|
0x14c3f:	mov dword ptr [rbp - 0x24], eax     #	brightness |=| this->dir_entry[entry].selected ?
0x14c42:	mov edx, dword ptr [rbp - 0x28]     #	|t|ty_colors(brightness, foreground, background);
0x14c45:	mov ecx, dword ptr [rbp - 0x2c]     
0x14c48:	mov eax, dword ptr [rbp - 0x24]     
0x14c4b:	mov esi, ecx                        
0x14c4d:	mov edi, eax                        
0x14c4f:	call 0xbf89                         
0x14c54:	mov rax, qword ptr [rbp - 0x38]     #	window_goto(this->window, entry - this|-|>first_on_screen + 1, 1);
0x14c58:	mov edx, dword ptr [rax + 0x2c]     
0x14c5b:	mov eax, dword ptr [rbp - 0x3c]     #	window_goto(this->window, entry |-| this->first_on_screen + 1, 1);
0x14c5e:	sub eax, edx                        
0x14c60:	lea ecx, [rax + 1]                  #	|w|indow_goto(this->window, entry - this->first_on_screen + 1, 1);
0x14c63:	mov rax, qword ptr [rbp - 0x38]     
0x14c67:	mov rax, qword ptr [rax + 8]        
0x14c6b:	mov edx, 1                          
0x14c70:	mov esi, ecx                        
0x14c72:	mov rdi, rax                        
0x14c75:	call 0xdc1e                         
0x14c7a:	mov rax, qword ptr [rbp - 0x38]     #	window_puts(this->window, this->temp, this|-|>columns - 2);
0x14c7e:	mov eax, dword ptr [rax + 0x64]     
0x14c81:	lea edx, [rax - 2]                  #	|w|indow_puts(this->window, this->temp, this->columns - 2);
0x14c84:	mov rax, qword ptr [rbp - 0x38]     
0x14c88:	mov rcx, qword ptr [rax + 0x20]     
0x14c8c:	mov rax, qword ptr [rbp - 0x38]     
0x14c90:	mov rax, qword ptr [rax + 8]        
0x14c94:	mov rsi, rcx                        
0x14c97:	mov rdi, rax                        
0x14c9a:	call 0xdb1a                         
0x14c9f:	jmp 0x14ca2                         
0x14ca1:	nop                                 #	|r|eturn;
0x14ca2:	leave                               #|}|
0x14ca3:	ret                                 
0x14ca4:	endbr64                             #|{|
0x14ca8:	push rbp                            
0x14ca9:	mov rbp, rsp                        
0x14cac:	sub rsp, 0x30                       
0x14cb0:	mov qword ptr [rbp - 0x28], rdi     
0x14cb4:	mov rax, qword ptr fs:[0x28]        #|{|
0x14cbd:	mov qword ptr [rbp - 8], rax        
0x14cc1:	xor eax, eax                        
0x14cc3:	mov rax, qword ptr [rbp - 0x28]     #    char *buf = xmalloc(this|-|>columns);
0x14cc7:	mov eax, dword ptr [rax + 0x64]     
0x14cca:	cdqe                                #    char *buf = |x|malloc(this->columns);
0x14ccc:	mov rdi, rax                        
0x14ccf:	call 0x24650                        
0x14cd4:	mov qword ptr [rbp - 0x10], rax     
0x14cd8:	mov rax, qword ptr [rbp - 0x28]     #    if (!this|-|>visible)
0x14cdc:	movzx eax, byte ptr [rax + 0x6d]    
0x14ce0:	test al, al                         #    if |(|!this->visible)
0x14ce2:	je 0x14e53                          
0x14ce8:	lea rax, [rbp - 0x15]               #    |t|ty_save(&status);
0x14cec:	mov rdi, rax                        
0x14cef:	call 0xc04b                         
0x14cf4:	mov edx, dword ptr [rip + 0x1b786]  #    |t|ty_colors(OFF, PanelFrame, PanelFrame);
0x14cfa:	mov eax, dword ptr [rip + 0x1b780]  
0x14d00:	mov esi, eax                        
0x14d02:	mov edi, 0                          
0x14d07:	call 0xbf89                         
0x14d0c:	mov dword ptr [rbp - 0x14], 1       #    for (line |=| 1; line < this->lines - 1; line++)
0x14d13:	jmp 0x14d48                         #    |f|or (line = 1; line < this->lines - 1; line++)
0x14d15:	mov rax, qword ptr [rbp - 0x28]     #	|w|indow_goto(this->window, line, 0);
0x14d19:	mov rax, qword ptr [rax + 8]        
0x14d1d:	mov ecx, dword ptr [rbp - 0x14]     
0x14d20:	mov edx, 0                          
0x14d25:	mov esi, ecx                        
0x14d27:	mov rdi, rax                        
0x14d2a:	call 0xdc1e                         
0x14d2f:	mov rax, qword ptr [rbp - 0x28]     #	|w|indow_putc(this->window, ' ');
0x14d33:	mov rax, qword ptr [rax + 8]        
0x14d37:	mov esi, 0x20                       
0x14d3c:	mov rdi, rax                        
0x14d3f:	call 0xdbbc                         
0x14d44:	add dword ptr [rbp - 0x14], 1       #    for (line = 1; line < this->lines - 1; line|+|+)
0x14d48:	mov rax, qword ptr [rbp - 0x28]     #    for (line = 1; line < this|-|>lines - 1; line++)
0x14d4c:	mov eax, dword ptr [rax + 0x60]     
0x14d4f:	sub eax, 1                          #    for (line = 1; line < this->lines |-| 1; line++)
0x14d52:	cmp dword ptr [rbp - 0x14], eax     #    for (line = 1; line |<| this->lines - 1; line++)
0x14d55:	jl 0x14d15                          
0x14d57:	mov dword ptr [rbp - 0x14], 1       #    for (line |=| 1; line < this->lines - 1; line++)
0x14d5e:	jmp 0x14d98                         #    |f|or (line = 1; line < this->lines - 1; line++)
0x14d60:	mov rax, qword ptr [rbp - 0x28]     #	window_goto(this->window, line, this|-|>columns - 1);
0x14d64:	mov eax, dword ptr [rax + 0x64]     
0x14d67:	lea edx, [rax - 1]                  #	|w|indow_goto(this->window, line, this->columns - 1);
0x14d6a:	mov rax, qword ptr [rbp - 0x28]     
0x14d6e:	mov rax, qword ptr [rax + 8]        
0x14d72:	mov ecx, dword ptr [rbp - 0x14]     
0x14d75:	mov esi, ecx                        
0x14d77:	mov rdi, rax                        
0x14d7a:	call 0xdc1e                         
0x14d7f:	mov rax, qword ptr [rbp - 0x28]     #	|w|indow_putc(this->window, ' ');
0x14d83:	mov rax, qword ptr [rax + 8]        
0x14d87:	mov esi, 0x20                       
0x14d8c:	mov rdi, rax                        
0x14d8f:	call 0xdbbc                         
0x14d94:	add dword ptr [rbp - 0x14], 1       #    for (line = 1; line < this->lines - 1; line|+|+)
0x14d98:	mov rax, qword ptr [rbp - 0x28]     #    for (line = 1; line < this|-|>lines - 1; line++)
0x14d9c:	mov eax, dword ptr [rax + 0x60]     
0x14d9f:	sub eax, 1                          #    for (line = 1; line < this->lines |-| 1; line++)
0x14da2:	cmp dword ptr [rbp - 0x14], eax     #    for (line = 1; line |<| this->lines - 1; line++)
0x14da5:	jl 0x14d60                          
0x14da7:	mov rax, qword ptr [rbp - 0x28]     #    memset(buf, ' ', this|-|>columns);
0x14dab:	mov eax, dword ptr [rax + 0x64]     
0x14dae:	movsxd rdx, eax                     #    |m|emset(buf, ' ', this->columns);
0x14db1:	mov rax, qword ptr [rbp - 0x10]     
0x14db5:	mov esi, 0x20                       
0x14dba:	mov rdi, rax                        
0x14dbd:	call 0x4a10                         
0x14dc2:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_goto(this->window, 0, 0);
0x14dc6:	mov rax, qword ptr [rax + 8]        
0x14dca:	mov edx, 0                          
0x14dcf:	mov esi, 0                          
0x14dd4:	mov rdi, rax                        
0x14dd7:	call 0xdc1e                         
0x14ddc:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_puts(this->window, buf, this->columns);
0x14de0:	mov edx, dword ptr [rax + 0x64]     
0x14de3:	mov rax, qword ptr [rbp - 0x28]     
0x14de7:	mov rax, qword ptr [rax + 8]        
0x14deb:	mov rcx, qword ptr [rbp - 0x10]     
0x14def:	mov rsi, rcx                        
0x14df2:	mov rdi, rax                        
0x14df5:	call 0xdb1a                         
0x14dfa:	mov rax, qword ptr [rbp - 0x28]     #    window_goto(this->window, this|-|>lines - 1, 0);
0x14dfe:	mov eax, dword ptr [rax + 0x60]     
0x14e01:	lea ecx, [rax - 1]                  #    |w|indow_goto(this->window, this->lines - 1, 0);
0x14e04:	mov rax, qword ptr [rbp - 0x28]     
0x14e08:	mov rax, qword ptr [rax + 8]        
0x14e0c:	mov edx, 0                          
0x14e11:	mov esi, ecx                        
0x14e13:	mov rdi, rax                        
0x14e16:	call 0xdc1e                         
0x14e1b:	mov rax, qword ptr [rbp - 0x28]     #    |w|indow_puts(this->window, buf, this->columns);
0x14e1f:	mov edx, dword ptr [rax + 0x64]     
0x14e22:	mov rax, qword ptr [rbp - 0x28]     
0x14e26:	mov rax, qword ptr [rax + 8]        
0x14e2a:	mov rcx, qword ptr [rbp - 0x10]     
0x14e2e:	mov rsi, rcx                        
0x14e31:	mov rdi, rax                        
0x14e34:	call 0xdb1a                         
0x14e39:	mov rax, qword ptr [rbp - 0x10]     #    |x|free(buf);
0x14e3d:	mov rdi, rax                        
0x14e40:	call 0x1eeae                        
0x14e45:	lea rax, [rbp - 0x15]               #    |t|ty_restore(&status);
0x14e49:	mov rdi, rax                        
0x14e4c:	call 0xc067                         
0x14e51:	jmp 0x14e54                         
0x14e53:	nop                                 #	|r|eturn;
0x14e54:	mov rax, qword ptr [rbp - 8]        #|}|
0x14e58:	sub rax, qword ptr fs:[0x28]        
0x14e61:	je 0x14e68                          
0x14e63:	call 0x4980                         
0x14e68:	leave                               
0x14e69:	ret                                 
0x14e6a:	endbr64                             #|{|
0x14e6e:	push rbp                            
0x14e6f:	mov rbp, rsp                        
0x14e72:	sub rsp, 0x10                       
0x14e76:	mov qword ptr [rbp - 8], rdi        
0x14e7a:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_frame(this);
0x14e7e:	mov rdi, rax                        
0x14e81:	mov eax, 0                          
0x14e86:	call 0x14ca4                        
0x14e8b:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_path(this);
0x14e8f:	mov rdi, rax                        
0x14e92:	mov eax, 0                          
0x14e97:	call 0x13382                        
0x14e9c:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_info(this);
0x14ea0:	mov rdi, rax                        
0x14ea3:	mov eax, 0                          
0x14ea8:	call 0x1395a                        
0x14ead:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_size(this);
0x14eb1:	mov rdi, rax                        
0x14eb4:	mov eax, 0                          
0x14eb9:	call 0x13506                        
0x14ebe:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_entries(this);
0x14ec2:	mov rdi, rax                        
0x14ec5:	mov eax, 0                          
0x14eca:	call 0x13223                        
0x14ecf:	nop                                 #|}|
0x14ed0:	leave                               
0x14ed1:	ret                                 
0x14ed2:	endbr64                             #|{|
0x14ed6:	push rbp                            
0x14ed7:	mov rbp, rsp                        
0x14eda:	sub rsp, 0x10                       
0x14ede:	mov qword ptr [rbp - 8], rdi        
0x14ee2:	mov dword ptr [rbp - 0xc], esi      
0x14ee5:	mov eax, dword ptr [rbp - 0xc]      #    this->focus |=| status;
0x14ee8:	mov edx, eax                        
0x14eea:	mov rax, qword ptr [rbp - 8]        
0x14eee:	mov byte ptr [rax + 0x6c], dl       
0x14ef1:	mov rax, qword ptr [rbp - 8]        #    |p|anel_update_entry(this, this->current_entry);
0x14ef5:	mov edx, dword ptr [rax + 0x28]     
0x14ef8:	mov rax, qword ptr [rbp - 8]        
0x14efc:	mov esi, edx                        
0x14efe:	mov rdi, rax                        
0x14f01:	call 0x14445                        
0x14f06:	mov rax, qword ptr [rbp - 8]        #    if (this|-|>focus)
0x14f0a:	movzx eax, byte ptr [rax + 0x6c]    
0x14f0e:	test al, al                         #    if |(|this->focus)
0x14f10:	je 0x14f44                          
0x14f12:	mov rax, qword ptr [rbp - 8]        #	if (chdir(this|-|>path) == -1)
0x14f16:	mov rax, qword ptr [rax + 0x18]     
0x14f1a:	mov rdi, rax                        #	if (|c|hdir(this->path) == -1)
0x14f1d:	call 0x4970                         
0x14f22:	cmp eax, -1                         #	if |(|chdir(this->path) == -1)
0x14f25:	jne 0x14f44                         
0x14f27:	mov rax, qword ptr [rbp - 8]        #	    |p|anel_recover(this);
0x14f2b:	mov rdi, rax                        
0x14f2e:	mov eax, 0                          
0x14f33:	call 0x116a7                        
0x14f38:	mov rax, qword ptr [rbp - 8]        #	    |p|anel_update(this);
0x14f3c:	mov rdi, rax                        
0x14f3f:	call 0x14e6a                        
0x14f44:	nop                                 #|}|
0x14f45:	leave                               
0x14f46:	ret                                 
0x14f47:	endbr64                             #|{|
0x14f4b:	push rbp                            
0x14f4c:	mov rbp, rsp                        
0x14f4f:	mov qword ptr [rbp - 0x18], rdi     
0x14f53:	mov dword ptr [rbp - 4], 0          #    for (entry |=| 0; entry < this->entries; entry++)
0x14f5a:	jmp 0x14fe5                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x14f5f:	mov rax, qword ptr [rbp - 0x18]     #	if (this|-|>dir_entry[entry].selected == 0 &&
0x14f63:	mov rcx, qword ptr [rax + 0x38]     
0x14f67:	mov eax, dword ptr [rbp - 4]        #	if (this->dir_entry|[|entry].selected == 0 &&
0x14f6a:	movsxd rdx, eax                     
0x14f6d:	mov rax, rdx                        
0x14f70:	shl rax, 2                          
0x14f74:	add rax, rdx                        
0x14f77:	shl rax, 4                          
0x14f7b:	add rax, rcx                        
0x14f7e:	movzx eax, byte ptr [rax + 0x49]    #	if (this->dir_entry[entry]|.|selected == 0 &&
0x14f82:	test al, al                         #	if |(|this->dir_entry[entry].selected == 0 &&
0x14f84:	jne 0x14fe1                         
0x14f86:	mov rax, qword ptr [rbp - 0x18]     #	    this|-|>dir_entry[entry].type != DIR_ENTRY)
0x14f8a:	mov rcx, qword ptr [rax + 0x38]     
0x14f8e:	mov eax, dword ptr [rbp - 4]        #	    this->dir_entry|[|entry].type != DIR_ENTRY)
0x14f91:	movsxd rdx, eax                     
0x14f94:	mov rax, rdx                        
0x14f97:	shl rax, 2                          
0x14f9b:	add rax, rdx                        
0x14f9e:	shl rax, 4                          
0x14fa2:	add rax, rcx                        
0x14fa5:	movzx eax, byte ptr [rax + 0x48]    #	    this->dir_entry[entry]|.|type != DIR_ENTRY)
0x14fa9:	test al, al                         #	if (this->dir_entry[entry].selected == 0 |&|&
0x14fab:	je 0x14fe1                          
0x14fad:	mov rax, qword ptr [rbp - 0x18]     #	    this|-|>dir_entry[entry].selected = 1;
0x14fb1:	mov rcx, qword ptr [rax + 0x38]     
0x14fb5:	mov eax, dword ptr [rbp - 4]        #	    this->dir_entry|[|entry].selected = 1;
0x14fb8:	movsxd rdx, eax                     
0x14fbb:	mov rax, rdx                        
0x14fbe:	shl rax, 2                          
0x14fc2:	add rax, rdx                        
0x14fc5:	shl rax, 4                          
0x14fc9:	add rax, rcx                        
0x14fcc:	mov byte ptr [rax + 0x49], 1        #	    this->dir_entry[entry].selected |=| 1;
0x14fd0:	mov rax, qword ptr [rbp - 0x18]     #	    this|-|>selected_entries++;
0x14fd4:	mov eax, dword ptr [rax + 0x70]     
0x14fd7:	lea edx, [rax + 1]                  #	    this->selected_entries|+|+;
0x14fda:	mov rax, qword ptr [rbp - 0x18]     
0x14fde:	mov dword ptr [rax + 0x70], edx     
0x14fe1:	add dword ptr [rbp - 4], 1          #    for (entry = 0; entry < this->entries; entry|+|+)
0x14fe5:	mov rax, qword ptr [rbp - 0x18]     #    for (entry = 0; entry < this|-|>entries; entry++)
0x14fe9:	mov eax, dword ptr [rax + 0x68]     
0x14fec:	cmp dword ptr [rbp - 4], eax        #    for (entry = 0; entry |<| this->entries; entry++)
0x14fef:	jl 0x14f5f                          
0x14ff5:	nop                                 #|}|
0x14ff6:	nop                                 
0x14ff7:	pop rbp                             
0x14ff8:	ret                                 
0x14ff9:	endbr64                             #|{|
0x14ffd:	push rbp                            
0x14ffe:	mov rbp, rsp                        
0x15001:	mov qword ptr [rbp - 0x18], rdi     
0x15005:	mov dword ptr [rbp - 4], 0          #    for (entry |=| 0; entry < this->entries; entry++)
0x1500c:	jmp 0x15035                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x1500e:	mov rax, qword ptr [rbp - 0x18]     #	this|-|>dir_entry[entry].selected = 0;
0x15012:	mov rcx, qword ptr [rax + 0x38]     
0x15016:	mov eax, dword ptr [rbp - 4]        #	this->dir_entry|[|entry].selected = 0;
0x15019:	movsxd rdx, eax                     
0x1501c:	mov rax, rdx                        
0x1501f:	shl rax, 2                          
0x15023:	add rax, rdx                        
0x15026:	shl rax, 4                          
0x1502a:	add rax, rcx                        
0x1502d:	mov byte ptr [rax + 0x49], 0        #	this->dir_entry[entry].selected |=| 0;
0x15031:	add dword ptr [rbp - 4], 1          #    for (entry = 0; entry < this->entries; entry|+|+)
0x15035:	mov rax, qword ptr [rbp - 0x18]     #    for (entry = 0; entry < this|-|>entries; entry++)
0x15039:	mov eax, dword ptr [rax + 0x68]     
0x1503c:	cmp dword ptr [rbp - 4], eax        #    for (entry = 0; entry |<| this->entries; entry++)
0x1503f:	jl 0x1500e                          
0x15041:	mov rax, qword ptr [rbp - 0x18]     #    this->selected_entries |=| 0;
0x15045:	mov dword ptr [rax + 0x70], 0       
0x1504c:	nop                                 #|}|
0x1504d:	pop rbp                             
0x1504e:	ret                                 
0x1504f:	endbr64                             #|{|
0x15053:	push rbp                            
0x15054:	mov rbp, rsp                        
0x15057:	mov qword ptr [rbp - 8], rdi        
0x1505b:	mov rax, qword ptr [rbp - 8]        #    return this|-|>path;
0x1505f:	mov rax, qword ptr [rax + 0x18]     
0x15063:	pop rbp                             #|}|
0x15064:	ret                                 
0x15065:	endbr64                             #|{|
0x15069:	push rbp                            
0x1506a:	mov rbp, rsp                        
0x1506d:	sub rsp, 0x10                       
0x15071:	mov eax, dword ptr [rip + 0x1ca49]  #    if (|u|ser_heart_attack)
0x15077:	test eax, eax                       #    if |(|user_heart_attack)
0x15079:	je 0x150ff                          
0x1507f:	mov dword ptr [rip + 0x1ca37], 0    #	user_heart_attack |=| 0;
0x15089:	mov eax, 0                          #	saved_il = |i|l_save();
0x1508e:	call 0xe205                         
0x15093:	mov qword ptr [rbp - 8], rax        
0x15097:	mov edx, 4                          #	key = |p|anel_1s_message("Abort current operation? ", "yn",
0x1509c:	lea rax, [rip + 0x135a3]            
0x150a3:	mov rsi, rax                        
0x150a6:	lea rax, [rip + 0x1359c]            
0x150ad:	mov rdi, rax                        
0x150b0:	call 0x5c09                         
0x150b5:	movsx eax, al                       #	key |=| panel_1s_message("Abort current operation? ", "yn",
0x150b8:	mov dword ptr [rbp - 0xc], eax      
0x150bb:	mov rax, qword ptr [rbp - 8]        #	|i|l_restore(saved_il);
0x150bf:	mov rdi, rax                        
0x150c2:	call 0xe319                         
0x150c7:	mov eax, 0                          #	|i|l_update();
0x150cc:	call 0xf8eb                         
0x150d1:	mov eax, 0                          #	|i|l_update_point();
0x150d6:	call 0xf768                         
0x150db:	mov eax, 0                          #	|t|ty_update();
0x150e0:	call 0xb4b7                         
0x150e5:	cmp dword ptr [rbp - 0xc], 0x6e     #	return (key == 'n' || key == 'N') ? 0 |:| 1;
0x150e9:	je 0x150f8                          
0x150eb:	cmp dword ptr [rbp - 0xc], 0x4e     #	return (key == 'n' || key == 'N') ? 0 |:| 1;
0x150ef:	je 0x150f8                          
0x150f1:	mov eax, 1                          #	return (key == 'n' || key == 'N') ? 0 |:| 1;
0x150f6:	jmp 0x15104                         
0x150f8:	mov eax, 0                          #	return (key == 'n' || key == 'N') ? 0 |:| 1;
0x150fd:	jmp 0x15104                         
0x150ff:	mov eax, 0                          #    return |0|;
0x15104:	leave                               #|}|
0x15105:	ret                                 
0x15106:	endbr64                             #|{|
0x1510a:	push rbp                            
0x1510b:	mov rbp, rsp                        
0x1510e:	sub rsp, 0x140                      
0x15115:	mov qword ptr [rbp - 0x138], rdi    
0x1511c:	mov qword ptr [rbp - 0x140], rsi    
0x15123:	mov rax, qword ptr fs:[0x28]        #|{|
0x1512c:	mov qword ptr [rbp - 8], rax        
0x15130:	xor eax, eax                        
0x15132:	lea rdx, [rbp - 0x130]              #    if (|x|stat(file1, &s1) == 0 &&
0x15139:	mov rax, qword ptr [rbp - 0x138]    
0x15140:	mov rsi, rdx                        
0x15143:	mov rdi, rax                        
0x15146:	call 0x1f0e4                        
0x1514b:	test eax, eax                       #    if |(|xstat(file1, &s1) == 0 &&
0x1514d:	jne 0x15199                         
0x1514f:	lea rdx, [rbp - 0xa0]               #	|x|stat(file2, &s2) == 0 &&
0x15156:	mov rax, qword ptr [rbp - 0x140]    
0x1515d:	mov rsi, rdx                        
0x15160:	mov rdi, rax                        
0x15163:	call 0x1f0e4                        
0x15168:	test eax, eax                       #    if (xstat(file1, &s1) == 0 |&|&
0x1516a:	jne 0x15199                         
0x1516c:	mov rdx, qword ptr [rbp - 0x130]    #	s1|.|st_dev == s2.st_dev &&
0x15173:	mov rax, qword ptr [rbp - 0xa0]     #	s1.st_dev == s2|.|st_dev &&
0x1517a:	cmp rdx, rax                        #	xstat(file2, &s2) == 0 |&|&
0x1517d:	jne 0x15199                         
0x1517f:	mov rdx, qword ptr [rbp - 0x128]    #	s1|.|st_ino == s2.st_ino)
0x15186:	mov rax, qword ptr [rbp - 0x98]     #	s1.st_ino == s2|.|st_ino)
0x1518d:	cmp rdx, rax                        #	s1.st_dev == s2.st_dev |&|&
0x15190:	jne 0x15199                         
0x15192:	mov eax, 1                          #	return |1|;
0x15197:	jmp 0x1519e                         
0x15199:	mov eax, 0                          #    return |0|;
0x1519e:	mov rdx, qword ptr [rbp - 8]        #|}|
0x151a2:	sub rdx, qword ptr fs:[0x28]        
0x151ab:	je 0x151b2                          
0x151ad:	call 0x4980                         #|}|
0x151b2:	leave                               
0x151b3:	ret                                 
0x151b4:	endbr64                             #|{|
0x151b8:	push rbp                            
0x151b9:	mov rbp, rsp                        
0x151bc:	sub rsp, 0x20                       
0x151c0:	mov qword ptr [rbp - 0x18], rdi     
0x151c4:	mov qword ptr [rbp - 0x20], rsi     
0x151c8:	mov rax, qword ptr [rbp - 0x18]     #    if (this|-|>selected_entries)
0x151cc:	mov eax, dword ptr [rax + 0x70]     
0x151cf:	test eax, eax                       #    if |(|this->selected_entries)
0x151d1:	je 0x151ff                          
0x151d3:	mov rax, qword ptr [rbp - 0x20]     #	c = |p|anel_2s_message("%s: File exists. Overwrite/Skip/All/Cancel? ",
0x151d7:	mov ecx, 0x1e                       
0x151dc:	lea rdx, [rip + 0x13480]            
0x151e3:	mov rsi, rax                        
0x151e6:	lea rax, [rip + 0x1347b]            
0x151ed:	mov rdi, rax                        
0x151f0:	mov eax, 0                          
0x151f5:	call 0x11568                        
0x151fa:	mov byte ptr [rbp - 1], al          
0x151fd:	jmp 0x15229                         
0x151ff:	mov rax, qword ptr [rbp - 0x20]     #	c = |p|anel_2s_message("%s: File exists. Overwrite/Cancel? ",
0x15203:	mov ecx, 0x1e                       
0x15208:	lea rdx, [rip + 0x13486]            
0x1520f:	mov rsi, rax                        
0x15212:	lea rax, [rip + 0x1347f]            
0x15219:	mov rdi, rax                        
0x1521c:	mov eax, 0                          
0x15221:	call 0x11568                        
0x15226:	mov byte ptr [rbp - 1], al          
0x15229:	movsx eax, byte ptr [rbp - 1]       #    |s|witch (c)
0x1522d:	cmp eax, 0x73                       
0x15230:	je 0x15268                          
0x15232:	cmp eax, 0x73                       
0x15235:	jg 0x1527a                          
0x15237:	cmp eax, 0x61                       
0x1523a:	je 0x15248                          
0x1523c:	cmp eax, 0x6f                       
0x1523f:	jne 0x1527a                         
0x15241:	mov eax, 0                          #	    return |W|ARN_OVERWRITE;
0x15246:	jmp 0x15283                         
0x15248:	mov rax, qword ptr [rbp - 0x18]     #	    if (this|-|>selected_entries)
0x1524c:	mov eax, dword ptr [rax + 0x70]     
0x1524f:	test eax, eax                       #	    if |(|this->selected_entries)
0x15251:	je 0x1527d                          
0x15253:	mov rax, qword ptr [rbp - 0x18]     #		this->chkdest |=| OFF;
0x15257:	mov dword ptr [rax + 0x90], 0       
0x15261:	mov eax, 0                          #		return |W|ARN_OVERWRITE;
0x15266:	jmp 0x15283                         
0x15268:	mov rax, qword ptr [rbp - 0x18]     #	    if (this|-|>selected_entries)
0x1526c:	mov eax, dword ptr [rax + 0x70]     
0x1526f:	test eax, eax                       #	    if |(|this->selected_entries)
0x15271:	je 0x1527a                          
0x15273:	mov eax, 3                          #		return |W|ARN_SKIP;
0x15278:	jmp 0x15283                         
0x1527a:	nop                                 #	    |b|reak;
0x1527b:	jmp 0x1527e                         
0x1527d:	nop                                 #	    |b|reak;
0x1527e:	mov eax, 2                          #    return |W|ARN_CANCEL;
0x15283:	leave                               #|}|
0x15284:	ret                                 
0x15285:	endbr64                             #|{|
0x15289:	push rbp                            
0x1528a:	mov rbp, rsp                        
0x1528d:	sub rsp, 0xb0                       
0x15294:	mov qword ptr [rbp - 0xa8], rdi     
0x1529b:	mov rax, qword ptr fs:[0x28]        #|{|
0x152a4:	mov qword ptr [rbp - 8], rax        
0x152a8:	xor eax, eax                        
0x152aa:	lea rdx, [rbp - 0xa0]               #    if (|x|stat(name, &statbuf) == 0 && S_ISREG(statbuf.st_mode))
0x152b1:	mov rax, qword ptr [rbp - 0xa8]     
0x152b8:	mov rsi, rdx                        
0x152bb:	mov rdi, rax                        
0x152be:	call 0x1f0e4                        
0x152c3:	test eax, eax                       #    if |(|xstat(name, &statbuf) == 0 && S_ISREG(statbuf.st_mode))
0x152c5:	jne 0x152e8                         
0x152c7:	mov eax, dword ptr [rbp - 0x88]     #    if (xstat(name, &statbuf) == 0 && |S|_ISREG(statbuf.st_mode))
0x152cd:	and eax, 0xf000                     
0x152d2:	cmp eax, 0x8000                     #    if (xstat(name, &statbuf) == 0 |&|& S_ISREG(statbuf.st_mode))
0x152d7:	jne 0x152e8                         
0x152d9:	mov rax, qword ptr [rbp - 0xa8]     #	|u|nlink(name);
0x152e0:	mov rdi, rax                        
0x152e3:	call 0x4830                         
0x152e8:	nop                                 #|}|
0x152e9:	mov rax, qword ptr [rbp - 8]        
0x152ed:	sub rax, qword ptr fs:[0x28]        
0x152f6:	je 0x152fd                          
0x152f8:	call 0x4980                         
0x152fd:	leave                               
0x152fe:	ret                                 
0x152ff:	endbr64                             #|{|
0x15303:	push rbp                            
0x15304:	mov rbp, rsp                        
0x15307:	mov qword ptr [rbp - 8], rdi        
0x1530b:	mov qword ptr [rbp - 0x10], rsi     
0x1530f:	cmp qword ptr [rbp - 0x10], 0       #    if |(|total == 0)
0x15314:	jne 0x1531d                         
0x15316:	mov eax, 0                          #	return |0|;
0x1531b:	jmp 0x1537b                         
0x1531d:	cmp qword ptr [rbp - 0x10], 0x1869f #    return (total >= 100000) ? (x / (total / 100)) |:| ((x * 100) / total);
0x15325:	jle 0x15358                         
0x15327:	mov rcx, qword ptr [rbp - 0x10]     #    return (total >= 100000) ? (x / (total |/| 100)) : ((x * 100) / total);
0x1532b:	movabs rdx, 0xa3d70a3d70a3d70b      
0x15335:	mov rax, rcx                        
0x15338:	imul rdx                            
0x1533b:	lea rax, [rdx + rcx]                
0x1533f:	sar rax, 6                          
0x15343:	sar rcx, 0x3f                       
0x15347:	sub rax, rcx                        
0x1534a:	mov rsi, rax                        
0x1534d:	mov rax, qword ptr [rbp - 8]        #    return (total >= 100000) ? (x |/| (total / 100)) : ((x * 100) / total);
0x15351:	cqo                                 
0x15353:	idiv rsi                            
0x15356:	jmp 0x1537b                         #    return (total >= 100000) ? (x / (total / 100)) |:| ((x * 100) / total);
0x15358:	mov rdx, qword ptr [rbp - 8]        #    return (total >= 100000) ? (x / (total / 100)) : ((x |*| 100) / total);
0x1535c:	mov rax, rdx                        
0x1535f:	shl rax, 2                          
0x15363:	add rax, rdx                        
0x15366:	lea rdx, [rax*4]                    
0x1536e:	add rax, rdx                        
0x15371:	shl rax, 2                          
0x15375:	cqo                                 #    return (total >= 100000) ? (x / (total / 100)) : ((x * 100) |/| total);
0x15377:	idiv qword ptr [rbp - 0x10]         
0x1537b:	pop rbp                             #|}|
0x1537c:	ret                                 
0x1537d:	endbr64                             #|{|
0x15381:	push rbp                            
0x15382:	mov rbp, rsp                        
0x15385:	push rbx                            
0x15386:	sub rsp, 0x138                      
0x1538d:	mov qword ptr [rbp - 0x118], rdi    
0x15394:	mov qword ptr [rbp - 0x120], rsi    
0x1539b:	mov qword ptr [rbp - 0x128], rdx    
0x153a2:	mov dword ptr [rbp - 0x12c], ecx    
0x153a8:	mov dword ptr [rbp - 0x130], r8d    
0x153af:	mov dword ptr [rbp - 0x134], r9d    
0x153b6:	mov rax, qword ptr fs:[0x28]        #|{|
0x153bf:	mov qword ptr [rbp - 0x18], rax     
0x153c3:	xor eax, eax                        
0x153c5:	mov eax, dword ptr [rbp - 0x12c]    #    if (|S|_ISLNK(mode))
0x153cb:	and eax, 0xf000                     
0x153d0:	cmp eax, 0xa000                     #    if |(|S_ISLNK(mode))
0x153d5:	jne 0x15401                         
0x153d7:	lea rdx, [rbp - 0xb0]               #	if(|x|stat(src,&s_tmp) != -1)
0x153de:	mov rax, qword ptr [rbp - 0x120]    
0x153e5:	mov rsi, rdx                        
0x153e8:	mov rdi, rax                        
0x153eb:	call 0x1f0e4                        
0x153f0:	cmp eax, -1                         #	if|(|xstat(src,&s_tmp) != -1)
0x153f3:	je 0x15401                          
0x153f5:	mov eax, dword ptr [rbp - 0x98]     #	    mode|=|s_tmp.st_mode;
0x153fb:	mov dword ptr [rbp - 0x12c], eax    
0x15401:	mov eax, dword ptr [rbp - 0x12c]    #    if (|S|_ISDIR(mode))
0x15407:	and eax, 0xf000                     
0x1540c:	cmp eax, 0x4000                     #    if |(|S_ISDIR(mode))
0x15411:	jne 0x156ff                         
0x15417:	lea rdx, [rbp - 0xb0]               #	if (|x|stat(dest, &dest_statbuf) == 0)
0x1541e:	mov rax, qword ptr [rbp - 0x128]    
0x15425:	mov rsi, rdx                        
0x15428:	mov rdi, rax                        
0x1542b:	call 0x1f0e4                        
0x15430:	test eax, eax                       #	if |(|xstat(dest, &dest_statbuf) == 0)
0x15432:	jne 0x15547                         
0x15438:	mov eax, dword ptr [rbp - 0x98]     #	    if (!|S|_ISDIR(dest_statbuf.st_mode))
0x1543e:	and eax, 0xf000                     
0x15443:	cmp eax, 0x4000                     #	    if |(|!S_ISDIR(dest_statbuf.st_mode))
0x15448:	je 0x15454                          
0x1544a:	mov eax, 0xb                        #		return |S|D_INVAL;
0x1544f:	jmp 0x15f50                         
0x15454:	mov rax, qword ptr [rbp - 0x128]    #	    temp = xmalloc(|s|trlen(dest) + 1 + strlen(src) + 1);
0x1545b:	mov rdi, rax                        
0x1545e:	call 0x4960                         
0x15463:	mov rbx, rax                        
0x15466:	mov rax, qword ptr [rbp - 0x120]    #	    temp = xmalloc(strlen(dest) + 1 + |s|trlen(src) + 1);
0x1546d:	mov rdi, rax                        
0x15470:	call 0x4960                         
0x15475:	add rax, rbx                        #	    temp = xmalloc(strlen(dest) + 1 |+| strlen(src) + 1);
0x15478:	add rax, 2                          #	    temp = |x|malloc(strlen(dest) + 1 + strlen(src) + 1);
0x1547c:	mov rdi, rax                        
0x1547f:	call 0x24650                        
0x15484:	mov qword ptr [rbp - 0xb8], rax     
0x1548b:	mov rcx, qword ptr [rbp - 0x120]    #	    |s|printf(temp, "%s/%s", dest, src);
0x15492:	mov rdx, qword ptr [rbp - 0x128]    
0x15499:	mov rax, qword ptr [rbp - 0xb8]     
0x154a0:	lea rsi, [rip + 0x13328]            
0x154a7:	mov rdi, rax                        
0x154aa:	mov eax, 0                          
0x154af:	call 0x4dd0                         
0x154b4:	mov rax, qword ptr [rbp - 0x118]    #	    if (this|-|>chkdest && access(temp, 0) == 0)
0x154bb:	mov eax, dword ptr [rax + 0x90]     
0x154c1:	test eax, eax                       #	    if |(|this->chkdest && access(temp, 0) == 0)
0x154c3:	je 0x15538                          
0x154c5:	mov rax, qword ptr [rbp - 0xb8]     #	    if (this->chkdest && |a|ccess(temp, 0) == 0)
0x154cc:	mov esi, 0                          
0x154d1:	mov rdi, rax                        
0x154d4:	call 0x4d40                         
0x154d9:	test eax, eax                       #	    if (this->chkdest |&|& access(temp, 0) == 0)
0x154db:	jne 0x15538                         
0x154dd:	mov eax, 0                          #		|s|tatus_default();
0x154e2:	call 0x10857                        
0x154e7:	mov rdx, qword ptr [rbp - 0xb8]     #		error = |p|anel_warning(this, temp);
0x154ee:	mov rax, qword ptr [rbp - 0x118]    
0x154f5:	mov rsi, rdx                        
0x154f8:	mov rdi, rax                        
0x154fb:	mov eax, 0                          
0x15500:	call 0x151b4                        
0x15505:	mov dword ptr [rbp - 0x108], eax    
0x1550b:	mov eax, 0                          #		|t|ty_update();
0x15510:	call 0xb4b7                         
0x15515:	mov rax, qword ptr [rbp - 0xb8]     #		|x|free(temp);
0x1551c:	mov rdi, rax                        
0x1551f:	call 0x1eeae                        
0x15524:	cmp dword ptr [rbp - 0x108], 0      #		if |(|error)
0x1552b:	je 0x15547                          
0x1552d:	mov eax, dword ptr [rbp - 0x108]    #		    return |e|rror;
0x15533:	jmp 0x15f50                         
0x15538:	mov rax, qword ptr [rbp - 0xb8]     #		|x|free(temp);
0x1553f:	mov rdi, rax                        
0x15542:	call 0x1eeae                        
0x15547:	mov rax, qword ptr [rbp - 0x120]    #	temp = xmalloc(32 + |s|trlen(src) + strlen(dest) + 1);
0x1554e:	mov rdi, rax                        
0x15551:	call 0x4960                         
0x15556:	mov rbx, rax                        
0x15559:	mov rax, qword ptr [rbp - 0x128]    #	temp = xmalloc(32 + strlen(src) + |s|trlen(dest) + 1);
0x15560:	mov rdi, rax                        
0x15563:	call 0x4960                         
0x15568:	add rax, rbx                        #	temp = xmalloc(32 + strlen(src) |+| strlen(dest) + 1);
0x1556b:	add rax, 0x21                       #	temp = |x|malloc(32 + strlen(src) + strlen(dest) + 1);
0x1556f:	mov rdi, rax                        
0x15572:	call 0x24650                        
0x15577:	mov qword ptr [rbp - 0xb8], rax     
0x1557e:	mov rax, qword ptr [rbp - 0x128]    #	dest_file = |x|basename(dest);
0x15585:	mov rdi, rax                        
0x15588:	call 0x1f298                        
0x1558d:	mov qword ptr [rbp - 0xd0], rax     
0x15594:	mov rax, qword ptr [rbp - 0xd0]     #	if (|*|dest_file == '\0')
0x1559b:	movzx eax, byte ptr [rax]           
0x1559e:	test al, al                         #	if |(|*dest_file == '\0')
0x155a0:	jne 0x155ac                         
0x155a2:	mov eax, 6                          #	    return |D|_CREATERR;
0x155a7:	jmp 0x15f50                         
0x155ac:	mov rax, qword ptr [rbp - 0x120]    #	msg = xmalloc(32 + |s|trlen(src) + strlen(dest));
0x155b3:	mov rdi, rax                        
0x155b6:	call 0x4960                         
0x155bb:	mov rbx, rax                        
0x155be:	mov rax, qword ptr [rbp - 0x128]    #	msg = xmalloc(32 + strlen(src) + |s|trlen(dest));
0x155c5:	mov rdi, rax                        
0x155c8:	call 0x4960                         
0x155cd:	add rax, rbx                        #	msg = xmalloc(32 + strlen(src) |+| strlen(dest));
0x155d0:	add rax, 0x20                       #	msg = |x|malloc(32 + strlen(src) + strlen(dest));
0x155d4:	mov rdi, rax                        
0x155d7:	call 0x24650                        
0x155dc:	mov qword ptr [rbp - 0xc8], rax     
0x155e3:	mov rcx, qword ptr [rbp - 0x128]    #	|s|printf(msg, "(COPY) cp -r \"%s\" \"%s\"", src, dest);
0x155ea:	mov rdx, qword ptr [rbp - 0x120]    
0x155f1:	mov rax, qword ptr [rbp - 0xc8]     
0x155f8:	lea rsi, [rip + 0x131d6]            
0x155ff:	mov rdi, rax                        
0x15602:	mov eax, 0                          
0x15607:	call 0x4dd0                         
0x1560c:	mov rax, qword ptr [rbp - 0xc8]     #	|s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
0x15613:	mov edx, 1                          
0x15618:	mov esi, 1                          
0x1561d:	mov rdi, rax                        
0x15620:	call 0x107d0                        
0x15625:	mov eax, 0                          #	|t|ty_update();
0x1562a:	call 0xb4b7                         
0x1562f:	mov rax, qword ptr [rbp - 0xc8]     #	|x|free(msg);
0x15636:	mov rdi, rax                        
0x15639:	call 0x1eeae                        
0x1563e:	mov rcx, qword ptr [rbp - 0x128]    #	|s|printf(temp, "cp -r \"%s\" \"%s\"", src, dest);
0x15645:	mov rdx, qword ptr [rbp - 0x120]    
0x1564c:	mov rax, qword ptr [rbp - 0xb8]     
0x15653:	lea rsi, [rip + 0x13192]            
0x1565a:	mov rdi, rax                        
0x1565d:	mov eax, 0                          
0x15662:	call 0x4dd0                         
0x15667:	mov rax, qword ptr [rbp - 0xb8]     #	result = |s|tart(temp, 1);
0x1566e:	mov esi, 1                          
0x15673:	mov rdi, rax                        
0x15676:	call 0x1f6f0                        
0x1567b:	mov dword ptr [rbp - 0xf4], eax     
0x15681:	mov rax, qword ptr [rbp - 0xb8]     #	|x|free(temp);
0x15688:	mov rdi, rax                        
0x1568b:	call 0x1eeae                        
0x15690:	mov rax, qword ptr [rbp - 0x118]    #	|t|ty_update_title(this->path);
0x15697:	mov rax, qword ptr [rax + 0x18]     
0x1569b:	mov rdi, rax                        
0x1569e:	call 0xd875                         
0x156a3:	mov eax, dword ptr [rbp - 0xf4]     #	if (|W|IFSIGNALED(result))
0x156a9:	and eax, 0x7f                       
0x156ac:	add eax, 1                          
0x156af:	sar al, 1                           
0x156b1:	test al, al                         #	if |(|WIFSIGNALED(result))
0x156b3:	jle 0x156bf                         
0x156b5:	mov eax, 0xc                        #	    return |S|D_INTERRUPTED;
0x156ba:	jmp 0x15f50                         
0x156bf:	mov eax, dword ptr [rbp - 0xf4]     #	if(|W|IFEXITED(result) && (WEXITSTATUS(result) != 0))
0x156c5:	and eax, 0x7f                       
0x156c8:	test eax, eax                       #	if|(|WIFEXITED(result) && (WEXITSTATUS(result) != 0))
0x156ca:	jne 0x156f5                         
0x156cc:	mov eax, dword ptr [rbp - 0xf4]     #	if(WIFEXITED(result) && (|W|EXITSTATUS(result) != 0))
0x156d2:	sar eax, 8                          
0x156d5:	movzx eax, al                       
0x156d8:	test eax, eax                       #	if(WIFEXITED(result) |&|& (WEXITSTATUS(result) != 0))
0x156da:	je 0x156f5                          
0x156dc:	lea rax, [rip + 0x13119]            #	    |d|isplay_errors("cp");
0x156e3:	mov rdi, rax                        
0x156e6:	call 0x1f808                        
0x156eb:	mov eax, 9                          #	    return |S|D_UNKNOWN;
0x156f0:	jmp 0x15f50                         
0x156f5:	mov eax, 1                          #	return |S|D_OK;
0x156fa:	jmp 0x15f50                         
0x156ff:	mov rax, qword ptr [rbp - 0x128]    #    len = |s|trlen(dest);
0x15706:	mov rdi, rax                        
0x15709:	call 0x4960                         
0x1570e:	mov qword ptr [rbp - 0xd8], rax     
0x15715:	mov rax, qword ptr [rbp - 0x128]    #    dest = |x|strdup(dest);
0x1571c:	mov rdi, rax                        
0x1571f:	call 0x24780                        
0x15724:	mov qword ptr [rbp - 0x128], rax    
0x1572b:	lea rdx, [rbp - 0xb0]               #    if (|x|stat(dest, &dest_statbuf) == 0 && S_ISDIR(dest_statbuf.st_mode))
0x15732:	mov rax, qword ptr [rbp - 0x128]    
0x15739:	mov rsi, rdx                        
0x1573c:	mov rdi, rax                        
0x1573f:	call 0x1f0e4                        
0x15744:	test eax, eax                       #    if |(|xstat(dest, &dest_statbuf) == 0 && S_ISDIR(dest_statbuf.st_mode))
0x15746:	jne 0x157ce                         
0x1574c:	mov eax, dword ptr [rbp - 0x98]     #    if (xstat(dest, &dest_statbuf) == 0 && |S|_ISDIR(dest_statbuf.st_mode))
0x15752:	and eax, 0xf000                     
0x15757:	cmp eax, 0x4000                     #    if (xstat(dest, &dest_statbuf) == 0 |&|& S_ISDIR(dest_statbuf.st_mode))
0x1575c:	jne 0x157ce                         
0x1575e:	mov rax, qword ptr [rbp - 0x120]    #	dest = xrealloc(dest, len + 1 + |s|trlen(src) + 1);
0x15765:	mov rdi, rax                        
0x15768:	call 0x4960                         
0x1576d:	mov rdx, qword ptr [rbp - 0xd8]     #	dest = xrealloc(dest, len + 1 |+| strlen(src) + 1);
0x15774:	add rax, rdx                        
0x15777:	lea rdx, [rax + 2]                  #	dest = |x|realloc(dest, len + 1 + strlen(src) + 1);
0x1577b:	mov rax, qword ptr [rbp - 0x128]    
0x15782:	mov rsi, rdx                        
0x15785:	mov rdi, rax                        
0x15788:	call 0x24670                        
0x1578d:	mov qword ptr [rbp - 0x128], rax    
0x15794:	mov rax, qword ptr [rbp - 0x128]    #	|s|trcat(dest, "/");
0x1579b:	mov rdi, rax                        
0x1579e:	call 0x4960                         
0x157a3:	mov rdx, rax                        
0x157a6:	mov rax, qword ptr [rbp - 0x128]    
0x157ad:	add rax, rdx                        
0x157b0:	mov word ptr [rax], 0x2f            
0x157b5:	mov rdx, qword ptr [rbp - 0x120]    #	|s|trcat(dest, src);
0x157bc:	mov rax, qword ptr [rbp - 0x128]    
0x157c3:	mov rsi, rdx                        
0x157c6:	mov rdi, rax                        
0x157c9:	call 0x4db0                         
0x157ce:	mov rax, qword ptr [rbp - 0x128]    #    dest_file = |x|basename(dest);
0x157d5:	mov rdi, rax                        
0x157d8:	call 0x1f298                        
0x157dd:	mov qword ptr [rbp - 0xd0], rax     
0x157e4:	mov rax, qword ptr [rbp - 0xd0]     #    if (|*|dest_file == '\0')
0x157eb:	movzx eax, byte ptr [rax]           
0x157ee:	test al, al                         #    if |(|*dest_file == '\0')
0x157f0:	jne 0x1580b                         
0x157f2:	mov rax, qword ptr [rbp - 0x128]    #	|x|free(dest);
0x157f9:	mov rdi, rax                        
0x157fc:	call 0x1eeae                        
0x15801:	mov eax, 6                          #	return |D|_CREATERR;
0x15806:	jmp 0x15f50                         
0x1580b:	mov rax, qword ptr [rbp - 0x118]    #    if (this|-|>chkdest && (access(dest, 0) == 0))
0x15812:	mov eax, dword ptr [rax + 0x90]     
0x15818:	test eax, eax                       #    if |(|this->chkdest && (access(dest, 0) == 0))
0x1581a:	je 0x15880                          
0x1581c:	mov rax, qword ptr [rbp - 0x128]    #    if (this->chkdest && (|a|ccess(dest, 0) == 0))
0x15823:	mov esi, 0                          
0x15828:	mov rdi, rax                        
0x1582b:	call 0x4d40                         
0x15830:	test eax, eax                       #    if (this->chkdest |&|& (access(dest, 0) == 0))
0x15832:	jne 0x15880                         
0x15834:	mov eax, 0                          #	|s|tatus_default();
0x15839:	call 0x10857                        
0x1583e:	mov rdx, qword ptr [rbp - 0xd0]     #	error = |p|anel_warning(this, dest_file);
0x15845:	mov rax, qword ptr [rbp - 0x118]    
0x1584c:	mov rsi, rdx                        
0x1584f:	mov rdi, rax                        
0x15852:	mov eax, 0                          
0x15857:	call 0x151b4                        
0x1585c:	mov dword ptr [rbp - 0x108], eax    
0x15862:	mov eax, 0                          #	|t|ty_update();
0x15867:	call 0xb4b7                         
0x1586c:	cmp dword ptr [rbp - 0x108], 0      #	if |(|error)
0x15873:	je 0x15880                          
0x15875:	mov eax, dword ptr [rbp - 0x108]    #	    return |e|rror;
0x1587b:	jmp 0x15f50                         
0x15880:	mov rax, qword ptr [rbp - 0x120]    #    msg = xmalloc(32 + |s|trlen(src));
0x15887:	mov rdi, rax                        
0x1588a:	call 0x4960                         
0x1588f:	add rax, 0x20                       #    msg = |x|malloc(32 + strlen(src));
0x15893:	mov rdi, rax                        
0x15896:	call 0x24650                        
0x1589b:	mov qword ptr [rbp - 0xc8], rax     
0x158a2:	mov eax, dword ptr [rbp - 0x12c]    #    if (|S|_ISREG(mode))
0x158a8:	and eax, 0xf000                     
0x158ad:	cmp eax, 0x8000                     #    if |(|S_ISREG(mode))
0x158b2:	jne 0x158db                         
0x158b4:	mov rdx, qword ptr [rbp - 0x120]    #	|s|printf(msg, "(COPY) [  0%%] %s", src);
0x158bb:	mov rax, qword ptr [rbp - 0xc8]     
0x158c2:	lea rcx, [rip + 0x12f36]            
0x158c9:	mov rsi, rcx                        
0x158cc:	mov rdi, rax                        
0x158cf:	mov eax, 0                          
0x158d4:	call 0x4dd0                         
0x158d9:	jmp 0x15900                         
0x158db:	mov rdx, qword ptr [rbp - 0x120]    #	|s|printf(msg, "(COPY) [0 bytes] %s", src);
0x158e2:	mov rax, qword ptr [rbp - 0xc8]     
0x158e9:	lea rcx, [rip + 0x12f21]            
0x158f0:	mov rsi, rcx                        
0x158f3:	mov rdi, rax                        
0x158f6:	mov eax, 0                          
0x158fb:	call 0x4dd0                         
0x15900:	mov rax, qword ptr [rbp - 0xc8]     #    |s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
0x15907:	mov edx, 1                          
0x1590c:	mov esi, 1                          
0x15911:	mov rdi, rax                        
0x15914:	call 0x107d0                        
0x15919:	mov eax, 0                          #    |t|ty_update();
0x1591e:	call 0xb4b7                         
0x15923:	mov rax, qword ptr [rbp - 0xc8]     #    |x|free(msg);
0x1592a:	mov rdi, rax                        
0x1592d:	call 0x1eeae                        
0x15932:	mov rax, qword ptr [rbp - 0x120]    #    if ((sfd = |o|pen64(src, O_RDONLY | O_BINARY)) == -1)
0x15939:	mov esi, 0                          
0x1593e:	mov rdi, rax                        
0x15941:	mov eax, 0                          
0x15946:	call 0x4ce0                         
0x1594b:	mov dword ptr [rbp - 0x104], eax    
0x15951:	cmp dword ptr [rbp - 0x104], -1     #    if |(|(sfd = open64(src, O_RDONLY | O_BINARY)) == -1)
0x15958:	jne 0x15964                         
0x1595a:	mov eax, 4                          #	return |S|_OPENERR;
0x1595f:	jmp 0x15f50                         
0x15964:	mov rax, qword ptr [rbp - 0x118]    #    if (this|-|>msdosfs)
0x1596b:	mov eax, dword ptr [rax + 0x10]     
0x1596e:	test eax, eax                       #    if |(|this->msdosfs)
0x15970:	je 0x15979                          
0x15972:	and dword ptr [rbp - 0x12c], 0xffffffb6#	mode |&|= ~0111;
0x15979:	mov edx, dword ptr [rbp - 0x12c]    #    if ((dfd = |c|reat(dest, mode)) == -1)
0x1597f:	mov rax, qword ptr [rbp - 0x128]    
0x15986:	mov esi, edx                        
0x15988:	mov rdi, rax                        
0x1598b:	call 0x4dc0                         
0x15990:	mov dword ptr [rbp - 0x100], eax    
0x15996:	cmp dword ptr [rbp - 0x100], -1     #    if |(|(dfd = creat(dest, mode)) == -1)
0x1599d:	jne 0x159c5                         
0x1599f:	mov eax, dword ptr [rbp - 0x104]    #	|c|lose(sfd);
0x159a5:	mov edi, eax                        
0x159a7:	call 0x4a70                         
0x159ac:	mov rax, qword ptr [rbp - 0x128]    #	|x|free(dest);
0x159b3:	mov rdi, rax                        
0x159b6:	call 0x1eeae                        
0x159bb:	mov eax, 6                          #	return |D|_CREATERR;
0x159c0:	jmp 0x15f50                         
0x159c5:	mov eax, dword ptr [rbp - 0x104]    #    memsize = |m|in(flen = get_file_length(sfd), COPY_BUFFER_SIZE);
0x159cb:	mov edi, eax                        
0x159cd:	call 0x1e464                        
0x159d2:	mov qword ptr [rbp - 0xf0], rax     
0x159d9:	cmp qword ptr [rbp - 0xf0], 0x8000  
0x159e4:	jg 0x15a03                          
0x159e6:	mov eax, dword ptr [rbp - 0x104]    #    memsize = |m|in(flen = get_file_length(sfd), COPY_BUFFER_SIZE);
0x159ec:	mov edi, eax                        
0x159ee:	call 0x1e464                        
0x159f3:	mov qword ptr [rbp - 0xf0], rax     
0x159fa:	mov rax, qword ptr [rbp - 0xf0]     
0x15a01:	jmp 0x15a08                         
0x15a03:	mov eax, 0x8000                     #    memsize = |m|in(flen = get_file_length(sfd), COPY_BUFFER_SIZE);
0x15a08:	mov qword ptr [rbp - 0xe0], rax     #    memsize |=| min(flen = get_file_length(sfd), COPY_BUFFER_SIZE);
0x15a0f:	mov eax, dword ptr [rbp - 0x12c]    #    if (|S|_ISBLK(mode) || S_ISCHR(mode))
0x15a15:	and eax, 0xf000                     
0x15a1a:	cmp eax, 0x6000                     #    if |(|S_ISBLK(mode) || S_ISCHR(mode))
0x15a1f:	je 0x15a33                          
0x15a21:	mov eax, dword ptr [rbp - 0x12c]    #    if (S_ISBLK(mode) || |S|_ISCHR(mode))
0x15a27:	and eax, 0xf000                     
0x15a2c:	cmp eax, 0x2000                     #    if (S_ISBLK(mode) |||| S_ISCHR(mode))
0x15a31:	jne 0x15a4f                         
0x15a33:	movabs rax, 0x7fffffffffffffff      #	flen |=| MAXFILESIZE;
0x15a3d:	mov qword ptr [rbp - 0xf0], rax     
0x15a44:	mov qword ptr [rbp - 0xe0], 0x8000  #	memsize |=| COPY_BUFFER_SIZE;
0x15a4f:	cmp qword ptr [rbp - 0xf0], 0       #    if |(|flen == 0)
0x15a57:	jne 0x15ab2                         
0x15a59:	call 0x4990                         #	if (|g|etuid() == 0)
0x15a5e:	test eax, eax                       #	if |(|getuid() == 0)
0x15a60:	jne 0x15a7f                         
0x15a62:	mov edx, dword ptr [rbp - 0x134]    #	    |c|hown(dest, uid, gid);
0x15a68:	mov ecx, dword ptr [rbp - 0x130]    
0x15a6e:	mov rax, qword ptr [rbp - 0x128]    
0x15a75:	mov esi, ecx                        
0x15a77:	mov rdi, rax                        
0x15a7a:	call 0x4c90                         
0x15a7f:	mov eax, dword ptr [rbp - 0x104]    #	|c|lose2(sfd, dfd);
0x15a85:	mov edi, eax                        
0x15a87:	call 0x4a70                         
0x15a8c:	mov eax, dword ptr [rbp - 0x100]    
0x15a92:	mov edi, eax                        
0x15a94:	call 0x4a70                         
0x15a99:	mov rax, qword ptr [rbp - 0x128]    #	|x|free(dest);
0x15aa0:	mov rdi, rax                        
0x15aa3:	call 0x1eeae                        
0x15aa8:	mov eax, 1                          #	return |S|D_OK;
0x15aad:	jmp 0x15f50                         
0x15ab2:	mov rax, qword ptr [rbp - 0xe0]     #    buf = |x|malloc(memsize);
0x15ab9:	mov rdi, rax                        
0x15abc:	call 0x24650                        
0x15ac1:	mov qword ptr [rbp - 0xc0], rax     
0x15ac8:	mov qword ptr [rbp - 0xe8], 0       #    for (n |=| 0; n < flen; n += COPY_BUFFER_SIZE)
0x15ad3:	jmp 0x15ed9                         #    |f|or (n = 0; n < flen; n += COPY_BUFFER_SIZE)
0x15ad8:	mov rax, qword ptr [rbp - 0xf0]     #	bytes_to_transfer = |m|in(flen - n, memsize);
0x15adf:	sub rax, qword ptr [rbp - 0xe8]     
0x15ae6:	mov rdx, rax                        
0x15ae9:	mov rax, qword ptr [rbp - 0xe0]     
0x15af0:	cmp rdx, rax                        
0x15af3:	cmovle rax, rdx                     
0x15af7:	mov dword ptr [rbp - 0x10c], eax    #	bytes_to_transfer |=| min(flen - n, memsize);
0x15afd:	mov eax, 0                          #	if (|c|anceled())
0x15b02:	call 0x15065                        
0x15b07:	test eax, eax                       #	if |(|canceled())
0x15b09:	je 0x15b61                          
0x15b0b:	mov eax, dword ptr [rbp - 0x104]    #	    |c|lose2(sfd, dfd);
0x15b11:	mov edi, eax                        
0x15b13:	call 0x4a70                         
0x15b18:	mov eax, dword ptr [rbp - 0x100]    
0x15b1e:	mov edi, eax                        
0x15b20:	call 0x4a70                         
0x15b25:	mov rax, qword ptr [rbp - 0x128]    #	    |p|anel_unlink(dest);
0x15b2c:	mov rdi, rax                        
0x15b2f:	mov eax, 0                          
0x15b34:	call 0x15285                        
0x15b39:	mov rax, qword ptr [rbp - 0xc0]     #	    |x|free2(buf, dest);
0x15b40:	mov rdi, rax                        
0x15b43:	call 0x1eeae                        
0x15b48:	mov rax, qword ptr [rbp - 0x128]    
0x15b4f:	mov rdi, rax                        
0x15b52:	call 0x1eeae                        
0x15b57:	mov eax, 2                          #	    return |S|D_CANCEL;
0x15b5c:	jmp 0x15f50                         
0x15b61:	mov edi, 1                          #	|s|ignals(ON);
0x15b66:	call 0x1eaed                        
0x15b6b:	mov eax, dword ptr [rbp - 0x10c]    #	bytes_transferred = |x|read(sfd, buf, bytes_to_transfer);
0x15b71:	movsxd rdx, eax                     
0x15b74:	mov rcx, qword ptr [rbp - 0xc0]     
0x15b7b:	mov eax, dword ptr [rbp - 0x104]    
0x15b81:	mov rsi, rcx                        
0x15b84:	mov edi, eax                        
0x15b86:	call 0x1eee5                        
0x15b8b:	mov dword ptr [rbp - 0xfc], eax     
0x15b91:	mov edi, 0                          #	|s|ignals(OFF);
0x15b96:	call 0x1eaed                        
0x15b9b:	mov eax, dword ptr [rbp - 0xfc]     #	if |(|bytes_transferred != bytes_to_transfer)
0x15ba1:	cmp eax, dword ptr [rbp - 0x10c]    
0x15ba7:	je 0x15c92                          
0x15bad:	cmp dword ptr [rbp - 0xfc], 0       #	    if |(|bytes_transferred >= 0)
0x15bb4:	js 0x15c3c                          
0x15bba:	cmp dword ptr [rbp - 0xfc], 0       #		if |(|bytes_transferred)
0x15bc1:	je 0x15bd4                          
0x15bc3:	mov eax, dword ptr [rbp - 0xfc]     #		    bytes_to_transfer |=| bytes_transferred;
0x15bc9:	mov dword ptr [rbp - 0x10c], eax    
0x15bcf:	jmp 0x15c92                         
0x15bd4:	call 0x4990                         #		    if (|g|etuid() == 0)
0x15bd9:	test eax, eax                       #		    if |(|getuid() == 0)
0x15bdb:	jne 0x15bfa                         
0x15bdd:	mov edx, dword ptr [rbp - 0x134]    #			|c|hown(dest, uid, gid);
0x15be3:	mov ecx, dword ptr [rbp - 0x130]    
0x15be9:	mov rax, qword ptr [rbp - 0x128]    
0x15bf0:	mov esi, ecx                        
0x15bf2:	mov rdi, rax                        
0x15bf5:	call 0x4c90                         
0x15bfa:	mov eax, dword ptr [rbp - 0x104]    #		    |c|lose2(sfd, dfd);
0x15c00:	mov edi, eax                        
0x15c02:	call 0x4a70                         
0x15c07:	mov eax, dword ptr [rbp - 0x100]    
0x15c0d:	mov edi, eax                        
0x15c0f:	call 0x4a70                         
0x15c14:	mov rax, qword ptr [rbp - 0xc0]     #		    |x|free2(buf, dest);
0x15c1b:	mov rdi, rax                        
0x15c1e:	call 0x1eeae                        
0x15c23:	mov rax, qword ptr [rbp - 0x128]    
0x15c2a:	mov rdi, rax                        
0x15c2d:	call 0x1eeae                        
0x15c32:	mov eax, 1                          #		    return |S|D_OK;
0x15c37:	jmp 0x15f50                         
0x15c3c:	mov eax, dword ptr [rbp - 0x104]    #		|c|lose2(sfd, dfd);
0x15c42:	mov edi, eax                        
0x15c44:	call 0x4a70                         
0x15c49:	mov eax, dword ptr [rbp - 0x100]    
0x15c4f:	mov edi, eax                        
0x15c51:	call 0x4a70                         
0x15c56:	mov rax, qword ptr [rbp - 0x128]    #		|p|anel_unlink(dest);
0x15c5d:	mov rdi, rax                        
0x15c60:	mov eax, 0                          
0x15c65:	call 0x15285                        
0x15c6a:	mov rax, qword ptr [rbp - 0xc0]     #		|x|free2(buf, dest);
0x15c71:	mov rdi, rax                        
0x15c74:	call 0x1eeae                        
0x15c79:	mov rax, qword ptr [rbp - 0x128]    
0x15c80:	mov rdi, rax                        
0x15c83:	call 0x1eeae                        
0x15c88:	mov eax, 5                          #		return |S|_READERR;
0x15c8d:	jmp 0x15f50                         
0x15c92:	mov eax, 0                          #	if (|c|anceled())
0x15c97:	call 0x15065                        
0x15c9c:	test eax, eax                       #	if |(|canceled())
0x15c9e:	je 0x15cf6                          
0x15ca0:	mov eax, dword ptr [rbp - 0x104]    #	    |c|lose2(sfd, dfd);
0x15ca6:	mov edi, eax                        
0x15ca8:	call 0x4a70                         
0x15cad:	mov eax, dword ptr [rbp - 0x100]    
0x15cb3:	mov edi, eax                        
0x15cb5:	call 0x4a70                         
0x15cba:	mov rax, qword ptr [rbp - 0x128]    #	    |p|anel_unlink(dest);
0x15cc1:	mov rdi, rax                        
0x15cc4:	mov eax, 0                          
0x15cc9:	call 0x15285                        
0x15cce:	mov rax, qword ptr [rbp - 0xc0]     #	    |x|free2(buf, dest);
0x15cd5:	mov rdi, rax                        
0x15cd8:	call 0x1eeae                        
0x15cdd:	mov rax, qword ptr [rbp - 0x128]    
0x15ce4:	mov rdi, rax                        
0x15ce7:	call 0x1eeae                        
0x15cec:	mov eax, 2                          #	    return |S|D_CANCEL;
0x15cf1:	jmp 0x15f50                         
0x15cf6:	mov eax, dword ptr [rbp - 0x10c]    #	bytes_transferred = |x|write(dfd, buf, bytes_to_transfer);
0x15cfc:	movsxd rdx, eax                     
0x15cff:	mov rcx, qword ptr [rbp - 0xc0]     
0x15d06:	mov eax, dword ptr [rbp - 0x100]    
0x15d0c:	mov rsi, rcx                        
0x15d0f:	mov edi, eax                        
0x15d11:	call 0x1ef4c                        
0x15d16:	mov dword ptr [rbp - 0xfc], eax     
0x15d1c:	mov eax, dword ptr [rbp - 0xfc]     #	if |(|bytes_transferred != bytes_to_transfer)
0x15d22:	cmp eax, dword ptr [rbp - 0x10c]    
0x15d28:	je 0x15db7                          
0x15d2e:	call 0x4820                         #	    int safe_errno = |e|rrno;
0x15d33:	mov eax, dword ptr [rax]            #	    int |s|afe_errno = errno;
0x15d35:	mov dword ptr [rbp - 0xf8], eax     
0x15d3b:	mov eax, dword ptr [rbp - 0x104]    #	    |c|lose2(sfd, dfd);
0x15d41:	mov edi, eax                        
0x15d43:	call 0x4a70                         
0x15d48:	mov eax, dword ptr [rbp - 0x100]    
0x15d4e:	mov edi, eax                        
0x15d50:	call 0x4a70                         
0x15d55:	mov rax, qword ptr [rbp - 0x128]    #	    |p|anel_unlink(dest);
0x15d5c:	mov rdi, rax                        
0x15d5f:	mov eax, 0                          
0x15d64:	call 0x15285                        
0x15d69:	mov rax, qword ptr [rbp - 0xc0]     #	    |x|free2(buf, dest);
0x15d70:	mov rdi, rax                        
0x15d73:	call 0x1eeae                        
0x15d78:	mov rax, qword ptr [rbp - 0x128]    
0x15d7f:	mov rdi, rax                        
0x15d82:	call 0x1eeae                        
0x15d87:	cmp dword ptr [rbp - 0xfc], 0       #	    return (bytes_transferred > 0) ? SD_NOSPACE |:|
0x15d8e:	jg 0x15dad                          
0x15d90:	cmp dword ptr [rbp - 0xf8], 0x1c    #		((safe_errno == ENOSPC) ? SD_NOSPACE |:| D_WRITEERR);
0x15d97:	jne 0x15da3                         
0x15d99:	mov eax, 8                          #		((safe_errno == ENOSPC) ? SD_NOSPACE |:| D_WRITEERR);
0x15d9e:	jmp 0x15f50                         #	    return (bytes_transferred > 0) ? SD_NOSPACE |:|
0x15da3:	mov eax, 7                          #		((safe_errno == ENOSPC) ? SD_NOSPACE |:| D_WRITEERR);
0x15da8:	jmp 0x15f50                         #	    return (bytes_transferred > 0) ? SD_NOSPACE |:|
0x15dad:	mov eax, 8                          #	    return (bytes_transferred > 0) ? SD_NOSPACE |:|
0x15db2:	jmp 0x15f50                         
0x15db7:	mov eax, dword ptr [rbp - 0x10c]    #	if (n |+| bytes_to_transfer <= flen)
0x15dbd:	movsxd rdx, eax                     
0x15dc0:	mov rax, qword ptr [rbp - 0xe8]     
0x15dc7:	add rax, rdx                        
0x15dca:	cmp qword ptr [rbp - 0xf0], rax     #	if |(|n + bytes_to_transfer <= flen)
0x15dd1:	jl 0x15ece                          
0x15dd7:	mov rax, qword ptr [rbp - 0x120]    #	    msg = xmalloc(32 + |s|trlen(src));
0x15dde:	mov rdi, rax                        
0x15de1:	call 0x4960                         
0x15de6:	add rax, 0x20                       #	    msg = |x|malloc(32 + strlen(src));
0x15dea:	mov rdi, rax                        
0x15ded:	call 0x24650                        
0x15df2:	mov qword ptr [rbp - 0xc8], rax     
0x15df9:	mov eax, dword ptr [rbp - 0x12c]    #	    if (|S|_ISREG(mode))
0x15dff:	and eax, 0xf000                     
0x15e04:	cmp eax, 0x8000                     #	    if |(|S_ISREG(mode))
0x15e09:	jne 0x15e60                         
0x15e0b:	mov eax, dword ptr [rbp - 0x10c]    #		|s|printf(msg, "(COPY) [%3d%%] %s",
0x15e11:	movsxd rdx, eax                     
0x15e14:	mov rax, qword ptr [rbp - 0xe8]     
0x15e1b:	add rdx, rax                        
0x15e1e:	mov rax, qword ptr [rbp - 0xf0]     
0x15e25:	mov rsi, rax                        
0x15e28:	mov rdi, rdx                        
0x15e2b:	mov eax, 0                          
0x15e30:	call 0x152ff                        
0x15e35:	mov esi, eax                        
0x15e37:	mov rdx, qword ptr [rbp - 0x120]    
0x15e3e:	mov rax, qword ptr [rbp - 0xc8]     
0x15e45:	mov rcx, rdx                        
0x15e48:	mov edx, esi                        
0x15e4a:	lea rsi, [rip + 0x129d4]            
0x15e51:	mov rdi, rax                        
0x15e54:	mov eax, 0                          
0x15e59:	call 0x4dd0                         
0x15e5e:	jmp 0x15e9c                         
0x15e60:	mov eax, dword ptr [rbp - 0x10c]    #		|s|printf(msg, "(COPY) [%Ld bytes] %s",
0x15e66:	movsxd rdx, eax                     
0x15e69:	mov rax, qword ptr [rbp - 0xe8]     #			(long long)(n |+| bytes_to_transfer), src);
0x15e70:	lea rsi, [rdx + rax]                
0x15e74:	mov rdx, qword ptr [rbp - 0x120]    #		|s|printf(msg, "(COPY) [%Ld bytes] %s",
0x15e7b:	mov rax, qword ptr [rbp - 0xc8]     
0x15e82:	mov rcx, rdx                        
0x15e85:	mov rdx, rsi                        
0x15e88:	lea rsi, [rip + 0x129a8]            
0x15e8f:	mov rdi, rax                        
0x15e92:	mov eax, 0                          
0x15e97:	call 0x4dd0                         
0x15e9c:	mov rax, qword ptr [rbp - 0xc8]     #	    |s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
0x15ea3:	mov edx, 1                          
0x15ea8:	mov esi, 1                          
0x15ead:	mov rdi, rax                        
0x15eb0:	call 0x107d0                        
0x15eb5:	mov eax, 0                          #	    |t|ty_update();
0x15eba:	call 0xb4b7                         
0x15ebf:	mov rax, qword ptr [rbp - 0xc8]     #	    |x|free(msg);
0x15ec6:	mov rdi, rax                        
0x15ec9:	call 0x1eeae                        
0x15ece:	add qword ptr [rbp - 0xe8], 0x8000  #    for (n = 0; n < flen; n |+|= COPY_BUFFER_SIZE)
0x15ed9:	mov rax, qword ptr [rbp - 0xe8]     #    for (n = 0; n |<| flen; n += COPY_BUFFER_SIZE)
0x15ee0:	cmp rax, qword ptr [rbp - 0xf0]     
0x15ee7:	jl 0x15ad8                          
0x15eed:	call 0x4990                         #    if (|g|etuid() == 0)
0x15ef2:	test eax, eax                       #    if |(|getuid() == 0)
0x15ef4:	jne 0x15f13                         
0x15ef6:	mov edx, dword ptr [rbp - 0x134]    #	|c|hown(dest, uid, gid);
0x15efc:	mov ecx, dword ptr [rbp - 0x130]    
0x15f02:	mov rax, qword ptr [rbp - 0x128]    
0x15f09:	mov esi, ecx                        
0x15f0b:	mov rdi, rax                        
0x15f0e:	call 0x4c90                         
0x15f13:	mov eax, dword ptr [rbp - 0x104]    #    |c|lose2(sfd, dfd);
0x15f19:	mov edi, eax                        
0x15f1b:	call 0x4a70                         
0x15f20:	mov eax, dword ptr [rbp - 0x100]    
0x15f26:	mov edi, eax                        
0x15f28:	call 0x4a70                         
0x15f2d:	mov rax, qword ptr [rbp - 0xc0]     #    |x|free2(buf, dest);
0x15f34:	mov rdi, rax                        
0x15f37:	call 0x1eeae                        
0x15f3c:	mov rax, qword ptr [rbp - 0x128]    
0x15f43:	mov rdi, rax                        
0x15f46:	call 0x1eeae                        
0x15f4b:	mov eax, 1                          #    return |S|D_OK;
0x15f50:	mov rdx, qword ptr [rbp - 0x18]     #|}|
0x15f54:	sub rdx, qword ptr fs:[0x28]        
0x15f5d:	je 0x15f64                          
0x15f5f:	call 0x4980                         #|}|
0x15f64:	mov rbx, qword ptr [rbp - 8]        
0x15f68:	leave                               
0x15f69:	ret                                 
0x15f6a:	endbr64                             #|{|
0x15f6e:	push rbp                            
0x15f6f:	mov rbp, rsp                        
0x15f72:	push rbx                            
0x15f73:	sub rsp, 0x198                      
0x15f7a:	mov qword ptr [rbp - 0x188], rdi    
0x15f81:	mov qword ptr [rbp - 0x190], rsi    
0x15f88:	mov qword ptr [rbp - 0x198], rdx    
0x15f8f:	mov dword ptr [rbp - 0x19c], ecx    
0x15f95:	mov rax, qword ptr fs:[0x28]        #|{|
0x15f9e:	mov qword ptr [rbp - 0x18], rax     
0x15fa2:	xor eax, eax                        
0x15fa4:	mov eax, dword ptr [rbp - 0x19c]    #    if (|S|_ISDIR(mode))
0x15faa:	and eax, 0xf000                     
0x15faf:	cmp eax, 0x4000                     #    if |(|S_ISDIR(mode))
0x15fb4:	jne 0x162ac                         
0x15fba:	lea rdx, [rbp - 0x140]              #	if (|x|stat(to, &to_statbuf) == 0)
0x15fc1:	mov rax, qword ptr [rbp - 0x198]    
0x15fc8:	mov rsi, rdx                        
0x15fcb:	mov rdi, rax                        
0x15fce:	call 0x1f0e4                        
0x15fd3:	test eax, eax                       #	if |(|xstat(to, &to_statbuf) == 0)
0x15fd5:	jne 0x160ea                         
0x15fdb:	mov eax, dword ptr [rbp - 0x128]    #	    if (!|S|_ISDIR(to_statbuf.st_mode))
0x15fe1:	and eax, 0xf000                     
0x15fe6:	cmp eax, 0x4000                     #	    if |(|!S_ISDIR(to_statbuf.st_mode))
0x15feb:	je 0x15ff7                          
0x15fed:	mov eax, 9                          #		return |F|T_INVAL;
0x15ff2:	jmp 0x167c6                         
0x15ff7:	mov rax, qword ptr [rbp - 0x198]    #	    temp = xmalloc(|s|trlen(to) + 1 + strlen(from) + 1);
0x15ffe:	mov rdi, rax                        
0x16001:	call 0x4960                         
0x16006:	mov rbx, rax                        
0x16009:	mov rax, qword ptr [rbp - 0x190]    #	    temp = xmalloc(strlen(to) + 1 + |s|trlen(from) + 1);
0x16010:	mov rdi, rax                        
0x16013:	call 0x4960                         
0x16018:	add rax, rbx                        #	    temp = xmalloc(strlen(to) + 1 |+| strlen(from) + 1);
0x1601b:	add rax, 2                          #	    temp = |x|malloc(strlen(to) + 1 + strlen(from) + 1);
0x1601f:	mov rdi, rax                        
0x16022:	call 0x24650                        
0x16027:	mov qword ptr [rbp - 0x148], rax    
0x1602e:	mov rcx, qword ptr [rbp - 0x190]    #	    |s|printf(temp, "%s/%s", to, from);
0x16035:	mov rdx, qword ptr [rbp - 0x198]    
0x1603c:	mov rax, qword ptr [rbp - 0x148]    
0x16043:	lea rsi, [rip + 0x12785]            
0x1604a:	mov rdi, rax                        
0x1604d:	mov eax, 0                          
0x16052:	call 0x4dd0                         
0x16057:	mov rax, qword ptr [rbp - 0x188]    #	    if (this|-|>chkdest && access(temp, 0) == 0)
0x1605e:	mov eax, dword ptr [rax + 0x90]     
0x16064:	test eax, eax                       #	    if |(|this->chkdest && access(temp, 0) == 0)
0x16066:	je 0x160db                          
0x16068:	mov rax, qword ptr [rbp - 0x148]    #	    if (this->chkdest && |a|ccess(temp, 0) == 0)
0x1606f:	mov esi, 0                          
0x16074:	mov rdi, rax                        
0x16077:	call 0x4d40                         
0x1607c:	test eax, eax                       #	    if (this->chkdest |&|& access(temp, 0) == 0)
0x1607e:	jne 0x160db                         
0x16080:	mov eax, 0                          #		|s|tatus_default();
0x16085:	call 0x10857                        
0x1608a:	mov rdx, qword ptr [rbp - 0x148]    #		error = |p|anel_warning(this, temp);
0x16091:	mov rax, qword ptr [rbp - 0x188]    
0x16098:	mov rsi, rdx                        
0x1609b:	mov rdi, rax                        
0x1609e:	mov eax, 0                          
0x160a3:	call 0x151b4                        
0x160a8:	mov dword ptr [rbp - 0x170], eax    
0x160ae:	mov eax, 0                          #		|t|ty_update();
0x160b3:	call 0xb4b7                         
0x160b8:	mov rax, qword ptr [rbp - 0x148]    #		|x|free(temp);
0x160bf:	mov rdi, rax                        
0x160c2:	call 0x1eeae                        
0x160c7:	cmp dword ptr [rbp - 0x170], 0      #		if |(|error)
0x160ce:	je 0x160ea                          
0x160d0:	mov eax, dword ptr [rbp - 0x170]    #		    return |e|rror;
0x160d6:	jmp 0x167c6                         
0x160db:	mov rax, qword ptr [rbp - 0x148]    #		|x|free(temp);
0x160e2:	mov rdi, rax                        
0x160e5:	call 0x1eeae                        
0x160ea:	mov rax, qword ptr [rbp - 0x190]    #	temp = xmalloc(32 + |s|trlen(from) + strlen(to) + 1);
0x160f1:	mov rdi, rax                        
0x160f4:	call 0x4960                         
0x160f9:	mov rbx, rax                        
0x160fc:	mov rax, qword ptr [rbp - 0x198]    #	temp = xmalloc(32 + strlen(from) + |s|trlen(to) + 1);
0x16103:	mov rdi, rax                        
0x16106:	call 0x4960                         
0x1610b:	add rax, rbx                        #	temp = xmalloc(32 + strlen(from) |+| strlen(to) + 1);
0x1610e:	add rax, 0x21                       #	temp = |x|malloc(32 + strlen(from) + strlen(to) + 1);
0x16112:	mov rdi, rax                        
0x16115:	call 0x24650                        
0x1611a:	mov qword ptr [rbp - 0x148], rax    
0x16121:	mov rax, qword ptr [rbp - 0x198]    #	to_file = |x|basename(to);
0x16128:	mov rdi, rax                        
0x1612b:	call 0x1f298                        
0x16130:	mov qword ptr [rbp - 0x168], rax    
0x16137:	mov rax, qword ptr [rbp - 0x168]    #	if (|*|to_file == '\0')
0x1613e:	movzx eax, byte ptr [rax]           
0x16141:	test al, al                         #	if |(|*to_file == '\0')
0x16143:	jne 0x1614f                         
0x16145:	mov eax, 4                          #	    return |T|_CREATERR;
0x1614a:	jmp 0x167c6                         
0x1614f:	mov rax, qword ptr [rbp - 0x190]    #	msg = xmalloc(32 + |s|trlen(from) + strlen(to));
0x16156:	mov rdi, rax                        
0x16159:	call 0x4960                         
0x1615e:	mov rbx, rax                        
0x16161:	mov rax, qword ptr [rbp - 0x198]    #	msg = xmalloc(32 + strlen(from) + |s|trlen(to));
0x16168:	mov rdi, rax                        
0x1616b:	call 0x4960                         
0x16170:	add rax, rbx                        #	msg = xmalloc(32 + strlen(from) |+| strlen(to));
0x16173:	add rax, 0x20                       #	msg = |x|malloc(32 + strlen(from) + strlen(to));
0x16177:	mov rdi, rax                        
0x1617a:	call 0x24650                        
0x1617f:	mov qword ptr [rbp - 0x150], rax    
0x16186:	mov rcx, qword ptr [rbp - 0x198]    #	|s|printf(msg, "(MOVE) mv -f \"%s\" \"%s\"", from, to);
0x1618d:	mov rdx, qword ptr [rbp - 0x190]    
0x16194:	mov rax, qword ptr [rbp - 0x150]    
0x1619b:	lea rsi, [rip + 0x12735]            
0x161a2:	mov rdi, rax                        
0x161a5:	mov eax, 0                          
0x161aa:	call 0x4dd0                         
0x161af:	mov rax, qword ptr [rbp - 0x150]    #	|s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
0x161b6:	mov edx, 1                          
0x161bb:	mov esi, 1                          
0x161c0:	mov rdi, rax                        
0x161c3:	call 0x107d0                        
0x161c8:	mov eax, 0                          #	|t|ty_update();
0x161cd:	call 0xb4b7                         
0x161d2:	mov rax, qword ptr [rbp - 0x150]    #	|x|free(msg);
0x161d9:	mov rdi, rax                        
0x161dc:	call 0x1eeae                        
0x161e1:	mov rcx, qword ptr [rbp - 0x198]    #	|s|printf(temp, "mv -f \"%s\" \"%s\"", from, to);
0x161e8:	mov rdx, qword ptr [rbp - 0x190]    
0x161ef:	mov rax, qword ptr [rbp - 0x148]    
0x161f6:	lea rsi, [rip + 0x126f1]            
0x161fd:	mov rdi, rax                        
0x16200:	mov eax, 0                          
0x16205:	call 0x4dd0                         
0x1620a:	mov rax, qword ptr [rbp - 0x148]    #	result = |s|tart(temp, 1);
0x16211:	mov esi, 1                          
0x16216:	mov rdi, rax                        
0x16219:	call 0x1f6f0                        
0x1621e:	mov dword ptr [rbp - 0x16c], eax    
0x16224:	mov rax, qword ptr [rbp - 0x148]    #	|x|free(temp);
0x1622b:	mov rdi, rax                        
0x1622e:	call 0x1eeae                        
0x16233:	mov rax, qword ptr [rbp - 0x188]    #	|t|ty_update_title(this->path);
0x1623a:	mov rax, qword ptr [rax + 0x18]     
0x1623e:	mov rdi, rax                        
0x16241:	call 0xd875                         
0x16246:	mov eax, dword ptr [rbp - 0x16c]    #	if (|W|IFSIGNALED(result))
0x1624c:	and eax, 0x7f                       
0x1624f:	add eax, 1                          
0x16252:	sar al, 1                           
0x16254:	test al, al                         #	if |(|WIFSIGNALED(result))
0x16256:	jle 0x16262                         
0x16258:	mov eax, 0xc                        #	    return |F|T_INTERRUPTED;
0x1625d:	jmp 0x167c6                         
0x16262:	mov eax, dword ptr [rbp - 0x16c]    #	if(|W|IFEXITED(result))
0x16268:	and eax, 0x7f                       
0x1626b:	test eax, eax                       #	if|(|WIFEXITED(result))
0x1626d:	jne 0x162a2                         
0x1626f:	mov eax, dword ptr [rbp - 0x16c]    #	    if(|W|EXITSTATUS(result) != 0)
0x16275:	sar eax, 8                          
0x16278:	movzx eax, al                       
0x1627b:	test eax, eax                       #	    if|(|WEXITSTATUS(result) != 0)
0x1627d:	je 0x16298                          
0x1627f:	lea rax, [rip + 0x12678]            #		|d|isplay_errors("mv");
0x16286:	mov rdi, rax                        
0x16289:	call 0x1f808                        
0x1628e:	mov eax, 8                          #		return |F|T_UNKNOWN;
0x16293:	jmp 0x167c6                         
0x16298:	mov eax, 1                          #	    return |F|T_OK;
0x1629d:	jmp 0x167c6                         
0x162a2:	mov eax, 8                          #	return |F|T_UNKNOWN;
0x162a7:	jmp 0x167c6                         
0x162ac:	mov rax, qword ptr [rbp - 0x198]    #    len = |s|trlen(to);
0x162b3:	mov rdi, rax                        
0x162b6:	call 0x4960                         
0x162bb:	mov qword ptr [rbp - 0x160], rax    
0x162c2:	mov rax, qword ptr [rbp - 0x198]    #    to  = |x|strdup(to);
0x162c9:	mov rdi, rax                        
0x162cc:	call 0x24780                        
0x162d1:	mov qword ptr [rbp - 0x198], rax    
0x162d8:	lea rdx, [rbp - 0x140]              #    if (|x|stat(to, &to_statbuf) == 0 && S_ISDIR(to_statbuf.st_mode))
0x162df:	mov rax, qword ptr [rbp - 0x198]    
0x162e6:	mov rsi, rdx                        
0x162e9:	mov rdi, rax                        
0x162ec:	call 0x1f0e4                        
0x162f1:	test eax, eax                       #    if |(|xstat(to, &to_statbuf) == 0 && S_ISDIR(to_statbuf.st_mode))
0x162f3:	jne 0x1637b                         
0x162f9:	mov eax, dword ptr [rbp - 0x128]    #    if (xstat(to, &to_statbuf) == 0 && |S|_ISDIR(to_statbuf.st_mode))
0x162ff:	and eax, 0xf000                     
0x16304:	cmp eax, 0x4000                     #    if (xstat(to, &to_statbuf) == 0 |&|& S_ISDIR(to_statbuf.st_mode))
0x16309:	jne 0x1637b                         
0x1630b:	mov rax, qword ptr [rbp - 0x190]    #	to = xrealloc(to, len + 1 + |s|trlen(from) + 1);
0x16312:	mov rdi, rax                        
0x16315:	call 0x4960                         
0x1631a:	mov rdx, qword ptr [rbp - 0x160]    #	to = xrealloc(to, len + 1 |+| strlen(from) + 1);
0x16321:	add rax, rdx                        
0x16324:	lea rdx, [rax + 2]                  #	to = |x|realloc(to, len + 1 + strlen(from) + 1);
0x16328:	mov rax, qword ptr [rbp - 0x198]    
0x1632f:	mov rsi, rdx                        
0x16332:	mov rdi, rax                        
0x16335:	call 0x24670                        
0x1633a:	mov qword ptr [rbp - 0x198], rax    
0x16341:	mov rax, qword ptr [rbp - 0x198]    #	|s|trcat(to, "/");
0x16348:	mov rdi, rax                        
0x1634b:	call 0x4960                         
0x16350:	mov rdx, rax                        
0x16353:	mov rax, qword ptr [rbp - 0x198]    
0x1635a:	add rax, rdx                        
0x1635d:	mov word ptr [rax], 0x2f            
0x16362:	mov rdx, qword ptr [rbp - 0x190]    #	|s|trcat(to, from);
0x16369:	mov rax, qword ptr [rbp - 0x198]    
0x16370:	mov rsi, rdx                        
0x16373:	mov rdi, rax                        
0x16376:	call 0x4db0                         
0x1637b:	mov rax, qword ptr [rbp - 0x198]    #    to_file = |x|basename(to);
0x16382:	mov rdi, rax                        
0x16385:	call 0x1f298                        
0x1638a:	mov qword ptr [rbp - 0x168], rax    
0x16391:	mov rax, qword ptr [rbp - 0x168]    #    if (|*|to_file == '\0')
0x16398:	movzx eax, byte ptr [rax]           
0x1639b:	test al, al                         #    if |(|*to_file == '\0')
0x1639d:	jne 0x163b8                         
0x1639f:	mov rax, qword ptr [rbp - 0x198]    #	|x|free(to);
0x163a6:	mov rdi, rax                        
0x163a9:	call 0x1eeae                        
0x163ae:	mov eax, 4                          #	return |T|_CREATERR;
0x163b3:	jmp 0x167c6                         
0x163b8:	mov rax, qword ptr [rbp - 0x168]    #    if |(|to_file == to)
0x163bf:	cmp rax, qword ptr [rbp - 0x198]    
0x163c6:	jne 0x1646b                         
0x163cc:	mov rax, qword ptr [rbp - 0x198]    #	char *temp = xmalloc(2 + (len = |s|trlen(to)) + 1);
0x163d3:	mov rdi, rax                        
0x163d6:	call 0x4960                         
0x163db:	mov qword ptr [rbp - 0x160], rax    
0x163e2:	mov rax, qword ptr [rbp - 0x160]    #	char *temp = |x|malloc(2 + (len = strlen(to)) + 1);
0x163e9:	add rax, 3                          
0x163ed:	mov rdi, rax                        
0x163f0:	call 0x24650                        
0x163f5:	mov qword ptr [rbp - 0x158], rax    
0x163fc:	mov rax, qword ptr [rbp - 0x158]    #	temp[0] |=| '.';
0x16403:	mov byte ptr [rax], 0x2e            
0x16406:	mov rax, qword ptr [rbp - 0x158]    #	temp|[|1] = '/';
0x1640d:	add rax, 1                          
0x16411:	mov byte ptr [rax], 0x2f            #	temp[1] |=| '/';
0x16414:	mov rax, qword ptr [rbp - 0x160]    #	|m|emcpy(temp + 2, to, len + 1);
0x1641b:	lea rdx, [rax + 1]                  
0x1641f:	mov rax, qword ptr [rbp - 0x158]    #	memcpy(temp |+| 2, to, len + 1);
0x16426:	lea rcx, [rax + 2]                  
0x1642a:	mov rax, qword ptr [rbp - 0x198]    #	|m|emcpy(temp + 2, to, len + 1);
0x16431:	mov rsi, rax                        
0x16434:	mov rdi, rcx                        
0x16437:	call 0x4b70                         
0x1643c:	mov rax, qword ptr [rbp - 0x198]    #	|x|free(to);
0x16443:	mov rdi, rax                        
0x16446:	call 0x1eeae                        
0x1644b:	mov rax, qword ptr [rbp - 0x158]    #	to |=| temp;
0x16452:	mov qword ptr [rbp - 0x198], rax    
0x16459:	mov rax, qword ptr [rbp - 0x198]    #	to_file |=| to + 2;
0x16460:	add rax, 2                          
0x16464:	mov qword ptr [rbp - 0x168], rax    
0x1646b:	mov rax, qword ptr [rbp - 0x188]    #    if (this|-|>chkdest && (access(to, 0) == 0))
0x16472:	mov eax, dword ptr [rax + 0x90]     
0x16478:	test eax, eax                       #    if |(|this->chkdest && (access(to, 0) == 0))
0x1647a:	je 0x164e0                          
0x1647c:	mov rax, qword ptr [rbp - 0x198]    #    if (this->chkdest && (|a|ccess(to, 0) == 0))
0x16483:	mov esi, 0                          
0x16488:	mov rdi, rax                        
0x1648b:	call 0x4d40                         
0x16490:	test eax, eax                       #    if (this->chkdest |&|& (access(to, 0) == 0))
0x16492:	jne 0x164e0                         
0x16494:	mov eax, 0                          #	|s|tatus_default();
0x16499:	call 0x10857                        
0x1649e:	mov rdx, qword ptr [rbp - 0x168]    #	error = |p|anel_warning(this, to_file);
0x164a5:	mov rax, qword ptr [rbp - 0x188]    
0x164ac:	mov rsi, rdx                        
0x164af:	mov rdi, rax                        
0x164b2:	mov eax, 0                          
0x164b7:	call 0x151b4                        
0x164bc:	mov dword ptr [rbp - 0x170], eax    
0x164c2:	mov eax, 0                          #	|t|ty_update();
0x164c7:	call 0xb4b7                         
0x164cc:	cmp dword ptr [rbp - 0x170], 0      #	if |(|error)
0x164d3:	je 0x164e0                          
0x164d5:	mov eax, dword ptr [rbp - 0x170]    #	    return |e|rror;
0x164db:	jmp 0x167c6                         
0x164e0:	mov rax, qword ptr [rbp - 0x190]    #    msg = xmalloc(32 + |s|trlen(from));
0x164e7:	mov rdi, rax                        
0x164ea:	call 0x4960                         
0x164ef:	add rax, 0x20                       #    msg = |x|malloc(32 + strlen(from));
0x164f3:	mov rdi, rax                        
0x164f6:	call 0x24650                        
0x164fb:	mov qword ptr [rbp - 0x150], rax    
0x16502:	mov rdx, qword ptr [rbp - 0x190]    #    |s|printf(msg, "(MOVE) %s", from);
0x16509:	mov rax, qword ptr [rbp - 0x150]    
0x16510:	lea rcx, [rip + 0x123ea]            
0x16517:	mov rsi, rcx                        
0x1651a:	mov rdi, rax                        
0x1651d:	mov eax, 0                          
0x16522:	call 0x4dd0                         
0x16527:	mov rax, qword ptr [rbp - 0x150]    #    |s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
0x1652e:	mov edx, 1                          
0x16533:	mov esi, 1                          
0x16538:	mov rdi, rax                        
0x1653b:	call 0x107d0                        
0x16540:	mov eax, 0                          #    |t|ty_update();
0x16545:	call 0xb4b7                         
0x1654a:	mov rax, qword ptr [rbp - 0x150]    #    |x|free(msg);
0x16551:	mov rdi, rax                        
0x16554:	call 0x1eeae                        
0x16559:	lea rdx, [rbp - 0xb0]               #    if (|x|stat(from, &from_statbuf) == -1)
0x16560:	mov rax, qword ptr [rbp - 0x190]    
0x16567:	mov rsi, rdx                        
0x1656a:	mov rdi, rax                        
0x1656d:	call 0x1f0e4                        
0x16572:	cmp eax, -1                         #    if |(|xstat(from, &from_statbuf) == -1)
0x16575:	jne 0x16581                         
0x16577:	mov eax, 6                          #	return |F|_STATERR;
0x1657c:	jmp 0x167c6                         
0x16581:	lea rdx, [rbp - 0x140]              #    if (|x|stat(to, &to_statbuf) == -1)
0x16588:	mov rax, qword ptr [rbp - 0x198]    
0x1658f:	mov rsi, rdx                        
0x16592:	mov rdi, rax                        
0x16595:	call 0x1f0e4                        
0x1659a:	cmp eax, -1                         #    if |(|xstat(to, &to_statbuf) == -1)
0x1659d:	jne 0x16631                         
0x165a3:	mov rax, qword ptr [rbp - 0x168]    #	char |c| = *(to_file - 1);
0x165aa:	movzx eax, byte ptr [rax - 1]       
0x165ae:	mov byte ptr [rbp - 0x171], al      
0x165b4:	mov rax, qword ptr [rbp - 0x168]    #	*(to_file |-| 1) = 0;
0x165bb:	sub rax, 1                          
0x165bf:	mov byte ptr [rax], 0               #	*(to_file - 1) |=| 0;
0x165c2:	mov rax, qword ptr [rbp - 0x198]    #	error = (|*|to) ? xstat(to, &to_statbuf) : xstat("/", &to_statbuf);
0x165c9:	movzx eax, byte ptr [rax]           
0x165cc:	test al, al                         #	error = (*to) ? xstat(to, &to_statbuf) |:| xstat("/", &to_statbuf);
0x165ce:	je 0x165eb                          
0x165d0:	lea rdx, [rbp - 0x140]              #	error = (*to) ? |x|stat(to, &to_statbuf) : xstat("/", &to_statbuf);
0x165d7:	mov rax, qword ptr [rbp - 0x198]    
0x165de:	mov rsi, rdx                        
0x165e1:	mov rdi, rax                        
0x165e4:	call 0x1f0e4                        
0x165e9:	jmp 0x16604                         
0x165eb:	lea rax, [rbp - 0x140]              #	error = (*to) ? xstat(to, &to_statbuf) : |x|stat("/", &to_statbuf);
0x165f2:	mov rsi, rax                        
0x165f5:	lea rax, [rip + 0x11fa8]            
0x165fc:	mov rdi, rax                        
0x165ff:	call 0x1f0e4                        
0x16604:	mov dword ptr [rbp - 0x170], eax    #	error |=| (*to) ? xstat(to, &to_statbuf) : xstat("/", &to_statbuf);
0x1660a:	mov rax, qword ptr [rbp - 0x168]    #	*(to_file |-| 1) = c;
0x16611:	lea rdx, [rax - 1]                  
0x16615:	movzx eax, byte ptr [rbp - 0x171]   #	*(to_file - 1) |=| c;
0x1661c:	mov byte ptr [rdx], al              
0x1661e:	cmp dword ptr [rbp - 0x170], -1     #	if |(|error == -1)
0x16625:	jne 0x16631                         
0x16627:	mov eax, 7                          #	    return |T|_STATERR;
0x1662c:	jmp 0x167c6                         
0x16631:	mov rdx, qword ptr [rbp - 0x140]    #    if (to_statbuf|.|st_dev != from_statbuf.st_dev
0x16638:	mov rax, qword ptr [rbp - 0xb0]     #    if (to_statbuf.st_dev != from_statbuf|.|st_dev
0x1663f:	cmp rdx, rax                        #    if |(|to_statbuf.st_dev != from_statbuf.st_dev
0x16642:	jne 0x16656                         
0x16644:	mov rax, qword ptr [rbp - 0x188]    #	|| this|-|>msdosfs
0x1664b:	mov eax, dword ptr [rax + 0x10]     
0x1664e:	test eax, eax                       #	|||| this->msdosfs
0x16650:	je 0x16740                          
0x16656:	mov r8d, dword ptr [rbp - 0x90]     #	error = |p|anel_copy(this, from, to,
0x1665d:	mov edi, dword ptr [rbp - 0x94]     
0x16663:	mov ecx, dword ptr [rbp - 0x98]     
0x16669:	mov rdx, qword ptr [rbp - 0x198]    
0x16670:	mov rsi, qword ptr [rbp - 0x190]    
0x16677:	mov rax, qword ptr [rbp - 0x188]    
0x1667e:	mov r9d, r8d                        
0x16681:	mov r8d, edi                        
0x16684:	mov rdi, rax                        
0x16687:	mov eax, 0                          
0x1668c:	call 0x1537d                        
0x16691:	mov dword ptr [rbp - 0x170], eax    
0x16697:	cmp dword ptr [rbp - 0x170], 8      #	|s|witch (error)
0x1669e:	je 0x166e5                          
0x166a0:	cmp dword ptr [rbp - 0x170], 8      
0x166a7:	jg 0x166ef                          
0x166a9:	cmp dword ptr [rbp - 0x170], 3      
0x166b0:	je 0x166db                          
0x166b2:	cmp dword ptr [rbp - 0x170], 3      
0x166b9:	jg 0x166ef                          
0x166bb:	cmp dword ptr [rbp - 0x170], 1      
0x166c2:	je 0x167a2                          
0x166c8:	cmp dword ptr [rbp - 0x170], 2      
0x166cf:	jne 0x166ef                         
0x166d1:	mov eax, 2                          #	    case SD_CANCEL:	return |F|T_CANCEL;
0x166d6:	jmp 0x167c6                         
0x166db:	mov eax, 3                          #	    case SD_SKIP:	return |F|T_SKIP;
0x166e0:	jmp 0x167c6                         
0x166e5:	mov eax, 0xa                        #	    case SD_NOSPACE:	return |F|T_NOSPACE;
0x166ea:	jmp 0x167c6                         
0x166ef:	mov eax, dword ptr [rbp - 0x170]    #				 from, copyerr[error |-| 1],
0x166f5:	sub eax, 1                          
0x166f8:	cdqe                                #		|p|anel_3s_message("%s: Copy failed, %s.",
0x166fa:	lea rdx, [rax*8]                    
0x16702:	lea rax, [rip + 0x19e77]            
0x16709:	mov rdx, qword ptr [rdx + rax]      
0x1670d:	mov rax, qword ptr [rbp - 0x190]    
0x16714:	mov r8d, 0xe                        
0x1671a:	mov ecx, 0                          
0x1671f:	mov rsi, rax                        
0x16722:	lea rax, [rip + 0x121e2]            
0x16729:	mov rdi, rax                        
0x1672c:	mov eax, 0                          
0x16731:	call 0x115fd                        
0x16736:	mov eax, 0xb                        #		return |F|T_COPY;
0x1673b:	jmp 0x167c6                         
0x16740:	mov eax, 0                          #    |s|ervice_pending_signals();
0x16745:	call 0x1ea4b                        
0x1674a:	mov eax, dword ptr [rbp - 0x128]    #    if (|S|_ISREG(to_statbuf.st_mode) || S_ISDIR(to_statbuf.st_mode))
0x16750:	and eax, 0xf000                     
0x16755:	cmp eax, 0x8000                     #    if |(|S_ISREG(to_statbuf.st_mode) || S_ISDIR(to_statbuf.st_mode))
0x1675a:	je 0x1676e                          
0x1675c:	mov eax, dword ptr [rbp - 0x128]    #    if (S_ISREG(to_statbuf.st_mode) || |S|_ISDIR(to_statbuf.st_mode))
0x16762:	and eax, 0xf000                     
0x16767:	cmp eax, 0x4000                     #    if (S_ISREG(to_statbuf.st_mode) |||| S_ISDIR(to_statbuf.st_mode))
0x1676c:	jne 0x167a5                         
0x1676e:	mov rax, qword ptr [rbp - 0x198]    #	|u|nlink(to);
0x16775:	mov rdi, rax                        
0x16778:	call 0x4830                         
0x1677d:	mov rdx, qword ptr [rbp - 0x198]    #	if (|l|ink(from, to) == -1)
0x16784:	mov rax, qword ptr [rbp - 0x190]    
0x1678b:	mov rsi, rdx                        
0x1678e:	mov rdi, rax                        
0x16791:	call 0x4de0                         
0x16796:	cmp eax, -1                         #	if |(|link(from, to) == -1)
0x16799:	jne 0x167a5                         
0x1679b:	mov eax, 4                          #	    return |T|_CREATERR;
0x167a0:	jmp 0x167c6                         
0x167a2:	nop                                 #	    case SD_OK:		|g|oto remove_from;
0x167a3:	jmp 0x167a6                         
0x167a5:	nop                                 #  |r|emove_from:
0x167a6:	mov rax, qword ptr [rbp - 0x190]    #    if (|u|nlink(from) == -1)
0x167ad:	mov rdi, rax                        
0x167b0:	call 0x4830                         
0x167b5:	cmp eax, -1                         #    if |(|unlink(from) == -1)
0x167b8:	jne 0x167c1                         
0x167ba:	mov eax, 5                          #	return |F|_DELETERR;
0x167bf:	jmp 0x167c6                         
0x167c1:	mov eax, 1                          #    return |F|T_OK;
0x167c6:	mov rdx, qword ptr [rbp - 0x18]     #|}|
0x167ca:	sub rdx, qword ptr fs:[0x28]        
0x167d3:	je 0x167da                          
0x167d5:	call 0x4980                         #|}|
0x167da:	mov rbx, qword ptr [rbp - 8]        
0x167de:	leave                               
0x167df:	ret                                 
0x167e0:	endbr64                             #|{|
0x167e4:	push rbp                            
0x167e5:	mov rbp, rsp                        
0x167e8:	sub rsp, 0x30                       
0x167ec:	mov qword ptr [rbp - 0x28], rdi     
0x167f0:	mov qword ptr [rbp - 0x30], rsi     
0x167f4:	mov rax, qword ptr [rbp - 0x30]     #    size_t len = |s|trlen(str);
0x167f8:	mov rdi, rax                        
0x167fb:	call 0x4960                         
0x16800:	mov qword ptr [rbp - 0x10], rax     
0x16804:	mov rax, qword ptr [rbp - 0x10]     #    char *temp = |x|malloc(len + 1);
0x16808:	add rax, 1                          
0x1680c:	mov rdi, rax                        
0x1680f:	call 0x24650                        
0x16814:	mov qword ptr [rbp - 8], rax        
0x16818:	mov rax, qword ptr [rbp - 0x28]     #    len = |m|in(len, (size_t)this->maxname);
0x1681c:	mov eax, dword ptr [rax + 0x30]     
0x1681f:	cdqe                                
0x16821:	mov rdx, qword ptr [rbp - 0x10]     #    len |=| min(len, (size_t)this->maxname);
0x16825:	cmp rdx, rax                        
0x16828:	cmovbe rax, rdx                     
0x1682c:	mov qword ptr [rbp - 0x10], rax     
0x16830:	mov rdx, qword ptr [rbp - 0x10]     #    |s|trncpy(temp, str, len);
0x16834:	mov rcx, qword ptr [rbp - 0x30]     
0x16838:	mov rax, qword ptr [rbp - 8]        
0x1683c:	mov rsi, rcx                        
0x1683f:	mov rdi, rax                        
0x16842:	call 0x4840                         
0x16847:	mov rdx, qword ptr [rbp - 8]        #    temp|[|len] = 0;
0x1684b:	mov rax, qword ptr [rbp - 0x10]     
0x1684f:	add rax, rdx                        
0x16852:	mov byte ptr [rax], 0               #    temp[len] |=| 0;
0x16855:	mov dword ptr [rbp - 0x14], 0       #    for (entry |=| 0; entry < this->entries; entry++)
0x1685c:	jmp 0x16897                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x1685e:	mov rax, qword ptr [rbp - 0x28]     #	if (strcmp(temp, this|-|>dir_entry[entry].name) == 0)
0x16862:	mov rcx, qword ptr [rax + 0x38]     
0x16866:	mov eax, dword ptr [rbp - 0x14]     #	if (strcmp(temp, this->dir_entry|[|entry].name) == 0)
0x16869:	movsxd rdx, eax                     
0x1686c:	mov rax, rdx                        
0x1686f:	shl rax, 2                          
0x16873:	add rax, rdx                        
0x16876:	shl rax, 4                          
0x1687a:	add rax, rcx                        
0x1687d:	mov rdx, qword ptr [rax]            #	if (strcmp(temp, this->dir_entry[entry]|.|name) == 0)
0x16880:	mov rax, qword ptr [rbp - 8]        #	if (|s|trcmp(temp, this->dir_entry[entry].name) == 0)
0x16884:	mov rsi, rdx                        
0x16887:	mov rdi, rax                        
0x1688a:	call 0x4af0                         
0x1688f:	test eax, eax                       #	if |(|strcmp(temp, this->dir_entry[entry].name) == 0)
0x16891:	je 0x168a5                          
0x16893:	add dword ptr [rbp - 0x14], 1       #    for (entry = 0; entry < this->entries; entry|+|+)
0x16897:	mov rax, qword ptr [rbp - 0x28]     #    for (entry = 0; entry < this|-|>entries; entry++)
0x1689b:	mov eax, dword ptr [rax + 0x68]     
0x1689e:	cmp dword ptr [rbp - 0x14], eax     #    for (entry = 0; entry |<| this->entries; entry++)
0x168a1:	jl 0x1685e                          
0x168a3:	jmp 0x168a6                         
0x168a5:	nop                                 #	    |b|reak;
0x168a6:	mov rax, qword ptr [rbp - 0x28]     #    if (entry != this|-|>entries)
0x168aa:	mov eax, dword ptr [rax + 0x68]     
0x168ad:	cmp dword ptr [rbp - 0x14], eax     #    if |(|entry != this->entries)
0x168b0:	jne 0x16ab2                         
0x168b6:	mov dword ptr [rbp - 0x14], 0       #    for (entry |=| 0; entry < this->entries; entry++)
0x168bd:	jmp 0x168f8                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x168bf:	mov rax, qword ptr [rbp - 0x28]     #	if (strcasecmp(temp, this|-|>dir_entry[entry].name) == 0)
0x168c3:	mov rcx, qword ptr [rax + 0x38]     
0x168c7:	mov eax, dword ptr [rbp - 0x14]     #	if (strcasecmp(temp, this->dir_entry|[|entry].name) == 0)
0x168ca:	movsxd rdx, eax                     
0x168cd:	mov rax, rdx                        
0x168d0:	shl rax, 2                          
0x168d4:	add rax, rdx                        
0x168d7:	shl rax, 4                          
0x168db:	add rax, rcx                        
0x168de:	mov rdx, qword ptr [rax]            #	if (strcasecmp(temp, this->dir_entry[entry]|.|name) == 0)
0x168e1:	mov rax, qword ptr [rbp - 8]        #	if (|s|trcasecmp(temp, this->dir_entry[entry].name) == 0)
0x168e5:	mov rsi, rdx                        
0x168e8:	mov rdi, rax                        
0x168eb:	call 0x47f0                         
0x168f0:	test eax, eax                       #	if |(|strcasecmp(temp, this->dir_entry[entry].name) == 0)
0x168f2:	je 0x16906                          
0x168f4:	add dword ptr [rbp - 0x14], 1       #    for (entry = 0; entry < this->entries; entry|+|+)
0x168f8:	mov rax, qword ptr [rbp - 0x28]     #    for (entry = 0; entry < this|-|>entries; entry++)
0x168fc:	mov eax, dword ptr [rax + 0x68]     
0x168ff:	cmp dword ptr [rbp - 0x14], eax     #    for (entry = 0; entry |<| this->entries; entry++)
0x16902:	jl 0x168bf                          
0x16904:	jmp 0x16907                         
0x16906:	nop                                 #	    |b|reak;
0x16907:	mov rax, qword ptr [rbp - 0x28]     #    if (entry != this|-|>entries)
0x1690b:	mov eax, dword ptr [rax + 0x68]     
0x1690e:	cmp dword ptr [rbp - 0x14], eax     #    if |(|entry != this->entries)
0x16911:	jne 0x16ab5                         
0x16917:	mov dword ptr [rbp - 0x14], 0       #    for (entry |=| 0; entry < this->entries; entry++)
0x1691e:	jmp 0x169bf                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x16923:	mov rax, qword ptr [rbp - 0x28]     #		    |m|in(len, strlen(this->dir_entry[entry].name))) == 0)
0x16927:	mov rcx, qword ptr [rax + 0x38]     
0x1692b:	mov eax, dword ptr [rbp - 0x14]     
0x1692e:	movsxd rdx, eax                     
0x16931:	mov rax, rdx                        
0x16934:	shl rax, 2                          
0x16938:	add rax, rdx                        
0x1693b:	shl rax, 4                          
0x1693f:	add rax, rcx                        
0x16942:	mov rax, qword ptr [rax]            
0x16945:	mov rdi, rax                        
0x16948:	call 0x4960                         
0x1694d:	cmp qword ptr [rbp - 0x10], rax     #	if (|s|trncmp(temp, this->dir_entry[entry].name,
0x16951:	jbe 0x16982                         
0x16953:	mov rax, qword ptr [rbp - 0x28]     #		    |m|in(len, strlen(this->dir_entry[entry].name))) == 0)
0x16957:	mov rcx, qword ptr [rax + 0x38]     
0x1695b:	mov eax, dword ptr [rbp - 0x14]     
0x1695e:	movsxd rdx, eax                     
0x16961:	mov rax, rdx                        
0x16964:	shl rax, 2                          
0x16968:	add rax, rdx                        
0x1696b:	shl rax, 4                          
0x1696f:	add rax, rcx                        
0x16972:	mov rax, qword ptr [rax]            
0x16975:	mov rdi, rax                        
0x16978:	call 0x4960                         
0x1697d:	mov rdx, rax                        
0x16980:	jmp 0x16986                         
0x16982:	mov rdx, qword ptr [rbp - 0x10]     #	if (|s|trncmp(temp, this->dir_entry[entry].name,
0x16986:	mov rax, qword ptr [rbp - 0x28]     #	if (strncmp(temp, this|-|>dir_entry[entry].name,
0x1698a:	mov rsi, qword ptr [rax + 0x38]     
0x1698e:	mov eax, dword ptr [rbp - 0x14]     #	if (strncmp(temp, this->dir_entry|[|entry].name,
0x16991:	movsxd rcx, eax                     
0x16994:	mov rax, rcx                        
0x16997:	shl rax, 2                          
0x1699b:	add rax, rcx                        
0x1699e:	shl rax, 4                          
0x169a2:	add rax, rsi                        
0x169a5:	mov rcx, qword ptr [rax]            #	if (strncmp(temp, this->dir_entry[entry]|.|name,
0x169a8:	mov rax, qword ptr [rbp - 8]        #	if (|s|trncmp(temp, this->dir_entry[entry].name,
0x169ac:	mov rsi, rcx                        
0x169af:	mov rdi, rax                        
0x169b2:	call 0x4850                         
0x169b7:	test eax, eax                       #	if |(|strncmp(temp, this->dir_entry[entry].name,
0x169b9:	je 0x169d1                          
0x169bb:	add dword ptr [rbp - 0x14], 1       #    for (entry = 0; entry < this->entries; entry|+|+)
0x169bf:	mov rax, qword ptr [rbp - 0x28]     #    for (entry = 0; entry < this|-|>entries; entry++)
0x169c3:	mov eax, dword ptr [rax + 0x68]     
0x169c6:	cmp dword ptr [rbp - 0x14], eax     #    for (entry = 0; entry |<| this->entries; entry++)
0x169c9:	jl 0x16923                          
0x169cf:	jmp 0x169d2                         
0x169d1:	nop                                 #	    |b|reak;
0x169d2:	mov rax, qword ptr [rbp - 0x28]     #    if (entry != this|-|>entries)
0x169d6:	mov eax, dword ptr [rax + 0x68]     
0x169d9:	cmp dword ptr [rbp - 0x14], eax     #    if |(|entry != this->entries)
0x169dc:	jne 0x16ab8                         
0x169e2:	mov dword ptr [rbp - 0x14], 0       #    for (entry |=| 0; entry < this->entries; entry++)
0x169e9:	jmp 0x16a8a                         #    |f|or (entry = 0; entry < this->entries; entry++)
0x169ee:	mov rax, qword ptr [rbp - 0x28]     #			|m|in(len, strlen(this->dir_entry[entry].name))) == 0)
0x169f2:	mov rcx, qword ptr [rax + 0x38]     
0x169f6:	mov eax, dword ptr [rbp - 0x14]     
0x169f9:	movsxd rdx, eax                     
0x169fc:	mov rax, rdx                        
0x169ff:	shl rax, 2                          
0x16a03:	add rax, rdx                        
0x16a06:	shl rax, 4                          
0x16a0a:	add rax, rcx                        
0x16a0d:	mov rax, qword ptr [rax]            
0x16a10:	mov rdi, rax                        
0x16a13:	call 0x4960                         
0x16a18:	cmp qword ptr [rbp - 0x10], rax     #	if (|s|trncasecmp(temp, this->dir_entry[entry].name,
0x16a1c:	jbe 0x16a4d                         
0x16a1e:	mov rax, qword ptr [rbp - 0x28]     #			|m|in(len, strlen(this->dir_entry[entry].name))) == 0)
0x16a22:	mov rcx, qword ptr [rax + 0x38]     
0x16a26:	mov eax, dword ptr [rbp - 0x14]     
0x16a29:	movsxd rdx, eax                     
0x16a2c:	mov rax, rdx                        
0x16a2f:	shl rax, 2                          
0x16a33:	add rax, rdx                        
0x16a36:	shl rax, 4                          
0x16a3a:	add rax, rcx                        
0x16a3d:	mov rax, qword ptr [rax]            
0x16a40:	mov rdi, rax                        
0x16a43:	call 0x4960                         
0x16a48:	mov rdx, rax                        
0x16a4b:	jmp 0x16a51                         
0x16a4d:	mov rdx, qword ptr [rbp - 0x10]     #	if (|s|trncasecmp(temp, this->dir_entry[entry].name,
0x16a51:	mov rax, qword ptr [rbp - 0x28]     #	if (strncasecmp(temp, this|-|>dir_entry[entry].name,
0x16a55:	mov rsi, qword ptr [rax + 0x38]     
0x16a59:	mov eax, dword ptr [rbp - 0x14]     #	if (strncasecmp(temp, this->dir_entry|[|entry].name,
0x16a5c:	movsxd rcx, eax                     
0x16a5f:	mov rax, rcx                        
0x16a62:	shl rax, 2                          
0x16a66:	add rax, rcx                        
0x16a69:	shl rax, 4                          
0x16a6d:	add rax, rsi                        
0x16a70:	mov rcx, qword ptr [rax]            #	if (strncasecmp(temp, this->dir_entry[entry]|.|name,
0x16a73:	mov rax, qword ptr [rbp - 8]        #	if (|s|trncasecmp(temp, this->dir_entry[entry].name,
0x16a77:	mov rsi, rcx                        
0x16a7a:	mov rdi, rax                        
0x16a7d:	call 0x4c00                         
0x16a82:	test eax, eax                       #	if |(|strncasecmp(temp, this->dir_entry[entry].name,
0x16a84:	je 0x16a9c                          
0x16a86:	add dword ptr [rbp - 0x14], 1       #    for (entry = 0; entry < this->entries; entry|+|+)
0x16a8a:	mov rax, qword ptr [rbp - 0x28]     #    for (entry = 0; entry < this|-|>entries; entry++)
0x16a8e:	mov eax, dword ptr [rax + 0x68]     
0x16a91:	cmp dword ptr [rbp - 0x14], eax     #    for (entry = 0; entry |<| this->entries; entry++)
0x16a94:	jl 0x169ee                          
0x16a9a:	jmp 0x16a9d                         
0x16a9c:	nop                                 #	    |b|reak;
0x16a9d:	mov rax, qword ptr [rbp - 0x28]     #    if (entry == this|-|>entries)
0x16aa1:	mov eax, dword ptr [rax + 0x68]     
0x16aa4:	cmp dword ptr [rbp - 0x14], eax     #    if |(|entry == this->entries)
0x16aa7:	jne 0x16abb                         
0x16aa9:	mov dword ptr [rbp - 0x14], 0       #	entry |=| 0;
0x16ab0:	jmp 0x16abc                         
0x16ab2:	nop                                 #	|g|oto done;
0x16ab3:	jmp 0x16abc                         
0x16ab5:	nop                                 #	|g|oto done;
0x16ab6:	jmp 0x16abc                         
0x16ab8:	nop                                 #	|g|oto done;
0x16ab9:	jmp 0x16abc                         
0x16abb:	nop                                 #  |d|one:
0x16abc:	mov rax, qword ptr [rbp - 8]        #    |x|free(temp);
0x16ac0:	mov rdi, rax                        
0x16ac3:	call 0x1eeae                        
0x16ac8:	mov eax, dword ptr [rbp - 0x14]     #    return |e|ntry;
0x16acb:	leave                               #|}|
0x16acc:	ret                                 
0x16acd:	endbr64                             #|{|
0x16ad1:	push rbp                            
0x16ad2:	mov rbp, rsp                        
0x16ad5:	sub rsp, 0x40                       
0x16ad9:	mov qword ptr [rbp - 0x38], rdi     
0x16add:	mov qword ptr [rbp - 0x40], rsi     
0x16ae1:	mov rax, qword ptr [rbp - 0x38]     #    char *name = this|-|>dir_entry[this->current_entry].name;
0x16ae5:	mov rcx, qword ptr [rax + 0x38]     
0x16ae9:	mov rax, qword ptr [rbp - 0x38]     #    char *name = this->dir_entry[this|-|>current_entry].name;
0x16aed:	mov eax, dword ptr [rax + 0x28]     
0x16af0:	movsxd rdx, eax                     
0x16af3:	mov rax, rdx                        #    char *name = this->dir_entry|[|this->current_entry].name;
0x16af6:	shl rax, 2                          
0x16afa:	add rax, rdx                        
0x16afd:	shl rax, 4                          
0x16b01:	add rax, rcx                        
0x16b04:	mov rax, qword ptr [rax]            #    char *|n|ame = this->dir_entry[this->current_entry].name;
0x16b07:	mov qword ptr [rbp - 0x20], rax     
0x16b0b:	mov rax, qword ptr [rbp - 0x38]     #    switch (this|-|>dir_entry[this->current_entry].type)
0x16b0f:	mov rcx, qword ptr [rax + 0x38]     
0x16b13:	mov rax, qword ptr [rbp - 0x38]     #    switch (this->dir_entry[this|-|>current_entry].type)
0x16b17:	mov eax, dword ptr [rax + 0x28]     
0x16b1a:	movsxd rdx, eax                     
0x16b1d:	mov rax, rdx                        #    switch (this->dir_entry|[|this->current_entry].type)
0x16b20:	shl rax, 2                          
0x16b24:	add rax, rdx                        
0x16b27:	shl rax, 4                          
0x16b2b:	add rax, rcx                        
0x16b2e:	movzx eax, byte ptr [rax + 0x48]    #    switch (this->dir_entry[this->current_entry]|.|type)
0x16b32:	movsx eax, al                       
0x16b35:	test eax, eax                       #    |s|witch (this->dir_entry[this->current_entry].type)
0x16b37:	je 0x16b47                          
0x16b39:	cmp eax, 1                          
0x16b3c:	je 0x16d2f                          
0x16b42:	jmp 0x16e18                         
0x16b47:	mov rax, qword ptr [rbp - 0x20]     #	    if (|s|trcmp(name, "..") == 0 && strcmp(this->path, "/") == 0)
0x16b4b:	lea rdx, [rip + 0x11a8c]            
0x16b52:	mov rsi, rdx                        
0x16b55:	mov rdi, rax                        
0x16b58:	call 0x4af0                         
0x16b5d:	test eax, eax                       #	    if |(|strcmp(name, "..") == 0 && strcmp(this->path, "/") == 0)
0x16b5f:	jne 0x16b83                         
0x16b61:	mov rax, qword ptr [rbp - 0x38]     #	    if (strcmp(name, "..") == 0 && strcmp(this|-|>path, "/") == 0)
0x16b65:	mov rax, qword ptr [rax + 0x18]     
0x16b69:	lea rdx, [rip + 0x11a34]            #	    if (strcmp(name, "..") == 0 && |s|trcmp(this->path, "/") == 0)
0x16b70:	mov rsi, rdx                        
0x16b73:	mov rdi, rax                        
0x16b76:	call 0x4af0                         
0x16b7b:	test eax, eax                       #	    if (strcmp(name, "..") == 0 |&|& strcmp(this->path, "/") == 0)
0x16b7d:	je 0x16e14                          
0x16b83:	mov rax, qword ptr [rbp - 0x20]     #	    back = (|s|trcmp(name, "..") == 0) ? 1 : 0;
0x16b87:	lea rdx, [rip + 0x11a50]            
0x16b8e:	mov rsi, rdx                        
0x16b91:	mov rdi, rax                        
0x16b94:	call 0x4af0                         
0x16b99:	test eax, eax                       #	    back = (strcmp(name, "..") == 0) ? 1 |:| 0;
0x16b9b:	sete al                             
0x16b9e:	movzx eax, al                       #	    back |=| (strcmp(name, "..") == 0) ? 1 : 0;
0x16ba1:	mov dword ptr [rbp - 0x28], eax     
0x16ba4:	mov rax, qword ptr [rbp - 0x38]     #	    old_path = xmalloc(this|-|>pathlen + 1);
0x16ba8:	mov rax, qword ptr [rax + 0x78]     
0x16bac:	add rax, 1                          #	    old_path = |x|malloc(this->pathlen + 1);
0x16bb0:	mov rdi, rax                        
0x16bb3:	call 0x24650                        
0x16bb8:	mov qword ptr [rbp - 0x10], rax     
0x16bbc:	mov rax, qword ptr [rbp - 0x38]     #	    strcpy(old_path, this|-|>path);
0x16bc0:	mov rdx, qword ptr [rax + 0x18]     
0x16bc4:	mov rax, qword ptr [rbp - 0x10]     #	    |s|trcpy(old_path, this->path);
0x16bc8:	mov rsi, rdx                        
0x16bcb:	mov rdi, rax                        
0x16bce:	call 0x4870                         
0x16bd3:	mov rcx, qword ptr [rbp - 0x20]     #	    if (!|p|anel_read_directory(this, name, ON))
0x16bd7:	mov rax, qword ptr [rbp - 0x38]     
0x16bdb:	mov edx, 1                          
0x16be0:	mov rsi, rcx                        
0x16be3:	mov rdi, rax                        
0x16be6:	mov eax, 0                          
0x16beb:	call 0x12238                        
0x16bf0:	test eax, eax                       #	    if |(|!panel_read_directory(this, name, ON))
0x16bf2:	jne 0x16c46                         
0x16bf4:	cmp dword ptr [rbp - 0x28], 0       #		if |(|back)
0x16bf8:	je 0x16c1c                          
0x16bfa:	mov rax, qword ptr [rbp - 0x38]     #		    |p|anel_recover(this);
0x16bfe:	mov rdi, rax                        
0x16c01:	mov eax, 0                          
0x16c06:	call 0x116a7                        
0x16c0b:	mov rax, qword ptr [rbp - 0x38]     #		    |p|anel_update(this);
0x16c0f:	mov rdi, rax                        
0x16c12:	call 0x14e6a                        
0x16c17:	jmp 0x16e18                         #		|b|reak;
0x16c1c:	mov rax, qword ptr [rbp - 0x20]     #		    |p|anel_2s_message("%s/: Permission denied.",
0x16c20:	mov ecx, 0x1c                       
0x16c25:	mov edx, 0                          
0x16c2a:	mov rsi, rax                        
0x16c2d:	lea rax, [rip + 0x11958]            
0x16c34:	mov rdi, rax                        
0x16c37:	mov eax, 0                          
0x16c3c:	call 0x11568                        
0x16c41:	jmp 0x16e18                         #		|b|reak;
0x16c46:	cmp dword ptr [rbp - 0x28], 0       #	    if |(|back)
0x16c4a:	je 0x16c99                          
0x16c4c:	mov rax, qword ptr [rbp - 0x10]     #		old_entry_name = |s|trrchr(old_path, '/');
0x16c50:	mov esi, 0x2f                       
0x16c55:	mov rdi, rax                        
0x16c58:	call 0x49e0                         
0x16c5d:	mov qword ptr [rbp - 8], rax        
0x16c61:	add qword ptr [rbp - 8], 1          #		index |=| panel_find_index(this, ++old_entry_name);
0x16c66:	mov rdx, qword ptr [rbp - 8]        #		index = |p|anel_find_index(this, ++old_entry_name);
0x16c6a:	mov rax, qword ptr [rbp - 0x38]     
0x16c6e:	mov rsi, rdx                        
0x16c71:	mov rdi, rax                        
0x16c74:	mov eax, 0                          
0x16c79:	call 0x167e0                        
0x16c7e:	mov dword ptr [rbp - 0x24], eax     
0x16c81:	mov edx, dword ptr [rbp - 0x24]     #		|p|anel_set_current_entry(this, index);
0x16c84:	mov rax, qword ptr [rbp - 0x38]     
0x16c88:	mov esi, edx                        
0x16c8a:	mov rdi, rax                        
0x16c8d:	mov eax, 0                          
0x16c92:	call 0x112b7                        
0x16c97:	jmp 0x16caf                         
0x16c99:	mov rax, qword ptr [rbp - 0x38]     #		|p|anel_set_current_entry(this, 0);
0x16c9d:	mov esi, 0                          
0x16ca2:	mov rdi, rax                        
0x16ca5:	mov eax, 0                          
0x16caa:	call 0x112b7                        
0x16caf:	mov rax, qword ptr [rbp - 0x10]     #	    |x|free(old_path);
0x16cb3:	mov rdi, rax                        
0x16cb6:	call 0x1eeae                        
0x16cbb:	mov rax, qword ptr [rbp - 0x38]     #	    |p|anel_update(this);
0x16cbf:	mov rdi, rax                        
0x16cc2:	call 0x14e6a                        
0x16cc7:	mov rax, qword ptr [rbp - 0x40]     #	    if (strcmp(this->path, other|-|>path) == 0)
0x16ccb:	mov rdx, qword ptr [rax + 0x18]     
0x16ccf:	mov rax, qword ptr [rbp - 0x38]     #	    if (strcmp(this|-|>path, other->path) == 0)
0x16cd3:	mov rax, qword ptr [rax + 0x18]     
0x16cd7:	mov rsi, rdx                        #	    if (|s|trcmp(this->path, other->path) == 0)
0x16cda:	mov rdi, rax                        
0x16cdd:	call 0x4af0                         
0x16ce2:	test eax, eax                       #	    if |(|strcmp(this->path, other->path) == 0)
0x16ce4:	jne 0x16d19                         
0x16ce6:	mov rdx, qword ptr [rbp - 0x38]     #		|p|anel_action(other, act_REGET, this, (void *)-1, 1);
0x16cea:	mov rax, qword ptr [rbp - 0x40]     
0x16cee:	mov r8d, 1                          
0x16cf4:	mov rcx, -1                         
0x16cfb:	mov esi, 0x22                       
0x16d00:	mov rdi, rax                        
0x16d03:	call 0x1a89a                        
0x16d08:	mov rax, qword ptr [rbp - 0x40]     #		|p|anel_update(other);
0x16d0c:	mov rdi, rax                        
0x16d0f:	call 0x14e6a                        
0x16d14:	jmp 0x16e18                         #	    |b|reak;
0x16d19:	mov rax, qword ptr [rbp - 0x40]     #		|p|anel_update_size(other);
0x16d1d:	mov rdi, rax                        
0x16d20:	mov eax, 0                          
0x16d25:	call 0x13506                        
0x16d2a:	jmp 0x16e18                         #	    |b|reak;
0x16d2f:	mov rax, qword ptr [rbp - 0x38]     #	    if (this|-|>dir_entry[this->current_entry].executable)
0x16d33:	mov rcx, qword ptr [rax + 0x38]     
0x16d37:	mov rax, qword ptr [rbp - 0x38]     #	    if (this->dir_entry[this|-|>current_entry].executable)
0x16d3b:	mov eax, dword ptr [rax + 0x28]     
0x16d3e:	movsxd rdx, eax                     
0x16d41:	mov rax, rdx                        #	    if (this->dir_entry|[|this->current_entry].executable)
0x16d44:	shl rax, 2                          
0x16d48:	add rax, rdx                        
0x16d4b:	shl rax, 4                          
0x16d4f:	add rax, rcx                        
0x16d52:	movzx eax, byte ptr [rax + 0x4a]    #	    if (this->dir_entry[this->current_entry]|.|executable)
0x16d56:	test al, al                         #	    if |(|this->dir_entry[this->current_entry].executable)
0x16d58:	je 0x16e17                          
0x16d5e:	mov rax, qword ptr [rbp - 0x20]     #		cmd = xmalloc(32 + |s|trlen(name) + 1);
0x16d62:	mov rdi, rax                        
0x16d65:	call 0x4960                         
0x16d6a:	add rax, 0x21                       #		cmd = |x|malloc(32 + strlen(name) + 1);
0x16d6e:	mov rdi, rax                        
0x16d71:	call 0x24650                        
0x16d76:	mov qword ptr [rbp - 0x18], rax     
0x16d7a:	mov rdx, qword ptr [rbp - 0x20]     #		|s|printf(cmd, "./\"%s\"", name);
0x16d7e:	mov rax, qword ptr [rbp - 0x18]     
0x16d82:	lea rcx, [rip + 0x11b97]            
0x16d89:	mov rsi, rcx                        
0x16d8c:	mov rdi, rax                        
0x16d8f:	mov eax, 0                          
0x16d94:	call 0x4dd0                         
0x16d99:	mov rax, qword ptr [rbp - 0x18]     #		|s|tart(cmd, 0);
0x16d9d:	mov esi, 0                          
0x16da2:	mov rdi, rax                        
0x16da5:	call 0x1f6f0                        
0x16daa:	mov dword ptr [rip + 0x19b34], 1    #		wait_msg |=| 1;
0x16db4:	mov rax, qword ptr [rbp - 0x18]     #		|x|free(cmd);
0x16db8:	mov rdi, rax                        
0x16dbb:	call 0x1eeae                        
0x16dc0:	mov eax, 0                          #		|t|ty_touch();
0x16dc5:	call 0xb9ce                         
0x16dca:	mov rax, qword ptr [rip + 0x19b27]  #		|t|ty_get_screen(screen);
0x16dd1:	mov rdi, rax                        
0x16dd4:	call 0xce1e                         
0x16dd9:	mov rax, qword ptr [rbp - 0x38]     #		|p|anel_no_optimizations(this);
0x16ddd:	mov rdi, rax                        
0x16de0:	call 0x110b0                        
0x16de5:	mov rax, qword ptr [rbp - 0x40]     #		|p|anel_no_optimizations(other);
0x16de9:	mov rdi, rax                        
0x16dec:	call 0x110b0                        
0x16df1:	mov rax, qword ptr [rbp - 0x20]     #		|i|l_insert_text(name);
0x16df5:	mov rdi, rax                        
0x16df8:	call 0xf433                         
0x16dfd:	mov rax, qword ptr [rbp - 0x38]     #		|t|ty_update_title(this->path);
0x16e01:	mov rax, qword ptr [rax + 0x18]     
0x16e05:	mov rdi, rax                        
0x16e08:	call 0xd875                         
0x16e0d:	mov eax, 1                          #		return |1|;
0x16e12:	jmp 0x16e1d                         
0x16e14:	nop                                 #		|b|reak;
0x16e15:	jmp 0x16e18                         
0x16e17:	nop                                 #	    |b|reak;
0x16e18:	mov eax, 0                          #    return |0|;
0x16e1d:	leave                               #|}|
0x16e1e:	ret                                 
0x16e1f:	endbr64                             #|{|
0x16e23:	push rbp                            
0x16e24:	mov rbp, rsp                        
0x16e27:	push rbx                            
0x16e28:	sub rsp, 0x78                       
0x16e2c:	mov qword ptr [rbp - 0x78], rdi     
0x16e30:	mov qword ptr [rbp - 0x80], rsi     
0x16e34:	mov rax, qword ptr fs:[0x28]        #|{|
0x16e3d:	mov qword ptr [rbp - 0x18], rax     
0x16e41:	xor eax, eax                        
0x16e43:	mov qword ptr [rbp - 0x58], 0       #    char *file, *|d|ir = NULL, *msg, *input = NULL, *tmp_input;
0x16e4b:	mov qword ptr [rbp - 0x50], 0       #    char *file, *dir = NULL, *msg, *|i|nput = NULL, *tmp_input;
0x16e53:	mov rax, qword ptr [rbp - 0x78]     #    this->chkdest |=| ON;
0x16e57:	mov dword ptr [rax + 0x90], 1       
0x16e61:	mov rax, qword ptr [rbp - 0x78]     #    if (this|-|>selected_entries == 0)
0x16e65:	mov eax, dword ptr [rax + 0x70]     
0x16e68:	test eax, eax                       #    if |(|this->selected_entries == 0)
0x16e6a:	jne 0x17193                         
0x16e70:	mov rax, qword ptr [rbp - 0x78]     #	char *name = this|-|>dir_entry[this->current_entry].name;
0x16e74:	mov rcx, qword ptr [rax + 0x38]     
0x16e78:	mov rax, qword ptr [rbp - 0x78]     #	char *name = this->dir_entry[this|-|>current_entry].name;
0x16e7c:	mov eax, dword ptr [rax + 0x28]     
0x16e7f:	movsxd rdx, eax                     
0x16e82:	mov rax, rdx                        #	char *name = this->dir_entry|[|this->current_entry].name;
0x16e85:	shl rax, 2                          
0x16e89:	add rax, rdx                        
0x16e8c:	shl rax, 4                          
0x16e90:	add rax, rcx                        
0x16e93:	mov rax, qword ptr [rax]            #	char *|n|ame = this->dir_entry[this->current_entry].name;
0x16e96:	mov qword ptr [rbp - 0x38], rax     
0x16e9a:	mov rax, qword ptr [rbp - 0x78]     #	if (this|-|>current_entry == 0 && !rootdir())
0x16e9e:	mov eax, dword ptr [rax + 0x28]     
0x16ea1:	test eax, eax                       #	if |(|this->current_entry == 0 && !rootdir())
0x16ea3:	jne 0x16ecf                         
0x16ea5:	mov rax, qword ptr [rbp - 0x78]     #	if (this->current_entry == 0 && !|r|ootdir())
0x16ea9:	mov rax, qword ptr [rax + 0x18]     
0x16ead:	movzx eax, byte ptr [rax]           
0x16eb0:	cmp al, 0x2f                        #	if (this->current_entry == 0 |&|& !rootdir())
0x16eb2:	jne 0x174ca                         
0x16eb8:	mov rax, qword ptr [rbp - 0x78]     #	if (this->current_entry == 0 && !|r|ootdir())
0x16ebc:	mov rax, qword ptr [rax + 0x18]     
0x16ec0:	add rax, 1                          
0x16ec4:	movzx eax, byte ptr [rax]           
0x16ec7:	test al, al                         #	if (this->current_entry == 0 && |!|rootdir())
0x16ec9:	jne 0x174ca                         
0x16ecf:	mov rax, qword ptr [rbp - 0x38]     #	msg = xmalloc(16 + |s|trlen(name) + 1);
0x16ed3:	mov rdi, rax                        
0x16ed6:	call 0x4960                         
0x16edb:	add rax, 0x11                       #	msg = |x|malloc(16 + strlen(name) + 1);
0x16edf:	mov rdi, rax                        
0x16ee2:	call 0x24650                        
0x16ee7:	mov qword ptr [rbp - 0x30], rax     
0x16eeb:	mov rax, qword ptr [rbp - 0x38]     #	|s|printf(msg, "Copy %s to: ", cutname(name, 0, 0));
0x16eef:	mov edx, 0                          
0x16ef4:	mov esi, 0                          
0x16ef9:	mov rdi, rax                        
0x16efc:	mov eax, 0                          
0x16f01:	call 0x10d03                        
0x16f06:	mov rdx, rax                        
0x16f09:	mov rax, qword ptr [rbp - 0x30]     
0x16f0d:	lea rcx, [rip + 0x11a13]            
0x16f14:	mov rsi, rcx                        
0x16f17:	mov rdi, rax                        
0x16f1a:	mov eax, 0                          
0x16f1f:	call 0x4dd0                         
0x16f24:	mov rax, qword ptr [rbp - 0x38]     #	len  = 1 + |s|trlen(name) + 1;
0x16f28:	mov rdi, rax                        
0x16f2b:	call 0x4960                         
0x16f30:	add rax, 2                          #	len  |=| 1 + strlen(name) + 1;
0x16f34:	mov qword ptr [rbp - 0x48], rax     
0x16f38:	mov rax, qword ptr [rbp - 0x80]     #	file = xmalloc(strlen(other|-|>path) + len);
0x16f3c:	mov rax, qword ptr [rax + 0x18]     
0x16f40:	mov rdi, rax                        #	file = xmalloc(|s|trlen(other->path) + len);
0x16f43:	call 0x4960                         
0x16f48:	mov rdx, qword ptr [rbp - 0x48]     #	file = |x|malloc(strlen(other->path) + len);
0x16f4c:	add rax, rdx                        
0x16f4f:	mov rdi, rax                        
0x16f52:	call 0x24650                        
0x16f57:	mov qword ptr [rbp - 0x28], rax     
0x16f5b:	mov rax, qword ptr [rbp - 0x80]     #	|s|printf(file, "%s/%s", other->path, name);
0x16f5f:	mov rdx, qword ptr [rax + 0x18]     
0x16f63:	mov rcx, qword ptr [rbp - 0x38]     
0x16f67:	mov rax, qword ptr [rbp - 0x28]     
0x16f6b:	lea rsi, [rip + 0x1185d]            
0x16f72:	mov rdi, rax                        
0x16f75:	mov eax, 0                          
0x16f7a:	call 0x4dd0                         
0x16f7f:	mov rcx, qword ptr [rip + 0x1a67a]  #	if (!|i|l_read_line(msg, &input, file, copy_history))
0x16f86:	mov rdx, qword ptr [rbp - 0x28]     
0x16f8a:	lea rsi, [rbp - 0x50]               
0x16f8e:	mov rax, qword ptr [rbp - 0x30]     
0x16f92:	mov rdi, rax                        
0x16f95:	call 0x5efb                         
0x16f9a:	test rax, rax                       #	if |(|!il_read_line(msg, &input, file, copy_history))
0x16f9d:	jne 0x16fb0                         
0x16f9f:	mov rax, qword ptr [rbp - 0x30]     #	    |x|free(msg);
0x16fa3:	mov rdi, rax                        
0x16fa6:	call 0x1eeae                        
0x16fab:	jmp 0x174ce                         #	    |r|eturn;
0x16fb0:	mov rax, qword ptr [rbp - 0x30]     #	|x|free(msg);
0x16fb4:	mov rdi, rax                        
0x16fb7:	call 0x1eeae                        
0x16fbc:	mov rax, qword ptr [rbp - 0x78]     #	if (|S|_ISDIR(this->dir_entry[this->current_entry].mode))
0x16fc0:	mov rcx, qword ptr [rax + 0x38]     
0x16fc4:	mov rax, qword ptr [rbp - 0x78]     
0x16fc8:	mov eax, dword ptr [rax + 0x28]     
0x16fcb:	movsxd rdx, eax                     
0x16fce:	mov rax, rdx                        
0x16fd1:	shl rax, 2                          
0x16fd5:	add rax, rdx                        
0x16fd8:	shl rax, 4                          
0x16fdc:	add rax, rcx                        
0x16fdf:	mov eax, dword ptr [rax + 0x10]     
0x16fe2:	and eax, 0xf000                     
0x16fe7:	cmp eax, 0x4000                     #	if |(|S_ISDIR(this->dir_entry[this->current_entry].mode))
0x16fec:	jne 0x16fff                         
0x16fee:	mov rax, qword ptr [rip + 0x19503]  #	    |i|l_message(PANEL_COPY_DIR_MSG);
0x16ff5:	mov rdi, rax                        
0x16ff8:	call 0xfcbe                         
0x16ffd:	jmp 0x1700e                         
0x16fff:	mov rax, qword ptr [rip + 0x194e2]  #	    |i|l_message(PANEL_COPY_FILE_MSG);
0x17006:	mov rdi, rax                        
0x17009:	call 0xfcbe                         
0x1700e:	mov eax, 0                          #	|t|ty_update();
0x17013:	call 0xb4b7                         
0x17018:	mov rax, qword ptr [rbp - 0x50]     #	tmp_input = |t|ilde_expand(input);
0x1701c:	mov rdi, rax                        
0x1701f:	mov eax, 0                          
0x17024:	call 0x1fb51                        
0x17029:	mov qword ptr [rbp - 0x20], rax     
0x1702d:	mov rax, qword ptr [rbp - 0x50]     #	|x|free(input);
0x17031:	mov rdi, rax                        
0x17034:	call 0x1eeae                        
0x17039:	mov rax, qword ptr [rbp - 0x20]     #	input |=| tmp_input;
0x1703d:	mov qword ptr [rbp - 0x50], rax     
0x17041:	mov rdx, qword ptr [rbp - 0x50]     #	error = |s|ame_file(name, input);
0x17045:	mov rax, qword ptr [rbp - 0x38]     
0x17049:	mov rsi, rdx                        
0x1704c:	mov rdi, rax                        
0x1704f:	mov eax, 0                          
0x17054:	call 0x15106                        
0x17059:	mov dword ptr [rbp - 0x5c], eax     
0x1705c:	mov rax, qword ptr [rbp - 0x28]     #	|x|free(file);
0x17060:	mov rdi, rax                        
0x17063:	call 0x1eeae                        
0x17068:	cmp dword ptr [rbp - 0x5c], 0       #	if |(|error)
0x1706c:	je 0x170a9                          
0x1706e:	mov rdx, qword ptr [rbp - 0x50]     #	    |p|anel_3s_message("%s and %s point to the same file.",
0x17072:	mov rax, qword ptr [rbp - 0x38]     
0x17076:	mov r8d, 0x1e                       
0x1707c:	mov ecx, 0                          
0x17081:	mov rsi, rax                        
0x17084:	lea rax, [rip + 0x118ad]            
0x1708b:	mov rdi, rax                        
0x1708e:	mov eax, 0                          
0x17093:	call 0x115fd                        
0x17098:	mov rax, qword ptr [rbp - 0x50]     #	    |x|free(input);
0x1709c:	mov rdi, rax                        
0x1709f:	call 0x1eeae                        
0x170a4:	jmp 0x174ce                         #	    |r|eturn;
0x170a9:	call 0x4bb0                         #	error = |p|anel_copy(this, name, input,
0x170ae:	mov ebx, eax                        
0x170b0:	call 0x4990                         
0x170b5:	mov edi, eax                        
0x170b7:	mov rax, qword ptr [rbp - 0x78]     #			   this|-|>dir_entry[this->current_entry].mode,
0x170bb:	mov rcx, qword ptr [rax + 0x38]     
0x170bf:	mov rax, qword ptr [rbp - 0x78]     #			   this->dir_entry[this|-|>current_entry].mode,
0x170c3:	mov eax, dword ptr [rax + 0x28]     
0x170c6:	movsxd rdx, eax                     
0x170c9:	mov rax, rdx                        #			   this->dir_entry|[|this->current_entry].mode,
0x170cc:	shl rax, 2                          
0x170d0:	add rax, rdx                        
0x170d3:	shl rax, 4                          
0x170d7:	add rax, rcx                        
0x170da:	mov ecx, dword ptr [rax + 0x10]     #	error = |p|anel_copy(this, name, input,
0x170dd:	mov rdx, qword ptr [rbp - 0x50]     
0x170e1:	mov rsi, qword ptr [rbp - 0x38]     
0x170e5:	mov rax, qword ptr [rbp - 0x78]     
0x170e9:	mov r9d, ebx                        
0x170ec:	mov r8d, edi                        
0x170ef:	mov rdi, rax                        
0x170f2:	mov eax, 0                          
0x170f7:	call 0x1537d                        
0x170fc:	mov dword ptr [rbp - 0x5c], eax     
0x170ff:	mov rax, qword ptr [rbp - 0x50]     #	|x|free(input);
0x17103:	mov rdi, rax                        
0x17106:	call 0x1eeae                        
0x1710b:	cmp dword ptr [rbp - 0x5c], 1       #	if |(|error != SD_OK && error != SD_CANCEL)
0x1710f:	je 0x17158                          
0x17111:	cmp dword ptr [rbp - 0x5c], 2       #	if (error != SD_OK |&|& error != SD_CANCEL)
0x17115:	je 0x17158                          
0x17117:	mov eax, dword ptr [rbp - 0x5c]     #			     copyerr[error |-| 1], (char *)NULL,
0x1711a:	sub eax, 1                          
0x1711d:	cdqe                                #	    |p|anel_3s_message("%s: Copy failed, %s.", name,
0x1711f:	lea rdx, [rax*8]                    
0x17127:	lea rax, [rip + 0x19452]            
0x1712e:	mov rdx, qword ptr [rdx + rax]      
0x17132:	mov rax, qword ptr [rbp - 0x38]     
0x17136:	mov r8d, 0x1e                       
0x1713c:	mov ecx, 0                          
0x17141:	mov rsi, rax                        
0x17144:	lea rax, [rip + 0x117c0]            
0x1714b:	mov rdi, rax                        
0x1714e:	mov eax, 0                          
0x17153:	call 0x115fd                        
0x17158:	mov eax, 0                          #	|s|tatus_default();
0x1715d:	call 0x10857                        
0x17162:	mov rax, qword ptr [rbp - 0x78]     #	|p|anel_update_size(this);
0x17166:	mov rdi, rax                        
0x17169:	mov eax, 0                          
0x1716e:	call 0x13506                        
0x17173:	mov rax, qword ptr [rbp - 0x80]     #	|p|anel_update_size(other);
0x17177:	mov rdi, rax                        
0x1717a:	mov eax, 0                          
0x1717f:	call 0x13506                        
0x17184:	mov eax, 0                          #	|t|ty_update();
0x17189:	call 0xb4b7                         
0x1718e:	jmp 0x17444                         
0x17193:	mov rcx, qword ptr [rip + 0x1a466]  #	if (!|i|l_read_line("Copy selected file(s) to: ", &dir,
0x1719a:	mov rax, qword ptr [rbp - 0x80]     
0x1719e:	mov rdx, qword ptr [rax + 0x18]     
0x171a2:	lea rax, [rbp - 0x58]               
0x171a6:	mov rsi, rax                        
0x171a9:	lea rax, [rip + 0x117aa]            
0x171b0:	mov rdi, rax                        
0x171b3:	call 0x5efb                         
0x171b8:	test rax, rax                       #	if |(|!il_read_line("Copy selected file(s) to: ", &dir,
0x171bb:	je 0x174cd                          
0x171c1:	mov rdx, qword ptr [rbp - 0x58]     #	if (|s|ame_file(this->path, dir))
0x171c5:	mov rax, qword ptr [rbp - 0x78]     
0x171c9:	mov rax, qword ptr [rax + 0x18]     
0x171cd:	mov rsi, rdx                        
0x171d0:	mov rdi, rax                        
0x171d3:	mov eax, 0                          
0x171d8:	call 0x15106                        
0x171dd:	test eax, eax                       #	if |(|same_file(this->path, dir))
0x171df:	je 0x171ff                          
0x171e1:	mov edx, 0xc                        #	    |p|anel_1s_message(nice_try, (char *)NULL,
0x171e6:	mov esi, 0                          
0x171eb:	lea rax, [rip + 0x1934e]            
0x171f2:	mov rdi, rax                        
0x171f5:	call 0x5c09                         
0x171fa:	jmp 0x174ce                         #	    |r|eturn;
0x171ff:	mov rax, qword ptr [rbp - 0x58]     #	dir = xrealloc(dir, (len = |s|trlen(dir) + 1) + 1);
0x17203:	mov rdi, rax                        
0x17206:	call 0x4960                         
0x1720b:	add rax, 1                          #	dir = xrealloc(dir, (len |=| strlen(dir) + 1) + 1);
0x1720f:	mov qword ptr [rbp - 0x48], rax     
0x17213:	mov rax, qword ptr [rbp - 0x48]     #	dir = |x|realloc(dir, (len = strlen(dir) + 1) + 1);
0x17217:	lea rdx, [rax + 1]                  
0x1721b:	mov rax, qword ptr [rbp - 0x58]     
0x1721f:	mov rsi, rdx                        
0x17222:	mov rdi, rax                        
0x17225:	call 0x24670                        
0x1722a:	mov qword ptr [rbp - 0x58], rax     #	dir |=| xrealloc(dir, (len = strlen(dir) + 1) + 1);
0x1722e:	mov rdx, qword ptr [rbp - 0x58]     #	dir|[|len-1] = '/';
0x17232:	mov rax, qword ptr [rbp - 0x48]     
0x17236:	sub rax, 1                          
0x1723a:	add rax, rdx                        
0x1723d:	mov byte ptr [rax], 0x2f            #	dir[len-1] |=| '/';
0x17240:	mov rdx, qword ptr [rbp - 0x58]     #	dir|[|len  ] = '\0';
0x17244:	mov rax, qword ptr [rbp - 0x48]     
0x17248:	add rax, rdx                        
0x1724b:	mov byte ptr [rax], 0               #	dir[len  ] |=| '\0';
0x1724e:	mov rax, qword ptr [rbp - 0x78]     #	|p|anel_init_iterator(this);
0x17252:	mov rdi, rax                        
0x17255:	call 0x13121                        
0x1725a:	jmp 0x173fc                         #	while |(|(entry = panel_get_next(this)) != -1)
0x1725f:	mov rax, qword ptr [rbp - 0x78]     #	    char *name  = this|-|>dir_entry[entry].name;
0x17263:	mov rcx, qword ptr [rax + 0x38]     
0x17267:	mov eax, dword ptr [rbp - 0x6c]     #	    char *name  = this->dir_entry|[|entry].name;
0x1726a:	movsxd rdx, eax                     
0x1726d:	mov rax, rdx                        
0x17270:	shl rax, 2                          
0x17274:	add rax, rdx                        
0x17277:	shl rax, 4                          
0x1727b:	add rax, rcx                        
0x1727e:	mov rax, qword ptr [rax]            #	    char *|n|ame  = this->dir_entry[entry].name;
0x17281:	mov qword ptr [rbp - 0x40], rax     
0x17285:	mov rax, qword ptr [rbp - 0x78]     #	    mode_t mode = this|-|>dir_entry[entry].mode;
0x17289:	mov rcx, qword ptr [rax + 0x38]     
0x1728d:	mov eax, dword ptr [rbp - 0x6c]     #	    mode_t mode = this->dir_entry|[|entry].mode;
0x17290:	movsxd rdx, eax                     
0x17293:	mov rax, rdx                        
0x17296:	shl rax, 2                          
0x1729a:	add rax, rdx                        
0x1729d:	shl rax, 4                          
0x172a1:	add rax, rcx                        
0x172a4:	mov eax, dword ptr [rax + 0x10]     #	    mode_t |m|ode = this->dir_entry[entry].mode;
0x172a7:	mov dword ptr [rbp - 0x68], eax     
0x172aa:	call 0x4990                         #	    uid_t uid = |g|etuid();
0x172af:	mov dword ptr [rbp - 0x64], eax     
0x172b2:	call 0x4bb0                         #	    gid_t gid = |g|etgid();
0x172b7:	mov dword ptr [rbp - 0x60], eax     
0x172ba:	mov rax, qword ptr [rbp - 0x40]     #	    dir = xrealloc(dir, len + |s|trlen(name) + 1);
0x172be:	mov rdi, rax                        
0x172c1:	call 0x4960                         
0x172c6:	mov rdx, qword ptr [rbp - 0x48]     #	    dir = xrealloc(dir, len |+| strlen(name) + 1);
0x172ca:	add rax, rdx                        
0x172cd:	lea rdx, [rax + 1]                  #	    dir = |x|realloc(dir, len + strlen(name) + 1);
0x172d1:	mov rax, qword ptr [rbp - 0x58]     
0x172d5:	mov rsi, rdx                        
0x172d8:	mov rdi, rax                        
0x172db:	call 0x24670                        
0x172e0:	mov qword ptr [rbp - 0x58], rax     #	    dir |=| xrealloc(dir, len + strlen(name) + 1);
0x172e4:	mov rdx, qword ptr [rbp - 0x58]     #	    |s|trcpy(dir + len, name);
0x172e8:	mov rax, qword ptr [rbp - 0x48]     
0x172ec:	add rdx, rax                        
0x172ef:	mov rax, qword ptr [rbp - 0x40]     
0x172f3:	mov rsi, rax                        
0x172f6:	mov rdi, rdx                        
0x172f9:	call 0x4870                         
0x172fe:	mov eax, 0                          #	    if (|c|anceled())
0x17303:	call 0x15065                        
0x17308:	test eax, eax                       #	    if |(|canceled())
0x1730a:	jne 0x17417                         
0x17310:	mov rax, qword ptr [rip + 0x191d9]  #	    |i|l_message(PANEL_COPY_FILES_MSG);
0x17317:	mov rdi, rax                        
0x1731a:	call 0xfcbe                         
0x1731f:	mov eax, 0                          #	    |t|ty_update();
0x17324:	call 0xb4b7                         
0x17329:	mov rdx, qword ptr [rbp - 0x58]     #	    error = |p|anel_copy(this, name, dir, mode, uid, gid);
0x1732d:	mov r8d, dword ptr [rbp - 0x60]     
0x17331:	mov edi, dword ptr [rbp - 0x64]     
0x17334:	mov ecx, dword ptr [rbp - 0x68]     
0x17337:	mov rsi, qword ptr [rbp - 0x40]     
0x1733b:	mov rax, qword ptr [rbp - 0x78]     
0x1733f:	mov r9d, r8d                        
0x17342:	mov r8d, edi                        
0x17345:	mov rdi, rax                        
0x17348:	mov eax, 0                          
0x1734d:	call 0x1537d                        
0x17352:	mov dword ptr [rbp - 0x5c], eax     
0x17355:	cmp dword ptr [rbp - 0x5c], 1       #	    if |(|error != SD_OK)
0x17359:	je 0x173b7                          
0x1735b:	cmp dword ptr [rbp - 0x5c], 2       #		if |(|error == SD_CANCEL)
0x1735f:	je 0x1741a                          
0x17365:	cmp dword ptr [rbp - 0x5c], 3       #		if |(|error == SD_SKIP)
0x17369:	jne 0x17370                         
0x1736b:	jmp 0x173fc                         #		    |c|ontinue;
0x17370:	mov eax, dword ptr [rbp - 0x5c]     #				     name, copyerr[error |-| 1], (char *)NULL,
0x17373:	sub eax, 1                          
0x17376:	cdqe                                #		if (|p|anel_3s_message("%s: Copy failed, %s.",
0x17378:	lea rdx, [rax*8]                    
0x17380:	lea rax, [rip + 0x191f9]            
0x17387:	mov rdx, qword ptr [rdx + rax]      
0x1738b:	mov rax, qword ptr [rbp - 0x40]     
0x1738f:	mov r8d, 0xe                        
0x17395:	mov ecx, 0                          
0x1739a:	mov rsi, rax                        
0x1739d:	lea rax, [rip + 0x11567]            
0x173a4:	mov rdi, rax                        
0x173a7:	mov eax, 0                          
0x173ac:	call 0x115fd                        
0x173b1:	test al, al                         #		if |(|panel_3s_message("%s: Copy failed, %s.",
0x173b3:	jne 0x173da                         
0x173b5:	jmp 0x1741b                         #		    |b|reak;
0x173b7:	mov rax, qword ptr [rbp - 0x78]     #		this|-|>dir_entry[entry].selected = 0;
0x173bb:	mov rcx, qword ptr [rax + 0x38]     
0x173bf:	mov eax, dword ptr [rbp - 0x6c]     #		this->dir_entry|[|entry].selected = 0;
0x173c2:	movsxd rdx, eax                     
0x173c5:	mov rax, rdx                        
0x173c8:	shl rax, 2                          
0x173cc:	add rax, rdx                        
0x173cf:	shl rax, 4                          
0x173d3:	add rax, rcx                        
0x173d6:	mov byte ptr [rax + 0x49], 0        #		this->dir_entry[entry].selected |=| 0;
0x173da:	mov rax, qword ptr [rbp - 0x78]     #	    |p|anel_update_size(this);
0x173de:	mov rdi, rax                        
0x173e1:	mov eax, 0                          
0x173e6:	call 0x13506                        
0x173eb:	mov rax, qword ptr [rbp - 0x80]     #	    |p|anel_update_size(other);
0x173ef:	mov rdi, rax                        
0x173f2:	mov eax, 0                          
0x173f7:	call 0x13506                        
0x173fc:	mov rax, qword ptr [rbp - 0x78]     #	while ((entry = |p|anel_get_next(this)) != -1)
0x17400:	mov rdi, rax                        
0x17403:	call 0x13149                        
0x17408:	mov dword ptr [rbp - 0x6c], eax     
0x1740b:	cmp dword ptr [rbp - 0x6c], -1      #	while ((entry = panel_get_next(this)) |!|= -1)
0x1740f:	jne 0x1725f                         
0x17415:	jmp 0x1741b                         
0x17417:	nop                                 #		|b|reak;
0x17418:	jmp 0x1741b                         
0x1741a:	nop                                 #		    |b|reak;
0x1741b:	mov rax, qword ptr [rbp - 0x58]     #	if (|d|ir)
0x1741f:	test rax, rax                       #	if |(|dir)
0x17422:	je 0x17430                          
0x17424:	mov rax, qword ptr [rbp - 0x58]     #	    |x|free(dir);
0x17428:	mov rdi, rax                        
0x1742b:	call 0x1eeae                        
0x17430:	mov eax, 0                          #	|s|tatus_default();
0x17435:	call 0x10857                        
0x1743a:	mov eax, 0                          #	|t|ty_update();
0x1743f:	call 0xb4b7                         
0x17444:	mov rax, qword ptr [rbp - 0x80]     #    if (!|p|anel_read_directory(other, other->path, ON))
0x17448:	mov rcx, qword ptr [rax + 0x18]     
0x1744c:	mov rax, qword ptr [rbp - 0x80]     
0x17450:	mov edx, 1                          
0x17455:	mov rsi, rcx                        
0x17458:	mov rdi, rax                        
0x1745b:	mov eax, 0                          
0x17460:	call 0x12238                        
0x17465:	test eax, eax                       #    if |(|!panel_read_directory(other, other->path, ON))
0x17467:	jne 0x1747a                         
0x17469:	mov rax, qword ptr [rbp - 0x80]     #	|p|anel_recover(other);
0x1746d:	mov rdi, rax                        
0x17470:	mov eax, 0                          
0x17475:	call 0x116a7                        
0x1747a:	mov rax, qword ptr [rbp - 0x80]     #    |p|anel_update(other);
0x1747e:	mov rdi, rax                        
0x17481:	call 0x14e6a                        
0x17486:	mov rax, qword ptr [rbp - 0x78]     #    if (!|p|anel_read_directory(this, this->path, ON))
0x1748a:	mov rcx, qword ptr [rax + 0x18]     
0x1748e:	mov rax, qword ptr [rbp - 0x78]     
0x17492:	mov edx, 1                          
0x17497:	mov rsi, rcx                        
0x1749a:	mov rdi, rax                        
0x1749d:	mov eax, 0                          
0x174a2:	call 0x12238                        
0x174a7:	test eax, eax                       #    if |(|!panel_read_directory(this, this->path, ON))
0x174a9:	jne 0x174bc                         
0x174ab:	mov rax, qword ptr [rbp - 0x78]     #	|p|anel_recover(this);
0x174af:	mov rdi, rax                        
0x174b2:	mov eax, 0                          
0x174b7:	call 0x116a7                        
0x174bc:	mov rax, qword ptr [rbp - 0x78]     #    |p|anel_update(this);
0x174c0:	mov rdi, rax                        
0x174c3:	call 0x14e6a                        
0x174c8:	jmp 0x174ce                         
0x174ca:	nop                                 #	    |r|eturn;
0x174cb:	jmp 0x174ce                         
0x174cd:	nop                                 #	    |r|eturn;
0x174ce:	mov rax, qword ptr [rbp - 0x18]     #|}|
0x174d2:	sub rax, qword ptr fs:[0x28]        
0x174db:	je 0x174e2                          
0x174dd:	call 0x4980                         
0x174e2:	mov rbx, qword ptr [rbp - 8]        
0x174e6:	leave                               
0x174e7:	ret                                 
0x174e8:	endbr64                             #|{|
0x174ec:	push rbp                            
0x174ed:	mov rbp, rsp                        
0x174f0:	sub rsp, 0x40                       
0x174f4:	mov qword ptr [rbp - 0x38], rdi     
0x174f8:	mov qword ptr [rbp - 0x40], rsi     
0x174fc:	mov dword ptr [rbp - 0x30], 1       #    int |k|eep_asking = 1;
0x17503:	mov dword ptr [rbp - 0x28], 0       #    int first_entry, entry, |a|nswer = 0, result;
0x1750a:	mov rax, qword ptr [rbp - 0x38]     #    if (this|-|>selected_entries == 0 &&
0x1750e:	mov eax, dword ptr [rax + 0x70]     
0x17511:	test eax, eax                       #    if |(|this->selected_entries == 0 &&
0x17513:	jne 0x1754a                         
0x17515:	mov rax, qword ptr [rbp - 0x38]     #	(this|-|>current_entry == 0 && !rootdir()))
0x17519:	mov eax, dword ptr [rax + 0x28]     
0x1751c:	test eax, eax                       #    if (this->selected_entries == 0 |&|&
0x1751e:	jne 0x1754a                         
0x17520:	mov rax, qword ptr [rbp - 0x38]     #	(this->current_entry == 0 && !|r|ootdir()))
0x17524:	mov rax, qword ptr [rax + 0x18]     
0x17528:	movzx eax, byte ptr [rax]           
0x1752b:	cmp al, 0x2f                        #	(this->current_entry == 0 |&|& !rootdir()))
0x1752d:	jne 0x17a0c                         
0x17533:	mov rax, qword ptr [rbp - 0x38]     #	(this->current_entry == 0 && !|r|ootdir()))
0x17537:	mov rax, qword ptr [rax + 0x18]     
0x1753b:	add rax, 1                          
0x1753f:	movzx eax, byte ptr [rax]           
0x17542:	test al, al                         #	(this->current_entry == 0 && |!|rootdir()))
0x17544:	jne 0x17a0c                         
0x1754a:	mov edx, 0                          #    if (|p|anel_1s_message("Delete selected entries? ","yn",IL_FREEZED) != 'y')
0x1754f:	lea rax, [rip + 0x110f0]            
0x17556:	mov rsi, rax                        
0x17559:	lea rax, [rip + 0x11415]            
0x17560:	mov rdi, rax                        
0x17563:	call 0x5c09                         
0x17568:	cmp al, 0x79                        #    if |(|panel_1s_message("Delete selected entries? ","yn",IL_FREEZED) != 'y')
0x1756a:	jne 0x17a0f                         
0x17570:	mov dword ptr [rbp - 0x2c], 0       #    for (first_entry |=| 0; first_entry < this->entries; first_entry++)
0x17577:	jmp 0x175a4                         #    |f|or (first_entry = 0; first_entry < this->entries; first_entry++)
0x17579:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>dir_entry[first_entry].selected)
0x1757d:	mov rcx, qword ptr [rax + 0x38]     
0x17581:	mov eax, dword ptr [rbp - 0x2c]     #	if (this->dir_entry|[|first_entry].selected)
0x17584:	movsxd rdx, eax                     
0x17587:	mov rax, rdx                        
0x1758a:	shl rax, 2                          
0x1758e:	add rax, rdx                        
0x17591:	shl rax, 4                          
0x17595:	add rax, rcx                        
0x17598:	movzx eax, byte ptr [rax + 0x49]    #	if (this->dir_entry[first_entry]|.|selected)
0x1759c:	test al, al                         #	if |(|this->dir_entry[first_entry].selected)
0x1759e:	jne 0x175b2                         
0x175a0:	add dword ptr [rbp - 0x2c], 1       #    for (first_entry = 0; first_entry < this->entries; first_entry|+|+)
0x175a4:	mov rax, qword ptr [rbp - 0x38]     #    for (first_entry = 0; first_entry < this|-|>entries; first_entry++)
0x175a8:	mov eax, dword ptr [rax + 0x68]     
0x175ab:	cmp dword ptr [rbp - 0x2c], eax     #    for (first_entry = 0; first_entry |<| this->entries; first_entry++)
0x175ae:	jl 0x17579                          
0x175b0:	jmp 0x175b3                         
0x175b2:	nop                                 #	    |b|reak;
0x175b3:	mov rax, qword ptr [rbp - 0x38]     #    |p|anel_init_iterator(this);
0x175b7:	mov rdi, rax                        
0x175ba:	call 0x13121                        
0x175bf:	jmp 0x178ed                         #    while |(|(entry = panel_get_next(this)) != -1)
0x175c4:	mov rax, qword ptr [rbp - 0x38]     #	char *name = this|-|>dir_entry[entry].name;
0x175c8:	mov rcx, qword ptr [rax + 0x38]     
0x175cc:	mov eax, dword ptr [rbp - 0x1c]     #	char *name = this->dir_entry|[|entry].name;
0x175cf:	movsxd rdx, eax                     
0x175d2:	mov rax, rdx                        
0x175d5:	shl rax, 2                          
0x175d9:	add rax, rdx                        
0x175dc:	shl rax, 4                          
0x175e0:	add rax, rcx                        
0x175e3:	mov rax, qword ptr [rax]            #	char *|n|ame = this->dir_entry[entry].name;
0x175e6:	mov qword ptr [rbp - 0x18], rax     
0x175ea:	mov dword ptr [rbp - 0x20], 0       #	int |i|nterrupted=0;
0x175f1:	mov eax, 0                          #	|s|ervice_pending_signals();
0x175f6:	call 0x1ea4b                        
0x175fb:	mov rax, qword ptr [rbp - 0x18]     #	msg = xmalloc(32 + |s|trlen(name));
0x175ff:	mov rdi, rax                        
0x17602:	call 0x4960                         
0x17607:	add rax, 0x20                       #	msg = |x|malloc(32 + strlen(name));
0x1760b:	mov rdi, rax                        
0x1760e:	call 0x24650                        
0x17613:	mov qword ptr [rbp - 0x10], rax     
0x17617:	mov rdx, qword ptr [rbp - 0x18]     #	|s|printf(msg, "(DELETE) %s", name);
0x1761b:	mov rax, qword ptr [rbp - 0x10]     
0x1761f:	lea rcx, [rip + 0x11369]            
0x17626:	mov rsi, rcx                        
0x17629:	mov rdi, rax                        
0x1762c:	mov eax, 0                          
0x17631:	call 0x4dd0                         
0x17636:	mov rax, qword ptr [rbp - 0x10]     #	|s|tatus(msg, STATUS_ERROR, STATUS_LEFT);
0x1763a:	mov edx, 1                          
0x1763f:	mov esi, 2                          
0x17644:	mov rdi, rax                        
0x17647:	call 0x107d0                        
0x1764c:	mov eax, 0                          #	|t|ty_update();
0x17651:	call 0xb4b7                         
0x17656:	mov rax, qword ptr [rbp - 0x10]     #	|x|free(msg);
0x1765a:	mov rdi, rax                        
0x1765d:	call 0x1eeae                        
0x17662:	mov eax, 0                          #	if (|c|anceled())
0x17667:	call 0x15065                        
0x1766c:	test eax, eax                       #	if |(|canceled())
0x1766e:	jne 0x17908                         
0x17674:	cmp dword ptr [rbp - 0x30], 0       #	if |(|keep_asking)
0x17678:	je 0x176a7                          
0x1767a:	mov rax, qword ptr [rbp - 0x18]     #	    answer = |p|anel_2s_message("Delete %s? (Yes/Skip/All/Cancel) ",
0x1767e:	mov ecx, 2                          
0x17683:	lea rdx, [rip + 0x11311]            
0x1768a:	mov rsi, rax                        
0x1768d:	lea rax, [rip + 0x1130c]            
0x17694:	mov rdi, rax                        
0x17697:	mov eax, 0                          
0x1769c:	call 0x11568                        
0x176a1:	movsx eax, al                       #	    answer |=| panel_2s_message("Delete %s? (Yes/Skip/All/Cancel) ",
0x176a4:	mov dword ptr [rbp - 0x28], eax     
0x176a7:	mov rax, qword ptr [rip + 0x18e5a]  #	|i|l_message(PANEL_DELETE_FILES_MSG);
0x176ae:	mov rdi, rax                        
0x176b1:	call 0xfcbe                         
0x176b6:	mov eax, 0                          #	|t|ty_update();
0x176bb:	call 0xb4b7                         
0x176c0:	cmp dword ptr [rbp - 0x28], 0x61    #	if |(|answer == 'a')
0x176c4:	jne 0x176cf                         
0x176c6:	mov dword ptr [rbp - 0x30], 0       #	    keep_asking |=| 0;
0x176cd:	jmp 0x176ee                         
0x176cf:	cmp dword ptr [rbp - 0x28], 0x73    #	else if |(|answer == 's')
0x176d3:	jne 0x176da                         
0x176d5:	jmp 0x178ed                         #	    |c|ontinue;
0x176da:	cmp dword ptr [rbp - 0x28], 0x63    #	else if |(|answer == 'c')
0x176de:	je 0x1790b                          
0x176e4:	cmp dword ptr [rbp - 0x28], 0x79    #	else if |(|answer != 'y')
0x176e8:	jne 0x1790e                         
0x176ee:	mov rax, qword ptr [rbp - 0x38]     #	if (this|-|>dir_entry[entry].type == DIR_ENTRY)
0x176f2:	mov rcx, qword ptr [rax + 0x38]     
0x176f6:	mov eax, dword ptr [rbp - 0x1c]     #	if (this->dir_entry|[|entry].type == DIR_ENTRY)
0x176f9:	movsxd rdx, eax                     
0x176fc:	mov rax, rdx                        
0x176ff:	shl rax, 2                          
0x17703:	add rax, rdx                        
0x17706:	shl rax, 4                          
0x1770a:	add rax, rcx                        
0x1770d:	movzx eax, byte ptr [rax + 0x48]    #	if (this->dir_entry[entry]|.|type == DIR_ENTRY)
0x17711:	test al, al                         #	if |(|this->dir_entry[entry].type == DIR_ENTRY)
0x17713:	jne 0x1784d                         
0x17719:	mov rax, qword ptr [rip + 0x18de0]  #	    |i|l_message(PANEL_DELETE_DIR_MSG);
0x17720:	mov rdi, rax                        
0x17723:	call 0xfcbe                         
0x17728:	mov eax, 0                          #	    |t|ty_update();
0x1772d:	call 0xb4b7                         
0x17732:	mov rax, qword ptr [rbp - 0x18]     #	    result = (|r|mdir(name) == 0);
0x17736:	mov rdi, rax                        
0x17739:	call 0x4940                         
0x1773e:	test eax, eax                       #	    result = (rmdir(name) |=|= 0);
0x17740:	sete al                             
0x17743:	movzx eax, al                       #	    result |=| (rmdir(name) == 0);
0x17746:	mov dword ptr [rbp - 0x24], eax     
0x17749:	cmp dword ptr [rbp - 0x24], 0       #	    if |(|!result)
0x1774d:	jne 0x17864                         
0x17753:	mov rax, qword ptr [rbp - 0x18]     #		if (|p|anel_2s_message(
0x17757:	mov ecx, 0x12                       
0x1775c:	lea rdx, [rip + 0x10ee3]            
0x17763:	mov rsi, rax                        
0x17766:	lea rax, [rip + 0x1125b]            
0x1776d:	mov rdi, rax                        
0x17770:	mov eax, 0                          
0x17775:	call 0x11568                        
0x1777a:	cmp al, 0x79                        #		if |(|panel_2s_message(
0x1777c:	jne 0x17864                         
0x17782:	mov rax, qword ptr [rbp - 0x18]     #		    command = xmalloc(32 + |s|trlen(name) + 1);
0x17786:	mov rdi, rax                        
0x17789:	call 0x4960                         
0x1778e:	add rax, 0x21                       #		    command = |x|malloc(32 + strlen(name) + 1);
0x17792:	mov rdi, rax                        
0x17795:	call 0x24650                        
0x1779a:	mov qword ptr [rbp - 8], rax        
0x1779e:	mov rdx, qword ptr [rbp - 0x18]     #		    |s|printf(command, "rm -r -f \"%s\"", name);
0x177a2:	mov rax, qword ptr [rbp - 8]        
0x177a6:	lea rcx, [rip + 0x11249]            
0x177ad:	mov rsi, rcx                        
0x177b0:	mov rdi, rax                        
0x177b3:	mov eax, 0                          
0x177b8:	call 0x4dd0                         
0x177bd:	mov rax, qword ptr [rbp - 8]        #		    result = |s|tart(command, 1);
0x177c1:	mov esi, 1                          
0x177c6:	mov rdi, rax                        
0x177c9:	call 0x1f6f0                        
0x177ce:	mov dword ptr [rbp - 0x24], eax     
0x177d1:	mov rax, qword ptr [rbp - 8]        #		    |x|free(command);
0x177d5:	mov rdi, rax                        
0x177d8:	call 0x1eeae                        
0x177dd:	mov rax, qword ptr [rbp - 0x38]     #		    |t|ty_update_title(this->path);
0x177e1:	mov rax, qword ptr [rax + 0x18]     
0x177e5:	mov rdi, rax                        
0x177e8:	call 0xd875                         
0x177ed:	mov eax, dword ptr [rbp - 0x24]     #		    if(|W|IFSIGNALED(result))
0x177f0:	and eax, 0x7f                       
0x177f3:	add eax, 1                          
0x177f6:	sar al, 1                           
0x177f8:	test al, al                         #		    if|(|WIFSIGNALED(result))
0x177fa:	jle 0x1780c                         
0x177fc:	mov dword ptr [rbp - 0x24], 0       #			result|=|0;
0x17803:	mov dword ptr [rbp - 0x20], 1       #			interrupted|=|1;
0x1780a:	jmp 0x17864                         
0x1780c:	mov eax, dword ptr [rbp - 0x24]     #		    else if(|W|IFEXITED(result))
0x1780f:	and eax, 0x7f                       
0x17812:	test eax, eax                       #		    else if|(|WIFEXITED(result))
0x17814:	jne 0x17844                         
0x17816:	mov eax, dword ptr [rbp - 0x24]     #			if(|W|EXITSTATUS(result) != 0)
0x17819:	sar eax, 8                          
0x1781c:	movzx eax, al                       
0x1781f:	test eax, eax                       #			if|(|WEXITSTATUS(result) != 0)
0x17821:	je 0x1783b                          
0x17823:	lea rax, [rip + 0x111da]            #			    |d|isplay_errors("rm");
0x1782a:	mov rdi, rax                        
0x1782d:	call 0x1f808                        
0x17832:	mov dword ptr [rbp - 0x24], 0       #			    result|=|0;
0x17839:	jmp 0x17864                         
0x1783b:	mov dword ptr [rbp - 0x24], 1       #			    result|=|1; /* ok */
0x17842:	jmp 0x17864                         
0x17844:	mov dword ptr [rbp - 0x24], 0       #			result|=|0; /* unknown error */
0x1784b:	jmp 0x17864                         
0x1784d:	mov rax, qword ptr [rbp - 0x18]     #	    result = |u|nlink(name) == 0;
0x17851:	mov rdi, rax                        
0x17854:	call 0x4830                         
0x17859:	test eax, eax                       #	    result = unlink(name) |=|= 0;
0x1785b:	sete al                             
0x1785e:	movzx eax, al                       #	    result |=| unlink(name) == 0;
0x17861:	mov dword ptr [rbp - 0x24], eax     
0x17864:	cmp dword ptr [rbp - 0x20], 0       #	if |(|interrupted)
0x17868:	je 0x17897                          
0x1786a:	mov rax, qword ptr [rbp - 0x18]     #	    if (|p|anel_2s_message("%s: Deletion interrupted.  Continue? ",
0x1786e:	mov ecx, 0xe                        
0x17873:	lea rdx, [rip + 0x10dcc]            
0x1787a:	mov rsi, rax                        
0x1787d:	lea rax, [rip + 0x11184]            
0x17884:	mov rdi, rax                        
0x17887:	mov eax, 0                          
0x1788c:	call 0x11568                        
0x17891:	cmp al, 0x79                        #	    if |(|panel_2s_message("%s: Deletion interrupted.  Continue? ",
0x17893:	je 0x178ed                          
0x17895:	jmp 0x1790f                         #		|b|reak;
0x17897:	cmp dword ptr [rbp - 0x24], 0       #	else if |(|!result)
0x1789b:	jne 0x178ca                         
0x1789d:	mov rax, qword ptr [rbp - 0x18]     #	    if (|p|anel_2s_message("%s: Deletion failed.  Continue? ",
0x178a1:	mov ecx, 0xe                        
0x178a6:	lea rdx, [rip + 0x10d99]            
0x178ad:	mov rsi, rax                        
0x178b0:	lea rax, [rip + 0x11179]            
0x178b7:	mov rdi, rax                        
0x178ba:	mov eax, 0                          
0x178bf:	call 0x11568                        
0x178c4:	cmp al, 0x79                        #	    if |(|panel_2s_message("%s: Deletion failed.  Continue? ",
0x178c6:	je 0x178ed                          
0x178c8:	jmp 0x1790f                         #		|b|reak;
0x178ca:	mov rax, qword ptr [rbp - 0x38]     #	    this|-|>dir_entry[entry].selected = 0;
0x178ce:	mov rcx, qword ptr [rax + 0x38]     
0x178d2:	mov eax, dword ptr [rbp - 0x1c]     #	    this->dir_entry|[|entry].selected = 0;
0x178d5:	movsxd rdx, eax                     
0x178d8:	mov rax, rdx                        
0x178db:	shl rax, 2                          
0x178df:	add rax, rdx                        
0x178e2:	shl rax, 4                          
0x178e6:	add rax, rcx                        
0x178e9:	mov byte ptr [rax + 0x49], 0        #	    this->dir_entry[entry].selected |=| 0;
0x178ed:	mov rax, qword ptr [rbp - 0x38]     #    while ((entry = |p|anel_get_next(this)) != -1)
0x178f1:	mov rdi, rax                        
0x178f4:	call 0x13149                        
0x178f9:	mov dword ptr [rbp - 0x1c], eax     
0x178fc:	cmp dword ptr [rbp - 0x1c], -1      #    while ((entry = panel_get_next(this)) |!|= -1)
0x17900:	jne 0x175c4                         
0x17906:	jmp 0x1790f                         
0x17908:	nop                                 #	    |b|reak;
0x17909:	jmp 0x1790f                         
0x1790b:	nop                                 #	    |b|reak;
0x1790c:	jmp 0x1790f                         
0x1790e:	nop                                 #	    |b|reak;
0x1790f:	mov rax, qword ptr [rbp - 0x38]     #    if (first_entry != this|-|>entries)
0x17913:	mov eax, dword ptr [rax + 0x68]     
0x17916:	cmp dword ptr [rbp - 0x2c], eax     #    if |(|first_entry != this->entries)
0x17919:	je 0x17931                          
0x1791b:	mov edx, dword ptr [rbp - 0x2c]     #	|p|anel_set_current_entry(this, first_entry);
0x1791e:	mov rax, qword ptr [rbp - 0x38]     
0x17922:	mov esi, edx                        
0x17924:	mov rdi, rax                        
0x17927:	mov eax, 0                          
0x1792c:	call 0x112b7                        
0x17931:	mov rax, qword ptr [rbp - 0x38]     #    |p|anel_update_size(this);
0x17935:	mov rdi, rax                        
0x17938:	mov eax, 0                          
0x1793d:	call 0x13506                        
0x17942:	mov rax, qword ptr [rbp - 0x40]     #    |p|anel_update_size(other);
0x17946:	mov rdi, rax                        
0x17949:	mov eax, 0                          
0x1794e:	call 0x13506                        
0x17953:	mov eax, 0                          #    |s|tatus_default();
0x17958:	call 0x10857                        
0x1795d:	mov eax, 0                          #    |t|ty_update();
0x17962:	call 0xb4b7                         
0x17967:	mov rax, qword ptr [rbp - 0x38]     #    if (!|p|anel_read_directory(this, this->path, ON))
0x1796b:	mov rcx, qword ptr [rax + 0x18]     
0x1796f:	mov rax, qword ptr [rbp - 0x38]     
0x17973:	mov edx, 1                          
0x17978:	mov rsi, rcx                        
0x1797b:	mov rdi, rax                        
0x1797e:	mov eax, 0                          
0x17983:	call 0x12238                        
0x17988:	test eax, eax                       #    if |(|!panel_read_directory(this, this->path, ON))
0x1798a:	jne 0x1799d                         
0x1798c:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_recover(this);
0x17990:	mov rdi, rax                        
0x17993:	mov eax, 0                          
0x17998:	call 0x116a7                        
0x1799d:	mov rax, qword ptr [rbp - 0x38]     #    |p|anel_update(this);
0x179a1:	mov rdi, rax                        
0x179a4:	call 0x14e6a                        
0x179a9:	mov rax, qword ptr [rbp - 0x40]     #    if (strcmp(this->path, other|-|>path) == 0)
0x179ad:	mov rdx, qword ptr [rax + 0x18]     
0x179b1:	mov rax, qword ptr [rbp - 0x38]     #    if (strcmp(this|-|>path, other->path) == 0)
0x179b5:	mov rax, qword ptr [rax + 0x18]     
0x179b9:	mov rsi, rdx                        #    if (|s|trcmp(this->path, other->path) == 0)
0x179bc:	mov rdi, rax                        
0x179bf:	call 0x4af0                         
0x179c4:	test eax, eax                       #    if |(|strcmp(this->path, other->path) == 0)
0x179c6:	jne 0x17a10                         
0x179c8:	mov rax, qword ptr [rbp - 0x40]     #	if (!|p|anel_read_directory(other, other->path, ON))
0x179cc:	mov rcx, qword ptr [rax + 0x18]     
0x179d0:	mov rax, qword ptr [rbp - 0x40]     
0x179d4:	mov edx, 1                          
0x179d9:	mov rsi, rcx                        
0x179dc:	mov rdi, rax                        
0x179df:	mov eax, 0                          
0x179e4:	call 0x12238                        
0x179e9:	test eax, eax                       #	if |(|!panel_read_directory(other, other->path, ON))
0x179eb:	jne 0x179fe                         
0x179ed:	mov rax, qword ptr [rbp - 0x40]     #	    |p|anel_recover(other);
0x179f1:	mov rdi, rax                        
0x179f4:	mov eax, 0                          
0x179f9:	call 0x116a7                        
0x179fe:	mov rax, qword ptr [rbp - 0x40]     #	|p|anel_update(other);
0x17a02:	mov rdi, rax                        
0x17a05:	call 0x14e6a                        
0x17a0a:	jmp 0x17a10                         
0x17a0c:	nop                                 #	|r|eturn;
0x17a0d:	jmp 0x17a10                         
0x17a0f:	nop                                 #	|r|eturn;
0x17a10:	leave                               #|}|
0x17a11:	ret                                 
0x17a12:	endbr64                             #|{|
0x17a16:	push rbp                            
0x17a17:	mov rbp, rsp                        
0x17a1a:	sub rsp, 0xb0                       
0x17a21:	mov qword ptr [rbp - 0xa8], rdi     
0x17a28:	mov rax, qword ptr fs:[0x28]        #|{|
0x17a31:	mov qword ptr [rbp - 8], rax        
0x17a35:	xor eax, eax                        
0x17a37:	lea rdx, [rbp - 0xa0]               #    if (|s|tat(path, &s) < 0)
0x17a3e:	mov rax, qword ptr [rbp - 0xa8]     
0x17a45:	mov rsi, rdx                        
0x17a48:	mov rdi, rax                        
0x17a4b:	call 0x4b60                         
0x17a50:	test eax, eax                       #    if |(|stat(path, &s) < 0)
0x17a52:	jns 0x17a5b                         
0x17a54:	mov eax, 0                          #	return |0|;
0x17a59:	jmp 0x17a71                         
0x17a5b:	mov eax, dword ptr [rbp - 0x88]     #    return |S|_ISDIR(s.st_mode);
0x17a61:	and eax, 0xf000                     
0x17a66:	cmp eax, 0x4000                     
0x17a6b:	sete al                             
0x17a6e:	movzx eax, al                       
0x17a71:	mov rdx, qword ptr [rbp - 8]        #|}|
0x17a75:	sub rdx, qword ptr fs:[0x28]        
0x17a7e:	je 0x17a85                          
0x17a80:	call 0x4980                         #|}|
0x17a85:	leave                               
0x17a86:	ret                                 
0x17a87:	endbr64                             #|{|
0x17a8b:	push rbp                            
0x17a8c:	mov rbp, rsp                        
0x17a8f:	sub rsp, 0x20                       
0x17a93:	mov qword ptr [rbp - 0x18], rdi     
0x17a97:	mov dword ptr [rbp - 0x1c], esi     
0x17a9a:	mov rax, qword ptr [rbp - 0x18]     #    char *copy = |x|strdup(path);
0x17a9e:	mov rdi, rax                        
0x17aa1:	call 0x24780                        
0x17aa6:	mov qword ptr [rbp - 8], rax        
0x17aaa:	mov rax, qword ptr [rbp - 8]        #    char *|z| = copy;
0x17aae:	mov qword ptr [rbp - 0x10], rax     
0x17ab2:	jmp 0x17b19                         #    |f|or (; *z != '\0'; z++)
0x17ab4:	mov rax, qword ptr [rbp - 0x10]     #	if (|*|z == '/' && z != copy)
0x17ab8:	movzx eax, byte ptr [rax]           
0x17abb:	cmp al, 0x2f                        #	if |(|*z == '/' && z != copy)
0x17abd:	jne 0x17b14                         
0x17abf:	mov rax, qword ptr [rbp - 0x10]     #	if (*z == '/' |&|& z != copy)
0x17ac3:	cmp rax, qword ptr [rbp - 8]        
0x17ac7:	je 0x17b14                          
0x17ac9:	mov rax, qword ptr [rbp - 0x10]     #	    *z |=| '\0';
0x17acd:	mov byte ptr [rax], 0               
0x17ad0:	mov rax, qword ptr [rbp - 8]        #	    if (!|p|anel_isdir(copy))
0x17ad4:	mov rdi, rax                        
0x17ad7:	mov eax, 0                          
0x17adc:	call 0x17a12                        
0x17ae1:	test eax, eax                       #	    if |(|!panel_isdir(copy))
0x17ae3:	jne 0x17b0d                         
0x17ae5:	mov edx, dword ptr [rbp - 0x1c]     #		if (|m|kdir(copy, mode) != 0)
0x17ae8:	mov rax, qword ptr [rbp - 8]        
0x17aec:	mov esi, edx                        
0x17aee:	mov rdi, rax                        
0x17af1:	call 0x4880                         
0x17af6:	test eax, eax                       #		if |(|mkdir(copy, mode) != 0)
0x17af8:	je 0x17b0d                          
0x17afa:	mov rax, qword ptr [rbp - 8]        #		    |x|free(copy);
0x17afe:	mov rdi, rax                        
0x17b01:	call 0x1eeae                        
0x17b06:	mov eax, 0xffffffff                 #		    return |-|1;
0x17b0b:	jmp 0x17b35                         
0x17b0d:	mov rax, qword ptr [rbp - 0x10]     #	    *z |=| '/';
0x17b11:	mov byte ptr [rax], 0x2f            
0x17b14:	add qword ptr [rbp - 0x10], 1       #    for (; *z != '\0'; z|+|+)
0x17b19:	mov rax, qword ptr [rbp - 0x10]     #    for (; |*|z != '\0'; z++)
0x17b1d:	movzx eax, byte ptr [rax]           
0x17b20:	test al, al                         #    for (; *z |!|= '\0'; z++)
0x17b22:	jne 0x17ab4                         
0x17b24:	mov rax, qword ptr [rbp - 8]        #    |x|free(copy);
0x17b28:	mov rdi, rax                        
0x17b2b:	call 0x1eeae                        
0x17b30:	mov eax, 0                          #    return |0|;
0x17b35:	leave                               #|}|
0x17b36:	ret                                 
0x17b37:	endbr64                             #|{|
0x17b3b:	push rbp                            
0x17b3c:	mov rbp, rsp                        
0x17b3f:	sub rsp, 0x40                       
0x17b43:	mov qword ptr [rbp - 0x38], rdi     
0x17b47:	mov qword ptr [rbp - 0x40], rsi     
0x17b4b:	mov rax, qword ptr fs:[0x28]        #|{|
0x17b54:	mov qword ptr [rbp - 8], rax        
0x17b58:	xor eax, eax                        
0x17b5a:	mov qword ptr [rbp - 0x28], 0       #    char *|i|nput = NULL, *tmp_input;
0x17b62:	mov rdx, qword ptr [rip + 0x19aa7]  #    if (!|i|l_read_line("New directory name: ", &input, NULL, mkdir_history))
0x17b69:	lea rax, [rbp - 0x28]               
0x17b6d:	mov rcx, rdx                        
0x17b70:	mov edx, 0                          
0x17b75:	mov rsi, rax                        
0x17b78:	lea rax, [rip + 0x10ed2]            
0x17b7f:	mov rdi, rax                        
0x17b82:	call 0x5efb                         
0x17b87:	test rax, rax                       #    if |(|!il_read_line("New directory name: ", &input, NULL, mkdir_history))
0x17b8a:	je 0x17e24                          
0x17b90:	mov rax, qword ptr [rbp - 0x28]     #    if (input|[|0] == '\0')
0x17b94:	movzx eax, byte ptr [rax]           
0x17b97:	test al, al                         #    if |(|input[0] == '\0')
0x17b99:	jne 0x17bac                         
0x17b9b:	mov rax, qword ptr [rbp - 0x28]     #	|x|free(input);
0x17b9f:	mov rdi, rax                        
0x17ba2:	call 0x1eeae                        
0x17ba7:	jmp 0x17e25                         #	|r|eturn;
0x17bac:	mov rax, qword ptr [rbp - 0x28]     #    tmp_input = |t|ilde_expand(input);
0x17bb0:	mov rdi, rax                        
0x17bb3:	mov eax, 0                          
0x17bb8:	call 0x1fb51                        
0x17bbd:	mov qword ptr [rbp - 0x20], rax     
0x17bc1:	mov rax, qword ptr [rbp - 0x28]     #    |x|free(input);
0x17bc5:	mov rdi, rax                        
0x17bc8:	call 0x1eeae                        
0x17bcd:	mov rax, qword ptr [rbp - 0x20]     #    input |=| tmp_input;
0x17bd1:	mov qword ptr [rbp - 0x28], rax     
0x17bd5:	mov rax, qword ptr [rbp - 0x28]     #    len = |s|trlen(input);
0x17bd9:	mov rdi, rax                        
0x17bdc:	call 0x4960                         
0x17be1:	mov qword ptr [rbp - 0x18], rax     
0x17be5:	mov rax, qword ptr [rbp - 0x18]     #    input = |r|ealloc(input, len + 1 + 1);
0x17be9:	lea rdx, [rax + 2]                  
0x17bed:	mov rax, qword ptr [rbp - 0x28]     
0x17bf1:	mov rsi, rdx                        
0x17bf4:	mov rdi, rax                        
0x17bf7:	call 0x4cb0                         
0x17bfc:	mov qword ptr [rbp - 0x28], rax     #    input |=| realloc(input, len + 1 + 1);
0x17c00:	mov rdx, qword ptr [rbp - 0x28]     #    input|[|len] = '/';
0x17c04:	mov rax, qword ptr [rbp - 0x18]     
0x17c08:	add rax, rdx                        
0x17c0b:	mov byte ptr [rax], 0x2f            #    input[len] |=| '/';
0x17c0e:	mov rdx, qword ptr [rbp - 0x28]     #    input|[|len + 1] = '\0';
0x17c12:	mov rax, qword ptr [rbp - 0x18]     
0x17c16:	add rax, 1                          
0x17c1a:	add rax, rdx                        
0x17c1d:	mov byte ptr [rax], 0               #    input[len + 1] |=| '\0';
0x17c20:	mov rax, qword ptr [rbp - 0x28]     #    if (|p|anel_mkdirs(input, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) == -1)
0x17c24:	mov esi, 0x41ff                     
0x17c29:	mov rdi, rax                        
0x17c2c:	mov eax, 0                          
0x17c31:	call 0x17a87                        
0x17c36:	cmp eax, -1                         #    if |(|panel_mkdirs(input, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) == -1)
0x17c39:	jne 0x17c71                         
0x17c3b:	mov rax, qword ptr [rbp - 0x28]     #	|p|anel_2s_message("%s: Permission denied.", input,
0x17c3f:	mov ecx, 0x1c                       
0x17c44:	mov edx, 0                          
0x17c49:	mov rsi, rax                        
0x17c4c:	lea rax, [rip + 0x10e13]            
0x17c53:	mov rdi, rax                        
0x17c56:	mov eax, 0                          
0x17c5b:	call 0x11568                        
0x17c60:	mov rax, qword ptr [rbp - 0x28]     #	|x|free(input);
0x17c64:	mov rdi, rax                        
0x17c67:	call 0x1eeae                        
0x17c6c:	jmp 0x17e25                         #	|r|eturn;
0x17c71:	mov rax, qword ptr [rbp - 0x38]     #    if (!|p|anel_read_directory(this, this->path, ON))
0x17c75:	mov rcx, qword ptr [rax + 0x18]     
0x17c79:	mov rax, qword ptr [rbp - 0x38]     
0x17c7d:	mov edx, 1                          
0x17c82:	mov rsi, rcx                        
0x17c85:	mov rdi, rax                        
0x17c88:	mov eax, 0                          
0x17c8d:	call 0x12238                        
0x17c92:	test eax, eax                       #    if |(|!panel_read_directory(this, this->path, ON))
0x17c94:	jne 0x17ca9                         
0x17c96:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_recover(this);
0x17c9a:	mov rdi, rax                        
0x17c9d:	mov eax, 0                          
0x17ca2:	call 0x116a7                        
0x17ca7:	jmp 0x17d13                         
0x17ca9:	mov rdx, qword ptr [rbp - 0x28]     #	this->current_entry = |p|anel_find_index(this, input);
0x17cad:	mov rax, qword ptr [rbp - 0x38]     
0x17cb1:	mov rsi, rdx                        
0x17cb4:	mov rdi, rax                        
0x17cb7:	mov eax, 0                          
0x17cbc:	call 0x167e0                        
0x17cc1:	mov rdx, qword ptr [rbp - 0x38]     #	this->current_entry |=| panel_find_index(this, input);
0x17cc5:	mov dword ptr [rdx + 0x28], eax     
0x17cc8:	mov rax, qword ptr [rbp - 0x38]     #	this->first_on_screen = |p|anel_get_centered_fos(this);
0x17ccc:	mov rdi, rax                        
0x17ccf:	mov eax, 0                          
0x17cd4:	call 0x111d2                        
0x17cd9:	mov rdx, qword ptr [rbp - 0x38]     #	this->first_on_screen |=| panel_get_centered_fos(this);
0x17cdd:	mov dword ptr [rdx + 0x2c], eax     
0x17ce0:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_update_entries(this);
0x17ce4:	mov rdi, rax                        
0x17ce7:	mov eax, 0                          
0x17cec:	call 0x13223                        
0x17cf1:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_update_info(this);
0x17cf5:	mov rdi, rax                        
0x17cf8:	mov eax, 0                          
0x17cfd:	call 0x1395a                        
0x17d02:	mov rax, qword ptr [rbp - 0x38]     #	|p|anel_update_size(this);
0x17d06:	mov rdi, rax                        
0x17d09:	mov eax, 0                          
0x17d0e:	call 0x13506                        
0x17d13:	mov rax, qword ptr [rbp - 0x40]     #    if (strcmp(this->path, other|-|>path) == 0)
0x17d17:	mov rdx, qword ptr [rax + 0x18]     
0x17d1b:	mov rax, qword ptr [rbp - 0x38]     #    if (strcmp(this|-|>path, other->path) == 0)
0x17d1f:	mov rax, qword ptr [rax + 0x18]     
0x17d23:	mov rsi, rdx                        #    if (|s|trcmp(this->path, other->path) == 0)
0x17d26:	mov rdi, rax                        
0x17d29:	call 0x4af0                         
0x17d2e:	test eax, eax                       #    if |(|strcmp(this->path, other->path) == 0)
0x17d30:	jne 0x17e05                         
0x17d36:	mov rax, qword ptr [rbp - 0x40]     #	char *old_entry = xstrdup(other|-|>dir_entry[other->current_entry].name);
0x17d3a:	mov rcx, qword ptr [rax + 0x38]     
0x17d3e:	mov rax, qword ptr [rbp - 0x40]     #	char *old_entry = xstrdup(other->dir_entry[other|-|>current_entry].name);
0x17d42:	mov eax, dword ptr [rax + 0x28]     
0x17d45:	movsxd rdx, eax                     
0x17d48:	mov rax, rdx                        #	char *old_entry = xstrdup(other->dir_entry|[|other->current_entry].name);
0x17d4b:	shl rax, 2                          
0x17d4f:	add rax, rdx                        
0x17d52:	shl rax, 4                          
0x17d56:	add rax, rcx                        
0x17d59:	mov rax, qword ptr [rax]            #	char *old_entry = xstrdup(other->dir_entry[other->current_entry]|.|name);
0x17d5c:	mov rdi, rax                        #	char *old_entry = |x|strdup(other->dir_entry[other->current_entry].name);
0x17d5f:	call 0x24780                        
0x17d64:	mov qword ptr [rbp - 0x10], rax     
0x17d68:	mov rax, qword ptr [rbp - 0x40]     #	if (!|p|anel_read_directory(other, other->path, ON))
0x17d6c:	mov rcx, qword ptr [rax + 0x18]     
0x17d70:	mov rax, qword ptr [rbp - 0x40]     
0x17d74:	mov edx, 1                          
0x17d79:	mov rsi, rcx                        
0x17d7c:	mov rdi, rax                        
0x17d7f:	mov eax, 0                          
0x17d84:	call 0x12238                        
0x17d89:	test eax, eax                       #	if |(|!panel_read_directory(other, other->path, ON))
0x17d8b:	jne 0x17da0                         
0x17d8d:	mov rax, qword ptr [rbp - 0x40]     #	    |p|anel_recover(other);
0x17d91:	mov rdi, rax                        
0x17d94:	mov eax, 0                          
0x17d99:	call 0x116a7                        
0x17d9e:	jmp 0x17df9                         
0x17da0:	mov rdx, qword ptr [rbp - 0x10]     #	    other->current_entry = |p|anel_find_index(other, old_entry);
0x17da4:	mov rax, qword ptr [rbp - 0x40]     
0x17da8:	mov rsi, rdx                        
0x17dab:	mov rdi, rax                        
0x17dae:	mov eax, 0                          
0x17db3:	call 0x167e0                        
0x17db8:	mov rdx, qword ptr [rbp - 0x40]     #	    other->current_entry |=| panel_find_index(other, old_entry);
0x17dbc:	mov dword ptr [rdx + 0x28], eax     
0x17dbf:	mov rax, qword ptr [rbp - 0x40]     #	    other->first_on_screen = |p|anel_get_centered_fos(other);
0x17dc3:	mov rdi, rax                        
0x17dc6:	mov eax, 0                          
0x17dcb:	call 0x111d2                        
0x17dd0:	mov rdx, qword ptr [rbp - 0x40]     #	    other->first_on_screen |=| panel_get_centered_fos(other);
0x17dd4:	mov dword ptr [rdx + 0x2c], eax     
0x17dd7:	mov rax, qword ptr [rbp - 0x40]     #	    |p|anel_update_entries(other);
0x17ddb:	mov rdi, rax                        
0x17dde:	mov eax, 0                          
0x17de3:	call 0x13223                        
0x17de8:	mov rax, qword ptr [rbp - 0x40]     #	    |p|anel_update_info(other);
0x17dec:	mov rdi, rax                        
0x17def:	mov eax, 0                          
0x17df4:	call 0x1395a                        
0x17df9:	mov rax, qword ptr [rbp - 0x10]     #	|x|free(old_entry);
0x17dfd:	mov rdi, rax                        
0x17e00:	call 0x1eeae                        
0x17e05:	mov rax, qword ptr [rbp - 0x40]     #    |p|anel_update_size(other);
0x17e09:	mov rdi, rax                        
0x17e0c:	mov eax, 0                          
0x17e11:	call 0x13506                        
0x17e16:	mov rax, qword ptr [rbp - 0x28]     #    |x|free(input);
0x17e1a:	mov rdi, rax                        
0x17e1d:	call 0x1eeae                        
0x17e22:	jmp 0x17e25                         
0x17e24:	nop                                 #	|r|eturn;
0x17e25:	mov rax, qword ptr [rbp - 8]        #|}|
0x17e29:	sub rax, qword ptr fs:[0x28]        
0x17e32:	je 0x17e39                          
0x17e34:	call 0x4980                         
0x17e39:	leave                               
0x17e3a:	ret                                 
0x17e3b:	endbr64                             #|{|
0x17e3f:	push rbp                            
0x17e40:	mov rbp, rsp                        
0x17e43:	sub rsp, 0x70                       
0x17e47:	mov qword ptr [rbp - 0x68], rdi     
0x17e4b:	mov qword ptr [rbp - 0x70], rsi     
0x17e4f:	mov rax, qword ptr fs:[0x28]        #|{|
0x17e58:	mov qword ptr [rbp - 8], rax        
0x17e5c:	xor eax, eax                        
0x17e5e:	mov qword ptr [rbp - 0x48], 0       #    char *file, *|d|ir = NULL, *msg, *input = NULL, *tmp_input;
0x17e66:	mov qword ptr [rbp - 0x40], 0       #    char *file, *dir = NULL, *msg, *|i|nput = NULL, *tmp_input;
0x17e6e:	mov rax, qword ptr [rbp - 0x68]     #    this->chkdest |=| ON;
0x17e72:	mov dword ptr [rax + 0x90], 1       
0x17e7c:	mov rax, qword ptr [rbp - 0x68]     #    if (this|-|>selected_entries == 0)
0x17e80:	mov eax, dword ptr [rax + 0x70]     
0x17e83:	test eax, eax                       #    if |(|this->selected_entries == 0)
0x17e85:	jne 0x181bf                         
0x17e8b:	mov rax, qword ptr [rbp - 0x68]     #	char *name = this|-|>dir_entry[this->current_entry].name;
0x17e8f:	mov rcx, qword ptr [rax + 0x38]     
0x17e93:	mov rax, qword ptr [rbp - 0x68]     #	char *name = this->dir_entry[this|-|>current_entry].name;
0x17e97:	mov eax, dword ptr [rax + 0x28]     
0x17e9a:	movsxd rdx, eax                     
0x17e9d:	mov rax, rdx                        #	char *name = this->dir_entry|[|this->current_entry].name;
0x17ea0:	shl rax, 2                          
0x17ea4:	add rax, rdx                        
0x17ea7:	shl rax, 4                          
0x17eab:	add rax, rcx                        
0x17eae:	mov rax, qword ptr [rax]            #	char *|n|ame = this->dir_entry[this->current_entry].name;
0x17eb1:	mov qword ptr [rbp - 0x28], rax     
0x17eb5:	mov rax, qword ptr [rbp - 0x68]     #	if (this|-|>current_entry == 0 && !rootdir())
0x17eb9:	mov eax, dword ptr [rax + 0x28]     
0x17ebc:	test eax, eax                       #	if |(|this->current_entry == 0 && !rootdir())
0x17ebe:	jne 0x17eea                         
0x17ec0:	mov rax, qword ptr [rbp - 0x68]     #	if (this->current_entry == 0 && !|r|ootdir())
0x17ec4:	mov rax, qword ptr [rax + 0x18]     
0x17ec8:	movzx eax, byte ptr [rax]           
0x17ecb:	cmp al, 0x2f                        #	if (this->current_entry == 0 |&|& !rootdir())
0x17ecd:	jne 0x1851d                         
0x17ed3:	mov rax, qword ptr [rbp - 0x68]     #	if (this->current_entry == 0 && !|r|ootdir())
0x17ed7:	mov rax, qword ptr [rax + 0x18]     
0x17edb:	add rax, 1                          
0x17edf:	movzx eax, byte ptr [rax]           
0x17ee2:	test al, al                         #	if (this->current_entry == 0 && |!|rootdir())
0x17ee4:	jne 0x1851d                         
0x17eea:	mov rax, qword ptr [rbp - 0x28]     #	msg = xmalloc(16 + |s|trlen(name) + 1);
0x17eee:	mov rdi, rax                        
0x17ef1:	call 0x4960                         
0x17ef6:	add rax, 0x11                       #	msg = |x|malloc(16 + strlen(name) + 1);
0x17efa:	mov rdi, rax                        
0x17efd:	call 0x24650                        
0x17f02:	mov qword ptr [rbp - 0x20], rax     
0x17f06:	mov rax, qword ptr [rbp - 0x28]     #	|s|printf(msg, "Move %s to: ", cutname(name, 0, 0));
0x17f0a:	mov edx, 0                          
0x17f0f:	mov esi, 0                          
0x17f14:	mov rdi, rax                        
0x17f17:	mov eax, 0                          
0x17f1c:	call 0x10d03                        
0x17f21:	mov rdx, rax                        
0x17f24:	mov rax, qword ptr [rbp - 0x20]     
0x17f28:	lea rcx, [rip + 0x10b4e]            
0x17f2f:	mov rsi, rcx                        
0x17f32:	mov rdi, rax                        
0x17f35:	mov eax, 0                          
0x17f3a:	call 0x4dd0                         
0x17f3f:	mov rax, qword ptr [rbp - 0x28]     #	len  = 1 + |s|trlen(name) + 1;
0x17f43:	mov rdi, rax                        
0x17f46:	call 0x4960                         
0x17f4b:	add rax, 2                          #	len  |=| 1 + strlen(name) + 1;
0x17f4f:	mov qword ptr [rbp - 0x38], rax     
0x17f53:	mov rax, qword ptr [rbp - 0x70]     #	file = xmalloc(strlen(other|-|>path) + len);
0x17f57:	mov rax, qword ptr [rax + 0x18]     
0x17f5b:	mov rdi, rax                        #	file = xmalloc(|s|trlen(other->path) + len);
0x17f5e:	call 0x4960                         
0x17f63:	mov rdx, qword ptr [rbp - 0x38]     #	file = |x|malloc(strlen(other->path) + len);
0x17f67:	add rax, rdx                        
0x17f6a:	mov rdi, rax                        
0x17f6d:	call 0x24650                        
0x17f72:	mov qword ptr [rbp - 0x18], rax     
0x17f76:	mov rax, qword ptr [rbp - 0x70]     #	|s|printf(file, "%s/%s", other->path, name);
0x17f7a:	mov rdx, qword ptr [rax + 0x18]     
0x17f7e:	mov rcx, qword ptr [rbp - 0x28]     
0x17f82:	mov rax, qword ptr [rbp - 0x18]     
0x17f86:	lea rsi, [rip + 0x10842]            
0x17f8d:	mov rdi, rax                        
0x17f90:	mov eax, 0                          
0x17f95:	call 0x4dd0                         
0x17f9a:	mov rcx, qword ptr [rip + 0x19667]  #	if (!|i|l_read_line(msg, &input, file, move_history))
0x17fa1:	mov rdx, qword ptr [rbp - 0x18]     
0x17fa5:	lea rsi, [rbp - 0x40]               
0x17fa9:	mov rax, qword ptr [rbp - 0x20]     
0x17fad:	mov rdi, rax                        
0x17fb0:	call 0x5efb                         
0x17fb5:	test rax, rax                       #	if |(|!il_read_line(msg, &input, file, move_history))
0x17fb8:	jne 0x17fcb                         
0x17fba:	mov rax, qword ptr [rbp - 0x20]     #	    |x|free(msg);
0x17fbe:	mov rdi, rax                        
0x17fc1:	call 0x1eeae                        
0x17fc6:	jmp 0x18521                         #	    |r|eturn;
0x17fcb:	mov rax, qword ptr [rbp - 0x20]     #	|x|free(msg);
0x17fcf:	mov rdi, rax                        
0x17fd2:	call 0x1eeae                        
0x17fd7:	mov rax, qword ptr [rbp - 0x68]     #	if (|S|_ISDIR(this->dir_entry[this->current_entry].mode))
0x17fdb:	mov rcx, qword ptr [rax + 0x38]     
0x17fdf:	mov rax, qword ptr [rbp - 0x68]     
0x17fe3:	mov eax, dword ptr [rax + 0x28]     
0x17fe6:	movsxd rdx, eax                     
0x17fe9:	mov rax, rdx                        
0x17fec:	shl rax, 2                          
0x17ff0:	add rax, rdx                        
0x17ff3:	shl rax, 4                          
0x17ff7:	add rax, rcx                        
0x17ffa:	mov eax, dword ptr [rax + 0x10]     
0x17ffd:	and eax, 0xf000                     
0x18002:	cmp eax, 0x4000                     #	if |(|S_ISDIR(this->dir_entry[this->current_entry].mode))
0x18007:	jne 0x1801a                         
0x18009:	mov rax, qword ptr [rip + 0x18510]  #	    |i|l_message(PANEL_MOVE_DIR_MSG);
0x18010:	mov rdi, rax                        
0x18013:	call 0xfcbe                         
0x18018:	jmp 0x18029                         
0x1801a:	mov rax, qword ptr [rip + 0x184ef]  #	    |i|l_message(PANEL_MOVE_FILE_MSG);
0x18021:	mov rdi, rax                        
0x18024:	call 0xfcbe                         
0x18029:	mov eax, 0                          #	|t|ty_update();
0x1802e:	call 0xb4b7                         
0x18033:	mov rax, qword ptr [rbp - 0x40]     #	tmp_input = |t|ilde_expand(input);
0x18037:	mov rdi, rax                        
0x1803a:	mov eax, 0                          
0x1803f:	call 0x1fb51                        
0x18044:	mov qword ptr [rbp - 0x10], rax     
0x18048:	mov rax, qword ptr [rbp - 0x40]     #	|x|free(input);
0x1804c:	mov rdi, rax                        
0x1804f:	call 0x1eeae                        
0x18054:	mov rax, qword ptr [rbp - 0x10]     #	input |=| tmp_input;
0x18058:	mov qword ptr [rbp - 0x40], rax     
0x1805c:	mov rdx, qword ptr [rbp - 0x40]     #	error = |s|ame_file(name, input);
0x18060:	mov rax, qword ptr [rbp - 0x28]     
0x18064:	mov rsi, rdx                        
0x18067:	mov rdi, rax                        
0x1806a:	mov eax, 0                          
0x1806f:	call 0x15106                        
0x18074:	mov dword ptr [rbp - 0x4c], eax     
0x18077:	mov rax, qword ptr [rbp - 0x18]     #	|x|free(file);
0x1807b:	mov rdi, rax                        
0x1807e:	call 0x1eeae                        
0x18083:	cmp dword ptr [rbp - 0x4c], 0       #	if |(|error)
0x18087:	je 0x180c4                          
0x18089:	mov rdx, qword ptr [rbp - 0x40]     #	    |p|anel_3s_message("%s and %s point to the same file.",
0x1808d:	mov rax, qword ptr [rbp - 0x28]     
0x18091:	mov r8d, 0x1e                       
0x18097:	mov ecx, 0                          
0x1809c:	mov rsi, rax                        
0x1809f:	lea rax, [rip + 0x10892]            
0x180a6:	mov rdi, rax                        
0x180a9:	mov eax, 0                          
0x180ae:	call 0x115fd                        
0x180b3:	mov rax, qword ptr [rbp - 0x40]     #	    |x|free(input);
0x180b7:	mov rdi, rax                        
0x180ba:	call 0x1eeae                        
0x180bf:	jmp 0x18521                         #	    |r|eturn;
0x180c4:	mov rax, qword ptr [rbp - 0x68]     #			   this|-|>dir_entry[this->current_entry].mode);
0x180c8:	mov rcx, qword ptr [rax + 0x38]     
0x180cc:	mov rax, qword ptr [rbp - 0x68]     #			   this->dir_entry[this|-|>current_entry].mode);
0x180d0:	mov eax, dword ptr [rax + 0x28]     
0x180d3:	movsxd rdx, eax                     
0x180d6:	mov rax, rdx                        #			   this->dir_entry|[|this->current_entry].mode);
0x180d9:	shl rax, 2                          
0x180dd:	add rax, rdx                        
0x180e0:	shl rax, 4                          
0x180e4:	add rax, rcx                        
0x180e7:	mov ecx, dword ptr [rax + 0x10]     #	error = |p|anel_move(this, name, input,
0x180ea:	mov rdx, qword ptr [rbp - 0x40]     
0x180ee:	mov rsi, qword ptr [rbp - 0x28]     
0x180f2:	mov rax, qword ptr [rbp - 0x68]     
0x180f6:	mov rdi, rax                        
0x180f9:	mov eax, 0                          
0x180fe:	call 0x15f6a                        
0x18103:	mov dword ptr [rbp - 0x4c], eax     
0x18106:	cmp dword ptr [rbp - 0x4c], 1       #	if |(|error != FT_OK)
0x1810a:	je 0x18178                          
0x1810c:	cmp dword ptr [rbp - 0x4c], 2       #	    if |(|error == FT_CANCEL)
0x18110:	jne 0x18137                         
0x18112:	mov rax, qword ptr [rbp - 0x40]     #		|x|free(input);
0x18116:	mov rdi, rax                        
0x18119:	call 0x1eeae                        
0x1811e:	mov eax, 0                          #		|s|tatus_default();
0x18123:	call 0x10857                        
0x18128:	mov eax, 0                          #		|t|ty_update();
0x1812d:	call 0xb4b7                         
0x18132:	jmp 0x18521                         #		|r|eturn;
0x18137:	mov eax, dword ptr [rbp - 0x4c]     #	    panel_3s_message("%s: Move failed, %s.", name, moveerr[error |-| 1],
0x1813a:	sub eax, 1                          
0x1813d:	cdqe                                #	    |p|anel_3s_message("%s: Move failed, %s.", name, moveerr[error - 1],
0x1813f:	lea rdx, [rax*8]                    
0x18147:	lea rax, [rip + 0x18492]            
0x1814e:	mov rdx, qword ptr [rdx + rax]      
0x18152:	mov rax, qword ptr [rbp - 0x28]     
0x18156:	mov r8d, 0xe                        
0x1815c:	mov ecx, 0                          
0x18161:	mov rsi, rax                        
0x18164:	lea rax, [rip + 0x1091f]            
0x1816b:	mov rdi, rax                        
0x1816e:	mov eax, 0                          
0x18173:	call 0x115fd                        
0x18178:	mov rax, qword ptr [rbp - 0x40]     #	|x|free(input);
0x1817c:	mov rdi, rax                        
0x1817f:	call 0x1eeae                        
0x18184:	mov eax, 0                          #	|s|tatus_default();
0x18189:	call 0x10857                        
0x1818e:	mov rax, qword ptr [rbp - 0x68]     #	|p|anel_update_size(this);
0x18192:	mov rdi, rax                        
0x18195:	mov eax, 0                          
0x1819a:	call 0x13506                        
0x1819f:	mov rax, qword ptr [rbp - 0x70]     #	|p|anel_update_size(other);
0x181a3:	mov rdi, rax                        
0x181a6:	mov eax, 0                          
0x181ab:	call 0x13506                        
0x181b0:	mov eax, 0                          #	|t|ty_update();
0x181b5:	call 0xb4b7                         
0x181ba:	jmp 0x18497                         
0x181bf:	mov rcx, qword ptr [rip + 0x19442]  #	if (!|i|l_read_line("Move selected file(s) to: ", &dir,
0x181c6:	mov rax, qword ptr [rbp - 0x70]     
0x181ca:	mov rdx, qword ptr [rax + 0x18]     
0x181ce:	lea rax, [rbp - 0x48]               
0x181d2:	mov rsi, rax                        
0x181d5:	lea rax, [rip + 0x108c3]            
0x181dc:	mov rdi, rax                        
0x181df:	call 0x5efb                         
0x181e4:	test rax, rax                       #	if |(|!il_read_line("Move selected file(s) to: ", &dir,
0x181e7:	je 0x18520                          
0x181ed:	mov rdx, qword ptr [rbp - 0x48]     #	if (|s|ame_file(this->path, dir))
0x181f1:	mov rax, qword ptr [rbp - 0x68]     
0x181f5:	mov rax, qword ptr [rax + 0x18]     
0x181f9:	mov rsi, rdx                        
0x181fc:	mov rdi, rax                        
0x181ff:	mov eax, 0                          
0x18204:	call 0x15106                        
0x18209:	test eax, eax                       #	if |(|same_file(this->path, dir))
0x1820b:	je 0x1822b                          
0x1820d:	mov edx, 0xc                        #	    |p|anel_1s_message(nice_try, (char *)NULL,
0x18212:	mov esi, 0                          
0x18217:	lea rax, [rip + 0x18322]            
0x1821e:	mov rdi, rax                        
0x18221:	call 0x5c09                         
0x18226:	jmp 0x18521                         #	    |r|eturn;
0x1822b:	mov rax, qword ptr [rbp - 0x48]     #	dir = xrealloc(dir, (len = |s|trlen(dir) + 1) + 1);
0x1822f:	mov rdi, rax                        
0x18232:	call 0x4960                         
0x18237:	add rax, 1                          #	dir = xrealloc(dir, (len |=| strlen(dir) + 1) + 1);
0x1823b:	mov qword ptr [rbp - 0x38], rax     
0x1823f:	mov rax, qword ptr [rbp - 0x38]     #	dir = |x|realloc(dir, (len = strlen(dir) + 1) + 1);
0x18243:	lea rdx, [rax + 1]                  
0x18247:	mov rax, qword ptr [rbp - 0x48]     
0x1824b:	mov rsi, rdx                        
0x1824e:	mov rdi, rax                        
0x18251:	call 0x24670                        
0x18256:	mov qword ptr [rbp - 0x48], rax     #	dir |=| xrealloc(dir, (len = strlen(dir) + 1) + 1);
0x1825a:	mov rdx, qword ptr [rbp - 0x48]     #	dir|[|len-1] = '/';
0x1825e:	mov rax, qword ptr [rbp - 0x38]     
0x18262:	sub rax, 1                          
0x18266:	add rax, rdx                        
0x18269:	mov byte ptr [rax], 0x2f            #	dir[len-1] |=| '/';
0x1826c:	mov rdx, qword ptr [rbp - 0x48]     #	dir|[|len  ] = '\0';
0x18270:	mov rax, qword ptr [rbp - 0x38]     
0x18274:	add rax, rdx                        
0x18277:	mov byte ptr [rax], 0               #	dir[len  ] |=| '\0';
0x1827a:	mov dword ptr [rbp - 0x54], 0       #	for (first_entry |=| 0; first_entry < this->entries; first_entry++)
0x18281:	jmp 0x182ae                         #	|f|or (first_entry = 0; first_entry < this->entries; first_entry++)
0x18283:	mov rax, qword ptr [rbp - 0x68]     #	    if (this|-|>dir_entry[first_entry].selected)
0x18287:	mov rcx, qword ptr [rax + 0x38]     
0x1828b:	mov eax, dword ptr [rbp - 0x54]     #	    if (this->dir_entry|[|first_entry].selected)
0x1828e:	movsxd rdx, eax                     
0x18291:	mov rax, rdx                        
0x18294:	shl rax, 2                          
0x18298:	add rax, rdx                        
0x1829b:	shl rax, 4                          
0x1829f:	add rax, rcx                        
0x182a2:	movzx eax, byte ptr [rax + 0x49]    #	    if (this->dir_entry[first_entry]|.|selected)
0x182a6:	test al, al                         #	    if |(|this->dir_entry[first_entry].selected)
0x182a8:	jne 0x182bc                         
0x182aa:	add dword ptr [rbp - 0x54], 1       #	for (first_entry = 0; first_entry < this->entries; first_entry|+|+)
0x182ae:	mov rax, qword ptr [rbp - 0x68]     #	for (first_entry = 0; first_entry < this|-|>entries; first_entry++)
0x182b2:	mov eax, dword ptr [rax + 0x68]     
0x182b5:	cmp dword ptr [rbp - 0x54], eax     #	for (first_entry = 0; first_entry |<| this->entries; first_entry++)
0x182b8:	jl 0x18283                          
0x182ba:	jmp 0x182bd                         
0x182bc:	nop                                 #		|b|reak;
0x182bd:	mov rax, qword ptr [rbp - 0x68]     #	|p|anel_init_iterator(this);
0x182c1:	mov rdi, rax                        
0x182c4:	call 0x13121                        
0x182c9:	jmp 0x1842d                         #	while |(|(entry = panel_get_next(this)) != -1)
0x182ce:	mov rax, qword ptr [rbp - 0x68]     #	    char *name = this|-|>dir_entry[entry].name;
0x182d2:	mov rcx, qword ptr [rax + 0x38]     
0x182d6:	mov eax, dword ptr [rbp - 0x50]     #	    char *name = this->dir_entry|[|entry].name;
0x182d9:	movsxd rdx, eax                     
0x182dc:	mov rax, rdx                        
0x182df:	shl rax, 2                          
0x182e3:	add rax, rdx                        
0x182e6:	shl rax, 4                          
0x182ea:	add rax, rcx                        
0x182ed:	mov rax, qword ptr [rax]            #	    char *|n|ame = this->dir_entry[entry].name;
0x182f0:	mov qword ptr [rbp - 0x30], rax     
0x182f4:	mov eax, 0                          #	    |s|ervice_pending_signals();
0x182f9:	call 0x1ea4b                        
0x182fe:	mov rax, qword ptr [rbp - 0x30]     #	    dir = xrealloc(dir, len + |s|trlen(name) + 1);
0x18302:	mov rdi, rax                        
0x18305:	call 0x4960                         
0x1830a:	mov rdx, qword ptr [rbp - 0x38]     #	    dir = xrealloc(dir, len |+| strlen(name) + 1);
0x1830e:	add rax, rdx                        
0x18311:	lea rdx, [rax + 1]                  #	    dir = |x|realloc(dir, len + strlen(name) + 1);
0x18315:	mov rax, qword ptr [rbp - 0x48]     
0x18319:	mov rsi, rdx                        
0x1831c:	mov rdi, rax                        
0x1831f:	call 0x24670                        
0x18324:	mov qword ptr [rbp - 0x48], rax     #	    dir |=| xrealloc(dir, len + strlen(name) + 1);
0x18328:	mov rdx, qword ptr [rbp - 0x48]     #	    |s|trcpy(dir + len, name);
0x1832c:	mov rax, qword ptr [rbp - 0x38]     
0x18330:	add rdx, rax                        
0x18333:	mov rax, qword ptr [rbp - 0x30]     
0x18337:	mov rsi, rax                        
0x1833a:	mov rdi, rdx                        
0x1833d:	call 0x4870                         
0x18342:	mov eax, 0                          #	    if (|c|anceled())
0x18347:	call 0x15065                        
0x1834c:	test eax, eax                       #	    if |(|canceled())
0x1834e:	jne 0x18448                         
0x18354:	mov rax, qword ptr [rip + 0x181bd]  #	    |i|l_message(PANEL_MOVE_FILES_MSG);
0x1835b:	mov rdi, rax                        
0x1835e:	call 0xfcbe                         
0x18363:	mov eax, 0                          #	    |t|ty_update();
0x18368:	call 0xb4b7                         
0x1836d:	mov rax, qword ptr [rbp - 0x68]     #	    error = panel_move(this, name, dir, this|-|>dir_entry[entry].mode);
0x18371:	mov rcx, qword ptr [rax + 0x38]     
0x18375:	mov eax, dword ptr [rbp - 0x50]     #	    error = panel_move(this, name, dir, this->dir_entry|[|entry].mode);
0x18378:	movsxd rdx, eax                     
0x1837b:	mov rax, rdx                        
0x1837e:	shl rax, 2                          
0x18382:	add rax, rdx                        
0x18385:	shl rax, 4                          
0x18389:	add rax, rcx                        
0x1838c:	mov ecx, dword ptr [rax + 0x10]     #	    error = |p|anel_move(this, name, dir, this->dir_entry[entry].mode);
0x1838f:	mov rdx, qword ptr [rbp - 0x48]     
0x18393:	mov rsi, qword ptr [rbp - 0x30]     
0x18397:	mov rax, qword ptr [rbp - 0x68]     
0x1839b:	mov rdi, rax                        
0x1839e:	mov eax, 0                          
0x183a3:	call 0x15f6a                        
0x183a8:	mov dword ptr [rbp - 0x4c], eax     
0x183ab:	cmp dword ptr [rbp - 0x4c], 1       #	    if |(|error != FT_OK)
0x183af:	je 0x1840a                          
0x183b1:	cmp dword ptr [rbp - 0x4c], 2       #		if |(|error == FT_CANCEL)
0x183b5:	je 0x1844b                          
0x183bb:	cmp dword ptr [rbp - 0x4c], 3       #		if |(|error == FT_SKIP)
0x183bf:	jne 0x183c3                         
0x183c1:	jmp 0x1842d                         #		    |c|ontinue;
0x183c3:	mov eax, dword ptr [rbp - 0x4c]     #				     moveerr[error |-| 1], (char *)NULL,
0x183c6:	sub eax, 1                          
0x183c9:	cdqe                                #		if (|p|anel_3s_message("%s: Move failed, %s.", name,
0x183cb:	lea rdx, [rax*8]                    
0x183d3:	lea rax, [rip + 0x18206]            
0x183da:	mov rdx, qword ptr [rdx + rax]      
0x183de:	mov rax, qword ptr [rbp - 0x30]     
0x183e2:	mov r8d, 0xe                        
0x183e8:	mov ecx, 0                          
0x183ed:	mov rsi, rax                        
0x183f0:	lea rax, [rip + 0x10693]            
0x183f7:	mov rdi, rax                        
0x183fa:	mov eax, 0                          
0x183ff:	call 0x115fd                        
0x18404:	test al, al                         #		if |(|panel_3s_message("%s: Move failed, %s.", name,
0x18406:	jne 0x1842d                         
0x18408:	jmp 0x1844c                         #		    |b|reak;
0x1840a:	mov rax, qword ptr [rbp - 0x68]     #		this|-|>dir_entry[entry].selected = 0;
0x1840e:	mov rcx, qword ptr [rax + 0x38]     
0x18412:	mov eax, dword ptr [rbp - 0x50]     #		this->dir_entry|[|entry].selected = 0;
0x18415:	movsxd rdx, eax                     
0x18418:	mov rax, rdx                        
0x1841b:	shl rax, 2                          
0x1841f:	add rax, rdx                        
0x18422:	shl rax, 4                          
0x18426:	add rax, rcx                        
0x18429:	mov byte ptr [rax + 0x49], 0        #		this->dir_entry[entry].selected |=| 0;
0x1842d:	mov rax, qword ptr [rbp - 0x68]     #	while ((entry = |p|anel_get_next(this)) != -1)
0x18431:	mov rdi, rax                        
0x18434:	call 0x13149                        
0x18439:	mov dword ptr [rbp - 0x50], eax     
0x1843c:	cmp dword ptr [rbp - 0x50], -1      #	while ((entry = panel_get_next(this)) |!|= -1)
0x18440:	jne 0x182ce                         
0x18446:	jmp 0x1844c                         
0x18448:	nop                                 #		|b|reak;
0x18449:	jmp 0x1844c                         
0x1844b:	nop                                 #		    |b|reak;
0x1844c:	mov rax, qword ptr [rbp - 0x48]     #	if (|d|ir)
0x18450:	test rax, rax                       #	if |(|dir)
0x18453:	je 0x18461                          
0x18455:	mov rax, qword ptr [rbp - 0x48]     #	    |x|free(dir);
0x18459:	mov rdi, rax                        
0x1845c:	call 0x1eeae                        
0x18461:	mov rax, qword ptr [rbp - 0x68]     #	if (first_entry != this|-|>entries)
0x18465:	mov eax, dword ptr [rax + 0x68]     
0x18468:	cmp dword ptr [rbp - 0x54], eax     #	if |(|first_entry != this->entries)
0x1846b:	je 0x18483                          
0x1846d:	mov edx, dword ptr [rbp - 0x54]     #	    |p|anel_set_current_entry(this, first_entry);
0x18470:	mov rax, qword ptr [rbp - 0x68]     
0x18474:	mov esi, edx                        
0x18476:	mov rdi, rax                        
0x18479:	mov eax, 0                          
0x1847e:	call 0x112b7                        
0x18483:	mov eax, 0                          #	|s|tatus_default();
0x18488:	call 0x10857                        
0x1848d:	mov eax, 0                          #	|t|ty_update();
0x18492:	call 0xb4b7                         
0x18497:	mov rax, qword ptr [rbp - 0x70]     #    if (!|p|anel_read_directory(other, other->path, ON))
0x1849b:	mov rcx, qword ptr [rax + 0x18]     
0x1849f:	mov rax, qword ptr [rbp - 0x70]     
0x184a3:	mov edx, 1                          
0x184a8:	mov rsi, rcx                        
0x184ab:	mov rdi, rax                        
0x184ae:	mov eax, 0                          
0x184b3:	call 0x12238                        
0x184b8:	test eax, eax                       #    if |(|!panel_read_directory(other, other->path, ON))
0x184ba:	jne 0x184cd                         
0x184bc:	mov rax, qword ptr [rbp - 0x70]     #	|p|anel_recover(other);
0x184c0:	mov rdi, rax                        
0x184c3:	mov eax, 0                          
0x184c8:	call 0x116a7                        
0x184cd:	mov rax, qword ptr [rbp - 0x70]     #    |p|anel_update(other);
0x184d1:	mov rdi, rax                        
0x184d4:	call 0x14e6a                        
0x184d9:	mov rax, qword ptr [rbp - 0x68]     #    if (!|p|anel_read_directory(this, this->path, ON))
0x184dd:	mov rcx, qword ptr [rax + 0x18]     
0x184e1:	mov rax, qword ptr [rbp - 0x68]     
0x184e5:	mov edx, 1                          
0x184ea:	mov rsi, rcx                        
0x184ed:	mov rdi, rax                        
0x184f0:	mov eax, 0                          
0x184f5:	call 0x12238                        
0x184fa:	test eax, eax                       #    if |(|!panel_read_directory(this, this->path, ON))
0x184fc:	jne 0x1850f                         
0x184fe:	mov rax, qword ptr [rbp - 0x68]     #	|p|anel_recover(this);
0x18502:	mov rdi, rax                        
0x18505:	mov eax, 0                          
0x1850a:	call 0x116a7                        
0x1850f:	mov rax, qword ptr [rbp - 0x68]     #    |p|anel_update(this);
0x18513:	mov rdi, rax                        
0x18516:	call 0x14e6a                        
0x1851b:	jmp 0x18521                         
0x1851d:	nop                                 #	    |r|eturn;
0x1851e:	jmp 0x18521                         
0x18520:	nop                                 #	    |r|eturn;
0x18521:	mov rax, qword ptr [rbp - 8]        #|}|
0x18525:	sub rax, qword ptr fs:[0x28]        
0x1852e:	je 0x18535                          
0x18530:	call 0x4980                         
0x18535:	leave                               
0x18536:	ret                                 
0x18537:	endbr64                             #|{|
0x1853b:	push rbp                            
0x1853c:	mov rbp, rsp                        
0x1853f:	push rbx                            
0x18540:	sub rsp, 0x28                       
0x18544:	mov qword ptr [rbp - 0x18], rdi     
0x18548:	mov qword ptr [rbp - 0x20], rsi     
0x1854c:	mov qword ptr [rbp - 0x28], rdx     
0x18550:	mov rax, qword ptr [rbp - 0x28]     #    if (new_dir|[|0] == '/')
0x18554:	movzx eax, byte ptr [rax]           
0x18557:	cmp al, 0x2f                        #    if |(|new_dir[0] == '/')
0x18559:	jne 0x185b2                         
0x1855b:	mov rax, qword ptr [rbp - 0x28]     #	this->pathlen = |s|trlen(new_dir);
0x1855f:	mov rdi, rax                        
0x18562:	call 0x4960                         
0x18567:	mov rdx, qword ptr [rbp - 0x18]     #	this->pathlen |=| strlen(new_dir);
0x1856b:	mov qword ptr [rdx + 0x78], rax     
0x1856f:	mov rax, qword ptr [rbp - 0x18]     #	this->path = xrealloc(this->path, (this|-|>pathlen + 1) * sizeof(char));
0x18573:	mov rax, qword ptr [rax + 0x78]     
0x18577:	lea rdx, [rax + 1]                  #	this->path = xrealloc(this->path, (this->pathlen |+| 1) * sizeof(char));
0x1857b:	mov rax, qword ptr [rbp - 0x18]     #	this->path = xrealloc(this|-|>path, (this->pathlen + 1) * sizeof(char));
0x1857f:	mov rax, qword ptr [rax + 0x18]     
0x18583:	mov rsi, rdx                        #	this->path = |x|realloc(this->path, (this->pathlen + 1) * sizeof(char));
0x18586:	mov rdi, rax                        
0x18589:	call 0x24670                        
0x1858e:	mov rdx, qword ptr [rbp - 0x18]     #	this->path |=| xrealloc(this->path, (this->pathlen + 1) * sizeof(char));
0x18592:	mov qword ptr [rdx + 0x18], rax     
0x18596:	mov rax, qword ptr [rbp - 0x18]     #	|s|trcpy(this->path, new_dir);
0x1859a:	mov rax, qword ptr [rax + 0x18]     
0x1859e:	mov rdx, qword ptr [rbp - 0x28]     
0x185a2:	mov rsi, rdx                        
0x185a5:	mov rdi, rax                        
0x185a8:	call 0x4870                         
0x185ad:	jmp 0x1863b                         
0x185b2:	mov rax, qword ptr [rbp - 0x18]     #	this->pathlen |+|= 1 + strlen(new_dir);
0x185b6:	mov rbx, qword ptr [rax + 0x78]     
0x185ba:	mov rax, qword ptr [rbp - 0x28]     #	this->pathlen += 1 + |s|trlen(new_dir);
0x185be:	mov rdi, rax                        
0x185c1:	call 0x4960                         
0x185c6:	add rax, rbx                        #	this->pathlen |+|= 1 + strlen(new_dir);
0x185c9:	lea rdx, [rax + 1]                  
0x185cd:	mov rax, qword ptr [rbp - 0x18]     
0x185d1:	mov qword ptr [rax + 0x78], rdx     
0x185d5:	mov rax, qword ptr [rbp - 0x18]     #	this->path = xrealloc(this->path, (this|-|>pathlen + 1) * sizeof(char));
0x185d9:	mov rax, qword ptr [rax + 0x78]     
0x185dd:	lea rdx, [rax + 1]                  #	this->path = xrealloc(this->path, (this->pathlen |+| 1) * sizeof(char));
0x185e1:	mov rax, qword ptr [rbp - 0x18]     #	this->path = xrealloc(this|-|>path, (this->pathlen + 1) * sizeof(char));
0x185e5:	mov rax, qword ptr [rax + 0x18]     
0x185e9:	mov rsi, rdx                        #	this->path = |x|realloc(this->path, (this->pathlen + 1) * sizeof(char));
0x185ec:	mov rdi, rax                        
0x185ef:	call 0x24670                        
0x185f4:	mov rdx, qword ptr [rbp - 0x18]     #	this->path |=| xrealloc(this->path, (this->pathlen + 1) * sizeof(char));
0x185f8:	mov qword ptr [rdx + 0x18], rax     
0x185fc:	mov rax, qword ptr [rbp - 0x18]     #	|s|trcat(this->path, "/");
0x18600:	mov rbx, qword ptr [rax + 0x18]     
0x18604:	mov rdi, rbx                        
0x18607:	call 0x4960                         
0x1860c:	add rax, rbx                        
0x1860f:	mov word ptr [rax], 0x2f            
0x18614:	mov rax, qword ptr [rbp - 0x18]     #	|s|trcat(this->path, new_dir);
0x18618:	mov rax, qword ptr [rax + 0x18]     
0x1861c:	mov rdx, qword ptr [rbp - 0x28]     
0x18620:	mov rsi, rdx                        
0x18623:	mov rdi, rax                        
0x18626:	call 0x4db0                         
0x1862b:	mov rax, qword ptr [rbp - 0x18]     #	|m|inimize_path(this->path);
0x1862f:	mov rax, qword ptr [rax + 0x18]     
0x18633:	mov rdi, rax                        
0x18636:	call 0x1e08b                        
0x1863b:	mov rax, qword ptr [rbp - 0x18]     #    |p|anel_set_current_entry(this, 0);
0x1863f:	mov esi, 0                          
0x18644:	mov rdi, rax                        
0x18647:	mov eax, 0                          
0x1864c:	call 0x112b7                        
0x18651:	mov rax, qword ptr [rbp - 0x18]     #    |p|anel_action(this, act_REGET, (panel_t *)NULL, (void *)NULL, 1);
0x18655:	mov r8d, 1                          
0x1865b:	mov ecx, 0                          
0x18660:	mov edx, 0                          
0x18665:	mov esi, 0x22                       
0x1866a:	mov rdi, rax                        
0x1866d:	call 0x1a89a                        
0x18672:	mov rax, qword ptr [rbp - 0x18]     #    |p|anel_update(this);
0x18676:	mov rdi, rax                        
0x18679:	call 0x14e6a                        
0x1867e:	mov rax, qword ptr [rbp - 0x20]     #    if (strcmp(this->path, other|-|>path) == 0)
0x18682:	mov rdx, qword ptr [rax + 0x18]     
0x18686:	mov rax, qword ptr [rbp - 0x18]     #    if (strcmp(this|-|>path, other->path) == 0)
0x1868a:	mov rax, qword ptr [rax + 0x18]     
0x1868e:	mov rsi, rdx                        #    if (|s|trcmp(this->path, other->path) == 0)
0x18691:	mov rdi, rax                        
0x18694:	call 0x4af0                         
0x18699:	test eax, eax                       #    if |(|strcmp(this->path, other->path) == 0)
0x1869b:	jne 0x186cc                         
0x1869d:	mov rax, qword ptr [rbp - 0x20]     #	|p|anel_action(other, act_REGET, (panel_t *)NULL, (void *)-1, 1);
0x186a1:	mov r8d, 1                          
0x186a7:	mov rcx, -1                         
0x186ae:	mov edx, 0                          
0x186b3:	mov esi, 0x22                       
0x186b8:	mov rdi, rax                        
0x186bb:	call 0x1a89a                        
0x186c0:	mov rax, qword ptr [rbp - 0x20]     #	|p|anel_update(other);
0x186c4:	mov rdi, rax                        
0x186c7:	call 0x14e6a                        
0x186cc:	nop                                 #|}|
0x186cd:	mov rbx, qword ptr [rbp - 8]        
0x186d1:	leave                               
0x186d2:	ret                                 
0x186d3:	endbr64                             #|{|
0x186d7:	push rbp                            
0x186d8:	mov rbp, rsp                        
0x186db:	sub rsp, 0x20                       
0x186df:	mov qword ptr [rbp - 0x18], rdi     
0x186e3:	mov qword ptr [rbp - 0x20], rsi     
0x186e7:	mov rax, qword ptr [rbp - 0x18]     #    if (this|-|>dir_entry && this->dir_entry[this->current_entry].name)
0x186eb:	mov rax, qword ptr [rax + 0x38]     
0x186ef:	test rax, rax                       #    if |(|this->dir_entry && this->dir_entry[this->current_entry].name)
0x186f2:	je 0x1875a                          
0x186f4:	mov rax, qword ptr [rbp - 0x18]     #    if (this->dir_entry && this|-|>dir_entry[this->current_entry].name)
0x186f8:	mov rcx, qword ptr [rax + 0x38]     
0x186fc:	mov rax, qword ptr [rbp - 0x18]     #    if (this->dir_entry && this->dir_entry[this|-|>current_entry].name)
0x18700:	mov eax, dword ptr [rax + 0x28]     
0x18703:	movsxd rdx, eax                     
0x18706:	mov rax, rdx                        #    if (this->dir_entry && this->dir_entry|[|this->current_entry].name)
0x18709:	shl rax, 2                          
0x1870d:	add rax, rdx                        
0x18710:	shl rax, 4                          
0x18714:	add rax, rcx                        
0x18717:	mov rax, qword ptr [rax]            #    if (this->dir_entry && this->dir_entry[this->current_entry]|.|name)
0x1871a:	test rax, rax                       #    if (this->dir_entry |&|& this->dir_entry[this->current_entry].name)
0x1871d:	je 0x1875a                          
0x1871f:	mov rax, qword ptr [rbp - 0x18]     #	old_entry = xstrdup(this|-|>dir_entry[this->current_entry].name);
0x18723:	mov rcx, qword ptr [rax + 0x38]     
0x18727:	mov rax, qword ptr [rbp - 0x18]     #	old_entry = xstrdup(this->dir_entry[this|-|>current_entry].name);
0x1872b:	mov eax, dword ptr [rax + 0x28]     
0x1872e:	movsxd rdx, eax                     
0x18731:	mov rax, rdx                        #	old_entry = xstrdup(this->dir_entry|[|this->current_entry].name);
0x18734:	shl rax, 2                          
0x18738:	add rax, rdx                        
0x1873b:	shl rax, 4                          
0x1873f:	add rax, rcx                        
0x18742:	mov rax, qword ptr [rax]            #	old_entry = xstrdup(this->dir_entry[this->current_entry]|.|name);
0x18745:	mov rdi, rax                        #	old_entry = |x|strdup(this->dir_entry[this->current_entry].name);
0x18748:	call 0x24780                        
0x1874d:	mov qword ptr [rbp - 8], rax        
0x18751:	mov dword ptr [rbp - 0x10], 1       #	flag |=| 1;
0x18758:	jmp 0x1876c                         
0x1875a:	lea rax, [rip + 0xfea0]             #	old_entry |=| "", flag = 0;
0x18761:	mov qword ptr [rbp - 8], rax        
0x18765:	mov dword ptr [rbp - 0x10], 0       #	old_entry = "", flag |=| 0;
0x1876c:	cmp qword ptr [rbp - 0x20], -1      #    verify = aux_info |=|= (void *)-1;
0x18771:	sete al                             
0x18774:	movzx eax, al                       #    verify |=| aux_info == (void *)-1;
0x18777:	mov dword ptr [rbp - 0xc], eax      
0x1877a:	mov rax, qword ptr [rbp - 0x18]     #    if (|p|anel_read_directory(this, this->path, verify))
0x1877e:	mov rcx, qword ptr [rax + 0x18]     
0x18782:	mov edx, dword ptr [rbp - 0xc]      
0x18785:	mov rax, qword ptr [rbp - 0x18]     
0x18789:	mov rsi, rcx                        
0x1878c:	mov rdi, rax                        
0x1878f:	mov eax, 0                          
0x18794:	call 0x12238                        
0x18799:	test eax, eax                       #    if |(|panel_read_directory(this, this->path, verify))
0x1879b:	je 0x187ea                          
0x1879d:	cmp dword ptr [rbp - 0xc], 0        #	if |(|verify)
0x187a1:	je 0x187d2                          
0x187a3:	mov rdx, qword ptr [rbp - 8]        #	    |p|anel_set_current_entry(this, panel_find_index(this, old_entry));
0x187a7:	mov rax, qword ptr [rbp - 0x18]     
0x187ab:	mov rsi, rdx                        
0x187ae:	mov rdi, rax                        
0x187b1:	mov eax, 0                          
0x187b6:	call 0x167e0                        
0x187bb:	mov edx, eax                        
0x187bd:	mov rax, qword ptr [rbp - 0x18]     
0x187c1:	mov esi, edx                        
0x187c3:	mov rdi, rax                        
0x187c6:	mov eax, 0                          
0x187cb:	call 0x112b7                        
0x187d0:	jmp 0x187fb                         
0x187d2:	mov rax, qword ptr [rbp - 0x18]     #	    |p|anel_set_current_entry(this, 0);
0x187d6:	mov esi, 0                          
0x187db:	mov rdi, rax                        
0x187de:	mov eax, 0                          
0x187e3:	call 0x112b7                        
0x187e8:	jmp 0x187fb                         
0x187ea:	mov rax, qword ptr [rbp - 0x18]     #	|p|anel_recover(this);
0x187ee:	mov rdi, rax                        
0x187f1:	mov eax, 0                          
0x187f6:	call 0x116a7                        
0x187fb:	cmp dword ptr [rbp - 0x10], 0       #    if |(|flag)
0x187ff:	je 0x1880d                          
0x18801:	mov rax, qword ptr [rbp - 8]        #	|x|free(old_entry);
0x18805:	mov rdi, rax                        
0x18808:	call 0x1eeae                        
0x1880d:	nop                                 #|}|
0x1880e:	leave                               
0x1880f:	ret                                 
0x18810:	endbr64                             #|{|
0x18814:	push rbp                            
0x18815:	mov rbp, rsp                        
0x18818:	push rbx                            
0x18819:	sub rsp, 0xa8                       
0x18820:	mov qword ptr [rbp - 0x88], rdi     
0x18827:	mov dword ptr [rbp - 0x8c], esi     
0x1882d:	mov qword ptr [rbp - 0x98], rdx     
0x18834:	mov qword ptr [rbp - 0xa0], rcx     
0x1883b:	mov dword ptr [rbp - 0x90], r8d     
0x18842:	mov qword ptr [rbp - 0xa8], r9      
0x18849:	mov dword ptr [rbp - 0x80], 0       #    int |a|borted = 0;
0x18850:	mov rax, qword ptr [rbp - 0x88]     #    char *name1 = this|-|>dir_entry[this_entry].name;
0x18857:	mov rcx, qword ptr [rax + 0x38]     
0x1885b:	mov eax, dword ptr [rbp - 0x8c]     #    char *name1 = this->dir_entry|[|this_entry].name;
0x18861:	movsxd rdx, eax                     
0x18864:	mov rax, rdx                        
0x18867:	shl rax, 2                          
0x1886b:	add rax, rdx                        
0x1886e:	shl rax, 4                          
0x18872:	add rax, rcx                        
0x18875:	mov rax, qword ptr [rax]            #    char *|n|ame1 = this->dir_entry[this_entry].name;
0x18878:	mov qword ptr [rbp - 0x48], rax     
0x1887c:	mov rax, qword ptr [rbp - 0xa0]     #    char *name2 = other|-|>dir_entry[other_entry].name;
0x18883:	mov rcx, qword ptr [rax + 0x38]     
0x18887:	mov eax, dword ptr [rbp - 0x90]     #    char *name2 = other->dir_entry|[|other_entry].name;
0x1888d:	movsxd rdx, eax                     
0x18890:	mov rax, rdx                        
0x18893:	shl rax, 2                          
0x18897:	add rax, rdx                        
0x1889a:	shl rax, 4                          
0x1889e:	add rax, rcx                        
0x188a1:	mov rax, qword ptr [rax]            #    char *|n|ame2 = other->dir_entry[other_entry].name;
0x188a4:	mov qword ptr [rbp - 0x40], rax     
0x188a8:	mov rax, qword ptr [rbp - 0x48]     #    char *|f|ile1 = name1;
0x188ac:	mov qword ptr [rbp - 0x38], rax     
0x188b0:	mov dword ptr [rbp - 0x7c], 0       #    int |i|s_special1=0;
0x188b7:	mov dword ptr [rbp - 0x78], 0       #    int |i|s_special2=0;
0x188be:	mov dword ptr [rbp - 0x74], 0       #    int |m|ismatch=0;
0x188c5:	mov qword ptr [rbp - 0x50], 0       #    off64_t |s|ize=0;
0x188cd:	mov rax, qword ptr [rbp - 0xa8]     #    *this_size = *other_size |=| 0;
0x188d4:	mov qword ptr [rax], 0              
0x188db:	mov rax, qword ptr [rbp - 0xa8]     #    *this_size = |*|other_size = 0;
0x188e2:	mov rdx, qword ptr [rax]            
0x188e5:	mov rax, qword ptr [rbp - 0x98]     #    *this_size |=| *other_size = 0;
0x188ec:	mov qword ptr [rax], rdx            
0x188ef:	mov rax, qword ptr [rbp - 0x88]     #    if(|I|S_SPECIAL(this->dir_entry[this_entry].mode))
0x188f6:	mov rcx, qword ptr [rax + 0x38]     
0x188fa:	mov eax, dword ptr [rbp - 0x8c]     
0x18900:	movsxd rdx, eax                     
0x18903:	mov rax, rdx                        
0x18906:	shl rax, 2                          
0x1890a:	add rax, rdx                        
0x1890d:	shl rax, 4                          
0x18911:	add rax, rcx                        
0x18914:	mov eax, dword ptr [rax + 0x10]     
0x18917:	and eax, 0xf000                     
0x1891c:	cmp eax, 0xa000                     #    if|(|IS_SPECIAL(this->dir_entry[this_entry].mode))
0x18921:	je 0x18992                          
0x18923:	mov rax, qword ptr [rbp - 0x88]     #    if(|I|S_SPECIAL(this->dir_entry[this_entry].mode))
0x1892a:	mov rcx, qword ptr [rax + 0x38]     
0x1892e:	mov eax, dword ptr [rbp - 0x8c]     
0x18934:	movsxd rdx, eax                     
0x18937:	mov rax, rdx                        
0x1893a:	shl rax, 2                          
0x1893e:	add rax, rdx                        
0x18941:	shl rax, 4                          
0x18945:	add rax, rcx                        
0x18948:	mov eax, dword ptr [rax + 0x10]     
0x1894b:	and eax, 0xf000                     
0x18950:	cmp eax, 0x4000                     
0x18955:	je 0x18992                          
0x18957:	mov rax, qword ptr [rbp - 0x88]     #    if(|I|S_SPECIAL(this->dir_entry[this_entry].mode))
0x1895e:	mov rcx, qword ptr [rax + 0x38]     
0x18962:	mov eax, dword ptr [rbp - 0x8c]     
0x18968:	movsxd rdx, eax                     
0x1896b:	mov rax, rdx                        
0x1896e:	shl rax, 2                          
0x18972:	add rax, rdx                        
0x18975:	shl rax, 4                          
0x18979:	add rax, rcx                        
0x1897c:	mov eax, dword ptr [rax + 0x10]     
0x1897f:	and eax, 0xf000                     
0x18984:	cmp eax, 0x8000                     
0x18989:	je 0x18992                          
0x1898b:	mov dword ptr [rbp - 0x7c], 1       #	is_special1|=|1;
0x18992:	mov rax, qword ptr [rbp - 0xa0]     #    if(|I|S_SPECIAL(other->dir_entry[this_entry].mode))
0x18999:	mov rcx, qword ptr [rax + 0x38]     
0x1899d:	mov eax, dword ptr [rbp - 0x8c]     
0x189a3:	movsxd rdx, eax                     
0x189a6:	mov rax, rdx                        
0x189a9:	shl rax, 2                          
0x189ad:	add rax, rdx                        
0x189b0:	shl rax, 4                          
0x189b4:	add rax, rcx                        
0x189b7:	mov eax, dword ptr [rax + 0x10]     
0x189ba:	and eax, 0xf000                     
0x189bf:	cmp eax, 0xa000                     #    if|(|IS_SPECIAL(other->dir_entry[this_entry].mode))
0x189c4:	je 0x18a35                          
0x189c6:	mov rax, qword ptr [rbp - 0xa0]     #    if(|I|S_SPECIAL(other->dir_entry[this_entry].mode))
0x189cd:	mov rcx, qword ptr [rax + 0x38]     
0x189d1:	mov eax, dword ptr [rbp - 0x8c]     
0x189d7:	movsxd rdx, eax                     
0x189da:	mov rax, rdx                        
0x189dd:	shl rax, 2                          
0x189e1:	add rax, rdx                        
0x189e4:	shl rax, 4                          
0x189e8:	add rax, rcx                        
0x189eb:	mov eax, dword ptr [rax + 0x10]     
0x189ee:	and eax, 0xf000                     
0x189f3:	cmp eax, 0x4000                     
0x189f8:	je 0x18a35                          
0x189fa:	mov rax, qword ptr [rbp - 0xa0]     #    if(|I|S_SPECIAL(other->dir_entry[this_entry].mode))
0x18a01:	mov rcx, qword ptr [rax + 0x38]     
0x18a05:	mov eax, dword ptr [rbp - 0x8c]     
0x18a0b:	movsxd rdx, eax                     
0x18a0e:	mov rax, rdx                        
0x18a11:	shl rax, 2                          
0x18a15:	add rax, rdx                        
0x18a18:	shl rax, 4                          
0x18a1c:	add rax, rcx                        
0x18a1f:	mov eax, dword ptr [rax + 0x10]     
0x18a22:	and eax, 0xf000                     
0x18a27:	cmp eax, 0x8000                     
0x18a2c:	je 0x18a35                          
0x18a2e:	mov dword ptr [rbp - 0x78], 1       #	is_special2|=|1;
0x18a35:	cmp dword ptr [rbp - 0x7c], 0       #    if|(|is_special1 && is_special2)
0x18a39:	je 0x18a4e                          
0x18a3b:	cmp dword ptr [rbp - 0x78], 0       #    if(is_special1 |&|& is_special2)
0x18a3f:	je 0x18a4e                          
0x18a41:	mov qword ptr [rbp - 0x50], 0       #	size|=|0;
0x18a49:	jmp 0x18b18                         
0x18a4e:	cmp dword ptr [rbp - 0x7c], 0       #    else if|(|is_special1)
0x18a52:	je 0x18a86                          
0x18a54:	mov rax, qword ptr [rbp - 0xa0]     #	size=(off64_t)other|-|>dir_entry[other_entry].size;
0x18a5b:	mov rcx, qword ptr [rax + 0x38]     
0x18a5f:	mov eax, dword ptr [rbp - 0x90]     #	size=(off64_t)other->dir_entry|[|other_entry].size;
0x18a65:	movsxd rdx, eax                     
0x18a68:	mov rax, rdx                        
0x18a6b:	shl rax, 2                          
0x18a6f:	add rax, rdx                        
0x18a72:	shl rax, 4                          
0x18a76:	add rax, rcx                        
0x18a79:	mov rax, qword ptr [rax + 8]        #	size|=|(off64_t)other->dir_entry[other_entry].size;
0x18a7d:	mov qword ptr [rbp - 0x50], rax     
0x18a81:	jmp 0x18b18                         
0x18a86:	cmp dword ptr [rbp - 0x78], 0       #    else if|(|is_special2)
0x18a8a:	je 0x18abb                          
0x18a8c:	mov rax, qword ptr [rbp - 0x88]     #	size=(off64_t)this|-|>dir_entry[this_entry].size;
0x18a93:	mov rcx, qword ptr [rax + 0x38]     
0x18a97:	mov eax, dword ptr [rbp - 0x8c]     #	size=(off64_t)this->dir_entry|[|this_entry].size;
0x18a9d:	movsxd rdx, eax                     
0x18aa0:	mov rax, rdx                        
0x18aa3:	shl rax, 2                          
0x18aa7:	add rax, rdx                        
0x18aaa:	shl rax, 4                          
0x18aae:	add rax, rcx                        
0x18ab1:	mov rax, qword ptr [rax + 8]        #	size|=|(off64_t)this->dir_entry[this_entry].size;
0x18ab5:	mov qword ptr [rbp - 0x50], rax     
0x18ab9:	jmp 0x18b18                         
0x18abb:	mov rax, qword ptr [rbp - 0x88]     #	size=(off64_t)|m|ax(this->dir_entry[this_entry].size,
0x18ac2:	mov rcx, qword ptr [rax + 0x38]     
0x18ac6:	mov eax, dword ptr [rbp - 0x8c]     
0x18acc:	movsxd rdx, eax                     
0x18acf:	mov rax, rdx                        
0x18ad2:	shl rax, 2                          
0x18ad6:	add rax, rdx                        
0x18ad9:	shl rax, 4                          
0x18add:	add rax, rcx                        
0x18ae0:	mov rdx, qword ptr [rax + 8]        
0x18ae4:	mov rax, qword ptr [rbp - 0xa0]     
0x18aeb:	mov rsi, qword ptr [rax + 0x38]     
0x18aef:	mov eax, dword ptr [rbp - 0x90]     
0x18af5:	movsxd rcx, eax                     
0x18af8:	mov rax, rcx                        
0x18afb:	shl rax, 2                          
0x18aff:	add rax, rcx                        
0x18b02:	shl rax, 4                          
0x18b06:	add rax, rsi                        
0x18b09:	mov rax, qword ptr [rax + 8]        
0x18b0d:	cmp rdx, rax                        #	size|=|(off64_t)max(this->dir_entry[this_entry].size,
0x18b10:	cmovge rax, rdx                     
0x18b14:	mov qword ptr [rbp - 0x50], rax     
0x18b18:	cmp qword ptr [rbp - 0x50], 0       #    if |(|(size == 0) && !(is_special1&&is_special2))
0x18b1d:	jne 0x18b35                         
0x18b1f:	cmp dword ptr [rbp - 0x7c], 0       #    if ((size == 0) |&|& !(is_special1&&is_special2))
0x18b23:	je 0x18b2b                          
0x18b25:	cmp dword ptr [rbp - 0x78], 0       #    if ((size == 0) && |!|(is_special1&&is_special2))
0x18b29:	jne 0x18b35                         
0x18b2b:	mov eax, 0                          #	return |0|;
0x18b30:	jmp 0x1906f                         
0x18b35:	mov rax, qword ptr [rbp - 0xa0]     #    file2 = xmalloc(strlen(other|-|>path) + 1 + strlen(name2) + 1);
0x18b3c:	mov rax, qword ptr [rax + 0x18]     
0x18b40:	mov rdi, rax                        #    file2 = xmalloc(|s|trlen(other->path) + 1 + strlen(name2) + 1);
0x18b43:	call 0x4960                         
0x18b48:	mov rbx, rax                        
0x18b4b:	mov rax, qword ptr [rbp - 0x40]     #    file2 = xmalloc(strlen(other->path) + 1 + |s|trlen(name2) + 1);
0x18b4f:	mov rdi, rax                        
0x18b52:	call 0x4960                         
0x18b57:	add rax, rbx                        #    file2 = xmalloc(strlen(other->path) + 1 |+| strlen(name2) + 1);
0x18b5a:	add rax, 2                          #    file2 = |x|malloc(strlen(other->path) + 1 + strlen(name2) + 1);
0x18b5e:	mov rdi, rax                        
0x18b61:	call 0x24650                        
0x18b66:	mov qword ptr [rbp - 0x30], rax     
0x18b6a:	mov rax, qword ptr [rbp - 0xa0]     #    |s|printf(file2, "%s/%s", other->path, name2);
0x18b71:	mov rdx, qword ptr [rax + 0x18]     
0x18b75:	mov rcx, qword ptr [rbp - 0x40]     
0x18b79:	mov rax, qword ptr [rbp - 0x30]     
0x18b7d:	lea rsi, [rip + 0xfc4b]             
0x18b84:	mov rdi, rax                        
0x18b87:	mov eax, 0                          
0x18b8c:	call 0x4dd0                         
0x18b91:	mov rax, qword ptr [rbp - 0x38]     #    msg = xmalloc(32 + |s|trlen(file1) + 1);
0x18b95:	mov rdi, rax                        
0x18b98:	call 0x4960                         
0x18b9d:	add rax, 0x21                       #    msg = |x|malloc(32 + strlen(file1) + 1);
0x18ba1:	mov rdi, rax                        
0x18ba4:	call 0x24650                        
0x18ba9:	mov qword ptr [rbp - 0x28], rax     
0x18bad:	cmp qword ptr [rbp - 0x50], 0       #    if|(|!size)
0x18bb2:	jne 0x18bd5                         
0x18bb4:	mov rdx, qword ptr [rbp - 0x38]     #	|s|printf(msg, "(CMP) %s", file1);
0x18bb8:	mov rax, qword ptr [rbp - 0x28]     
0x18bbc:	lea rcx, [rip + 0xfef7]             
0x18bc3:	mov rsi, rcx                        
0x18bc6:	mov rdi, rax                        
0x18bc9:	mov eax, 0                          
0x18bce:	call 0x4dd0                         
0x18bd3:	jmp 0x18bf4                         
0x18bd5:	mov rdx, qword ptr [rbp - 0x38]     #	|s|printf(msg, "(CMP) [  0%%] %s", file1);
0x18bd9:	mov rax, qword ptr [rbp - 0x28]     
0x18bdd:	lea rcx, [rip + 0xfedf]             
0x18be4:	mov rsi, rcx                        
0x18be7:	mov rdi, rax                        
0x18bea:	mov eax, 0                          
0x18bef:	call 0x4dd0                         
0x18bf4:	mov rax, qword ptr [rbp - 0x28]     #    |s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
0x18bf8:	mov edx, 1                          
0x18bfd:	mov esi, 1                          
0x18c02:	mov rdi, rax                        
0x18c05:	call 0x107d0                        
0x18c0a:	mov eax, 0                          #    |t|ty_update();
0x18c0f:	call 0xb4b7                         
0x18c14:	mov rax, qword ptr [rbp - 0x28]     #    |x|free(msg);
0x18c18:	mov rdi, rax                        
0x18c1b:	call 0x1eeae                        
0x18c20:	mov rax, qword ptr [rbp - 0x38]     #    if ((fd1 = |o|pen64(file1, O_RDONLY | O_BINARY)) == -1)
0x18c24:	mov esi, 0                          
0x18c29:	mov rdi, rax                        
0x18c2c:	mov eax, 0                          
0x18c31:	call 0x4ce0                         
0x18c36:	mov dword ptr [rbp - 0x6c], eax     
0x18c39:	cmp dword ptr [rbp - 0x6c], -1      #    if |(|(fd1 = open64(file1, O_RDONLY | O_BINARY)) == -1)
0x18c3d:	jne 0x18c4b                         
0x18c3f:	mov rax, -4                         #	return |C|F_OPEN1;
0x18c46:	jmp 0x1906f                         
0x18c4b:	mov rax, qword ptr [rbp - 0x30]     #    if ((fd2 = |o|pen64(file2, O_RDONLY | O_BINARY)) == -1)
0x18c4f:	mov esi, 0                          
0x18c54:	mov rdi, rax                        
0x18c57:	mov eax, 0                          
0x18c5c:	call 0x4ce0                         
0x18c61:	mov dword ptr [rbp - 0x68], eax     
0x18c64:	cmp dword ptr [rbp - 0x68], -1      #    if |(|(fd2 = open64(file2, O_RDONLY | O_BINARY)) == -1)
0x18c68:	jne 0x18c8c                         
0x18c6a:	mov rax, qword ptr [rbp - 0x30]     #	|x|free(file2);
0x18c6e:	mov rdi, rax                        
0x18c71:	call 0x1eeae                        
0x18c76:	mov eax, dword ptr [rbp - 0x6c]     #	|c|lose(fd1);
0x18c79:	mov edi, eax                        
0x18c7b:	call 0x4a70                         
0x18c80:	mov rax, -5                         #	return |C|F_OPEN2;
0x18c87:	jmp 0x1906f                         
0x18c8c:	mov rax, qword ptr [rbp - 0x30]     #    |x|free(file2);
0x18c90:	mov rdi, rax                        
0x18c93:	call 0x1eeae                        
0x18c98:	mov edi, 0x8000                     #    buf1 = |x|malloc(CMP_BUFFER_SIZE);
0x18c9d:	call 0x24650                        
0x18ca2:	mov qword ptr [rbp - 0x20], rax     
0x18ca6:	mov edi, 0x8000                     #    buf2 = |x|malloc(CMP_BUFFER_SIZE);
0x18cab:	call 0x24650                        
0x18cb0:	mov qword ptr [rbp - 0x18], rax     
0x18cb4:	mov rax, qword ptr [rbp - 0x38]     #    msg = xmalloc(32 + |s|trlen(file1) + 1);
0x18cb8:	mov rdi, rax                        
0x18cbb:	call 0x4960                         
0x18cc0:	add rax, 0x21                       #    msg = |x|malloc(32 + strlen(file1) + 1);
0x18cc4:	mov rdi, rax                        
0x18cc7:	call 0x24650                        
0x18ccc:	mov qword ptr [rbp - 0x28], rax     
0x18cd0:	mov qword ptr [rbp - 0x58], 0       #    for(n|=|0 ; ; )
0x18cd8:	mov eax, 0                          #	if (|c|anceled())
0x18cdd:	call 0x15065                        
0x18ce2:	test eax, eax                       #	if |(|canceled())
0x18ce4:	je 0x18cf2                          
0x18ce6:	mov dword ptr [rbp - 0x80], 1       #	    aborted |=| 1;
0x18ced:	jmp 0x18ee8                         #	    |b|reak;
0x18cf2:	mov edi, 1                          #	|s|ignals(ON);
0x18cf7:	call 0x1eaed                        
0x18cfc:	mov rcx, qword ptr [rbp - 0x20]     #	read1 = |r|ead(fd1, buf1, CMP_BUFFER_SIZE);
0x18d00:	mov eax, dword ptr [rbp - 0x6c]     
0x18d03:	mov edx, 0x8000                     
0x18d08:	mov rsi, rcx                        
0x18d0b:	mov edi, eax                        
0x18d0d:	call 0x4780                         
0x18d12:	mov dword ptr [rbp - 0x64], eax     #	read1 |=| read(fd1, buf1, CMP_BUFFER_SIZE);
0x18d15:	mov edi, 0                          #	|s|ignals(OFF);
0x18d1a:	call 0x1eaed                        
0x18d1f:	cmp dword ptr [rbp - 0x64], 0       #	if |(|read1 < 0)
0x18d23:	jns 0x18d45                         
0x18d25:	mov eax, dword ptr [rbp - 0x6c]     #	    |c|lose(fd1);
0x18d28:	mov edi, eax                        
0x18d2a:	call 0x4a70                         
0x18d2f:	mov eax, dword ptr [rbp - 0x68]     #	    |c|lose(fd2);
0x18d32:	mov edi, eax                        
0x18d34:	call 0x4a70                         
0x18d39:	mov rax, -2                         #	    return |C|F_READ1;
0x18d40:	jmp 0x1906f                         
0x18d45:	mov rax, qword ptr [rbp - 0x98]     #	*this_size |+|= read1;
0x18d4c:	mov rdx, qword ptr [rax]            
0x18d4f:	mov eax, dword ptr [rbp - 0x64]     
0x18d52:	cdqe                                
0x18d54:	add rdx, rax                        
0x18d57:	mov rax, qword ptr [rbp - 0x98]     
0x18d5e:	mov qword ptr [rax], rdx            
0x18d61:	mov edi, 1                          #	|s|ignals(ON);
0x18d66:	call 0x1eaed                        
0x18d6b:	mov rcx, qword ptr [rbp - 0x18]     #	read2 = |r|ead(fd2, buf2, CMP_BUFFER_SIZE);
0x18d6f:	mov eax, dword ptr [rbp - 0x68]     
0x18d72:	mov edx, 0x8000                     
0x18d77:	mov rsi, rcx                        
0x18d7a:	mov edi, eax                        
0x18d7c:	call 0x4780                         
0x18d81:	mov dword ptr [rbp - 0x60], eax     #	read2 |=| read(fd2, buf2, CMP_BUFFER_SIZE);
0x18d84:	mov edi, 0                          #	|s|ignals(OFF);
0x18d89:	call 0x1eaed                        
0x18d8e:	cmp dword ptr [rbp - 0x60], 0       #	if |(|read2 < 0)
0x18d92:	jns 0x18db4                         
0x18d94:	mov eax, dword ptr [rbp - 0x6c]     #	    |c|lose(fd1);
0x18d97:	mov edi, eax                        
0x18d99:	call 0x4a70                         
0x18d9e:	mov eax, dword ptr [rbp - 0x68]     #	    |c|lose(fd2);
0x18da1:	mov edi, eax                        
0x18da3:	call 0x4a70                         
0x18da8:	mov rax, -3                         #	    return |C|F_READ2;
0x18daf:	jmp 0x1906f                         
0x18db4:	mov rax, qword ptr [rbp - 0xa8]     #	*other_size |+|= read2;
0x18dbb:	mov rdx, qword ptr [rax]            
0x18dbe:	mov eax, dword ptr [rbp - 0x60]     
0x18dc1:	cdqe                                
0x18dc3:	add rdx, rax                        
0x18dc6:	mov rax, qword ptr [rbp - 0xa8]     
0x18dcd:	mov qword ptr [rax], rdx            
0x18dd0:	mov edx, dword ptr [rbp - 0x64]     #	bytes_read |=| min(read1, read2);
0x18dd3:	mov eax, dword ptr [rbp - 0x60]     
0x18dd6:	cmp edx, eax                        
0x18dd8:	cmovle eax, edx                     
0x18ddb:	mov dword ptr [rbp - 0x5c], eax     
0x18dde:	cmp dword ptr [rbp - 0x5c], 0       #	if|(|bytes_read == 0)
0x18de2:	je 0x18ee7                          
0x18de8:	mov eax, dword ptr [rbp - 0x5c]     #	if (|m|emcmp(buf1, buf2, bytes_read) != 0)
0x18deb:	movsxd rdx, eax                     
0x18dee:	mov rcx, qword ptr [rbp - 0x18]     
0x18df2:	mov rax, qword ptr [rbp - 0x20]     
0x18df6:	mov rsi, rcx                        
0x18df9:	mov rdi, rax                        
0x18dfc:	call 0x4ab0                         
0x18e01:	test eax, eax                       #	if |(|memcmp(buf1, buf2, bytes_read) != 0)
0x18e03:	je 0x18e56                          
0x18e05:	mov dword ptr [rbp - 0x70], 0       #	    for (i |=| 0; i < bytes_read; i++)
0x18e0c:	jmp 0x18e36                         #	    |f|or (i = 0; i < bytes_read; i++)
0x18e0e:	mov eax, dword ptr [rbp - 0x70]     #		if (buf1|[|i] != buf2[i])
0x18e11:	movsxd rdx, eax                     
0x18e14:	mov rax, qword ptr [rbp - 0x20]     
0x18e18:	add rax, rdx                        
0x18e1b:	movzx edx, byte ptr [rax]           
0x18e1e:	mov eax, dword ptr [rbp - 0x70]     #		if (buf1[i] != buf2|[|i])
0x18e21:	movsxd rcx, eax                     
0x18e24:	mov rax, qword ptr [rbp - 0x18]     
0x18e28:	add rax, rcx                        
0x18e2b:	movzx eax, byte ptr [rax]           
0x18e2e:	cmp dl, al                          #		if |(|buf1[i] != buf2[i])
0x18e30:	jne 0x18e40                         
0x18e32:	add dword ptr [rbp - 0x70], 1       #	    for (i = 0; i < bytes_read; i|+|+)
0x18e36:	mov eax, dword ptr [rbp - 0x70]     #	    for (i = 0; i |<| bytes_read; i++)
0x18e39:	cmp eax, dword ptr [rbp - 0x5c]     
0x18e3c:	jl 0x18e0e                          
0x18e3e:	jmp 0x18e41                         
0x18e40:	nop                                 #		    |b|reak;
0x18e41:	mov eax, dword ptr [rbp - 0x70]     #	    n |+|= i;
0x18e44:	cdqe                                
0x18e46:	add qword ptr [rbp - 0x58], rax     
0x18e4a:	mov dword ptr [rbp - 0x74], 1       #	    mismatch|=|1;
0x18e51:	jmp 0x18ee8                         #	    |b|reak;
0x18e56:	mov eax, dword ptr [rbp - 0x5c]     #	n |+|= bytes_read;
0x18e59:	cdqe                                
0x18e5b:	add qword ptr [rbp - 0x58], rax     
0x18e5f:	cmp qword ptr [rbp - 0x50], 0       #	if|(|!size)
0x18e64:	jne 0x18e87                         
0x18e66:	mov rdx, qword ptr [rbp - 0x38]     #	    |s|printf(msg, "(CMP) %s", file1);
0x18e6a:	mov rax, qword ptr [rbp - 0x28]     
0x18e6e:	lea rcx, [rip + 0xfc45]             
0x18e75:	mov rsi, rcx                        
0x18e78:	mov rdi, rax                        
0x18e7b:	mov eax, 0                          
0x18e80:	call 0x4dd0                         
0x18e85:	jmp 0x18ec2                         
0x18e87:	mov rdx, qword ptr [rbp - 0x50]     #	    |s|printf(msg, "(CMP) [%3d%%] %s",
0x18e8b:	mov rax, qword ptr [rbp - 0x58]     
0x18e8f:	mov rsi, rdx                        
0x18e92:	mov rdi, rax                        
0x18e95:	mov eax, 0                          
0x18e9a:	call 0x152ff                        
0x18e9f:	mov esi, eax                        
0x18ea1:	mov rdx, qword ptr [rbp - 0x38]     
0x18ea5:	mov rax, qword ptr [rbp - 0x28]     
0x18ea9:	mov rcx, rdx                        
0x18eac:	mov edx, esi                        
0x18eae:	lea rsi, [rip + 0xfc1f]             
0x18eb5:	mov rdi, rax                        
0x18eb8:	mov eax, 0                          
0x18ebd:	call 0x4dd0                         
0x18ec2:	mov rax, qword ptr [rbp - 0x28]     #	|s|tatus(msg, STATUS_WARNING, STATUS_LEFT);
0x18ec6:	mov edx, 1                          
0x18ecb:	mov esi, 1                          
0x18ed0:	mov rdi, rax                        
0x18ed3:	call 0x107d0                        
0x18ed8:	mov eax, 0                          #	|t|ty_update();
0x18edd:	call 0xb4b7                         
0x18ee2:	jmp 0x18cd8                         #    |{|
0x18ee7:	nop                                 #	    |b|reak;
0x18ee8:	cmp dword ptr [rbp - 0x74], 0       #    if|(|mismatch)
0x18eec:	je 0x19024                          
0x18ef2:	cmp dword ptr [rbp - 0x7c], 0       #	if|(|is_special1)
0x18ef6:	je 0x18f58                          
0x18ef8:	mov edi, 1                          #	    |s|ignals(ON);
0x18efd:	call 0x1eaed                        
0x18f02:	mov rcx, qword ptr [rbp - 0x20]     #		read1 = |r|ead(fd1, buf1, CMP_BUFFER_SIZE);
0x18f06:	mov eax, dword ptr [rbp - 0x6c]     
0x18f09:	mov edx, 0x8000                     
0x18f0e:	mov rsi, rcx                        
0x18f11:	mov edi, eax                        
0x18f13:	call 0x4780                         
0x18f18:	mov dword ptr [rbp - 0x64], eax     #		read1 |=| read(fd1, buf1, CMP_BUFFER_SIZE);
0x18f1b:	cmp dword ptr [rbp - 0x64], 0       #	    } while((read1 > 0) |&|& (*this_size += read1));
0x18f1f:	jle 0x18f4c                         
0x18f21:	mov rax, qword ptr [rbp - 0x98]     #	    } while((read1 > 0) && (*this_size |+|= read1));
0x18f28:	mov rdx, qword ptr [rax]            
0x18f2b:	mov eax, dword ptr [rbp - 0x64]     
0x18f2e:	cdqe                                
0x18f30:	add rdx, rax                        
0x18f33:	mov rax, qword ptr [rbp - 0x98]     
0x18f3a:	mov qword ptr [rax], rdx            
0x18f3d:	mov rax, qword ptr [rbp - 0x98]     
0x18f44:	mov rax, qword ptr [rax]            
0x18f47:	test rax, rax                       #	    } while((read1 > 0) |&|& (*this_size += read1));
0x18f4a:	jne 0x18f02                         
0x18f4c:	mov edi, 0                          #	    |s|ignals(OFF);
0x18f51:	call 0x1eaed                        
0x18f56:	jmp 0x18f8b                         
0x18f58:	mov rax, qword ptr [rbp - 0x88]     #	    *this_size=this|-|>dir_entry[this_entry].size;
0x18f5f:	mov rcx, qword ptr [rax + 0x38]     
0x18f63:	mov eax, dword ptr [rbp - 0x8c]     #	    *this_size=this->dir_entry|[|this_entry].size;
0x18f69:	movsxd rdx, eax                     
0x18f6c:	mov rax, rdx                        
0x18f6f:	shl rax, 2                          
0x18f73:	add rax, rdx                        
0x18f76:	shl rax, 4                          
0x18f7a:	add rax, rcx                        
0x18f7d:	mov rdx, qword ptr [rax + 8]        #	    *this_size=this->dir_entry[this_entry]|.|size;
0x18f81:	mov rax, qword ptr [rbp - 0x98]     #	    *this_size|=|this->dir_entry[this_entry].size;
0x18f88:	mov qword ptr [rax], rdx            
0x18f8b:	cmp dword ptr [rbp - 0x78], 0       #	if|(|is_special2)
0x18f8f:	je 0x18ff1                          
0x18f91:	mov edi, 1                          #	    |s|ignals(ON);
0x18f96:	call 0x1eaed                        
0x18f9b:	mov rcx, qword ptr [rbp - 0x18]     #		read2 = |r|ead(fd2, buf2, CMP_BUFFER_SIZE);
0x18f9f:	mov eax, dword ptr [rbp - 0x68]     
0x18fa2:	mov edx, 0x8000                     
0x18fa7:	mov rsi, rcx                        
0x18faa:	mov edi, eax                        
0x18fac:	call 0x4780                         
0x18fb1:	mov dword ptr [rbp - 0x60], eax     #		read2 |=| read(fd2, buf2, CMP_BUFFER_SIZE);
0x18fb4:	cmp dword ptr [rbp - 0x60], 0       #	    } while((read2 > 0) |&|& (*other_size += read2));
0x18fb8:	jle 0x18fe5                         
0x18fba:	mov rax, qword ptr [rbp - 0xa8]     #	    } while((read2 > 0) && (*other_size |+|= read2));
0x18fc1:	mov rdx, qword ptr [rax]            
0x18fc4:	mov eax, dword ptr [rbp - 0x60]     
0x18fc7:	cdqe                                
0x18fc9:	add rdx, rax                        
0x18fcc:	mov rax, qword ptr [rbp - 0xa8]     
0x18fd3:	mov qword ptr [rax], rdx            
0x18fd6:	mov rax, qword ptr [rbp - 0xa8]     
0x18fdd:	mov rax, qword ptr [rax]            
0x18fe0:	test rax, rax                       #	    } while((read2 > 0) |&|& (*other_size += read2));
0x18fe3:	jne 0x18f9b                         
0x18fe5:	mov edi, 0                          #	    |s|ignals(OFF);
0x18fea:	call 0x1eaed                        
0x18fef:	jmp 0x19024                         
0x18ff1:	mov rax, qword ptr [rbp - 0xa0]     #	    *other_size=other|-|>dir_entry[other_entry].size;
0x18ff8:	mov rcx, qword ptr [rax + 0x38]     
0x18ffc:	mov eax, dword ptr [rbp - 0x90]     #	    *other_size=other->dir_entry|[|other_entry].size;
0x19002:	movsxd rdx, eax                     
0x19005:	mov rax, rdx                        
0x19008:	shl rax, 2                          
0x1900c:	add rax, rdx                        
0x1900f:	shl rax, 4                          
0x19013:	add rax, rcx                        
0x19016:	mov rdx, qword ptr [rax + 8]        #	    *other_size=other->dir_entry[other_entry]|.|size;
0x1901a:	mov rax, qword ptr [rbp - 0xa8]     #	    *other_size|=|other->dir_entry[other_entry].size;
0x19021:	mov qword ptr [rax], rdx            
0x19024:	mov rax, qword ptr [rbp - 0x28]     #    |x|free(msg);
0x19028:	mov rdi, rax                        
0x1902b:	call 0x1eeae                        
0x19030:	mov rax, qword ptr [rbp - 0x20]     #    |x|free(buf1);
0x19034:	mov rdi, rax                        
0x19037:	call 0x1eeae                        
0x1903c:	mov rax, qword ptr [rbp - 0x18]     #    |x|free(buf2);
0x19040:	mov rdi, rax                        
0x19043:	call 0x1eeae                        
0x19048:	mov eax, dword ptr [rbp - 0x6c]     #    |c|lose(fd1);
0x1904b:	mov edi, eax                        
0x1904d:	call 0x4a70                         
0x19052:	mov eax, dword ptr [rbp - 0x68]     #    |c|lose(fd2);
0x19055:	mov edi, eax                        
0x19057:	call 0x4a70                         
0x1905c:	cmp dword ptr [rbp - 0x80], 0       #    return aborted ? CF_ABORT |:| n;
0x19060:	jne 0x19068                         
0x19062:	mov rax, qword ptr [rbp - 0x58]     #    return aborted ? CF_ABORT |:| n;
0x19066:	jmp 0x1906f                         
0x19068:	mov rax, -1                         #    return aborted ? CF_ABORT |:| n;
0x1906f:	mov rbx, qword ptr [rbp - 8]        #|}|
0x19073:	leave                               
0x19074:	ret                                 
0x19075:	endbr64                             #|{|
0x19079:	push rbp                            
0x1907a:	mov rbp, rsp                        
0x1907d:	sub rsp, 0x50                       
0x19081:	mov qword ptr [rbp - 0x48], rdi     
0x19085:	mov qword ptr [rbp - 0x50], rsi     
0x19089:	mov rax, qword ptr fs:[0x28]        #|{|
0x19092:	mov qword ptr [rbp - 8], rax        
0x19096:	xor eax, eax                        
0x19098:	mov dword ptr [rbp - 0x34], 1       #    int |p|ermission = 1;
0x1909f:	mov rax, qword ptr [rbp - 0x48]     #    int |t|his_entry = this->current_entry;
0x190a3:	mov eax, dword ptr [rax + 0x28]     
0x190a6:	mov dword ptr [rbp - 0x30], eax     
0x190a9:	mov rax, qword ptr [rbp - 0x50]     #    int |o|ther_entry = other->current_entry;
